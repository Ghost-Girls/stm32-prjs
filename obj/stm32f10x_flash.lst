ARM GAS  /tmp/ccFIADOf.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_flash.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	FLASH_SetLatency
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  21              		.type	FLASH_SetLatency, %function
  22              	FLASH_SetLatency:
  23              	.LFB63:
  24              		.file 1 "common/stm32f10x_flash.c"
   1:common/stm32f10x_flash.c **** /**
   2:common/stm32f10x_flash.c ****   ******************************************************************************
   3:common/stm32f10x_flash.c ****   * @file    stm32f10x_flash.c
   4:common/stm32f10x_flash.c ****   * @author  MCD Application Team
   5:common/stm32f10x_flash.c ****   * @version V3.5.0
   6:common/stm32f10x_flash.c ****   * @date    11-March-2011
   7:common/stm32f10x_flash.c ****   * @brief   This file provides all the FLASH firmware functions.
   8:common/stm32f10x_flash.c ****   ******************************************************************************
   9:common/stm32f10x_flash.c ****   * @attention
  10:common/stm32f10x_flash.c ****   *
  11:common/stm32f10x_flash.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:common/stm32f10x_flash.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:common/stm32f10x_flash.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:common/stm32f10x_flash.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:common/stm32f10x_flash.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:common/stm32f10x_flash.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:common/stm32f10x_flash.c ****   *
  18:common/stm32f10x_flash.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:common/stm32f10x_flash.c ****   ******************************************************************************
  20:common/stm32f10x_flash.c ****   */
  21:common/stm32f10x_flash.c **** 
  22:common/stm32f10x_flash.c **** /* Includes ------------------------------------------------------------------*/
  23:common/stm32f10x_flash.c **** #include "stm32f10x_flash.h"
  24:common/stm32f10x_flash.c **** #include "stm32f10x_conf.h"
  25:common/stm32f10x_flash.c **** 
  26:common/stm32f10x_flash.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:common/stm32f10x_flash.c ****   * @{
  28:common/stm32f10x_flash.c ****   */
  29:common/stm32f10x_flash.c **** 
  30:common/stm32f10x_flash.c **** /** @defgroup FLASH 
  31:common/stm32f10x_flash.c ****   * @brief FLASH driver modules
  32:common/stm32f10x_flash.c ****   * @{
  33:common/stm32f10x_flash.c ****   */ 
ARM GAS  /tmp/ccFIADOf.s 			page 2


  34:common/stm32f10x_flash.c **** 
  35:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_TypesDefinitions
  36:common/stm32f10x_flash.c ****   * @{
  37:common/stm32f10x_flash.c ****   */
  38:common/stm32f10x_flash.c **** 
  39:common/stm32f10x_flash.c **** /**
  40:common/stm32f10x_flash.c ****   * @}
  41:common/stm32f10x_flash.c ****   */ 
  42:common/stm32f10x_flash.c **** 
  43:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_Defines
  44:common/stm32f10x_flash.c ****   * @{
  45:common/stm32f10x_flash.c ****   */ 
  46:common/stm32f10x_flash.c **** 
  47:common/stm32f10x_flash.c **** /* Flash Access Control Register bits */
  48:common/stm32f10x_flash.c **** #define ACR_LATENCY_Mask         ((uint32_t)0x00000038)
  49:common/stm32f10x_flash.c **** #define ACR_HLFCYA_Mask          ((uint32_t)0xFFFFFFF7)
  50:common/stm32f10x_flash.c **** #define ACR_PRFTBE_Mask          ((uint32_t)0xFFFFFFEF)
  51:common/stm32f10x_flash.c **** 
  52:common/stm32f10x_flash.c **** /* Flash Access Control Register bits */
  53:common/stm32f10x_flash.c **** #define ACR_PRFTBS_Mask          ((uint32_t)0x00000020) 
  54:common/stm32f10x_flash.c **** 
  55:common/stm32f10x_flash.c **** /* Flash Control Register bits */
  56:common/stm32f10x_flash.c **** #define CR_PG_Set                ((uint32_t)0x00000001)
  57:common/stm32f10x_flash.c **** #define CR_PG_Reset              ((uint32_t)0x00001FFE) 
  58:common/stm32f10x_flash.c **** #define CR_PER_Set               ((uint32_t)0x00000002)
  59:common/stm32f10x_flash.c **** #define CR_PER_Reset             ((uint32_t)0x00001FFD)
  60:common/stm32f10x_flash.c **** #define CR_MER_Set               ((uint32_t)0x00000004)
  61:common/stm32f10x_flash.c **** #define CR_MER_Reset             ((uint32_t)0x00001FFB)
  62:common/stm32f10x_flash.c **** #define CR_OPTPG_Set             ((uint32_t)0x00000010)
  63:common/stm32f10x_flash.c **** #define CR_OPTPG_Reset           ((uint32_t)0x00001FEF)
  64:common/stm32f10x_flash.c **** #define CR_OPTER_Set             ((uint32_t)0x00000020)
  65:common/stm32f10x_flash.c **** #define CR_OPTER_Reset           ((uint32_t)0x00001FDF)
  66:common/stm32f10x_flash.c **** #define CR_STRT_Set              ((uint32_t)0x00000040)
  67:common/stm32f10x_flash.c **** #define CR_LOCK_Set              ((uint32_t)0x00000080)
  68:common/stm32f10x_flash.c **** 
  69:common/stm32f10x_flash.c **** /* FLASH Mask */
  70:common/stm32f10x_flash.c **** #define RDPRT_Mask               ((uint32_t)0x00000002)
  71:common/stm32f10x_flash.c **** #define WRP0_Mask                ((uint32_t)0x000000FF)
  72:common/stm32f10x_flash.c **** #define WRP1_Mask                ((uint32_t)0x0000FF00)
  73:common/stm32f10x_flash.c **** #define WRP2_Mask                ((uint32_t)0x00FF0000)
  74:common/stm32f10x_flash.c **** #define WRP3_Mask                ((uint32_t)0xFF000000)
  75:common/stm32f10x_flash.c **** #define OB_USER_BFB2             ((uint16_t)0x0008)
  76:common/stm32f10x_flash.c **** 
  77:common/stm32f10x_flash.c **** /* FLASH Keys */
  78:common/stm32f10x_flash.c **** #define RDP_Key                  ((uint16_t)0x00A5)
  79:common/stm32f10x_flash.c **** #define FLASH_KEY1               ((uint32_t)0x45670123)
  80:common/stm32f10x_flash.c **** #define FLASH_KEY2               ((uint32_t)0xCDEF89AB)
  81:common/stm32f10x_flash.c **** 
  82:common/stm32f10x_flash.c **** /* FLASH BANK address */
  83:common/stm32f10x_flash.c **** #define FLASH_BANK1_END_ADDRESS   ((uint32_t)0x807FFFF)
  84:common/stm32f10x_flash.c **** 
  85:common/stm32f10x_flash.c **** /* Delay definition */   
  86:common/stm32f10x_flash.c **** #define EraseTimeout          ((uint32_t)0x000B0000)
  87:common/stm32f10x_flash.c **** #define ProgramTimeout        ((uint32_t)0x00002000)
  88:common/stm32f10x_flash.c **** /**
  89:common/stm32f10x_flash.c ****   * @}
  90:common/stm32f10x_flash.c ****   */ 
ARM GAS  /tmp/ccFIADOf.s 			page 3


  91:common/stm32f10x_flash.c **** 
  92:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_Macros
  93:common/stm32f10x_flash.c ****   * @{
  94:common/stm32f10x_flash.c ****   */
  95:common/stm32f10x_flash.c **** 
  96:common/stm32f10x_flash.c **** /**
  97:common/stm32f10x_flash.c ****   * @}
  98:common/stm32f10x_flash.c ****   */ 
  99:common/stm32f10x_flash.c **** 
 100:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_Variables
 101:common/stm32f10x_flash.c ****   * @{
 102:common/stm32f10x_flash.c ****   */
 103:common/stm32f10x_flash.c **** 
 104:common/stm32f10x_flash.c **** /**
 105:common/stm32f10x_flash.c ****   * @}
 106:common/stm32f10x_flash.c ****   */ 
 107:common/stm32f10x_flash.c **** 
 108:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_FunctionPrototypes
 109:common/stm32f10x_flash.c ****   * @{
 110:common/stm32f10x_flash.c ****   */
 111:common/stm32f10x_flash.c ****   
 112:common/stm32f10x_flash.c **** /**
 113:common/stm32f10x_flash.c ****   * @}
 114:common/stm32f10x_flash.c ****   */
 115:common/stm32f10x_flash.c **** 
 116:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_Functions
 117:common/stm32f10x_flash.c ****   * @{
 118:common/stm32f10x_flash.c ****   */
 119:common/stm32f10x_flash.c **** 
 120:common/stm32f10x_flash.c **** /**
 121:common/stm32f10x_flash.c **** @code  
 122:common/stm32f10x_flash.c ****  
 123:common/stm32f10x_flash.c ****  This driver provides functions to configure and program the Flash memory of all STM32F10x devices,
 124:common/stm32f10x_flash.c ****  including the latest STM32F10x_XL density devices. 
 125:common/stm32f10x_flash.c **** 
 126:common/stm32f10x_flash.c ****  STM32F10x_XL devices feature up to 1 Mbyte with dual bank architecture for read-while-write (RWW) 
 127:common/stm32f10x_flash.c ****     - bank1: fixed size of 512 Kbytes (256 pages of 2Kbytes each)
 128:common/stm32f10x_flash.c ****     - bank2: up to 512 Kbytes (up to 256 pages of 2Kbytes each)
 129:common/stm32f10x_flash.c ****  While other STM32F10x devices features only one bank with memory up to 512 Kbytes.
 130:common/stm32f10x_flash.c **** 
 131:common/stm32f10x_flash.c ****  In version V3.3.0, some functions were updated and new ones were added to support
 132:common/stm32f10x_flash.c ****  STM32F10x_XL devices. Thus some functions manages all devices, while other are 
 133:common/stm32f10x_flash.c ****  dedicated for XL devices only.
 134:common/stm32f10x_flash.c ****  
 135:common/stm32f10x_flash.c ****  The table below presents the list of available functions depending on the used STM32F10x devices. 
 136:common/stm32f10x_flash.c ****       
 137:common/stm32f10x_flash.c ****    ***************************************************
 138:common/stm32f10x_flash.c ****    * Legacy functions used for all STM32F10x devices *
 139:common/stm32f10x_flash.c ****    ***************************************************
 140:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 141:common/stm32f10x_flash.c ****    |       Functions prototypes         |STM32F10x_XL|Other STM32F10x|    Comments                 
 142:common/stm32f10x_flash.c ****    |                                    |   devices  |  devices      |                             
 143:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 144:common/stm32f10x_flash.c ****    |FLASH_SetLatency                    |    Yes     |      Yes      | No change                   
 145:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 146:common/stm32f10x_flash.c ****    |FLASH_HalfCycleAccessCmd            |    Yes     |      Yes      | No change                   
 147:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
ARM GAS  /tmp/ccFIADOf.s 			page 4


 148:common/stm32f10x_flash.c ****    |FLASH_PrefetchBufferCmd             |    Yes     |      Yes      | No change                   
 149:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 150:common/stm32f10x_flash.c ****    |FLASH_Unlock                        |    Yes     |      Yes      | - For STM32F10X_XL devices: 
 151:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: unlock 
 152:common/stm32f10x_flash.c ****    |                                    |            |               |   to FLASH_UnlockBank1 funct
 153:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 154:common/stm32f10x_flash.c ****    |FLASH_Lock                          |    Yes     |      Yes      | - For STM32F10X_XL devices: 
 155:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: lock Ba
 156:common/stm32f10x_flash.c ****    |                                    |            |               |   to FLASH_LockBank1 functio
 157:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 158:common/stm32f10x_flash.c ****    |FLASH_ErasePage                     |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 159:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: erase a
 160:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 161:common/stm32f10x_flash.c ****    |FLASH_EraseAllPages                 |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 162:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: erase a
 163:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 164:common/stm32f10x_flash.c ****    |FLASH_EraseOptionBytes              |    Yes     |      Yes      | No change                   
 165:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 166:common/stm32f10x_flash.c ****    |FLASH_ProgramWord                   |    Yes     |      Yes      | Updated to program up to 1MB
 167:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 168:common/stm32f10x_flash.c ****    |FLASH_ProgramHalfWord               |    Yes     |      Yes      | Updated to program up to 1MB
 169:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 170:common/stm32f10x_flash.c ****    |FLASH_ProgramOptionByteData         |    Yes     |      Yes      | No change                   
 171:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 172:common/stm32f10x_flash.c ****    |FLASH_EnableWriteProtection         |    Yes     |      Yes      | No change                   
 173:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 174:common/stm32f10x_flash.c ****    |FLASH_ReadOutProtection             |    Yes     |      Yes      | No change                   
 175:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 176:common/stm32f10x_flash.c ****    |FLASH_UserOptionByteConfig          |    Yes     |      Yes      | No change                   
 177:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 178:common/stm32f10x_flash.c ****    |FLASH_GetUserOptionByte             |    Yes     |      Yes      | No change                   
 179:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 180:common/stm32f10x_flash.c ****    |FLASH_GetWriteProtectionOptionByte  |    Yes     |      Yes      | No change                   
 181:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 182:common/stm32f10x_flash.c ****    |FLASH_GetReadOutProtectionStatus    |    Yes     |      Yes      | No change                   
 183:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 184:common/stm32f10x_flash.c ****    |FLASH_GetPrefetchBufferStatus       |    Yes     |      Yes      | No change                   
 185:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 186:common/stm32f10x_flash.c ****    |FLASH_ITConfig                      |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 187:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: enable 
 188:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 189:common/stm32f10x_flash.c ****    |FLASH_GetFlagStatus                 |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 190:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: return 
 191:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 192:common/stm32f10x_flash.c ****    |FLASH_ClearFlag                     |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 193:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: clear B
 194:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 195:common/stm32f10x_flash.c ****    |FLASH_GetStatus                     |    Yes     |      Yes      | - Return the status of Bank1
 196:common/stm32f10x_flash.c ****    |                                    |            |               |   equivalent to FLASH_GetBan
 197:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 198:common/stm32f10x_flash.c ****    |FLASH_WaitForLastOperation          |    Yes     |      Yes      | - Wait for Bank1 last operat
 199:common/stm32f10x_flash.c ****    |                                    |            |               |   equivalent to: FLASH_WaitF
 200:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 201:common/stm32f10x_flash.c **** 
 202:common/stm32f10x_flash.c ****    ************************************************************************************************
 203:common/stm32f10x_flash.c ****    * New functions used for all STM32F10x devices to manage Bank1:                                 
 204:common/stm32f10x_flash.c ****    *   - These functions are mainly useful for STM32F10x_XL density devices, to have separate contr
ARM GAS  /tmp/ccFIADOf.s 			page 5


 205:common/stm32f10x_flash.c ****    *   - For other devices, these functions are optional (covered by functions listed above)       
 206:common/stm32f10x_flash.c ****    ************************************************************************************************
 207:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 208:common/stm32f10x_flash.c ****    |       Functions prototypes         |STM32F10x_XL|Other STM32F10x|    Comments                 
 209:common/stm32f10x_flash.c ****    |                                    |   devices  |  devices      |                             
 210:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 211:common/stm32f10x_flash.c ****    | FLASH_UnlockBank1                  |    Yes     |      Yes      | - Unlock Bank1              
 212:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 213:common/stm32f10x_flash.c ****    |FLASH_LockBank1                     |    Yes     |      Yes      | - Lock Bank1                
 214:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 215:common/stm32f10x_flash.c ****    | FLASH_EraseAllBank1Pages           |    Yes     |      Yes      | - Erase all pages in Bank1  
 216:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 217:common/stm32f10x_flash.c ****    | FLASH_GetBank1Status               |    Yes     |      Yes      | - Return the status of Bank1
 218:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 219:common/stm32f10x_flash.c ****    | FLASH_WaitForLastBank1Operation    |    Yes     |      Yes      | - Wait for Bank1 last operat
 220:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 221:common/stm32f10x_flash.c **** 
 222:common/stm32f10x_flash.c ****    *****************************************************************************
 223:common/stm32f10x_flash.c ****    * New Functions used only with STM32F10x_XL density devices to manage Bank2 *
 224:common/stm32f10x_flash.c ****    *****************************************************************************
 225:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 226:common/stm32f10x_flash.c ****    |       Functions prototypes         |STM32F10x_XL|Other STM32F10x|    Comments                 
 227:common/stm32f10x_flash.c ****    |                                    |   devices  |  devices      |                             
 228:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 229:common/stm32f10x_flash.c ****    | FLASH_UnlockBank2                  |    Yes     |      No       | - Unlock Bank2              
 230:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 231:common/stm32f10x_flash.c ****    |FLASH_LockBank2                     |    Yes     |      No       | - Lock Bank2                
 232:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 233:common/stm32f10x_flash.c ****    | FLASH_EraseAllBank2Pages           |    Yes     |      No       | - Erase all pages in Bank2  
 234:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 235:common/stm32f10x_flash.c ****    | FLASH_GetBank2Status               |    Yes     |      No       | - Return the status of Bank2
 236:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 237:common/stm32f10x_flash.c ****    | FLASH_WaitForLastBank2Operation    |    Yes     |      No       | - Wait for Bank2 last operat
 238:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 239:common/stm32f10x_flash.c ****    | FLASH_BootConfig                   |    Yes     |      No       | - Configure to boot from Ban
 240:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 241:common/stm32f10x_flash.c **** @endcode
 242:common/stm32f10x_flash.c **** */
 243:common/stm32f10x_flash.c **** 
 244:common/stm32f10x_flash.c **** 
 245:common/stm32f10x_flash.c **** /**
 246:common/stm32f10x_flash.c ****   * @brief  Sets the code latency value.
 247:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 248:common/stm32f10x_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 249:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
 250:common/stm32f10x_flash.c ****   *     @arg FLASH_Latency_0: FLASH Zero Latency cycle
 251:common/stm32f10x_flash.c ****   *     @arg FLASH_Latency_1: FLASH One Latency cycle
 252:common/stm32f10x_flash.c ****   *     @arg FLASH_Latency_2: FLASH Two Latency cycles
 253:common/stm32f10x_flash.c ****   * @retval None
 254:common/stm32f10x_flash.c ****   */
 255:common/stm32f10x_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 256:common/stm32f10x_flash.c **** {
  25              		.loc 1 256 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 16
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
ARM GAS  /tmp/ccFIADOf.s 			page 6


  30 0000 80B4     		push	{r7}
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 85B0     		sub	sp, sp, #20
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 7860     		str	r0, [r7, #4]
 257:common/stm32f10x_flash.c ****   uint32_t tmpreg = 0;
  38              		.loc 1 257 0
  39 0008 0023     		movs	r3, #0
  40 000a FB60     		str	r3, [r7, #12]
 258:common/stm32f10x_flash.c ****   
 259:common/stm32f10x_flash.c ****   /* Check the parameters */
 260:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 261:common/stm32f10x_flash.c ****   
 262:common/stm32f10x_flash.c ****   /* Read the ACR register */
 263:common/stm32f10x_flash.c ****   tmpreg = FLASH->ACR;  
  41              		.loc 1 263 0
  42 000c 094B     		ldr	r3, .L2
  43 000e 1B68     		ldr	r3, [r3]
  44 0010 FB60     		str	r3, [r7, #12]
 264:common/stm32f10x_flash.c ****   
 265:common/stm32f10x_flash.c ****   /* Sets the Latency value */
 266:common/stm32f10x_flash.c ****   tmpreg &= ACR_LATENCY_Mask;
  45              		.loc 1 266 0
  46 0012 FB68     		ldr	r3, [r7, #12]
  47 0014 03F03803 		and	r3, r3, #56
  48 0018 FB60     		str	r3, [r7, #12]
 267:common/stm32f10x_flash.c ****   tmpreg |= FLASH_Latency;
  49              		.loc 1 267 0
  50 001a FA68     		ldr	r2, [r7, #12]
  51 001c 7B68     		ldr	r3, [r7, #4]
  52 001e 1343     		orrs	r3, r3, r2
  53 0020 FB60     		str	r3, [r7, #12]
 268:common/stm32f10x_flash.c ****   
 269:common/stm32f10x_flash.c ****   /* Write the ACR register */
 270:common/stm32f10x_flash.c ****   FLASH->ACR = tmpreg;
  54              		.loc 1 270 0
  55 0022 044A     		ldr	r2, .L2
  56 0024 FB68     		ldr	r3, [r7, #12]
  57 0026 1360     		str	r3, [r2]
 271:common/stm32f10x_flash.c **** }
  58              		.loc 1 271 0
  59 0028 00BF     		nop
  60 002a 1437     		adds	r7, r7, #20
  61              		.cfi_def_cfa_offset 4
  62 002c BD46     		mov	sp, r7
  63              		.cfi_def_cfa_register 13
  64              		@ sp needed
  65 002e 80BC     		pop	{r7}
  66              		.cfi_restore 7
  67              		.cfi_def_cfa_offset 0
  68 0030 7047     		bx	lr
  69              	.L3:
  70 0032 00BF     		.align	2
  71              	.L2:
ARM GAS  /tmp/ccFIADOf.s 			page 7


  72 0034 00200240 		.word	1073881088
  73              		.cfi_endproc
  74              	.LFE63:
  75              		.size	FLASH_SetLatency, .-FLASH_SetLatency
  76              		.align	1
  77              		.global	FLASH_HalfCycleAccessCmd
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.fpu softvfp
  82              		.type	FLASH_HalfCycleAccessCmd, %function
  83              	FLASH_HalfCycleAccessCmd:
  84              	.LFB64:
 272:common/stm32f10x_flash.c **** 
 273:common/stm32f10x_flash.c **** /**
 274:common/stm32f10x_flash.c ****   * @brief  Enables or disables the Half cycle flash access.
 275:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 276:common/stm32f10x_flash.c ****   * @param  FLASH_HalfCycleAccess: specifies the FLASH Half cycle Access mode.
 277:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
 278:common/stm32f10x_flash.c ****   *     @arg FLASH_HalfCycleAccess_Enable: FLASH Half Cycle Enable
 279:common/stm32f10x_flash.c ****   *     @arg FLASH_HalfCycleAccess_Disable: FLASH Half Cycle Disable
 280:common/stm32f10x_flash.c ****   * @retval None
 281:common/stm32f10x_flash.c ****   */
 282:common/stm32f10x_flash.c **** void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
 283:common/stm32f10x_flash.c **** {
  85              		.loc 1 283 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 8
  88              		@ frame_needed = 1, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90 0038 80B4     		push	{r7}
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 7, -4
  93 003a 83B0     		sub	sp, sp, #12
  94              		.cfi_def_cfa_offset 16
  95 003c 00AF     		add	r7, sp, #0
  96              		.cfi_def_cfa_register 7
  97 003e 7860     		str	r0, [r7, #4]
 284:common/stm32f10x_flash.c ****   /* Check the parameters */
 285:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
 286:common/stm32f10x_flash.c ****   
 287:common/stm32f10x_flash.c ****   /* Enable or disable the Half cycle access */
 288:common/stm32f10x_flash.c ****   FLASH->ACR &= ACR_HLFCYA_Mask;
  98              		.loc 1 288 0
  99 0040 084A     		ldr	r2, .L5
 100 0042 084B     		ldr	r3, .L5
 101 0044 1B68     		ldr	r3, [r3]
 102 0046 23F00803 		bic	r3, r3, #8
 103 004a 1360     		str	r3, [r2]
 289:common/stm32f10x_flash.c ****   FLASH->ACR |= FLASH_HalfCycleAccess;
 104              		.loc 1 289 0
 105 004c 0549     		ldr	r1, .L5
 106 004e 054B     		ldr	r3, .L5
 107 0050 1A68     		ldr	r2, [r3]
 108 0052 7B68     		ldr	r3, [r7, #4]
 109 0054 1343     		orrs	r3, r3, r2
 110 0056 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccFIADOf.s 			page 8


 290:common/stm32f10x_flash.c **** }
 111              		.loc 1 290 0
 112 0058 00BF     		nop
 113 005a 0C37     		adds	r7, r7, #12
 114              		.cfi_def_cfa_offset 4
 115 005c BD46     		mov	sp, r7
 116              		.cfi_def_cfa_register 13
 117              		@ sp needed
 118 005e 80BC     		pop	{r7}
 119              		.cfi_restore 7
 120              		.cfi_def_cfa_offset 0
 121 0060 7047     		bx	lr
 122              	.L6:
 123 0062 00BF     		.align	2
 124              	.L5:
 125 0064 00200240 		.word	1073881088
 126              		.cfi_endproc
 127              	.LFE64:
 128              		.size	FLASH_HalfCycleAccessCmd, .-FLASH_HalfCycleAccessCmd
 129              		.align	1
 130              		.global	FLASH_PrefetchBufferCmd
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu softvfp
 135              		.type	FLASH_PrefetchBufferCmd, %function
 136              	FLASH_PrefetchBufferCmd:
 137              	.LFB65:
 291:common/stm32f10x_flash.c **** 
 292:common/stm32f10x_flash.c **** /**
 293:common/stm32f10x_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 294:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 295:common/stm32f10x_flash.c ****   * @param  FLASH_PrefetchBuffer: specifies the Prefetch buffer status.
 296:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
 297:common/stm32f10x_flash.c ****   *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
 298:common/stm32f10x_flash.c ****   *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
 299:common/stm32f10x_flash.c ****   * @retval None
 300:common/stm32f10x_flash.c ****   */
 301:common/stm32f10x_flash.c **** void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
 302:common/stm32f10x_flash.c **** {
 138              		.loc 1 302 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 8
 141              		@ frame_needed = 1, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143 0068 80B4     		push	{r7}
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 7, -4
 146 006a 83B0     		sub	sp, sp, #12
 147              		.cfi_def_cfa_offset 16
 148 006c 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
 150 006e 7860     		str	r0, [r7, #4]
 303:common/stm32f10x_flash.c ****   /* Check the parameters */
 304:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
 305:common/stm32f10x_flash.c ****   
 306:common/stm32f10x_flash.c ****   /* Enable or disable the Prefetch Buffer */
ARM GAS  /tmp/ccFIADOf.s 			page 9


 307:common/stm32f10x_flash.c ****   FLASH->ACR &= ACR_PRFTBE_Mask;
 151              		.loc 1 307 0
 152 0070 084A     		ldr	r2, .L8
 153 0072 084B     		ldr	r3, .L8
 154 0074 1B68     		ldr	r3, [r3]
 155 0076 23F01003 		bic	r3, r3, #16
 156 007a 1360     		str	r3, [r2]
 308:common/stm32f10x_flash.c ****   FLASH->ACR |= FLASH_PrefetchBuffer;
 157              		.loc 1 308 0
 158 007c 0549     		ldr	r1, .L8
 159 007e 054B     		ldr	r3, .L8
 160 0080 1A68     		ldr	r2, [r3]
 161 0082 7B68     		ldr	r3, [r7, #4]
 162 0084 1343     		orrs	r3, r3, r2
 163 0086 0B60     		str	r3, [r1]
 309:common/stm32f10x_flash.c **** }
 164              		.loc 1 309 0
 165 0088 00BF     		nop
 166 008a 0C37     		adds	r7, r7, #12
 167              		.cfi_def_cfa_offset 4
 168 008c BD46     		mov	sp, r7
 169              		.cfi_def_cfa_register 13
 170              		@ sp needed
 171 008e 80BC     		pop	{r7}
 172              		.cfi_restore 7
 173              		.cfi_def_cfa_offset 0
 174 0090 7047     		bx	lr
 175              	.L9:
 176 0092 00BF     		.align	2
 177              	.L8:
 178 0094 00200240 		.word	1073881088
 179              		.cfi_endproc
 180              	.LFE65:
 181              		.size	FLASH_PrefetchBufferCmd, .-FLASH_PrefetchBufferCmd
 182              		.align	1
 183              		.global	FLASH_Unlock
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu softvfp
 188              		.type	FLASH_Unlock, %function
 189              	FLASH_Unlock:
 190              	.LFB66:
 310:common/stm32f10x_flash.c **** 
 311:common/stm32f10x_flash.c **** /**
 312:common/stm32f10x_flash.c ****   * @brief  Unlocks the FLASH Program Erase Controller.
 313:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 314:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function unlocks Bank1 and Bank2.
 315:common/stm32f10x_flash.c ****   *         - For all other devices it unlocks Bank1 and it is equivalent 
 316:common/stm32f10x_flash.c ****   *           to FLASH_UnlockBank1 function.. 
 317:common/stm32f10x_flash.c ****   * @param  None
 318:common/stm32f10x_flash.c ****   * @retval None
 319:common/stm32f10x_flash.c ****   */
 320:common/stm32f10x_flash.c **** void FLASH_Unlock(void)
 321:common/stm32f10x_flash.c **** {
 191              		.loc 1 321 0
 192              		.cfi_startproc
ARM GAS  /tmp/ccFIADOf.s 			page 10


 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196 0098 80B4     		push	{r7}
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 7, -4
 199 009a 00AF     		add	r7, sp, #0
 200              		.cfi_def_cfa_register 7
 322:common/stm32f10x_flash.c ****   /* Authorize the FPEC of Bank1 Access */
 323:common/stm32f10x_flash.c ****   FLASH->KEYR = FLASH_KEY1;
 201              		.loc 1 323 0
 202 009c 044B     		ldr	r3, .L11
 203 009e 054A     		ldr	r2, .L11+4
 204 00a0 5A60     		str	r2, [r3, #4]
 324:common/stm32f10x_flash.c ****   FLASH->KEYR = FLASH_KEY2;
 205              		.loc 1 324 0
 206 00a2 034B     		ldr	r3, .L11
 207 00a4 044A     		ldr	r2, .L11+8
 208 00a6 5A60     		str	r2, [r3, #4]
 325:common/stm32f10x_flash.c **** 
 326:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 327:common/stm32f10x_flash.c ****   /* Authorize the FPEC of Bank2 Access */
 328:common/stm32f10x_flash.c ****   FLASH->KEYR2 = FLASH_KEY1;
 329:common/stm32f10x_flash.c ****   FLASH->KEYR2 = FLASH_KEY2;
 330:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 331:common/stm32f10x_flash.c **** }
 209              		.loc 1 331 0
 210 00a8 00BF     		nop
 211 00aa BD46     		mov	sp, r7
 212              		.cfi_def_cfa_register 13
 213              		@ sp needed
 214 00ac 80BC     		pop	{r7}
 215              		.cfi_restore 7
 216              		.cfi_def_cfa_offset 0
 217 00ae 7047     		bx	lr
 218              	.L12:
 219              		.align	2
 220              	.L11:
 221 00b0 00200240 		.word	1073881088
 222 00b4 23016745 		.word	1164378403
 223 00b8 AB89EFCD 		.word	-839939669
 224              		.cfi_endproc
 225              	.LFE66:
 226              		.size	FLASH_Unlock, .-FLASH_Unlock
 227              		.align	1
 228              		.global	FLASH_UnlockBank1
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu softvfp
 233              		.type	FLASH_UnlockBank1, %function
 234              	FLASH_UnlockBank1:
 235              	.LFB67:
 332:common/stm32f10x_flash.c **** /**
 333:common/stm32f10x_flash.c ****   * @brief  Unlocks the FLASH Bank1 Program Erase Controller.
 334:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 335:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function unlocks Bank1.
ARM GAS  /tmp/ccFIADOf.s 			page 11


 336:common/stm32f10x_flash.c ****   *         - For all other devices it unlocks Bank1 and it is 
 337:common/stm32f10x_flash.c ****   *           equivalent to FLASH_Unlock function.
 338:common/stm32f10x_flash.c ****   * @param  None
 339:common/stm32f10x_flash.c ****   * @retval None
 340:common/stm32f10x_flash.c ****   */
 341:common/stm32f10x_flash.c **** void FLASH_UnlockBank1(void)
 342:common/stm32f10x_flash.c **** {
 236              		.loc 1 342 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 241 00bc 80B4     		push	{r7}
 242              		.cfi_def_cfa_offset 4
 243              		.cfi_offset 7, -4
 244 00be 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 343:common/stm32f10x_flash.c ****   /* Authorize the FPEC of Bank1 Access */
 344:common/stm32f10x_flash.c ****   FLASH->KEYR = FLASH_KEY1;
 246              		.loc 1 344 0
 247 00c0 044B     		ldr	r3, .L14
 248 00c2 054A     		ldr	r2, .L14+4
 249 00c4 5A60     		str	r2, [r3, #4]
 345:common/stm32f10x_flash.c ****   FLASH->KEYR = FLASH_KEY2;
 250              		.loc 1 345 0
 251 00c6 034B     		ldr	r3, .L14
 252 00c8 044A     		ldr	r2, .L14+8
 253 00ca 5A60     		str	r2, [r3, #4]
 346:common/stm32f10x_flash.c **** }
 254              		.loc 1 346 0
 255 00cc 00BF     		nop
 256 00ce BD46     		mov	sp, r7
 257              		.cfi_def_cfa_register 13
 258              		@ sp needed
 259 00d0 80BC     		pop	{r7}
 260              		.cfi_restore 7
 261              		.cfi_def_cfa_offset 0
 262 00d2 7047     		bx	lr
 263              	.L15:
 264              		.align	2
 265              	.L14:
 266 00d4 00200240 		.word	1073881088
 267 00d8 23016745 		.word	1164378403
 268 00dc AB89EFCD 		.word	-839939669
 269              		.cfi_endproc
 270              	.LFE67:
 271              		.size	FLASH_UnlockBank1, .-FLASH_UnlockBank1
 272              		.align	1
 273              		.global	FLASH_Lock
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu softvfp
 278              		.type	FLASH_Lock, %function
 279              	FLASH_Lock:
 280              	.LFB68:
 347:common/stm32f10x_flash.c **** 
ARM GAS  /tmp/ccFIADOf.s 			page 12


 348:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 349:common/stm32f10x_flash.c **** /**
 350:common/stm32f10x_flash.c ****   * @brief  Unlocks the FLASH Bank2 Program Erase Controller.
 351:common/stm32f10x_flash.c ****   * @note   This function can be used only for STM32F10X_XL density devices.
 352:common/stm32f10x_flash.c ****   * @param  None
 353:common/stm32f10x_flash.c ****   * @retval None
 354:common/stm32f10x_flash.c ****   */
 355:common/stm32f10x_flash.c **** void FLASH_UnlockBank2(void)
 356:common/stm32f10x_flash.c **** {
 357:common/stm32f10x_flash.c ****   /* Authorize the FPEC of Bank2 Access */
 358:common/stm32f10x_flash.c ****   FLASH->KEYR2 = FLASH_KEY1;
 359:common/stm32f10x_flash.c ****   FLASH->KEYR2 = FLASH_KEY2;
 360:common/stm32f10x_flash.c **** 
 361:common/stm32f10x_flash.c **** }
 362:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 363:common/stm32f10x_flash.c **** 
 364:common/stm32f10x_flash.c **** /**
 365:common/stm32f10x_flash.c ****   * @brief  Locks the FLASH Program Erase Controller.
 366:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 367:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function Locks Bank1 and Bank2.
 368:common/stm32f10x_flash.c ****   *         - For all other devices it Locks Bank1 and it is equivalent 
 369:common/stm32f10x_flash.c ****   *           to FLASH_LockBank1 function.
 370:common/stm32f10x_flash.c ****   * @param  None
 371:common/stm32f10x_flash.c ****   * @retval None
 372:common/stm32f10x_flash.c ****   */
 373:common/stm32f10x_flash.c **** void FLASH_Lock(void)
 374:common/stm32f10x_flash.c **** {
 281              		.loc 1 374 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286 00e0 80B4     		push	{r7}
 287              		.cfi_def_cfa_offset 4
 288              		.cfi_offset 7, -4
 289 00e2 00AF     		add	r7, sp, #0
 290              		.cfi_def_cfa_register 7
 375:common/stm32f10x_flash.c ****   /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
 376:common/stm32f10x_flash.c ****   FLASH->CR |= CR_LOCK_Set;
 291              		.loc 1 376 0
 292 00e4 044A     		ldr	r2, .L17
 293 00e6 044B     		ldr	r3, .L17
 294 00e8 1B69     		ldr	r3, [r3, #16]
 295 00ea 43F08003 		orr	r3, r3, #128
 296 00ee 1361     		str	r3, [r2, #16]
 377:common/stm32f10x_flash.c **** 
 378:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 379:common/stm32f10x_flash.c ****   /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
 380:common/stm32f10x_flash.c ****   FLASH->CR2 |= CR_LOCK_Set;
 381:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 382:common/stm32f10x_flash.c **** }
 297              		.loc 1 382 0
 298 00f0 00BF     		nop
 299 00f2 BD46     		mov	sp, r7
 300              		.cfi_def_cfa_register 13
 301              		@ sp needed
 302 00f4 80BC     		pop	{r7}
ARM GAS  /tmp/ccFIADOf.s 			page 13


 303              		.cfi_restore 7
 304              		.cfi_def_cfa_offset 0
 305 00f6 7047     		bx	lr
 306              	.L18:
 307              		.align	2
 308              	.L17:
 309 00f8 00200240 		.word	1073881088
 310              		.cfi_endproc
 311              	.LFE68:
 312              		.size	FLASH_Lock, .-FLASH_Lock
 313              		.align	1
 314              		.global	FLASH_LockBank1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu softvfp
 319              		.type	FLASH_LockBank1, %function
 320              	FLASH_LockBank1:
 321              	.LFB69:
 383:common/stm32f10x_flash.c **** 
 384:common/stm32f10x_flash.c **** /**
 385:common/stm32f10x_flash.c ****   * @brief  Locks the FLASH Bank1 Program Erase Controller.
 386:common/stm32f10x_flash.c ****   * @note   this function can be used for all STM32F10x devices.
 387:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function Locks Bank1.
 388:common/stm32f10x_flash.c ****   *         - For all other devices it Locks Bank1 and it is equivalent 
 389:common/stm32f10x_flash.c ****   *           to FLASH_Lock function.
 390:common/stm32f10x_flash.c ****   * @param  None
 391:common/stm32f10x_flash.c ****   * @retval None
 392:common/stm32f10x_flash.c ****   */
 393:common/stm32f10x_flash.c **** void FLASH_LockBank1(void)
 394:common/stm32f10x_flash.c **** {
 322              		.loc 1 394 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327 00fc 80B4     		push	{r7}
 328              		.cfi_def_cfa_offset 4
 329              		.cfi_offset 7, -4
 330 00fe 00AF     		add	r7, sp, #0
 331              		.cfi_def_cfa_register 7
 395:common/stm32f10x_flash.c ****   /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
 396:common/stm32f10x_flash.c ****   FLASH->CR |= CR_LOCK_Set;
 332              		.loc 1 396 0
 333 0100 044A     		ldr	r2, .L20
 334 0102 044B     		ldr	r3, .L20
 335 0104 1B69     		ldr	r3, [r3, #16]
 336 0106 43F08003 		orr	r3, r3, #128
 337 010a 1361     		str	r3, [r2, #16]
 397:common/stm32f10x_flash.c **** }
 338              		.loc 1 397 0
 339 010c 00BF     		nop
 340 010e BD46     		mov	sp, r7
 341              		.cfi_def_cfa_register 13
 342              		@ sp needed
 343 0110 80BC     		pop	{r7}
 344              		.cfi_restore 7
ARM GAS  /tmp/ccFIADOf.s 			page 14


 345              		.cfi_def_cfa_offset 0
 346 0112 7047     		bx	lr
 347              	.L21:
 348              		.align	2
 349              	.L20:
 350 0114 00200240 		.word	1073881088
 351              		.cfi_endproc
 352              	.LFE69:
 353              		.size	FLASH_LockBank1, .-FLASH_LockBank1
 354              		.align	1
 355              		.global	FLASH_ErasePage
 356              		.syntax unified
 357              		.thumb
 358              		.thumb_func
 359              		.fpu softvfp
 360              		.type	FLASH_ErasePage, %function
 361              	FLASH_ErasePage:
 362              	.LFB70:
 398:common/stm32f10x_flash.c **** 
 399:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 400:common/stm32f10x_flash.c **** /**
 401:common/stm32f10x_flash.c ****   * @brief  Locks the FLASH Bank2 Program Erase Controller.
 402:common/stm32f10x_flash.c ****   * @note   This function can be used only for STM32F10X_XL density devices.
 403:common/stm32f10x_flash.c ****   * @param  None
 404:common/stm32f10x_flash.c ****   * @retval None
 405:common/stm32f10x_flash.c ****   */
 406:common/stm32f10x_flash.c **** void FLASH_LockBank2(void)
 407:common/stm32f10x_flash.c **** {
 408:common/stm32f10x_flash.c ****   /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
 409:common/stm32f10x_flash.c ****   FLASH->CR2 |= CR_LOCK_Set;
 410:common/stm32f10x_flash.c **** }
 411:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 412:common/stm32f10x_flash.c **** 
 413:common/stm32f10x_flash.c **** /**
 414:common/stm32f10x_flash.c ****   * @brief  Erases a specified FLASH page.
 415:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 416:common/stm32f10x_flash.c ****   * @param  Page_Address: The page address to be erased.
 417:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 418:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 419:common/stm32f10x_flash.c ****   */
 420:common/stm32f10x_flash.c **** FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
 421:common/stm32f10x_flash.c **** {
 363              		.loc 1 421 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 16
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367 0118 80B5     		push	{r7, lr}
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 011a 84B0     		sub	sp, sp, #16
 372              		.cfi_def_cfa_offset 24
 373 011c 00AF     		add	r7, sp, #0
 374              		.cfi_def_cfa_register 7
 375 011e 7860     		str	r0, [r7, #4]
 422:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 376              		.loc 1 422 0
ARM GAS  /tmp/ccFIADOf.s 			page 15


 377 0120 0423     		movs	r3, #4
 378 0122 FB73     		strb	r3, [r7, #15]
 423:common/stm32f10x_flash.c ****   /* Check the parameters */
 424:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_ADDRESS(Page_Address));
 425:common/stm32f10x_flash.c **** 
 426:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 427:common/stm32f10x_flash.c ****   if(Page_Address < FLASH_BANK1_END_ADDRESS)  
 428:common/stm32f10x_flash.c ****   {
 429:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 430:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 431:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 432:common/stm32f10x_flash.c ****     { 
 433:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to erase the page */
 434:common/stm32f10x_flash.c ****       FLASH->CR|= CR_PER_Set;
 435:common/stm32f10x_flash.c ****       FLASH->AR = Page_Address; 
 436:common/stm32f10x_flash.c ****       FLASH->CR|= CR_STRT_Set;
 437:common/stm32f10x_flash.c ****     
 438:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 439:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 440:common/stm32f10x_flash.c **** 
 441:common/stm32f10x_flash.c ****       /* Disable the PER Bit */
 442:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PER_Reset;
 443:common/stm32f10x_flash.c ****     }
 444:common/stm32f10x_flash.c ****   }
 445:common/stm32f10x_flash.c ****   else
 446:common/stm32f10x_flash.c ****   {
 447:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 448:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 449:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 450:common/stm32f10x_flash.c ****     { 
 451:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to erase the page */
 452:common/stm32f10x_flash.c ****       FLASH->CR2|= CR_PER_Set;
 453:common/stm32f10x_flash.c ****       FLASH->AR2 = Page_Address; 
 454:common/stm32f10x_flash.c ****       FLASH->CR2|= CR_STRT_Set;
 455:common/stm32f10x_flash.c ****     
 456:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 457:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 458:common/stm32f10x_flash.c ****       
 459:common/stm32f10x_flash.c ****       /* Disable the PER Bit */
 460:common/stm32f10x_flash.c ****       FLASH->CR2 &= CR_PER_Reset;
 461:common/stm32f10x_flash.c ****     }
 462:common/stm32f10x_flash.c ****   }
 463:common/stm32f10x_flash.c **** #else
 464:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 465:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(EraseTimeout);
 379              		.loc 1 465 0
 380 0124 4FF43020 		mov	r0, #720896
 381 0128 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 382 012c 0346     		mov	r3, r0
 383 012e FB73     		strb	r3, [r7, #15]
 466:common/stm32f10x_flash.c ****   
 467:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 384              		.loc 1 467 0
 385 0130 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 386 0132 042B     		cmp	r3, #4
 387 0134 1BD1     		bne	.L23
 468:common/stm32f10x_flash.c ****   { 
ARM GAS  /tmp/ccFIADOf.s 			page 16


 469:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase the page */
 470:common/stm32f10x_flash.c ****     FLASH->CR|= CR_PER_Set;
 388              		.loc 1 470 0
 389 0136 104A     		ldr	r2, .L25
 390 0138 0F4B     		ldr	r3, .L25
 391 013a 1B69     		ldr	r3, [r3, #16]
 392 013c 43F00203 		orr	r3, r3, #2
 393 0140 1361     		str	r3, [r2, #16]
 471:common/stm32f10x_flash.c ****     FLASH->AR = Page_Address; 
 394              		.loc 1 471 0
 395 0142 0D4A     		ldr	r2, .L25
 396 0144 7B68     		ldr	r3, [r7, #4]
 397 0146 5361     		str	r3, [r2, #20]
 472:common/stm32f10x_flash.c ****     FLASH->CR|= CR_STRT_Set;
 398              		.loc 1 472 0
 399 0148 0B4A     		ldr	r2, .L25
 400 014a 0B4B     		ldr	r3, .L25
 401 014c 1B69     		ldr	r3, [r3, #16]
 402 014e 43F04003 		orr	r3, r3, #64
 403 0152 1361     		str	r3, [r2, #16]
 473:common/stm32f10x_flash.c ****     
 474:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 475:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(EraseTimeout);
 404              		.loc 1 475 0
 405 0154 4FF43020 		mov	r0, #720896
 406 0158 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 407 015c 0346     		mov	r3, r0
 408 015e FB73     		strb	r3, [r7, #15]
 476:common/stm32f10x_flash.c ****     
 477:common/stm32f10x_flash.c ****     /* Disable the PER Bit */
 478:common/stm32f10x_flash.c ****     FLASH->CR &= CR_PER_Reset;
 409              		.loc 1 478 0
 410 0160 0549     		ldr	r1, .L25
 411 0162 054B     		ldr	r3, .L25
 412 0164 1A69     		ldr	r2, [r3, #16]
 413 0166 41F6FD73 		movw	r3, #8189
 414 016a 1340     		ands	r3, r3, r2
 415 016c 0B61     		str	r3, [r1, #16]
 416              	.L23:
 479:common/stm32f10x_flash.c ****   }
 480:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 481:common/stm32f10x_flash.c **** 
 482:common/stm32f10x_flash.c ****   /* Return the Erase Status */
 483:common/stm32f10x_flash.c ****   return status;
 417              		.loc 1 483 0
 418 016e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 484:common/stm32f10x_flash.c **** }
 419              		.loc 1 484 0
 420 0170 1846     		mov	r0, r3
 421 0172 1037     		adds	r7, r7, #16
 422              		.cfi_def_cfa_offset 8
 423 0174 BD46     		mov	sp, r7
 424              		.cfi_def_cfa_register 13
 425              		@ sp needed
 426 0176 80BD     		pop	{r7, pc}
 427              	.L26:
 428              		.align	2
ARM GAS  /tmp/ccFIADOf.s 			page 17


 429              	.L25:
 430 0178 00200240 		.word	1073881088
 431              		.cfi_endproc
 432              	.LFE70:
 433              		.size	FLASH_ErasePage, .-FLASH_ErasePage
 434              		.align	1
 435              		.global	FLASH_EraseAllPages
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu softvfp
 440              		.type	FLASH_EraseAllPages, %function
 441              	FLASH_EraseAllPages:
 442              	.LFB71:
 485:common/stm32f10x_flash.c **** 
 486:common/stm32f10x_flash.c **** /**
 487:common/stm32f10x_flash.c ****   * @brief  Erases all FLASH pages.
 488:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 489:common/stm32f10x_flash.c ****   * @param  None
 490:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 491:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 492:common/stm32f10x_flash.c ****   */
 493:common/stm32f10x_flash.c **** FLASH_Status FLASH_EraseAllPages(void)
 494:common/stm32f10x_flash.c **** {
 443              		.loc 1 494 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 8
 446              		@ frame_needed = 1, uses_anonymous_args = 0
 447 017c 80B5     		push	{r7, lr}
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 017e 82B0     		sub	sp, sp, #8
 452              		.cfi_def_cfa_offset 16
 453 0180 00AF     		add	r7, sp, #0
 454              		.cfi_def_cfa_register 7
 495:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 455              		.loc 1 495 0
 456 0182 0423     		movs	r3, #4
 457 0184 FB71     		strb	r3, [r7, #7]
 496:common/stm32f10x_flash.c **** 
 497:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 498:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 499:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 500:common/stm32f10x_flash.c ****   
 501:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 502:common/stm32f10x_flash.c ****   {
 503:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 504:common/stm32f10x_flash.c ****      FLASH->CR |= CR_MER_Set;
 505:common/stm32f10x_flash.c ****      FLASH->CR |= CR_STRT_Set;
 506:common/stm32f10x_flash.c ****     
 507:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 508:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 509:common/stm32f10x_flash.c ****     
 510:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 511:common/stm32f10x_flash.c ****     FLASH->CR &= CR_MER_Reset;
 512:common/stm32f10x_flash.c ****   }    
ARM GAS  /tmp/ccFIADOf.s 			page 18


 513:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 514:common/stm32f10x_flash.c ****   {
 515:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 516:common/stm32f10x_flash.c ****      FLASH->CR2 |= CR_MER_Set;
 517:common/stm32f10x_flash.c ****      FLASH->CR2 |= CR_STRT_Set;
 518:common/stm32f10x_flash.c ****     
 519:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 520:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 521:common/stm32f10x_flash.c ****     
 522:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 523:common/stm32f10x_flash.c ****     FLASH->CR2 &= CR_MER_Reset;
 524:common/stm32f10x_flash.c ****   }
 525:common/stm32f10x_flash.c **** #else
 526:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 527:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(EraseTimeout);
 458              		.loc 1 527 0
 459 0186 4FF43020 		mov	r0, #720896
 460 018a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 461 018e 0346     		mov	r3, r0
 462 0190 FB71     		strb	r3, [r7, #7]
 528:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 463              		.loc 1 528 0
 464 0192 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 465 0194 042B     		cmp	r3, #4
 466 0196 18D1     		bne	.L28
 529:common/stm32f10x_flash.c ****   {
 530:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 531:common/stm32f10x_flash.c ****      FLASH->CR |= CR_MER_Set;
 467              		.loc 1 531 0
 468 0198 0E4A     		ldr	r2, .L30
 469 019a 0E4B     		ldr	r3, .L30
 470 019c 1B69     		ldr	r3, [r3, #16]
 471 019e 43F00403 		orr	r3, r3, #4
 472 01a2 1361     		str	r3, [r2, #16]
 532:common/stm32f10x_flash.c ****      FLASH->CR |= CR_STRT_Set;
 473              		.loc 1 532 0
 474 01a4 0B4A     		ldr	r2, .L30
 475 01a6 0B4B     		ldr	r3, .L30
 476 01a8 1B69     		ldr	r3, [r3, #16]
 477 01aa 43F04003 		orr	r3, r3, #64
 478 01ae 1361     		str	r3, [r2, #16]
 533:common/stm32f10x_flash.c ****     
 534:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 535:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(EraseTimeout);
 479              		.loc 1 535 0
 480 01b0 4FF43020 		mov	r0, #720896
 481 01b4 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 482 01b8 0346     		mov	r3, r0
 483 01ba FB71     		strb	r3, [r7, #7]
 536:common/stm32f10x_flash.c **** 
 537:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 538:common/stm32f10x_flash.c ****     FLASH->CR &= CR_MER_Reset;
 484              		.loc 1 538 0
 485 01bc 0549     		ldr	r1, .L30
 486 01be 054B     		ldr	r3, .L30
 487 01c0 1A69     		ldr	r2, [r3, #16]
 488 01c2 41F6FB73 		movw	r3, #8187
ARM GAS  /tmp/ccFIADOf.s 			page 19


 489 01c6 1340     		ands	r3, r3, r2
 490 01c8 0B61     		str	r3, [r1, #16]
 491              	.L28:
 539:common/stm32f10x_flash.c ****   }
 540:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 541:common/stm32f10x_flash.c **** 
 542:common/stm32f10x_flash.c ****   /* Return the Erase Status */
 543:common/stm32f10x_flash.c ****   return status;
 492              		.loc 1 543 0
 493 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 544:common/stm32f10x_flash.c **** }
 494              		.loc 1 544 0
 495 01cc 1846     		mov	r0, r3
 496 01ce 0837     		adds	r7, r7, #8
 497              		.cfi_def_cfa_offset 8
 498 01d0 BD46     		mov	sp, r7
 499              		.cfi_def_cfa_register 13
 500              		@ sp needed
 501 01d2 80BD     		pop	{r7, pc}
 502              	.L31:
 503              		.align	2
 504              	.L30:
 505 01d4 00200240 		.word	1073881088
 506              		.cfi_endproc
 507              	.LFE71:
 508              		.size	FLASH_EraseAllPages, .-FLASH_EraseAllPages
 509              		.align	1
 510              		.global	FLASH_EraseAllBank1Pages
 511              		.syntax unified
 512              		.thumb
 513              		.thumb_func
 514              		.fpu softvfp
 515              		.type	FLASH_EraseAllBank1Pages, %function
 516              	FLASH_EraseAllBank1Pages:
 517              	.LFB72:
 545:common/stm32f10x_flash.c **** 
 546:common/stm32f10x_flash.c **** /**
 547:common/stm32f10x_flash.c ****   * @brief  Erases all Bank1 FLASH pages.
 548:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 549:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function erases all Bank1 pages.
 550:common/stm32f10x_flash.c ****   *         - For all other devices it erases all Bank1 pages and it is equivalent 
 551:common/stm32f10x_flash.c ****   *           to FLASH_EraseAllPages function.
 552:common/stm32f10x_flash.c ****   * @param  None
 553:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 554:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 555:common/stm32f10x_flash.c ****   */
 556:common/stm32f10x_flash.c **** FLASH_Status FLASH_EraseAllBank1Pages(void)
 557:common/stm32f10x_flash.c **** {
 518              		.loc 1 557 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 8
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 01d8 80B5     		push	{r7, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 01da 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccFIADOf.s 			page 20


 527              		.cfi_def_cfa_offset 16
 528 01dc 00AF     		add	r7, sp, #0
 529              		.cfi_def_cfa_register 7
 558:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 530              		.loc 1 558 0
 531 01de 0423     		movs	r3, #4
 532 01e0 FB71     		strb	r3, [r7, #7]
 559:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 560:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 533              		.loc 1 560 0
 534 01e2 4FF43020 		mov	r0, #720896
 535 01e6 FFF7FEFF 		bl	FLASH_WaitForLastBank1Operation
 536 01ea 0346     		mov	r3, r0
 537 01ec FB71     		strb	r3, [r7, #7]
 561:common/stm32f10x_flash.c ****   
 562:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 538              		.loc 1 562 0
 539 01ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 540 01f0 042B     		cmp	r3, #4
 541 01f2 18D1     		bne	.L33
 563:common/stm32f10x_flash.c ****   {
 564:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 565:common/stm32f10x_flash.c ****      FLASH->CR |= CR_MER_Set;
 542              		.loc 1 565 0
 543 01f4 0E4A     		ldr	r2, .L35
 544 01f6 0E4B     		ldr	r3, .L35
 545 01f8 1B69     		ldr	r3, [r3, #16]
 546 01fa 43F00403 		orr	r3, r3, #4
 547 01fe 1361     		str	r3, [r2, #16]
 566:common/stm32f10x_flash.c ****      FLASH->CR |= CR_STRT_Set;
 548              		.loc 1 566 0
 549 0200 0B4A     		ldr	r2, .L35
 550 0202 0B4B     		ldr	r3, .L35
 551 0204 1B69     		ldr	r3, [r3, #16]
 552 0206 43F04003 		orr	r3, r3, #64
 553 020a 1361     		str	r3, [r2, #16]
 567:common/stm32f10x_flash.c ****     
 568:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 569:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 554              		.loc 1 569 0
 555 020c 4FF43020 		mov	r0, #720896
 556 0210 FFF7FEFF 		bl	FLASH_WaitForLastBank1Operation
 557 0214 0346     		mov	r3, r0
 558 0216 FB71     		strb	r3, [r7, #7]
 570:common/stm32f10x_flash.c ****     
 571:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 572:common/stm32f10x_flash.c ****     FLASH->CR &= CR_MER_Reset;
 559              		.loc 1 572 0
 560 0218 0549     		ldr	r1, .L35
 561 021a 054B     		ldr	r3, .L35
 562 021c 1A69     		ldr	r2, [r3, #16]
 563 021e 41F6FB73 		movw	r3, #8187
 564 0222 1340     		ands	r3, r3, r2
 565 0224 0B61     		str	r3, [r1, #16]
 566              	.L33:
 573:common/stm32f10x_flash.c ****   }    
 574:common/stm32f10x_flash.c ****   /* Return the Erase Status */
ARM GAS  /tmp/ccFIADOf.s 			page 21


 575:common/stm32f10x_flash.c ****   return status;
 567              		.loc 1 575 0
 568 0226 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 576:common/stm32f10x_flash.c **** }
 569              		.loc 1 576 0
 570 0228 1846     		mov	r0, r3
 571 022a 0837     		adds	r7, r7, #8
 572              		.cfi_def_cfa_offset 8
 573 022c BD46     		mov	sp, r7
 574              		.cfi_def_cfa_register 13
 575              		@ sp needed
 576 022e 80BD     		pop	{r7, pc}
 577              	.L36:
 578              		.align	2
 579              	.L35:
 580 0230 00200240 		.word	1073881088
 581              		.cfi_endproc
 582              	.LFE72:
 583              		.size	FLASH_EraseAllBank1Pages, .-FLASH_EraseAllBank1Pages
 584              		.align	1
 585              		.global	FLASH_EraseOptionBytes
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu softvfp
 590              		.type	FLASH_EraseOptionBytes, %function
 591              	FLASH_EraseOptionBytes:
 592              	.LFB73:
 577:common/stm32f10x_flash.c **** 
 578:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 579:common/stm32f10x_flash.c **** /**
 580:common/stm32f10x_flash.c ****   * @brief  Erases all Bank2 FLASH pages.
 581:common/stm32f10x_flash.c ****   * @note   This function can be used only for STM32F10x_XL density devices.
 582:common/stm32f10x_flash.c ****   * @param  None
 583:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 584:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 585:common/stm32f10x_flash.c ****   */
 586:common/stm32f10x_flash.c **** FLASH_Status FLASH_EraseAllBank2Pages(void)
 587:common/stm32f10x_flash.c **** {
 588:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 589:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 590:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 591:common/stm32f10x_flash.c ****   
 592:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 593:common/stm32f10x_flash.c ****   {
 594:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 595:common/stm32f10x_flash.c ****      FLASH->CR2 |= CR_MER_Set;
 596:common/stm32f10x_flash.c ****      FLASH->CR2 |= CR_STRT_Set;
 597:common/stm32f10x_flash.c ****     
 598:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 599:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 600:common/stm32f10x_flash.c **** 
 601:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 602:common/stm32f10x_flash.c ****     FLASH->CR2 &= CR_MER_Reset;
 603:common/stm32f10x_flash.c ****   }    
 604:common/stm32f10x_flash.c ****   /* Return the Erase Status */
 605:common/stm32f10x_flash.c ****   return status;
ARM GAS  /tmp/ccFIADOf.s 			page 22


 606:common/stm32f10x_flash.c **** }
 607:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 608:common/stm32f10x_flash.c **** 
 609:common/stm32f10x_flash.c **** /**
 610:common/stm32f10x_flash.c ****   * @brief  Erases the FLASH option bytes.
 611:common/stm32f10x_flash.c ****   * @note   This functions erases all option bytes except the Read protection (RDP). 
 612:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 613:common/stm32f10x_flash.c ****   * @param  None
 614:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 615:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 616:common/stm32f10x_flash.c ****   */
 617:common/stm32f10x_flash.c **** FLASH_Status FLASH_EraseOptionBytes(void)
 618:common/stm32f10x_flash.c **** {
 593              		.loc 1 618 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 8
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0234 80B5     		push	{r7, lr}
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 0236 82B0     		sub	sp, sp, #8
 602              		.cfi_def_cfa_offset 16
 603 0238 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 619:common/stm32f10x_flash.c ****   uint16_t rdptmp = RDP_Key;
 605              		.loc 1 619 0
 606 023a A523     		movs	r3, #165
 607 023c FB80     		strh	r3, [r7, #6]	@ movhi
 620:common/stm32f10x_flash.c **** 
 621:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 608              		.loc 1 621 0
 609 023e 0423     		movs	r3, #4
 610 0240 7B71     		strb	r3, [r7, #5]
 622:common/stm32f10x_flash.c **** 
 623:common/stm32f10x_flash.c ****   /* Get the actual read protection Option Byte value */ 
 624:common/stm32f10x_flash.c ****   if(FLASH_GetReadOutProtectionStatus() != RESET)
 611              		.loc 1 624 0
 612 0242 FFF7FEFF 		bl	FLASH_GetReadOutProtectionStatus
 613 0246 0346     		mov	r3, r0
 614 0248 002B     		cmp	r3, #0
 615 024a 01D0     		beq	.L38
 625:common/stm32f10x_flash.c ****   {
 626:common/stm32f10x_flash.c ****     rdptmp = 0x00;  
 616              		.loc 1 626 0
 617 024c 0023     		movs	r3, #0
 618 024e FB80     		strh	r3, [r7, #6]	@ movhi
 619              	.L38:
 627:common/stm32f10x_flash.c ****   }
 628:common/stm32f10x_flash.c **** 
 629:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 630:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(EraseTimeout);
 620              		.loc 1 630 0
 621 0250 4FF43020 		mov	r0, #720896
 622 0254 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 623 0258 0346     		mov	r3, r0
 624 025a 7B71     		strb	r3, [r7, #5]
ARM GAS  /tmp/ccFIADOf.s 			page 23


 631:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 625              		.loc 1 631 0
 626 025c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 627 025e 042B     		cmp	r3, #4
 628 0260 45D1     		bne	.L39
 632:common/stm32f10x_flash.c ****   {
 633:common/stm32f10x_flash.c ****     /* Authorize the small information block programming */
 634:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY1;
 629              		.loc 1 634 0
 630 0262 254B     		ldr	r3, .L43
 631 0264 254A     		ldr	r2, .L43+4
 632 0266 9A60     		str	r2, [r3, #8]
 635:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY2;
 633              		.loc 1 635 0
 634 0268 234B     		ldr	r3, .L43
 635 026a 254A     		ldr	r2, .L43+8
 636 026c 9A60     		str	r2, [r3, #8]
 636:common/stm32f10x_flash.c ****     
 637:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase the option bytes */
 638:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTER_Set;
 637              		.loc 1 638 0
 638 026e 224A     		ldr	r2, .L43
 639 0270 214B     		ldr	r3, .L43
 640 0272 1B69     		ldr	r3, [r3, #16]
 641 0274 43F02003 		orr	r3, r3, #32
 642 0278 1361     		str	r3, [r2, #16]
 639:common/stm32f10x_flash.c ****     FLASH->CR |= CR_STRT_Set;
 643              		.loc 1 639 0
 644 027a 1F4A     		ldr	r2, .L43
 645 027c 1E4B     		ldr	r3, .L43
 646 027e 1B69     		ldr	r3, [r3, #16]
 647 0280 43F04003 		orr	r3, r3, #64
 648 0284 1361     		str	r3, [r2, #16]
 640:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 641:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(EraseTimeout);
 649              		.loc 1 641 0
 650 0286 4FF43020 		mov	r0, #720896
 651 028a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 652 028e 0346     		mov	r3, r0
 653 0290 7B71     		strb	r3, [r7, #5]
 642:common/stm32f10x_flash.c ****     
 643:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 654              		.loc 1 643 0
 655 0292 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 656 0294 042B     		cmp	r3, #4
 657 0296 20D1     		bne	.L40
 644:common/stm32f10x_flash.c ****     {
 645:common/stm32f10x_flash.c ****       /* if the erase operation is completed, disable the OPTER Bit */
 646:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTER_Reset;
 658              		.loc 1 646 0
 659 0298 1749     		ldr	r1, .L43
 660 029a 174B     		ldr	r3, .L43
 661 029c 1A69     		ldr	r2, [r3, #16]
 662 029e 41F6DF73 		movw	r3, #8159
 663 02a2 1340     		ands	r3, r3, r2
 664 02a4 0B61     		str	r3, [r1, #16]
 647:common/stm32f10x_flash.c ****        
ARM GAS  /tmp/ccFIADOf.s 			page 24


 648:common/stm32f10x_flash.c ****       /* Enable the Option Bytes Programming operation */
 649:common/stm32f10x_flash.c ****       FLASH->CR |= CR_OPTPG_Set;
 665              		.loc 1 649 0
 666 02a6 144A     		ldr	r2, .L43
 667 02a8 134B     		ldr	r3, .L43
 668 02aa 1B69     		ldr	r3, [r3, #16]
 669 02ac 43F01003 		orr	r3, r3, #16
 670 02b0 1361     		str	r3, [r2, #16]
 650:common/stm32f10x_flash.c ****       /* Restore the last read protection Option Byte value */
 651:common/stm32f10x_flash.c ****       OB->RDP = (uint16_t)rdptmp; 
 671              		.loc 1 651 0
 672 02b2 144A     		ldr	r2, .L43+12
 673 02b4 FB88     		ldrh	r3, [r7, #6]	@ movhi
 674 02b6 1380     		strh	r3, [r2]	@ movhi
 652:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 653:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 675              		.loc 1 653 0
 676 02b8 4FF40050 		mov	r0, #8192
 677 02bc FFF7FEFF 		bl	FLASH_WaitForLastOperation
 678 02c0 0346     		mov	r3, r0
 679 02c2 7B71     		strb	r3, [r7, #5]
 654:common/stm32f10x_flash.c ****  
 655:common/stm32f10x_flash.c ****       if(status != FLASH_TIMEOUT)
 680              		.loc 1 655 0
 681 02c4 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 682 02c6 052B     		cmp	r3, #5
 683 02c8 11D0     		beq	.L39
 656:common/stm32f10x_flash.c ****       {
 657:common/stm32f10x_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
 658:common/stm32f10x_flash.c ****         FLASH->CR &= CR_OPTPG_Reset;
 684              		.loc 1 658 0
 685 02ca 0B49     		ldr	r1, .L43
 686 02cc 0A4B     		ldr	r3, .L43
 687 02ce 1A69     		ldr	r2, [r3, #16]
 688 02d0 41F6EF73 		movw	r3, #8175
 689 02d4 1340     		ands	r3, r3, r2
 690 02d6 0B61     		str	r3, [r1, #16]
 691 02d8 09E0     		b	.L39
 692              	.L40:
 659:common/stm32f10x_flash.c ****       }
 660:common/stm32f10x_flash.c ****     }
 661:common/stm32f10x_flash.c ****     else
 662:common/stm32f10x_flash.c ****     {
 663:common/stm32f10x_flash.c ****       if (status != FLASH_TIMEOUT)
 693              		.loc 1 663 0
 694 02da 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 695 02dc 052B     		cmp	r3, #5
 696 02de 06D0     		beq	.L39
 664:common/stm32f10x_flash.c ****       {
 665:common/stm32f10x_flash.c ****         /* Disable the OPTPG Bit */
 666:common/stm32f10x_flash.c ****         FLASH->CR &= CR_OPTPG_Reset;
 697              		.loc 1 666 0
 698 02e0 0549     		ldr	r1, .L43
 699 02e2 054B     		ldr	r3, .L43
 700 02e4 1A69     		ldr	r2, [r3, #16]
 701 02e6 41F6EF73 		movw	r3, #8175
 702 02ea 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccFIADOf.s 			page 25


 703 02ec 0B61     		str	r3, [r1, #16]
 704              	.L39:
 667:common/stm32f10x_flash.c ****       }
 668:common/stm32f10x_flash.c ****     }  
 669:common/stm32f10x_flash.c ****   }
 670:common/stm32f10x_flash.c ****   /* Return the erase status */
 671:common/stm32f10x_flash.c ****   return status;
 705              		.loc 1 671 0
 706 02ee 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 672:common/stm32f10x_flash.c **** }
 707              		.loc 1 672 0
 708 02f0 1846     		mov	r0, r3
 709 02f2 0837     		adds	r7, r7, #8
 710              		.cfi_def_cfa_offset 8
 711 02f4 BD46     		mov	sp, r7
 712              		.cfi_def_cfa_register 13
 713              		@ sp needed
 714 02f6 80BD     		pop	{r7, pc}
 715              	.L44:
 716              		.align	2
 717              	.L43:
 718 02f8 00200240 		.word	1073881088
 719 02fc 23016745 		.word	1164378403
 720 0300 AB89EFCD 		.word	-839939669
 721 0304 00F8FF1F 		.word	536868864
 722              		.cfi_endproc
 723              	.LFE73:
 724              		.size	FLASH_EraseOptionBytes, .-FLASH_EraseOptionBytes
 725              		.align	1
 726              		.global	FLASH_ProgramWord
 727              		.syntax unified
 728              		.thumb
 729              		.thumb_func
 730              		.fpu softvfp
 731              		.type	FLASH_ProgramWord, %function
 732              	FLASH_ProgramWord:
 733              	.LFB74:
 673:common/stm32f10x_flash.c **** 
 674:common/stm32f10x_flash.c **** /**
 675:common/stm32f10x_flash.c ****   * @brief  Programs a word at a specified address.
 676:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 677:common/stm32f10x_flash.c ****   * @param  Address: specifies the address to be programmed.
 678:common/stm32f10x_flash.c ****   * @param  Data: specifies the data to be programmed.
 679:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 680:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 681:common/stm32f10x_flash.c ****   */
 682:common/stm32f10x_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 683:common/stm32f10x_flash.c **** {
 734              		.loc 1 683 0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 16
 737              		@ frame_needed = 1, uses_anonymous_args = 0
 738 0308 80B5     		push	{r7, lr}
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 7, -8
 741              		.cfi_offset 14, -4
 742 030a 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccFIADOf.s 			page 26


 743              		.cfi_def_cfa_offset 24
 744 030c 00AF     		add	r7, sp, #0
 745              		.cfi_def_cfa_register 7
 746 030e 7860     		str	r0, [r7, #4]
 747 0310 3960     		str	r1, [r7]
 684:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 748              		.loc 1 684 0
 749 0312 0423     		movs	r3, #4
 750 0314 FB73     		strb	r3, [r7, #15]
 685:common/stm32f10x_flash.c ****   __IO uint32_t tmp = 0;
 751              		.loc 1 685 0
 752 0316 0023     		movs	r3, #0
 753 0318 BB60     		str	r3, [r7, #8]
 686:common/stm32f10x_flash.c **** 
 687:common/stm32f10x_flash.c ****   /* Check the parameters */
 688:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 689:common/stm32f10x_flash.c **** 
 690:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 691:common/stm32f10x_flash.c ****   if(Address < FLASH_BANK1_END_ADDRESS - 2)
 692:common/stm32f10x_flash.c ****   { 
 693:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 694:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(ProgramTimeout); 
 695:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 696:common/stm32f10x_flash.c ****     {
 697:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new first 
 698:common/stm32f10x_flash.c ****         half word */
 699:common/stm32f10x_flash.c ****       FLASH->CR |= CR_PG_Set;
 700:common/stm32f10x_flash.c ****   
 701:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = (uint16_t)Data;
 702:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 703:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 704:common/stm32f10x_flash.c ****  
 705:common/stm32f10x_flash.c ****       if(status == FLASH_COMPLETE)
 706:common/stm32f10x_flash.c ****       {
 707:common/stm32f10x_flash.c ****         /* if the previous operation is completed, proceed to program the new second 
 708:common/stm32f10x_flash.c ****         half word */
 709:common/stm32f10x_flash.c ****         tmp = Address + 2;
 710:common/stm32f10x_flash.c **** 
 711:common/stm32f10x_flash.c ****         *(__IO uint16_t*) tmp = Data >> 16;
 712:common/stm32f10x_flash.c ****     
 713:common/stm32f10x_flash.c ****         /* Wait for last operation to be completed */
 714:common/stm32f10x_flash.c ****         status = FLASH_WaitForLastOperation(ProgramTimeout);
 715:common/stm32f10x_flash.c ****         
 716:common/stm32f10x_flash.c ****         /* Disable the PG Bit */
 717:common/stm32f10x_flash.c ****         FLASH->CR &= CR_PG_Reset;
 718:common/stm32f10x_flash.c ****       }
 719:common/stm32f10x_flash.c ****       else
 720:common/stm32f10x_flash.c ****       {
 721:common/stm32f10x_flash.c ****         /* Disable the PG Bit */
 722:common/stm32f10x_flash.c ****         FLASH->CR &= CR_PG_Reset;
 723:common/stm32f10x_flash.c ****        }
 724:common/stm32f10x_flash.c ****     }
 725:common/stm32f10x_flash.c ****   }
 726:common/stm32f10x_flash.c ****   else if(Address == (FLASH_BANK1_END_ADDRESS - 1))
 727:common/stm32f10x_flash.c ****   {
 728:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 729:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
ARM GAS  /tmp/ccFIADOf.s 			page 27


 730:common/stm32f10x_flash.c **** 
 731:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 732:common/stm32f10x_flash.c ****     {
 733:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new first 
 734:common/stm32f10x_flash.c ****         half word */
 735:common/stm32f10x_flash.c ****       FLASH->CR |= CR_PG_Set;
 736:common/stm32f10x_flash.c ****   
 737:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = (uint16_t)Data;
 738:common/stm32f10x_flash.c **** 
 739:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 740:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 741:common/stm32f10x_flash.c ****       
 742:common/stm32f10x_flash.c **** 	  /* Disable the PG Bit */
 743:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 744:common/stm32f10x_flash.c ****     }
 745:common/stm32f10x_flash.c ****     else
 746:common/stm32f10x_flash.c ****     {
 747:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 748:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 749:common/stm32f10x_flash.c ****     }
 750:common/stm32f10x_flash.c **** 
 751:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 752:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 753:common/stm32f10x_flash.c **** 
 754:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 755:common/stm32f10x_flash.c ****     {
 756:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new second 
 757:common/stm32f10x_flash.c ****       half word */
 758:common/stm32f10x_flash.c ****       FLASH->CR2 |= CR_PG_Set;
 759:common/stm32f10x_flash.c ****       tmp = Address + 2;
 760:common/stm32f10x_flash.c **** 
 761:common/stm32f10x_flash.c ****       *(__IO uint16_t*) tmp = Data >> 16;
 762:common/stm32f10x_flash.c ****     
 763:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 764:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 765:common/stm32f10x_flash.c ****         
 766:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 767:common/stm32f10x_flash.c ****       FLASH->CR2 &= CR_PG_Reset;
 768:common/stm32f10x_flash.c ****     }
 769:common/stm32f10x_flash.c ****     else
 770:common/stm32f10x_flash.c ****     {
 771:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 772:common/stm32f10x_flash.c ****       FLASH->CR2 &= CR_PG_Reset;
 773:common/stm32f10x_flash.c ****     }
 774:common/stm32f10x_flash.c ****   }
 775:common/stm32f10x_flash.c ****   else
 776:common/stm32f10x_flash.c ****   {
 777:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 778:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 779:common/stm32f10x_flash.c **** 
 780:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 781:common/stm32f10x_flash.c ****     {
 782:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new first 
 783:common/stm32f10x_flash.c ****         half word */
 784:common/stm32f10x_flash.c ****       FLASH->CR2 |= CR_PG_Set;
 785:common/stm32f10x_flash.c ****   
 786:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = (uint16_t)Data;
ARM GAS  /tmp/ccFIADOf.s 			page 28


 787:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 788:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 789:common/stm32f10x_flash.c ****  
 790:common/stm32f10x_flash.c ****       if(status == FLASH_COMPLETE)
 791:common/stm32f10x_flash.c ****       {
 792:common/stm32f10x_flash.c ****         /* if the previous operation is completed, proceed to program the new second 
 793:common/stm32f10x_flash.c ****         half word */
 794:common/stm32f10x_flash.c ****         tmp = Address + 2;
 795:common/stm32f10x_flash.c **** 
 796:common/stm32f10x_flash.c ****         *(__IO uint16_t*) tmp = Data >> 16;
 797:common/stm32f10x_flash.c ****     
 798:common/stm32f10x_flash.c ****         /* Wait for last operation to be completed */
 799:common/stm32f10x_flash.c ****         status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 800:common/stm32f10x_flash.c ****         
 801:common/stm32f10x_flash.c ****         /* Disable the PG Bit */
 802:common/stm32f10x_flash.c ****         FLASH->CR2 &= CR_PG_Reset;
 803:common/stm32f10x_flash.c ****       }
 804:common/stm32f10x_flash.c ****       else
 805:common/stm32f10x_flash.c ****       {
 806:common/stm32f10x_flash.c ****         /* Disable the PG Bit */
 807:common/stm32f10x_flash.c ****         FLASH->CR2 &= CR_PG_Reset;
 808:common/stm32f10x_flash.c ****       }
 809:common/stm32f10x_flash.c ****     }
 810:common/stm32f10x_flash.c ****   }
 811:common/stm32f10x_flash.c **** #else
 812:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 813:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 754              		.loc 1 813 0
 755 031a 4FF40050 		mov	r0, #8192
 756 031e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 757 0322 0346     		mov	r3, r0
 758 0324 FB73     		strb	r3, [r7, #15]
 814:common/stm32f10x_flash.c ****   
 815:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 759              		.loc 1 815 0
 760 0326 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 761 0328 042B     		cmp	r3, #4
 762 032a 30D1     		bne	.L46
 816:common/stm32f10x_flash.c ****   {
 817:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to program the new first 
 818:common/stm32f10x_flash.c ****     half word */
 819:common/stm32f10x_flash.c ****     FLASH->CR |= CR_PG_Set;
 763              		.loc 1 819 0
 764 032c 1A4A     		ldr	r2, .L49
 765 032e 1A4B     		ldr	r3, .L49
 766 0330 1B69     		ldr	r3, [r3, #16]
 767 0332 43F00103 		orr	r3, r3, #1
 768 0336 1361     		str	r3, [r2, #16]
 820:common/stm32f10x_flash.c ****   
 821:common/stm32f10x_flash.c ****     *(__IO uint16_t*)Address = (uint16_t)Data;
 769              		.loc 1 821 0
 770 0338 7B68     		ldr	r3, [r7, #4]
 771 033a 3A68     		ldr	r2, [r7]
 772 033c 92B2     		uxth	r2, r2
 773 033e 1A80     		strh	r2, [r3]	@ movhi
 822:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 823:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
ARM GAS  /tmp/ccFIADOf.s 			page 29


 774              		.loc 1 823 0
 775 0340 4FF40050 		mov	r0, #8192
 776 0344 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 777 0348 0346     		mov	r3, r0
 778 034a FB73     		strb	r3, [r7, #15]
 824:common/stm32f10x_flash.c ****  
 825:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 779              		.loc 1 825 0
 780 034c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 781 034e 042B     		cmp	r3, #4
 782 0350 16D1     		bne	.L47
 826:common/stm32f10x_flash.c ****     {
 827:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new second 
 828:common/stm32f10x_flash.c ****       half word */
 829:common/stm32f10x_flash.c ****       tmp = Address + 2;
 783              		.loc 1 829 0
 784 0352 7B68     		ldr	r3, [r7, #4]
 785 0354 0233     		adds	r3, r3, #2
 786 0356 BB60     		str	r3, [r7, #8]
 830:common/stm32f10x_flash.c **** 
 831:common/stm32f10x_flash.c ****       *(__IO uint16_t*) tmp = Data >> 16;
 787              		.loc 1 831 0
 788 0358 BB68     		ldr	r3, [r7, #8]
 789 035a 1A46     		mov	r2, r3
 790 035c 3B68     		ldr	r3, [r7]
 791 035e 1B0C     		lsrs	r3, r3, #16
 792 0360 9BB2     		uxth	r3, r3
 793 0362 1380     		strh	r3, [r2]	@ movhi
 832:common/stm32f10x_flash.c ****     
 833:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 834:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 794              		.loc 1 834 0
 795 0364 4FF40050 		mov	r0, #8192
 796 0368 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 797 036c 0346     		mov	r3, r0
 798 036e FB73     		strb	r3, [r7, #15]
 835:common/stm32f10x_flash.c ****         
 836:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 837:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 799              		.loc 1 837 0
 800 0370 0949     		ldr	r1, .L49
 801 0372 094B     		ldr	r3, .L49
 802 0374 1A69     		ldr	r2, [r3, #16]
 803 0376 41F6FE73 		movw	r3, #8190
 804 037a 1340     		ands	r3, r3, r2
 805 037c 0B61     		str	r3, [r1, #16]
 806 037e 06E0     		b	.L46
 807              	.L47:
 838:common/stm32f10x_flash.c ****     }
 839:common/stm32f10x_flash.c ****     else
 840:common/stm32f10x_flash.c ****     {
 841:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 842:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 808              		.loc 1 842 0
 809 0380 0549     		ldr	r1, .L49
 810 0382 054B     		ldr	r3, .L49
 811 0384 1A69     		ldr	r2, [r3, #16]
ARM GAS  /tmp/ccFIADOf.s 			page 30


 812 0386 41F6FE73 		movw	r3, #8190
 813 038a 1340     		ands	r3, r3, r2
 814 038c 0B61     		str	r3, [r1, #16]
 815              	.L46:
 843:common/stm32f10x_flash.c ****     }
 844:common/stm32f10x_flash.c ****   }         
 845:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 846:common/stm32f10x_flash.c ****    
 847:common/stm32f10x_flash.c ****   /* Return the Program Status */
 848:common/stm32f10x_flash.c ****   return status;
 816              		.loc 1 848 0
 817 038e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 849:common/stm32f10x_flash.c **** }
 818              		.loc 1 849 0
 819 0390 1846     		mov	r0, r3
 820 0392 1037     		adds	r7, r7, #16
 821              		.cfi_def_cfa_offset 8
 822 0394 BD46     		mov	sp, r7
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 0396 80BD     		pop	{r7, pc}
 826              	.L50:
 827              		.align	2
 828              	.L49:
 829 0398 00200240 		.word	1073881088
 830              		.cfi_endproc
 831              	.LFE74:
 832              		.size	FLASH_ProgramWord, .-FLASH_ProgramWord
 833              		.align	1
 834              		.global	FLASH_ProgramHalfWord
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 838              		.fpu softvfp
 839              		.type	FLASH_ProgramHalfWord, %function
 840              	FLASH_ProgramHalfWord:
 841              	.LFB75:
 850:common/stm32f10x_flash.c **** 
 851:common/stm32f10x_flash.c **** /**
 852:common/stm32f10x_flash.c ****   * @brief  Programs a half word at a specified address.
 853:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 854:common/stm32f10x_flash.c ****   * @param  Address: specifies the address to be programmed.
 855:common/stm32f10x_flash.c ****   * @param  Data: specifies the data to be programmed.
 856:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 857:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 858:common/stm32f10x_flash.c ****   */
 859:common/stm32f10x_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 860:common/stm32f10x_flash.c **** {
 842              		.loc 1 860 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 16
 845              		@ frame_needed = 1, uses_anonymous_args = 0
 846 039c 80B5     		push	{r7, lr}
 847              		.cfi_def_cfa_offset 8
 848              		.cfi_offset 7, -8
 849              		.cfi_offset 14, -4
 850 039e 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccFIADOf.s 			page 31


 851              		.cfi_def_cfa_offset 24
 852 03a0 00AF     		add	r7, sp, #0
 853              		.cfi_def_cfa_register 7
 854 03a2 7860     		str	r0, [r7, #4]
 855 03a4 0B46     		mov	r3, r1
 856 03a6 7B80     		strh	r3, [r7, #2]	@ movhi
 861:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 857              		.loc 1 861 0
 858 03a8 0423     		movs	r3, #4
 859 03aa FB73     		strb	r3, [r7, #15]
 862:common/stm32f10x_flash.c ****   /* Check the parameters */
 863:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 864:common/stm32f10x_flash.c **** 
 865:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 866:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 867:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 868:common/stm32f10x_flash.c ****   
 869:common/stm32f10x_flash.c ****   if(Address < FLASH_BANK1_END_ADDRESS)
 870:common/stm32f10x_flash.c ****   {
 871:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 872:common/stm32f10x_flash.c ****     {
 873:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new data */
 874:common/stm32f10x_flash.c ****       FLASH->CR |= CR_PG_Set;
 875:common/stm32f10x_flash.c ****   
 876:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = Data;
 877:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 878:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 879:common/stm32f10x_flash.c **** 
 880:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 881:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 882:common/stm32f10x_flash.c ****     }
 883:common/stm32f10x_flash.c ****   }
 884:common/stm32f10x_flash.c ****   else
 885:common/stm32f10x_flash.c ****   {
 886:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 887:common/stm32f10x_flash.c ****     {
 888:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new data */
 889:common/stm32f10x_flash.c ****       FLASH->CR2 |= CR_PG_Set;
 890:common/stm32f10x_flash.c ****   
 891:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = Data;
 892:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 893:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 894:common/stm32f10x_flash.c **** 
 895:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 896:common/stm32f10x_flash.c ****       FLASH->CR2 &= CR_PG_Reset;
 897:common/stm32f10x_flash.c ****     }
 898:common/stm32f10x_flash.c ****   }
 899:common/stm32f10x_flash.c **** #else
 900:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 901:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 860              		.loc 1 901 0
 861 03ac 4FF40050 		mov	r0, #8192
 862 03b0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 863 03b4 0346     		mov	r3, r0
 864 03b6 FB73     		strb	r3, [r7, #15]
 902:common/stm32f10x_flash.c ****   
 903:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
ARM GAS  /tmp/ccFIADOf.s 			page 32


 865              		.loc 1 903 0
 866 03b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 867 03ba 042B     		cmp	r3, #4
 868 03bc 15D1     		bne	.L52
 904:common/stm32f10x_flash.c ****   {
 905:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 906:common/stm32f10x_flash.c ****     FLASH->CR |= CR_PG_Set;
 869              		.loc 1 906 0
 870 03be 0D4A     		ldr	r2, .L54
 871 03c0 0C4B     		ldr	r3, .L54
 872 03c2 1B69     		ldr	r3, [r3, #16]
 873 03c4 43F00103 		orr	r3, r3, #1
 874 03c8 1361     		str	r3, [r2, #16]
 907:common/stm32f10x_flash.c ****   
 908:common/stm32f10x_flash.c ****     *(__IO uint16_t*)Address = Data;
 875              		.loc 1 908 0
 876 03ca 7B68     		ldr	r3, [r7, #4]
 877 03cc 7A88     		ldrh	r2, [r7, #2]	@ movhi
 878 03ce 1A80     		strh	r2, [r3]	@ movhi
 909:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 910:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
 879              		.loc 1 910 0
 880 03d0 4FF40050 		mov	r0, #8192
 881 03d4 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 882 03d8 0346     		mov	r3, r0
 883 03da FB73     		strb	r3, [r7, #15]
 911:common/stm32f10x_flash.c ****     
 912:common/stm32f10x_flash.c ****     /* Disable the PG Bit */
 913:common/stm32f10x_flash.c ****     FLASH->CR &= CR_PG_Reset;
 884              		.loc 1 913 0
 885 03dc 0549     		ldr	r1, .L54
 886 03de 054B     		ldr	r3, .L54
 887 03e0 1A69     		ldr	r2, [r3, #16]
 888 03e2 41F6FE73 		movw	r3, #8190
 889 03e6 1340     		ands	r3, r3, r2
 890 03e8 0B61     		str	r3, [r1, #16]
 891              	.L52:
 914:common/stm32f10x_flash.c ****   } 
 915:common/stm32f10x_flash.c **** #endif  /* STM32F10X_XL */
 916:common/stm32f10x_flash.c ****   
 917:common/stm32f10x_flash.c ****   /* Return the Program Status */
 918:common/stm32f10x_flash.c ****   return status;
 892              		.loc 1 918 0
 893 03ea FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 919:common/stm32f10x_flash.c **** }
 894              		.loc 1 919 0
 895 03ec 1846     		mov	r0, r3
 896 03ee 1037     		adds	r7, r7, #16
 897              		.cfi_def_cfa_offset 8
 898 03f0 BD46     		mov	sp, r7
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 03f2 80BD     		pop	{r7, pc}
 902              	.L55:
 903              		.align	2
 904              	.L54:
 905 03f4 00200240 		.word	1073881088
ARM GAS  /tmp/ccFIADOf.s 			page 33


 906              		.cfi_endproc
 907              	.LFE75:
 908              		.size	FLASH_ProgramHalfWord, .-FLASH_ProgramHalfWord
 909              		.align	1
 910              		.global	FLASH_ProgramOptionByteData
 911              		.syntax unified
 912              		.thumb
 913              		.thumb_func
 914              		.fpu softvfp
 915              		.type	FLASH_ProgramOptionByteData, %function
 916              	FLASH_ProgramOptionByteData:
 917              	.LFB76:
 920:common/stm32f10x_flash.c **** 
 921:common/stm32f10x_flash.c **** /**
 922:common/stm32f10x_flash.c ****   * @brief  Programs a half word at a specified Option Byte Data address.
 923:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 924:common/stm32f10x_flash.c ****   * @param  Address: specifies the address to be programmed.
 925:common/stm32f10x_flash.c ****   *   This parameter can be 0x1FFFF804 or 0x1FFFF806. 
 926:common/stm32f10x_flash.c ****   * @param  Data: specifies the data to be programmed.
 927:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 928:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 929:common/stm32f10x_flash.c ****   */
 930:common/stm32f10x_flash.c **** FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
 931:common/stm32f10x_flash.c **** {
 918              		.loc 1 931 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 16
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 03f8 80B5     		push	{r7, lr}
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 7, -8
 925              		.cfi_offset 14, -4
 926 03fa 84B0     		sub	sp, sp, #16
 927              		.cfi_def_cfa_offset 24
 928 03fc 00AF     		add	r7, sp, #0
 929              		.cfi_def_cfa_register 7
 930 03fe 7860     		str	r0, [r7, #4]
 931 0400 0B46     		mov	r3, r1
 932 0402 FB70     		strb	r3, [r7, #3]
 932:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 933              		.loc 1 932 0
 934 0404 0423     		movs	r3, #4
 935 0406 FB73     		strb	r3, [r7, #15]
 933:common/stm32f10x_flash.c ****   /* Check the parameters */
 934:common/stm32f10x_flash.c ****   assert_param(IS_OB_DATA_ADDRESS(Address));
 935:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 936              		.loc 1 935 0
 937 0408 4FF40050 		mov	r0, #8192
 938 040c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 939 0410 0346     		mov	r3, r0
 940 0412 FB73     		strb	r3, [r7, #15]
 936:common/stm32f10x_flash.c **** 
 937:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 941              		.loc 1 937 0
 942 0414 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 943 0416 042B     		cmp	r3, #4
 944 0418 1FD1     		bne	.L57
ARM GAS  /tmp/ccFIADOf.s 			page 34


 938:common/stm32f10x_flash.c ****   {
 939:common/stm32f10x_flash.c ****     /* Authorize the small information block programming */
 940:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY1;
 945              		.loc 1 940 0
 946 041a 124B     		ldr	r3, .L59
 947 041c 124A     		ldr	r2, .L59+4
 948 041e 9A60     		str	r2, [r3, #8]
 941:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY2;
 949              		.loc 1 941 0
 950 0420 104B     		ldr	r3, .L59
 951 0422 124A     		ldr	r2, .L59+8
 952 0424 9A60     		str	r2, [r3, #8]
 942:common/stm32f10x_flash.c ****     /* Enables the Option Bytes Programming operation */
 943:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTPG_Set; 
 953              		.loc 1 943 0
 954 0426 0F4A     		ldr	r2, .L59
 955 0428 0E4B     		ldr	r3, .L59
 956 042a 1B69     		ldr	r3, [r3, #16]
 957 042c 43F01003 		orr	r3, r3, #16
 958 0430 1361     		str	r3, [r2, #16]
 944:common/stm32f10x_flash.c ****     *(__IO uint16_t*)Address = Data;
 959              		.loc 1 944 0
 960 0432 7B68     		ldr	r3, [r7, #4]
 961 0434 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 962 0436 92B2     		uxth	r2, r2
 963 0438 1A80     		strh	r2, [r3]	@ movhi
 945:common/stm32f10x_flash.c ****     
 946:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 947:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
 964              		.loc 1 947 0
 965 043a 4FF40050 		mov	r0, #8192
 966 043e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 967 0442 0346     		mov	r3, r0
 968 0444 FB73     		strb	r3, [r7, #15]
 948:common/stm32f10x_flash.c ****     if(status != FLASH_TIMEOUT)
 969              		.loc 1 948 0
 970 0446 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 971 0448 052B     		cmp	r3, #5
 972 044a 06D0     		beq	.L57
 949:common/stm32f10x_flash.c ****     {
 950:common/stm32f10x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 951:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTPG_Reset;
 973              		.loc 1 951 0
 974 044c 0549     		ldr	r1, .L59
 975 044e 054B     		ldr	r3, .L59
 976 0450 1A69     		ldr	r2, [r3, #16]
 977 0452 41F6EF73 		movw	r3, #8175
 978 0456 1340     		ands	r3, r3, r2
 979 0458 0B61     		str	r3, [r1, #16]
 980              	.L57:
 952:common/stm32f10x_flash.c ****     }
 953:common/stm32f10x_flash.c ****   }
 954:common/stm32f10x_flash.c ****   /* Return the Option Byte Data Program Status */
 955:common/stm32f10x_flash.c ****   return status;
 981              		.loc 1 955 0
 982 045a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 956:common/stm32f10x_flash.c **** }
ARM GAS  /tmp/ccFIADOf.s 			page 35


 983              		.loc 1 956 0
 984 045c 1846     		mov	r0, r3
 985 045e 1037     		adds	r7, r7, #16
 986              		.cfi_def_cfa_offset 8
 987 0460 BD46     		mov	sp, r7
 988              		.cfi_def_cfa_register 13
 989              		@ sp needed
 990 0462 80BD     		pop	{r7, pc}
 991              	.L60:
 992              		.align	2
 993              	.L59:
 994 0464 00200240 		.word	1073881088
 995 0468 23016745 		.word	1164378403
 996 046c AB89EFCD 		.word	-839939669
 997              		.cfi_endproc
 998              	.LFE76:
 999              		.size	FLASH_ProgramOptionByteData, .-FLASH_ProgramOptionByteData
 1000              		.align	1
 1001              		.global	FLASH_EnableWriteProtection
 1002              		.syntax unified
 1003              		.thumb
 1004              		.thumb_func
 1005              		.fpu softvfp
 1006              		.type	FLASH_EnableWriteProtection, %function
 1007              	FLASH_EnableWriteProtection:
 1008              	.LFB77:
 957:common/stm32f10x_flash.c **** 
 958:common/stm32f10x_flash.c **** /**
 959:common/stm32f10x_flash.c ****   * @brief  Write protects the desired pages
 960:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 961:common/stm32f10x_flash.c ****   * @param  FLASH_Pages: specifies the address of the pages to be write protected.
 962:common/stm32f10x_flash.c ****   *   This parameter can be:
 963:common/stm32f10x_flash.c ****   *     @arg For @b STM32_Low-density_devices: value between FLASH_WRProt_Pages0to3 and FLASH_WRPro
 964:common/stm32f10x_flash.c ****   *     @arg For @b STM32_Medium-density_devices: value between FLASH_WRProt_Pages0to3
 965:common/stm32f10x_flash.c ****   *       and FLASH_WRProt_Pages124to127
 966:common/stm32f10x_flash.c ****   *     @arg For @b STM32_High-density_devices: value between FLASH_WRProt_Pages0to1 and
 967:common/stm32f10x_flash.c ****   *       FLASH_WRProt_Pages60to61 or FLASH_WRProt_Pages62to255
 968:common/stm32f10x_flash.c ****   *     @arg For @b STM32_Connectivity_line_devices: value between FLASH_WRProt_Pages0to1 and
 969:common/stm32f10x_flash.c ****   *       FLASH_WRProt_Pages60to61 or FLASH_WRProt_Pages62to127    
 970:common/stm32f10x_flash.c ****   *     @arg For @b STM32_XL-density_devices: value between FLASH_WRProt_Pages0to1 and
 971:common/stm32f10x_flash.c ****   *       FLASH_WRProt_Pages60to61 or FLASH_WRProt_Pages62to511
 972:common/stm32f10x_flash.c ****   *     @arg FLASH_WRProt_AllPages
 973:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 974:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 975:common/stm32f10x_flash.c ****   */
 976:common/stm32f10x_flash.c **** FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
 977:common/stm32f10x_flash.c **** {
 1009              		.loc 1 977 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 24
 1012              		@ frame_needed = 1, uses_anonymous_args = 0
 1013 0470 80B5     		push	{r7, lr}
 1014              		.cfi_def_cfa_offset 8
 1015              		.cfi_offset 7, -8
 1016              		.cfi_offset 14, -4
 1017 0472 86B0     		sub	sp, sp, #24
 1018              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccFIADOf.s 			page 36


 1019 0474 00AF     		add	r7, sp, #0
 1020              		.cfi_def_cfa_register 7
 1021 0476 7860     		str	r0, [r7, #4]
 978:common/stm32f10x_flash.c ****   uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
 1022              		.loc 1 978 0
 1023 0478 4FF6FF73 		movw	r3, #65535
 1024 047c BB82     		strh	r3, [r7, #20]	@ movhi
 1025 047e 4FF6FF73 		movw	r3, #65535
 1026 0482 7B82     		strh	r3, [r7, #18]	@ movhi
 1027 0484 4FF6FF73 		movw	r3, #65535
 1028 0488 3B82     		strh	r3, [r7, #16]	@ movhi
 1029 048a 4FF6FF73 		movw	r3, #65535
 1030 048e FB81     		strh	r3, [r7, #14]	@ movhi
 979:common/stm32f10x_flash.c ****   
 980:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1031              		.loc 1 980 0
 1032 0490 0423     		movs	r3, #4
 1033 0492 FB75     		strb	r3, [r7, #23]
 981:common/stm32f10x_flash.c ****   
 982:common/stm32f10x_flash.c ****   /* Check the parameters */
 983:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
 984:common/stm32f10x_flash.c ****   
 985:common/stm32f10x_flash.c ****   FLASH_Pages = (uint32_t)(~FLASH_Pages);
 1034              		.loc 1 985 0
 1035 0494 7B68     		ldr	r3, [r7, #4]
 1036 0496 DB43     		mvns	r3, r3
 1037 0498 7B60     		str	r3, [r7, #4]
 986:common/stm32f10x_flash.c ****   WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
 1038              		.loc 1 986 0
 1039 049a 7B68     		ldr	r3, [r7, #4]
 1040 049c 9BB2     		uxth	r3, r3
 1041 049e DBB2     		uxtb	r3, r3
 1042 04a0 BB82     		strh	r3, [r7, #20]	@ movhi
 987:common/stm32f10x_flash.c ****   WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
 1043              		.loc 1 987 0
 1044 04a2 7B68     		ldr	r3, [r7, #4]
 1045 04a4 1B0A     		lsrs	r3, r3, #8
 1046 04a6 9BB2     		uxth	r3, r3
 1047 04a8 DBB2     		uxtb	r3, r3
 1048 04aa 7B82     		strh	r3, [r7, #18]	@ movhi
 988:common/stm32f10x_flash.c ****   WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
 1049              		.loc 1 988 0
 1050 04ac 7B68     		ldr	r3, [r7, #4]
 1051 04ae 1B0C     		lsrs	r3, r3, #16
 1052 04b0 9BB2     		uxth	r3, r3
 1053 04b2 DBB2     		uxtb	r3, r3
 1054 04b4 3B82     		strh	r3, [r7, #16]	@ movhi
 989:common/stm32f10x_flash.c ****   WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 1055              		.loc 1 989 0
 1056 04b6 7B68     		ldr	r3, [r7, #4]
 1057 04b8 1B0E     		lsrs	r3, r3, #24
 1058 04ba FB81     		strh	r3, [r7, #14]	@ movhi
 990:common/stm32f10x_flash.c ****   
 991:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 992:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 1059              		.loc 1 992 0
 1060 04bc 4FF40050 		mov	r0, #8192
ARM GAS  /tmp/ccFIADOf.s 			page 37


 1061 04c0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1062 04c4 0346     		mov	r3, r0
 1063 04c6 FB75     		strb	r3, [r7, #23]
 993:common/stm32f10x_flash.c ****   
 994:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 1064              		.loc 1 994 0
 1065 04c8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1066 04ca 042B     		cmp	r3, #4
 1067 04cc 4ED1     		bne	.L62
 995:common/stm32f10x_flash.c ****   {
 996:common/stm32f10x_flash.c ****     /* Authorizes the small information block programming */
 997:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY1;
 1068              		.loc 1 997 0
 1069 04ce 2A4B     		ldr	r3, .L68
 1070 04d0 2A4A     		ldr	r2, .L68+4
 1071 04d2 9A60     		str	r2, [r3, #8]
 998:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY2;
 1072              		.loc 1 998 0
 1073 04d4 284B     		ldr	r3, .L68
 1074 04d6 2A4A     		ldr	r2, .L68+8
 1075 04d8 9A60     		str	r2, [r3, #8]
 999:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTPG_Set;
 1076              		.loc 1 999 0
 1077 04da 274A     		ldr	r2, .L68
 1078 04dc 264B     		ldr	r3, .L68
 1079 04de 1B69     		ldr	r3, [r3, #16]
 1080 04e0 43F01003 		orr	r3, r3, #16
 1081 04e4 1361     		str	r3, [r2, #16]
1000:common/stm32f10x_flash.c ****     if(WRP0_Data != 0xFF)
 1082              		.loc 1 1000 0
 1083 04e6 BB8A     		ldrh	r3, [r7, #20]
 1084 04e8 FF2B     		cmp	r3, #255
 1085 04ea 08D0     		beq	.L63
1001:common/stm32f10x_flash.c ****     {
1002:common/stm32f10x_flash.c ****       OB->WRP0 = WRP0_Data;
 1086              		.loc 1 1002 0
 1087 04ec 254A     		ldr	r2, .L68+12
 1088 04ee BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1089 04f0 1381     		strh	r3, [r2, #8]	@ movhi
1003:common/stm32f10x_flash.c ****       
1004:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1005:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 1090              		.loc 1 1005 0
 1091 04f2 4FF40050 		mov	r0, #8192
 1092 04f6 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1093 04fa 0346     		mov	r3, r0
 1094 04fc FB75     		strb	r3, [r7, #23]
 1095              	.L63:
1006:common/stm32f10x_flash.c ****     }
1007:common/stm32f10x_flash.c ****     if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 1096              		.loc 1 1007 0
 1097 04fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1098 0500 042B     		cmp	r3, #4
 1099 0502 0BD1     		bne	.L64
 1100              		.loc 1 1007 0 is_stmt 0 discriminator 1
 1101 0504 7B8A     		ldrh	r3, [r7, #18]
 1102 0506 FF2B     		cmp	r3, #255
ARM GAS  /tmp/ccFIADOf.s 			page 38


 1103 0508 08D0     		beq	.L64
1008:common/stm32f10x_flash.c ****     {
1009:common/stm32f10x_flash.c ****       OB->WRP1 = WRP1_Data;
 1104              		.loc 1 1009 0 is_stmt 1
 1105 050a 1E4A     		ldr	r2, .L68+12
 1106 050c 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 1107 050e 5381     		strh	r3, [r2, #10]	@ movhi
1010:common/stm32f10x_flash.c ****       
1011:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1012:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 1108              		.loc 1 1012 0
 1109 0510 4FF40050 		mov	r0, #8192
 1110 0514 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1111 0518 0346     		mov	r3, r0
 1112 051a FB75     		strb	r3, [r7, #23]
 1113              	.L64:
1013:common/stm32f10x_flash.c ****     }
1014:common/stm32f10x_flash.c ****     if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 1114              		.loc 1 1014 0
 1115 051c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1116 051e 042B     		cmp	r3, #4
 1117 0520 0BD1     		bne	.L65
 1118              		.loc 1 1014 0 is_stmt 0 discriminator 1
 1119 0522 3B8A     		ldrh	r3, [r7, #16]
 1120 0524 FF2B     		cmp	r3, #255
 1121 0526 08D0     		beq	.L65
1015:common/stm32f10x_flash.c ****     {
1016:common/stm32f10x_flash.c ****       OB->WRP2 = WRP2_Data;
 1122              		.loc 1 1016 0 is_stmt 1
 1123 0528 164A     		ldr	r2, .L68+12
 1124 052a 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 1125 052c 9381     		strh	r3, [r2, #12]	@ movhi
1017:common/stm32f10x_flash.c ****       
1018:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1019:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 1126              		.loc 1 1019 0
 1127 052e 4FF40050 		mov	r0, #8192
 1128 0532 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1129 0536 0346     		mov	r3, r0
 1130 0538 FB75     		strb	r3, [r7, #23]
 1131              	.L65:
1020:common/stm32f10x_flash.c ****     }
1021:common/stm32f10x_flash.c ****     
1022:common/stm32f10x_flash.c ****     if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 1132              		.loc 1 1022 0
 1133 053a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1134 053c 042B     		cmp	r3, #4
 1135 053e 0BD1     		bne	.L66
 1136              		.loc 1 1022 0 is_stmt 0 discriminator 1
 1137 0540 FB89     		ldrh	r3, [r7, #14]
 1138 0542 FF2B     		cmp	r3, #255
 1139 0544 08D0     		beq	.L66
1023:common/stm32f10x_flash.c ****     {
1024:common/stm32f10x_flash.c ****       OB->WRP3 = WRP3_Data;
 1140              		.loc 1 1024 0 is_stmt 1
 1141 0546 0F4A     		ldr	r2, .L68+12
 1142 0548 FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccFIADOf.s 			page 39


 1143 054a D381     		strh	r3, [r2, #14]	@ movhi
1025:common/stm32f10x_flash.c ****      
1026:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1027:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 1144              		.loc 1 1027 0
 1145 054c 4FF40050 		mov	r0, #8192
 1146 0550 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1147 0554 0346     		mov	r3, r0
 1148 0556 FB75     		strb	r3, [r7, #23]
 1149              	.L66:
1028:common/stm32f10x_flash.c ****     }
1029:common/stm32f10x_flash.c ****           
1030:common/stm32f10x_flash.c ****     if(status != FLASH_TIMEOUT)
 1150              		.loc 1 1030 0
 1151 0558 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1152 055a 052B     		cmp	r3, #5
 1153 055c 06D0     		beq	.L62
1031:common/stm32f10x_flash.c ****     {
1032:common/stm32f10x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
1033:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTPG_Reset;
 1154              		.loc 1 1033 0
 1155 055e 0649     		ldr	r1, .L68
 1156 0560 054B     		ldr	r3, .L68
 1157 0562 1A69     		ldr	r2, [r3, #16]
 1158 0564 41F6EF73 		movw	r3, #8175
 1159 0568 1340     		ands	r3, r3, r2
 1160 056a 0B61     		str	r3, [r1, #16]
 1161              	.L62:
1034:common/stm32f10x_flash.c ****     }
1035:common/stm32f10x_flash.c ****   } 
1036:common/stm32f10x_flash.c ****   /* Return the write protection operation Status */
1037:common/stm32f10x_flash.c ****   return status;       
 1162              		.loc 1 1037 0
 1163 056c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1038:common/stm32f10x_flash.c **** }
 1164              		.loc 1 1038 0
 1165 056e 1846     		mov	r0, r3
 1166 0570 1837     		adds	r7, r7, #24
 1167              		.cfi_def_cfa_offset 8
 1168 0572 BD46     		mov	sp, r7
 1169              		.cfi_def_cfa_register 13
 1170              		@ sp needed
 1171 0574 80BD     		pop	{r7, pc}
 1172              	.L69:
 1173 0576 00BF     		.align	2
 1174              	.L68:
 1175 0578 00200240 		.word	1073881088
 1176 057c 23016745 		.word	1164378403
 1177 0580 AB89EFCD 		.word	-839939669
 1178 0584 00F8FF1F 		.word	536868864
 1179              		.cfi_endproc
 1180              	.LFE77:
 1181              		.size	FLASH_EnableWriteProtection, .-FLASH_EnableWriteProtection
 1182              		.align	1
 1183              		.global	FLASH_ReadOutProtection
 1184              		.syntax unified
 1185              		.thumb
ARM GAS  /tmp/ccFIADOf.s 			page 40


 1186              		.thumb_func
 1187              		.fpu softvfp
 1188              		.type	FLASH_ReadOutProtection, %function
 1189              	FLASH_ReadOutProtection:
 1190              	.LFB78:
1039:common/stm32f10x_flash.c **** 
1040:common/stm32f10x_flash.c **** /**
1041:common/stm32f10x_flash.c ****   * @brief  Enables or disables the read out protection.
1042:common/stm32f10x_flash.c ****   * @note   If the user has already programmed the other option bytes before calling 
1043:common/stm32f10x_flash.c ****   *   this function, he must re-program them since this function erases all option bytes.
1044:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1045:common/stm32f10x_flash.c ****   * @param  Newstate: new state of the ReadOut Protection.
1046:common/stm32f10x_flash.c ****   *   This parameter can be: ENABLE or DISABLE.
1047:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
1048:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1049:common/stm32f10x_flash.c ****   */
1050:common/stm32f10x_flash.c **** FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
1051:common/stm32f10x_flash.c **** {
 1191              		.loc 1 1051 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 16
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195 0588 80B5     		push	{r7, lr}
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 7, -8
 1198              		.cfi_offset 14, -4
 1199 058a 84B0     		sub	sp, sp, #16
 1200              		.cfi_def_cfa_offset 24
 1201 058c 00AF     		add	r7, sp, #0
 1202              		.cfi_def_cfa_register 7
 1203 058e 0346     		mov	r3, r0
 1204 0590 FB71     		strb	r3, [r7, #7]
1052:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1205              		.loc 1 1052 0
 1206 0592 0423     		movs	r3, #4
 1207 0594 FB73     		strb	r3, [r7, #15]
1053:common/stm32f10x_flash.c ****   /* Check the parameters */
1054:common/stm32f10x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1055:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(EraseTimeout);
 1208              		.loc 1 1055 0
 1209 0596 4FF43020 		mov	r0, #720896
 1210 059a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1211 059e 0346     		mov	r3, r0
 1212 05a0 FB73     		strb	r3, [r7, #15]
1056:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 1213              		.loc 1 1056 0
 1214 05a2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1215 05a4 042B     		cmp	r3, #4
 1216 05a6 4CD1     		bne	.L71
1057:common/stm32f10x_flash.c ****   {
1058:common/stm32f10x_flash.c ****     /* Authorizes the small information block programming */
1059:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY1;
 1217              		.loc 1 1059 0
 1218 05a8 284B     		ldr	r3, .L77
 1219 05aa 294A     		ldr	r2, .L77+4
 1220 05ac 9A60     		str	r2, [r3, #8]
1060:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY2;
ARM GAS  /tmp/ccFIADOf.s 			page 41


 1221              		.loc 1 1060 0
 1222 05ae 274B     		ldr	r3, .L77
 1223 05b0 284A     		ldr	r2, .L77+8
 1224 05b2 9A60     		str	r2, [r3, #8]
1061:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTER_Set;
 1225              		.loc 1 1061 0
 1226 05b4 254A     		ldr	r2, .L77
 1227 05b6 254B     		ldr	r3, .L77
 1228 05b8 1B69     		ldr	r3, [r3, #16]
 1229 05ba 43F02003 		orr	r3, r3, #32
 1230 05be 1361     		str	r3, [r2, #16]
1062:common/stm32f10x_flash.c ****     FLASH->CR |= CR_STRT_Set;
 1231              		.loc 1 1062 0
 1232 05c0 224A     		ldr	r2, .L77
 1233 05c2 224B     		ldr	r3, .L77
 1234 05c4 1B69     		ldr	r3, [r3, #16]
 1235 05c6 43F04003 		orr	r3, r3, #64
 1236 05ca 1361     		str	r3, [r2, #16]
1063:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
1064:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(EraseTimeout);
 1237              		.loc 1 1064 0
 1238 05cc 4FF43020 		mov	r0, #720896
 1239 05d0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1240 05d4 0346     		mov	r3, r0
 1241 05d6 FB73     		strb	r3, [r7, #15]
1065:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 1242              		.loc 1 1065 0
 1243 05d8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1244 05da 042B     		cmp	r3, #4
 1245 05dc 27D1     		bne	.L72
1066:common/stm32f10x_flash.c ****     {
1067:common/stm32f10x_flash.c ****       /* if the erase operation is completed, disable the OPTER Bit */
1068:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTER_Reset;
 1246              		.loc 1 1068 0
 1247 05de 1B49     		ldr	r1, .L77
 1248 05e0 1A4B     		ldr	r3, .L77
 1249 05e2 1A69     		ldr	r2, [r3, #16]
 1250 05e4 41F6DF73 		movw	r3, #8159
 1251 05e8 1340     		ands	r3, r3, r2
 1252 05ea 0B61     		str	r3, [r1, #16]
1069:common/stm32f10x_flash.c ****       /* Enable the Option Bytes Programming operation */
1070:common/stm32f10x_flash.c ****       FLASH->CR |= CR_OPTPG_Set; 
 1253              		.loc 1 1070 0
 1254 05ec 174A     		ldr	r2, .L77
 1255 05ee 174B     		ldr	r3, .L77
 1256 05f0 1B69     		ldr	r3, [r3, #16]
 1257 05f2 43F01003 		orr	r3, r3, #16
 1258 05f6 1361     		str	r3, [r2, #16]
1071:common/stm32f10x_flash.c ****       if(NewState != DISABLE)
 1259              		.loc 1 1071 0
 1260 05f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1261 05fa 002B     		cmp	r3, #0
 1262 05fc 03D0     		beq	.L73
1072:common/stm32f10x_flash.c ****       {
1073:common/stm32f10x_flash.c ****         OB->RDP = 0x00;
 1263              		.loc 1 1073 0
 1264 05fe 164B     		ldr	r3, .L77+12
ARM GAS  /tmp/ccFIADOf.s 			page 42


 1265 0600 0022     		movs	r2, #0
 1266 0602 1A80     		strh	r2, [r3]	@ movhi
 1267 0604 02E0     		b	.L74
 1268              	.L73:
1074:common/stm32f10x_flash.c ****       }
1075:common/stm32f10x_flash.c ****       else
1076:common/stm32f10x_flash.c ****       {
1077:common/stm32f10x_flash.c ****         OB->RDP = RDP_Key;  
 1269              		.loc 1 1077 0
 1270 0606 144B     		ldr	r3, .L77+12
 1271 0608 A522     		movs	r2, #165
 1272 060a 1A80     		strh	r2, [r3]	@ movhi
 1273              	.L74:
1078:common/stm32f10x_flash.c ****       }
1079:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1080:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(EraseTimeout); 
 1274              		.loc 1 1080 0
 1275 060c 4FF43020 		mov	r0, #720896
 1276 0610 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1277 0614 0346     		mov	r3, r0
 1278 0616 FB73     		strb	r3, [r7, #15]
1081:common/stm32f10x_flash.c ****     
1082:common/stm32f10x_flash.c ****       if(status != FLASH_TIMEOUT)
 1279              		.loc 1 1082 0
 1280 0618 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1281 061a 052B     		cmp	r3, #5
 1282 061c 11D0     		beq	.L71
1083:common/stm32f10x_flash.c ****       {
1084:common/stm32f10x_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
1085:common/stm32f10x_flash.c ****         FLASH->CR &= CR_OPTPG_Reset;
 1283              		.loc 1 1085 0
 1284 061e 0B49     		ldr	r1, .L77
 1285 0620 0A4B     		ldr	r3, .L77
 1286 0622 1A69     		ldr	r2, [r3, #16]
 1287 0624 41F6EF73 		movw	r3, #8175
 1288 0628 1340     		ands	r3, r3, r2
 1289 062a 0B61     		str	r3, [r1, #16]
 1290 062c 09E0     		b	.L71
 1291              	.L72:
1086:common/stm32f10x_flash.c ****       }
1087:common/stm32f10x_flash.c ****     }
1088:common/stm32f10x_flash.c ****     else 
1089:common/stm32f10x_flash.c ****     {
1090:common/stm32f10x_flash.c ****       if(status != FLASH_TIMEOUT)
 1292              		.loc 1 1090 0
 1293 062e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1294 0630 052B     		cmp	r3, #5
 1295 0632 06D0     		beq	.L71
1091:common/stm32f10x_flash.c ****       {
1092:common/stm32f10x_flash.c ****         /* Disable the OPTER Bit */
1093:common/stm32f10x_flash.c ****         FLASH->CR &= CR_OPTER_Reset;
 1296              		.loc 1 1093 0
 1297 0634 0549     		ldr	r1, .L77
 1298 0636 054B     		ldr	r3, .L77
 1299 0638 1A69     		ldr	r2, [r3, #16]
 1300 063a 41F6DF73 		movw	r3, #8159
 1301 063e 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccFIADOf.s 			page 43


 1302 0640 0B61     		str	r3, [r1, #16]
 1303              	.L71:
1094:common/stm32f10x_flash.c ****       }
1095:common/stm32f10x_flash.c ****     }
1096:common/stm32f10x_flash.c ****   }
1097:common/stm32f10x_flash.c ****   /* Return the protection operation Status */
1098:common/stm32f10x_flash.c ****   return status;       
 1304              		.loc 1 1098 0
 1305 0642 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1099:common/stm32f10x_flash.c **** }
 1306              		.loc 1 1099 0
 1307 0644 1846     		mov	r0, r3
 1308 0646 1037     		adds	r7, r7, #16
 1309              		.cfi_def_cfa_offset 8
 1310 0648 BD46     		mov	sp, r7
 1311              		.cfi_def_cfa_register 13
 1312              		@ sp needed
 1313 064a 80BD     		pop	{r7, pc}
 1314              	.L78:
 1315              		.align	2
 1316              	.L77:
 1317 064c 00200240 		.word	1073881088
 1318 0650 23016745 		.word	1164378403
 1319 0654 AB89EFCD 		.word	-839939669
 1320 0658 00F8FF1F 		.word	536868864
 1321              		.cfi_endproc
 1322              	.LFE78:
 1323              		.size	FLASH_ReadOutProtection, .-FLASH_ReadOutProtection
 1324              		.align	1
 1325              		.global	FLASH_UserOptionByteConfig
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1329              		.fpu softvfp
 1330              		.type	FLASH_UserOptionByteConfig, %function
 1331              	FLASH_UserOptionByteConfig:
 1332              	.LFB79:
1100:common/stm32f10x_flash.c **** 
1101:common/stm32f10x_flash.c **** /**
1102:common/stm32f10x_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.
1103:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1104:common/stm32f10x_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
1105:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1106:common/stm32f10x_flash.c ****   *     @arg OB_IWDG_SW: Software IWDG selected
1107:common/stm32f10x_flash.c ****   *     @arg OB_IWDG_HW: Hardware IWDG selected
1108:common/stm32f10x_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
1109:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1110:common/stm32f10x_flash.c ****   *     @arg OB_STOP_NoRST: No reset generated when entering in STOP
1111:common/stm32f10x_flash.c ****   *     @arg OB_STOP_RST: Reset generated when entering in STOP
1112:common/stm32f10x_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
1113:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1114:common/stm32f10x_flash.c ****   *     @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
1115:common/stm32f10x_flash.c ****   *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1116:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
1117:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1118:common/stm32f10x_flash.c ****   */
1119:common/stm32f10x_flash.c **** FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
ARM GAS  /tmp/ccFIADOf.s 			page 44


1120:common/stm32f10x_flash.c **** {
 1333              		.loc 1 1120 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 16
 1336              		@ frame_needed = 1, uses_anonymous_args = 0
 1337 065c 80B5     		push	{r7, lr}
 1338              		.cfi_def_cfa_offset 8
 1339              		.cfi_offset 7, -8
 1340              		.cfi_offset 14, -4
 1341 065e 84B0     		sub	sp, sp, #16
 1342              		.cfi_def_cfa_offset 24
 1343 0660 00AF     		add	r7, sp, #0
 1344              		.cfi_def_cfa_register 7
 1345 0662 0346     		mov	r3, r0
 1346 0664 FB80     		strh	r3, [r7, #6]	@ movhi
 1347 0666 0B46     		mov	r3, r1	@ movhi
 1348 0668 BB80     		strh	r3, [r7, #4]	@ movhi
 1349 066a 1346     		mov	r3, r2	@ movhi
 1350 066c 7B80     		strh	r3, [r7, #2]	@ movhi
1121:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1351              		.loc 1 1121 0
 1352 066e 0423     		movs	r3, #4
 1353 0670 FB73     		strb	r3, [r7, #15]
1122:common/stm32f10x_flash.c **** 
1123:common/stm32f10x_flash.c ****   /* Check the parameters */
1124:common/stm32f10x_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1125:common/stm32f10x_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1126:common/stm32f10x_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1127:common/stm32f10x_flash.c **** 
1128:common/stm32f10x_flash.c ****   /* Authorize the small information block programming */
1129:common/stm32f10x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY1;
 1354              		.loc 1 1129 0
 1355 0672 1B4B     		ldr	r3, .L82
 1356 0674 1B4A     		ldr	r2, .L82+4
 1357 0676 9A60     		str	r2, [r3, #8]
1130:common/stm32f10x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY2;
 1358              		.loc 1 1130 0
 1359 0678 194B     		ldr	r3, .L82
 1360 067a 1B4A     		ldr	r2, .L82+8
 1361 067c 9A60     		str	r2, [r3, #8]
1131:common/stm32f10x_flash.c ****   
1132:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
1133:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 1362              		.loc 1 1133 0
 1363 067e 4FF40050 		mov	r0, #8192
 1364 0682 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1365 0686 0346     		mov	r3, r0
 1366 0688 FB73     		strb	r3, [r7, #15]
1134:common/stm32f10x_flash.c ****   
1135:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 1367              		.loc 1 1135 0
 1368 068a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1369 068c 042B     		cmp	r3, #4
 1370 068e 21D1     		bne	.L80
1136:common/stm32f10x_flash.c ****   {  
1137:common/stm32f10x_flash.c ****     /* Enable the Option Bytes Programming operation */
1138:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTPG_Set; 
ARM GAS  /tmp/ccFIADOf.s 			page 45


 1371              		.loc 1 1138 0
 1372 0690 134A     		ldr	r2, .L82
 1373 0692 134B     		ldr	r3, .L82
 1374 0694 1B69     		ldr	r3, [r3, #16]
 1375 0696 43F01003 		orr	r3, r3, #16
 1376 069a 1361     		str	r3, [r2, #16]
1139:common/stm32f10x_flash.c ****            
1140:common/stm32f10x_flash.c ****     OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 1377              		.loc 1 1140 0
 1378 069c 1349     		ldr	r1, .L82+12
 1379 069e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1380 06a0 BB88     		ldrh	r3, [r7, #4]	@ movhi
 1381 06a2 1343     		orrs	r3, r3, r2
 1382 06a4 9AB2     		uxth	r2, r3
 1383 06a6 FB88     		ldrh	r3, [r7, #6]	@ movhi
 1384 06a8 1343     		orrs	r3, r3, r2
 1385 06aa 9BB2     		uxth	r3, r3
 1386 06ac 43F0F803 		orr	r3, r3, #248
 1387 06b0 9BB2     		uxth	r3, r3
 1388 06b2 4B80     		strh	r3, [r1, #2]	@ movhi
1141:common/stm32f10x_flash.c ****   
1142:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
1143:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
 1389              		.loc 1 1143 0
 1390 06b4 4FF40050 		mov	r0, #8192
 1391 06b8 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1392 06bc 0346     		mov	r3, r0
 1393 06be FB73     		strb	r3, [r7, #15]
1144:common/stm32f10x_flash.c ****     if(status != FLASH_TIMEOUT)
 1394              		.loc 1 1144 0
 1395 06c0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1396 06c2 052B     		cmp	r3, #5
 1397 06c4 06D0     		beq	.L80
1145:common/stm32f10x_flash.c ****     {
1146:common/stm32f10x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
1147:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTPG_Reset;
 1398              		.loc 1 1147 0
 1399 06c6 0649     		ldr	r1, .L82
 1400 06c8 054B     		ldr	r3, .L82
 1401 06ca 1A69     		ldr	r2, [r3, #16]
 1402 06cc 41F6EF73 		movw	r3, #8175
 1403 06d0 1340     		ands	r3, r3, r2
 1404 06d2 0B61     		str	r3, [r1, #16]
 1405              	.L80:
1148:common/stm32f10x_flash.c ****     }
1149:common/stm32f10x_flash.c ****   }    
1150:common/stm32f10x_flash.c ****   /* Return the Option Byte program Status */
1151:common/stm32f10x_flash.c ****   return status;
 1406              		.loc 1 1151 0
 1407 06d4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1152:common/stm32f10x_flash.c **** }
 1408              		.loc 1 1152 0
 1409 06d6 1846     		mov	r0, r3
 1410 06d8 1037     		adds	r7, r7, #16
 1411              		.cfi_def_cfa_offset 8
 1412 06da BD46     		mov	sp, r7
 1413              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccFIADOf.s 			page 46


 1414              		@ sp needed
 1415 06dc 80BD     		pop	{r7, pc}
 1416              	.L83:
 1417 06de 00BF     		.align	2
 1418              	.L82:
 1419 06e0 00200240 		.word	1073881088
 1420 06e4 23016745 		.word	1164378403
 1421 06e8 AB89EFCD 		.word	-839939669
 1422 06ec 00F8FF1F 		.word	536868864
 1423              		.cfi_endproc
 1424              	.LFE79:
 1425              		.size	FLASH_UserOptionByteConfig, .-FLASH_UserOptionByteConfig
 1426              		.align	1
 1427              		.global	FLASH_GetUserOptionByte
 1428              		.syntax unified
 1429              		.thumb
 1430              		.thumb_func
 1431              		.fpu softvfp
 1432              		.type	FLASH_GetUserOptionByte, %function
 1433              	FLASH_GetUserOptionByte:
 1434              	.LFB80:
1153:common/stm32f10x_flash.c **** 
1154:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1155:common/stm32f10x_flash.c **** /**
1156:common/stm32f10x_flash.c ****   * @brief  Configures to boot from Bank1 or Bank2.  
1157:common/stm32f10x_flash.c ****   * @note   This function can be used only for STM32F10x_XL density devices.
1158:common/stm32f10x_flash.c ****   * @param  FLASH_BOOT: select the FLASH Bank to boot from.
1159:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1160:common/stm32f10x_flash.c ****   *     @arg FLASH_BOOT_Bank1: At startup, if boot pins are set in boot from user Flash
1161:common/stm32f10x_flash.c ****   *        position and this parameter is selected the device will boot from Bank1(Default).
1162:common/stm32f10x_flash.c ****   *     @arg FLASH_BOOT_Bank2: At startup, if boot pins are set in boot from user Flash
1163:common/stm32f10x_flash.c ****   *        position and this parameter is selected the device will boot from Bank2 or Bank1,
1164:common/stm32f10x_flash.c ****   *        depending on the activation of the bank. The active banks are checked in
1165:common/stm32f10x_flash.c ****   *        the following order: Bank2, followed by Bank1.
1166:common/stm32f10x_flash.c ****   *        The active bank is recognized by the value programmed at the base address
1167:common/stm32f10x_flash.c ****   *        of the respective bank (corresponding to the initial stack pointer value
1168:common/stm32f10x_flash.c ****   *        in the interrupt vector table).
1169:common/stm32f10x_flash.c ****   *        For more information, please refer to AN2606 from www.st.com.    
1170:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
1171:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1172:common/stm32f10x_flash.c ****   */
1173:common/stm32f10x_flash.c **** FLASH_Status FLASH_BootConfig(uint16_t FLASH_BOOT)
1174:common/stm32f10x_flash.c **** { 
1175:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
1176:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_BOOT(FLASH_BOOT));
1177:common/stm32f10x_flash.c ****   /* Authorize the small information block programming */
1178:common/stm32f10x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY1;
1179:common/stm32f10x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY2;
1180:common/stm32f10x_flash.c ****   
1181:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
1182:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
1183:common/stm32f10x_flash.c ****   
1184:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
1185:common/stm32f10x_flash.c ****   {  
1186:common/stm32f10x_flash.c ****     /* Enable the Option Bytes Programming operation */
1187:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTPG_Set; 
1188:common/stm32f10x_flash.c **** 
ARM GAS  /tmp/ccFIADOf.s 			page 47


1189:common/stm32f10x_flash.c ****     if(FLASH_BOOT == FLASH_BOOT_Bank1)
1190:common/stm32f10x_flash.c ****     {
1191:common/stm32f10x_flash.c ****       OB->USER |= OB_USER_BFB2;
1192:common/stm32f10x_flash.c ****     }
1193:common/stm32f10x_flash.c ****     else
1194:common/stm32f10x_flash.c ****     {
1195:common/stm32f10x_flash.c ****       OB->USER &= (uint16_t)(~(uint16_t)(OB_USER_BFB2));
1196:common/stm32f10x_flash.c ****     }
1197:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
1198:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
1199:common/stm32f10x_flash.c ****     if(status != FLASH_TIMEOUT)
1200:common/stm32f10x_flash.c ****     {
1201:common/stm32f10x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
1202:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTPG_Reset;
1203:common/stm32f10x_flash.c ****     }
1204:common/stm32f10x_flash.c ****   }    
1205:common/stm32f10x_flash.c ****   /* Return the Option Byte program Status */
1206:common/stm32f10x_flash.c ****   return status;
1207:common/stm32f10x_flash.c **** }
1208:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1209:common/stm32f10x_flash.c **** 
1210:common/stm32f10x_flash.c **** /**
1211:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1212:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1213:common/stm32f10x_flash.c ****   * @param  None
1214:common/stm32f10x_flash.c ****   * @retval The FLASH User Option Bytes values:IWDG_SW(Bit0), RST_STOP(Bit1)
1215:common/stm32f10x_flash.c ****   *         and RST_STDBY(Bit2).
1216:common/stm32f10x_flash.c ****   */
1217:common/stm32f10x_flash.c **** uint32_t FLASH_GetUserOptionByte(void)
1218:common/stm32f10x_flash.c **** {
 1435              		.loc 1 1218 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 0
 1438              		@ frame_needed = 1, uses_anonymous_args = 0
 1439              		@ link register save eliminated.
 1440 06f0 80B4     		push	{r7}
 1441              		.cfi_def_cfa_offset 4
 1442              		.cfi_offset 7, -4
 1443 06f2 00AF     		add	r7, sp, #0
 1444              		.cfi_def_cfa_register 7
1219:common/stm32f10x_flash.c ****   /* Return the User Option Byte */
1220:common/stm32f10x_flash.c ****   return (uint32_t)(FLASH->OBR >> 2);
 1445              		.loc 1 1220 0
 1446 06f4 034B     		ldr	r3, .L86
 1447 06f6 DB69     		ldr	r3, [r3, #28]
 1448 06f8 9B08     		lsrs	r3, r3, #2
1221:common/stm32f10x_flash.c **** }
 1449              		.loc 1 1221 0
 1450 06fa 1846     		mov	r0, r3
 1451 06fc BD46     		mov	sp, r7
 1452              		.cfi_def_cfa_register 13
 1453              		@ sp needed
 1454 06fe 80BC     		pop	{r7}
 1455              		.cfi_restore 7
 1456              		.cfi_def_cfa_offset 0
 1457 0700 7047     		bx	lr
 1458              	.L87:
ARM GAS  /tmp/ccFIADOf.s 			page 48


 1459 0702 00BF     		.align	2
 1460              	.L86:
 1461 0704 00200240 		.word	1073881088
 1462              		.cfi_endproc
 1463              	.LFE80:
 1464              		.size	FLASH_GetUserOptionByte, .-FLASH_GetUserOptionByte
 1465              		.align	1
 1466              		.global	FLASH_GetWriteProtectionOptionByte
 1467              		.syntax unified
 1468              		.thumb
 1469              		.thumb_func
 1470              		.fpu softvfp
 1471              		.type	FLASH_GetWriteProtectionOptionByte, %function
 1472              	FLASH_GetWriteProtectionOptionByte:
 1473              	.LFB81:
1222:common/stm32f10x_flash.c **** 
1223:common/stm32f10x_flash.c **** /**
1224:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes Register value.
1225:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1226:common/stm32f10x_flash.c ****   * @param  None
1227:common/stm32f10x_flash.c ****   * @retval The FLASH Write Protection  Option Bytes Register value
1228:common/stm32f10x_flash.c ****   */
1229:common/stm32f10x_flash.c **** uint32_t FLASH_GetWriteProtectionOptionByte(void)
1230:common/stm32f10x_flash.c **** {
 1474              		.loc 1 1230 0
 1475              		.cfi_startproc
 1476              		@ args = 0, pretend = 0, frame = 0
 1477              		@ frame_needed = 1, uses_anonymous_args = 0
 1478              		@ link register save eliminated.
 1479 0708 80B4     		push	{r7}
 1480              		.cfi_def_cfa_offset 4
 1481              		.cfi_offset 7, -4
 1482 070a 00AF     		add	r7, sp, #0
 1483              		.cfi_def_cfa_register 7
1231:common/stm32f10x_flash.c ****   /* Return the Flash write protection Register value */
1232:common/stm32f10x_flash.c ****   return (uint32_t)(FLASH->WRPR);
 1484              		.loc 1 1232 0
 1485 070c 024B     		ldr	r3, .L90
 1486 070e 1B6A     		ldr	r3, [r3, #32]
1233:common/stm32f10x_flash.c **** }
 1487              		.loc 1 1233 0
 1488 0710 1846     		mov	r0, r3
 1489 0712 BD46     		mov	sp, r7
 1490              		.cfi_def_cfa_register 13
 1491              		@ sp needed
 1492 0714 80BC     		pop	{r7}
 1493              		.cfi_restore 7
 1494              		.cfi_def_cfa_offset 0
 1495 0716 7047     		bx	lr
 1496              	.L91:
 1497              		.align	2
 1498              	.L90:
 1499 0718 00200240 		.word	1073881088
 1500              		.cfi_endproc
 1501              	.LFE81:
 1502              		.size	FLASH_GetWriteProtectionOptionByte, .-FLASH_GetWriteProtectionOptionByte
 1503              		.align	1
ARM GAS  /tmp/ccFIADOf.s 			page 49


 1504              		.global	FLASH_GetReadOutProtectionStatus
 1505              		.syntax unified
 1506              		.thumb
 1507              		.thumb_func
 1508              		.fpu softvfp
 1509              		.type	FLASH_GetReadOutProtectionStatus, %function
 1510              	FLASH_GetReadOutProtectionStatus:
 1511              	.LFB82:
1234:common/stm32f10x_flash.c **** 
1235:common/stm32f10x_flash.c **** /**
1236:common/stm32f10x_flash.c ****   * @brief  Checks whether the FLASH Read Out Protection Status is set or not.
1237:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1238:common/stm32f10x_flash.c ****   * @param  None
1239:common/stm32f10x_flash.c ****   * @retval FLASH ReadOut Protection Status(SET or RESET)
1240:common/stm32f10x_flash.c ****   */
1241:common/stm32f10x_flash.c **** FlagStatus FLASH_GetReadOutProtectionStatus(void)
1242:common/stm32f10x_flash.c **** {
 1512              		.loc 1 1242 0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 8
 1515              		@ frame_needed = 1, uses_anonymous_args = 0
 1516              		@ link register save eliminated.
 1517 071c 80B4     		push	{r7}
 1518              		.cfi_def_cfa_offset 4
 1519              		.cfi_offset 7, -4
 1520 071e 83B0     		sub	sp, sp, #12
 1521              		.cfi_def_cfa_offset 16
 1522 0720 00AF     		add	r7, sp, #0
 1523              		.cfi_def_cfa_register 7
1243:common/stm32f10x_flash.c ****   FlagStatus readoutstatus = RESET;
 1524              		.loc 1 1243 0
 1525 0722 0023     		movs	r3, #0
 1526 0724 FB71     		strb	r3, [r7, #7]
1244:common/stm32f10x_flash.c ****   if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
 1527              		.loc 1 1244 0
 1528 0726 084B     		ldr	r3, .L96
 1529 0728 DB69     		ldr	r3, [r3, #28]
 1530 072a 03F00203 		and	r3, r3, #2
 1531 072e 002B     		cmp	r3, #0
 1532 0730 02D0     		beq	.L93
1245:common/stm32f10x_flash.c ****   {
1246:common/stm32f10x_flash.c ****     readoutstatus = SET;
 1533              		.loc 1 1246 0
 1534 0732 0123     		movs	r3, #1
 1535 0734 FB71     		strb	r3, [r7, #7]
 1536 0736 01E0     		b	.L94
 1537              	.L93:
1247:common/stm32f10x_flash.c ****   }
1248:common/stm32f10x_flash.c ****   else
1249:common/stm32f10x_flash.c ****   {
1250:common/stm32f10x_flash.c ****     readoutstatus = RESET;
 1538              		.loc 1 1250 0
 1539 0738 0023     		movs	r3, #0
 1540 073a FB71     		strb	r3, [r7, #7]
 1541              	.L94:
1251:common/stm32f10x_flash.c ****   }
1252:common/stm32f10x_flash.c ****   return readoutstatus;
ARM GAS  /tmp/ccFIADOf.s 			page 50


 1542              		.loc 1 1252 0
 1543 073c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1253:common/stm32f10x_flash.c **** }
 1544              		.loc 1 1253 0
 1545 073e 1846     		mov	r0, r3
 1546 0740 0C37     		adds	r7, r7, #12
 1547              		.cfi_def_cfa_offset 4
 1548 0742 BD46     		mov	sp, r7
 1549              		.cfi_def_cfa_register 13
 1550              		@ sp needed
 1551 0744 80BC     		pop	{r7}
 1552              		.cfi_restore 7
 1553              		.cfi_def_cfa_offset 0
 1554 0746 7047     		bx	lr
 1555              	.L97:
 1556              		.align	2
 1557              	.L96:
 1558 0748 00200240 		.word	1073881088
 1559              		.cfi_endproc
 1560              	.LFE82:
 1561              		.size	FLASH_GetReadOutProtectionStatus, .-FLASH_GetReadOutProtectionStatus
 1562              		.align	1
 1563              		.global	FLASH_GetPrefetchBufferStatus
 1564              		.syntax unified
 1565              		.thumb
 1566              		.thumb_func
 1567              		.fpu softvfp
 1568              		.type	FLASH_GetPrefetchBufferStatus, %function
 1569              	FLASH_GetPrefetchBufferStatus:
 1570              	.LFB83:
1254:common/stm32f10x_flash.c **** 
1255:common/stm32f10x_flash.c **** /**
1256:common/stm32f10x_flash.c ****   * @brief  Checks whether the FLASH Prefetch Buffer status is set or not.
1257:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1258:common/stm32f10x_flash.c ****   * @param  None
1259:common/stm32f10x_flash.c ****   * @retval FLASH Prefetch Buffer Status (SET or RESET).
1260:common/stm32f10x_flash.c ****   */
1261:common/stm32f10x_flash.c **** FlagStatus FLASH_GetPrefetchBufferStatus(void)
1262:common/stm32f10x_flash.c **** {
 1571              		.loc 1 1262 0
 1572              		.cfi_startproc
 1573              		@ args = 0, pretend = 0, frame = 8
 1574              		@ frame_needed = 1, uses_anonymous_args = 0
 1575              		@ link register save eliminated.
 1576 074c 80B4     		push	{r7}
 1577              		.cfi_def_cfa_offset 4
 1578              		.cfi_offset 7, -4
 1579 074e 83B0     		sub	sp, sp, #12
 1580              		.cfi_def_cfa_offset 16
 1581 0750 00AF     		add	r7, sp, #0
 1582              		.cfi_def_cfa_register 7
1263:common/stm32f10x_flash.c ****   FlagStatus bitstatus = RESET;
 1583              		.loc 1 1263 0
 1584 0752 0023     		movs	r3, #0
 1585 0754 FB71     		strb	r3, [r7, #7]
1264:common/stm32f10x_flash.c ****   
1265:common/stm32f10x_flash.c ****   if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
ARM GAS  /tmp/ccFIADOf.s 			page 51


 1586              		.loc 1 1265 0
 1587 0756 084B     		ldr	r3, .L102
 1588 0758 1B68     		ldr	r3, [r3]
 1589 075a 03F02003 		and	r3, r3, #32
 1590 075e 002B     		cmp	r3, #0
 1591 0760 02D0     		beq	.L99
1266:common/stm32f10x_flash.c ****   {
1267:common/stm32f10x_flash.c ****     bitstatus = SET;
 1592              		.loc 1 1267 0
 1593 0762 0123     		movs	r3, #1
 1594 0764 FB71     		strb	r3, [r7, #7]
 1595 0766 01E0     		b	.L100
 1596              	.L99:
1268:common/stm32f10x_flash.c ****   }
1269:common/stm32f10x_flash.c ****   else
1270:common/stm32f10x_flash.c ****   {
1271:common/stm32f10x_flash.c ****     bitstatus = RESET;
 1597              		.loc 1 1271 0
 1598 0768 0023     		movs	r3, #0
 1599 076a FB71     		strb	r3, [r7, #7]
 1600              	.L100:
1272:common/stm32f10x_flash.c ****   }
1273:common/stm32f10x_flash.c ****   /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
1274:common/stm32f10x_flash.c ****   return bitstatus; 
 1601              		.loc 1 1274 0
 1602 076c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1275:common/stm32f10x_flash.c **** }
 1603              		.loc 1 1275 0
 1604 076e 1846     		mov	r0, r3
 1605 0770 0C37     		adds	r7, r7, #12
 1606              		.cfi_def_cfa_offset 4
 1607 0772 BD46     		mov	sp, r7
 1608              		.cfi_def_cfa_register 13
 1609              		@ sp needed
 1610 0774 80BC     		pop	{r7}
 1611              		.cfi_restore 7
 1612              		.cfi_def_cfa_offset 0
 1613 0776 7047     		bx	lr
 1614              	.L103:
 1615              		.align	2
 1616              	.L102:
 1617 0778 00200240 		.word	1073881088
 1618              		.cfi_endproc
 1619              	.LFE83:
 1620              		.size	FLASH_GetPrefetchBufferStatus, .-FLASH_GetPrefetchBufferStatus
 1621              		.align	1
 1622              		.global	FLASH_ITConfig
 1623              		.syntax unified
 1624              		.thumb
 1625              		.thumb_func
 1626              		.fpu softvfp
 1627              		.type	FLASH_ITConfig, %function
 1628              	FLASH_ITConfig:
 1629              	.LFB84:
1276:common/stm32f10x_flash.c **** 
1277:common/stm32f10x_flash.c **** /**
1278:common/stm32f10x_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
ARM GAS  /tmp/ccFIADOf.s 			page 52


1279:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1280:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices, enables or disables the specified FLASH interrupts
1281:common/stm32f10x_flash.c ****               for Bank1 and Bank2.
1282:common/stm32f10x_flash.c ****   *         - For other devices it enables or disables the specified FLASH interrupts for Bank1.
1283:common/stm32f10x_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
1284:common/stm32f10x_flash.c ****   *   This parameter can be any combination of the following values:
1285:common/stm32f10x_flash.c ****   *     @arg FLASH_IT_ERROR: FLASH Error Interrupt
1286:common/stm32f10x_flash.c ****   *     @arg FLASH_IT_EOP: FLASH end of operation Interrupt
1287:common/stm32f10x_flash.c ****   * @param  NewState: new state of the specified Flash interrupts.
1288:common/stm32f10x_flash.c ****   *   This parameter can be: ENABLE or DISABLE.      
1289:common/stm32f10x_flash.c ****   * @retval None 
1290:common/stm32f10x_flash.c ****   */
1291:common/stm32f10x_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1292:common/stm32f10x_flash.c **** {
 1630              		.loc 1 1292 0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 8
 1633              		@ frame_needed = 1, uses_anonymous_args = 0
 1634              		@ link register save eliminated.
 1635 077c 80B4     		push	{r7}
 1636              		.cfi_def_cfa_offset 4
 1637              		.cfi_offset 7, -4
 1638 077e 83B0     		sub	sp, sp, #12
 1639              		.cfi_def_cfa_offset 16
 1640 0780 00AF     		add	r7, sp, #0
 1641              		.cfi_def_cfa_register 7
 1642 0782 7860     		str	r0, [r7, #4]
 1643 0784 0B46     		mov	r3, r1
 1644 0786 FB70     		strb	r3, [r7, #3]
1293:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1294:common/stm32f10x_flash.c ****   /* Check the parameters */
1295:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1296:common/stm32f10x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1297:common/stm32f10x_flash.c **** 
1298:common/stm32f10x_flash.c ****   if((FLASH_IT & 0x80000000) != 0x0)
1299:common/stm32f10x_flash.c ****   {
1300:common/stm32f10x_flash.c ****     if(NewState != DISABLE)
1301:common/stm32f10x_flash.c ****     {
1302:common/stm32f10x_flash.c ****       /* Enable the interrupt sources */
1303:common/stm32f10x_flash.c ****       FLASH->CR2 |= (FLASH_IT & 0x7FFFFFFF);
1304:common/stm32f10x_flash.c ****     }
1305:common/stm32f10x_flash.c ****     else
1306:common/stm32f10x_flash.c ****     {
1307:common/stm32f10x_flash.c ****       /* Disable the interrupt sources */
1308:common/stm32f10x_flash.c ****       FLASH->CR2 &= ~(uint32_t)(FLASH_IT & 0x7FFFFFFF);
1309:common/stm32f10x_flash.c ****     }
1310:common/stm32f10x_flash.c ****   }
1311:common/stm32f10x_flash.c ****   else
1312:common/stm32f10x_flash.c ****   {
1313:common/stm32f10x_flash.c ****     if(NewState != DISABLE)
1314:common/stm32f10x_flash.c ****     {
1315:common/stm32f10x_flash.c ****       /* Enable the interrupt sources */
1316:common/stm32f10x_flash.c ****       FLASH->CR |= FLASH_IT;
1317:common/stm32f10x_flash.c ****     }
1318:common/stm32f10x_flash.c ****     else
1319:common/stm32f10x_flash.c ****     {
1320:common/stm32f10x_flash.c ****       /* Disable the interrupt sources */
ARM GAS  /tmp/ccFIADOf.s 			page 53


1321:common/stm32f10x_flash.c ****       FLASH->CR &= ~(uint32_t)FLASH_IT;
1322:common/stm32f10x_flash.c ****     }
1323:common/stm32f10x_flash.c ****   }
1324:common/stm32f10x_flash.c **** #else
1325:common/stm32f10x_flash.c ****   /* Check the parameters */
1326:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1327:common/stm32f10x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1328:common/stm32f10x_flash.c **** 
1329:common/stm32f10x_flash.c ****   if(NewState != DISABLE)
 1645              		.loc 1 1329 0
 1646 0788 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1647 078a 002B     		cmp	r3, #0
 1648 078c 06D0     		beq	.L105
1330:common/stm32f10x_flash.c ****   {
1331:common/stm32f10x_flash.c ****     /* Enable the interrupt sources */
1332:common/stm32f10x_flash.c ****     FLASH->CR |= FLASH_IT;
 1649              		.loc 1 1332 0
 1650 078e 0949     		ldr	r1, .L108
 1651 0790 084B     		ldr	r3, .L108
 1652 0792 1A69     		ldr	r2, [r3, #16]
 1653 0794 7B68     		ldr	r3, [r7, #4]
 1654 0796 1343     		orrs	r3, r3, r2
 1655 0798 0B61     		str	r3, [r1, #16]
1333:common/stm32f10x_flash.c ****   }
1334:common/stm32f10x_flash.c ****   else
1335:common/stm32f10x_flash.c ****   {
1336:common/stm32f10x_flash.c ****     /* Disable the interrupt sources */
1337:common/stm32f10x_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
1338:common/stm32f10x_flash.c ****   }
1339:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1340:common/stm32f10x_flash.c **** }
 1656              		.loc 1 1340 0
 1657 079a 06E0     		b	.L107
 1658              	.L105:
1337:common/stm32f10x_flash.c ****   }
 1659              		.loc 1 1337 0
 1660 079c 0549     		ldr	r1, .L108
 1661 079e 054B     		ldr	r3, .L108
 1662 07a0 1A69     		ldr	r2, [r3, #16]
 1663 07a2 7B68     		ldr	r3, [r7, #4]
 1664 07a4 DB43     		mvns	r3, r3
 1665 07a6 1340     		ands	r3, r3, r2
 1666 07a8 0B61     		str	r3, [r1, #16]
 1667              	.L107:
 1668              		.loc 1 1340 0
 1669 07aa 00BF     		nop
 1670 07ac 0C37     		adds	r7, r7, #12
 1671              		.cfi_def_cfa_offset 4
 1672 07ae BD46     		mov	sp, r7
 1673              		.cfi_def_cfa_register 13
 1674              		@ sp needed
 1675 07b0 80BC     		pop	{r7}
 1676              		.cfi_restore 7
 1677              		.cfi_def_cfa_offset 0
 1678 07b2 7047     		bx	lr
 1679              	.L109:
 1680              		.align	2
ARM GAS  /tmp/ccFIADOf.s 			page 54


 1681              	.L108:
 1682 07b4 00200240 		.word	1073881088
 1683              		.cfi_endproc
 1684              	.LFE84:
 1685              		.size	FLASH_ITConfig, .-FLASH_ITConfig
 1686              		.align	1
 1687              		.global	FLASH_GetFlagStatus
 1688              		.syntax unified
 1689              		.thumb
 1690              		.thumb_func
 1691              		.fpu softvfp
 1692              		.type	FLASH_GetFlagStatus, %function
 1693              	FLASH_GetFlagStatus:
 1694              	.LFB85:
1341:common/stm32f10x_flash.c **** 
1342:common/stm32f10x_flash.c **** /**
1343:common/stm32f10x_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1344:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1345:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices, this function checks whether the specified 
1346:common/stm32f10x_flash.c ****   *           Bank1 or Bank2 flag is set or not.
1347:common/stm32f10x_flash.c ****   *         - For other devices, it checks whether the specified Bank1 flag is 
1348:common/stm32f10x_flash.c ****   *           set or not.
1349:common/stm32f10x_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1350:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1351:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_BSY: FLASH Busy flag           
1352:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_PGERR: FLASH Program error flag       
1353:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
1354:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
1355:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_OPTERR:  FLASH Option Byte error flag     
1356:common/stm32f10x_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1357:common/stm32f10x_flash.c ****   */
1358:common/stm32f10x_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1359:common/stm32f10x_flash.c **** {
 1695              		.loc 1 1359 0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 16
 1698              		@ frame_needed = 1, uses_anonymous_args = 0
 1699              		@ link register save eliminated.
 1700 07b8 80B4     		push	{r7}
 1701              		.cfi_def_cfa_offset 4
 1702              		.cfi_offset 7, -4
 1703 07ba 85B0     		sub	sp, sp, #20
 1704              		.cfi_def_cfa_offset 24
 1705 07bc 00AF     		add	r7, sp, #0
 1706              		.cfi_def_cfa_register 7
 1707 07be 7860     		str	r0, [r7, #4]
1360:common/stm32f10x_flash.c ****   FlagStatus bitstatus = RESET;
 1708              		.loc 1 1360 0
 1709 07c0 0023     		movs	r3, #0
 1710 07c2 FB73     		strb	r3, [r7, #15]
1361:common/stm32f10x_flash.c **** 
1362:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1363:common/stm32f10x_flash.c ****   /* Check the parameters */
1364:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
1365:common/stm32f10x_flash.c ****   if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
1366:common/stm32f10x_flash.c ****   {
1367:common/stm32f10x_flash.c ****     if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
ARM GAS  /tmp/ccFIADOf.s 			page 55


1368:common/stm32f10x_flash.c ****     {
1369:common/stm32f10x_flash.c ****       bitstatus = SET;
1370:common/stm32f10x_flash.c ****     }
1371:common/stm32f10x_flash.c ****     else
1372:common/stm32f10x_flash.c ****     {
1373:common/stm32f10x_flash.c ****       bitstatus = RESET;
1374:common/stm32f10x_flash.c ****     }
1375:common/stm32f10x_flash.c ****   }
1376:common/stm32f10x_flash.c ****   else
1377:common/stm32f10x_flash.c ****   {
1378:common/stm32f10x_flash.c ****     if((FLASH_FLAG & 0x80000000) != 0x0)
1379:common/stm32f10x_flash.c ****     {
1380:common/stm32f10x_flash.c ****       if((FLASH->SR2 & FLASH_FLAG) != (uint32_t)RESET)
1381:common/stm32f10x_flash.c ****       {
1382:common/stm32f10x_flash.c ****         bitstatus = SET;
1383:common/stm32f10x_flash.c ****       }
1384:common/stm32f10x_flash.c ****       else
1385:common/stm32f10x_flash.c ****       {
1386:common/stm32f10x_flash.c ****         bitstatus = RESET;
1387:common/stm32f10x_flash.c ****       }
1388:common/stm32f10x_flash.c ****     }
1389:common/stm32f10x_flash.c ****     else
1390:common/stm32f10x_flash.c ****     {
1391:common/stm32f10x_flash.c ****       if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
1392:common/stm32f10x_flash.c ****       {
1393:common/stm32f10x_flash.c ****         bitstatus = SET;
1394:common/stm32f10x_flash.c ****       }
1395:common/stm32f10x_flash.c ****       else
1396:common/stm32f10x_flash.c ****       {
1397:common/stm32f10x_flash.c ****         bitstatus = RESET;
1398:common/stm32f10x_flash.c ****       }
1399:common/stm32f10x_flash.c ****     }
1400:common/stm32f10x_flash.c ****   }
1401:common/stm32f10x_flash.c **** #else
1402:common/stm32f10x_flash.c ****   /* Check the parameters */
1403:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
1404:common/stm32f10x_flash.c ****   if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 1711              		.loc 1 1404 0
 1712 07c4 7B68     		ldr	r3, [r7, #4]
 1713 07c6 012B     		cmp	r3, #1
 1714 07c8 0BD1     		bne	.L111
1405:common/stm32f10x_flash.c ****   {
1406:common/stm32f10x_flash.c ****     if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
 1715              		.loc 1 1406 0
 1716 07ca 0E4B     		ldr	r3, .L117
 1717 07cc DB69     		ldr	r3, [r3, #28]
 1718 07ce 03F00103 		and	r3, r3, #1
 1719 07d2 002B     		cmp	r3, #0
 1720 07d4 02D0     		beq	.L112
1407:common/stm32f10x_flash.c ****     {
1408:common/stm32f10x_flash.c ****       bitstatus = SET;
 1721              		.loc 1 1408 0
 1722 07d6 0123     		movs	r3, #1
 1723 07d8 FB73     		strb	r3, [r7, #15]
 1724 07da 0DE0     		b	.L114
 1725              	.L112:
1409:common/stm32f10x_flash.c ****     }
ARM GAS  /tmp/ccFIADOf.s 			page 56


1410:common/stm32f10x_flash.c ****     else
1411:common/stm32f10x_flash.c ****     {
1412:common/stm32f10x_flash.c ****       bitstatus = RESET;
 1726              		.loc 1 1412 0
 1727 07dc 0023     		movs	r3, #0
 1728 07de FB73     		strb	r3, [r7, #15]
 1729 07e0 0AE0     		b	.L114
 1730              	.L111:
1413:common/stm32f10x_flash.c ****     }
1414:common/stm32f10x_flash.c ****   }
1415:common/stm32f10x_flash.c ****   else
1416:common/stm32f10x_flash.c ****   {
1417:common/stm32f10x_flash.c ****    if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 1731              		.loc 1 1417 0
 1732 07e2 084B     		ldr	r3, .L117
 1733 07e4 DA68     		ldr	r2, [r3, #12]
 1734 07e6 7B68     		ldr	r3, [r7, #4]
 1735 07e8 1340     		ands	r3, r3, r2
 1736 07ea 002B     		cmp	r3, #0
 1737 07ec 02D0     		beq	.L115
1418:common/stm32f10x_flash.c ****     {
1419:common/stm32f10x_flash.c ****       bitstatus = SET;
 1738              		.loc 1 1419 0
 1739 07ee 0123     		movs	r3, #1
 1740 07f0 FB73     		strb	r3, [r7, #15]
 1741 07f2 01E0     		b	.L114
 1742              	.L115:
1420:common/stm32f10x_flash.c ****     }
1421:common/stm32f10x_flash.c ****     else
1422:common/stm32f10x_flash.c ****     {
1423:common/stm32f10x_flash.c ****       bitstatus = RESET;
 1743              		.loc 1 1423 0
 1744 07f4 0023     		movs	r3, #0
 1745 07f6 FB73     		strb	r3, [r7, #15]
 1746              	.L114:
1424:common/stm32f10x_flash.c ****     }
1425:common/stm32f10x_flash.c ****   }
1426:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1427:common/stm32f10x_flash.c **** 
1428:common/stm32f10x_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1429:common/stm32f10x_flash.c ****   return bitstatus;
 1747              		.loc 1 1429 0
 1748 07f8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1430:common/stm32f10x_flash.c **** }
 1749              		.loc 1 1430 0
 1750 07fa 1846     		mov	r0, r3
 1751 07fc 1437     		adds	r7, r7, #20
 1752              		.cfi_def_cfa_offset 4
 1753 07fe BD46     		mov	sp, r7
 1754              		.cfi_def_cfa_register 13
 1755              		@ sp needed
 1756 0800 80BC     		pop	{r7}
 1757              		.cfi_restore 7
 1758              		.cfi_def_cfa_offset 0
 1759 0802 7047     		bx	lr
 1760              	.L118:
 1761              		.align	2
ARM GAS  /tmp/ccFIADOf.s 			page 57


 1762              	.L117:
 1763 0804 00200240 		.word	1073881088
 1764              		.cfi_endproc
 1765              	.LFE85:
 1766              		.size	FLASH_GetFlagStatus, .-FLASH_GetFlagStatus
 1767              		.align	1
 1768              		.global	FLASH_ClearFlag
 1769              		.syntax unified
 1770              		.thumb
 1771              		.thumb_func
 1772              		.fpu softvfp
 1773              		.type	FLASH_ClearFlag, %function
 1774              	FLASH_ClearFlag:
 1775              	.LFB86:
1431:common/stm32f10x_flash.c **** 
1432:common/stm32f10x_flash.c **** /**
1433:common/stm32f10x_flash.c ****   * @brief  Clears the FLASH's pending flags.
1434:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1435:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices, this function clears Bank1 or Bank2s pending flags
1436:common/stm32f10x_flash.c ****   *         - For other devices, it clears Bank1s pending flags.
1437:common/stm32f10x_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1438:common/stm32f10x_flash.c ****   *   This parameter can be any combination of the following values:         
1439:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_PGERR: FLASH Program error flag       
1440:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
1441:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
1442:common/stm32f10x_flash.c ****   * @retval None
1443:common/stm32f10x_flash.c ****   */
1444:common/stm32f10x_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1445:common/stm32f10x_flash.c **** {
 1776              		.loc 1 1445 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 8
 1779              		@ frame_needed = 1, uses_anonymous_args = 0
 1780              		@ link register save eliminated.
 1781 0808 80B4     		push	{r7}
 1782              		.cfi_def_cfa_offset 4
 1783              		.cfi_offset 7, -4
 1784 080a 83B0     		sub	sp, sp, #12
 1785              		.cfi_def_cfa_offset 16
 1786 080c 00AF     		add	r7, sp, #0
 1787              		.cfi_def_cfa_register 7
 1788 080e 7860     		str	r0, [r7, #4]
1446:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1447:common/stm32f10x_flash.c ****   /* Check the parameters */
1448:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
1449:common/stm32f10x_flash.c **** 
1450:common/stm32f10x_flash.c ****   if((FLASH_FLAG & 0x80000000) != 0x0)
1451:common/stm32f10x_flash.c ****   {
1452:common/stm32f10x_flash.c ****     /* Clear the flags */
1453:common/stm32f10x_flash.c ****     FLASH->SR2 = FLASH_FLAG;
1454:common/stm32f10x_flash.c ****   }
1455:common/stm32f10x_flash.c ****   else
1456:common/stm32f10x_flash.c ****   {
1457:common/stm32f10x_flash.c ****     /* Clear the flags */
1458:common/stm32f10x_flash.c ****     FLASH->SR = FLASH_FLAG;
1459:common/stm32f10x_flash.c ****   }  
1460:common/stm32f10x_flash.c **** 
ARM GAS  /tmp/ccFIADOf.s 			page 58


1461:common/stm32f10x_flash.c **** #else
1462:common/stm32f10x_flash.c ****   /* Check the parameters */
1463:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
1464:common/stm32f10x_flash.c ****   
1465:common/stm32f10x_flash.c ****   /* Clear the flags */
1466:common/stm32f10x_flash.c ****   FLASH->SR = FLASH_FLAG;
 1789              		.loc 1 1466 0
 1790 0810 034A     		ldr	r2, .L120
 1791 0812 7B68     		ldr	r3, [r7, #4]
 1792 0814 D360     		str	r3, [r2, #12]
1467:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1468:common/stm32f10x_flash.c **** }
 1793              		.loc 1 1468 0
 1794 0816 00BF     		nop
 1795 0818 0C37     		adds	r7, r7, #12
 1796              		.cfi_def_cfa_offset 4
 1797 081a BD46     		mov	sp, r7
 1798              		.cfi_def_cfa_register 13
 1799              		@ sp needed
 1800 081c 80BC     		pop	{r7}
 1801              		.cfi_restore 7
 1802              		.cfi_def_cfa_offset 0
 1803 081e 7047     		bx	lr
 1804              	.L121:
 1805              		.align	2
 1806              	.L120:
 1807 0820 00200240 		.word	1073881088
 1808              		.cfi_endproc
 1809              	.LFE86:
 1810              		.size	FLASH_ClearFlag, .-FLASH_ClearFlag
 1811              		.align	1
 1812              		.global	FLASH_GetStatus
 1813              		.syntax unified
 1814              		.thumb
 1815              		.thumb_func
 1816              		.fpu softvfp
 1817              		.type	FLASH_GetStatus, %function
 1818              	FLASH_GetStatus:
 1819              	.LFB87:
1469:common/stm32f10x_flash.c **** 
1470:common/stm32f10x_flash.c **** /**
1471:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH Status.
1472:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices, it is equivalent
1473:common/stm32f10x_flash.c ****   *         to FLASH_GetBank1Status function.
1474:common/stm32f10x_flash.c ****   * @param  None
1475:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
1476:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP or FLASH_COMPLETE
1477:common/stm32f10x_flash.c ****   */
1478:common/stm32f10x_flash.c **** FLASH_Status FLASH_GetStatus(void)
1479:common/stm32f10x_flash.c **** {
 1820              		.loc 1 1479 0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 8
 1823              		@ frame_needed = 1, uses_anonymous_args = 0
 1824              		@ link register save eliminated.
 1825 0824 80B4     		push	{r7}
 1826              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccFIADOf.s 			page 59


 1827              		.cfi_offset 7, -4
 1828 0826 83B0     		sub	sp, sp, #12
 1829              		.cfi_def_cfa_offset 16
 1830 0828 00AF     		add	r7, sp, #0
 1831              		.cfi_def_cfa_register 7
1480:common/stm32f10x_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
 1832              		.loc 1 1480 0
 1833 082a 0423     		movs	r3, #4
 1834 082c FB71     		strb	r3, [r7, #7]
1481:common/stm32f10x_flash.c ****   
1482:common/stm32f10x_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 1835              		.loc 1 1482 0
 1836 082e 114B     		ldr	r3, .L128
 1837 0830 DB68     		ldr	r3, [r3, #12]
 1838 0832 03F00103 		and	r3, r3, #1
 1839 0836 012B     		cmp	r3, #1
 1840 0838 02D1     		bne	.L123
1483:common/stm32f10x_flash.c ****   {
1484:common/stm32f10x_flash.c ****     flashstatus = FLASH_BUSY;
 1841              		.loc 1 1484 0
 1842 083a 0123     		movs	r3, #1
 1843 083c FB71     		strb	r3, [r7, #7]
 1844 083e 13E0     		b	.L124
 1845              	.L123:
1485:common/stm32f10x_flash.c ****   }
1486:common/stm32f10x_flash.c ****   else 
1487:common/stm32f10x_flash.c ****   {  
1488:common/stm32f10x_flash.c ****     if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 1846              		.loc 1 1488 0
 1847 0840 0C4B     		ldr	r3, .L128
 1848 0842 DB68     		ldr	r3, [r3, #12]
 1849 0844 03F00403 		and	r3, r3, #4
 1850 0848 002B     		cmp	r3, #0
 1851 084a 02D0     		beq	.L125
1489:common/stm32f10x_flash.c ****     { 
1490:common/stm32f10x_flash.c ****       flashstatus = FLASH_ERROR_PG;
 1852              		.loc 1 1490 0
 1853 084c 0223     		movs	r3, #2
 1854 084e FB71     		strb	r3, [r7, #7]
 1855 0850 0AE0     		b	.L124
 1856              	.L125:
1491:common/stm32f10x_flash.c ****     }
1492:common/stm32f10x_flash.c ****     else 
1493:common/stm32f10x_flash.c ****     {
1494:common/stm32f10x_flash.c ****       if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 1857              		.loc 1 1494 0
 1858 0852 084B     		ldr	r3, .L128
 1859 0854 DB68     		ldr	r3, [r3, #12]
 1860 0856 03F01003 		and	r3, r3, #16
 1861 085a 002B     		cmp	r3, #0
 1862 085c 02D0     		beq	.L126
1495:common/stm32f10x_flash.c ****       {
1496:common/stm32f10x_flash.c ****         flashstatus = FLASH_ERROR_WRP;
 1863              		.loc 1 1496 0
 1864 085e 0323     		movs	r3, #3
 1865 0860 FB71     		strb	r3, [r7, #7]
 1866 0862 01E0     		b	.L124
ARM GAS  /tmp/ccFIADOf.s 			page 60


 1867              	.L126:
1497:common/stm32f10x_flash.c ****       }
1498:common/stm32f10x_flash.c ****       else
1499:common/stm32f10x_flash.c ****       {
1500:common/stm32f10x_flash.c ****         flashstatus = FLASH_COMPLETE;
 1868              		.loc 1 1500 0
 1869 0864 0423     		movs	r3, #4
 1870 0866 FB71     		strb	r3, [r7, #7]
 1871              	.L124:
1501:common/stm32f10x_flash.c ****       }
1502:common/stm32f10x_flash.c ****     }
1503:common/stm32f10x_flash.c ****   }
1504:common/stm32f10x_flash.c ****   /* Return the Flash Status */
1505:common/stm32f10x_flash.c ****   return flashstatus;
 1872              		.loc 1 1505 0
 1873 0868 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1506:common/stm32f10x_flash.c **** }
 1874              		.loc 1 1506 0
 1875 086a 1846     		mov	r0, r3
 1876 086c 0C37     		adds	r7, r7, #12
 1877              		.cfi_def_cfa_offset 4
 1878 086e BD46     		mov	sp, r7
 1879              		.cfi_def_cfa_register 13
 1880              		@ sp needed
 1881 0870 80BC     		pop	{r7}
 1882              		.cfi_restore 7
 1883              		.cfi_def_cfa_offset 0
 1884 0872 7047     		bx	lr
 1885              	.L129:
 1886              		.align	2
 1887              	.L128:
 1888 0874 00200240 		.word	1073881088
 1889              		.cfi_endproc
 1890              	.LFE87:
 1891              		.size	FLASH_GetStatus, .-FLASH_GetStatus
 1892              		.align	1
 1893              		.global	FLASH_GetBank1Status
 1894              		.syntax unified
 1895              		.thumb
 1896              		.thumb_func
 1897              		.fpu softvfp
 1898              		.type	FLASH_GetBank1Status, %function
 1899              	FLASH_GetBank1Status:
 1900              	.LFB88:
1507:common/stm32f10x_flash.c **** 
1508:common/stm32f10x_flash.c **** /**
1509:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH Bank1 Status.
1510:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices, it is equivalent
1511:common/stm32f10x_flash.c ****   *         to FLASH_GetStatus function.
1512:common/stm32f10x_flash.c ****   * @param  None
1513:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
1514:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP or FLASH_COMPLETE
1515:common/stm32f10x_flash.c ****   */
1516:common/stm32f10x_flash.c **** FLASH_Status FLASH_GetBank1Status(void)
1517:common/stm32f10x_flash.c **** {
 1901              		.loc 1 1517 0
 1902              		.cfi_startproc
ARM GAS  /tmp/ccFIADOf.s 			page 61


 1903              		@ args = 0, pretend = 0, frame = 8
 1904              		@ frame_needed = 1, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 1906 0878 80B4     		push	{r7}
 1907              		.cfi_def_cfa_offset 4
 1908              		.cfi_offset 7, -4
 1909 087a 83B0     		sub	sp, sp, #12
 1910              		.cfi_def_cfa_offset 16
 1911 087c 00AF     		add	r7, sp, #0
 1912              		.cfi_def_cfa_register 7
1518:common/stm32f10x_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
 1913              		.loc 1 1518 0
 1914 087e 0423     		movs	r3, #4
 1915 0880 FB71     		strb	r3, [r7, #7]
1519:common/stm32f10x_flash.c ****   
1520:common/stm32f10x_flash.c ****   if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 1916              		.loc 1 1520 0
 1917 0882 114B     		ldr	r3, .L136
 1918 0884 DB68     		ldr	r3, [r3, #12]
 1919 0886 03F00103 		and	r3, r3, #1
 1920 088a 012B     		cmp	r3, #1
 1921 088c 02D1     		bne	.L131
1521:common/stm32f10x_flash.c ****   {
1522:common/stm32f10x_flash.c ****     flashstatus = FLASH_BUSY;
 1922              		.loc 1 1522 0
 1923 088e 0123     		movs	r3, #1
 1924 0890 FB71     		strb	r3, [r7, #7]
 1925 0892 13E0     		b	.L132
 1926              	.L131:
1523:common/stm32f10x_flash.c ****   }
1524:common/stm32f10x_flash.c ****   else 
1525:common/stm32f10x_flash.c ****   {  
1526:common/stm32f10x_flash.c ****     if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 1927              		.loc 1 1526 0
 1928 0894 0C4B     		ldr	r3, .L136
 1929 0896 DB68     		ldr	r3, [r3, #12]
 1930 0898 03F00403 		and	r3, r3, #4
 1931 089c 002B     		cmp	r3, #0
 1932 089e 02D0     		beq	.L133
1527:common/stm32f10x_flash.c ****     { 
1528:common/stm32f10x_flash.c ****       flashstatus = FLASH_ERROR_PG;
 1933              		.loc 1 1528 0
 1934 08a0 0223     		movs	r3, #2
 1935 08a2 FB71     		strb	r3, [r7, #7]
 1936 08a4 0AE0     		b	.L132
 1937              	.L133:
1529:common/stm32f10x_flash.c ****     }
1530:common/stm32f10x_flash.c ****     else 
1531:common/stm32f10x_flash.c ****     {
1532:common/stm32f10x_flash.c ****       if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 1938              		.loc 1 1532 0
 1939 08a6 084B     		ldr	r3, .L136
 1940 08a8 DB68     		ldr	r3, [r3, #12]
 1941 08aa 03F01003 		and	r3, r3, #16
 1942 08ae 002B     		cmp	r3, #0
 1943 08b0 02D0     		beq	.L134
1533:common/stm32f10x_flash.c ****       {
ARM GAS  /tmp/ccFIADOf.s 			page 62


1534:common/stm32f10x_flash.c ****         flashstatus = FLASH_ERROR_WRP;
 1944              		.loc 1 1534 0
 1945 08b2 0323     		movs	r3, #3
 1946 08b4 FB71     		strb	r3, [r7, #7]
 1947 08b6 01E0     		b	.L132
 1948              	.L134:
1535:common/stm32f10x_flash.c ****       }
1536:common/stm32f10x_flash.c ****       else
1537:common/stm32f10x_flash.c ****       {
1538:common/stm32f10x_flash.c ****         flashstatus = FLASH_COMPLETE;
 1949              		.loc 1 1538 0
 1950 08b8 0423     		movs	r3, #4
 1951 08ba FB71     		strb	r3, [r7, #7]
 1952              	.L132:
1539:common/stm32f10x_flash.c ****       }
1540:common/stm32f10x_flash.c ****     }
1541:common/stm32f10x_flash.c ****   }
1542:common/stm32f10x_flash.c ****   /* Return the Flash Status */
1543:common/stm32f10x_flash.c ****   return flashstatus;
 1953              		.loc 1 1543 0
 1954 08bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1544:common/stm32f10x_flash.c **** }
 1955              		.loc 1 1544 0
 1956 08be 1846     		mov	r0, r3
 1957 08c0 0C37     		adds	r7, r7, #12
 1958              		.cfi_def_cfa_offset 4
 1959 08c2 BD46     		mov	sp, r7
 1960              		.cfi_def_cfa_register 13
 1961              		@ sp needed
 1962 08c4 80BC     		pop	{r7}
 1963              		.cfi_restore 7
 1964              		.cfi_def_cfa_offset 0
 1965 08c6 7047     		bx	lr
 1966              	.L137:
 1967              		.align	2
 1968              	.L136:
 1969 08c8 00200240 		.word	1073881088
 1970              		.cfi_endproc
 1971              	.LFE88:
 1972              		.size	FLASH_GetBank1Status, .-FLASH_GetBank1Status
 1973              		.align	1
 1974              		.global	FLASH_WaitForLastOperation
 1975              		.syntax unified
 1976              		.thumb
 1977              		.thumb_func
 1978              		.fpu softvfp
 1979              		.type	FLASH_WaitForLastOperation, %function
 1980              	FLASH_WaitForLastOperation:
 1981              	.LFB89:
1545:common/stm32f10x_flash.c **** 
1546:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1547:common/stm32f10x_flash.c **** /**
1548:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH Bank2 Status.
1549:common/stm32f10x_flash.c ****   * @note   This function can be used for STM32F10x_XL density devices.
1550:common/stm32f10x_flash.c ****   * @param  None
1551:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
1552:common/stm32f10x_flash.c ****   *        FLASH_ERROR_WRP or FLASH_COMPLETE
ARM GAS  /tmp/ccFIADOf.s 			page 63


1553:common/stm32f10x_flash.c ****   */
1554:common/stm32f10x_flash.c **** FLASH_Status FLASH_GetBank2Status(void)
1555:common/stm32f10x_flash.c **** {
1556:common/stm32f10x_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
1557:common/stm32f10x_flash.c ****   
1558:common/stm32f10x_flash.c ****   if((FLASH->SR2 & (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF)) 
1559:common/stm32f10x_flash.c ****   {
1560:common/stm32f10x_flash.c ****     flashstatus = FLASH_BUSY;
1561:common/stm32f10x_flash.c ****   }
1562:common/stm32f10x_flash.c ****   else 
1563:common/stm32f10x_flash.c ****   {  
1564:common/stm32f10x_flash.c ****     if((FLASH->SR2 & (FLASH_FLAG_BANK2_PGERR & 0x7FFFFFFF)) != 0)
1565:common/stm32f10x_flash.c ****     { 
1566:common/stm32f10x_flash.c ****       flashstatus = FLASH_ERROR_PG;
1567:common/stm32f10x_flash.c ****     }
1568:common/stm32f10x_flash.c ****     else 
1569:common/stm32f10x_flash.c ****     {
1570:common/stm32f10x_flash.c ****       if((FLASH->SR2 & (FLASH_FLAG_BANK2_WRPRTERR & 0x7FFFFFFF)) != 0 )
1571:common/stm32f10x_flash.c ****       {
1572:common/stm32f10x_flash.c ****         flashstatus = FLASH_ERROR_WRP;
1573:common/stm32f10x_flash.c ****       }
1574:common/stm32f10x_flash.c ****       else
1575:common/stm32f10x_flash.c ****       {
1576:common/stm32f10x_flash.c ****         flashstatus = FLASH_COMPLETE;
1577:common/stm32f10x_flash.c ****       }
1578:common/stm32f10x_flash.c ****     }
1579:common/stm32f10x_flash.c ****   }
1580:common/stm32f10x_flash.c ****   /* Return the Flash Status */
1581:common/stm32f10x_flash.c ****   return flashstatus;
1582:common/stm32f10x_flash.c **** }
1583:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1584:common/stm32f10x_flash.c **** /**
1585:common/stm32f10x_flash.c ****   * @brief  Waits for a Flash operation to complete or a TIMEOUT to occur.
1586:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices, 
1587:common/stm32f10x_flash.c ****   *         it is equivalent to FLASH_WaitForLastBank1Operation.
1588:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function waits for a Bank1 Flash operation
1589:common/stm32f10x_flash.c ****   *           to complete or a TIMEOUT to occur.
1590:common/stm32f10x_flash.c ****   *         - For all other devices it waits for a Flash operation to complete 
1591:common/stm32f10x_flash.c ****   *           or a TIMEOUT to occur.
1592:common/stm32f10x_flash.c ****   * @param  Timeout: FLASH programming Timeout
1593:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
1594:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1595:common/stm32f10x_flash.c ****   */
1596:common/stm32f10x_flash.c **** FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
1597:common/stm32f10x_flash.c **** { 
 1982              		.loc 1 1597 0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 16
 1985              		@ frame_needed = 1, uses_anonymous_args = 0
 1986 08cc 80B5     		push	{r7, lr}
 1987              		.cfi_def_cfa_offset 8
 1988              		.cfi_offset 7, -8
 1989              		.cfi_offset 14, -4
 1990 08ce 84B0     		sub	sp, sp, #16
 1991              		.cfi_def_cfa_offset 24
 1992 08d0 00AF     		add	r7, sp, #0
 1993              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccFIADOf.s 			page 64


 1994 08d2 7860     		str	r0, [r7, #4]
1598:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1995              		.loc 1 1598 0
 1996 08d4 0423     		movs	r3, #4
 1997 08d6 FB73     		strb	r3, [r7, #15]
1599:common/stm32f10x_flash.c ****    
1600:common/stm32f10x_flash.c ****   /* Check for the Flash Status */
1601:common/stm32f10x_flash.c ****   status = FLASH_GetBank1Status();
 1998              		.loc 1 1601 0
 1999 08d8 FFF7FEFF 		bl	FLASH_GetBank1Status
 2000 08dc 0346     		mov	r3, r0
 2001 08de FB73     		strb	r3, [r7, #15]
1602:common/stm32f10x_flash.c ****   /* Wait for a Flash operation to complete or a TIMEOUT to occur */
1603:common/stm32f10x_flash.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 2002              		.loc 1 1603 0
 2003 08e0 06E0     		b	.L139
 2004              	.L141:
1604:common/stm32f10x_flash.c ****   {
1605:common/stm32f10x_flash.c ****     status = FLASH_GetBank1Status();
 2005              		.loc 1 1605 0
 2006 08e2 FFF7FEFF 		bl	FLASH_GetBank1Status
 2007 08e6 0346     		mov	r3, r0
 2008 08e8 FB73     		strb	r3, [r7, #15]
1606:common/stm32f10x_flash.c ****     Timeout--;
 2009              		.loc 1 1606 0
 2010 08ea 7B68     		ldr	r3, [r7, #4]
 2011 08ec 013B     		subs	r3, r3, #1
 2012 08ee 7B60     		str	r3, [r7, #4]
 2013              	.L139:
1603:common/stm32f10x_flash.c ****   {
 2014              		.loc 1 1603 0
 2015 08f0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2016 08f2 012B     		cmp	r3, #1
 2017 08f4 02D1     		bne	.L140
1603:common/stm32f10x_flash.c ****   {
 2018              		.loc 1 1603 0 is_stmt 0 discriminator 1
 2019 08f6 7B68     		ldr	r3, [r7, #4]
 2020 08f8 002B     		cmp	r3, #0
 2021 08fa F2D1     		bne	.L141
 2022              	.L140:
1607:common/stm32f10x_flash.c ****   }
1608:common/stm32f10x_flash.c ****   if(Timeout == 0x00 )
 2023              		.loc 1 1608 0 is_stmt 1
 2024 08fc 7B68     		ldr	r3, [r7, #4]
 2025 08fe 002B     		cmp	r3, #0
 2026 0900 01D1     		bne	.L142
1609:common/stm32f10x_flash.c ****   {
1610:common/stm32f10x_flash.c ****     status = FLASH_TIMEOUT;
 2027              		.loc 1 1610 0
 2028 0902 0523     		movs	r3, #5
 2029 0904 FB73     		strb	r3, [r7, #15]
 2030              	.L142:
1611:common/stm32f10x_flash.c ****   }
1612:common/stm32f10x_flash.c ****   /* Return the operation status */
1613:common/stm32f10x_flash.c ****   return status;
 2031              		.loc 1 1613 0
 2032 0906 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  /tmp/ccFIADOf.s 			page 65


1614:common/stm32f10x_flash.c **** }
 2033              		.loc 1 1614 0
 2034 0908 1846     		mov	r0, r3
 2035 090a 1037     		adds	r7, r7, #16
 2036              		.cfi_def_cfa_offset 8
 2037 090c BD46     		mov	sp, r7
 2038              		.cfi_def_cfa_register 13
 2039              		@ sp needed
 2040 090e 80BD     		pop	{r7, pc}
 2041              		.cfi_endproc
 2042              	.LFE89:
 2043              		.size	FLASH_WaitForLastOperation, .-FLASH_WaitForLastOperation
 2044              		.align	1
 2045              		.global	FLASH_WaitForLastBank1Operation
 2046              		.syntax unified
 2047              		.thumb
 2048              		.thumb_func
 2049              		.fpu softvfp
 2050              		.type	FLASH_WaitForLastBank1Operation, %function
 2051              	FLASH_WaitForLastBank1Operation:
 2052              	.LFB90:
1615:common/stm32f10x_flash.c **** 
1616:common/stm32f10x_flash.c **** /**
1617:common/stm32f10x_flash.c ****   * @brief  Waits for a Flash operation on Bank1 to complete or a TIMEOUT to occur.
1618:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices, 
1619:common/stm32f10x_flash.c ****   *         it is equivalent to FLASH_WaitForLastOperation.
1620:common/stm32f10x_flash.c ****   * @param  Timeout: FLASH programming Timeout
1621:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
1622:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1623:common/stm32f10x_flash.c ****   */
1624:common/stm32f10x_flash.c **** FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
1625:common/stm32f10x_flash.c **** { 
 2053              		.loc 1 1625 0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 16
 2056              		@ frame_needed = 1, uses_anonymous_args = 0
 2057 0910 80B5     		push	{r7, lr}
 2058              		.cfi_def_cfa_offset 8
 2059              		.cfi_offset 7, -8
 2060              		.cfi_offset 14, -4
 2061 0912 84B0     		sub	sp, sp, #16
 2062              		.cfi_def_cfa_offset 24
 2063 0914 00AF     		add	r7, sp, #0
 2064              		.cfi_def_cfa_register 7
 2065 0916 7860     		str	r0, [r7, #4]
1626:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 2066              		.loc 1 1626 0
 2067 0918 0423     		movs	r3, #4
 2068 091a FB73     		strb	r3, [r7, #15]
1627:common/stm32f10x_flash.c ****    
1628:common/stm32f10x_flash.c ****   /* Check for the Flash Status */
1629:common/stm32f10x_flash.c ****   status = FLASH_GetBank1Status();
 2069              		.loc 1 1629 0
 2070 091c FFF7FEFF 		bl	FLASH_GetBank1Status
 2071 0920 0346     		mov	r3, r0
 2072 0922 FB73     		strb	r3, [r7, #15]
1630:common/stm32f10x_flash.c ****   /* Wait for a Flash operation to complete or a TIMEOUT to occur */
ARM GAS  /tmp/ccFIADOf.s 			page 66


1631:common/stm32f10x_flash.c ****   while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 2073              		.loc 1 1631 0
 2074 0924 06E0     		b	.L145
 2075              	.L147:
1632:common/stm32f10x_flash.c ****   {
1633:common/stm32f10x_flash.c ****     status = FLASH_GetBank1Status();
 2076              		.loc 1 1633 0
 2077 0926 FFF7FEFF 		bl	FLASH_GetBank1Status
 2078 092a 0346     		mov	r3, r0
 2079 092c FB73     		strb	r3, [r7, #15]
1634:common/stm32f10x_flash.c ****     Timeout--;
 2080              		.loc 1 1634 0
 2081 092e 7B68     		ldr	r3, [r7, #4]
 2082 0930 013B     		subs	r3, r3, #1
 2083 0932 7B60     		str	r3, [r7, #4]
 2084              	.L145:
1631:common/stm32f10x_flash.c ****   {
 2085              		.loc 1 1631 0
 2086 0934 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2087 0936 012B     		cmp	r3, #1
 2088 0938 02D1     		bne	.L146
1631:common/stm32f10x_flash.c ****   {
 2089              		.loc 1 1631 0 is_stmt 0 discriminator 1
 2090 093a 7B68     		ldr	r3, [r7, #4]
 2091 093c 002B     		cmp	r3, #0
 2092 093e F2D1     		bne	.L147
 2093              	.L146:
1635:common/stm32f10x_flash.c ****   }
1636:common/stm32f10x_flash.c ****   if(Timeout == 0x00 )
 2094              		.loc 1 1636 0 is_stmt 1
 2095 0940 7B68     		ldr	r3, [r7, #4]
 2096 0942 002B     		cmp	r3, #0
 2097 0944 01D1     		bne	.L148
1637:common/stm32f10x_flash.c ****   {
1638:common/stm32f10x_flash.c ****     status = FLASH_TIMEOUT;
 2098              		.loc 1 1638 0
 2099 0946 0523     		movs	r3, #5
 2100 0948 FB73     		strb	r3, [r7, #15]
 2101              	.L148:
1639:common/stm32f10x_flash.c ****   }
1640:common/stm32f10x_flash.c ****   /* Return the operation status */
1641:common/stm32f10x_flash.c ****   return status;
 2102              		.loc 1 1641 0
 2103 094a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1642:common/stm32f10x_flash.c **** }
 2104              		.loc 1 1642 0
 2105 094c 1846     		mov	r0, r3
 2106 094e 1037     		adds	r7, r7, #16
 2107              		.cfi_def_cfa_offset 8
 2108 0950 BD46     		mov	sp, r7
 2109              		.cfi_def_cfa_register 13
 2110              		@ sp needed
 2111 0952 80BD     		pop	{r7, pc}
 2112              		.cfi_endproc
 2113              	.LFE90:
 2114              		.size	FLASH_WaitForLastBank1Operation, .-FLASH_WaitForLastBank1Operation
 2115              	.Letext0:
ARM GAS  /tmp/ccFIADOf.s 			page 67


 2116              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2117              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2118              		.file 4 "include/core_cm3.h"
 2119              		.file 5 "include/system_stm32f10x.h"
 2120              		.file 6 "include/stm32f10x.h"
 2121              		.file 7 "include/stm32f10x_flash.h"
 2122              		.section	.debug_info,"",%progbits
 2123              	.Ldebug_info0:
 2124 0000 C4070000 		.4byte	0x7c4
 2125 0004 0400     		.2byte	0x4
 2126 0006 00000000 		.4byte	.Ldebug_abbrev0
 2127 000a 04       		.byte	0x4
 2128 000b 01       		.uleb128 0x1
 2129 000c EC020000 		.4byte	.LASF95
 2130 0010 0C       		.byte	0xc
 2131 0011 88050000 		.4byte	.LASF96
 2132 0015 0E020000 		.4byte	.LASF97
 2133 0019 00000000 		.4byte	.Ltext0
 2134 001d 54090000 		.4byte	.Letext0-.Ltext0
 2135 0021 00000000 		.4byte	.Ldebug_line0
 2136 0025 02       		.uleb128 0x2
 2137 0026 01       		.byte	0x1
 2138 0027 06       		.byte	0x6
 2139 0028 8A020000 		.4byte	.LASF0
 2140 002c 03       		.uleb128 0x3
 2141 002d E3010000 		.4byte	.LASF3
 2142 0031 02       		.byte	0x2
 2143 0032 1D       		.byte	0x1d
 2144 0033 37000000 		.4byte	0x37
 2145 0037 02       		.uleb128 0x2
 2146 0038 01       		.byte	0x1
 2147 0039 08       		.byte	0x8
 2148 003a 3D020000 		.4byte	.LASF1
 2149 003e 02       		.uleb128 0x2
 2150 003f 02       		.byte	0x2
 2151 0040 05       		.byte	0x5
 2152 0041 DF000000 		.4byte	.LASF2
 2153 0045 03       		.uleb128 0x3
 2154 0046 D4000000 		.4byte	.LASF4
 2155 004a 02       		.byte	0x2
 2156 004b 2B       		.byte	0x2b
 2157 004c 50000000 		.4byte	0x50
 2158 0050 02       		.uleb128 0x2
 2159 0051 02       		.byte	0x2
 2160 0052 07       		.byte	0x7
 2161 0053 4E030000 		.4byte	.LASF5
 2162 0057 03       		.uleb128 0x3
 2163 0058 DB040000 		.4byte	.LASF6
 2164 005c 02       		.byte	0x2
 2165 005d 3F       		.byte	0x3f
 2166 005e 62000000 		.4byte	0x62
 2167 0062 02       		.uleb128 0x2
 2168 0063 04       		.byte	0x4
 2169 0064 05       		.byte	0x5
 2170 0065 DA010000 		.4byte	.LASF7
 2171 0069 03       		.uleb128 0x3
 2172 006a B0040000 		.4byte	.LASF8
ARM GAS  /tmp/ccFIADOf.s 			page 68


 2173 006e 02       		.byte	0x2
 2174 006f 41       		.byte	0x41
 2175 0070 74000000 		.4byte	0x74
 2176 0074 02       		.uleb128 0x2
 2177 0075 04       		.byte	0x4
 2178 0076 07       		.byte	0x7
 2179 0077 83040000 		.4byte	.LASF9
 2180 007b 02       		.uleb128 0x2
 2181 007c 08       		.byte	0x8
 2182 007d 05       		.byte	0x5
 2183 007e 99010000 		.4byte	.LASF10
 2184 0082 02       		.uleb128 0x2
 2185 0083 08       		.byte	0x8
 2186 0084 07       		.byte	0x7
 2187 0085 AA020000 		.4byte	.LASF11
 2188 0089 04       		.uleb128 0x4
 2189 008a 04       		.byte	0x4
 2190 008b 05       		.byte	0x5
 2191 008c 696E7400 		.ascii	"int\000"
 2192 0090 02       		.uleb128 0x2
 2193 0091 04       		.byte	0x4
 2194 0092 07       		.byte	0x7
 2195 0093 D4020000 		.4byte	.LASF12
 2196 0097 03       		.uleb128 0x3
 2197 0098 25010000 		.4byte	.LASF13
 2198 009c 03       		.byte	0x3
 2199 009d 18       		.byte	0x18
 2200 009e 2C000000 		.4byte	0x2c
 2201 00a2 03       		.uleb128 0x3
 2202 00a3 BD030000 		.4byte	.LASF14
 2203 00a7 03       		.byte	0x3
 2204 00a8 24       		.byte	0x24
 2205 00a9 45000000 		.4byte	0x45
 2206 00ad 05       		.uleb128 0x5
 2207 00ae A2000000 		.4byte	0xa2
 2208 00b2 03       		.uleb128 0x3
 2209 00b3 D5030000 		.4byte	.LASF15
 2210 00b7 03       		.byte	0x3
 2211 00b8 2C       		.byte	0x2c
 2212 00b9 57000000 		.4byte	0x57
 2213 00bd 05       		.uleb128 0x5
 2214 00be B2000000 		.4byte	0xb2
 2215 00c2 03       		.uleb128 0x3
 2216 00c3 C1020000 		.4byte	.LASF16
 2217 00c7 03       		.byte	0x3
 2218 00c8 30       		.byte	0x30
 2219 00c9 69000000 		.4byte	0x69
 2220 00cd 05       		.uleb128 0x5
 2221 00ce C2000000 		.4byte	0xc2
 2222 00d2 02       		.uleb128 0x2
 2223 00d3 04       		.byte	0x4
 2224 00d4 07       		.byte	0x7
 2225 00d5 78000000 		.4byte	.LASF17
 2226 00d9 06       		.uleb128 0x6
 2227 00da 66050000 		.4byte	.LASF18
 2228 00de 04       		.byte	0x4
 2229 00df 9606     		.2byte	0x696
ARM GAS  /tmp/ccFIADOf.s 			page 69


 2230 00e1 BD000000 		.4byte	0xbd
 2231 00e5 07       		.uleb128 0x7
 2232 00e6 25000000 		.4byte	.LASF19
 2233 00ea 05       		.byte	0x5
 2234 00eb 35       		.byte	0x35
 2235 00ec C2000000 		.4byte	0xc2
 2236 00f0 08       		.uleb128 0x8
 2237 00f1 01       		.byte	0x1
 2238 00f2 37000000 		.4byte	0x37
 2239 00f6 06       		.byte	0x6
 2240 00f7 0702     		.2byte	0x207
 2241 00f9 0A010000 		.4byte	0x10a
 2242 00fd 09       		.uleb128 0x9
 2243 00fe 08020000 		.4byte	.LASF20
 2244 0102 00       		.byte	0
 2245 0103 0A       		.uleb128 0xa
 2246 0104 53455400 		.ascii	"SET\000"
 2247 0108 01       		.byte	0x1
 2248 0109 00       		.byte	0
 2249 010a 0B       		.uleb128 0xb
 2250 010b C9000000 		.4byte	.LASF21
 2251 010f 06       		.byte	0x6
 2252 0110 0702     		.2byte	0x207
 2253 0112 F0000000 		.4byte	0xf0
 2254 0116 08       		.uleb128 0x8
 2255 0117 01       		.byte	0x1
 2256 0118 37000000 		.4byte	0x37
 2257 011c 06       		.byte	0x6
 2258 011d 0902     		.2byte	0x209
 2259 011f 30010000 		.4byte	0x130
 2260 0123 09       		.uleb128 0x9
 2261 0124 77010000 		.4byte	.LASF22
 2262 0128 00       		.byte	0
 2263 0129 09       		.uleb128 0x9
 2264 012a AA050000 		.4byte	.LASF23
 2265 012e 01       		.byte	0x1
 2266 012f 00       		.byte	0
 2267 0130 0B       		.uleb128 0xb
 2268 0131 A0040000 		.4byte	.LASF24
 2269 0135 06       		.byte	0x6
 2270 0136 0902     		.2byte	0x209
 2271 0138 16010000 		.4byte	0x116
 2272 013c 0C       		.uleb128 0xc
 2273 013d 24       		.byte	0x24
 2274 013e 06       		.byte	0x6
 2275 013f 8503     		.2byte	0x385
 2276 0141 B8010000 		.4byte	0x1b8
 2277 0145 0D       		.uleb128 0xd
 2278 0146 41435200 		.ascii	"ACR\000"
 2279 014a 06       		.byte	0x6
 2280 014b 8703     		.2byte	0x387
 2281 014d CD000000 		.4byte	0xcd
 2282 0151 00       		.byte	0
 2283 0152 0E       		.uleb128 0xe
 2284 0153 E9000000 		.4byte	.LASF25
 2285 0157 06       		.byte	0x6
 2286 0158 8803     		.2byte	0x388
ARM GAS  /tmp/ccFIADOf.s 			page 70


 2287 015a CD000000 		.4byte	0xcd
 2288 015e 04       		.byte	0x4
 2289 015f 0E       		.uleb128 0xe
 2290 0160 91010000 		.4byte	.LASF26
 2291 0164 06       		.byte	0x6
 2292 0165 8903     		.2byte	0x389
 2293 0167 CD000000 		.4byte	0xcd
 2294 016b 08       		.byte	0x8
 2295 016c 0D       		.uleb128 0xd
 2296 016d 535200   		.ascii	"SR\000"
 2297 0170 06       		.byte	0x6
 2298 0171 8A03     		.2byte	0x38a
 2299 0173 CD000000 		.4byte	0xcd
 2300 0177 0C       		.byte	0xc
 2301 0178 0D       		.uleb128 0xd
 2302 0179 435200   		.ascii	"CR\000"
 2303 017c 06       		.byte	0x6
 2304 017d 8B03     		.2byte	0x38b
 2305 017f CD000000 		.4byte	0xcd
 2306 0183 10       		.byte	0x10
 2307 0184 0D       		.uleb128 0xd
 2308 0185 415200   		.ascii	"AR\000"
 2309 0188 06       		.byte	0x6
 2310 0189 8C03     		.2byte	0x38c
 2311 018b CD000000 		.4byte	0xcd
 2312 018f 14       		.byte	0x14
 2313 0190 0E       		.uleb128 0xe
 2314 0191 34050000 		.4byte	.LASF27
 2315 0195 06       		.byte	0x6
 2316 0196 8D03     		.2byte	0x38d
 2317 0198 CD000000 		.4byte	0xcd
 2318 019c 18       		.byte	0x18
 2319 019d 0D       		.uleb128 0xd
 2320 019e 4F425200 		.ascii	"OBR\000"
 2321 01a2 06       		.byte	0x6
 2322 01a3 8E03     		.2byte	0x38e
 2323 01a5 CD000000 		.4byte	0xcd
 2324 01a9 1C       		.byte	0x1c
 2325 01aa 0E       		.uleb128 0xe
 2326 01ab ED010000 		.4byte	.LASF28
 2327 01af 06       		.byte	0x6
 2328 01b0 8F03     		.2byte	0x38f
 2329 01b2 CD000000 		.4byte	0xcd
 2330 01b6 20       		.byte	0x20
 2331 01b7 00       		.byte	0
 2332 01b8 0B       		.uleb128 0xb
 2333 01b9 3D050000 		.4byte	.LASF29
 2334 01bd 06       		.byte	0x6
 2335 01be 9803     		.2byte	0x398
 2336 01c0 3C010000 		.4byte	0x13c
 2337 01c4 0C       		.uleb128 0xc
 2338 01c5 10       		.byte	0x10
 2339 01c6 06       		.byte	0x6
 2340 01c7 9E03     		.2byte	0x39e
 2341 01c9 36020000 		.4byte	0x236
 2342 01cd 0D       		.uleb128 0xd
 2343 01ce 52445000 		.ascii	"RDP\000"
ARM GAS  /tmp/ccFIADOf.s 			page 71


 2344 01d2 06       		.byte	0x6
 2345 01d3 A003     		.2byte	0x3a0
 2346 01d5 AD000000 		.4byte	0xad
 2347 01d9 00       		.byte	0
 2348 01da 0E       		.uleb128 0xe
 2349 01db F5040000 		.4byte	.LASF30
 2350 01df 06       		.byte	0x6
 2351 01e0 A103     		.2byte	0x3a1
 2352 01e2 AD000000 		.4byte	0xad
 2353 01e6 02       		.byte	0x2
 2354 01e7 0E       		.uleb128 0xe
 2355 01e8 FA040000 		.4byte	.LASF31
 2356 01ec 06       		.byte	0x6
 2357 01ed A203     		.2byte	0x3a2
 2358 01ef AD000000 		.4byte	0xad
 2359 01f3 04       		.byte	0x4
 2360 01f4 0E       		.uleb128 0xe
 2361 01f5 00050000 		.4byte	.LASF32
 2362 01f9 06       		.byte	0x6
 2363 01fa A303     		.2byte	0x3a3
 2364 01fc AD000000 		.4byte	0xad
 2365 0200 06       		.byte	0x6
 2366 0201 0E       		.uleb128 0xe
 2367 0202 63010000 		.4byte	.LASF33
 2368 0206 06       		.byte	0x6
 2369 0207 A403     		.2byte	0x3a4
 2370 0209 AD000000 		.4byte	0xad
 2371 020d 08       		.byte	0x8
 2372 020e 0E       		.uleb128 0xe
 2373 020f 68010000 		.4byte	.LASF34
 2374 0213 06       		.byte	0x6
 2375 0214 A503     		.2byte	0x3a5
 2376 0216 AD000000 		.4byte	0xad
 2377 021a 0A       		.byte	0xa
 2378 021b 0E       		.uleb128 0xe
 2379 021c 6D010000 		.4byte	.LASF35
 2380 0220 06       		.byte	0x6
 2381 0221 A603     		.2byte	0x3a6
 2382 0223 AD000000 		.4byte	0xad
 2383 0227 0C       		.byte	0xc
 2384 0228 0E       		.uleb128 0xe
 2385 0229 72010000 		.4byte	.LASF36
 2386 022d 06       		.byte	0x6
 2387 022e A703     		.2byte	0x3a7
 2388 0230 AD000000 		.4byte	0xad
 2389 0234 0E       		.byte	0xe
 2390 0235 00       		.byte	0
 2391 0236 0B       		.uleb128 0xb
 2392 0237 6D000000 		.4byte	.LASF37
 2393 023b 06       		.byte	0x6
 2394 023c A803     		.2byte	0x3a8
 2395 023e C4010000 		.4byte	0x1c4
 2396 0242 0F       		.uleb128 0xf
 2397 0243 01       		.byte	0x1
 2398 0244 37000000 		.4byte	0x37
 2399 0248 07       		.byte	0x7
 2400 0249 33       		.byte	0x33
ARM GAS  /tmp/ccFIADOf.s 			page 72


 2401 024a 6D020000 		.4byte	0x26d
 2402 024e 09       		.uleb128 0x9
 2403 024f E1020000 		.4byte	.LASF38
 2404 0253 01       		.byte	0x1
 2405 0254 09       		.uleb128 0x9
 2406 0255 58020000 		.4byte	.LASF39
 2407 0259 02       		.byte	0x2
 2408 025a 09       		.uleb128 0x9
 2409 025b 56000000 		.4byte	.LASF40
 2410 025f 03       		.byte	0x3
 2411 0260 09       		.uleb128 0x9
 2412 0261 C6030000 		.4byte	.LASF41
 2413 0265 04       		.byte	0x4
 2414 0266 09       		.uleb128 0x9
 2415 0267 34030000 		.4byte	.LASF42
 2416 026b 05       		.byte	0x5
 2417 026c 00       		.byte	0
 2418 026d 03       		.uleb128 0x3
 2419 026e 2D010000 		.4byte	.LASF43
 2420 0272 07       		.byte	0x7
 2421 0273 39       		.byte	0x39
 2422 0274 42020000 		.4byte	0x242
 2423 0278 10       		.uleb128 0x10
 2424 0279 BB040000 		.4byte	.LASF44
 2425 027d 01       		.byte	0x1
 2426 027e 5806     		.2byte	0x658
 2427 0280 6D020000 		.4byte	0x26d
 2428 0284 10090000 		.4byte	.LFB90
 2429 0288 44000000 		.4byte	.LFE90-.LFB90
 2430 028c 01       		.uleb128 0x1
 2431 028d 9C       		.byte	0x9c
 2432 028e B1020000 		.4byte	0x2b1
 2433 0292 11       		.uleb128 0x11
 2434 0293 61030000 		.4byte	.LASF46
 2435 0297 01       		.byte	0x1
 2436 0298 5806     		.2byte	0x658
 2437 029a C2000000 		.4byte	0xc2
 2438 029e 02       		.uleb128 0x2
 2439 029f 91       		.byte	0x91
 2440 02a0 6C       		.sleb128 -20
 2441 02a1 12       		.uleb128 0x12
 2442 02a2 47030000 		.4byte	.LASF47
 2443 02a6 01       		.byte	0x1
 2444 02a7 5A06     		.2byte	0x65a
 2445 02a9 6D020000 		.4byte	0x26d
 2446 02ad 02       		.uleb128 0x2
 2447 02ae 91       		.byte	0x91
 2448 02af 77       		.sleb128 -9
 2449 02b0 00       		.byte	0
 2450 02b1 10       		.uleb128 0x10
 2451 02b2 4B050000 		.4byte	.LASF45
 2452 02b6 01       		.byte	0x1
 2453 02b7 3C06     		.2byte	0x63c
 2454 02b9 6D020000 		.4byte	0x26d
 2455 02bd CC080000 		.4byte	.LFB89
 2456 02c1 44000000 		.4byte	.LFE89-.LFB89
 2457 02c5 01       		.uleb128 0x1
ARM GAS  /tmp/ccFIADOf.s 			page 73


 2458 02c6 9C       		.byte	0x9c
 2459 02c7 EA020000 		.4byte	0x2ea
 2460 02cb 11       		.uleb128 0x11
 2461 02cc 61030000 		.4byte	.LASF46
 2462 02d0 01       		.byte	0x1
 2463 02d1 3C06     		.2byte	0x63c
 2464 02d3 C2000000 		.4byte	0xc2
 2465 02d7 02       		.uleb128 0x2
 2466 02d8 91       		.byte	0x91
 2467 02d9 6C       		.sleb128 -20
 2468 02da 12       		.uleb128 0x12
 2469 02db 47030000 		.4byte	.LASF47
 2470 02df 01       		.byte	0x1
 2471 02e0 3E06     		.2byte	0x63e
 2472 02e2 6D020000 		.4byte	0x26d
 2473 02e6 02       		.uleb128 0x2
 2474 02e7 91       		.byte	0x91
 2475 02e8 77       		.sleb128 -9
 2476 02e9 00       		.byte	0
 2477 02ea 13       		.uleb128 0x13
 2478 02eb 08000000 		.4byte	.LASF48
 2479 02ef 01       		.byte	0x1
 2480 02f0 EC05     		.2byte	0x5ec
 2481 02f2 6D020000 		.4byte	0x26d
 2482 02f6 78080000 		.4byte	.LFB88
 2483 02fa 54000000 		.4byte	.LFE88-.LFB88
 2484 02fe 01       		.uleb128 0x1
 2485 02ff 9C       		.byte	0x9c
 2486 0300 14030000 		.4byte	0x314
 2487 0304 12       		.uleb128 0x12
 2488 0305 B1050000 		.4byte	.LASF49
 2489 0309 01       		.byte	0x1
 2490 030a EE05     		.2byte	0x5ee
 2491 030c 6D020000 		.4byte	0x26d
 2492 0310 02       		.uleb128 0x2
 2493 0311 91       		.byte	0x91
 2494 0312 77       		.sleb128 -9
 2495 0313 00       		.byte	0
 2496 0314 13       		.uleb128 0x13
 2497 0315 DD030000 		.4byte	.LASF50
 2498 0319 01       		.byte	0x1
 2499 031a C605     		.2byte	0x5c6
 2500 031c 6D020000 		.4byte	0x26d
 2501 0320 24080000 		.4byte	.LFB87
 2502 0324 54000000 		.4byte	.LFE87-.LFB87
 2503 0328 01       		.uleb128 0x1
 2504 0329 9C       		.byte	0x9c
 2505 032a 3E030000 		.4byte	0x33e
 2506 032e 12       		.uleb128 0x12
 2507 032f B1050000 		.4byte	.LASF49
 2508 0333 01       		.byte	0x1
 2509 0334 C805     		.2byte	0x5c8
 2510 0336 6D020000 		.4byte	0x26d
 2511 033a 02       		.uleb128 0x2
 2512 033b 91       		.byte	0x91
 2513 033c 77       		.sleb128 -9
 2514 033d 00       		.byte	0
ARM GAS  /tmp/ccFIADOf.s 			page 74


 2515 033e 14       		.uleb128 0x14
 2516 033f 12050000 		.4byte	.LASF54
 2517 0343 01       		.byte	0x1
 2518 0344 A405     		.2byte	0x5a4
 2519 0346 08080000 		.4byte	.LFB86
 2520 034a 1C000000 		.4byte	.LFE86-.LFB86
 2521 034e 01       		.uleb128 0x1
 2522 034f 9C       		.byte	0x9c
 2523 0350 64030000 		.4byte	0x364
 2524 0354 11       		.uleb128 0x11
 2525 0355 95040000 		.4byte	.LASF51
 2526 0359 01       		.byte	0x1
 2527 035a A405     		.2byte	0x5a4
 2528 035c C2000000 		.4byte	0xc2
 2529 0360 02       		.uleb128 0x2
 2530 0361 91       		.byte	0x91
 2531 0362 74       		.sleb128 -12
 2532 0363 00       		.byte	0
 2533 0364 13       		.uleb128 0x13
 2534 0365 96020000 		.4byte	.LASF52
 2535 0369 01       		.byte	0x1
 2536 036a 4E05     		.2byte	0x54e
 2537 036c 0A010000 		.4byte	0x10a
 2538 0370 B8070000 		.4byte	.LFB85
 2539 0374 50000000 		.4byte	.LFE85-.LFB85
 2540 0378 01       		.uleb128 0x1
 2541 0379 9C       		.byte	0x9c
 2542 037a 9D030000 		.4byte	0x39d
 2543 037e 11       		.uleb128 0x11
 2544 037f 95040000 		.4byte	.LASF51
 2545 0383 01       		.byte	0x1
 2546 0384 4E05     		.2byte	0x54e
 2547 0386 C2000000 		.4byte	0xc2
 2548 038a 02       		.uleb128 0x2
 2549 038b 91       		.byte	0x91
 2550 038c 6C       		.sleb128 -20
 2551 038d 12       		.uleb128 0x12
 2552 038e 33020000 		.4byte	.LASF53
 2553 0392 01       		.byte	0x1
 2554 0393 5005     		.2byte	0x550
 2555 0395 0A010000 		.4byte	0x10a
 2556 0399 02       		.uleb128 0x2
 2557 039a 91       		.byte	0x91
 2558 039b 77       		.sleb128 -9
 2559 039c 00       		.byte	0
 2560 039d 14       		.uleb128 0x14
 2561 039e 81000000 		.4byte	.LASF55
 2562 03a2 01       		.byte	0x1
 2563 03a3 0B05     		.2byte	0x50b
 2564 03a5 7C070000 		.4byte	.LFB84
 2565 03a9 3C000000 		.4byte	.LFE84-.LFB84
 2566 03ad 01       		.uleb128 0x1
 2567 03ae 9C       		.byte	0x9c
 2568 03af D2030000 		.4byte	0x3d2
 2569 03b3 11       		.uleb128 0x11
 2570 03b4 90000000 		.4byte	.LASF56
 2571 03b8 01       		.byte	0x1
ARM GAS  /tmp/ccFIADOf.s 			page 75


 2572 03b9 0B05     		.2byte	0x50b
 2573 03bb C2000000 		.4byte	0xc2
 2574 03bf 02       		.uleb128 0x2
 2575 03c0 91       		.byte	0x91
 2576 03c1 74       		.sleb128 -12
 2577 03c2 11       		.uleb128 0x11
 2578 03c3 5A010000 		.4byte	.LASF57
 2579 03c7 01       		.byte	0x1
 2580 03c8 0B05     		.2byte	0x50b
 2581 03ca 30010000 		.4byte	0x130
 2582 03ce 02       		.uleb128 0x2
 2583 03cf 91       		.byte	0x91
 2584 03d0 73       		.sleb128 -13
 2585 03d1 00       		.byte	0
 2586 03d2 13       		.uleb128 0x13
 2587 03d3 A3000000 		.4byte	.LASF58
 2588 03d7 01       		.byte	0x1
 2589 03d8 ED04     		.2byte	0x4ed
 2590 03da 0A010000 		.4byte	0x10a
 2591 03de 4C070000 		.4byte	.LFB83
 2592 03e2 30000000 		.4byte	.LFE83-.LFB83
 2593 03e6 01       		.uleb128 0x1
 2594 03e7 9C       		.byte	0x9c
 2595 03e8 FC030000 		.4byte	0x3fc
 2596 03ec 12       		.uleb128 0x12
 2597 03ed 33020000 		.4byte	.LASF53
 2598 03f1 01       		.byte	0x1
 2599 03f2 EF04     		.2byte	0x4ef
 2600 03f4 0A010000 		.4byte	0x10a
 2601 03f8 02       		.uleb128 0x2
 2602 03f9 91       		.byte	0x91
 2603 03fa 77       		.sleb128 -9
 2604 03fb 00       		.byte	0
 2605 03fc 13       		.uleb128 0x13
 2606 03fd 69030000 		.4byte	.LASF59
 2607 0401 01       		.byte	0x1
 2608 0402 D904     		.2byte	0x4d9
 2609 0404 0A010000 		.4byte	0x10a
 2610 0408 1C070000 		.4byte	.LFB82
 2611 040c 30000000 		.4byte	.LFE82-.LFB82
 2612 0410 01       		.uleb128 0x1
 2613 0411 9C       		.byte	0x9c
 2614 0412 26040000 		.4byte	0x426
 2615 0416 12       		.uleb128 0x12
 2616 0417 75040000 		.4byte	.LASF60
 2617 041b 01       		.byte	0x1
 2618 041c DB04     		.2byte	0x4db
 2619 041e 0A010000 		.4byte	0x10a
 2620 0422 02       		.uleb128 0x2
 2621 0423 91       		.byte	0x91
 2622 0424 77       		.sleb128 -9
 2623 0425 00       		.byte	0
 2624 0426 15       		.uleb128 0x15
 2625 0427 9A030000 		.4byte	.LASF61
 2626 042b 01       		.byte	0x1
 2627 042c CD04     		.2byte	0x4cd
 2628 042e C2000000 		.4byte	0xc2
ARM GAS  /tmp/ccFIADOf.s 			page 76


 2629 0432 08070000 		.4byte	.LFB81
 2630 0436 14000000 		.4byte	.LFE81-.LFB81
 2631 043a 01       		.uleb128 0x1
 2632 043b 9C       		.byte	0x9c
 2633 043c 15       		.uleb128 0x15
 2634 043d 5D040000 		.4byte	.LASF62
 2635 0441 01       		.byte	0x1
 2636 0442 C104     		.2byte	0x4c1
 2637 0444 C2000000 		.4byte	0xc2
 2638 0448 F0060000 		.4byte	.LFB80
 2639 044c 18000000 		.4byte	.LFE80-.LFB80
 2640 0450 01       		.uleb128 0x1
 2641 0451 9C       		.byte	0x9c
 2642 0452 10       		.uleb128 0x10
 2643 0453 A7010000 		.4byte	.LASF63
 2644 0457 01       		.byte	0x1
 2645 0458 5F04     		.2byte	0x45f
 2646 045a 6D020000 		.4byte	0x26d
 2647 045e 5C060000 		.4byte	.LFB79
 2648 0462 94000000 		.4byte	.LFE79-.LFB79
 2649 0466 01       		.uleb128 0x1
 2650 0467 9C       		.byte	0x9c
 2651 0468 A9040000 		.4byte	0x4a9
 2652 046c 11       		.uleb128 0x11
 2653 046d 1D000000 		.4byte	.LASF64
 2654 0471 01       		.byte	0x1
 2655 0472 5F04     		.2byte	0x45f
 2656 0474 A2000000 		.4byte	0xa2
 2657 0478 02       		.uleb128 0x2
 2658 0479 91       		.byte	0x91
 2659 047a 6E       		.sleb128 -18
 2660 047b 11       		.uleb128 0x11
 2661 047c 00000000 		.4byte	.LASF65
 2662 0480 01       		.byte	0x1
 2663 0481 5F04     		.2byte	0x45f
 2664 0483 A2000000 		.4byte	0xa2
 2665 0487 02       		.uleb128 0x2
 2666 0488 91       		.byte	0x91
 2667 0489 6C       		.sleb128 -20
 2668 048a 11       		.uleb128 0x11
 2669 048b A1050000 		.4byte	.LASF66
 2670 048f 01       		.byte	0x1
 2671 0490 5F04     		.2byte	0x45f
 2672 0492 A2000000 		.4byte	0xa2
 2673 0496 02       		.uleb128 0x2
 2674 0497 91       		.byte	0x91
 2675 0498 6A       		.sleb128 -22
 2676 0499 12       		.uleb128 0x12
 2677 049a 47030000 		.4byte	.LASF47
 2678 049e 01       		.byte	0x1
 2679 049f 6104     		.2byte	0x461
 2680 04a1 6D020000 		.4byte	0x26d
 2681 04a5 02       		.uleb128 0x2
 2682 04a6 91       		.byte	0x91
 2683 04a7 77       		.sleb128 -9
 2684 04a8 00       		.byte	0
 2685 04a9 10       		.uleb128 0x10
ARM GAS  /tmp/ccFIADOf.s 			page 77


 2686 04aa C2010000 		.4byte	.LASF67
 2687 04ae 01       		.byte	0x1
 2688 04af 1A04     		.2byte	0x41a
 2689 04b1 6D020000 		.4byte	0x26d
 2690 04b5 88050000 		.4byte	.LFB78
 2691 04b9 D4000000 		.4byte	.LFE78-.LFB78
 2692 04bd 01       		.uleb128 0x1
 2693 04be 9C       		.byte	0x9c
 2694 04bf E2040000 		.4byte	0x4e2
 2695 04c3 11       		.uleb128 0x11
 2696 04c4 5A010000 		.4byte	.LASF57
 2697 04c8 01       		.byte	0x1
 2698 04c9 1A04     		.2byte	0x41a
 2699 04cb 30010000 		.4byte	0x130
 2700 04cf 02       		.uleb128 0x2
 2701 04d0 91       		.byte	0x91
 2702 04d1 6F       		.sleb128 -17
 2703 04d2 12       		.uleb128 0x12
 2704 04d3 47030000 		.4byte	.LASF47
 2705 04d7 01       		.byte	0x1
 2706 04d8 1C04     		.2byte	0x41c
 2707 04da 6D020000 		.4byte	0x26d
 2708 04de 02       		.uleb128 0x2
 2709 04df 91       		.byte	0x91
 2710 04e0 77       		.sleb128 -9
 2711 04e1 00       		.byte	0
 2712 04e2 10       		.uleb128 0x10
 2713 04e3 ED030000 		.4byte	.LASF68
 2714 04e7 01       		.byte	0x1
 2715 04e8 D003     		.2byte	0x3d0
 2716 04ea 6D020000 		.4byte	0x26d
 2717 04ee 70040000 		.4byte	.LFB77
 2718 04f2 18010000 		.4byte	.LFE77-.LFB77
 2719 04f6 01       		.uleb128 0x1
 2720 04f7 9C       		.byte	0x9c
 2721 04f8 57050000 		.4byte	0x557
 2722 04fc 11       		.uleb128 0x11
 2723 04fd 06050000 		.4byte	.LASF69
 2724 0501 01       		.byte	0x1
 2725 0502 D003     		.2byte	0x3d0
 2726 0504 C2000000 		.4byte	0xc2
 2727 0508 02       		.uleb128 0x2
 2728 0509 91       		.byte	0x91
 2729 050a 64       		.sleb128 -28
 2730 050b 12       		.uleb128 0x12
 2731 050c 2A030000 		.4byte	.LASF70
 2732 0510 01       		.byte	0x1
 2733 0511 D203     		.2byte	0x3d2
 2734 0513 A2000000 		.4byte	0xa2
 2735 0517 02       		.uleb128 0x2
 2736 0518 91       		.byte	0x91
 2737 0519 74       		.sleb128 -12
 2738 051a 12       		.uleb128 0x12
 2739 051b 99000000 		.4byte	.LASF71
 2740 051f 01       		.byte	0x1
 2741 0520 D203     		.2byte	0x3d2
 2742 0522 A2000000 		.4byte	0xa2
ARM GAS  /tmp/ccFIADOf.s 			page 78


 2743 0526 02       		.uleb128 0x2
 2744 0527 91       		.byte	0x91
 2745 0528 72       		.sleb128 -14
 2746 0529 12       		.uleb128 0x12
 2747 052a 35000000 		.4byte	.LASF72
 2748 052e 01       		.byte	0x1
 2749 052f D203     		.2byte	0x3d2
 2750 0531 A2000000 		.4byte	0xa2
 2751 0535 02       		.uleb128 0x2
 2752 0536 91       		.byte	0x91
 2753 0537 70       		.sleb128 -16
 2754 0538 12       		.uleb128 0x12
 2755 0539 CA020000 		.4byte	.LASF73
 2756 053d 01       		.byte	0x1
 2757 053e D203     		.2byte	0x3d2
 2758 0540 A2000000 		.4byte	0xa2
 2759 0544 02       		.uleb128 0x2
 2760 0545 91       		.byte	0x91
 2761 0546 6E       		.sleb128 -18
 2762 0547 12       		.uleb128 0x12
 2763 0548 47030000 		.4byte	.LASF47
 2764 054c 01       		.byte	0x1
 2765 054d D403     		.2byte	0x3d4
 2766 054f 6D020000 		.4byte	0x26d
 2767 0553 02       		.uleb128 0x2
 2768 0554 91       		.byte	0x91
 2769 0555 77       		.sleb128 -9
 2770 0556 00       		.byte	0
 2771 0557 10       		.uleb128 0x10
 2772 0558 41040000 		.4byte	.LASF74
 2773 055c 01       		.byte	0x1
 2774 055d A203     		.2byte	0x3a2
 2775 055f 6D020000 		.4byte	0x26d
 2776 0563 F8030000 		.4byte	.LFB76
 2777 0567 78000000 		.4byte	.LFE76-.LFB76
 2778 056b 01       		.uleb128 0x1
 2779 056c 9C       		.byte	0x9c
 2780 056d 9F050000 		.4byte	0x59f
 2781 0571 11       		.uleb128 0x11
 2782 0572 C1000000 		.4byte	.LASF75
 2783 0576 01       		.byte	0x1
 2784 0577 A203     		.2byte	0x3a2
 2785 0579 C2000000 		.4byte	0xc2
 2786 057d 02       		.uleb128 0x2
 2787 057e 91       		.byte	0x91
 2788 057f 6C       		.sleb128 -20
 2789 0580 11       		.uleb128 0x11
 2790 0581 42030000 		.4byte	.LASF76
 2791 0585 01       		.byte	0x1
 2792 0586 A203     		.2byte	0x3a2
 2793 0588 97000000 		.4byte	0x97
 2794 058c 02       		.uleb128 0x2
 2795 058d 91       		.byte	0x91
 2796 058e 6B       		.sleb128 -21
 2797 058f 12       		.uleb128 0x12
 2798 0590 47030000 		.4byte	.LASF47
 2799 0594 01       		.byte	0x1
ARM GAS  /tmp/ccFIADOf.s 			page 79


 2800 0595 A403     		.2byte	0x3a4
 2801 0597 6D020000 		.4byte	0x26d
 2802 059b 02       		.uleb128 0x2
 2803 059c 91       		.byte	0x91
 2804 059d 77       		.sleb128 -9
 2805 059e 00       		.byte	0
 2806 059f 10       		.uleb128 0x10
 2807 05a0 F2010000 		.4byte	.LASF77
 2808 05a4 01       		.byte	0x1
 2809 05a5 5B03     		.2byte	0x35b
 2810 05a7 6D020000 		.4byte	0x26d
 2811 05ab 9C030000 		.4byte	.LFB75
 2812 05af 5C000000 		.4byte	.LFE75-.LFB75
 2813 05b3 01       		.uleb128 0x1
 2814 05b4 9C       		.byte	0x9c
 2815 05b5 E7050000 		.4byte	0x5e7
 2816 05b9 11       		.uleb128 0x11
 2817 05ba C1000000 		.4byte	.LASF75
 2818 05be 01       		.byte	0x1
 2819 05bf 5B03     		.2byte	0x35b
 2820 05c1 C2000000 		.4byte	0xc2
 2821 05c5 02       		.uleb128 0x2
 2822 05c6 91       		.byte	0x91
 2823 05c7 6C       		.sleb128 -20
 2824 05c8 11       		.uleb128 0x11
 2825 05c9 42030000 		.4byte	.LASF76
 2826 05cd 01       		.byte	0x1
 2827 05ce 5B03     		.2byte	0x35b
 2828 05d0 A2000000 		.4byte	0xa2
 2829 05d4 02       		.uleb128 0x2
 2830 05d5 91       		.byte	0x91
 2831 05d6 6A       		.sleb128 -22
 2832 05d7 12       		.uleb128 0x12
 2833 05d8 47030000 		.4byte	.LASF47
 2834 05dc 01       		.byte	0x1
 2835 05dd 5D03     		.2byte	0x35d
 2836 05df 6D020000 		.4byte	0x26d
 2837 05e3 02       		.uleb128 0x2
 2838 05e4 91       		.byte	0x91
 2839 05e5 77       		.sleb128 -9
 2840 05e6 00       		.byte	0
 2841 05e7 10       		.uleb128 0x10
 2842 05e8 22050000 		.4byte	.LASF78
 2843 05ec 01       		.byte	0x1
 2844 05ed AA02     		.2byte	0x2aa
 2845 05ef 6D020000 		.4byte	0x26d
 2846 05f3 08030000 		.4byte	.LFB74
 2847 05f7 94000000 		.4byte	.LFE74-.LFB74
 2848 05fb 01       		.uleb128 0x1
 2849 05fc 9C       		.byte	0x9c
 2850 05fd 3E060000 		.4byte	0x63e
 2851 0601 11       		.uleb128 0x11
 2852 0602 C1000000 		.4byte	.LASF75
 2853 0606 01       		.byte	0x1
 2854 0607 AA02     		.2byte	0x2aa
 2855 0609 C2000000 		.4byte	0xc2
 2856 060d 02       		.uleb128 0x2
ARM GAS  /tmp/ccFIADOf.s 			page 80


 2857 060e 91       		.byte	0x91
 2858 060f 6C       		.sleb128 -20
 2859 0610 11       		.uleb128 0x11
 2860 0611 42030000 		.4byte	.LASF76
 2861 0615 01       		.byte	0x1
 2862 0616 AA02     		.2byte	0x2aa
 2863 0618 C2000000 		.4byte	0xc2
 2864 061c 02       		.uleb128 0x2
 2865 061d 91       		.byte	0x91
 2866 061e 68       		.sleb128 -24
 2867 061f 12       		.uleb128 0x12
 2868 0620 47030000 		.4byte	.LASF47
 2869 0624 01       		.byte	0x1
 2870 0625 AC02     		.2byte	0x2ac
 2871 0627 6D020000 		.4byte	0x26d
 2872 062b 02       		.uleb128 0x2
 2873 062c 91       		.byte	0x91
 2874 062d 77       		.sleb128 -9
 2875 062e 16       		.uleb128 0x16
 2876 062f 746D7000 		.ascii	"tmp\000"
 2877 0633 01       		.byte	0x1
 2878 0634 AD02     		.2byte	0x2ad
 2879 0636 CD000000 		.4byte	0xcd
 2880 063a 02       		.uleb128 0x2
 2881 063b 91       		.byte	0x91
 2882 063c 70       		.sleb128 -16
 2883 063d 00       		.byte	0
 2884 063e 10       		.uleb128 0x10
 2885 063f 3F000000 		.4byte	.LASF79
 2886 0643 01       		.byte	0x1
 2887 0644 6902     		.2byte	0x269
 2888 0646 6D020000 		.4byte	0x26d
 2889 064a 34020000 		.4byte	.LFB73
 2890 064e D4000000 		.4byte	.LFE73-.LFB73
 2891 0652 01       		.uleb128 0x1
 2892 0653 9C       		.byte	0x9c
 2893 0654 77060000 		.4byte	0x677
 2894 0658 12       		.uleb128 0x12
 2895 0659 3A010000 		.4byte	.LASF80
 2896 065d 01       		.byte	0x1
 2897 065e 6B02     		.2byte	0x26b
 2898 0660 A2000000 		.4byte	0xa2
 2899 0664 02       		.uleb128 0x2
 2900 0665 91       		.byte	0x91
 2901 0666 76       		.sleb128 -10
 2902 0667 12       		.uleb128 0x12
 2903 0668 47030000 		.4byte	.LASF47
 2904 066c 01       		.byte	0x1
 2905 066d 6D02     		.2byte	0x26d
 2906 066f 6D020000 		.4byte	0x26d
 2907 0673 02       		.uleb128 0x2
 2908 0674 91       		.byte	0x91
 2909 0675 75       		.sleb128 -11
 2910 0676 00       		.byte	0
 2911 0677 10       		.uleb128 0x10
 2912 0678 41010000 		.4byte	.LASF81
 2913 067c 01       		.byte	0x1
ARM GAS  /tmp/ccFIADOf.s 			page 81


 2914 067d 2C02     		.2byte	0x22c
 2915 067f 6D020000 		.4byte	0x26d
 2916 0683 D8010000 		.4byte	.LFB72
 2917 0687 5C000000 		.4byte	.LFE72-.LFB72
 2918 068b 01       		.uleb128 0x1
 2919 068c 9C       		.byte	0x9c
 2920 068d A1060000 		.4byte	0x6a1
 2921 0691 12       		.uleb128 0x12
 2922 0692 47030000 		.4byte	.LASF47
 2923 0696 01       		.byte	0x1
 2924 0697 2E02     		.2byte	0x22e
 2925 0699 6D020000 		.4byte	0x26d
 2926 069d 02       		.uleb128 0x2
 2927 069e 91       		.byte	0x91
 2928 069f 77       		.sleb128 -9
 2929 06a0 00       		.byte	0
 2930 06a1 10       		.uleb128 0x10
 2931 06a2 11010000 		.4byte	.LASF82
 2932 06a6 01       		.byte	0x1
 2933 06a7 ED01     		.2byte	0x1ed
 2934 06a9 6D020000 		.4byte	0x26d
 2935 06ad 7C010000 		.4byte	.LFB71
 2936 06b1 5C000000 		.4byte	.LFE71-.LFB71
 2937 06b5 01       		.uleb128 0x1
 2938 06b6 9C       		.byte	0x9c
 2939 06b7 CB060000 		.4byte	0x6cb
 2940 06bb 12       		.uleb128 0x12
 2941 06bc 47030000 		.4byte	.LASF47
 2942 06c0 01       		.byte	0x1
 2943 06c1 EF01     		.2byte	0x1ef
 2944 06c3 6D020000 		.4byte	0x26d
 2945 06c7 02       		.uleb128 0x2
 2946 06c8 91       		.byte	0x91
 2947 06c9 77       		.sleb128 -9
 2948 06ca 00       		.byte	0
 2949 06cb 10       		.uleb128 0x10
 2950 06cc E5040000 		.4byte	.LASF83
 2951 06d0 01       		.byte	0x1
 2952 06d1 A401     		.2byte	0x1a4
 2953 06d3 6D020000 		.4byte	0x26d
 2954 06d7 18010000 		.4byte	.LFB70
 2955 06db 64000000 		.4byte	.LFE70-.LFB70
 2956 06df 01       		.uleb128 0x1
 2957 06e0 9C       		.byte	0x9c
 2958 06e1 04070000 		.4byte	0x704
 2959 06e5 11       		.uleb128 0x11
 2960 06e6 4B020000 		.4byte	.LASF84
 2961 06ea 01       		.byte	0x1
 2962 06eb A401     		.2byte	0x1a4
 2963 06ed C2000000 		.4byte	0xc2
 2964 06f1 02       		.uleb128 0x2
 2965 06f2 91       		.byte	0x91
 2966 06f3 6C       		.sleb128 -20
 2967 06f4 12       		.uleb128 0x12
 2968 06f5 47030000 		.4byte	.LASF47
 2969 06f9 01       		.byte	0x1
 2970 06fa A601     		.2byte	0x1a6
ARM GAS  /tmp/ccFIADOf.s 			page 82


 2971 06fc 6D020000 		.4byte	0x26d
 2972 0700 02       		.uleb128 0x2
 2973 0701 91       		.byte	0x91
 2974 0702 77       		.sleb128 -9
 2975 0703 00       		.byte	0
 2976 0704 17       		.uleb128 0x17
 2977 0705 8A030000 		.4byte	.LASF85
 2978 0709 01       		.byte	0x1
 2979 070a 8901     		.2byte	0x189
 2980 070c FC000000 		.4byte	.LFB69
 2981 0710 1C000000 		.4byte	.LFE69-.LFB69
 2982 0714 01       		.uleb128 0x1
 2983 0715 9C       		.byte	0x9c
 2984 0716 17       		.uleb128 0x17
 2985 0717 67020000 		.4byte	.LASF86
 2986 071b 01       		.byte	0x1
 2987 071c 7501     		.2byte	0x175
 2988 071e E0000000 		.4byte	.LFB68
 2989 0722 1C000000 		.4byte	.LFE68-.LFB68
 2990 0726 01       		.uleb128 0x1
 2991 0727 9C       		.byte	0x9c
 2992 0728 17       		.uleb128 0x17
 2993 0729 7F010000 		.4byte	.LASF87
 2994 072d 01       		.byte	0x1
 2995 072e 5501     		.2byte	0x155
 2996 0730 BC000000 		.4byte	.LFB67
 2997 0734 24000000 		.4byte	.LFE67-.LFB67
 2998 0738 01       		.uleb128 0x1
 2999 0739 9C       		.byte	0x9c
 3000 073a 17       		.uleb128 0x17
 3001 073b EE000000 		.4byte	.LASF88
 3002 073f 01       		.byte	0x1
 3003 0740 4001     		.2byte	0x140
 3004 0742 98000000 		.4byte	.LFB66
 3005 0746 24000000 		.4byte	.LFE66-.LFB66
 3006 074a 01       		.uleb128 0x1
 3007 074b 9C       		.byte	0x9c
 3008 074c 14       		.uleb128 0x14
 3009 074d 72020000 		.4byte	.LASF89
 3010 0751 01       		.byte	0x1
 3011 0752 2D01     		.2byte	0x12d
 3012 0754 68000000 		.4byte	.LFB65
 3013 0758 30000000 		.4byte	.LFE65-.LFB65
 3014 075c 01       		.uleb128 0x1
 3015 075d 9C       		.byte	0x9c
 3016 075e 72070000 		.4byte	0x772
 3017 0762 11       		.uleb128 0x11
 3018 0763 73050000 		.4byte	.LASF90
 3019 0767 01       		.byte	0x1
 3020 0768 2D01     		.2byte	0x12d
 3021 076a C2000000 		.4byte	0xc2
 3022 076e 02       		.uleb128 0x2
 3023 076f 91       		.byte	0x91
 3024 0770 74       		.sleb128 -12
 3025 0771 00       		.byte	0
 3026 0772 14       		.uleb128 0x14
 3027 0773 28040000 		.4byte	.LASF91
ARM GAS  /tmp/ccFIADOf.s 			page 83


 3028 0777 01       		.byte	0x1
 3029 0778 1A01     		.2byte	0x11a
 3030 077a 38000000 		.4byte	.LFB64
 3031 077e 30000000 		.4byte	.LFE64-.LFB64
 3032 0782 01       		.uleb128 0x1
 3033 0783 9C       		.byte	0x9c
 3034 0784 98070000 		.4byte	0x798
 3035 0788 11       		.uleb128 0x11
 3036 0789 FB000000 		.4byte	.LASF92
 3037 078d 01       		.byte	0x1
 3038 078e 1A01     		.2byte	0x11a
 3039 0790 C2000000 		.4byte	0xc2
 3040 0794 02       		.uleb128 0x2
 3041 0795 91       		.byte	0x91
 3042 0796 74       		.sleb128 -12
 3043 0797 00       		.byte	0
 3044 0798 18       		.uleb128 0x18
 3045 0799 17040000 		.4byte	.LASF98
 3046 079d 01       		.byte	0x1
 3047 079e FF       		.byte	0xff
 3048 079f 00000000 		.4byte	.LFB63
 3049 07a3 38000000 		.4byte	.LFE63-.LFB63
 3050 07a7 01       		.uleb128 0x1
 3051 07a8 9C       		.byte	0x9c
 3052 07a9 19       		.uleb128 0x19
 3053 07aa 09040000 		.4byte	.LASF93
 3054 07ae 01       		.byte	0x1
 3055 07af FF       		.byte	0xff
 3056 07b0 C2000000 		.4byte	0xc2
 3057 07b4 02       		.uleb128 0x2
 3058 07b5 91       		.byte	0x91
 3059 07b6 6C       		.sleb128 -20
 3060 07b7 12       		.uleb128 0x12
 3061 07b8 66000000 		.4byte	.LASF94
 3062 07bc 01       		.byte	0x1
 3063 07bd 0101     		.2byte	0x101
 3064 07bf C2000000 		.4byte	0xc2
 3065 07c3 02       		.uleb128 0x2
 3066 07c4 91       		.byte	0x91
 3067 07c5 74       		.sleb128 -12
 3068 07c6 00       		.byte	0
 3069 07c7 00       		.byte	0
 3070              		.section	.debug_abbrev,"",%progbits
 3071              	.Ldebug_abbrev0:
 3072 0000 01       		.uleb128 0x1
 3073 0001 11       		.uleb128 0x11
 3074 0002 01       		.byte	0x1
 3075 0003 25       		.uleb128 0x25
 3076 0004 0E       		.uleb128 0xe
 3077 0005 13       		.uleb128 0x13
 3078 0006 0B       		.uleb128 0xb
 3079 0007 03       		.uleb128 0x3
 3080 0008 0E       		.uleb128 0xe
 3081 0009 1B       		.uleb128 0x1b
 3082 000a 0E       		.uleb128 0xe
 3083 000b 11       		.uleb128 0x11
 3084 000c 01       		.uleb128 0x1
ARM GAS  /tmp/ccFIADOf.s 			page 84


 3085 000d 12       		.uleb128 0x12
 3086 000e 06       		.uleb128 0x6
 3087 000f 10       		.uleb128 0x10
 3088 0010 17       		.uleb128 0x17
 3089 0011 00       		.byte	0
 3090 0012 00       		.byte	0
 3091 0013 02       		.uleb128 0x2
 3092 0014 24       		.uleb128 0x24
 3093 0015 00       		.byte	0
 3094 0016 0B       		.uleb128 0xb
 3095 0017 0B       		.uleb128 0xb
 3096 0018 3E       		.uleb128 0x3e
 3097 0019 0B       		.uleb128 0xb
 3098 001a 03       		.uleb128 0x3
 3099 001b 0E       		.uleb128 0xe
 3100 001c 00       		.byte	0
 3101 001d 00       		.byte	0
 3102 001e 03       		.uleb128 0x3
 3103 001f 16       		.uleb128 0x16
 3104 0020 00       		.byte	0
 3105 0021 03       		.uleb128 0x3
 3106 0022 0E       		.uleb128 0xe
 3107 0023 3A       		.uleb128 0x3a
 3108 0024 0B       		.uleb128 0xb
 3109 0025 3B       		.uleb128 0x3b
 3110 0026 0B       		.uleb128 0xb
 3111 0027 49       		.uleb128 0x49
 3112 0028 13       		.uleb128 0x13
 3113 0029 00       		.byte	0
 3114 002a 00       		.byte	0
 3115 002b 04       		.uleb128 0x4
 3116 002c 24       		.uleb128 0x24
 3117 002d 00       		.byte	0
 3118 002e 0B       		.uleb128 0xb
 3119 002f 0B       		.uleb128 0xb
 3120 0030 3E       		.uleb128 0x3e
 3121 0031 0B       		.uleb128 0xb
 3122 0032 03       		.uleb128 0x3
 3123 0033 08       		.uleb128 0x8
 3124 0034 00       		.byte	0
 3125 0035 00       		.byte	0
 3126 0036 05       		.uleb128 0x5
 3127 0037 35       		.uleb128 0x35
 3128 0038 00       		.byte	0
 3129 0039 49       		.uleb128 0x49
 3130 003a 13       		.uleb128 0x13
 3131 003b 00       		.byte	0
 3132 003c 00       		.byte	0
 3133 003d 06       		.uleb128 0x6
 3134 003e 34       		.uleb128 0x34
 3135 003f 00       		.byte	0
 3136 0040 03       		.uleb128 0x3
 3137 0041 0E       		.uleb128 0xe
 3138 0042 3A       		.uleb128 0x3a
 3139 0043 0B       		.uleb128 0xb
 3140 0044 3B       		.uleb128 0x3b
 3141 0045 05       		.uleb128 0x5
ARM GAS  /tmp/ccFIADOf.s 			page 85


 3142 0046 49       		.uleb128 0x49
 3143 0047 13       		.uleb128 0x13
 3144 0048 3F       		.uleb128 0x3f
 3145 0049 19       		.uleb128 0x19
 3146 004a 3C       		.uleb128 0x3c
 3147 004b 19       		.uleb128 0x19
 3148 004c 00       		.byte	0
 3149 004d 00       		.byte	0
 3150 004e 07       		.uleb128 0x7
 3151 004f 34       		.uleb128 0x34
 3152 0050 00       		.byte	0
 3153 0051 03       		.uleb128 0x3
 3154 0052 0E       		.uleb128 0xe
 3155 0053 3A       		.uleb128 0x3a
 3156 0054 0B       		.uleb128 0xb
 3157 0055 3B       		.uleb128 0x3b
 3158 0056 0B       		.uleb128 0xb
 3159 0057 49       		.uleb128 0x49
 3160 0058 13       		.uleb128 0x13
 3161 0059 3F       		.uleb128 0x3f
 3162 005a 19       		.uleb128 0x19
 3163 005b 3C       		.uleb128 0x3c
 3164 005c 19       		.uleb128 0x19
 3165 005d 00       		.byte	0
 3166 005e 00       		.byte	0
 3167 005f 08       		.uleb128 0x8
 3168 0060 04       		.uleb128 0x4
 3169 0061 01       		.byte	0x1
 3170 0062 0B       		.uleb128 0xb
 3171 0063 0B       		.uleb128 0xb
 3172 0064 49       		.uleb128 0x49
 3173 0065 13       		.uleb128 0x13
 3174 0066 3A       		.uleb128 0x3a
 3175 0067 0B       		.uleb128 0xb
 3176 0068 3B       		.uleb128 0x3b
 3177 0069 05       		.uleb128 0x5
 3178 006a 01       		.uleb128 0x1
 3179 006b 13       		.uleb128 0x13
 3180 006c 00       		.byte	0
 3181 006d 00       		.byte	0
 3182 006e 09       		.uleb128 0x9
 3183 006f 28       		.uleb128 0x28
 3184 0070 00       		.byte	0
 3185 0071 03       		.uleb128 0x3
 3186 0072 0E       		.uleb128 0xe
 3187 0073 1C       		.uleb128 0x1c
 3188 0074 0B       		.uleb128 0xb
 3189 0075 00       		.byte	0
 3190 0076 00       		.byte	0
 3191 0077 0A       		.uleb128 0xa
 3192 0078 28       		.uleb128 0x28
 3193 0079 00       		.byte	0
 3194 007a 03       		.uleb128 0x3
 3195 007b 08       		.uleb128 0x8
 3196 007c 1C       		.uleb128 0x1c
 3197 007d 0B       		.uleb128 0xb
 3198 007e 00       		.byte	0
ARM GAS  /tmp/ccFIADOf.s 			page 86


 3199 007f 00       		.byte	0
 3200 0080 0B       		.uleb128 0xb
 3201 0081 16       		.uleb128 0x16
 3202 0082 00       		.byte	0
 3203 0083 03       		.uleb128 0x3
 3204 0084 0E       		.uleb128 0xe
 3205 0085 3A       		.uleb128 0x3a
 3206 0086 0B       		.uleb128 0xb
 3207 0087 3B       		.uleb128 0x3b
 3208 0088 05       		.uleb128 0x5
 3209 0089 49       		.uleb128 0x49
 3210 008a 13       		.uleb128 0x13
 3211 008b 00       		.byte	0
 3212 008c 00       		.byte	0
 3213 008d 0C       		.uleb128 0xc
 3214 008e 13       		.uleb128 0x13
 3215 008f 01       		.byte	0x1
 3216 0090 0B       		.uleb128 0xb
 3217 0091 0B       		.uleb128 0xb
 3218 0092 3A       		.uleb128 0x3a
 3219 0093 0B       		.uleb128 0xb
 3220 0094 3B       		.uleb128 0x3b
 3221 0095 05       		.uleb128 0x5
 3222 0096 01       		.uleb128 0x1
 3223 0097 13       		.uleb128 0x13
 3224 0098 00       		.byte	0
 3225 0099 00       		.byte	0
 3226 009a 0D       		.uleb128 0xd
 3227 009b 0D       		.uleb128 0xd
 3228 009c 00       		.byte	0
 3229 009d 03       		.uleb128 0x3
 3230 009e 08       		.uleb128 0x8
 3231 009f 3A       		.uleb128 0x3a
 3232 00a0 0B       		.uleb128 0xb
 3233 00a1 3B       		.uleb128 0x3b
 3234 00a2 05       		.uleb128 0x5
 3235 00a3 49       		.uleb128 0x49
 3236 00a4 13       		.uleb128 0x13
 3237 00a5 38       		.uleb128 0x38
 3238 00a6 0B       		.uleb128 0xb
 3239 00a7 00       		.byte	0
 3240 00a8 00       		.byte	0
 3241 00a9 0E       		.uleb128 0xe
 3242 00aa 0D       		.uleb128 0xd
 3243 00ab 00       		.byte	0
 3244 00ac 03       		.uleb128 0x3
 3245 00ad 0E       		.uleb128 0xe
 3246 00ae 3A       		.uleb128 0x3a
 3247 00af 0B       		.uleb128 0xb
 3248 00b0 3B       		.uleb128 0x3b
 3249 00b1 05       		.uleb128 0x5
 3250 00b2 49       		.uleb128 0x49
 3251 00b3 13       		.uleb128 0x13
 3252 00b4 38       		.uleb128 0x38
 3253 00b5 0B       		.uleb128 0xb
 3254 00b6 00       		.byte	0
 3255 00b7 00       		.byte	0
ARM GAS  /tmp/ccFIADOf.s 			page 87


 3256 00b8 0F       		.uleb128 0xf
 3257 00b9 04       		.uleb128 0x4
 3258 00ba 01       		.byte	0x1
 3259 00bb 0B       		.uleb128 0xb
 3260 00bc 0B       		.uleb128 0xb
 3261 00bd 49       		.uleb128 0x49
 3262 00be 13       		.uleb128 0x13
 3263 00bf 3A       		.uleb128 0x3a
 3264 00c0 0B       		.uleb128 0xb
 3265 00c1 3B       		.uleb128 0x3b
 3266 00c2 0B       		.uleb128 0xb
 3267 00c3 01       		.uleb128 0x1
 3268 00c4 13       		.uleb128 0x13
 3269 00c5 00       		.byte	0
 3270 00c6 00       		.byte	0
 3271 00c7 10       		.uleb128 0x10
 3272 00c8 2E       		.uleb128 0x2e
 3273 00c9 01       		.byte	0x1
 3274 00ca 3F       		.uleb128 0x3f
 3275 00cb 19       		.uleb128 0x19
 3276 00cc 03       		.uleb128 0x3
 3277 00cd 0E       		.uleb128 0xe
 3278 00ce 3A       		.uleb128 0x3a
 3279 00cf 0B       		.uleb128 0xb
 3280 00d0 3B       		.uleb128 0x3b
 3281 00d1 05       		.uleb128 0x5
 3282 00d2 27       		.uleb128 0x27
 3283 00d3 19       		.uleb128 0x19
 3284 00d4 49       		.uleb128 0x49
 3285 00d5 13       		.uleb128 0x13
 3286 00d6 11       		.uleb128 0x11
 3287 00d7 01       		.uleb128 0x1
 3288 00d8 12       		.uleb128 0x12
 3289 00d9 06       		.uleb128 0x6
 3290 00da 40       		.uleb128 0x40
 3291 00db 18       		.uleb128 0x18
 3292 00dc 9642     		.uleb128 0x2116
 3293 00de 19       		.uleb128 0x19
 3294 00df 01       		.uleb128 0x1
 3295 00e0 13       		.uleb128 0x13
 3296 00e1 00       		.byte	0
 3297 00e2 00       		.byte	0
 3298 00e3 11       		.uleb128 0x11
 3299 00e4 05       		.uleb128 0x5
 3300 00e5 00       		.byte	0
 3301 00e6 03       		.uleb128 0x3
 3302 00e7 0E       		.uleb128 0xe
 3303 00e8 3A       		.uleb128 0x3a
 3304 00e9 0B       		.uleb128 0xb
 3305 00ea 3B       		.uleb128 0x3b
 3306 00eb 05       		.uleb128 0x5
 3307 00ec 49       		.uleb128 0x49
 3308 00ed 13       		.uleb128 0x13
 3309 00ee 02       		.uleb128 0x2
 3310 00ef 18       		.uleb128 0x18
 3311 00f0 00       		.byte	0
 3312 00f1 00       		.byte	0
ARM GAS  /tmp/ccFIADOf.s 			page 88


 3313 00f2 12       		.uleb128 0x12
 3314 00f3 34       		.uleb128 0x34
 3315 00f4 00       		.byte	0
 3316 00f5 03       		.uleb128 0x3
 3317 00f6 0E       		.uleb128 0xe
 3318 00f7 3A       		.uleb128 0x3a
 3319 00f8 0B       		.uleb128 0xb
 3320 00f9 3B       		.uleb128 0x3b
 3321 00fa 05       		.uleb128 0x5
 3322 00fb 49       		.uleb128 0x49
 3323 00fc 13       		.uleb128 0x13
 3324 00fd 02       		.uleb128 0x2
 3325 00fe 18       		.uleb128 0x18
 3326 00ff 00       		.byte	0
 3327 0100 00       		.byte	0
 3328 0101 13       		.uleb128 0x13
 3329 0102 2E       		.uleb128 0x2e
 3330 0103 01       		.byte	0x1
 3331 0104 3F       		.uleb128 0x3f
 3332 0105 19       		.uleb128 0x19
 3333 0106 03       		.uleb128 0x3
 3334 0107 0E       		.uleb128 0xe
 3335 0108 3A       		.uleb128 0x3a
 3336 0109 0B       		.uleb128 0xb
 3337 010a 3B       		.uleb128 0x3b
 3338 010b 05       		.uleb128 0x5
 3339 010c 27       		.uleb128 0x27
 3340 010d 19       		.uleb128 0x19
 3341 010e 49       		.uleb128 0x49
 3342 010f 13       		.uleb128 0x13
 3343 0110 11       		.uleb128 0x11
 3344 0111 01       		.uleb128 0x1
 3345 0112 12       		.uleb128 0x12
 3346 0113 06       		.uleb128 0x6
 3347 0114 40       		.uleb128 0x40
 3348 0115 18       		.uleb128 0x18
 3349 0116 9742     		.uleb128 0x2117
 3350 0118 19       		.uleb128 0x19
 3351 0119 01       		.uleb128 0x1
 3352 011a 13       		.uleb128 0x13
 3353 011b 00       		.byte	0
 3354 011c 00       		.byte	0
 3355 011d 14       		.uleb128 0x14
 3356 011e 2E       		.uleb128 0x2e
 3357 011f 01       		.byte	0x1
 3358 0120 3F       		.uleb128 0x3f
 3359 0121 19       		.uleb128 0x19
 3360 0122 03       		.uleb128 0x3
 3361 0123 0E       		.uleb128 0xe
 3362 0124 3A       		.uleb128 0x3a
 3363 0125 0B       		.uleb128 0xb
 3364 0126 3B       		.uleb128 0x3b
 3365 0127 05       		.uleb128 0x5
 3366 0128 27       		.uleb128 0x27
 3367 0129 19       		.uleb128 0x19
 3368 012a 11       		.uleb128 0x11
 3369 012b 01       		.uleb128 0x1
ARM GAS  /tmp/ccFIADOf.s 			page 89


 3370 012c 12       		.uleb128 0x12
 3371 012d 06       		.uleb128 0x6
 3372 012e 40       		.uleb128 0x40
 3373 012f 18       		.uleb128 0x18
 3374 0130 9742     		.uleb128 0x2117
 3375 0132 19       		.uleb128 0x19
 3376 0133 01       		.uleb128 0x1
 3377 0134 13       		.uleb128 0x13
 3378 0135 00       		.byte	0
 3379 0136 00       		.byte	0
 3380 0137 15       		.uleb128 0x15
 3381 0138 2E       		.uleb128 0x2e
 3382 0139 00       		.byte	0
 3383 013a 3F       		.uleb128 0x3f
 3384 013b 19       		.uleb128 0x19
 3385 013c 03       		.uleb128 0x3
 3386 013d 0E       		.uleb128 0xe
 3387 013e 3A       		.uleb128 0x3a
 3388 013f 0B       		.uleb128 0xb
 3389 0140 3B       		.uleb128 0x3b
 3390 0141 05       		.uleb128 0x5
 3391 0142 27       		.uleb128 0x27
 3392 0143 19       		.uleb128 0x19
 3393 0144 49       		.uleb128 0x49
 3394 0145 13       		.uleb128 0x13
 3395 0146 11       		.uleb128 0x11
 3396 0147 01       		.uleb128 0x1
 3397 0148 12       		.uleb128 0x12
 3398 0149 06       		.uleb128 0x6
 3399 014a 40       		.uleb128 0x40
 3400 014b 18       		.uleb128 0x18
 3401 014c 9742     		.uleb128 0x2117
 3402 014e 19       		.uleb128 0x19
 3403 014f 00       		.byte	0
 3404 0150 00       		.byte	0
 3405 0151 16       		.uleb128 0x16
 3406 0152 34       		.uleb128 0x34
 3407 0153 00       		.byte	0
 3408 0154 03       		.uleb128 0x3
 3409 0155 08       		.uleb128 0x8
 3410 0156 3A       		.uleb128 0x3a
 3411 0157 0B       		.uleb128 0xb
 3412 0158 3B       		.uleb128 0x3b
 3413 0159 05       		.uleb128 0x5
 3414 015a 49       		.uleb128 0x49
 3415 015b 13       		.uleb128 0x13
 3416 015c 02       		.uleb128 0x2
 3417 015d 18       		.uleb128 0x18
 3418 015e 00       		.byte	0
 3419 015f 00       		.byte	0
 3420 0160 17       		.uleb128 0x17
 3421 0161 2E       		.uleb128 0x2e
 3422 0162 00       		.byte	0
 3423 0163 3F       		.uleb128 0x3f
 3424 0164 19       		.uleb128 0x19
 3425 0165 03       		.uleb128 0x3
 3426 0166 0E       		.uleb128 0xe
ARM GAS  /tmp/ccFIADOf.s 			page 90


 3427 0167 3A       		.uleb128 0x3a
 3428 0168 0B       		.uleb128 0xb
 3429 0169 3B       		.uleb128 0x3b
 3430 016a 05       		.uleb128 0x5
 3431 016b 27       		.uleb128 0x27
 3432 016c 19       		.uleb128 0x19
 3433 016d 11       		.uleb128 0x11
 3434 016e 01       		.uleb128 0x1
 3435 016f 12       		.uleb128 0x12
 3436 0170 06       		.uleb128 0x6
 3437 0171 40       		.uleb128 0x40
 3438 0172 18       		.uleb128 0x18
 3439 0173 9742     		.uleb128 0x2117
 3440 0175 19       		.uleb128 0x19
 3441 0176 00       		.byte	0
 3442 0177 00       		.byte	0
 3443 0178 18       		.uleb128 0x18
 3444 0179 2E       		.uleb128 0x2e
 3445 017a 01       		.byte	0x1
 3446 017b 3F       		.uleb128 0x3f
 3447 017c 19       		.uleb128 0x19
 3448 017d 03       		.uleb128 0x3
 3449 017e 0E       		.uleb128 0xe
 3450 017f 3A       		.uleb128 0x3a
 3451 0180 0B       		.uleb128 0xb
 3452 0181 3B       		.uleb128 0x3b
 3453 0182 0B       		.uleb128 0xb
 3454 0183 27       		.uleb128 0x27
 3455 0184 19       		.uleb128 0x19
 3456 0185 11       		.uleb128 0x11
 3457 0186 01       		.uleb128 0x1
 3458 0187 12       		.uleb128 0x12
 3459 0188 06       		.uleb128 0x6
 3460 0189 40       		.uleb128 0x40
 3461 018a 18       		.uleb128 0x18
 3462 018b 9742     		.uleb128 0x2117
 3463 018d 19       		.uleb128 0x19
 3464 018e 00       		.byte	0
 3465 018f 00       		.byte	0
 3466 0190 19       		.uleb128 0x19
 3467 0191 05       		.uleb128 0x5
 3468 0192 00       		.byte	0
 3469 0193 03       		.uleb128 0x3
 3470 0194 0E       		.uleb128 0xe
 3471 0195 3A       		.uleb128 0x3a
 3472 0196 0B       		.uleb128 0xb
 3473 0197 3B       		.uleb128 0x3b
 3474 0198 0B       		.uleb128 0xb
 3475 0199 49       		.uleb128 0x49
 3476 019a 13       		.uleb128 0x13
 3477 019b 02       		.uleb128 0x2
 3478 019c 18       		.uleb128 0x18
 3479 019d 00       		.byte	0
 3480 019e 00       		.byte	0
 3481 019f 00       		.byte	0
 3482              		.section	.debug_aranges,"",%progbits
 3483 0000 1C000000 		.4byte	0x1c
ARM GAS  /tmp/ccFIADOf.s 			page 91


 3484 0004 0200     		.2byte	0x2
 3485 0006 00000000 		.4byte	.Ldebug_info0
 3486 000a 04       		.byte	0x4
 3487 000b 00       		.byte	0
 3488 000c 0000     		.2byte	0
 3489 000e 0000     		.2byte	0
 3490 0010 00000000 		.4byte	.Ltext0
 3491 0014 54090000 		.4byte	.Letext0-.Ltext0
 3492 0018 00000000 		.4byte	0
 3493 001c 00000000 		.4byte	0
 3494              		.section	.debug_line,"",%progbits
 3495              	.Ldebug_line0:
 3496 0000 6E020000 		.section	.debug_str,"MS",%progbits,1
 3496      0200E200 
 3496      00000201 
 3496      FB0E0D00 
 3496      01010101 
 3497              	.LASF65:
 3498 0000 4F425F53 		.ascii	"OB_STOP\000"
 3498      544F5000 
 3499              	.LASF48:
 3500 0008 464C4153 		.ascii	"FLASH_GetBank1Status\000"
 3500      485F4765 
 3500      7442616E 
 3500      6B315374 
 3500      61747573 
 3501              	.LASF64:
 3502 001d 4F425F49 		.ascii	"OB_IWDG\000"
 3502      57444700 
 3503              	.LASF19:
 3504 0025 53797374 		.ascii	"SystemCoreClock\000"
 3504      656D436F 
 3504      7265436C 
 3504      6F636B00 
 3505              	.LASF72:
 3506 0035 57525032 		.ascii	"WRP2_Data\000"
 3506      5F446174 
 3506      6100
 3507              	.LASF79:
 3508 003f 464C4153 		.ascii	"FLASH_EraseOptionBytes\000"
 3508      485F4572 
 3508      6173654F 
 3508      7074696F 
 3508      6E427974 
 3509              	.LASF40:
 3510 0056 464C4153 		.ascii	"FLASH_ERROR_WRP\000"
 3510      485F4552 
 3510      524F525F 
 3510      57525000 
 3511              	.LASF94:
 3512 0066 746D7072 		.ascii	"tmpreg\000"
 3512      656700
 3513              	.LASF37:
 3514 006d 4F425F54 		.ascii	"OB_TypeDef\000"
 3514      79706544 
 3514      656600
 3515              	.LASF17:
ARM GAS  /tmp/ccFIADOf.s 			page 92


 3516 0078 73697A65 		.ascii	"sizetype\000"
 3516      74797065 
 3516      00
 3517              	.LASF55:
 3518 0081 464C4153 		.ascii	"FLASH_ITConfig\000"
 3518      485F4954 
 3518      436F6E66 
 3518      696700
 3519              	.LASF56:
 3520 0090 464C4153 		.ascii	"FLASH_IT\000"
 3520      485F4954 
 3520      00
 3521              	.LASF71:
 3522 0099 57525031 		.ascii	"WRP1_Data\000"
 3522      5F446174 
 3522      6100
 3523              	.LASF58:
 3524 00a3 464C4153 		.ascii	"FLASH_GetPrefetchBufferStatus\000"
 3524      485F4765 
 3524      74507265 
 3524      66657463 
 3524      68427566 
 3525              	.LASF75:
 3526 00c1 41646472 		.ascii	"Address\000"
 3526      65737300 
 3527              	.LASF21:
 3528 00c9 466C6167 		.ascii	"FlagStatus\000"
 3528      53746174 
 3528      757300
 3529              	.LASF4:
 3530 00d4 5F5F7569 		.ascii	"__uint16_t\000"
 3530      6E743136 
 3530      5F7400
 3531              	.LASF2:
 3532 00df 73686F72 		.ascii	"short int\000"
 3532      7420696E 
 3532      7400
 3533              	.LASF25:
 3534 00e9 4B455952 		.ascii	"KEYR\000"
 3534      00
 3535              	.LASF88:
 3536 00ee 464C4153 		.ascii	"FLASH_Unlock\000"
 3536      485F556E 
 3536      6C6F636B 
 3536      00
 3537              	.LASF92:
 3538 00fb 464C4153 		.ascii	"FLASH_HalfCycleAccess\000"
 3538      485F4861 
 3538      6C664379 
 3538      636C6541 
 3538      63636573 
 3539              	.LASF82:
 3540 0111 464C4153 		.ascii	"FLASH_EraseAllPages\000"
 3540      485F4572 
 3540      61736541 
 3540      6C6C5061 
 3540      67657300 
ARM GAS  /tmp/ccFIADOf.s 			page 93


 3541              	.LASF13:
 3542 0125 75696E74 		.ascii	"uint8_t\000"
 3542      385F7400 
 3543              	.LASF43:
 3544 012d 464C4153 		.ascii	"FLASH_Status\000"
 3544      485F5374 
 3544      61747573 
 3544      00
 3545              	.LASF80:
 3546 013a 72647074 		.ascii	"rdptmp\000"
 3546      6D7000
 3547              	.LASF81:
 3548 0141 464C4153 		.ascii	"FLASH_EraseAllBank1Pages\000"
 3548      485F4572 
 3548      61736541 
 3548      6C6C4261 
 3548      6E6B3150 
 3549              	.LASF57:
 3550 015a 4E657753 		.ascii	"NewState\000"
 3550      74617465 
 3550      00
 3551              	.LASF33:
 3552 0163 57525030 		.ascii	"WRP0\000"
 3552      00
 3553              	.LASF34:
 3554 0168 57525031 		.ascii	"WRP1\000"
 3554      00
 3555              	.LASF35:
 3556 016d 57525032 		.ascii	"WRP2\000"
 3556      00
 3557              	.LASF36:
 3558 0172 57525033 		.ascii	"WRP3\000"
 3558      00
 3559              	.LASF22:
 3560 0177 44495341 		.ascii	"DISABLE\000"
 3560      424C4500 
 3561              	.LASF87:
 3562 017f 464C4153 		.ascii	"FLASH_UnlockBank1\000"
 3562      485F556E 
 3562      6C6F636B 
 3562      42616E6B 
 3562      3100
 3563              	.LASF26:
 3564 0191 4F50544B 		.ascii	"OPTKEYR\000"
 3564      45595200 
 3565              	.LASF10:
 3566 0199 6C6F6E67 		.ascii	"long long int\000"
 3566      206C6F6E 
 3566      6720696E 
 3566      7400
 3567              	.LASF63:
 3568 01a7 464C4153 		.ascii	"FLASH_UserOptionByteConfig\000"
 3568      485F5573 
 3568      65724F70 
 3568      74696F6E 
 3568      42797465 
 3569              	.LASF67:
ARM GAS  /tmp/ccFIADOf.s 			page 94


 3570 01c2 464C4153 		.ascii	"FLASH_ReadOutProtection\000"
 3570      485F5265 
 3570      61644F75 
 3570      7450726F 
 3570      74656374 
 3571              	.LASF7:
 3572 01da 6C6F6E67 		.ascii	"long int\000"
 3572      20696E74 
 3572      00
 3573              	.LASF3:
 3574 01e3 5F5F7569 		.ascii	"__uint8_t\000"
 3574      6E74385F 
 3574      7400
 3575              	.LASF28:
 3576 01ed 57525052 		.ascii	"WRPR\000"
 3576      00
 3577              	.LASF77:
 3578 01f2 464C4153 		.ascii	"FLASH_ProgramHalfWord\000"
 3578      485F5072 
 3578      6F677261 
 3578      6D48616C 
 3578      66576F72 
 3579              	.LASF20:
 3580 0208 52455345 		.ascii	"RESET\000"
 3580      5400
 3581              	.LASF97:
 3582 020e 2F686F6D 		.ascii	"/home/enbin/Documents/code/STM/usart\000"
 3582      652F656E 
 3582      62696E2F 
 3582      446F6375 
 3582      6D656E74 
 3583              	.LASF53:
 3584 0233 62697473 		.ascii	"bitstatus\000"
 3584      74617475 
 3584      7300
 3585              	.LASF1:
 3586 023d 756E7369 		.ascii	"unsigned char\000"
 3586      676E6564 
 3586      20636861 
 3586      7200
 3587              	.LASF84:
 3588 024b 50616765 		.ascii	"Page_Address\000"
 3588      5F416464 
 3588      72657373 
 3588      00
 3589              	.LASF39:
 3590 0258 464C4153 		.ascii	"FLASH_ERROR_PG\000"
 3590      485F4552 
 3590      524F525F 
 3590      504700
 3591              	.LASF86:
 3592 0267 464C4153 		.ascii	"FLASH_Lock\000"
 3592      485F4C6F 
 3592      636B00
 3593              	.LASF89:
 3594 0272 464C4153 		.ascii	"FLASH_PrefetchBufferCmd\000"
 3594      485F5072 
ARM GAS  /tmp/ccFIADOf.s 			page 95


 3594      65666574 
 3594      63684275 
 3594      66666572 
 3595              	.LASF0:
 3596 028a 7369676E 		.ascii	"signed char\000"
 3596      65642063 
 3596      68617200 
 3597              	.LASF52:
 3598 0296 464C4153 		.ascii	"FLASH_GetFlagStatus\000"
 3598      485F4765 
 3598      74466C61 
 3598      67537461 
 3598      74757300 
 3599              	.LASF11:
 3600 02aa 6C6F6E67 		.ascii	"long long unsigned int\000"
 3600      206C6F6E 
 3600      6720756E 
 3600      7369676E 
 3600      65642069 
 3601              	.LASF16:
 3602 02c1 75696E74 		.ascii	"uint32_t\000"
 3602      33325F74 
 3602      00
 3603              	.LASF73:
 3604 02ca 57525033 		.ascii	"WRP3_Data\000"
 3604      5F446174 
 3604      6100
 3605              	.LASF12:
 3606 02d4 756E7369 		.ascii	"unsigned int\000"
 3606      676E6564 
 3606      20696E74 
 3606      00
 3607              	.LASF38:
 3608 02e1 464C4153 		.ascii	"FLASH_BUSY\000"
 3608      485F4255 
 3608      535900
 3609              	.LASF95:
 3610 02ec 474E5520 		.ascii	"GNU C11 6.1.1 20160526 -mthumb -mcpu=cortex-m3 -g -"
 3610      43313120 
 3610      362E312E 
 3610      31203230 
 3610      31363035 
 3611 031f 666E6F2D 		.ascii	"fno-common\000"
 3611      636F6D6D 
 3611      6F6E00
 3612              	.LASF70:
 3613 032a 57525030 		.ascii	"WRP0_Data\000"
 3613      5F446174 
 3613      6100
 3614              	.LASF42:
 3615 0334 464C4153 		.ascii	"FLASH_TIMEOUT\000"
 3615      485F5449 
 3615      4D454F55 
 3615      5400
 3616              	.LASF76:
 3617 0342 44617461 		.ascii	"Data\000"
 3617      00
ARM GAS  /tmp/ccFIADOf.s 			page 96


 3618              	.LASF47:
 3619 0347 73746174 		.ascii	"status\000"
 3619      757300
 3620              	.LASF5:
 3621 034e 73686F72 		.ascii	"short unsigned int\000"
 3621      7420756E 
 3621      7369676E 
 3621      65642069 
 3621      6E7400
 3622              	.LASF46:
 3623 0361 54696D65 		.ascii	"Timeout\000"
 3623      6F757400 
 3624              	.LASF59:
 3625 0369 464C4153 		.ascii	"FLASH_GetReadOutProtectionStatus\000"
 3625      485F4765 
 3625      74526561 
 3625      644F7574 
 3625      50726F74 
 3626              	.LASF85:
 3627 038a 464C4153 		.ascii	"FLASH_LockBank1\000"
 3627      485F4C6F 
 3627      636B4261 
 3627      6E6B3100 
 3628              	.LASF61:
 3629 039a 464C4153 		.ascii	"FLASH_GetWriteProtectionOptionByte\000"
 3629      485F4765 
 3629      74577269 
 3629      74655072 
 3629      6F746563 
 3630              	.LASF14:
 3631 03bd 75696E74 		.ascii	"uint16_t\000"
 3631      31365F74 
 3631      00
 3632              	.LASF41:
 3633 03c6 464C4153 		.ascii	"FLASH_COMPLETE\000"
 3633      485F434F 
 3633      4D504C45 
 3633      544500
 3634              	.LASF15:
 3635 03d5 696E7433 		.ascii	"int32_t\000"
 3635      325F7400 
 3636              	.LASF50:
 3637 03dd 464C4153 		.ascii	"FLASH_GetStatus\000"
 3637      485F4765 
 3637      74537461 
 3637      74757300 
 3638              	.LASF68:
 3639 03ed 464C4153 		.ascii	"FLASH_EnableWriteProtection\000"
 3639      485F456E 
 3639      61626C65 
 3639      57726974 
 3639      6550726F 
 3640              	.LASF93:
 3641 0409 464C4153 		.ascii	"FLASH_Latency\000"
 3641      485F4C61 
 3641      74656E63 
 3641      7900
ARM GAS  /tmp/ccFIADOf.s 			page 97


 3642              	.LASF98:
 3643 0417 464C4153 		.ascii	"FLASH_SetLatency\000"
 3643      485F5365 
 3643      744C6174 
 3643      656E6379 
 3643      00
 3644              	.LASF91:
 3645 0428 464C4153 		.ascii	"FLASH_HalfCycleAccessCmd\000"
 3645      485F4861 
 3645      6C664379 
 3645      636C6541 
 3645      63636573 
 3646              	.LASF74:
 3647 0441 464C4153 		.ascii	"FLASH_ProgramOptionByteData\000"
 3647      485F5072 
 3647      6F677261 
 3647      6D4F7074 
 3647      696F6E42 
 3648              	.LASF62:
 3649 045d 464C4153 		.ascii	"FLASH_GetUserOptionByte\000"
 3649      485F4765 
 3649      74557365 
 3649      724F7074 
 3649      696F6E42 
 3650              	.LASF60:
 3651 0475 72656164 		.ascii	"readoutstatus\000"
 3651      6F757473 
 3651      74617475 
 3651      7300
 3652              	.LASF9:
 3653 0483 6C6F6E67 		.ascii	"long unsigned int\000"
 3653      20756E73 
 3653      69676E65 
 3653      6420696E 
 3653      7400
 3654              	.LASF51:
 3655 0495 464C4153 		.ascii	"FLASH_FLAG\000"
 3655      485F464C 
 3655      414700
 3656              	.LASF24:
 3657 04a0 46756E63 		.ascii	"FunctionalState\000"
 3657      74696F6E 
 3657      616C5374 
 3657      61746500 
 3658              	.LASF8:
 3659 04b0 5F5F7569 		.ascii	"__uint32_t\000"
 3659      6E743332 
 3659      5F7400
 3660              	.LASF44:
 3661 04bb 464C4153 		.ascii	"FLASH_WaitForLastBank1Operation\000"
 3661      485F5761 
 3661      6974466F 
 3661      724C6173 
 3661      7442616E 
 3662              	.LASF6:
 3663 04db 5F5F696E 		.ascii	"__int32_t\000"
 3663      7433325F 
ARM GAS  /tmp/ccFIADOf.s 			page 98


 3663      7400
 3664              	.LASF83:
 3665 04e5 464C4153 		.ascii	"FLASH_ErasePage\000"
 3665      485F4572 
 3665      61736550 
 3665      61676500 
 3666              	.LASF30:
 3667 04f5 55534552 		.ascii	"USER\000"
 3667      00
 3668              	.LASF31:
 3669 04fa 44617461 		.ascii	"Data0\000"
 3669      3000
 3670              	.LASF32:
 3671 0500 44617461 		.ascii	"Data1\000"
 3671      3100
 3672              	.LASF69:
 3673 0506 464C4153 		.ascii	"FLASH_Pages\000"
 3673      485F5061 
 3673      67657300 
 3674              	.LASF54:
 3675 0512 464C4153 		.ascii	"FLASH_ClearFlag\000"
 3675      485F436C 
 3675      65617246 
 3675      6C616700 
 3676              	.LASF78:
 3677 0522 464C4153 		.ascii	"FLASH_ProgramWord\000"
 3677      485F5072 
 3677      6F677261 
 3677      6D576F72 
 3677      6400
 3678              	.LASF27:
 3679 0534 52455345 		.ascii	"RESERVED\000"
 3679      52564544 
 3679      00
 3680              	.LASF29:
 3681 053d 464C4153 		.ascii	"FLASH_TypeDef\000"
 3681      485F5479 
 3681      70654465 
 3681      6600
 3682              	.LASF45:
 3683 054b 464C4153 		.ascii	"FLASH_WaitForLastOperation\000"
 3683      485F5761 
 3683      6974466F 
 3683      724C6173 
 3683      744F7065 
 3684              	.LASF18:
 3685 0566 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3685      52784275 
 3685      66666572 
 3685      00
 3686              	.LASF90:
 3687 0573 464C4153 		.ascii	"FLASH_PrefetchBuffer\000"
 3687      485F5072 
 3687      65666574 
 3687      63684275 
 3687      66666572 
 3688              	.LASF96:
ARM GAS  /tmp/ccFIADOf.s 			page 99


 3689 0588 636F6D6D 		.ascii	"common/stm32f10x_flash.c\000"
 3689      6F6E2F73 
 3689      746D3332 
 3689      66313078 
 3689      5F666C61 
 3690              	.LASF66:
 3691 05a1 4F425F53 		.ascii	"OB_STDBY\000"
 3691      54444259 
 3691      00
 3692              	.LASF23:
 3693 05aa 454E4142 		.ascii	"ENABLE\000"
 3693      4C4500
 3694              	.LASF49:
 3695 05b1 666C6173 		.ascii	"flashstatus\000"
 3695      68737461 
 3695      74757300 
 3696              		.ident	"GCC: (Arch Repository) 6.1.1 20160526"
ARM GAS  /tmp/ccFIADOf.s 			page 100


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_flash.c
     /tmp/ccFIADOf.s:15     .text:0000000000000000 $t
     /tmp/ccFIADOf.s:22     .text:0000000000000000 FLASH_SetLatency
     /tmp/ccFIADOf.s:72     .text:0000000000000034 $d
     /tmp/ccFIADOf.s:76     .text:0000000000000038 $t
     /tmp/ccFIADOf.s:83     .text:0000000000000038 FLASH_HalfCycleAccessCmd
     /tmp/ccFIADOf.s:125    .text:0000000000000064 $d
     /tmp/ccFIADOf.s:129    .text:0000000000000068 $t
     /tmp/ccFIADOf.s:136    .text:0000000000000068 FLASH_PrefetchBufferCmd
     /tmp/ccFIADOf.s:178    .text:0000000000000094 $d
     /tmp/ccFIADOf.s:182    .text:0000000000000098 $t
     /tmp/ccFIADOf.s:189    .text:0000000000000098 FLASH_Unlock
     /tmp/ccFIADOf.s:221    .text:00000000000000b0 $d
     /tmp/ccFIADOf.s:227    .text:00000000000000bc $t
     /tmp/ccFIADOf.s:234    .text:00000000000000bc FLASH_UnlockBank1
     /tmp/ccFIADOf.s:266    .text:00000000000000d4 $d
     /tmp/ccFIADOf.s:272    .text:00000000000000e0 $t
     /tmp/ccFIADOf.s:279    .text:00000000000000e0 FLASH_Lock
     /tmp/ccFIADOf.s:309    .text:00000000000000f8 $d
     /tmp/ccFIADOf.s:313    .text:00000000000000fc $t
     /tmp/ccFIADOf.s:320    .text:00000000000000fc FLASH_LockBank1
     /tmp/ccFIADOf.s:350    .text:0000000000000114 $d
     /tmp/ccFIADOf.s:354    .text:0000000000000118 $t
     /tmp/ccFIADOf.s:361    .text:0000000000000118 FLASH_ErasePage
     /tmp/ccFIADOf.s:1980   .text:00000000000008cc FLASH_WaitForLastOperation
     /tmp/ccFIADOf.s:430    .text:0000000000000178 $d
     /tmp/ccFIADOf.s:434    .text:000000000000017c $t
     /tmp/ccFIADOf.s:441    .text:000000000000017c FLASH_EraseAllPages
     /tmp/ccFIADOf.s:505    .text:00000000000001d4 $d
     /tmp/ccFIADOf.s:509    .text:00000000000001d8 $t
     /tmp/ccFIADOf.s:516    .text:00000000000001d8 FLASH_EraseAllBank1Pages
     /tmp/ccFIADOf.s:2051   .text:0000000000000910 FLASH_WaitForLastBank1Operation
     /tmp/ccFIADOf.s:580    .text:0000000000000230 $d
     /tmp/ccFIADOf.s:584    .text:0000000000000234 $t
     /tmp/ccFIADOf.s:591    .text:0000000000000234 FLASH_EraseOptionBytes
     /tmp/ccFIADOf.s:1510   .text:000000000000071c FLASH_GetReadOutProtectionStatus
     /tmp/ccFIADOf.s:718    .text:00000000000002f8 $d
     /tmp/ccFIADOf.s:725    .text:0000000000000308 $t
     /tmp/ccFIADOf.s:732    .text:0000000000000308 FLASH_ProgramWord
     /tmp/ccFIADOf.s:829    .text:0000000000000398 $d
     /tmp/ccFIADOf.s:833    .text:000000000000039c $t
     /tmp/ccFIADOf.s:840    .text:000000000000039c FLASH_ProgramHalfWord
     /tmp/ccFIADOf.s:905    .text:00000000000003f4 $d
     /tmp/ccFIADOf.s:909    .text:00000000000003f8 $t
     /tmp/ccFIADOf.s:916    .text:00000000000003f8 FLASH_ProgramOptionByteData
     /tmp/ccFIADOf.s:994    .text:0000000000000464 $d
     /tmp/ccFIADOf.s:1000   .text:0000000000000470 $t
     /tmp/ccFIADOf.s:1007   .text:0000000000000470 FLASH_EnableWriteProtection
     /tmp/ccFIADOf.s:1175   .text:0000000000000578 $d
     /tmp/ccFIADOf.s:1182   .text:0000000000000588 $t
     /tmp/ccFIADOf.s:1189   .text:0000000000000588 FLASH_ReadOutProtection
     /tmp/ccFIADOf.s:1317   .text:000000000000064c $d
     /tmp/ccFIADOf.s:1324   .text:000000000000065c $t
     /tmp/ccFIADOf.s:1331   .text:000000000000065c FLASH_UserOptionByteConfig
     /tmp/ccFIADOf.s:1419   .text:00000000000006e0 $d
     /tmp/ccFIADOf.s:1426   .text:00000000000006f0 $t
ARM GAS  /tmp/ccFIADOf.s 			page 101


     /tmp/ccFIADOf.s:1433   .text:00000000000006f0 FLASH_GetUserOptionByte
     /tmp/ccFIADOf.s:1461   .text:0000000000000704 $d
     /tmp/ccFIADOf.s:1465   .text:0000000000000708 $t
     /tmp/ccFIADOf.s:1472   .text:0000000000000708 FLASH_GetWriteProtectionOptionByte
     /tmp/ccFIADOf.s:1499   .text:0000000000000718 $d
     /tmp/ccFIADOf.s:1503   .text:000000000000071c $t
     /tmp/ccFIADOf.s:1558   .text:0000000000000748 $d
     /tmp/ccFIADOf.s:1562   .text:000000000000074c $t
     /tmp/ccFIADOf.s:1569   .text:000000000000074c FLASH_GetPrefetchBufferStatus
     /tmp/ccFIADOf.s:1617   .text:0000000000000778 $d
     /tmp/ccFIADOf.s:1621   .text:000000000000077c $t
     /tmp/ccFIADOf.s:1628   .text:000000000000077c FLASH_ITConfig
     /tmp/ccFIADOf.s:1682   .text:00000000000007b4 $d
     /tmp/ccFIADOf.s:1686   .text:00000000000007b8 $t
     /tmp/ccFIADOf.s:1693   .text:00000000000007b8 FLASH_GetFlagStatus
     /tmp/ccFIADOf.s:1763   .text:0000000000000804 $d
     /tmp/ccFIADOf.s:1767   .text:0000000000000808 $t
     /tmp/ccFIADOf.s:1774   .text:0000000000000808 FLASH_ClearFlag
     /tmp/ccFIADOf.s:1807   .text:0000000000000820 $d
     /tmp/ccFIADOf.s:1811   .text:0000000000000824 $t
     /tmp/ccFIADOf.s:1818   .text:0000000000000824 FLASH_GetStatus
     /tmp/ccFIADOf.s:1888   .text:0000000000000874 $d
     /tmp/ccFIADOf.s:1892   .text:0000000000000878 $t
     /tmp/ccFIADOf.s:1899   .text:0000000000000878 FLASH_GetBank1Status
     /tmp/ccFIADOf.s:1969   .text:00000000000008c8 $d
     /tmp/ccFIADOf.s:1973   .text:00000000000008cc $t
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
