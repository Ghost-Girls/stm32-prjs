ARM GAS  /tmp/ccdacDx2.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	counter
  16              		.bss
  17              		.align	2
  18              		.type	counter, %object
  19              		.size	counter, 4
  20              	counter:
  21 0000 00000000 		.space	4
  22              		.text
  23              		.align	1
  24              		.global	NMI_Handler
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu softvfp
  29              		.type	NMI_Handler, %function
  30              	NMI_Handler:
  31              	.LFB63:
  32              		.file 1 "src/stm32f10x_it.c"
   1:src/stm32f10x_it.c **** /**
   2:src/stm32f10x_it.c ****   ******************************************************************************
   3:src/stm32f10x_it.c ****   * @file    RCC/RCC_ClockConfig/stm32f10x_it.c 
   4:src/stm32f10x_it.c ****   * @author  MCD Application Team
   5:src/stm32f10x_it.c ****   * @version V3.5.0
   6:src/stm32f10x_it.c ****   * @date    08-April-2011
   7:src/stm32f10x_it.c ****   * @brief   Main Interrupt Service Routines.
   8:src/stm32f10x_it.c ****   *          This file provides template for all exceptions handler and peripherals
   9:src/stm32f10x_it.c ****   *          interrupt service routine.
  10:src/stm32f10x_it.c ****   ******************************************************************************
  11:src/stm32f10x_it.c ****   * @attention
  12:src/stm32f10x_it.c ****   *
  13:src/stm32f10x_it.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  14:src/stm32f10x_it.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  15:src/stm32f10x_it.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  16:src/stm32f10x_it.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  17:src/stm32f10x_it.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  18:src/stm32f10x_it.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  19:src/stm32f10x_it.c ****   *
  20:src/stm32f10x_it.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  21:src/stm32f10x_it.c ****   ******************************************************************************
  22:src/stm32f10x_it.c ****   */ 
  23:src/stm32f10x_it.c **** 
  24:src/stm32f10x_it.c **** /* Includes ------------------------------------------------------------------*/
  25:src/stm32f10x_it.c **** #include "stm32f10x_it.h"
ARM GAS  /tmp/ccdacDx2.s 			page 2


  26:src/stm32f10x_it.c **** #include "main.h"
  27:src/stm32f10x_it.c **** 
  28:src/stm32f10x_it.c **** u32 counter;
  29:src/stm32f10x_it.c **** /** @addtogroup STM32F10x_StdPeriph_Examples
  30:src/stm32f10x_it.c ****   * @{
  31:src/stm32f10x_it.c ****   */
  32:src/stm32f10x_it.c **** 
  33:src/stm32f10x_it.c **** /** @addtogroup RCC_ClockConfig
  34:src/stm32f10x_it.c ****   * @{
  35:src/stm32f10x_it.c ****   */ 
  36:src/stm32f10x_it.c **** 
  37:src/stm32f10x_it.c **** /* Private typedef -----------------------------------------------------------*/
  38:src/stm32f10x_it.c **** /* Private define ------------------------------------------------------------*/
  39:src/stm32f10x_it.c **** /* Private macro -------------------------------------------------------------*/
  40:src/stm32f10x_it.c **** /* Private variables ---------------------------------------------------------*/
  41:src/stm32f10x_it.c **** /* Private function prototypes -----------------------------------------------*/
  42:src/stm32f10x_it.c **** /* Private functions ---------------------------------------------------------*/
  43:src/stm32f10x_it.c **** 
  44:src/stm32f10x_it.c **** /******************************************************************************/
  45:src/stm32f10x_it.c **** /*            Cortex-M3 Processor Exceptions Handlers                         */
  46:src/stm32f10x_it.c **** /******************************************************************************/
  47:src/stm32f10x_it.c **** 
  48:src/stm32f10x_it.c **** /**
  49:src/stm32f10x_it.c ****   * @brief  This function handles NMI exception.
  50:src/stm32f10x_it.c ****   * @param  None
  51:src/stm32f10x_it.c ****   * @retval None
  52:src/stm32f10x_it.c ****   */
  53:src/stm32f10x_it.c **** void NMI_Handler(void)
  54:src/stm32f10x_it.c **** {
  33              		.loc 1 54 0
  34              		.cfi_startproc
  35              		@ args = 0, pretend = 0, frame = 0
  36              		@ frame_needed = 1, uses_anonymous_args = 0
  37 0000 80B5     		push	{r7, lr}
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 00AF     		add	r7, sp, #0
  42              		.cfi_def_cfa_register 7
  55:src/stm32f10x_it.c ****   /* This interrupt is generated when HSE clock fails */
  56:src/stm32f10x_it.c **** 
  57:src/stm32f10x_it.c ****   if (RCC_GetITStatus(RCC_IT_CSS) != RESET)
  43              		.loc 1 57 0
  44 0004 8020     		movs	r0, #128
  45 0006 FFF7FEFF 		bl	RCC_GetITStatus
  46 000a 0346     		mov	r3, r0
  47 000c 002B     		cmp	r3, #0
  48 000e 0ED0     		beq	.L3
  58:src/stm32f10x_it.c ****   {/* At this stage: HSE, PLL are disabled (but no change on PLL config) and HSI
  59:src/stm32f10x_it.c ****        is selected as system clock source */
  60:src/stm32f10x_it.c **** 
  61:src/stm32f10x_it.c ****     /* Enable HSE */
  62:src/stm32f10x_it.c ****     RCC_HSEConfig(RCC_HSE_ON);
  49              		.loc 1 62 0
  50 0010 4FF48030 		mov	r0, #65536
  51 0014 FFF7FEFF 		bl	RCC_HSEConfig
  63:src/stm32f10x_it.c **** 
ARM GAS  /tmp/ccdacDx2.s 			page 3


  64:src/stm32f10x_it.c ****     /* Enable HSE Ready interrupt */
  65:src/stm32f10x_it.c ****     RCC_ITConfig(RCC_IT_HSERDY, ENABLE);
  52              		.loc 1 65 0
  53 0018 0121     		movs	r1, #1
  54 001a 0820     		movs	r0, #8
  55 001c FFF7FEFF 		bl	RCC_ITConfig
  66:src/stm32f10x_it.c **** 
  67:src/stm32f10x_it.c **** #ifndef SYSCLK_HSE
  68:src/stm32f10x_it.c ****  #ifdef STM32F10X_CL
  69:src/stm32f10x_it.c ****     /* Enable PLL and PLL2 Ready interrupts */
  70:src/stm32f10x_it.c ****     RCC_ITConfig(RCC_IT_PLLRDY | RCC_IT_PLL2RDY, ENABLE);
  71:src/stm32f10x_it.c ****  #else
  72:src/stm32f10x_it.c ****     /* Enable PLL Ready interrupt */
  73:src/stm32f10x_it.c ****     RCC_ITConfig(RCC_IT_PLLRDY, ENABLE);
  56              		.loc 1 73 0
  57 0020 0121     		movs	r1, #1
  58 0022 1020     		movs	r0, #16
  59 0024 FFF7FEFF 		bl	RCC_ITConfig
  74:src/stm32f10x_it.c ****  #endif	/* STM32F10X_CL */
  75:src/stm32f10x_it.c **** #endif /* SYSCLK_HSE */
  76:src/stm32f10x_it.c **** 
  77:src/stm32f10x_it.c ****     /* Clear Clock Security System interrupt pending bit */
  78:src/stm32f10x_it.c ****     RCC_ClearITPendingBit(RCC_IT_CSS);
  60              		.loc 1 78 0
  61 0028 8020     		movs	r0, #128
  62 002a FFF7FEFF 		bl	RCC_ClearITPendingBit
  63              	.L3:
  79:src/stm32f10x_it.c **** 
  80:src/stm32f10x_it.c ****     /* Once HSE clock recover, the HSERDY interrupt is generated and in the RCC ISR
  81:src/stm32f10x_it.c ****        routine the system clock will be reconfigured to its previous state (before
  82:src/stm32f10x_it.c ****        HSE clock failure) */
  83:src/stm32f10x_it.c ****   }
  84:src/stm32f10x_it.c **** }
  64              		.loc 1 84 0
  65 002e 00BF     		nop
  66 0030 80BD     		pop	{r7, pc}
  67              		.cfi_endproc
  68              	.LFE63:
  69              		.size	NMI_Handler, .-NMI_Handler
  70              		.align	1
  71              		.global	HardFault_Handler
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu softvfp
  76              		.type	HardFault_Handler, %function
  77              	HardFault_Handler:
  78              	.LFB64:
  85:src/stm32f10x_it.c **** 
  86:src/stm32f10x_it.c **** /**
  87:src/stm32f10x_it.c ****   * @brief  This function handles Hard Fault exception.
  88:src/stm32f10x_it.c ****   * @param  None
  89:src/stm32f10x_it.c ****   * @retval None
  90:src/stm32f10x_it.c ****   */
  91:src/stm32f10x_it.c **** void HardFault_Handler(void)
  92:src/stm32f10x_it.c **** {
  79              		.loc 1 92 0
ARM GAS  /tmp/ccdacDx2.s 			page 4


  80              		.cfi_startproc
  81              		@ args = 0, pretend = 0, frame = 0
  82              		@ frame_needed = 1, uses_anonymous_args = 0
  83              		@ link register save eliminated.
  84 0032 80B4     		push	{r7}
  85              		.cfi_def_cfa_offset 4
  86              		.cfi_offset 7, -4
  87 0034 00AF     		add	r7, sp, #0
  88              		.cfi_def_cfa_register 7
  89              	.L5:
  93:src/stm32f10x_it.c ****   /* Go to infinite loop when Hard Fault exception occurs */
  94:src/stm32f10x_it.c ****   while (1)
  90              		.loc 1 94 0 discriminator 1
  91 0036 FEE7     		b	.L5
  92              		.cfi_endproc
  93              	.LFE64:
  94              		.size	HardFault_Handler, .-HardFault_Handler
  95              		.align	1
  96              		.global	MemManage_Handler
  97              		.syntax unified
  98              		.thumb
  99              		.thumb_func
 100              		.fpu softvfp
 101              		.type	MemManage_Handler, %function
 102              	MemManage_Handler:
 103              	.LFB65:
  95:src/stm32f10x_it.c ****   {
  96:src/stm32f10x_it.c ****   }
  97:src/stm32f10x_it.c **** }
  98:src/stm32f10x_it.c **** 
  99:src/stm32f10x_it.c **** /**
 100:src/stm32f10x_it.c ****   * @brief  This function handles Memory Manage exception.
 101:src/stm32f10x_it.c ****   * @param  None
 102:src/stm32f10x_it.c ****   * @retval None
 103:src/stm32f10x_it.c ****   */
 104:src/stm32f10x_it.c **** void MemManage_Handler(void)
 105:src/stm32f10x_it.c **** {
 104              		.loc 1 105 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 1, uses_anonymous_args = 0
 108              		@ link register save eliminated.
 109 0038 80B4     		push	{r7}
 110              		.cfi_def_cfa_offset 4
 111              		.cfi_offset 7, -4
 112 003a 00AF     		add	r7, sp, #0
 113              		.cfi_def_cfa_register 7
 114              	.L7:
 106:src/stm32f10x_it.c ****   /* Go to infinite loop when Memory Manage exception occurs */
 107:src/stm32f10x_it.c ****   while (1)
 115              		.loc 1 107 0 discriminator 1
 116 003c FEE7     		b	.L7
 117              		.cfi_endproc
 118              	.LFE65:
 119              		.size	MemManage_Handler, .-MemManage_Handler
 120              		.align	1
 121              		.global	BusFault_Handler
ARM GAS  /tmp/ccdacDx2.s 			page 5


 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu softvfp
 126              		.type	BusFault_Handler, %function
 127              	BusFault_Handler:
 128              	.LFB66:
 108:src/stm32f10x_it.c ****   {
 109:src/stm32f10x_it.c ****   }
 110:src/stm32f10x_it.c **** }
 111:src/stm32f10x_it.c **** 
 112:src/stm32f10x_it.c **** /**
 113:src/stm32f10x_it.c ****   * @brief  This function handles Bus Fault exception.
 114:src/stm32f10x_it.c ****   * @param  None
 115:src/stm32f10x_it.c ****   * @retval None
 116:src/stm32f10x_it.c ****   */
 117:src/stm32f10x_it.c **** void BusFault_Handler(void)
 118:src/stm32f10x_it.c **** {
 129              		.loc 1 118 0
 130              		.cfi_startproc
 131              		@ args = 0, pretend = 0, frame = 0
 132              		@ frame_needed = 1, uses_anonymous_args = 0
 133              		@ link register save eliminated.
 134 003e 80B4     		push	{r7}
 135              		.cfi_def_cfa_offset 4
 136              		.cfi_offset 7, -4
 137 0040 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 139              	.L9:
 119:src/stm32f10x_it.c ****   /* Go to infinite loop when Bus Fault exception occurs */
 120:src/stm32f10x_it.c ****   while (1)
 140              		.loc 1 120 0 discriminator 1
 141 0042 FEE7     		b	.L9
 142              		.cfi_endproc
 143              	.LFE66:
 144              		.size	BusFault_Handler, .-BusFault_Handler
 145              		.align	1
 146              		.global	SVC_Handler
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu softvfp
 151              		.type	SVC_Handler, %function
 152              	SVC_Handler:
 153              	.LFB67:
 121:src/stm32f10x_it.c ****   {
 122:src/stm32f10x_it.c ****   }
 123:src/stm32f10x_it.c **** }
 124:src/stm32f10x_it.c **** 
 125:src/stm32f10x_it.c **** /**
 126:src/stm32f10x_it.c ****   * @brief  This function handles Usage Fault exception.
 127:src/stm32f10x_it.c **** rief  This function handles SVCall exception.
 128:src/stm32f10x_it.c ****   * @param  None
 129:src/stm32f10x_it.c ****   * @retval None
 130:src/stm32f10x_it.c ****   */
 131:src/stm32f10x_it.c **** void SVC_Handler(void)
 132:src/stm32f10x_it.c **** {
ARM GAS  /tmp/ccdacDx2.s 			page 6


 154              		.loc 1 132 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 1, uses_anonymous_args = 0
 158              		@ link register save eliminated.
 159 0044 80B4     		push	{r7}
 160              		.cfi_def_cfa_offset 4
 161              		.cfi_offset 7, -4
 162 0046 00AF     		add	r7, sp, #0
 163              		.cfi_def_cfa_register 7
 133:src/stm32f10x_it.c **** }
 164              		.loc 1 133 0
 165 0048 00BF     		nop
 166 004a BD46     		mov	sp, r7
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
 169 004c 80BC     		pop	{r7}
 170              		.cfi_restore 7
 171              		.cfi_def_cfa_offset 0
 172 004e 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE67:
 175              		.size	SVC_Handler, .-SVC_Handler
 176              		.align	1
 177              		.global	DebugMon_Handler
 178              		.syntax unified
 179              		.thumb
 180              		.thumb_func
 181              		.fpu softvfp
 182              		.type	DebugMon_Handler, %function
 183              	DebugMon_Handler:
 184              	.LFB68:
 134:src/stm32f10x_it.c **** 
 135:src/stm32f10x_it.c **** /**
 136:src/stm32f10x_it.c ****   * @brief  This function handles Debug Monitor exception.
 137:src/stm32f10x_it.c ****   * @param  None
 138:src/stm32f10x_it.c ****   * @retval None
 139:src/stm32f10x_it.c ****   */
 140:src/stm32f10x_it.c **** void DebugMon_Handler(void)
 141:src/stm32f10x_it.c **** {
 185              		.loc 1 141 0
 186              		.cfi_startproc
 187              		@ args = 0, pretend = 0, frame = 0
 188              		@ frame_needed = 1, uses_anonymous_args = 0
 189              		@ link register save eliminated.
 190 0050 80B4     		push	{r7}
 191              		.cfi_def_cfa_offset 4
 192              		.cfi_offset 7, -4
 193 0052 00AF     		add	r7, sp, #0
 194              		.cfi_def_cfa_register 7
 142:src/stm32f10x_it.c **** }
 195              		.loc 1 142 0
 196 0054 00BF     		nop
 197 0056 BD46     		mov	sp, r7
 198              		.cfi_def_cfa_register 13
 199              		@ sp needed
 200 0058 80BC     		pop	{r7}
ARM GAS  /tmp/ccdacDx2.s 			page 7


 201              		.cfi_restore 7
 202              		.cfi_def_cfa_offset 0
 203 005a 7047     		bx	lr
 204              		.cfi_endproc
 205              	.LFE68:
 206              		.size	DebugMon_Handler, .-DebugMon_Handler
 207              		.align	1
 208              		.global	PendSV_Handler
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu softvfp
 213              		.type	PendSV_Handler, %function
 214              	PendSV_Handler:
 215              	.LFB69:
 143:src/stm32f10x_it.c **** 
 144:src/stm32f10x_it.c **** /**
 145:src/stm32f10x_it.c ****   * @brief  This function handles PendSV_Handler exception.
 146:src/stm32f10x_it.c ****   * @param  None
 147:src/stm32f10x_it.c ****   * @retval None
 148:src/stm32f10x_it.c ****   */
 149:src/stm32f10x_it.c **** void PendSV_Handler(void)
 150:src/stm32f10x_it.c **** {
 216              		.loc 1 150 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 1, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221 005c 80B4     		push	{r7}
 222              		.cfi_def_cfa_offset 4
 223              		.cfi_offset 7, -4
 224 005e 00AF     		add	r7, sp, #0
 225              		.cfi_def_cfa_register 7
 151:src/stm32f10x_it.c **** }
 226              		.loc 1 151 0
 227 0060 00BF     		nop
 228 0062 BD46     		mov	sp, r7
 229              		.cfi_def_cfa_register 13
 230              		@ sp needed
 231 0064 80BC     		pop	{r7}
 232              		.cfi_restore 7
 233              		.cfi_def_cfa_offset 0
 234 0066 7047     		bx	lr
 235              		.cfi_endproc
 236              	.LFE69:
 237              		.size	PendSV_Handler, .-PendSV_Handler
 238              		.align	1
 239              		.global	SysTick_Handler
 240              		.syntax unified
 241              		.thumb
 242              		.thumb_func
 243              		.fpu softvfp
 244              		.type	SysTick_Handler, %function
 245              	SysTick_Handler:
 246              	.LFB70:
 152:src/stm32f10x_it.c **** 
 153:src/stm32f10x_it.c **** /**
ARM GAS  /tmp/ccdacDx2.s 			page 8


 154:src/stm32f10x_it.c ****   * @brief  This function handles SysTick Handler.
 155:src/stm32f10x_it.c ****   * @param  None
 156:src/stm32f10x_it.c ****   * @retval None
 157:src/stm32f10x_it.c ****   */
 158:src/stm32f10x_it.c **** void SysTick_Handler(void)
 159:src/stm32f10x_it.c **** {
 247              		.loc 1 159 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 1, uses_anonymous_args = 0
 251              		@ link register save eliminated.
 252 0068 80B4     		push	{r7}
 253              		.cfi_def_cfa_offset 4
 254              		.cfi_offset 7, -4
 255 006a 00AF     		add	r7, sp, #0
 256              		.cfi_def_cfa_register 7
 160:src/stm32f10x_it.c **** }
 257              		.loc 1 160 0
 258 006c 00BF     		nop
 259 006e BD46     		mov	sp, r7
 260              		.cfi_def_cfa_register 13
 261              		@ sp needed
 262 0070 80BC     		pop	{r7}
 263              		.cfi_restore 7
 264              		.cfi_def_cfa_offset 0
 265 0072 7047     		bx	lr
 266              		.cfi_endproc
 267              	.LFE70:
 268              		.size	SysTick_Handler, .-SysTick_Handler
 269              		.align	1
 270              		.global	TIM2_IRQHandler
 271              		.syntax unified
 272              		.thumb
 273              		.thumb_func
 274              		.fpu softvfp
 275              		.type	TIM2_IRQHandler, %function
 276              	TIM2_IRQHandler:
 277              	.LFB71:
 161:src/stm32f10x_it.c **** 
 162:src/stm32f10x_it.c **** void TIM2_IRQHandler(void)
 163:src/stm32f10x_it.c **** {
 278              		.loc 1 163 0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 1, uses_anonymous_args = 0
 282 0074 80B5     		push	{r7, lr}
 283              		.cfi_def_cfa_offset 8
 284              		.cfi_offset 7, -8
 285              		.cfi_offset 14, -4
 286 0076 00AF     		add	r7, sp, #0
 287              		.cfi_def_cfa_register 7
 164:src/stm32f10x_it.c ****    //检测是否发生溢出更新事件
 165:src/stm32f10x_it.c ****    if(TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET) {
 288              		.loc 1 165 0
 289 0078 0121     		movs	r1, #1
 290 007a 4FF08040 		mov	r0, #1073741824
 291 007e FFF7FEFF 		bl	TIM_GetITStatus
ARM GAS  /tmp/ccdacDx2.s 			page 9


 292 0082 0346     		mov	r3, r0
 293 0084 002B     		cmp	r3, #0
 294 0086 09D0     		beq	.L16
 166:src/stm32f10x_it.c ****       //清除TIM2的中断待处理位
 167:src/stm32f10x_it.c ****       TIM_ClearITPendingBit(TIM2 , TIM_FLAG_Update);
 295              		.loc 1 167 0
 296 0088 0121     		movs	r1, #1
 297 008a 4FF08040 		mov	r0, #1073741824
 298 008e FFF7FEFF 		bl	TIM_ClearITPendingBit
 168:src/stm32f10x_it.c ****       counter++;
 299              		.loc 1 168 0
 300 0092 034B     		ldr	r3, .L17
 301 0094 1B68     		ldr	r3, [r3]
 302 0096 0133     		adds	r3, r3, #1
 303 0098 014A     		ldr	r2, .L17
 304 009a 1360     		str	r3, [r2]
 305              	.L16:
 169:src/stm32f10x_it.c ****    }
 170:src/stm32f10x_it.c **** }
 306              		.loc 1 170 0
 307 009c 00BF     		nop
 308 009e 80BD     		pop	{r7, pc}
 309              	.L18:
 310              		.align	2
 311              	.L17:
 312 00a0 00000000 		.word	counter
 313              		.cfi_endproc
 314              	.LFE71:
 315              		.size	TIM2_IRQHandler, .-TIM2_IRQHandler
 316              		.align	1
 317              		.global	RCC_IRQHandler
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu softvfp
 322              		.type	RCC_IRQHandler, %function
 323              	RCC_IRQHandler:
 324              	.LFB72:
 171:src/stm32f10x_it.c **** 
 172:src/stm32f10x_it.c **** /******************************************************************************/
 173:src/stm32f10x_it.c **** /*            STM32F10x Peripherals Interrupt Handlers                        */
 174:src/stm32f10x_it.c **** /******************************************************************************/
 175:src/stm32f10x_it.c **** 
 176:src/stm32f10x_it.c **** /**
 177:src/stm32f10x_it.c ****   * @brief  This function handles RCC interrupt request. 
 178:src/stm32f10x_it.c ****   * @param  None
 179:src/stm32f10x_it.c ****   * @retval None
 180:src/stm32f10x_it.c ****   */
 181:src/stm32f10x_it.c **** void RCC_IRQHandler(void)
 182:src/stm32f10x_it.c **** {
 325              		.loc 1 182 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 1, uses_anonymous_args = 0
 329 00a4 80B5     		push	{r7, lr}
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 7, -8
ARM GAS  /tmp/ccdacDx2.s 			page 10


 332              		.cfi_offset 14, -4
 333 00a6 00AF     		add	r7, sp, #0
 334              		.cfi_def_cfa_register 7
 183:src/stm32f10x_it.c ****   if(RCC_GetITStatus(RCC_IT_HSERDY) != RESET)
 335              		.loc 1 183 0
 336 00a8 0820     		movs	r0, #8
 337 00aa FFF7FEFF 		bl	RCC_GetITStatus
 338 00ae 0346     		mov	r3, r0
 339 00b0 002B     		cmp	r3, #0
 340 00b2 0BD0     		beq	.L20
 184:src/stm32f10x_it.c ****   { 
 185:src/stm32f10x_it.c ****     /* Clear HSERDY interrupt pending bit */
 186:src/stm32f10x_it.c ****     RCC_ClearITPendingBit(RCC_IT_HSERDY);
 341              		.loc 1 186 0
 342 00b4 0820     		movs	r0, #8
 343 00b6 FFF7FEFF 		bl	RCC_ClearITPendingBit
 187:src/stm32f10x_it.c **** 
 188:src/stm32f10x_it.c ****     /* Check if the HSE clock is still available */
 189:src/stm32f10x_it.c ****     if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 344              		.loc 1 189 0
 345 00ba 3120     		movs	r0, #49
 346 00bc FFF7FEFF 		bl	RCC_GetFlagStatus
 347 00c0 0346     		mov	r3, r0
 348 00c2 002B     		cmp	r3, #0
 349 00c4 02D0     		beq	.L20
 190:src/stm32f10x_it.c ****     { 
 191:src/stm32f10x_it.c **** #ifdef SYSCLK_HSE
 192:src/stm32f10x_it.c ****       /* Select HSE as system clock source */
 193:src/stm32f10x_it.c ****       RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
 194:src/stm32f10x_it.c **** #else
 195:src/stm32f10x_it.c ****  #ifdef STM32F10X_CL
 196:src/stm32f10x_it.c ****       /* Enable PLL2 */
 197:src/stm32f10x_it.c ****       RCC_PLL2Cmd(ENABLE);
 198:src/stm32f10x_it.c ****  #else
 199:src/stm32f10x_it.c ****       /* Enable PLL: once the PLL is ready the PLLRDY interrupt is generated */ 
 200:src/stm32f10x_it.c ****       RCC_PLLCmd(ENABLE);
 350              		.loc 1 200 0
 351 00c6 0120     		movs	r0, #1
 352 00c8 FFF7FEFF 		bl	RCC_PLLCmd
 353              	.L20:
 201:src/stm32f10x_it.c ****  #endif	/* STM32F10X_CL */
 202:src/stm32f10x_it.c **** #endif /* SYSCLK_HSE */      
 203:src/stm32f10x_it.c ****     }
 204:src/stm32f10x_it.c ****   }
 205:src/stm32f10x_it.c **** 
 206:src/stm32f10x_it.c **** #ifdef STM32F10X_CL
 207:src/stm32f10x_it.c ****   if(RCC_GetITStatus(RCC_IT_PLL2RDY) != RESET)
 208:src/stm32f10x_it.c ****   { 
 209:src/stm32f10x_it.c ****     /* Clear PLL2RDY interrupt pending bit */
 210:src/stm32f10x_it.c ****     RCC_ClearITPendingBit(RCC_IT_PLL2RDY);
 211:src/stm32f10x_it.c **** 
 212:src/stm32f10x_it.c ****     /* Enable PLL: once the PLL is ready the PLLRDY interrupt is generated */ 
 213:src/stm32f10x_it.c ****     RCC_PLLCmd(ENABLE);
 214:src/stm32f10x_it.c ****   }
 215:src/stm32f10x_it.c **** #endif /* STM32F10X_CL */   
 216:src/stm32f10x_it.c **** 
 217:src/stm32f10x_it.c ****   if(RCC_GetITStatus(RCC_IT_PLLRDY) != RESET)
ARM GAS  /tmp/ccdacDx2.s 			page 11


 354              		.loc 1 217 0
 355 00cc 1020     		movs	r0, #16
 356 00ce FFF7FEFF 		bl	RCC_GetITStatus
 357 00d2 0346     		mov	r3, r0
 358 00d4 002B     		cmp	r3, #0
 359 00d6 0BD0     		beq	.L22
 218:src/stm32f10x_it.c ****   { 
 219:src/stm32f10x_it.c ****     /* Clear PLLRDY interrupt pending bit */
 220:src/stm32f10x_it.c ****     RCC_ClearITPendingBit(RCC_IT_PLLRDY);
 360              		.loc 1 220 0
 361 00d8 1020     		movs	r0, #16
 362 00da FFF7FEFF 		bl	RCC_ClearITPendingBit
 221:src/stm32f10x_it.c **** 
 222:src/stm32f10x_it.c ****     /* Check if the PLL is still locked */
 223:src/stm32f10x_it.c ****     if (RCC_GetFlagStatus(RCC_FLAG_PLLRDY) != RESET)
 363              		.loc 1 223 0
 364 00de 3920     		movs	r0, #57
 365 00e0 FFF7FEFF 		bl	RCC_GetFlagStatus
 366 00e4 0346     		mov	r3, r0
 367 00e6 002B     		cmp	r3, #0
 368 00e8 02D0     		beq	.L22
 224:src/stm32f10x_it.c ****     { 
 225:src/stm32f10x_it.c ****       /* Select PLL as system clock source */
 226:src/stm32f10x_it.c ****       RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 369              		.loc 1 226 0
 370 00ea 0220     		movs	r0, #2
 371 00ec FFF7FEFF 		bl	RCC_SYSCLKConfig
 372              	.L22:
 227:src/stm32f10x_it.c ****     }
 228:src/stm32f10x_it.c ****   }
 229:src/stm32f10x_it.c **** }
 373              		.loc 1 229 0
 374 00f0 00BF     		nop
 375 00f2 80BD     		pop	{r7, pc}
 376              		.cfi_endproc
 377              	.LFE72:
 378              		.size	RCC_IRQHandler, .-RCC_IRQHandler
 379              	.Letext0:
 380              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 381              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 382              		.file 4 "include/core_cm3.h"
 383              		.file 5 "include/system_stm32f10x.h"
 384              		.file 6 "include/stm32f10x.h"
 385              		.section	.debug_info,"",%progbits
 386              	.Ldebug_info0:
 387 0000 00040000 		.4byte	0x400
 388 0004 0400     		.2byte	0x4
 389 0006 00000000 		.4byte	.Ldebug_abbrev0
 390 000a 04       		.byte	0x4
 391 000b 01       		.uleb128 0x1
 392 000c D6010000 		.4byte	.LASF66
 393 0010 0C       		.byte	0xc
 394 0011 81010000 		.4byte	.LASF67
 395 0015 CC000000 		.4byte	.LASF68
 396 0019 00000000 		.4byte	.Ltext0
 397 001d F4000000 		.4byte	.Letext0-.Ltext0
 398 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  /tmp/ccdacDx2.s 			page 12


 399 0025 02       		.uleb128 0x2
 400 0026 01       		.byte	0x1
 401 0027 06       		.byte	0x6
 402 0028 6C000000 		.4byte	.LASF0
 403 002c 03       		.uleb128 0x3
 404 002d C2000000 		.4byte	.LASF3
 405 0031 02       		.byte	0x2
 406 0032 1D       		.byte	0x1d
 407 0033 37000000 		.4byte	0x37
 408 0037 02       		.uleb128 0x2
 409 0038 01       		.byte	0x1
 410 0039 08       		.byte	0x8
 411 003a 0D010000 		.4byte	.LASF1
 412 003e 02       		.uleb128 0x2
 413 003f 02       		.byte	0x2
 414 0040 05       		.byte	0x5
 415 0041 50000000 		.4byte	.LASF2
 416 0045 03       		.uleb128 0x3
 417 0046 45000000 		.4byte	.LASF4
 418 004a 02       		.byte	0x2
 419 004b 2B       		.byte	0x2b
 420 004c 50000000 		.4byte	0x50
 421 0050 02       		.uleb128 0x2
 422 0051 02       		.byte	0x2
 423 0052 07       		.byte	0x7
 424 0053 3A020000 		.4byte	.LASF5
 425 0057 03       		.uleb128 0x3
 426 0058 DD020000 		.4byte	.LASF6
 427 005c 02       		.byte	0x2
 428 005d 3F       		.byte	0x3f
 429 005e 62000000 		.4byte	0x62
 430 0062 02       		.uleb128 0x2
 431 0063 04       		.byte	0x4
 432 0064 05       		.byte	0x5
 433 0065 4D020000 		.4byte	.LASF7
 434 0069 03       		.uleb128 0x3
 435 006a 2A000000 		.4byte	.LASF8
 436 006e 02       		.byte	0x2
 437 006f 41       		.byte	0x41
 438 0070 74000000 		.4byte	0x74
 439 0074 02       		.uleb128 0x2
 440 0075 04       		.byte	0x4
 441 0076 07       		.byte	0x7
 442 0077 14020000 		.4byte	.LASF9
 443 007b 02       		.uleb128 0x2
 444 007c 08       		.byte	0x8
 445 007d 05       		.byte	0x5
 446 007e 78000000 		.4byte	.LASF10
 447 0082 02       		.uleb128 0x2
 448 0083 08       		.byte	0x8
 449 0084 07       		.byte	0x7
 450 0085 94010000 		.4byte	.LASF11
 451 0089 04       		.uleb128 0x4
 452 008a 04       		.byte	0x4
 453 008b 05       		.byte	0x5
 454 008c 696E7400 		.ascii	"int\000"
 455 0090 02       		.uleb128 0x2
ARM GAS  /tmp/ccdacDx2.s 			page 13


 456 0091 04       		.byte	0x4
 457 0092 07       		.byte	0x7
 458 0093 C0010000 		.4byte	.LASF12
 459 0097 03       		.uleb128 0x3
 460 0098 64000000 		.4byte	.LASF13
 461 009c 03       		.byte	0x3
 462 009d 18       		.byte	0x18
 463 009e 2C000000 		.4byte	0x2c
 464 00a2 03       		.uleb128 0x3
 465 00a3 CD010000 		.4byte	.LASF14
 466 00a7 03       		.byte	0x3
 467 00a8 24       		.byte	0x24
 468 00a9 45000000 		.4byte	0x45
 469 00ad 05       		.uleb128 0x5
 470 00ae A2000000 		.4byte	0xa2
 471 00b2 03       		.uleb128 0x3
 472 00b3 5B020000 		.4byte	.LASF15
 473 00b7 03       		.byte	0x3
 474 00b8 2C       		.byte	0x2c
 475 00b9 57000000 		.4byte	0x57
 476 00bd 05       		.uleb128 0x5
 477 00be B2000000 		.4byte	0xb2
 478 00c2 03       		.uleb128 0x3
 479 00c3 AB010000 		.4byte	.LASF16
 480 00c7 03       		.byte	0x3
 481 00c8 30       		.byte	0x30
 482 00c9 69000000 		.4byte	0x69
 483 00cd 02       		.uleb128 0x2
 484 00ce 04       		.byte	0x4
 485 00cf 07       		.byte	0x7
 486 00d0 FE020000 		.4byte	.LASF17
 487 00d4 06       		.uleb128 0x6
 488 00d5 28030000 		.4byte	.LASF18
 489 00d9 04       		.byte	0x4
 490 00da 9606     		.2byte	0x696
 491 00dc BD000000 		.4byte	0xbd
 492 00e0 07       		.uleb128 0x7
 493 00e1 63020000 		.4byte	.LASF19
 494 00e5 05       		.byte	0x5
 495 00e6 35       		.byte	0x35
 496 00e7 C2000000 		.4byte	0xc2
 497 00eb 08       		.uleb128 0x8
 498 00ec 75333200 		.ascii	"u32\000"
 499 00f0 06       		.byte	0x6
 500 00f1 F701     		.2byte	0x1f7
 501 00f3 C2000000 		.4byte	0xc2
 502 00f7 09       		.uleb128 0x9
 503 00f8 01       		.byte	0x1
 504 00f9 37000000 		.4byte	0x37
 505 00fd 06       		.byte	0x6
 506 00fe 0702     		.2byte	0x207
 507 0100 11010000 		.4byte	0x111
 508 0104 0A       		.uleb128 0xa
 509 0105 E7020000 		.4byte	.LASF20
 510 0109 00       		.byte	0
 511 010a 0B       		.uleb128 0xb
 512 010b 53455400 		.ascii	"SET\000"
ARM GAS  /tmp/ccdacDx2.s 			page 14


 513 010f 01       		.byte	0x1
 514 0110 00       		.byte	0
 515 0111 09       		.uleb128 0x9
 516 0112 01       		.byte	0x1
 517 0113 37000000 		.4byte	0x37
 518 0117 06       		.byte	0x6
 519 0118 0902     		.2byte	0x209
 520 011a 2B010000 		.4byte	0x12b
 521 011e 0A       		.uleb128 0xa
 522 011f 00000000 		.4byte	.LASF21
 523 0123 00       		.byte	0
 524 0124 0A       		.uleb128 0xa
 525 0125 35030000 		.4byte	.LASF22
 526 0129 01       		.byte	0x1
 527 012a 00       		.byte	0
 528 012b 0C       		.uleb128 0xc
 529 012c 50       		.byte	0x50
 530 012d 06       		.byte	0x6
 531 012e A204     		.2byte	0x4a2
 532 0130 3C030000 		.4byte	0x33c
 533 0134 0D       		.uleb128 0xd
 534 0135 43523100 		.ascii	"CR1\000"
 535 0139 06       		.byte	0x6
 536 013a A404     		.2byte	0x4a4
 537 013c AD000000 		.4byte	0xad
 538 0140 00       		.byte	0
 539 0141 0E       		.uleb128 0xe
 540 0142 73020000 		.4byte	.LASF23
 541 0146 06       		.byte	0x6
 542 0147 A504     		.2byte	0x4a5
 543 0149 A2000000 		.4byte	0xa2
 544 014d 02       		.byte	0x2
 545 014e 0D       		.uleb128 0xd
 546 014f 43523200 		.ascii	"CR2\000"
 547 0153 06       		.byte	0x6
 548 0154 A604     		.2byte	0x4a6
 549 0156 AD000000 		.4byte	0xad
 550 015a 04       		.byte	0x4
 551 015b 0E       		.uleb128 0xe
 552 015c 7D020000 		.4byte	.LASF24
 553 0160 06       		.byte	0x6
 554 0161 A704     		.2byte	0x4a7
 555 0163 A2000000 		.4byte	0xa2
 556 0167 06       		.byte	0x6
 557 0168 0E       		.uleb128 0xe
 558 0169 08010000 		.4byte	.LASF25
 559 016d 06       		.byte	0x6
 560 016e A804     		.2byte	0x4a8
 561 0170 AD000000 		.4byte	0xad
 562 0174 08       		.byte	0x8
 563 0175 0E       		.uleb128 0xe
 564 0176 5A000000 		.4byte	.LASF26
 565 017a 06       		.byte	0x6
 566 017b A904     		.2byte	0x4a9
 567 017d A2000000 		.4byte	0xa2
 568 0181 0A       		.byte	0xa
 569 0182 0E       		.uleb128 0xe
ARM GAS  /tmp/ccdacDx2.s 			page 15


 570 0183 35020000 		.4byte	.LASF27
 571 0187 06       		.byte	0x6
 572 0188 AA04     		.2byte	0x4aa
 573 018a AD000000 		.4byte	0xad
 574 018e 0C       		.byte	0xc
 575 018f 0E       		.uleb128 0xe
 576 0190 87020000 		.4byte	.LASF28
 577 0194 06       		.byte	0x6
 578 0195 AB04     		.2byte	0x4ab
 579 0197 A2000000 		.4byte	0xa2
 580 019b 0E       		.byte	0xe
 581 019c 0D       		.uleb128 0xd
 582 019d 535200   		.ascii	"SR\000"
 583 01a0 06       		.byte	0x6
 584 01a1 AC04     		.2byte	0x4ac
 585 01a3 AD000000 		.4byte	0xad
 586 01a7 10       		.byte	0x10
 587 01a8 0E       		.uleb128 0xe
 588 01a9 91020000 		.4byte	.LASF29
 589 01ad 06       		.byte	0x6
 590 01ae AD04     		.2byte	0x4ad
 591 01b0 A2000000 		.4byte	0xa2
 592 01b4 12       		.byte	0x12
 593 01b5 0D       		.uleb128 0xd
 594 01b6 45475200 		.ascii	"EGR\000"
 595 01ba 06       		.byte	0x6
 596 01bb AE04     		.2byte	0x4ae
 597 01bd AD000000 		.4byte	0xad
 598 01c1 14       		.byte	0x14
 599 01c2 0E       		.uleb128 0xe
 600 01c3 9B020000 		.4byte	.LASF30
 601 01c7 06       		.byte	0x6
 602 01c8 AF04     		.2byte	0x4af
 603 01ca A2000000 		.4byte	0xa2
 604 01ce 16       		.byte	0x16
 605 01cf 0E       		.uleb128 0xe
 606 01d0 12000000 		.4byte	.LASF31
 607 01d4 06       		.byte	0x6
 608 01d5 B004     		.2byte	0x4b0
 609 01d7 AD000000 		.4byte	0xad
 610 01db 18       		.byte	0x18
 611 01dc 0E       		.uleb128 0xe
 612 01dd A5020000 		.4byte	.LASF32
 613 01e1 06       		.byte	0x6
 614 01e2 B104     		.2byte	0x4b1
 615 01e4 A2000000 		.4byte	0xa2
 616 01e8 1A       		.byte	0x1a
 617 01e9 0E       		.uleb128 0xe
 618 01ea 18000000 		.4byte	.LASF33
 619 01ee 06       		.byte	0x6
 620 01ef B204     		.2byte	0x4b2
 621 01f1 AD000000 		.4byte	0xad
 622 01f5 1C       		.byte	0x1c
 623 01f6 0E       		.uleb128 0xe
 624 01f7 AF020000 		.4byte	.LASF34
 625 01fb 06       		.byte	0x6
 626 01fc B304     		.2byte	0x4b3
ARM GAS  /tmp/ccdacDx2.s 			page 16


 627 01fe A2000000 		.4byte	0xa2
 628 0202 1E       		.byte	0x1e
 629 0203 0E       		.uleb128 0xe
 630 0204 08000000 		.4byte	.LASF35
 631 0208 06       		.byte	0x6
 632 0209 B404     		.2byte	0x4b4
 633 020b AD000000 		.4byte	0xad
 634 020f 20       		.byte	0x20
 635 0210 0E       		.uleb128 0xe
 636 0211 B9020000 		.4byte	.LASF36
 637 0215 06       		.byte	0x6
 638 0216 B504     		.2byte	0x4b5
 639 0218 A2000000 		.4byte	0xa2
 640 021c 22       		.byte	0x22
 641 021d 0D       		.uleb128 0xd
 642 021e 434E5400 		.ascii	"CNT\000"
 643 0222 06       		.byte	0x6
 644 0223 B604     		.2byte	0x4b6
 645 0225 AD000000 		.4byte	0xad
 646 0229 24       		.byte	0x24
 647 022a 0E       		.uleb128 0xe
 648 022b C3020000 		.4byte	.LASF37
 649 022f 06       		.byte	0x6
 650 0230 B704     		.2byte	0x4b7
 651 0232 A2000000 		.4byte	0xa2
 652 0236 26       		.byte	0x26
 653 0237 0D       		.uleb128 0xd
 654 0238 50534300 		.ascii	"PSC\000"
 655 023c 06       		.byte	0x6
 656 023d B804     		.2byte	0x4b8
 657 023f AD000000 		.4byte	0xad
 658 0243 28       		.byte	0x28
 659 0244 0E       		.uleb128 0xe
 660 0245 B7000000 		.4byte	.LASF38
 661 0249 06       		.byte	0x6
 662 024a B904     		.2byte	0x4b9
 663 024c A2000000 		.4byte	0xa2
 664 0250 2A       		.byte	0x2a
 665 0251 0D       		.uleb128 0xd
 666 0252 41525200 		.ascii	"ARR\000"
 667 0256 06       		.byte	0x6
 668 0257 BA04     		.2byte	0x4ba
 669 0259 AD000000 		.4byte	0xad
 670 025d 2C       		.byte	0x2c
 671 025e 0E       		.uleb128 0xe
 672 025f 34010000 		.4byte	.LASF39
 673 0263 06       		.byte	0x6
 674 0264 BB04     		.2byte	0x4bb
 675 0266 A2000000 		.4byte	0xa2
 676 026a 2E       		.byte	0x2e
 677 026b 0D       		.uleb128 0xd
 678 026c 52435200 		.ascii	"RCR\000"
 679 0270 06       		.byte	0x6
 680 0271 BC04     		.2byte	0x4bc
 681 0273 AD000000 		.4byte	0xad
 682 0277 30       		.byte	0x30
 683 0278 0E       		.uleb128 0xe
ARM GAS  /tmp/ccdacDx2.s 			page 17


 684 0279 3F010000 		.4byte	.LASF40
 685 027d 06       		.byte	0x6
 686 027e BD04     		.2byte	0x4bd
 687 0280 A2000000 		.4byte	0xa2
 688 0284 32       		.byte	0x32
 689 0285 0E       		.uleb128 0xe
 690 0286 A3000000 		.4byte	.LASF41
 691 028a 06       		.byte	0x6
 692 028b BE04     		.2byte	0x4be
 693 028d AD000000 		.4byte	0xad
 694 0291 34       		.byte	0x34
 695 0292 0E       		.uleb128 0xe
 696 0293 4A010000 		.4byte	.LASF42
 697 0297 06       		.byte	0x6
 698 0298 BF04     		.2byte	0x4bf
 699 029a A2000000 		.4byte	0xa2
 700 029e 36       		.byte	0x36
 701 029f 0E       		.uleb128 0xe
 702 02a0 A8000000 		.4byte	.LASF43
 703 02a4 06       		.byte	0x6
 704 02a5 C004     		.2byte	0x4c0
 705 02a7 AD000000 		.4byte	0xad
 706 02ab 38       		.byte	0x38
 707 02ac 0E       		.uleb128 0xe
 708 02ad 55010000 		.4byte	.LASF44
 709 02b1 06       		.byte	0x6
 710 02b2 C104     		.2byte	0x4c1
 711 02b4 A2000000 		.4byte	0xa2
 712 02b8 3A       		.byte	0x3a
 713 02b9 0E       		.uleb128 0xe
 714 02ba AD000000 		.4byte	.LASF45
 715 02be 06       		.byte	0x6
 716 02bf C204     		.2byte	0x4c2
 717 02c1 AD000000 		.4byte	0xad
 718 02c5 3C       		.byte	0x3c
 719 02c6 0E       		.uleb128 0xe
 720 02c7 60010000 		.4byte	.LASF46
 721 02cb 06       		.byte	0x6
 722 02cc C304     		.2byte	0x4c3
 723 02ce A2000000 		.4byte	0xa2
 724 02d2 3E       		.byte	0x3e
 725 02d3 0E       		.uleb128 0xe
 726 02d4 B2000000 		.4byte	.LASF47
 727 02d8 06       		.byte	0x6
 728 02d9 C404     		.2byte	0x4c4
 729 02db AD000000 		.4byte	0xad
 730 02df 40       		.byte	0x40
 731 02e0 0E       		.uleb128 0xe
 732 02e1 6B010000 		.4byte	.LASF48
 733 02e5 06       		.byte	0x6
 734 02e6 C504     		.2byte	0x4c5
 735 02e8 A2000000 		.4byte	0xa2
 736 02ec 42       		.byte	0x42
 737 02ed 0E       		.uleb128 0xe
 738 02ee 56020000 		.4byte	.LASF49
 739 02f2 06       		.byte	0x6
 740 02f3 C604     		.2byte	0x4c6
ARM GAS  /tmp/ccdacDx2.s 			page 18


 741 02f5 AD000000 		.4byte	0xad
 742 02f9 44       		.byte	0x44
 743 02fa 0E       		.uleb128 0xe
 744 02fb 76010000 		.4byte	.LASF50
 745 02ff 06       		.byte	0x6
 746 0300 C704     		.2byte	0x4c7
 747 0302 A2000000 		.4byte	0xa2
 748 0306 46       		.byte	0x46
 749 0307 0D       		.uleb128 0xd
 750 0308 44435200 		.ascii	"DCR\000"
 751 030c 06       		.byte	0x6
 752 030d C804     		.2byte	0x4c8
 753 030f AD000000 		.4byte	0xad
 754 0313 48       		.byte	0x48
 755 0314 0E       		.uleb128 0xe
 756 0315 F1000000 		.4byte	.LASF51
 757 0319 06       		.byte	0x6
 758 031a C904     		.2byte	0x4c9
 759 031c A2000000 		.4byte	0xa2
 760 0320 4A       		.byte	0x4a
 761 0321 0E       		.uleb128 0xe
 762 0322 0D000000 		.4byte	.LASF52
 763 0326 06       		.byte	0x6
 764 0327 CA04     		.2byte	0x4ca
 765 0329 AD000000 		.4byte	0xad
 766 032d 4C       		.byte	0x4c
 767 032e 0E       		.uleb128 0xe
 768 032f 86000000 		.4byte	.LASF53
 769 0333 06       		.byte	0x6
 770 0334 CB04     		.2byte	0x4cb
 771 0336 A2000000 		.4byte	0xa2
 772 033a 4E       		.byte	0x4e
 773 033b 00       		.byte	0
 774 033c 0F       		.uleb128 0xf
 775 033d FC000000 		.4byte	.LASF54
 776 0341 06       		.byte	0x6
 777 0342 CC04     		.2byte	0x4cc
 778 0344 2B010000 		.4byte	0x12b
 779 0348 10       		.uleb128 0x10
 780 0349 2C010000 		.4byte	.LASF55
 781 034d 01       		.byte	0x1
 782 034e 1C       		.byte	0x1c
 783 034f EB000000 		.4byte	0xeb
 784 0353 05       		.uleb128 0x5
 785 0354 03       		.byte	0x3
 786 0355 00000000 		.4byte	counter
 787 0359 11       		.uleb128 0x11
 788 035a 26020000 		.4byte	.LASF56
 789 035e 01       		.byte	0x1
 790 035f B5       		.byte	0xb5
 791 0360 A4000000 		.4byte	.LFB72
 792 0364 50000000 		.4byte	.LFE72-.LFB72
 793 0368 01       		.uleb128 0x1
 794 0369 9C       		.byte	0x9c
 795 036a 11       		.uleb128 0x11
 796 036b 35000000 		.4byte	.LASF57
 797 036f 01       		.byte	0x1
ARM GAS  /tmp/ccdacDx2.s 			page 19


 798 0370 A2       		.byte	0xa2
 799 0371 74000000 		.4byte	.LFB71
 800 0375 30000000 		.4byte	.LFE71-.LFB71
 801 0379 01       		.uleb128 0x1
 802 037a 9C       		.byte	0x9c
 803 037b 12       		.uleb128 0x12
 804 037c CD020000 		.4byte	.LASF58
 805 0380 01       		.byte	0x1
 806 0381 9E       		.byte	0x9e
 807 0382 68000000 		.4byte	.LFB70
 808 0386 0C000000 		.4byte	.LFE70-.LFB70
 809 038a 01       		.uleb128 0x1
 810 038b 9C       		.byte	0x9c
 811 038c 12       		.uleb128 0x12
 812 038d 07030000 		.4byte	.LASF59
 813 0391 01       		.byte	0x1
 814 0392 95       		.byte	0x95
 815 0393 5C000000 		.4byte	.LFB69
 816 0397 0C000000 		.4byte	.LFE69-.LFB69
 817 039b 01       		.uleb128 0x1
 818 039c 9C       		.byte	0x9c
 819 039d 12       		.uleb128 0x12
 820 039e 1B010000 		.4byte	.LASF60
 821 03a2 01       		.byte	0x1
 822 03a3 8C       		.byte	0x8c
 823 03a4 50000000 		.4byte	.LFB68
 824 03a8 0C000000 		.4byte	.LFE68-.LFB68
 825 03ac 01       		.uleb128 0x1
 826 03ad 9C       		.byte	0x9c
 827 03ae 12       		.uleb128 0x12
 828 03af B4010000 		.4byte	.LASF61
 829 03b3 01       		.byte	0x1
 830 03b4 83       		.byte	0x83
 831 03b5 44000000 		.4byte	.LFB67
 832 03b9 0C000000 		.4byte	.LFE67-.LFB67
 833 03bd 01       		.uleb128 0x1
 834 03be 9C       		.byte	0x9c
 835 03bf 12       		.uleb128 0x12
 836 03c0 ED020000 		.4byte	.LASF62
 837 03c4 01       		.byte	0x1
 838 03c5 75       		.byte	0x75
 839 03c6 3E000000 		.4byte	.LFB66
 840 03ca 06000000 		.4byte	.LFE66-.LFB66
 841 03ce 01       		.uleb128 0x1
 842 03cf 9C       		.byte	0x9c
 843 03d0 12       		.uleb128 0x12
 844 03d1 16030000 		.4byte	.LASF63
 845 03d5 01       		.byte	0x1
 846 03d6 68       		.byte	0x68
 847 03d7 38000000 		.4byte	.LFB65
 848 03db 06000000 		.4byte	.LFE65-.LFB65
 849 03df 01       		.uleb128 0x1
 850 03e0 9C       		.byte	0x9c
 851 03e1 12       		.uleb128 0x12
 852 03e2 91000000 		.4byte	.LASF64
 853 03e6 01       		.byte	0x1
 854 03e7 5B       		.byte	0x5b
ARM GAS  /tmp/ccdacDx2.s 			page 20


 855 03e8 32000000 		.4byte	.LFB64
 856 03ec 06000000 		.4byte	.LFE64-.LFB64
 857 03f0 01       		.uleb128 0x1
 858 03f1 9C       		.byte	0x9c
 859 03f2 11       		.uleb128 0x11
 860 03f3 1E000000 		.4byte	.LASF65
 861 03f7 01       		.byte	0x1
 862 03f8 35       		.byte	0x35
 863 03f9 00000000 		.4byte	.LFB63
 864 03fd 32000000 		.4byte	.LFE63-.LFB63
 865 0401 01       		.uleb128 0x1
 866 0402 9C       		.byte	0x9c
 867 0403 00       		.byte	0
 868              		.section	.debug_abbrev,"",%progbits
 869              	.Ldebug_abbrev0:
 870 0000 01       		.uleb128 0x1
 871 0001 11       		.uleb128 0x11
 872 0002 01       		.byte	0x1
 873 0003 25       		.uleb128 0x25
 874 0004 0E       		.uleb128 0xe
 875 0005 13       		.uleb128 0x13
 876 0006 0B       		.uleb128 0xb
 877 0007 03       		.uleb128 0x3
 878 0008 0E       		.uleb128 0xe
 879 0009 1B       		.uleb128 0x1b
 880 000a 0E       		.uleb128 0xe
 881 000b 11       		.uleb128 0x11
 882 000c 01       		.uleb128 0x1
 883 000d 12       		.uleb128 0x12
 884 000e 06       		.uleb128 0x6
 885 000f 10       		.uleb128 0x10
 886 0010 17       		.uleb128 0x17
 887 0011 00       		.byte	0
 888 0012 00       		.byte	0
 889 0013 02       		.uleb128 0x2
 890 0014 24       		.uleb128 0x24
 891 0015 00       		.byte	0
 892 0016 0B       		.uleb128 0xb
 893 0017 0B       		.uleb128 0xb
 894 0018 3E       		.uleb128 0x3e
 895 0019 0B       		.uleb128 0xb
 896 001a 03       		.uleb128 0x3
 897 001b 0E       		.uleb128 0xe
 898 001c 00       		.byte	0
 899 001d 00       		.byte	0
 900 001e 03       		.uleb128 0x3
 901 001f 16       		.uleb128 0x16
 902 0020 00       		.byte	0
 903 0021 03       		.uleb128 0x3
 904 0022 0E       		.uleb128 0xe
 905 0023 3A       		.uleb128 0x3a
 906 0024 0B       		.uleb128 0xb
 907 0025 3B       		.uleb128 0x3b
 908 0026 0B       		.uleb128 0xb
 909 0027 49       		.uleb128 0x49
 910 0028 13       		.uleb128 0x13
 911 0029 00       		.byte	0
ARM GAS  /tmp/ccdacDx2.s 			page 21


 912 002a 00       		.byte	0
 913 002b 04       		.uleb128 0x4
 914 002c 24       		.uleb128 0x24
 915 002d 00       		.byte	0
 916 002e 0B       		.uleb128 0xb
 917 002f 0B       		.uleb128 0xb
 918 0030 3E       		.uleb128 0x3e
 919 0031 0B       		.uleb128 0xb
 920 0032 03       		.uleb128 0x3
 921 0033 08       		.uleb128 0x8
 922 0034 00       		.byte	0
 923 0035 00       		.byte	0
 924 0036 05       		.uleb128 0x5
 925 0037 35       		.uleb128 0x35
 926 0038 00       		.byte	0
 927 0039 49       		.uleb128 0x49
 928 003a 13       		.uleb128 0x13
 929 003b 00       		.byte	0
 930 003c 00       		.byte	0
 931 003d 06       		.uleb128 0x6
 932 003e 34       		.uleb128 0x34
 933 003f 00       		.byte	0
 934 0040 03       		.uleb128 0x3
 935 0041 0E       		.uleb128 0xe
 936 0042 3A       		.uleb128 0x3a
 937 0043 0B       		.uleb128 0xb
 938 0044 3B       		.uleb128 0x3b
 939 0045 05       		.uleb128 0x5
 940 0046 49       		.uleb128 0x49
 941 0047 13       		.uleb128 0x13
 942 0048 3F       		.uleb128 0x3f
 943 0049 19       		.uleb128 0x19
 944 004a 3C       		.uleb128 0x3c
 945 004b 19       		.uleb128 0x19
 946 004c 00       		.byte	0
 947 004d 00       		.byte	0
 948 004e 07       		.uleb128 0x7
 949 004f 34       		.uleb128 0x34
 950 0050 00       		.byte	0
 951 0051 03       		.uleb128 0x3
 952 0052 0E       		.uleb128 0xe
 953 0053 3A       		.uleb128 0x3a
 954 0054 0B       		.uleb128 0xb
 955 0055 3B       		.uleb128 0x3b
 956 0056 0B       		.uleb128 0xb
 957 0057 49       		.uleb128 0x49
 958 0058 13       		.uleb128 0x13
 959 0059 3F       		.uleb128 0x3f
 960 005a 19       		.uleb128 0x19
 961 005b 3C       		.uleb128 0x3c
 962 005c 19       		.uleb128 0x19
 963 005d 00       		.byte	0
 964 005e 00       		.byte	0
 965 005f 08       		.uleb128 0x8
 966 0060 16       		.uleb128 0x16
 967 0061 00       		.byte	0
 968 0062 03       		.uleb128 0x3
ARM GAS  /tmp/ccdacDx2.s 			page 22


 969 0063 08       		.uleb128 0x8
 970 0064 3A       		.uleb128 0x3a
 971 0065 0B       		.uleb128 0xb
 972 0066 3B       		.uleb128 0x3b
 973 0067 05       		.uleb128 0x5
 974 0068 49       		.uleb128 0x49
 975 0069 13       		.uleb128 0x13
 976 006a 00       		.byte	0
 977 006b 00       		.byte	0
 978 006c 09       		.uleb128 0x9
 979 006d 04       		.uleb128 0x4
 980 006e 01       		.byte	0x1
 981 006f 0B       		.uleb128 0xb
 982 0070 0B       		.uleb128 0xb
 983 0071 49       		.uleb128 0x49
 984 0072 13       		.uleb128 0x13
 985 0073 3A       		.uleb128 0x3a
 986 0074 0B       		.uleb128 0xb
 987 0075 3B       		.uleb128 0x3b
 988 0076 05       		.uleb128 0x5
 989 0077 01       		.uleb128 0x1
 990 0078 13       		.uleb128 0x13
 991 0079 00       		.byte	0
 992 007a 00       		.byte	0
 993 007b 0A       		.uleb128 0xa
 994 007c 28       		.uleb128 0x28
 995 007d 00       		.byte	0
 996 007e 03       		.uleb128 0x3
 997 007f 0E       		.uleb128 0xe
 998 0080 1C       		.uleb128 0x1c
 999 0081 0B       		.uleb128 0xb
 1000 0082 00       		.byte	0
 1001 0083 00       		.byte	0
 1002 0084 0B       		.uleb128 0xb
 1003 0085 28       		.uleb128 0x28
 1004 0086 00       		.byte	0
 1005 0087 03       		.uleb128 0x3
 1006 0088 08       		.uleb128 0x8
 1007 0089 1C       		.uleb128 0x1c
 1008 008a 0B       		.uleb128 0xb
 1009 008b 00       		.byte	0
 1010 008c 00       		.byte	0
 1011 008d 0C       		.uleb128 0xc
 1012 008e 13       		.uleb128 0x13
 1013 008f 01       		.byte	0x1
 1014 0090 0B       		.uleb128 0xb
 1015 0091 0B       		.uleb128 0xb
 1016 0092 3A       		.uleb128 0x3a
 1017 0093 0B       		.uleb128 0xb
 1018 0094 3B       		.uleb128 0x3b
 1019 0095 05       		.uleb128 0x5
 1020 0096 01       		.uleb128 0x1
 1021 0097 13       		.uleb128 0x13
 1022 0098 00       		.byte	0
 1023 0099 00       		.byte	0
 1024 009a 0D       		.uleb128 0xd
 1025 009b 0D       		.uleb128 0xd
ARM GAS  /tmp/ccdacDx2.s 			page 23


 1026 009c 00       		.byte	0
 1027 009d 03       		.uleb128 0x3
 1028 009e 08       		.uleb128 0x8
 1029 009f 3A       		.uleb128 0x3a
 1030 00a0 0B       		.uleb128 0xb
 1031 00a1 3B       		.uleb128 0x3b
 1032 00a2 05       		.uleb128 0x5
 1033 00a3 49       		.uleb128 0x49
 1034 00a4 13       		.uleb128 0x13
 1035 00a5 38       		.uleb128 0x38
 1036 00a6 0B       		.uleb128 0xb
 1037 00a7 00       		.byte	0
 1038 00a8 00       		.byte	0
 1039 00a9 0E       		.uleb128 0xe
 1040 00aa 0D       		.uleb128 0xd
 1041 00ab 00       		.byte	0
 1042 00ac 03       		.uleb128 0x3
 1043 00ad 0E       		.uleb128 0xe
 1044 00ae 3A       		.uleb128 0x3a
 1045 00af 0B       		.uleb128 0xb
 1046 00b0 3B       		.uleb128 0x3b
 1047 00b1 05       		.uleb128 0x5
 1048 00b2 49       		.uleb128 0x49
 1049 00b3 13       		.uleb128 0x13
 1050 00b4 38       		.uleb128 0x38
 1051 00b5 0B       		.uleb128 0xb
 1052 00b6 00       		.byte	0
 1053 00b7 00       		.byte	0
 1054 00b8 0F       		.uleb128 0xf
 1055 00b9 16       		.uleb128 0x16
 1056 00ba 00       		.byte	0
 1057 00bb 03       		.uleb128 0x3
 1058 00bc 0E       		.uleb128 0xe
 1059 00bd 3A       		.uleb128 0x3a
 1060 00be 0B       		.uleb128 0xb
 1061 00bf 3B       		.uleb128 0x3b
 1062 00c0 05       		.uleb128 0x5
 1063 00c1 49       		.uleb128 0x49
 1064 00c2 13       		.uleb128 0x13
 1065 00c3 00       		.byte	0
 1066 00c4 00       		.byte	0
 1067 00c5 10       		.uleb128 0x10
 1068 00c6 34       		.uleb128 0x34
 1069 00c7 00       		.byte	0
 1070 00c8 03       		.uleb128 0x3
 1071 00c9 0E       		.uleb128 0xe
 1072 00ca 3A       		.uleb128 0x3a
 1073 00cb 0B       		.uleb128 0xb
 1074 00cc 3B       		.uleb128 0x3b
 1075 00cd 0B       		.uleb128 0xb
 1076 00ce 49       		.uleb128 0x49
 1077 00cf 13       		.uleb128 0x13
 1078 00d0 3F       		.uleb128 0x3f
 1079 00d1 19       		.uleb128 0x19
 1080 00d2 02       		.uleb128 0x2
 1081 00d3 18       		.uleb128 0x18
 1082 00d4 00       		.byte	0
ARM GAS  /tmp/ccdacDx2.s 			page 24


 1083 00d5 00       		.byte	0
 1084 00d6 11       		.uleb128 0x11
 1085 00d7 2E       		.uleb128 0x2e
 1086 00d8 00       		.byte	0
 1087 00d9 3F       		.uleb128 0x3f
 1088 00da 19       		.uleb128 0x19
 1089 00db 03       		.uleb128 0x3
 1090 00dc 0E       		.uleb128 0xe
 1091 00dd 3A       		.uleb128 0x3a
 1092 00de 0B       		.uleb128 0xb
 1093 00df 3B       		.uleb128 0x3b
 1094 00e0 0B       		.uleb128 0xb
 1095 00e1 27       		.uleb128 0x27
 1096 00e2 19       		.uleb128 0x19
 1097 00e3 11       		.uleb128 0x11
 1098 00e4 01       		.uleb128 0x1
 1099 00e5 12       		.uleb128 0x12
 1100 00e6 06       		.uleb128 0x6
 1101 00e7 40       		.uleb128 0x40
 1102 00e8 18       		.uleb128 0x18
 1103 00e9 9642     		.uleb128 0x2116
 1104 00eb 19       		.uleb128 0x19
 1105 00ec 00       		.byte	0
 1106 00ed 00       		.byte	0
 1107 00ee 12       		.uleb128 0x12
 1108 00ef 2E       		.uleb128 0x2e
 1109 00f0 00       		.byte	0
 1110 00f1 3F       		.uleb128 0x3f
 1111 00f2 19       		.uleb128 0x19
 1112 00f3 03       		.uleb128 0x3
 1113 00f4 0E       		.uleb128 0xe
 1114 00f5 3A       		.uleb128 0x3a
 1115 00f6 0B       		.uleb128 0xb
 1116 00f7 3B       		.uleb128 0x3b
 1117 00f8 0B       		.uleb128 0xb
 1118 00f9 27       		.uleb128 0x27
 1119 00fa 19       		.uleb128 0x19
 1120 00fb 11       		.uleb128 0x11
 1121 00fc 01       		.uleb128 0x1
 1122 00fd 12       		.uleb128 0x12
 1123 00fe 06       		.uleb128 0x6
 1124 00ff 40       		.uleb128 0x40
 1125 0100 18       		.uleb128 0x18
 1126 0101 9742     		.uleb128 0x2117
 1127 0103 19       		.uleb128 0x19
 1128 0104 00       		.byte	0
 1129 0105 00       		.byte	0
 1130 0106 00       		.byte	0
 1131              		.section	.debug_aranges,"",%progbits
 1132 0000 1C000000 		.4byte	0x1c
 1133 0004 0200     		.2byte	0x2
 1134 0006 00000000 		.4byte	.Ldebug_info0
 1135 000a 04       		.byte	0x4
 1136 000b 00       		.byte	0
 1137 000c 0000     		.2byte	0
 1138 000e 0000     		.2byte	0
 1139 0010 00000000 		.4byte	.Ltext0
ARM GAS  /tmp/ccdacDx2.s 			page 25


 1140 0014 F4000000 		.4byte	.Letext0-.Ltext0
 1141 0018 00000000 		.4byte	0
 1142 001c 00000000 		.4byte	0
 1143              		.section	.debug_line,"",%progbits
 1144              	.Ldebug_line0:
 1145 0000 17010000 		.section	.debug_str,"MS",%progbits,1
 1145      0200C700 
 1145      00000201 
 1145      FB0E0D00 
 1145      01010101 
 1146              	.LASF21:
 1147 0000 44495341 		.ascii	"DISABLE\000"
 1147      424C4500 
 1148              	.LASF35:
 1149 0008 43434552 		.ascii	"CCER\000"
 1149      00
 1150              	.LASF52:
 1151 000d 444D4152 		.ascii	"DMAR\000"
 1151      00
 1152              	.LASF31:
 1153 0012 43434D52 		.ascii	"CCMR1\000"
 1153      3100
 1154              	.LASF33:
 1155 0018 43434D52 		.ascii	"CCMR2\000"
 1155      3200
 1156              	.LASF65:
 1157 001e 4E4D495F 		.ascii	"NMI_Handler\000"
 1157      48616E64 
 1157      6C657200 
 1158              	.LASF8:
 1159 002a 5F5F7569 		.ascii	"__uint32_t\000"
 1159      6E743332 
 1159      5F7400
 1160              	.LASF57:
 1161 0035 54494D32 		.ascii	"TIM2_IRQHandler\000"
 1161      5F495251 
 1161      48616E64 
 1161      6C657200 
 1162              	.LASF4:
 1163 0045 5F5F7569 		.ascii	"__uint16_t\000"
 1163      6E743136 
 1163      5F7400
 1164              	.LASF2:
 1165 0050 73686F72 		.ascii	"short int\000"
 1165      7420696E 
 1165      7400
 1166              	.LASF26:
 1167 005a 52455345 		.ascii	"RESERVED2\000"
 1167      52564544 
 1167      3200
 1168              	.LASF13:
 1169 0064 75696E74 		.ascii	"uint8_t\000"
 1169      385F7400 
 1170              	.LASF0:
 1171 006c 7369676E 		.ascii	"signed char\000"
 1171      65642063 
 1171      68617200 
ARM GAS  /tmp/ccdacDx2.s 			page 26


 1172              	.LASF10:
 1173 0078 6C6F6E67 		.ascii	"long long int\000"
 1173      206C6F6E 
 1173      6720696E 
 1173      7400
 1174              	.LASF53:
 1175 0086 52455345 		.ascii	"RESERVED19\000"
 1175      52564544 
 1175      313900
 1176              	.LASF64:
 1177 0091 48617264 		.ascii	"HardFault_Handler\000"
 1177      4661756C 
 1177      745F4861 
 1177      6E646C65 
 1177      7200
 1178              	.LASF41:
 1179 00a3 43435231 		.ascii	"CCR1\000"
 1179      00
 1180              	.LASF43:
 1181 00a8 43435232 		.ascii	"CCR2\000"
 1181      00
 1182              	.LASF45:
 1183 00ad 43435233 		.ascii	"CCR3\000"
 1183      00
 1184              	.LASF47:
 1185 00b2 43435234 		.ascii	"CCR4\000"
 1185      00
 1186              	.LASF38:
 1187 00b7 52455345 		.ascii	"RESERVED10\000"
 1187      52564544 
 1187      313000
 1188              	.LASF3:
 1189 00c2 5F5F7569 		.ascii	"__uint8_t\000"
 1189      6E74385F 
 1189      7400
 1190              	.LASF68:
 1191 00cc 2F686F6D 		.ascii	"/home/enbin/Documents/code/STM/usart\000"
 1191      652F656E 
 1191      62696E2F 
 1191      446F6375 
 1191      6D656E74 
 1192              	.LASF51:
 1193 00f1 52455345 		.ascii	"RESERVED18\000"
 1193      52564544 
 1193      313800
 1194              	.LASF54:
 1195 00fc 54494D5F 		.ascii	"TIM_TypeDef\000"
 1195      54797065 
 1195      44656600 
 1196              	.LASF25:
 1197 0108 534D4352 		.ascii	"SMCR\000"
 1197      00
 1198              	.LASF1:
 1199 010d 756E7369 		.ascii	"unsigned char\000"
 1199      676E6564 
 1199      20636861 
 1199      7200
ARM GAS  /tmp/ccdacDx2.s 			page 27


 1200              	.LASF60:
 1201 011b 44656275 		.ascii	"DebugMon_Handler\000"
 1201      674D6F6E 
 1201      5F48616E 
 1201      646C6572 
 1201      00
 1202              	.LASF55:
 1203 012c 636F756E 		.ascii	"counter\000"
 1203      74657200 
 1204              	.LASF39:
 1205 0134 52455345 		.ascii	"RESERVED11\000"
 1205      52564544 
 1205      313100
 1206              	.LASF40:
 1207 013f 52455345 		.ascii	"RESERVED12\000"
 1207      52564544 
 1207      313200
 1208              	.LASF42:
 1209 014a 52455345 		.ascii	"RESERVED13\000"
 1209      52564544 
 1209      313300
 1210              	.LASF44:
 1211 0155 52455345 		.ascii	"RESERVED14\000"
 1211      52564544 
 1211      313400
 1212              	.LASF46:
 1213 0160 52455345 		.ascii	"RESERVED15\000"
 1213      52564544 
 1213      313500
 1214              	.LASF48:
 1215 016b 52455345 		.ascii	"RESERVED16\000"
 1215      52564544 
 1215      313600
 1216              	.LASF50:
 1217 0176 52455345 		.ascii	"RESERVED17\000"
 1217      52564544 
 1217      313700
 1218              	.LASF67:
 1219 0181 7372632F 		.ascii	"src/stm32f10x_it.c\000"
 1219      73746D33 
 1219      32663130 
 1219      785F6974 
 1219      2E6300
 1220              	.LASF11:
 1221 0194 6C6F6E67 		.ascii	"long long unsigned int\000"
 1221      206C6F6E 
 1221      6720756E 
 1221      7369676E 
 1221      65642069 
 1222              	.LASF16:
 1223 01ab 75696E74 		.ascii	"uint32_t\000"
 1223      33325F74 
 1223      00
 1224              	.LASF61:
 1225 01b4 5356435F 		.ascii	"SVC_Handler\000"
 1225      48616E64 
 1225      6C657200 
ARM GAS  /tmp/ccdacDx2.s 			page 28


 1226              	.LASF12:
 1227 01c0 756E7369 		.ascii	"unsigned int\000"
 1227      676E6564 
 1227      20696E74 
 1227      00
 1228              	.LASF14:
 1229 01cd 75696E74 		.ascii	"uint16_t\000"
 1229      31365F74 
 1229      00
 1230              	.LASF66:
 1231 01d6 474E5520 		.ascii	"GNU C11 6.1.1 20160526 -mthumb -mcpu=cortex-m3 -g -"
 1231      43313120 
 1231      362E312E 
 1231      31203230 
 1231      31363035 
 1232 0209 666E6F2D 		.ascii	"fno-common\000"
 1232      636F6D6D 
 1232      6F6E00
 1233              	.LASF9:
 1234 0214 6C6F6E67 		.ascii	"long unsigned int\000"
 1234      20756E73 
 1234      69676E65 
 1234      6420696E 
 1234      7400
 1235              	.LASF56:
 1236 0226 5243435F 		.ascii	"RCC_IRQHandler\000"
 1236      49525148 
 1236      616E646C 
 1236      657200
 1237              	.LASF27:
 1238 0235 44494552 		.ascii	"DIER\000"
 1238      00
 1239              	.LASF5:
 1240 023a 73686F72 		.ascii	"short unsigned int\000"
 1240      7420756E 
 1240      7369676E 
 1240      65642069 
 1240      6E7400
 1241              	.LASF7:
 1242 024d 6C6F6E67 		.ascii	"long int\000"
 1242      20696E74 
 1242      00
 1243              	.LASF49:
 1244 0256 42445452 		.ascii	"BDTR\000"
 1244      00
 1245              	.LASF15:
 1246 025b 696E7433 		.ascii	"int32_t\000"
 1246      325F7400 
 1247              	.LASF19:
 1248 0263 53797374 		.ascii	"SystemCoreClock\000"
 1248      656D436F 
 1248      7265436C 
 1248      6F636B00 
 1249              	.LASF23:
 1250 0273 52455345 		.ascii	"RESERVED0\000"
 1250      52564544 
 1250      3000
ARM GAS  /tmp/ccdacDx2.s 			page 29


 1251              	.LASF24:
 1252 027d 52455345 		.ascii	"RESERVED1\000"
 1252      52564544 
 1252      3100
 1253              	.LASF28:
 1254 0287 52455345 		.ascii	"RESERVED3\000"
 1254      52564544 
 1254      3300
 1255              	.LASF29:
 1256 0291 52455345 		.ascii	"RESERVED4\000"
 1256      52564544 
 1256      3400
 1257              	.LASF30:
 1258 029b 52455345 		.ascii	"RESERVED5\000"
 1258      52564544 
 1258      3500
 1259              	.LASF32:
 1260 02a5 52455345 		.ascii	"RESERVED6\000"
 1260      52564544 
 1260      3600
 1261              	.LASF34:
 1262 02af 52455345 		.ascii	"RESERVED7\000"
 1262      52564544 
 1262      3700
 1263              	.LASF36:
 1264 02b9 52455345 		.ascii	"RESERVED8\000"
 1264      52564544 
 1264      3800
 1265              	.LASF37:
 1266 02c3 52455345 		.ascii	"RESERVED9\000"
 1266      52564544 
 1266      3900
 1267              	.LASF58:
 1268 02cd 53797354 		.ascii	"SysTick_Handler\000"
 1268      69636B5F 
 1268      48616E64 
 1268      6C657200 
 1269              	.LASF6:
 1270 02dd 5F5F696E 		.ascii	"__int32_t\000"
 1270      7433325F 
 1270      7400
 1271              	.LASF20:
 1272 02e7 52455345 		.ascii	"RESET\000"
 1272      5400
 1273              	.LASF62:
 1274 02ed 42757346 		.ascii	"BusFault_Handler\000"
 1274      61756C74 
 1274      5F48616E 
 1274      646C6572 
 1274      00
 1275              	.LASF17:
 1276 02fe 73697A65 		.ascii	"sizetype\000"
 1276      74797065 
 1276      00
 1277              	.LASF59:
 1278 0307 50656E64 		.ascii	"PendSV_Handler\000"
 1278      53565F48 
ARM GAS  /tmp/ccdacDx2.s 			page 30


 1278      616E646C 
 1278      657200
 1279              	.LASF63:
 1280 0316 4D656D4D 		.ascii	"MemManage_Handler\000"
 1280      616E6167 
 1280      655F4861 
 1280      6E646C65 
 1280      7200
 1281              	.LASF18:
 1282 0328 49544D5F 		.ascii	"ITM_RxBuffer\000"
 1282      52784275 
 1282      66666572 
 1282      00
 1283              	.LASF22:
 1284 0335 454E4142 		.ascii	"ENABLE\000"
 1284      4C4500
 1285              		.ident	"GCC: (Arch Repository) 6.1.1 20160526"
ARM GAS  /tmp/ccdacDx2.s 			page 31


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_it.c
     /tmp/ccdacDx2.s:20     .bss:0000000000000000 counter
     /tmp/ccdacDx2.s:17     .bss:0000000000000000 $d
     /tmp/ccdacDx2.s:23     .text:0000000000000000 $t
     /tmp/ccdacDx2.s:30     .text:0000000000000000 NMI_Handler
     /tmp/ccdacDx2.s:77     .text:0000000000000032 HardFault_Handler
     /tmp/ccdacDx2.s:102    .text:0000000000000038 MemManage_Handler
     /tmp/ccdacDx2.s:127    .text:000000000000003e BusFault_Handler
     /tmp/ccdacDx2.s:152    .text:0000000000000044 SVC_Handler
     /tmp/ccdacDx2.s:183    .text:0000000000000050 DebugMon_Handler
     /tmp/ccdacDx2.s:214    .text:000000000000005c PendSV_Handler
     /tmp/ccdacDx2.s:245    .text:0000000000000068 SysTick_Handler
     /tmp/ccdacDx2.s:276    .text:0000000000000074 TIM2_IRQHandler
     /tmp/ccdacDx2.s:312    .text:00000000000000a0 $d
     /tmp/ccdacDx2.s:316    .text:00000000000000a4 $t
     /tmp/ccdacDx2.s:323    .text:00000000000000a4 RCC_IRQHandler
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_GetITStatus
RCC_HSEConfig
RCC_ITConfig
RCC_ClearITPendingBit
TIM_GetITStatus
TIM_ClearITPendingBit
RCC_GetFlagStatus
RCC_PLLCmd
RCC_SYSCLKConfig
