ARM GAS  /tmp/ccB6Y6ca.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.data
  16              		.align	2
  17              		.type	APBAHBPrescTable, %object
  18              		.size	APBAHBPrescTable, 16
  19              	APBAHBPrescTable:
  20 0000 00       		.byte	0
  21 0001 00       		.byte	0
  22 0002 00       		.byte	0
  23 0003 00       		.byte	0
  24 0004 01       		.byte	1
  25 0005 02       		.byte	2
  26 0006 03       		.byte	3
  27 0007 04       		.byte	4
  28 0008 01       		.byte	1
  29 0009 02       		.byte	2
  30 000a 03       		.byte	3
  31 000b 04       		.byte	4
  32 000c 06       		.byte	6
  33 000d 07       		.byte	7
  34 000e 08       		.byte	8
  35 000f 09       		.byte	9
  36              		.align	2
  37              		.type	ADCPrescTable, %object
  38              		.size	ADCPrescTable, 4
  39              	ADCPrescTable:
  40 0010 02       		.byte	2
  41 0011 04       		.byte	4
  42 0012 06       		.byte	6
  43 0013 08       		.byte	8
  44              		.text
  45              		.align	1
  46              		.global	RCC_DeInit
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu softvfp
  51              		.type	RCC_DeInit, %function
  52              	RCC_DeInit:
  53              	.LFB63:
  54              		.file 1 "common/stm32f10x_rcc.c"
   1:common/stm32f10x_rcc.c **** /**
   2:common/stm32f10x_rcc.c ****   ******************************************************************************
   3:common/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
ARM GAS  /tmp/ccB6Y6ca.s 			page 2


   4:common/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:common/stm32f10x_rcc.c ****   * @version V3.5.0
   6:common/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:common/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:common/stm32f10x_rcc.c ****   ******************************************************************************
   9:common/stm32f10x_rcc.c ****   * @attention
  10:common/stm32f10x_rcc.c ****   *
  11:common/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:common/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:common/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:common/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:common/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:common/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:common/stm32f10x_rcc.c ****   *
  18:common/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:common/stm32f10x_rcc.c ****   ******************************************************************************
  20:common/stm32f10x_rcc.c ****   */
  21:common/stm32f10x_rcc.c **** 
  22:common/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:common/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:common/stm32f10x_rcc.c **** #include "stm32f10x_conf.h"
  25:common/stm32f10x_rcc.c **** 
  26:common/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:common/stm32f10x_rcc.c ****   * @{
  28:common/stm32f10x_rcc.c ****   */
  29:common/stm32f10x_rcc.c **** 
  30:common/stm32f10x_rcc.c **** /** @defgroup RCC 
  31:common/stm32f10x_rcc.c ****   * @brief RCC driver modules
  32:common/stm32f10x_rcc.c ****   * @{
  33:common/stm32f10x_rcc.c ****   */ 
  34:common/stm32f10x_rcc.c **** 
  35:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  36:common/stm32f10x_rcc.c ****   * @{
  37:common/stm32f10x_rcc.c ****   */
  38:common/stm32f10x_rcc.c **** 
  39:common/stm32f10x_rcc.c **** /**
  40:common/stm32f10x_rcc.c ****   * @}
  41:common/stm32f10x_rcc.c ****   */
  42:common/stm32f10x_rcc.c **** 
  43:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  44:common/stm32f10x_rcc.c ****   * @{
  45:common/stm32f10x_rcc.c ****   */
  46:common/stm32f10x_rcc.c **** 
  47:common/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  48:common/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  49:common/stm32f10x_rcc.c **** 
  50:common/stm32f10x_rcc.c **** /* --- CR Register ---*/
  51:common/stm32f10x_rcc.c **** 
  52:common/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  53:common/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  54:common/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  55:common/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  56:common/stm32f10x_rcc.c **** 
  57:common/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  58:common/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  59:common/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  60:common/stm32f10x_rcc.c **** 
ARM GAS  /tmp/ccB6Y6ca.s 			page 3


  61:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  62:common/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  63:common/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  64:common/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  65:common/stm32f10x_rcc.c **** 
  66:common/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  67:common/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  68:common/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  69:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  70:common/stm32f10x_rcc.c **** 
  71:common/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  72:common/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  73:common/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  74:common/stm32f10x_rcc.c **** 
  75:common/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  76:common/stm32f10x_rcc.c **** 
  77:common/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  78:common/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  79:common/stm32f10x_rcc.c **** 
  80:common/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  81:common/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  82:common/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  83:common/stm32f10x_rcc.c **** #else
  84:common/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  85:common/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  86:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  87:common/stm32f10x_rcc.c **** 
  88:common/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  89:common/stm32f10x_rcc.c **** 
  90:common/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  91:common/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  92:common/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  93:common/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  94:common/stm32f10x_rcc.c **** 
  95:common/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  96:common/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  97:common/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  98:common/stm32f10x_rcc.c **** 
  99:common/stm32f10x_rcc.c **** /* --- CSR Register ---*/
 100:common/stm32f10x_rcc.c **** 
 101:common/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 102:common/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 103:common/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 104:common/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:common/stm32f10x_rcc.c **** 
 106:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 107:common/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 108:common/stm32f10x_rcc.c **** 
 109:common/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 110:common/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 111:common/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 112:common/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 113:common/stm32f10x_rcc.c **** 
 114:common/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 115:common/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 116:common/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 117:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
ARM GAS  /tmp/ccB6Y6ca.s 			page 4


 118:common/stm32f10x_rcc.c **** 
 119:common/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 120:common/stm32f10x_rcc.c **** 
 121:common/stm32f10x_rcc.c **** /* CR register bit mask */
 122:common/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 123:common/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 124:common/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 125:common/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 126:common/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 127:common/stm32f10x_rcc.c **** 
 128:common/stm32f10x_rcc.c **** /* CFGR register bit mask */
 129:common/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 130:common/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 131:common/stm32f10x_rcc.c **** #else
 132:common/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 133:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 134:common/stm32f10x_rcc.c **** 
 135:common/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 136:common/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 137:common/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 138:common/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 139:common/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 140:common/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 141:common/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 142:common/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 143:common/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 144:common/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 145:common/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 146:common/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 147:common/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 148:common/stm32f10x_rcc.c **** 
 149:common/stm32f10x_rcc.c **** /* CSR register bit mask */
 150:common/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 151:common/stm32f10x_rcc.c **** 
 152:common/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 153:common/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 154:common/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 155:common/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 156:common/stm32f10x_rcc.c **** #endif
 157:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 158:common/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 159:common/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 160:common/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 161:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 162:common/stm32f10x_rcc.c **** 
 163:common/stm32f10x_rcc.c **** /* RCC Flag Mask */
 164:common/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 165:common/stm32f10x_rcc.c **** 
 166:common/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 167:common/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 168:common/stm32f10x_rcc.c **** 
 169:common/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 170:common/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 171:common/stm32f10x_rcc.c **** 
 172:common/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 173:common/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 174:common/stm32f10x_rcc.c **** 
ARM GAS  /tmp/ccB6Y6ca.s 			page 5


 175:common/stm32f10x_rcc.c **** /* BDCR register base address */
 176:common/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 177:common/stm32f10x_rcc.c **** 
 178:common/stm32f10x_rcc.c **** /**
 179:common/stm32f10x_rcc.c ****   * @}
 180:common/stm32f10x_rcc.c ****   */ 
 181:common/stm32f10x_rcc.c **** 
 182:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 183:common/stm32f10x_rcc.c ****   * @{
 184:common/stm32f10x_rcc.c ****   */ 
 185:common/stm32f10x_rcc.c **** 
 186:common/stm32f10x_rcc.c **** /**
 187:common/stm32f10x_rcc.c ****   * @}
 188:common/stm32f10x_rcc.c ****   */ 
 189:common/stm32f10x_rcc.c **** 
 190:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 191:common/stm32f10x_rcc.c ****   * @{
 192:common/stm32f10x_rcc.c ****   */ 
 193:common/stm32f10x_rcc.c **** 
 194:common/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 195:common/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 196:common/stm32f10x_rcc.c **** 
 197:common/stm32f10x_rcc.c **** /**
 198:common/stm32f10x_rcc.c ****   * @}
 199:common/stm32f10x_rcc.c ****   */
 200:common/stm32f10x_rcc.c **** 
 201:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 202:common/stm32f10x_rcc.c ****   * @{
 203:common/stm32f10x_rcc.c ****   */
 204:common/stm32f10x_rcc.c **** 
 205:common/stm32f10x_rcc.c **** /**
 206:common/stm32f10x_rcc.c ****   * @}
 207:common/stm32f10x_rcc.c ****   */
 208:common/stm32f10x_rcc.c **** 
 209:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 210:common/stm32f10x_rcc.c ****   * @{
 211:common/stm32f10x_rcc.c ****   */
 212:common/stm32f10x_rcc.c **** 
 213:common/stm32f10x_rcc.c **** /**
 214:common/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 215:common/stm32f10x_rcc.c ****   * @param  None
 216:common/stm32f10x_rcc.c ****   * @retval None
 217:common/stm32f10x_rcc.c ****   */
 218:common/stm32f10x_rcc.c **** void RCC_DeInit(void)
 219:common/stm32f10x_rcc.c **** {
  55              		.loc 1 219 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 1, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60 0000 80B4     		push	{r7}
  61              		.cfi_def_cfa_offset 4
  62              		.cfi_offset 7, -4
  63 0002 00AF     		add	r7, sp, #0
  64              		.cfi_def_cfa_register 7
 220:common/stm32f10x_rcc.c ****   /* Set HSION bit */
 221:common/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
ARM GAS  /tmp/ccB6Y6ca.s 			page 6


  65              		.loc 1 221 0
  66 0004 134A     		ldr	r2, .L2
  67 0006 134B     		ldr	r3, .L2
  68 0008 1B68     		ldr	r3, [r3]
  69 000a 43F00103 		orr	r3, r3, #1
  70 000e 1360     		str	r3, [r2]
 222:common/stm32f10x_rcc.c **** 
 223:common/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 224:common/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 225:common/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  71              		.loc 1 225 0
  72 0010 1049     		ldr	r1, .L2
  73 0012 104B     		ldr	r3, .L2
  74 0014 5A68     		ldr	r2, [r3, #4]
  75 0016 104B     		ldr	r3, .L2+4
  76 0018 1340     		ands	r3, r3, r2
  77 001a 4B60     		str	r3, [r1, #4]
 226:common/stm32f10x_rcc.c **** #else
 227:common/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 228:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 229:common/stm32f10x_rcc.c ****   
 230:common/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 231:common/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  78              		.loc 1 231 0
  79 001c 0D4A     		ldr	r2, .L2
  80 001e 0D4B     		ldr	r3, .L2
  81 0020 1B68     		ldr	r3, [r3]
  82 0022 23F08473 		bic	r3, r3, #17301504
  83 0026 23F48033 		bic	r3, r3, #65536
  84 002a 1360     		str	r3, [r2]
 232:common/stm32f10x_rcc.c **** 
 233:common/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 234:common/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  85              		.loc 1 234 0
  86 002c 094A     		ldr	r2, .L2
  87 002e 094B     		ldr	r3, .L2
  88 0030 1B68     		ldr	r3, [r3]
  89 0032 23F48023 		bic	r3, r3, #262144
  90 0036 1360     		str	r3, [r2]
 235:common/stm32f10x_rcc.c **** 
 236:common/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 237:common/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  91              		.loc 1 237 0
  92 0038 064A     		ldr	r2, .L2
  93 003a 064B     		ldr	r3, .L2
  94 003c 5B68     		ldr	r3, [r3, #4]
  95 003e 23F4FE03 		bic	r3, r3, #8323072
  96 0042 5360     		str	r3, [r2, #4]
 238:common/stm32f10x_rcc.c **** 
 239:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 240:common/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 241:common/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 242:common/stm32f10x_rcc.c **** 
 243:common/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 244:common/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 245:common/stm32f10x_rcc.c **** 
 246:common/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
ARM GAS  /tmp/ccB6Y6ca.s 			page 7


 247:common/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 248:common/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 249:common/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 250:common/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 251:common/stm32f10x_rcc.c **** 
 252:common/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 253:common/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 254:common/stm32f10x_rcc.c **** #else
 255:common/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 256:common/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
  97              		.loc 1 256 0
  98 0044 034B     		ldr	r3, .L2
  99 0046 4FF41F02 		mov	r2, #10420224
 100 004a 9A60     		str	r2, [r3, #8]
 257:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 258:common/stm32f10x_rcc.c **** 
 259:common/stm32f10x_rcc.c **** }
 101              		.loc 1 259 0
 102 004c 00BF     		nop
 103 004e BD46     		mov	sp, r7
 104              		.cfi_def_cfa_register 13
 105              		@ sp needed
 106 0050 80BC     		pop	{r7}
 107              		.cfi_restore 7
 108              		.cfi_def_cfa_offset 0
 109 0052 7047     		bx	lr
 110              	.L3:
 111              		.align	2
 112              	.L2:
 113 0054 00100240 		.word	1073876992
 114 0058 0000FFF8 		.word	-117506048
 115              		.cfi_endproc
 116              	.LFE63:
 117              		.size	RCC_DeInit, .-RCC_DeInit
 118              		.align	1
 119              		.global	RCC_HSEConfig
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu softvfp
 124              		.type	RCC_HSEConfig, %function
 125              	RCC_HSEConfig:
 126              	.LFB64:
 260:common/stm32f10x_rcc.c **** 
 261:common/stm32f10x_rcc.c **** /**
 262:common/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 263:common/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 264:common/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 265:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 266:common/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 267:common/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 268:common/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 269:common/stm32f10x_rcc.c ****   * @retval None
 270:common/stm32f10x_rcc.c ****   */
 271:common/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 272:common/stm32f10x_rcc.c **** {
 127              		.loc 1 272 0
ARM GAS  /tmp/ccB6Y6ca.s 			page 8


 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 8
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 005c 80B4     		push	{r7}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 005e 83B0     		sub	sp, sp, #12
 136              		.cfi_def_cfa_offset 16
 137 0060 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 139 0062 7860     		str	r0, [r7, #4]
 273:common/stm32f10x_rcc.c ****   /* Check the parameters */
 274:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 275:common/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 276:common/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 277:common/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 140              		.loc 1 277 0
 141 0064 134A     		ldr	r2, .L9
 142 0066 134B     		ldr	r3, .L9
 143 0068 1B68     		ldr	r3, [r3]
 144 006a 23F48033 		bic	r3, r3, #65536
 145 006e 1360     		str	r3, [r2]
 278:common/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 279:common/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 146              		.loc 1 279 0
 147 0070 104A     		ldr	r2, .L9
 148 0072 104B     		ldr	r3, .L9
 149 0074 1B68     		ldr	r3, [r3]
 150 0076 23F48023 		bic	r3, r3, #262144
 151 007a 1360     		str	r3, [r2]
 280:common/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 281:common/stm32f10x_rcc.c ****   switch(RCC_HSE)
 152              		.loc 1 281 0
 153 007c 7B68     		ldr	r3, [r7, #4]
 154 007e B3F5803F 		cmp	r3, #65536
 155 0082 03D0     		beq	.L6
 156 0084 B3F5802F 		cmp	r3, #262144
 157 0088 07D0     		beq	.L7
 282:common/stm32f10x_rcc.c ****   {
 283:common/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 284:common/stm32f10x_rcc.c ****       /* Set HSEON bit */
 285:common/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 286:common/stm32f10x_rcc.c ****       break;
 287:common/stm32f10x_rcc.c ****       
 288:common/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 289:common/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 290:common/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 291:common/stm32f10x_rcc.c ****       break;
 292:common/stm32f10x_rcc.c ****       
 293:common/stm32f10x_rcc.c ****     default:
 294:common/stm32f10x_rcc.c ****       break;
 158              		.loc 1 294 0
 159 008a 0DE0     		b	.L8
 160              	.L6:
 285:common/stm32f10x_rcc.c ****       break;
 161              		.loc 1 285 0
ARM GAS  /tmp/ccB6Y6ca.s 			page 9


 162 008c 094A     		ldr	r2, .L9
 163 008e 094B     		ldr	r3, .L9
 164 0090 1B68     		ldr	r3, [r3]
 165 0092 43F48033 		orr	r3, r3, #65536
 166 0096 1360     		str	r3, [r2]
 286:common/stm32f10x_rcc.c ****       
 167              		.loc 1 286 0
 168 0098 06E0     		b	.L8
 169              	.L7:
 290:common/stm32f10x_rcc.c ****       break;
 170              		.loc 1 290 0
 171 009a 064A     		ldr	r2, .L9
 172 009c 054B     		ldr	r3, .L9
 173 009e 1B68     		ldr	r3, [r3]
 174 00a0 43F4A023 		orr	r3, r3, #327680
 175 00a4 1360     		str	r3, [r2]
 291:common/stm32f10x_rcc.c ****       
 176              		.loc 1 291 0
 177 00a6 00BF     		nop
 178              	.L8:
 295:common/stm32f10x_rcc.c ****   }
 296:common/stm32f10x_rcc.c **** }
 179              		.loc 1 296 0
 180 00a8 00BF     		nop
 181 00aa 0C37     		adds	r7, r7, #12
 182              		.cfi_def_cfa_offset 4
 183 00ac BD46     		mov	sp, r7
 184              		.cfi_def_cfa_register 13
 185              		@ sp needed
 186 00ae 80BC     		pop	{r7}
 187              		.cfi_restore 7
 188              		.cfi_def_cfa_offset 0
 189 00b0 7047     		bx	lr
 190              	.L10:
 191 00b2 00BF     		.align	2
 192              	.L9:
 193 00b4 00100240 		.word	1073876992
 194              		.cfi_endproc
 195              	.LFE64:
 196              		.size	RCC_HSEConfig, .-RCC_HSEConfig
 197              		.align	1
 198              		.global	RCC_WaitForHSEStartUp
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu softvfp
 203              		.type	RCC_WaitForHSEStartUp, %function
 204              	RCC_WaitForHSEStartUp:
 205              	.LFB65:
 297:common/stm32f10x_rcc.c **** 
 298:common/stm32f10x_rcc.c **** /**
 299:common/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 300:common/stm32f10x_rcc.c ****   * @param  None
 301:common/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 302:common/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 303:common/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 304:common/stm32f10x_rcc.c ****   */
ARM GAS  /tmp/ccB6Y6ca.s 			page 10


 305:common/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 306:common/stm32f10x_rcc.c **** {
 206              		.loc 1 306 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210 00b8 80B5     		push	{r7, lr}
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 00ba 82B0     		sub	sp, sp, #8
 215              		.cfi_def_cfa_offset 16
 216 00bc 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
 307:common/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 218              		.loc 1 307 0
 219 00be 0023     		movs	r3, #0
 220 00c0 3B60     		str	r3, [r7]
 308:common/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 221              		.loc 1 308 0
 222 00c2 0023     		movs	r3, #0
 223 00c4 FB71     		strb	r3, [r7, #7]
 309:common/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 224              		.loc 1 309 0
 225 00c6 0023     		movs	r3, #0
 226 00c8 BB71     		strb	r3, [r7, #6]
 227              	.L13:
 310:common/stm32f10x_rcc.c ****   
 311:common/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 312:common/stm32f10x_rcc.c ****   do
 313:common/stm32f10x_rcc.c ****   {
 314:common/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 228              		.loc 1 314 0 discriminator 2
 229 00ca 3120     		movs	r0, #49
 230 00cc FFF7FEFF 		bl	RCC_GetFlagStatus
 231 00d0 0346     		mov	r3, r0
 232 00d2 BB71     		strb	r3, [r7, #6]
 315:common/stm32f10x_rcc.c ****     StartUpCounter++;  
 233              		.loc 1 315 0 discriminator 2
 234 00d4 3B68     		ldr	r3, [r7]
 235 00d6 0133     		adds	r3, r3, #1
 236 00d8 3B60     		str	r3, [r7]
 316:common/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 237              		.loc 1 316 0 discriminator 2
 238 00da 3B68     		ldr	r3, [r7]
 239 00dc B3F5A06F 		cmp	r3, #1280
 240 00e0 02D0     		beq	.L12
 241              		.loc 1 316 0 is_stmt 0 discriminator 1
 242 00e2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 243 00e4 002B     		cmp	r3, #0
 244 00e6 F0D0     		beq	.L13
 245              	.L12:
 317:common/stm32f10x_rcc.c ****   
 318:common/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 246              		.loc 1 318 0 is_stmt 1
 247 00e8 3120     		movs	r0, #49
 248 00ea FFF7FEFF 		bl	RCC_GetFlagStatus
ARM GAS  /tmp/ccB6Y6ca.s 			page 11


 249 00ee 0346     		mov	r3, r0
 250 00f0 002B     		cmp	r3, #0
 251 00f2 02D0     		beq	.L14
 319:common/stm32f10x_rcc.c ****   {
 320:common/stm32f10x_rcc.c ****     status = SUCCESS;
 252              		.loc 1 320 0
 253 00f4 0123     		movs	r3, #1
 254 00f6 FB71     		strb	r3, [r7, #7]
 255 00f8 01E0     		b	.L15
 256              	.L14:
 321:common/stm32f10x_rcc.c ****   }
 322:common/stm32f10x_rcc.c ****   else
 323:common/stm32f10x_rcc.c ****   {
 324:common/stm32f10x_rcc.c ****     status = ERROR;
 257              		.loc 1 324 0
 258 00fa 0023     		movs	r3, #0
 259 00fc FB71     		strb	r3, [r7, #7]
 260              	.L15:
 325:common/stm32f10x_rcc.c ****   }  
 326:common/stm32f10x_rcc.c ****   return (status);
 261              		.loc 1 326 0
 262 00fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 327:common/stm32f10x_rcc.c **** }
 263              		.loc 1 327 0
 264 0100 1846     		mov	r0, r3
 265 0102 0837     		adds	r7, r7, #8
 266              		.cfi_def_cfa_offset 8
 267 0104 BD46     		mov	sp, r7
 268              		.cfi_def_cfa_register 13
 269              		@ sp needed
 270 0106 80BD     		pop	{r7, pc}
 271              		.cfi_endproc
 272              	.LFE65:
 273              		.size	RCC_WaitForHSEStartUp, .-RCC_WaitForHSEStartUp
 274              		.align	1
 275              		.global	RCC_AdjustHSICalibrationValue
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu softvfp
 280              		.type	RCC_AdjustHSICalibrationValue, %function
 281              	RCC_AdjustHSICalibrationValue:
 282              	.LFB66:
 328:common/stm32f10x_rcc.c **** 
 329:common/stm32f10x_rcc.c **** /**
 330:common/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 331:common/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 332:common/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 333:common/stm32f10x_rcc.c ****   * @retval None
 334:common/stm32f10x_rcc.c ****   */
 335:common/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 336:common/stm32f10x_rcc.c **** {
 283              		.loc 1 336 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 16
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287              		@ link register save eliminated.
ARM GAS  /tmp/ccB6Y6ca.s 			page 12


 288 0108 80B4     		push	{r7}
 289              		.cfi_def_cfa_offset 4
 290              		.cfi_offset 7, -4
 291 010a 85B0     		sub	sp, sp, #20
 292              		.cfi_def_cfa_offset 24
 293 010c 00AF     		add	r7, sp, #0
 294              		.cfi_def_cfa_register 7
 295 010e 0346     		mov	r3, r0
 296 0110 FB71     		strb	r3, [r7, #7]
 337:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 297              		.loc 1 337 0
 298 0112 0023     		movs	r3, #0
 299 0114 FB60     		str	r3, [r7, #12]
 338:common/stm32f10x_rcc.c ****   /* Check the parameters */
 339:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 340:common/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 300              		.loc 1 340 0
 301 0116 0A4B     		ldr	r3, .L18
 302 0118 1B68     		ldr	r3, [r3]
 303 011a FB60     		str	r3, [r7, #12]
 341:common/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 342:common/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 304              		.loc 1 342 0
 305 011c FB68     		ldr	r3, [r7, #12]
 306 011e 23F0F803 		bic	r3, r3, #248
 307 0122 FB60     		str	r3, [r7, #12]
 343:common/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 344:common/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 308              		.loc 1 344 0
 309 0124 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 310 0126 DB00     		lsls	r3, r3, #3
 311 0128 FA68     		ldr	r2, [r7, #12]
 312 012a 1343     		orrs	r3, r3, r2
 313 012c FB60     		str	r3, [r7, #12]
 345:common/stm32f10x_rcc.c ****   /* Store the new value */
 346:common/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 314              		.loc 1 346 0
 315 012e 044A     		ldr	r2, .L18
 316 0130 FB68     		ldr	r3, [r7, #12]
 317 0132 1360     		str	r3, [r2]
 347:common/stm32f10x_rcc.c **** }
 318              		.loc 1 347 0
 319 0134 00BF     		nop
 320 0136 1437     		adds	r7, r7, #20
 321              		.cfi_def_cfa_offset 4
 322 0138 BD46     		mov	sp, r7
 323              		.cfi_def_cfa_register 13
 324              		@ sp needed
 325 013a 80BC     		pop	{r7}
 326              		.cfi_restore 7
 327              		.cfi_def_cfa_offset 0
 328 013c 7047     		bx	lr
 329              	.L19:
 330 013e 00BF     		.align	2
 331              	.L18:
 332 0140 00100240 		.word	1073876992
 333              		.cfi_endproc
ARM GAS  /tmp/ccB6Y6ca.s 			page 13


 334              	.LFE66:
 335              		.size	RCC_AdjustHSICalibrationValue, .-RCC_AdjustHSICalibrationValue
 336              		.align	1
 337              		.global	RCC_HSICmd
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu softvfp
 342              		.type	RCC_HSICmd, %function
 343              	RCC_HSICmd:
 344              	.LFB67:
 348:common/stm32f10x_rcc.c **** 
 349:common/stm32f10x_rcc.c **** /**
 350:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 351:common/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 352:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 353:common/stm32f10x_rcc.c ****   * @retval None
 354:common/stm32f10x_rcc.c ****   */
 355:common/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 356:common/stm32f10x_rcc.c **** {
 345              		.loc 1 356 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 8
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350 0144 80B4     		push	{r7}
 351              		.cfi_def_cfa_offset 4
 352              		.cfi_offset 7, -4
 353 0146 83B0     		sub	sp, sp, #12
 354              		.cfi_def_cfa_offset 16
 355 0148 00AF     		add	r7, sp, #0
 356              		.cfi_def_cfa_register 7
 357 014a 0346     		mov	r3, r0
 358 014c FB71     		strb	r3, [r7, #7]
 357:common/stm32f10x_rcc.c ****   /* Check the parameters */
 358:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 359:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 359              		.loc 1 359 0
 360 014e 044A     		ldr	r2, .L21
 361 0150 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 362 0152 1360     		str	r3, [r2]
 360:common/stm32f10x_rcc.c **** }
 363              		.loc 1 360 0
 364 0154 00BF     		nop
 365 0156 0C37     		adds	r7, r7, #12
 366              		.cfi_def_cfa_offset 4
 367 0158 BD46     		mov	sp, r7
 368              		.cfi_def_cfa_register 13
 369              		@ sp needed
 370 015a 80BC     		pop	{r7}
 371              		.cfi_restore 7
 372              		.cfi_def_cfa_offset 0
 373 015c 7047     		bx	lr
 374              	.L22:
 375 015e 00BF     		.align	2
 376              	.L21:
 377 0160 00004242 		.word	1111621632
ARM GAS  /tmp/ccB6Y6ca.s 			page 14


 378              		.cfi_endproc
 379              	.LFE67:
 380              		.size	RCC_HSICmd, .-RCC_HSICmd
 381              		.align	1
 382              		.global	RCC_PLLConfig
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu softvfp
 387              		.type	RCC_PLLConfig, %function
 388              	RCC_PLLConfig:
 389              	.LFB68:
 361:common/stm32f10x_rcc.c **** 
 362:common/stm32f10x_rcc.c **** /**
 363:common/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 364:common/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 365:common/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 366:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 367:common/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 368:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 369:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 370:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 371:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 372:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 373:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 374:common/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 375:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 376:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 377:common/stm32f10x_rcc.c ****   * @retval None
 378:common/stm32f10x_rcc.c ****   */
 379:common/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 380:common/stm32f10x_rcc.c **** {
 390              		.loc 1 380 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 16
 393              		@ frame_needed = 1, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 395 0164 80B4     		push	{r7}
 396              		.cfi_def_cfa_offset 4
 397              		.cfi_offset 7, -4
 398 0166 85B0     		sub	sp, sp, #20
 399              		.cfi_def_cfa_offset 24
 400 0168 00AF     		add	r7, sp, #0
 401              		.cfi_def_cfa_register 7
 402 016a 7860     		str	r0, [r7, #4]
 403 016c 3960     		str	r1, [r7]
 381:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 404              		.loc 1 381 0
 405 016e 0023     		movs	r3, #0
 406 0170 FB60     		str	r3, [r7, #12]
 382:common/stm32f10x_rcc.c **** 
 383:common/stm32f10x_rcc.c ****   /* Check the parameters */
 384:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 385:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 386:common/stm32f10x_rcc.c **** 
 387:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 407              		.loc 1 387 0
ARM GAS  /tmp/ccB6Y6ca.s 			page 15


 408 0172 0A4B     		ldr	r3, .L24
 409 0174 5B68     		ldr	r3, [r3, #4]
 410 0176 FB60     		str	r3, [r7, #12]
 388:common/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 389:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 411              		.loc 1 389 0
 412 0178 FB68     		ldr	r3, [r7, #12]
 413 017a 23F47C13 		bic	r3, r3, #4128768
 414 017e FB60     		str	r3, [r7, #12]
 390:common/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 391:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 415              		.loc 1 391 0
 416 0180 7A68     		ldr	r2, [r7, #4]
 417 0182 3B68     		ldr	r3, [r7]
 418 0184 1343     		orrs	r3, r3, r2
 419 0186 FA68     		ldr	r2, [r7, #12]
 420 0188 1343     		orrs	r3, r3, r2
 421 018a FB60     		str	r3, [r7, #12]
 392:common/stm32f10x_rcc.c ****   /* Store the new value */
 393:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 422              		.loc 1 393 0
 423 018c 034A     		ldr	r2, .L24
 424 018e FB68     		ldr	r3, [r7, #12]
 425 0190 5360     		str	r3, [r2, #4]
 394:common/stm32f10x_rcc.c **** }
 426              		.loc 1 394 0
 427 0192 00BF     		nop
 428 0194 1437     		adds	r7, r7, #20
 429              		.cfi_def_cfa_offset 4
 430 0196 BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 0198 80BC     		pop	{r7}
 434              		.cfi_restore 7
 435              		.cfi_def_cfa_offset 0
 436 019a 7047     		bx	lr
 437              	.L25:
 438              		.align	2
 439              	.L24:
 440 019c 00100240 		.word	1073876992
 441              		.cfi_endproc
 442              	.LFE68:
 443              		.size	RCC_PLLConfig, .-RCC_PLLConfig
 444              		.align	1
 445              		.global	RCC_PLLCmd
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 450              		.type	RCC_PLLCmd, %function
 451              	RCC_PLLCmd:
 452              	.LFB69:
 395:common/stm32f10x_rcc.c **** 
 396:common/stm32f10x_rcc.c **** /**
 397:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 398:common/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 399:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/ccB6Y6ca.s 			page 16


 400:common/stm32f10x_rcc.c ****   * @retval None
 401:common/stm32f10x_rcc.c ****   */
 402:common/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 403:common/stm32f10x_rcc.c **** {
 453              		.loc 1 403 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 8
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458 01a0 80B4     		push	{r7}
 459              		.cfi_def_cfa_offset 4
 460              		.cfi_offset 7, -4
 461 01a2 83B0     		sub	sp, sp, #12
 462              		.cfi_def_cfa_offset 16
 463 01a4 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 465 01a6 0346     		mov	r3, r0
 466 01a8 FB71     		strb	r3, [r7, #7]
 404:common/stm32f10x_rcc.c ****   /* Check the parameters */
 405:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 406:common/stm32f10x_rcc.c **** 
 407:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 467              		.loc 1 407 0
 468 01aa 044A     		ldr	r2, .L27
 469 01ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 470 01ae 1360     		str	r3, [r2]
 408:common/stm32f10x_rcc.c **** }
 471              		.loc 1 408 0
 472 01b0 00BF     		nop
 473 01b2 0C37     		adds	r7, r7, #12
 474              		.cfi_def_cfa_offset 4
 475 01b4 BD46     		mov	sp, r7
 476              		.cfi_def_cfa_register 13
 477              		@ sp needed
 478 01b6 80BC     		pop	{r7}
 479              		.cfi_restore 7
 480              		.cfi_def_cfa_offset 0
 481 01b8 7047     		bx	lr
 482              	.L28:
 483 01ba 00BF     		.align	2
 484              	.L27:
 485 01bc 60004242 		.word	1111621728
 486              		.cfi_endproc
 487              	.LFE69:
 488              		.size	RCC_PLLCmd, .-RCC_PLLCmd
 489              		.align	1
 490              		.global	RCC_SYSCLKConfig
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 494              		.fpu softvfp
 495              		.type	RCC_SYSCLKConfig, %function
 496              	RCC_SYSCLKConfig:
 497              	.LFB70:
 409:common/stm32f10x_rcc.c **** 
 410:common/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 411:common/stm32f10x_rcc.c **** /**
ARM GAS  /tmp/ccB6Y6ca.s 			page 17


 412:common/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 413:common/stm32f10x_rcc.c ****   * @note 
 414:common/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 415:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 416:common/stm32f10x_rcc.c ****   *     devices.
 417:common/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 418:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 419:common/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 420:common/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 421:common/stm32f10x_rcc.c ****   * @note 
 422:common/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 423:common/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 424:common/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 425:common/stm32f10x_rcc.c ****   * @retval None
 426:common/stm32f10x_rcc.c ****   */
 427:common/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 428:common/stm32f10x_rcc.c **** {
 429:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 430:common/stm32f10x_rcc.c ****   
 431:common/stm32f10x_rcc.c ****   /* Check the parameters */
 432:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 433:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 434:common/stm32f10x_rcc.c **** 
 435:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 436:common/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 437:common/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 438:common/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 439:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 440:common/stm32f10x_rcc.c ****   /* Store the new value */
 441:common/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 442:common/stm32f10x_rcc.c **** }
 443:common/stm32f10x_rcc.c **** #endif
 444:common/stm32f10x_rcc.c **** 
 445:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 446:common/stm32f10x_rcc.c **** /**
 447:common/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 448:common/stm32f10x_rcc.c ****   * @note 
 449:common/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 450:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 451:common/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 452:common/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 453:common/stm32f10x_rcc.c ****   * @retval None
 454:common/stm32f10x_rcc.c ****   */
 455:common/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 456:common/stm32f10x_rcc.c **** {
 457:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 458:common/stm32f10x_rcc.c **** 
 459:common/stm32f10x_rcc.c ****   /* Check the parameters */
 460:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 461:common/stm32f10x_rcc.c **** 
 462:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 463:common/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 464:common/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 465:common/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 466:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 467:common/stm32f10x_rcc.c ****   /* Store the new value */
 468:common/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
ARM GAS  /tmp/ccB6Y6ca.s 			page 18


 469:common/stm32f10x_rcc.c **** }
 470:common/stm32f10x_rcc.c **** 
 471:common/stm32f10x_rcc.c **** /**
 472:common/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 473:common/stm32f10x_rcc.c ****   * @note
 474:common/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 475:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 476:common/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 477:common/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 478:common/stm32f10x_rcc.c ****   * @retval None
 479:common/stm32f10x_rcc.c ****   */
 480:common/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 481:common/stm32f10x_rcc.c **** {
 482:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 483:common/stm32f10x_rcc.c **** 
 484:common/stm32f10x_rcc.c ****   /* Check the parameters */
 485:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 486:common/stm32f10x_rcc.c **** 
 487:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 488:common/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 489:common/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 490:common/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 491:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 492:common/stm32f10x_rcc.c ****   /* Store the new value */
 493:common/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 494:common/stm32f10x_rcc.c **** }
 495:common/stm32f10x_rcc.c **** 
 496:common/stm32f10x_rcc.c **** 
 497:common/stm32f10x_rcc.c **** /**
 498:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 499:common/stm32f10x_rcc.c ****   * @note 
 500:common/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 501:common/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 502:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 503:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 504:common/stm32f10x_rcc.c ****   * @retval None
 505:common/stm32f10x_rcc.c ****   */
 506:common/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 507:common/stm32f10x_rcc.c **** {
 508:common/stm32f10x_rcc.c ****   /* Check the parameters */
 509:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 510:common/stm32f10x_rcc.c **** 
 511:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 512:common/stm32f10x_rcc.c **** }
 513:common/stm32f10x_rcc.c **** 
 514:common/stm32f10x_rcc.c **** 
 515:common/stm32f10x_rcc.c **** /**
 516:common/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 517:common/stm32f10x_rcc.c ****   * @note 
 518:common/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 519:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 520:common/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 521:common/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 522:common/stm32f10x_rcc.c ****   * @retval None
 523:common/stm32f10x_rcc.c ****   */
 524:common/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 525:common/stm32f10x_rcc.c **** {
ARM GAS  /tmp/ccB6Y6ca.s 			page 19


 526:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 527:common/stm32f10x_rcc.c **** 
 528:common/stm32f10x_rcc.c ****   /* Check the parameters */
 529:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 530:common/stm32f10x_rcc.c **** 
 531:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 532:common/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 533:common/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 534:common/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 535:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 536:common/stm32f10x_rcc.c ****   /* Store the new value */
 537:common/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 538:common/stm32f10x_rcc.c **** }
 539:common/stm32f10x_rcc.c **** 
 540:common/stm32f10x_rcc.c **** 
 541:common/stm32f10x_rcc.c **** /**
 542:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 543:common/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 544:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 545:common/stm32f10x_rcc.c ****   * @retval None
 546:common/stm32f10x_rcc.c ****   */
 547:common/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 548:common/stm32f10x_rcc.c **** {
 549:common/stm32f10x_rcc.c ****   /* Check the parameters */
 550:common/stm32f10x_rcc.c **** 
 551:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 552:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 553:common/stm32f10x_rcc.c **** }
 554:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 555:common/stm32f10x_rcc.c **** 
 556:common/stm32f10x_rcc.c **** /**
 557:common/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 558:common/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 559:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 560:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 561:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 562:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 563:common/stm32f10x_rcc.c ****   * @retval None
 564:common/stm32f10x_rcc.c ****   */
 565:common/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 566:common/stm32f10x_rcc.c **** {
 498              		.loc 1 566 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 16
 501              		@ frame_needed = 1, uses_anonymous_args = 0
 502              		@ link register save eliminated.
 503 01c0 80B4     		push	{r7}
 504              		.cfi_def_cfa_offset 4
 505              		.cfi_offset 7, -4
 506 01c2 85B0     		sub	sp, sp, #20
 507              		.cfi_def_cfa_offset 24
 508 01c4 00AF     		add	r7, sp, #0
 509              		.cfi_def_cfa_register 7
 510 01c6 7860     		str	r0, [r7, #4]
 567:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 511              		.loc 1 567 0
 512 01c8 0023     		movs	r3, #0
ARM GAS  /tmp/ccB6Y6ca.s 			page 20


 513 01ca FB60     		str	r3, [r7, #12]
 568:common/stm32f10x_rcc.c ****   /* Check the parameters */
 569:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 570:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 514              		.loc 1 570 0
 515 01cc 094B     		ldr	r3, .L30
 516 01ce 5B68     		ldr	r3, [r3, #4]
 517 01d0 FB60     		str	r3, [r7, #12]
 571:common/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 572:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 518              		.loc 1 572 0
 519 01d2 FB68     		ldr	r3, [r7, #12]
 520 01d4 23F00303 		bic	r3, r3, #3
 521 01d8 FB60     		str	r3, [r7, #12]
 573:common/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 574:common/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 522              		.loc 1 574 0
 523 01da FA68     		ldr	r2, [r7, #12]
 524 01dc 7B68     		ldr	r3, [r7, #4]
 525 01de 1343     		orrs	r3, r3, r2
 526 01e0 FB60     		str	r3, [r7, #12]
 575:common/stm32f10x_rcc.c ****   /* Store the new value */
 576:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 527              		.loc 1 576 0
 528 01e2 044A     		ldr	r2, .L30
 529 01e4 FB68     		ldr	r3, [r7, #12]
 530 01e6 5360     		str	r3, [r2, #4]
 577:common/stm32f10x_rcc.c **** }
 531              		.loc 1 577 0
 532 01e8 00BF     		nop
 533 01ea 1437     		adds	r7, r7, #20
 534              		.cfi_def_cfa_offset 4
 535 01ec BD46     		mov	sp, r7
 536              		.cfi_def_cfa_register 13
 537              		@ sp needed
 538 01ee 80BC     		pop	{r7}
 539              		.cfi_restore 7
 540              		.cfi_def_cfa_offset 0
 541 01f0 7047     		bx	lr
 542              	.L31:
 543 01f2 00BF     		.align	2
 544              	.L30:
 545 01f4 00100240 		.word	1073876992
 546              		.cfi_endproc
 547              	.LFE70:
 548              		.size	RCC_SYSCLKConfig, .-RCC_SYSCLKConfig
 549              		.align	1
 550              		.global	RCC_GetSYSCLKSource
 551              		.syntax unified
 552              		.thumb
 553              		.thumb_func
 554              		.fpu softvfp
 555              		.type	RCC_GetSYSCLKSource, %function
 556              	RCC_GetSYSCLKSource:
 557              	.LFB71:
 578:common/stm32f10x_rcc.c **** 
 579:common/stm32f10x_rcc.c **** /**
ARM GAS  /tmp/ccB6Y6ca.s 			page 21


 580:common/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 581:common/stm32f10x_rcc.c ****   * @param  None
 582:common/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 583:common/stm32f10x_rcc.c ****   *   be one of the following:
 584:common/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 585:common/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 586:common/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 587:common/stm32f10x_rcc.c ****   */
 588:common/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 589:common/stm32f10x_rcc.c **** {
 558              		.loc 1 589 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 563 01f8 80B4     		push	{r7}
 564              		.cfi_def_cfa_offset 4
 565              		.cfi_offset 7, -4
 566 01fa 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 590:common/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 568              		.loc 1 590 0
 569 01fc 044B     		ldr	r3, .L34
 570 01fe 5B68     		ldr	r3, [r3, #4]
 571 0200 DBB2     		uxtb	r3, r3
 572 0202 03F00C03 		and	r3, r3, #12
 573 0206 DBB2     		uxtb	r3, r3
 591:common/stm32f10x_rcc.c **** }
 574              		.loc 1 591 0
 575 0208 1846     		mov	r0, r3
 576 020a BD46     		mov	sp, r7
 577              		.cfi_def_cfa_register 13
 578              		@ sp needed
 579 020c 80BC     		pop	{r7}
 580              		.cfi_restore 7
 581              		.cfi_def_cfa_offset 0
 582 020e 7047     		bx	lr
 583              	.L35:
 584              		.align	2
 585              	.L34:
 586 0210 00100240 		.word	1073876992
 587              		.cfi_endproc
 588              	.LFE71:
 589              		.size	RCC_GetSYSCLKSource, .-RCC_GetSYSCLKSource
 590              		.align	1
 591              		.global	RCC_HCLKConfig
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 595              		.fpu softvfp
 596              		.type	RCC_HCLKConfig, %function
 597              	RCC_HCLKConfig:
 598              	.LFB72:
 592:common/stm32f10x_rcc.c **** 
 593:common/stm32f10x_rcc.c **** /**
 594:common/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 595:common/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
ARM GAS  /tmp/ccB6Y6ca.s 			page 22


 596:common/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 597:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 598:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 599:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 600:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 601:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 602:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 603:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 604:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 605:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 606:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 607:common/stm32f10x_rcc.c ****   * @retval None
 608:common/stm32f10x_rcc.c ****   */
 609:common/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 610:common/stm32f10x_rcc.c **** {
 599              		.loc 1 610 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 16
 602              		@ frame_needed = 1, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604 0214 80B4     		push	{r7}
 605              		.cfi_def_cfa_offset 4
 606              		.cfi_offset 7, -4
 607 0216 85B0     		sub	sp, sp, #20
 608              		.cfi_def_cfa_offset 24
 609 0218 00AF     		add	r7, sp, #0
 610              		.cfi_def_cfa_register 7
 611 021a 7860     		str	r0, [r7, #4]
 611:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 612              		.loc 1 611 0
 613 021c 0023     		movs	r3, #0
 614 021e FB60     		str	r3, [r7, #12]
 612:common/stm32f10x_rcc.c ****   /* Check the parameters */
 613:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 614:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 615              		.loc 1 614 0
 616 0220 094B     		ldr	r3, .L37
 617 0222 5B68     		ldr	r3, [r3, #4]
 618 0224 FB60     		str	r3, [r7, #12]
 615:common/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 616:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 619              		.loc 1 616 0
 620 0226 FB68     		ldr	r3, [r7, #12]
 621 0228 23F0F003 		bic	r3, r3, #240
 622 022c FB60     		str	r3, [r7, #12]
 617:common/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 618:common/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 623              		.loc 1 618 0
 624 022e FA68     		ldr	r2, [r7, #12]
 625 0230 7B68     		ldr	r3, [r7, #4]
 626 0232 1343     		orrs	r3, r3, r2
 627 0234 FB60     		str	r3, [r7, #12]
 619:common/stm32f10x_rcc.c ****   /* Store the new value */
 620:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 628              		.loc 1 620 0
 629 0236 044A     		ldr	r2, .L37
 630 0238 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccB6Y6ca.s 			page 23


 631 023a 5360     		str	r3, [r2, #4]
 621:common/stm32f10x_rcc.c **** }
 632              		.loc 1 621 0
 633 023c 00BF     		nop
 634 023e 1437     		adds	r7, r7, #20
 635              		.cfi_def_cfa_offset 4
 636 0240 BD46     		mov	sp, r7
 637              		.cfi_def_cfa_register 13
 638              		@ sp needed
 639 0242 80BC     		pop	{r7}
 640              		.cfi_restore 7
 641              		.cfi_def_cfa_offset 0
 642 0244 7047     		bx	lr
 643              	.L38:
 644 0246 00BF     		.align	2
 645              	.L37:
 646 0248 00100240 		.word	1073876992
 647              		.cfi_endproc
 648              	.LFE72:
 649              		.size	RCC_HCLKConfig, .-RCC_HCLKConfig
 650              		.align	1
 651              		.global	RCC_PCLK1Config
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu softvfp
 656              		.type	RCC_PCLK1Config, %function
 657              	RCC_PCLK1Config:
 658              	.LFB73:
 622:common/stm32f10x_rcc.c **** 
 623:common/stm32f10x_rcc.c **** /**
 624:common/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 625:common/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 626:common/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 627:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 628:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 629:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 630:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 631:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 632:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 633:common/stm32f10x_rcc.c ****   * @retval None
 634:common/stm32f10x_rcc.c ****   */
 635:common/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 636:common/stm32f10x_rcc.c **** {
 659              		.loc 1 636 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 16
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664 024c 80B4     		push	{r7}
 665              		.cfi_def_cfa_offset 4
 666              		.cfi_offset 7, -4
 667 024e 85B0     		sub	sp, sp, #20
 668              		.cfi_def_cfa_offset 24
 669 0250 00AF     		add	r7, sp, #0
 670              		.cfi_def_cfa_register 7
 671 0252 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccB6Y6ca.s 			page 24


 637:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 672              		.loc 1 637 0
 673 0254 0023     		movs	r3, #0
 674 0256 FB60     		str	r3, [r7, #12]
 638:common/stm32f10x_rcc.c ****   /* Check the parameters */
 639:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 640:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 675              		.loc 1 640 0
 676 0258 094B     		ldr	r3, .L40
 677 025a 5B68     		ldr	r3, [r3, #4]
 678 025c FB60     		str	r3, [r7, #12]
 641:common/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 642:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 679              		.loc 1 642 0
 680 025e FB68     		ldr	r3, [r7, #12]
 681 0260 23F4E063 		bic	r3, r3, #1792
 682 0264 FB60     		str	r3, [r7, #12]
 643:common/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 644:common/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 683              		.loc 1 644 0
 684 0266 FA68     		ldr	r2, [r7, #12]
 685 0268 7B68     		ldr	r3, [r7, #4]
 686 026a 1343     		orrs	r3, r3, r2
 687 026c FB60     		str	r3, [r7, #12]
 645:common/stm32f10x_rcc.c ****   /* Store the new value */
 646:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 688              		.loc 1 646 0
 689 026e 044A     		ldr	r2, .L40
 690 0270 FB68     		ldr	r3, [r7, #12]
 691 0272 5360     		str	r3, [r2, #4]
 647:common/stm32f10x_rcc.c **** }
 692              		.loc 1 647 0
 693 0274 00BF     		nop
 694 0276 1437     		adds	r7, r7, #20
 695              		.cfi_def_cfa_offset 4
 696 0278 BD46     		mov	sp, r7
 697              		.cfi_def_cfa_register 13
 698              		@ sp needed
 699 027a 80BC     		pop	{r7}
 700              		.cfi_restore 7
 701              		.cfi_def_cfa_offset 0
 702 027c 7047     		bx	lr
 703              	.L41:
 704 027e 00BF     		.align	2
 705              	.L40:
 706 0280 00100240 		.word	1073876992
 707              		.cfi_endproc
 708              	.LFE73:
 709              		.size	RCC_PCLK1Config, .-RCC_PCLK1Config
 710              		.align	1
 711              		.global	RCC_PCLK2Config
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu softvfp
 716              		.type	RCC_PCLK2Config, %function
 717              	RCC_PCLK2Config:
ARM GAS  /tmp/ccB6Y6ca.s 			page 25


 718              	.LFB74:
 648:common/stm32f10x_rcc.c **** 
 649:common/stm32f10x_rcc.c **** /**
 650:common/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 651:common/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 652:common/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 653:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 654:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 655:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 656:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 657:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 658:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 659:common/stm32f10x_rcc.c ****   * @retval None
 660:common/stm32f10x_rcc.c ****   */
 661:common/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 662:common/stm32f10x_rcc.c **** {
 719              		.loc 1 662 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 16
 722              		@ frame_needed = 1, uses_anonymous_args = 0
 723              		@ link register save eliminated.
 724 0284 80B4     		push	{r7}
 725              		.cfi_def_cfa_offset 4
 726              		.cfi_offset 7, -4
 727 0286 85B0     		sub	sp, sp, #20
 728              		.cfi_def_cfa_offset 24
 729 0288 00AF     		add	r7, sp, #0
 730              		.cfi_def_cfa_register 7
 731 028a 7860     		str	r0, [r7, #4]
 663:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 732              		.loc 1 663 0
 733 028c 0023     		movs	r3, #0
 734 028e FB60     		str	r3, [r7, #12]
 664:common/stm32f10x_rcc.c ****   /* Check the parameters */
 665:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 666:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 735              		.loc 1 666 0
 736 0290 094B     		ldr	r3, .L43
 737 0292 5B68     		ldr	r3, [r3, #4]
 738 0294 FB60     		str	r3, [r7, #12]
 667:common/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 668:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 739              		.loc 1 668 0
 740 0296 FB68     		ldr	r3, [r7, #12]
 741 0298 23F46053 		bic	r3, r3, #14336
 742 029c FB60     		str	r3, [r7, #12]
 669:common/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 670:common/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 743              		.loc 1 670 0
 744 029e 7B68     		ldr	r3, [r7, #4]
 745 02a0 DB00     		lsls	r3, r3, #3
 746 02a2 FA68     		ldr	r2, [r7, #12]
 747 02a4 1343     		orrs	r3, r3, r2
 748 02a6 FB60     		str	r3, [r7, #12]
 671:common/stm32f10x_rcc.c ****   /* Store the new value */
 672:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 749              		.loc 1 672 0
ARM GAS  /tmp/ccB6Y6ca.s 			page 26


 750 02a8 034A     		ldr	r2, .L43
 751 02aa FB68     		ldr	r3, [r7, #12]
 752 02ac 5360     		str	r3, [r2, #4]
 673:common/stm32f10x_rcc.c **** }
 753              		.loc 1 673 0
 754 02ae 00BF     		nop
 755 02b0 1437     		adds	r7, r7, #20
 756              		.cfi_def_cfa_offset 4
 757 02b2 BD46     		mov	sp, r7
 758              		.cfi_def_cfa_register 13
 759              		@ sp needed
 760 02b4 80BC     		pop	{r7}
 761              		.cfi_restore 7
 762              		.cfi_def_cfa_offset 0
 763 02b6 7047     		bx	lr
 764              	.L44:
 765              		.align	2
 766              	.L43:
 767 02b8 00100240 		.word	1073876992
 768              		.cfi_endproc
 769              	.LFE74:
 770              		.size	RCC_PCLK2Config, .-RCC_PCLK2Config
 771              		.align	1
 772              		.global	RCC_ITConfig
 773              		.syntax unified
 774              		.thumb
 775              		.thumb_func
 776              		.fpu softvfp
 777              		.type	RCC_ITConfig, %function
 778              	RCC_ITConfig:
 779              	.LFB75:
 674:common/stm32f10x_rcc.c **** 
 675:common/stm32f10x_rcc.c **** /**
 676:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 677:common/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 678:common/stm32f10x_rcc.c ****   * 
 679:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 680:common/stm32f10x_rcc.c ****   *   of the following values        
 681:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 682:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 683:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 684:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 685:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 686:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 687:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 688:common/stm32f10x_rcc.c ****   * 
 689:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 690:common/stm32f10x_rcc.c ****   *   following values        
 691:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 692:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 693:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 694:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 695:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 696:common/stm32f10x_rcc.c ****   *       
 697:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 698:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 699:common/stm32f10x_rcc.c ****   * @retval None
ARM GAS  /tmp/ccB6Y6ca.s 			page 27


 700:common/stm32f10x_rcc.c ****   */
 701:common/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 702:common/stm32f10x_rcc.c **** {
 780              		.loc 1 702 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 8
 783              		@ frame_needed = 1, uses_anonymous_args = 0
 784              		@ link register save eliminated.
 785 02bc 80B4     		push	{r7}
 786              		.cfi_def_cfa_offset 4
 787              		.cfi_offset 7, -4
 788 02be 83B0     		sub	sp, sp, #12
 789              		.cfi_def_cfa_offset 16
 790 02c0 00AF     		add	r7, sp, #0
 791              		.cfi_def_cfa_register 7
 792 02c2 0346     		mov	r3, r0
 793 02c4 0A46     		mov	r2, r1
 794 02c6 FB71     		strb	r3, [r7, #7]
 795 02c8 1346     		mov	r3, r2
 796 02ca BB71     		strb	r3, [r7, #6]
 703:common/stm32f10x_rcc.c ****   /* Check the parameters */
 704:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 705:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 706:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 797              		.loc 1 706 0
 798 02cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 799 02ce 002B     		cmp	r3, #0
 800 02d0 08D0     		beq	.L46
 707:common/stm32f10x_rcc.c ****   {
 708:common/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 709:common/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 801              		.loc 1 709 0
 802 02d2 0C49     		ldr	r1, .L49
 803 02d4 0B4B     		ldr	r3, .L49
 804 02d6 1B78     		ldrb	r3, [r3]
 805 02d8 DAB2     		uxtb	r2, r3
 806 02da FB79     		ldrb	r3, [r7, #7]
 807 02dc 1343     		orrs	r3, r3, r2
 808 02de DBB2     		uxtb	r3, r3
 809 02e0 0B70     		strb	r3, [r1]
 710:common/stm32f10x_rcc.c ****   }
 711:common/stm32f10x_rcc.c ****   else
 712:common/stm32f10x_rcc.c ****   {
 713:common/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 714:common/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 715:common/stm32f10x_rcc.c ****   }
 716:common/stm32f10x_rcc.c **** }
 810              		.loc 1 716 0
 811 02e2 09E0     		b	.L48
 812              	.L46:
 714:common/stm32f10x_rcc.c ****   }
 813              		.loc 1 714 0
 814 02e4 0749     		ldr	r1, .L49
 815 02e6 074B     		ldr	r3, .L49
 816 02e8 1B78     		ldrb	r3, [r3]
 817 02ea DAB2     		uxtb	r2, r3
 818 02ec FB79     		ldrb	r3, [r7, #7]
ARM GAS  /tmp/ccB6Y6ca.s 			page 28


 819 02ee DB43     		mvns	r3, r3
 820 02f0 DBB2     		uxtb	r3, r3
 821 02f2 1340     		ands	r3, r3, r2
 822 02f4 DBB2     		uxtb	r3, r3
 823 02f6 0B70     		strb	r3, [r1]
 824              	.L48:
 825              		.loc 1 716 0
 826 02f8 00BF     		nop
 827 02fa 0C37     		adds	r7, r7, #12
 828              		.cfi_def_cfa_offset 4
 829 02fc BD46     		mov	sp, r7
 830              		.cfi_def_cfa_register 13
 831              		@ sp needed
 832 02fe 80BC     		pop	{r7}
 833              		.cfi_restore 7
 834              		.cfi_def_cfa_offset 0
 835 0300 7047     		bx	lr
 836              	.L50:
 837 0302 00BF     		.align	2
 838              	.L49:
 839 0304 09100240 		.word	1073877001
 840              		.cfi_endproc
 841              	.LFE75:
 842              		.size	RCC_ITConfig, .-RCC_ITConfig
 843              		.align	1
 844              		.global	RCC_USBCLKConfig
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu softvfp
 849              		.type	RCC_USBCLKConfig, %function
 850              	RCC_USBCLKConfig:
 851              	.LFB76:
 717:common/stm32f10x_rcc.c **** 
 718:common/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 719:common/stm32f10x_rcc.c **** /**
 720:common/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 721:common/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 722:common/stm32f10x_rcc.c ****   *   derived from the PLL output.
 723:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 724:common/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 725:common/stm32f10x_rcc.c ****   *                                     clock source
 726:common/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 727:common/stm32f10x_rcc.c ****   * @retval None
 728:common/stm32f10x_rcc.c ****   */
 729:common/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 730:common/stm32f10x_rcc.c **** {
 852              		.loc 1 730 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 8
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 857 0308 80B4     		push	{r7}
 858              		.cfi_def_cfa_offset 4
 859              		.cfi_offset 7, -4
 860 030a 83B0     		sub	sp, sp, #12
 861              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccB6Y6ca.s 			page 29


 862 030c 00AF     		add	r7, sp, #0
 863              		.cfi_def_cfa_register 7
 864 030e 7860     		str	r0, [r7, #4]
 731:common/stm32f10x_rcc.c ****   /* Check the parameters */
 732:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 733:common/stm32f10x_rcc.c **** 
 734:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 865              		.loc 1 734 0
 866 0310 034A     		ldr	r2, .L52
 867 0312 7B68     		ldr	r3, [r7, #4]
 868 0314 1360     		str	r3, [r2]
 735:common/stm32f10x_rcc.c **** }
 869              		.loc 1 735 0
 870 0316 00BF     		nop
 871 0318 0C37     		adds	r7, r7, #12
 872              		.cfi_def_cfa_offset 4
 873 031a BD46     		mov	sp, r7
 874              		.cfi_def_cfa_register 13
 875              		@ sp needed
 876 031c 80BC     		pop	{r7}
 877              		.cfi_restore 7
 878              		.cfi_def_cfa_offset 0
 879 031e 7047     		bx	lr
 880              	.L53:
 881              		.align	2
 882              	.L52:
 883 0320 D8004242 		.word	1111621848
 884              		.cfi_endproc
 885              	.LFE76:
 886              		.size	RCC_USBCLKConfig, .-RCC_USBCLKConfig
 887              		.align	1
 888              		.global	RCC_ADCCLKConfig
 889              		.syntax unified
 890              		.thumb
 891              		.thumb_func
 892              		.fpu softvfp
 893              		.type	RCC_ADCCLKConfig, %function
 894              	RCC_ADCCLKConfig:
 895              	.LFB77:
 736:common/stm32f10x_rcc.c **** #else
 737:common/stm32f10x_rcc.c **** /**
 738:common/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 739:common/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 740:common/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 741:common/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 742:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 743:common/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:common/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 745:common/stm32f10x_rcc.c ****   * @retval None
 746:common/stm32f10x_rcc.c ****   */
 747:common/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 748:common/stm32f10x_rcc.c **** {
 749:common/stm32f10x_rcc.c ****   /* Check the parameters */
 750:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 751:common/stm32f10x_rcc.c **** 
 752:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 753:common/stm32f10x_rcc.c **** }
ARM GAS  /tmp/ccB6Y6ca.s 			page 30


 754:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 755:common/stm32f10x_rcc.c **** 
 756:common/stm32f10x_rcc.c **** /**
 757:common/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 758:common/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 759:common/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 760:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 761:common/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 762:common/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 763:common/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 764:common/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 765:common/stm32f10x_rcc.c ****   * @retval None
 766:common/stm32f10x_rcc.c ****   */
 767:common/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 768:common/stm32f10x_rcc.c **** {
 896              		.loc 1 768 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 16
 899              		@ frame_needed = 1, uses_anonymous_args = 0
 900              		@ link register save eliminated.
 901 0324 80B4     		push	{r7}
 902              		.cfi_def_cfa_offset 4
 903              		.cfi_offset 7, -4
 904 0326 85B0     		sub	sp, sp, #20
 905              		.cfi_def_cfa_offset 24
 906 0328 00AF     		add	r7, sp, #0
 907              		.cfi_def_cfa_register 7
 908 032a 7860     		str	r0, [r7, #4]
 769:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 909              		.loc 1 769 0
 910 032c 0023     		movs	r3, #0
 911 032e FB60     		str	r3, [r7, #12]
 770:common/stm32f10x_rcc.c ****   /* Check the parameters */
 771:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 772:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 912              		.loc 1 772 0
 913 0330 094B     		ldr	r3, .L55
 914 0332 5B68     		ldr	r3, [r3, #4]
 915 0334 FB60     		str	r3, [r7, #12]
 773:common/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 774:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 916              		.loc 1 774 0
 917 0336 FB68     		ldr	r3, [r7, #12]
 918 0338 23F44043 		bic	r3, r3, #49152
 919 033c FB60     		str	r3, [r7, #12]
 775:common/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 776:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 920              		.loc 1 776 0
 921 033e FA68     		ldr	r2, [r7, #12]
 922 0340 7B68     		ldr	r3, [r7, #4]
 923 0342 1343     		orrs	r3, r3, r2
 924 0344 FB60     		str	r3, [r7, #12]
 777:common/stm32f10x_rcc.c ****   /* Store the new value */
 778:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 925              		.loc 1 778 0
 926 0346 044A     		ldr	r2, .L55
 927 0348 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccB6Y6ca.s 			page 31


 928 034a 5360     		str	r3, [r2, #4]
 779:common/stm32f10x_rcc.c **** }
 929              		.loc 1 779 0
 930 034c 00BF     		nop
 931 034e 1437     		adds	r7, r7, #20
 932              		.cfi_def_cfa_offset 4
 933 0350 BD46     		mov	sp, r7
 934              		.cfi_def_cfa_register 13
 935              		@ sp needed
 936 0352 80BC     		pop	{r7}
 937              		.cfi_restore 7
 938              		.cfi_def_cfa_offset 0
 939 0354 7047     		bx	lr
 940              	.L56:
 941 0356 00BF     		.align	2
 942              	.L55:
 943 0358 00100240 		.word	1073876992
 944              		.cfi_endproc
 945              	.LFE77:
 946              		.size	RCC_ADCCLKConfig, .-RCC_ADCCLKConfig
 947              		.align	1
 948              		.global	RCC_LSEConfig
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 952              		.fpu softvfp
 953              		.type	RCC_LSEConfig, %function
 954              	RCC_LSEConfig:
 955              	.LFB78:
 780:common/stm32f10x_rcc.c **** 
 781:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 782:common/stm32f10x_rcc.c **** /**
 783:common/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 784:common/stm32f10x_rcc.c ****   * @note
 785:common/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 786:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 787:common/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 788:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 789:common/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 790:common/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 791:common/stm32f10x_rcc.c ****   * @retval None
 792:common/stm32f10x_rcc.c ****   */
 793:common/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 794:common/stm32f10x_rcc.c **** {
 795:common/stm32f10x_rcc.c ****   /* Check the parameters */
 796:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 797:common/stm32f10x_rcc.c **** 
 798:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 799:common/stm32f10x_rcc.c **** }
 800:common/stm32f10x_rcc.c **** 
 801:common/stm32f10x_rcc.c **** /**
 802:common/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 803:common/stm32f10x_rcc.c ****   * @note
 804:common/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 805:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 806:common/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 807:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
ARM GAS  /tmp/ccB6Y6ca.s 			page 32


 808:common/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 809:common/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 810:common/stm32f10x_rcc.c ****   * @retval None
 811:common/stm32f10x_rcc.c ****   */
 812:common/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 813:common/stm32f10x_rcc.c **** {
 814:common/stm32f10x_rcc.c ****   /* Check the parameters */
 815:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 816:common/stm32f10x_rcc.c **** 
 817:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 818:common/stm32f10x_rcc.c **** }
 819:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 820:common/stm32f10x_rcc.c **** 
 821:common/stm32f10x_rcc.c **** /**
 822:common/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 823:common/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 824:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 825:common/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 826:common/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 827:common/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 828:common/stm32f10x_rcc.c ****   * @retval None
 829:common/stm32f10x_rcc.c ****   */
 830:common/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 831:common/stm32f10x_rcc.c **** {
 956              		.loc 1 831 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 8
 959              		@ frame_needed = 1, uses_anonymous_args = 0
 960              		@ link register save eliminated.
 961 035c 80B4     		push	{r7}
 962              		.cfi_def_cfa_offset 4
 963              		.cfi_offset 7, -4
 964 035e 83B0     		sub	sp, sp, #12
 965              		.cfi_def_cfa_offset 16
 966 0360 00AF     		add	r7, sp, #0
 967              		.cfi_def_cfa_register 7
 968 0362 0346     		mov	r3, r0
 969 0364 FB71     		strb	r3, [r7, #7]
 832:common/stm32f10x_rcc.c ****   /* Check the parameters */
 833:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 834:common/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 835:common/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 836:common/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 970              		.loc 1 836 0
 971 0366 0C4B     		ldr	r3, .L62
 972 0368 0022     		movs	r2, #0
 973 036a 1A70     		strb	r2, [r3]
 837:common/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 838:common/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 974              		.loc 1 838 0
 975 036c 0A4B     		ldr	r3, .L62
 976 036e 0022     		movs	r2, #0
 977 0370 1A70     		strb	r2, [r3]
 839:common/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 840:common/stm32f10x_rcc.c ****   switch(RCC_LSE)
 978              		.loc 1 840 0
 979 0372 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  /tmp/ccB6Y6ca.s 			page 33


 980 0374 012B     		cmp	r3, #1
 981 0376 02D0     		beq	.L59
 982 0378 042B     		cmp	r3, #4
 983 037a 04D0     		beq	.L60
 841:common/stm32f10x_rcc.c ****   {
 842:common/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 843:common/stm32f10x_rcc.c ****       /* Set LSEON bit */
 844:common/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 845:common/stm32f10x_rcc.c ****       break;
 846:common/stm32f10x_rcc.c ****       
 847:common/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 848:common/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 849:common/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 850:common/stm32f10x_rcc.c ****       break;            
 851:common/stm32f10x_rcc.c ****       
 852:common/stm32f10x_rcc.c ****     default:
 853:common/stm32f10x_rcc.c ****       break;      
 984              		.loc 1 853 0
 985 037c 07E0     		b	.L61
 986              	.L59:
 844:common/stm32f10x_rcc.c ****       break;
 987              		.loc 1 844 0
 988 037e 064B     		ldr	r3, .L62
 989 0380 0122     		movs	r2, #1
 990 0382 1A70     		strb	r2, [r3]
 845:common/stm32f10x_rcc.c ****       
 991              		.loc 1 845 0
 992 0384 03E0     		b	.L61
 993              	.L60:
 849:common/stm32f10x_rcc.c ****       break;            
 994              		.loc 1 849 0
 995 0386 044B     		ldr	r3, .L62
 996 0388 0522     		movs	r2, #5
 997 038a 1A70     		strb	r2, [r3]
 850:common/stm32f10x_rcc.c ****       
 998              		.loc 1 850 0
 999 038c 00BF     		nop
 1000              	.L61:
 854:common/stm32f10x_rcc.c ****   }
 855:common/stm32f10x_rcc.c **** }
 1001              		.loc 1 855 0
 1002 038e 00BF     		nop
 1003 0390 0C37     		adds	r7, r7, #12
 1004              		.cfi_def_cfa_offset 4
 1005 0392 BD46     		mov	sp, r7
 1006              		.cfi_def_cfa_register 13
 1007              		@ sp needed
 1008 0394 80BC     		pop	{r7}
 1009              		.cfi_restore 7
 1010              		.cfi_def_cfa_offset 0
 1011 0396 7047     		bx	lr
 1012              	.L63:
 1013              		.align	2
 1014              	.L62:
 1015 0398 20100240 		.word	1073877024
 1016              		.cfi_endproc
 1017              	.LFE78:
ARM GAS  /tmp/ccB6Y6ca.s 			page 34


 1018              		.size	RCC_LSEConfig, .-RCC_LSEConfig
 1019              		.align	1
 1020              		.global	RCC_LSICmd
 1021              		.syntax unified
 1022              		.thumb
 1023              		.thumb_func
 1024              		.fpu softvfp
 1025              		.type	RCC_LSICmd, %function
 1026              	RCC_LSICmd:
 1027              	.LFB79:
 856:common/stm32f10x_rcc.c **** 
 857:common/stm32f10x_rcc.c **** /**
 858:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 859:common/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 860:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 861:common/stm32f10x_rcc.c ****   * @retval None
 862:common/stm32f10x_rcc.c ****   */
 863:common/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 864:common/stm32f10x_rcc.c **** {
 1028              		.loc 1 864 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 8
 1031              		@ frame_needed = 1, uses_anonymous_args = 0
 1032              		@ link register save eliminated.
 1033 039c 80B4     		push	{r7}
 1034              		.cfi_def_cfa_offset 4
 1035              		.cfi_offset 7, -4
 1036 039e 83B0     		sub	sp, sp, #12
 1037              		.cfi_def_cfa_offset 16
 1038 03a0 00AF     		add	r7, sp, #0
 1039              		.cfi_def_cfa_register 7
 1040 03a2 0346     		mov	r3, r0
 1041 03a4 FB71     		strb	r3, [r7, #7]
 865:common/stm32f10x_rcc.c ****   /* Check the parameters */
 866:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 867:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 1042              		.loc 1 867 0
 1043 03a6 044A     		ldr	r2, .L65
 1044 03a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1045 03aa 1360     		str	r3, [r2]
 868:common/stm32f10x_rcc.c **** }
 1046              		.loc 1 868 0
 1047 03ac 00BF     		nop
 1048 03ae 0C37     		adds	r7, r7, #12
 1049              		.cfi_def_cfa_offset 4
 1050 03b0 BD46     		mov	sp, r7
 1051              		.cfi_def_cfa_register 13
 1052              		@ sp needed
 1053 03b2 80BC     		pop	{r7}
 1054              		.cfi_restore 7
 1055              		.cfi_def_cfa_offset 0
 1056 03b4 7047     		bx	lr
 1057              	.L66:
 1058 03b6 00BF     		.align	2
 1059              	.L65:
 1060 03b8 80044242 		.word	1111622784
 1061              		.cfi_endproc
ARM GAS  /tmp/ccB6Y6ca.s 			page 35


 1062              	.LFE79:
 1063              		.size	RCC_LSICmd, .-RCC_LSICmd
 1064              		.align	1
 1065              		.global	RCC_RTCCLKConfig
 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1069              		.fpu softvfp
 1070              		.type	RCC_RTCCLKConfig, %function
 1071              	RCC_RTCCLKConfig:
 1072              	.LFB80:
 869:common/stm32f10x_rcc.c **** 
 870:common/stm32f10x_rcc.c **** /**
 871:common/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 872:common/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 873:common/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 874:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 875:common/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 876:common/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 877:common/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 878:common/stm32f10x_rcc.c ****   * @retval None
 879:common/stm32f10x_rcc.c ****   */
 880:common/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 881:common/stm32f10x_rcc.c **** {
 1073              		.loc 1 881 0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 8
 1076              		@ frame_needed = 1, uses_anonymous_args = 0
 1077              		@ link register save eliminated.
 1078 03bc 80B4     		push	{r7}
 1079              		.cfi_def_cfa_offset 4
 1080              		.cfi_offset 7, -4
 1081 03be 83B0     		sub	sp, sp, #12
 1082              		.cfi_def_cfa_offset 16
 1083 03c0 00AF     		add	r7, sp, #0
 1084              		.cfi_def_cfa_register 7
 1085 03c2 7860     		str	r0, [r7, #4]
 882:common/stm32f10x_rcc.c ****   /* Check the parameters */
 883:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 884:common/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 885:common/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1086              		.loc 1 885 0
 1087 03c4 0549     		ldr	r1, .L68
 1088 03c6 054B     		ldr	r3, .L68
 1089 03c8 1A6A     		ldr	r2, [r3, #32]
 1090 03ca 7B68     		ldr	r3, [r7, #4]
 1091 03cc 1343     		orrs	r3, r3, r2
 1092 03ce 0B62     		str	r3, [r1, #32]
 886:common/stm32f10x_rcc.c **** }
 1093              		.loc 1 886 0
 1094 03d0 00BF     		nop
 1095 03d2 0C37     		adds	r7, r7, #12
 1096              		.cfi_def_cfa_offset 4
 1097 03d4 BD46     		mov	sp, r7
 1098              		.cfi_def_cfa_register 13
 1099              		@ sp needed
 1100 03d6 80BC     		pop	{r7}
ARM GAS  /tmp/ccB6Y6ca.s 			page 36


 1101              		.cfi_restore 7
 1102              		.cfi_def_cfa_offset 0
 1103 03d8 7047     		bx	lr
 1104              	.L69:
 1105 03da 00BF     		.align	2
 1106              	.L68:
 1107 03dc 00100240 		.word	1073876992
 1108              		.cfi_endproc
 1109              	.LFE80:
 1110              		.size	RCC_RTCCLKConfig, .-RCC_RTCCLKConfig
 1111              		.align	1
 1112              		.global	RCC_RTCCLKCmd
 1113              		.syntax unified
 1114              		.thumb
 1115              		.thumb_func
 1116              		.fpu softvfp
 1117              		.type	RCC_RTCCLKCmd, %function
 1118              	RCC_RTCCLKCmd:
 1119              	.LFB81:
 887:common/stm32f10x_rcc.c **** 
 888:common/stm32f10x_rcc.c **** /**
 889:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 890:common/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 891:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 892:common/stm32f10x_rcc.c ****   * @retval None
 893:common/stm32f10x_rcc.c ****   */
 894:common/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 895:common/stm32f10x_rcc.c **** {
 1120              		.loc 1 895 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 8
 1123              		@ frame_needed = 1, uses_anonymous_args = 0
 1124              		@ link register save eliminated.
 1125 03e0 80B4     		push	{r7}
 1126              		.cfi_def_cfa_offset 4
 1127              		.cfi_offset 7, -4
 1128 03e2 83B0     		sub	sp, sp, #12
 1129              		.cfi_def_cfa_offset 16
 1130 03e4 00AF     		add	r7, sp, #0
 1131              		.cfi_def_cfa_register 7
 1132 03e6 0346     		mov	r3, r0
 1133 03e8 FB71     		strb	r3, [r7, #7]
 896:common/stm32f10x_rcc.c ****   /* Check the parameters */
 897:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 898:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1134              		.loc 1 898 0
 1135 03ea 044A     		ldr	r2, .L71
 1136 03ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1137 03ee 1360     		str	r3, [r2]
 899:common/stm32f10x_rcc.c **** }
 1138              		.loc 1 899 0
 1139 03f0 00BF     		nop
 1140 03f2 0C37     		adds	r7, r7, #12
 1141              		.cfi_def_cfa_offset 4
 1142 03f4 BD46     		mov	sp, r7
 1143              		.cfi_def_cfa_register 13
 1144              		@ sp needed
ARM GAS  /tmp/ccB6Y6ca.s 			page 37


 1145 03f6 80BC     		pop	{r7}
 1146              		.cfi_restore 7
 1147              		.cfi_def_cfa_offset 0
 1148 03f8 7047     		bx	lr
 1149              	.L72:
 1150 03fa 00BF     		.align	2
 1151              	.L71:
 1152 03fc 3C044242 		.word	1111622716
 1153              		.cfi_endproc
 1154              	.LFE81:
 1155              		.size	RCC_RTCCLKCmd, .-RCC_RTCCLKCmd
 1156              		.align	1
 1157              		.global	RCC_GetClocksFreq
 1158              		.syntax unified
 1159              		.thumb
 1160              		.thumb_func
 1161              		.fpu softvfp
 1162              		.type	RCC_GetClocksFreq, %function
 1163              	RCC_GetClocksFreq:
 1164              	.LFB82:
 900:common/stm32f10x_rcc.c **** 
 901:common/stm32f10x_rcc.c **** /**
 902:common/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 903:common/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 904:common/stm32f10x_rcc.c ****   *         the clocks frequencies.
 905:common/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 906:common/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 907:common/stm32f10x_rcc.c ****   * @retval None
 908:common/stm32f10x_rcc.c ****   */
 909:common/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 910:common/stm32f10x_rcc.c **** {
 1165              		.loc 1 910 0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 24
 1168              		@ frame_needed = 1, uses_anonymous_args = 0
 1169              		@ link register save eliminated.
 1170 0400 80B4     		push	{r7}
 1171              		.cfi_def_cfa_offset 4
 1172              		.cfi_offset 7, -4
 1173 0402 87B0     		sub	sp, sp, #28
 1174              		.cfi_def_cfa_offset 32
 1175 0404 00AF     		add	r7, sp, #0
 1176              		.cfi_def_cfa_register 7
 1177 0406 7860     		str	r0, [r7, #4]
 911:common/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 1178              		.loc 1 911 0
 1179 0408 0023     		movs	r3, #0
 1180 040a 7B61     		str	r3, [r7, #20]
 1181 040c 0023     		movs	r3, #0
 1182 040e 3B61     		str	r3, [r7, #16]
 1183 0410 0023     		movs	r3, #0
 1184 0412 FB60     		str	r3, [r7, #12]
 1185 0414 0023     		movs	r3, #0
 1186 0416 BB60     		str	r3, [r7, #8]
 912:common/stm32f10x_rcc.c **** 
 913:common/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 914:common/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
ARM GAS  /tmp/ccB6Y6ca.s 			page 38


 915:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 916:common/stm32f10x_rcc.c **** 
 917:common/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 918:common/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 919:common/stm32f10x_rcc.c **** #endif
 920:common/stm32f10x_rcc.c ****     
 921:common/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 922:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 1187              		.loc 1 922 0
 1188 0418 4C4B     		ldr	r3, .L83
 1189 041a 5B68     		ldr	r3, [r3, #4]
 1190 041c 03F00C03 		and	r3, r3, #12
 1191 0420 7B61     		str	r3, [r7, #20]
 923:common/stm32f10x_rcc.c ****   
 924:common/stm32f10x_rcc.c ****   switch (tmp)
 1192              		.loc 1 924 0
 1193 0422 7B69     		ldr	r3, [r7, #20]
 1194 0424 042B     		cmp	r3, #4
 1195 0426 07D0     		beq	.L75
 1196 0428 082B     		cmp	r3, #8
 1197 042a 09D0     		beq	.L76
 1198 042c 002B     		cmp	r3, #0
 1199 042e 33D1     		bne	.L82
 925:common/stm32f10x_rcc.c ****   {
 926:common/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 927:common/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1200              		.loc 1 927 0
 1201 0430 7B68     		ldr	r3, [r7, #4]
 1202 0432 474A     		ldr	r2, .L83+4
 1203 0434 1A60     		str	r2, [r3]
 928:common/stm32f10x_rcc.c ****       break;
 1204              		.loc 1 928 0
 1205 0436 33E0     		b	.L78
 1206              	.L75:
 929:common/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 930:common/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1207              		.loc 1 930 0
 1208 0438 7B68     		ldr	r3, [r7, #4]
 1209 043a 454A     		ldr	r2, .L83+4
 1210 043c 1A60     		str	r2, [r3]
 931:common/stm32f10x_rcc.c ****       break;
 1211              		.loc 1 931 0
 1212 043e 2FE0     		b	.L78
 1213              	.L76:
 932:common/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 933:common/stm32f10x_rcc.c **** 
 934:common/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 935:common/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 1214              		.loc 1 935 0
 1215 0440 424B     		ldr	r3, .L83
 1216 0442 5B68     		ldr	r3, [r3, #4]
 1217 0444 03F47013 		and	r3, r3, #3932160
 1218 0448 3B61     		str	r3, [r7, #16]
 936:common/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 1219              		.loc 1 936 0
 1220 044a 404B     		ldr	r3, .L83
 1221 044c 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/ccB6Y6ca.s 			page 39


 1222 044e 03F48033 		and	r3, r3, #65536
 1223 0452 FB60     		str	r3, [r7, #12]
 937:common/stm32f10x_rcc.c ****       
 938:common/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 939:common/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1224              		.loc 1 939 0
 1225 0454 3B69     		ldr	r3, [r7, #16]
 1226 0456 9B0C     		lsrs	r3, r3, #18
 1227 0458 0233     		adds	r3, r3, #2
 1228 045a 3B61     		str	r3, [r7, #16]
 940:common/stm32f10x_rcc.c ****       
 941:common/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 1229              		.loc 1 941 0
 1230 045c FB68     		ldr	r3, [r7, #12]
 1231 045e 002B     		cmp	r3, #0
 1232 0460 06D1     		bne	.L79
 942:common/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 943:common/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 1233              		.loc 1 943 0
 1234 0462 3B69     		ldr	r3, [r7, #16]
 1235 0464 3B4A     		ldr	r2, .L83+8
 1236 0466 02FB03F2 		mul	r2, r2, r3
 1237 046a 7B68     		ldr	r3, [r7, #4]
 1238 046c 1A60     		str	r2, [r3]
 944:common/stm32f10x_rcc.c ****       }
 945:common/stm32f10x_rcc.c ****       else
 946:common/stm32f10x_rcc.c ****       {
 947:common/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 948:common/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 949:common/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 950:common/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 951:common/stm32f10x_rcc.c ****  #else
 952:common/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 953:common/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 954:common/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 955:common/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 956:common/stm32f10x_rcc.c ****         }
 957:common/stm32f10x_rcc.c ****         else
 958:common/stm32f10x_rcc.c ****         {
 959:common/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 960:common/stm32f10x_rcc.c ****         }
 961:common/stm32f10x_rcc.c ****  #endif
 962:common/stm32f10x_rcc.c ****       }
 963:common/stm32f10x_rcc.c **** #else
 964:common/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 965:common/stm32f10x_rcc.c ****       
 966:common/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 967:common/stm32f10x_rcc.c ****       {
 968:common/stm32f10x_rcc.c ****          pllmull += 2;
 969:common/stm32f10x_rcc.c ****       }
 970:common/stm32f10x_rcc.c ****       else
 971:common/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 972:common/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 973:common/stm32f10x_rcc.c ****       }
 974:common/stm32f10x_rcc.c ****             
 975:common/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 976:common/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
ARM GAS  /tmp/ccB6Y6ca.s 			page 40


 977:common/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 978:common/stm32f10x_rcc.c ****       }
 979:common/stm32f10x_rcc.c ****       else
 980:common/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 981:common/stm32f10x_rcc.c ****         
 982:common/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 983:common/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 984:common/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 985:common/stm32f10x_rcc.c ****         
 986:common/stm32f10x_rcc.c ****         if (prediv1source == 0)
 987:common/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 988:common/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 989:common/stm32f10x_rcc.c ****         }
 990:common/stm32f10x_rcc.c ****         else
 991:common/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 992:common/stm32f10x_rcc.c ****           
 993:common/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 994:common/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 995:common/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 996:common/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 997:common/stm32f10x_rcc.c ****         }
 998:common/stm32f10x_rcc.c ****       }
 999:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1000:common/stm32f10x_rcc.c ****       break;
 1239              		.loc 1 1000 0
 1240 046e 17E0     		b	.L78
 1241              	.L79:
 953:common/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 1242              		.loc 1 953 0
 1243 0470 364B     		ldr	r3, .L83
 1244 0472 5B68     		ldr	r3, [r3, #4]
 1245 0474 03F40033 		and	r3, r3, #131072
 1246 0478 002B     		cmp	r3, #0
 1247 047a 06D0     		beq	.L81
 955:common/stm32f10x_rcc.c ****         }
 1248              		.loc 1 955 0
 1249 047c 3B69     		ldr	r3, [r7, #16]
 1250 047e 354A     		ldr	r2, .L83+8
 1251 0480 02FB03F2 		mul	r2, r2, r3
 1252 0484 7B68     		ldr	r3, [r7, #4]
 1253 0486 1A60     		str	r2, [r3]
 1254              		.loc 1 1000 0
 1255 0488 0AE0     		b	.L78
 1256              	.L81:
 959:common/stm32f10x_rcc.c ****         }
 1257              		.loc 1 959 0
 1258 048a 3B69     		ldr	r3, [r7, #16]
 1259 048c 304A     		ldr	r2, .L83+4
 1260 048e 02FB03F2 		mul	r2, r2, r3
 1261 0492 7B68     		ldr	r3, [r7, #4]
 1262 0494 1A60     		str	r2, [r3]
 1263              		.loc 1 1000 0
 1264 0496 03E0     		b	.L78
 1265              	.L82:
1001:common/stm32f10x_rcc.c **** 
1002:common/stm32f10x_rcc.c ****     default:
1003:common/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
ARM GAS  /tmp/ccB6Y6ca.s 			page 41


 1266              		.loc 1 1003 0
 1267 0498 7B68     		ldr	r3, [r7, #4]
 1268 049a 2D4A     		ldr	r2, .L83+4
 1269 049c 1A60     		str	r2, [r3]
1004:common/stm32f10x_rcc.c ****       break;
 1270              		.loc 1 1004 0
 1271 049e 00BF     		nop
 1272              	.L78:
1005:common/stm32f10x_rcc.c ****   }
1006:common/stm32f10x_rcc.c **** 
1007:common/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1008:common/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1009:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 1273              		.loc 1 1009 0
 1274 04a0 2A4B     		ldr	r3, .L83
 1275 04a2 5B68     		ldr	r3, [r3, #4]
 1276 04a4 03F0F003 		and	r3, r3, #240
 1277 04a8 7B61     		str	r3, [r7, #20]
1010:common/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 1278              		.loc 1 1010 0
 1279 04aa 7B69     		ldr	r3, [r7, #20]
 1280 04ac 1B09     		lsrs	r3, r3, #4
 1281 04ae 7B61     		str	r3, [r7, #20]
1011:common/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1282              		.loc 1 1011 0
 1283 04b0 294A     		ldr	r2, .L83+12
 1284 04b2 7B69     		ldr	r3, [r7, #20]
 1285 04b4 1344     		add	r3, r3, r2
 1286 04b6 1B78     		ldrb	r3, [r3]
 1287 04b8 DBB2     		uxtb	r3, r3
 1288 04ba BB60     		str	r3, [r7, #8]
1012:common/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1013:common/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1289              		.loc 1 1013 0
 1290 04bc 7B68     		ldr	r3, [r7, #4]
 1291 04be 1A68     		ldr	r2, [r3]
 1292 04c0 BB68     		ldr	r3, [r7, #8]
 1293 04c2 DA40     		lsrs	r2, r2, r3
 1294 04c4 7B68     		ldr	r3, [r7, #4]
 1295 04c6 5A60     		str	r2, [r3, #4]
1014:common/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1015:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 1296              		.loc 1 1015 0
 1297 04c8 204B     		ldr	r3, .L83
 1298 04ca 5B68     		ldr	r3, [r3, #4]
 1299 04cc 03F4E063 		and	r3, r3, #1792
 1300 04d0 7B61     		str	r3, [r7, #20]
1016:common/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 1301              		.loc 1 1016 0
 1302 04d2 7B69     		ldr	r3, [r7, #20]
 1303 04d4 1B0A     		lsrs	r3, r3, #8
 1304 04d6 7B61     		str	r3, [r7, #20]
1017:common/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1305              		.loc 1 1017 0
 1306 04d8 1F4A     		ldr	r2, .L83+12
 1307 04da 7B69     		ldr	r3, [r7, #20]
 1308 04dc 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccB6Y6ca.s 			page 42


 1309 04de 1B78     		ldrb	r3, [r3]
 1310 04e0 DBB2     		uxtb	r3, r3
 1311 04e2 BB60     		str	r3, [r7, #8]
1018:common/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1019:common/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1312              		.loc 1 1019 0
 1313 04e4 7B68     		ldr	r3, [r7, #4]
 1314 04e6 5A68     		ldr	r2, [r3, #4]
 1315 04e8 BB68     		ldr	r3, [r7, #8]
 1316 04ea DA40     		lsrs	r2, r2, r3
 1317 04ec 7B68     		ldr	r3, [r7, #4]
 1318 04ee 9A60     		str	r2, [r3, #8]
1020:common/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1021:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 1319              		.loc 1 1021 0
 1320 04f0 164B     		ldr	r3, .L83
 1321 04f2 5B68     		ldr	r3, [r3, #4]
 1322 04f4 03F46053 		and	r3, r3, #14336
 1323 04f8 7B61     		str	r3, [r7, #20]
1022:common/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 1324              		.loc 1 1022 0
 1325 04fa 7B69     		ldr	r3, [r7, #20]
 1326 04fc DB0A     		lsrs	r3, r3, #11
 1327 04fe 7B61     		str	r3, [r7, #20]
1023:common/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1328              		.loc 1 1023 0
 1329 0500 154A     		ldr	r2, .L83+12
 1330 0502 7B69     		ldr	r3, [r7, #20]
 1331 0504 1344     		add	r3, r3, r2
 1332 0506 1B78     		ldrb	r3, [r3]
 1333 0508 DBB2     		uxtb	r3, r3
 1334 050a BB60     		str	r3, [r7, #8]
1024:common/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1025:common/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1335              		.loc 1 1025 0
 1336 050c 7B68     		ldr	r3, [r7, #4]
 1337 050e 5A68     		ldr	r2, [r3, #4]
 1338 0510 BB68     		ldr	r3, [r7, #8]
 1339 0512 DA40     		lsrs	r2, r2, r3
 1340 0514 7B68     		ldr	r3, [r7, #4]
 1341 0516 DA60     		str	r2, [r3, #12]
1026:common/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1027:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 1342              		.loc 1 1027 0
 1343 0518 0C4B     		ldr	r3, .L83
 1344 051a 5B68     		ldr	r3, [r3, #4]
 1345 051c 03F44043 		and	r3, r3, #49152
 1346 0520 7B61     		str	r3, [r7, #20]
1028:common/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 1347              		.loc 1 1028 0
 1348 0522 7B69     		ldr	r3, [r7, #20]
 1349 0524 9B0B     		lsrs	r3, r3, #14
 1350 0526 7B61     		str	r3, [r7, #20]
1029:common/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 1351              		.loc 1 1029 0
 1352 0528 0C4A     		ldr	r2, .L83+16
 1353 052a 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/ccB6Y6ca.s 			page 43


 1354 052c 1344     		add	r3, r3, r2
 1355 052e 1B78     		ldrb	r3, [r3]
 1356 0530 DBB2     		uxtb	r3, r3
 1357 0532 BB60     		str	r3, [r7, #8]
1030:common/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1031:common/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 1358              		.loc 1 1031 0
 1359 0534 7B68     		ldr	r3, [r7, #4]
 1360 0536 DA68     		ldr	r2, [r3, #12]
 1361 0538 BB68     		ldr	r3, [r7, #8]
 1362 053a B2FBF3F2 		udiv	r2, r2, r3
 1363 053e 7B68     		ldr	r3, [r7, #4]
 1364 0540 1A61     		str	r2, [r3, #16]
1032:common/stm32f10x_rcc.c **** }
 1365              		.loc 1 1032 0
 1366 0542 00BF     		nop
 1367 0544 1C37     		adds	r7, r7, #28
 1368              		.cfi_def_cfa_offset 4
 1369 0546 BD46     		mov	sp, r7
 1370              		.cfi_def_cfa_register 13
 1371              		@ sp needed
 1372 0548 80BC     		pop	{r7}
 1373              		.cfi_restore 7
 1374              		.cfi_def_cfa_offset 0
 1375 054a 7047     		bx	lr
 1376              	.L84:
 1377              		.align	2
 1378              	.L83:
 1379 054c 00100240 		.word	1073876992
 1380 0550 00127A00 		.word	8000000
 1381 0554 00093D00 		.word	4000000
 1382 0558 00000000 		.word	APBAHBPrescTable
 1383 055c 10000000 		.word	ADCPrescTable
 1384              		.cfi_endproc
 1385              	.LFE82:
 1386              		.size	RCC_GetClocksFreq, .-RCC_GetClocksFreq
 1387              		.align	1
 1388              		.global	RCC_AHBPeriphClockCmd
 1389              		.syntax unified
 1390              		.thumb
 1391              		.thumb_func
 1392              		.fpu softvfp
 1393              		.type	RCC_AHBPeriphClockCmd, %function
 1394              	RCC_AHBPeriphClockCmd:
 1395              	.LFB83:
1033:common/stm32f10x_rcc.c **** 
1034:common/stm32f10x_rcc.c **** /**
1035:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1036:common/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1037:common/stm32f10x_rcc.c ****   *   
1038:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1039:common/stm32f10x_rcc.c ****   *   of the following values:        
1040:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1041:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1042:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1043:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1044:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
ARM GAS  /tmp/ccB6Y6ca.s 			page 44


1045:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1046:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1047:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1048:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1049:common/stm32f10x_rcc.c ****   * 
1050:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1051:common/stm32f10x_rcc.c ****   *   following values:        
1052:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1053:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1054:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1055:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1056:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1057:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1058:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1059:common/stm32f10x_rcc.c ****   *   
1060:common/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1061:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1062:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1063:common/stm32f10x_rcc.c ****   * @retval None
1064:common/stm32f10x_rcc.c ****   */
1065:common/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1066:common/stm32f10x_rcc.c **** {
 1396              		.loc 1 1066 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 8
 1399              		@ frame_needed = 1, uses_anonymous_args = 0
 1400              		@ link register save eliminated.
 1401 0560 80B4     		push	{r7}
 1402              		.cfi_def_cfa_offset 4
 1403              		.cfi_offset 7, -4
 1404 0562 83B0     		sub	sp, sp, #12
 1405              		.cfi_def_cfa_offset 16
 1406 0564 00AF     		add	r7, sp, #0
 1407              		.cfi_def_cfa_register 7
 1408 0566 7860     		str	r0, [r7, #4]
 1409 0568 0B46     		mov	r3, r1
 1410 056a FB70     		strb	r3, [r7, #3]
1067:common/stm32f10x_rcc.c ****   /* Check the parameters */
1068:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1069:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1070:common/stm32f10x_rcc.c **** 
1071:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1411              		.loc 1 1071 0
 1412 056c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1413 056e 002B     		cmp	r3, #0
 1414 0570 06D0     		beq	.L86
1072:common/stm32f10x_rcc.c ****   {
1073:common/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1415              		.loc 1 1073 0
 1416 0572 0949     		ldr	r1, .L89
 1417 0574 084B     		ldr	r3, .L89
 1418 0576 5A69     		ldr	r2, [r3, #20]
 1419 0578 7B68     		ldr	r3, [r7, #4]
 1420 057a 1343     		orrs	r3, r3, r2
 1421 057c 4B61     		str	r3, [r1, #20]
1074:common/stm32f10x_rcc.c ****   }
1075:common/stm32f10x_rcc.c ****   else
ARM GAS  /tmp/ccB6Y6ca.s 			page 45


1076:common/stm32f10x_rcc.c ****   {
1077:common/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
1078:common/stm32f10x_rcc.c ****   }
1079:common/stm32f10x_rcc.c **** }
 1422              		.loc 1 1079 0
 1423 057e 06E0     		b	.L88
 1424              	.L86:
1077:common/stm32f10x_rcc.c ****   }
 1425              		.loc 1 1077 0
 1426 0580 0549     		ldr	r1, .L89
 1427 0582 054B     		ldr	r3, .L89
 1428 0584 5A69     		ldr	r2, [r3, #20]
 1429 0586 7B68     		ldr	r3, [r7, #4]
 1430 0588 DB43     		mvns	r3, r3
 1431 058a 1340     		ands	r3, r3, r2
 1432 058c 4B61     		str	r3, [r1, #20]
 1433              	.L88:
 1434              		.loc 1 1079 0
 1435 058e 00BF     		nop
 1436 0590 0C37     		adds	r7, r7, #12
 1437              		.cfi_def_cfa_offset 4
 1438 0592 BD46     		mov	sp, r7
 1439              		.cfi_def_cfa_register 13
 1440              		@ sp needed
 1441 0594 80BC     		pop	{r7}
 1442              		.cfi_restore 7
 1443              		.cfi_def_cfa_offset 0
 1444 0596 7047     		bx	lr
 1445              	.L90:
 1446              		.align	2
 1447              	.L89:
 1448 0598 00100240 		.word	1073876992
 1449              		.cfi_endproc
 1450              	.LFE83:
 1451              		.size	RCC_AHBPeriphClockCmd, .-RCC_AHBPeriphClockCmd
 1452              		.align	1
 1453              		.global	RCC_APB2PeriphClockCmd
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu softvfp
 1458              		.type	RCC_APB2PeriphClockCmd, %function
 1459              	RCC_APB2PeriphClockCmd:
 1460              	.LFB84:
1080:common/stm32f10x_rcc.c **** 
1081:common/stm32f10x_rcc.c **** /**
1082:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1083:common/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1084:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1085:common/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1086:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1087:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1088:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1089:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1090:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1091:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1092:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
ARM GAS  /tmp/ccB6Y6ca.s 			page 46


1093:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1094:common/stm32f10x_rcc.c ****   * @retval None
1095:common/stm32f10x_rcc.c ****   */
1096:common/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1097:common/stm32f10x_rcc.c **** {
 1461              		.loc 1 1097 0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 8
 1464              		@ frame_needed = 1, uses_anonymous_args = 0
 1465              		@ link register save eliminated.
 1466 059c 80B4     		push	{r7}
 1467              		.cfi_def_cfa_offset 4
 1468              		.cfi_offset 7, -4
 1469 059e 83B0     		sub	sp, sp, #12
 1470              		.cfi_def_cfa_offset 16
 1471 05a0 00AF     		add	r7, sp, #0
 1472              		.cfi_def_cfa_register 7
 1473 05a2 7860     		str	r0, [r7, #4]
 1474 05a4 0B46     		mov	r3, r1
 1475 05a6 FB70     		strb	r3, [r7, #3]
1098:common/stm32f10x_rcc.c ****   /* Check the parameters */
1099:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1100:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1101:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1476              		.loc 1 1101 0
 1477 05a8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1478 05aa 002B     		cmp	r3, #0
 1479 05ac 06D0     		beq	.L92
1102:common/stm32f10x_rcc.c ****   {
1103:common/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1480              		.loc 1 1103 0
 1481 05ae 0949     		ldr	r1, .L95
 1482 05b0 084B     		ldr	r3, .L95
 1483 05b2 9A69     		ldr	r2, [r3, #24]
 1484 05b4 7B68     		ldr	r3, [r7, #4]
 1485 05b6 1343     		orrs	r3, r3, r2
 1486 05b8 8B61     		str	r3, [r1, #24]
1104:common/stm32f10x_rcc.c ****   }
1105:common/stm32f10x_rcc.c ****   else
1106:common/stm32f10x_rcc.c ****   {
1107:common/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
1108:common/stm32f10x_rcc.c ****   }
1109:common/stm32f10x_rcc.c **** }
 1487              		.loc 1 1109 0
 1488 05ba 06E0     		b	.L94
 1489              	.L92:
1107:common/stm32f10x_rcc.c ****   }
 1490              		.loc 1 1107 0
 1491 05bc 0549     		ldr	r1, .L95
 1492 05be 054B     		ldr	r3, .L95
 1493 05c0 9A69     		ldr	r2, [r3, #24]
 1494 05c2 7B68     		ldr	r3, [r7, #4]
 1495 05c4 DB43     		mvns	r3, r3
 1496 05c6 1340     		ands	r3, r3, r2
 1497 05c8 8B61     		str	r3, [r1, #24]
 1498              	.L94:
 1499              		.loc 1 1109 0
ARM GAS  /tmp/ccB6Y6ca.s 			page 47


 1500 05ca 00BF     		nop
 1501 05cc 0C37     		adds	r7, r7, #12
 1502              		.cfi_def_cfa_offset 4
 1503 05ce BD46     		mov	sp, r7
 1504              		.cfi_def_cfa_register 13
 1505              		@ sp needed
 1506 05d0 80BC     		pop	{r7}
 1507              		.cfi_restore 7
 1508              		.cfi_def_cfa_offset 0
 1509 05d2 7047     		bx	lr
 1510              	.L96:
 1511              		.align	2
 1512              	.L95:
 1513 05d4 00100240 		.word	1073876992
 1514              		.cfi_endproc
 1515              	.LFE84:
 1516              		.size	RCC_APB2PeriphClockCmd, .-RCC_APB2PeriphClockCmd
 1517              		.align	1
 1518              		.global	RCC_APB1PeriphClockCmd
 1519              		.syntax unified
 1520              		.thumb
 1521              		.thumb_func
 1522              		.fpu softvfp
 1523              		.type	RCC_APB1PeriphClockCmd, %function
 1524              	RCC_APB1PeriphClockCmd:
 1525              	.LFB85:
1110:common/stm32f10x_rcc.c **** 
1111:common/stm32f10x_rcc.c **** /**
1112:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1113:common/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1114:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1115:common/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1116:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1117:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1118:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1119:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1120:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1121:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1122:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1123:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1124:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1125:common/stm32f10x_rcc.c ****   * @retval None
1126:common/stm32f10x_rcc.c ****   */
1127:common/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1128:common/stm32f10x_rcc.c **** {
 1526              		.loc 1 1128 0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 8
 1529              		@ frame_needed = 1, uses_anonymous_args = 0
 1530              		@ link register save eliminated.
 1531 05d8 80B4     		push	{r7}
 1532              		.cfi_def_cfa_offset 4
 1533              		.cfi_offset 7, -4
 1534 05da 83B0     		sub	sp, sp, #12
 1535              		.cfi_def_cfa_offset 16
 1536 05dc 00AF     		add	r7, sp, #0
 1537              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccB6Y6ca.s 			page 48


 1538 05de 7860     		str	r0, [r7, #4]
 1539 05e0 0B46     		mov	r3, r1
 1540 05e2 FB70     		strb	r3, [r7, #3]
1129:common/stm32f10x_rcc.c ****   /* Check the parameters */
1130:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1131:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1132:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1541              		.loc 1 1132 0
 1542 05e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1543 05e6 002B     		cmp	r3, #0
 1544 05e8 06D0     		beq	.L98
1133:common/stm32f10x_rcc.c ****   {
1134:common/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1545              		.loc 1 1134 0
 1546 05ea 0949     		ldr	r1, .L101
 1547 05ec 084B     		ldr	r3, .L101
 1548 05ee DA69     		ldr	r2, [r3, #28]
 1549 05f0 7B68     		ldr	r3, [r7, #4]
 1550 05f2 1343     		orrs	r3, r3, r2
 1551 05f4 CB61     		str	r3, [r1, #28]
1135:common/stm32f10x_rcc.c ****   }
1136:common/stm32f10x_rcc.c ****   else
1137:common/stm32f10x_rcc.c ****   {
1138:common/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
1139:common/stm32f10x_rcc.c ****   }
1140:common/stm32f10x_rcc.c **** }
 1552              		.loc 1 1140 0
 1553 05f6 06E0     		b	.L100
 1554              	.L98:
1138:common/stm32f10x_rcc.c ****   }
 1555              		.loc 1 1138 0
 1556 05f8 0549     		ldr	r1, .L101
 1557 05fa 054B     		ldr	r3, .L101
 1558 05fc DA69     		ldr	r2, [r3, #28]
 1559 05fe 7B68     		ldr	r3, [r7, #4]
 1560 0600 DB43     		mvns	r3, r3
 1561 0602 1340     		ands	r3, r3, r2
 1562 0604 CB61     		str	r3, [r1, #28]
 1563              	.L100:
 1564              		.loc 1 1140 0
 1565 0606 00BF     		nop
 1566 0608 0C37     		adds	r7, r7, #12
 1567              		.cfi_def_cfa_offset 4
 1568 060a BD46     		mov	sp, r7
 1569              		.cfi_def_cfa_register 13
 1570              		@ sp needed
 1571 060c 80BC     		pop	{r7}
 1572              		.cfi_restore 7
 1573              		.cfi_def_cfa_offset 0
 1574 060e 7047     		bx	lr
 1575              	.L102:
 1576              		.align	2
 1577              	.L101:
 1578 0610 00100240 		.word	1073876992
 1579              		.cfi_endproc
 1580              	.LFE85:
 1581              		.size	RCC_APB1PeriphClockCmd, .-RCC_APB1PeriphClockCmd
ARM GAS  /tmp/ccB6Y6ca.s 			page 49


 1582              		.align	1
 1583              		.global	RCC_APB2PeriphResetCmd
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1587              		.fpu softvfp
 1588              		.type	RCC_APB2PeriphResetCmd, %function
 1589              	RCC_APB2PeriphResetCmd:
 1590              	.LFB86:
1141:common/stm32f10x_rcc.c **** 
1142:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1143:common/stm32f10x_rcc.c **** /**
1144:common/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1145:common/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1146:common/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1147:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1148:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1149:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1150:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1151:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1152:common/stm32f10x_rcc.c ****   * @retval None
1153:common/stm32f10x_rcc.c ****   */
1154:common/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1155:common/stm32f10x_rcc.c **** {
1156:common/stm32f10x_rcc.c ****   /* Check the parameters */
1157:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1158:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1159:common/stm32f10x_rcc.c **** 
1160:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1161:common/stm32f10x_rcc.c ****   {
1162:common/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1163:common/stm32f10x_rcc.c ****   }
1164:common/stm32f10x_rcc.c ****   else
1165:common/stm32f10x_rcc.c ****   {
1166:common/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1167:common/stm32f10x_rcc.c ****   }
1168:common/stm32f10x_rcc.c **** }
1169:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1170:common/stm32f10x_rcc.c **** 
1171:common/stm32f10x_rcc.c **** /**
1172:common/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1173:common/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1174:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1175:common/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1176:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1177:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1178:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1179:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1180:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1181:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1182:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1183:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1184:common/stm32f10x_rcc.c ****   * @retval None
1185:common/stm32f10x_rcc.c ****   */
1186:common/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1187:common/stm32f10x_rcc.c **** {
 1591              		.loc 1 1187 0
ARM GAS  /tmp/ccB6Y6ca.s 			page 50


 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 8
 1594              		@ frame_needed = 1, uses_anonymous_args = 0
 1595              		@ link register save eliminated.
 1596 0614 80B4     		push	{r7}
 1597              		.cfi_def_cfa_offset 4
 1598              		.cfi_offset 7, -4
 1599 0616 83B0     		sub	sp, sp, #12
 1600              		.cfi_def_cfa_offset 16
 1601 0618 00AF     		add	r7, sp, #0
 1602              		.cfi_def_cfa_register 7
 1603 061a 7860     		str	r0, [r7, #4]
 1604 061c 0B46     		mov	r3, r1
 1605 061e FB70     		strb	r3, [r7, #3]
1188:common/stm32f10x_rcc.c ****   /* Check the parameters */
1189:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1190:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1191:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1606              		.loc 1 1191 0
 1607 0620 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1608 0622 002B     		cmp	r3, #0
 1609 0624 06D0     		beq	.L104
1192:common/stm32f10x_rcc.c ****   {
1193:common/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1610              		.loc 1 1193 0
 1611 0626 0949     		ldr	r1, .L107
 1612 0628 084B     		ldr	r3, .L107
 1613 062a DA68     		ldr	r2, [r3, #12]
 1614 062c 7B68     		ldr	r3, [r7, #4]
 1615 062e 1343     		orrs	r3, r3, r2
 1616 0630 CB60     		str	r3, [r1, #12]
1194:common/stm32f10x_rcc.c ****   }
1195:common/stm32f10x_rcc.c ****   else
1196:common/stm32f10x_rcc.c ****   {
1197:common/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
1198:common/stm32f10x_rcc.c ****   }
1199:common/stm32f10x_rcc.c **** }
 1617              		.loc 1 1199 0
 1618 0632 06E0     		b	.L106
 1619              	.L104:
1197:common/stm32f10x_rcc.c ****   }
 1620              		.loc 1 1197 0
 1621 0634 0549     		ldr	r1, .L107
 1622 0636 054B     		ldr	r3, .L107
 1623 0638 DA68     		ldr	r2, [r3, #12]
 1624 063a 7B68     		ldr	r3, [r7, #4]
 1625 063c DB43     		mvns	r3, r3
 1626 063e 1340     		ands	r3, r3, r2
 1627 0640 CB60     		str	r3, [r1, #12]
 1628              	.L106:
 1629              		.loc 1 1199 0
 1630 0642 00BF     		nop
 1631 0644 0C37     		adds	r7, r7, #12
 1632              		.cfi_def_cfa_offset 4
 1633 0646 BD46     		mov	sp, r7
 1634              		.cfi_def_cfa_register 13
 1635              		@ sp needed
ARM GAS  /tmp/ccB6Y6ca.s 			page 51


 1636 0648 80BC     		pop	{r7}
 1637              		.cfi_restore 7
 1638              		.cfi_def_cfa_offset 0
 1639 064a 7047     		bx	lr
 1640              	.L108:
 1641              		.align	2
 1642              	.L107:
 1643 064c 00100240 		.word	1073876992
 1644              		.cfi_endproc
 1645              	.LFE86:
 1646              		.size	RCC_APB2PeriphResetCmd, .-RCC_APB2PeriphResetCmd
 1647              		.align	1
 1648              		.global	RCC_APB1PeriphResetCmd
 1649              		.syntax unified
 1650              		.thumb
 1651              		.thumb_func
 1652              		.fpu softvfp
 1653              		.type	RCC_APB1PeriphResetCmd, %function
 1654              	RCC_APB1PeriphResetCmd:
 1655              	.LFB87:
1200:common/stm32f10x_rcc.c **** 
1201:common/stm32f10x_rcc.c **** /**
1202:common/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1203:common/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1204:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1205:common/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1206:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1207:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1208:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1209:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1210:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1211:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1212:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1213:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1214:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1215:common/stm32f10x_rcc.c ****   * @retval None
1216:common/stm32f10x_rcc.c ****   */
1217:common/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1218:common/stm32f10x_rcc.c **** {
 1656              		.loc 1 1218 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 8
 1659              		@ frame_needed = 1, uses_anonymous_args = 0
 1660              		@ link register save eliminated.
 1661 0650 80B4     		push	{r7}
 1662              		.cfi_def_cfa_offset 4
 1663              		.cfi_offset 7, -4
 1664 0652 83B0     		sub	sp, sp, #12
 1665              		.cfi_def_cfa_offset 16
 1666 0654 00AF     		add	r7, sp, #0
 1667              		.cfi_def_cfa_register 7
 1668 0656 7860     		str	r0, [r7, #4]
 1669 0658 0B46     		mov	r3, r1
 1670 065a FB70     		strb	r3, [r7, #3]
1219:common/stm32f10x_rcc.c ****   /* Check the parameters */
1220:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1221:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/ccB6Y6ca.s 			page 52


1222:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1671              		.loc 1 1222 0
 1672 065c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1673 065e 002B     		cmp	r3, #0
 1674 0660 06D0     		beq	.L110
1223:common/stm32f10x_rcc.c ****   {
1224:common/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1675              		.loc 1 1224 0
 1676 0662 0949     		ldr	r1, .L113
 1677 0664 084B     		ldr	r3, .L113
 1678 0666 1A69     		ldr	r2, [r3, #16]
 1679 0668 7B68     		ldr	r3, [r7, #4]
 1680 066a 1343     		orrs	r3, r3, r2
 1681 066c 0B61     		str	r3, [r1, #16]
1225:common/stm32f10x_rcc.c ****   }
1226:common/stm32f10x_rcc.c ****   else
1227:common/stm32f10x_rcc.c ****   {
1228:common/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
1229:common/stm32f10x_rcc.c ****   }
1230:common/stm32f10x_rcc.c **** }
 1682              		.loc 1 1230 0
 1683 066e 06E0     		b	.L112
 1684              	.L110:
1228:common/stm32f10x_rcc.c ****   }
 1685              		.loc 1 1228 0
 1686 0670 0549     		ldr	r1, .L113
 1687 0672 054B     		ldr	r3, .L113
 1688 0674 1A69     		ldr	r2, [r3, #16]
 1689 0676 7B68     		ldr	r3, [r7, #4]
 1690 0678 DB43     		mvns	r3, r3
 1691 067a 1340     		ands	r3, r3, r2
 1692 067c 0B61     		str	r3, [r1, #16]
 1693              	.L112:
 1694              		.loc 1 1230 0
 1695 067e 00BF     		nop
 1696 0680 0C37     		adds	r7, r7, #12
 1697              		.cfi_def_cfa_offset 4
 1698 0682 BD46     		mov	sp, r7
 1699              		.cfi_def_cfa_register 13
 1700              		@ sp needed
 1701 0684 80BC     		pop	{r7}
 1702              		.cfi_restore 7
 1703              		.cfi_def_cfa_offset 0
 1704 0686 7047     		bx	lr
 1705              	.L114:
 1706              		.align	2
 1707              	.L113:
 1708 0688 00100240 		.word	1073876992
 1709              		.cfi_endproc
 1710              	.LFE87:
 1711              		.size	RCC_APB1PeriphResetCmd, .-RCC_APB1PeriphResetCmd
 1712              		.align	1
 1713              		.global	RCC_BackupResetCmd
 1714              		.syntax unified
 1715              		.thumb
 1716              		.thumb_func
 1717              		.fpu softvfp
ARM GAS  /tmp/ccB6Y6ca.s 			page 53


 1718              		.type	RCC_BackupResetCmd, %function
 1719              	RCC_BackupResetCmd:
 1720              	.LFB88:
1231:common/stm32f10x_rcc.c **** 
1232:common/stm32f10x_rcc.c **** /**
1233:common/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1234:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1235:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1236:common/stm32f10x_rcc.c ****   * @retval None
1237:common/stm32f10x_rcc.c ****   */
1238:common/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1239:common/stm32f10x_rcc.c **** {
 1721              		.loc 1 1239 0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 8
 1724              		@ frame_needed = 1, uses_anonymous_args = 0
 1725              		@ link register save eliminated.
 1726 068c 80B4     		push	{r7}
 1727              		.cfi_def_cfa_offset 4
 1728              		.cfi_offset 7, -4
 1729 068e 83B0     		sub	sp, sp, #12
 1730              		.cfi_def_cfa_offset 16
 1731 0690 00AF     		add	r7, sp, #0
 1732              		.cfi_def_cfa_register 7
 1733 0692 0346     		mov	r3, r0
 1734 0694 FB71     		strb	r3, [r7, #7]
1240:common/stm32f10x_rcc.c ****   /* Check the parameters */
1241:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1735              		.loc 1 1242 0
 1736 0696 044A     		ldr	r2, .L116
 1737 0698 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1738 069a 1360     		str	r3, [r2]
1243:common/stm32f10x_rcc.c **** }
 1739              		.loc 1 1243 0
 1740 069c 00BF     		nop
 1741 069e 0C37     		adds	r7, r7, #12
 1742              		.cfi_def_cfa_offset 4
 1743 06a0 BD46     		mov	sp, r7
 1744              		.cfi_def_cfa_register 13
 1745              		@ sp needed
 1746 06a2 80BC     		pop	{r7}
 1747              		.cfi_restore 7
 1748              		.cfi_def_cfa_offset 0
 1749 06a4 7047     		bx	lr
 1750              	.L117:
 1751 06a6 00BF     		.align	2
 1752              	.L116:
 1753 06a8 40044242 		.word	1111622720
 1754              		.cfi_endproc
 1755              	.LFE88:
 1756              		.size	RCC_BackupResetCmd, .-RCC_BackupResetCmd
 1757              		.align	1
 1758              		.global	RCC_ClockSecuritySystemCmd
 1759              		.syntax unified
 1760              		.thumb
 1761              		.thumb_func
ARM GAS  /tmp/ccB6Y6ca.s 			page 54


 1762              		.fpu softvfp
 1763              		.type	RCC_ClockSecuritySystemCmd, %function
 1764              	RCC_ClockSecuritySystemCmd:
 1765              	.LFB89:
1244:common/stm32f10x_rcc.c **** 
1245:common/stm32f10x_rcc.c **** /**
1246:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1247:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1248:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1249:common/stm32f10x_rcc.c ****   * @retval None
1250:common/stm32f10x_rcc.c ****   */
1251:common/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1252:common/stm32f10x_rcc.c **** {
 1766              		.loc 1 1252 0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 8
 1769              		@ frame_needed = 1, uses_anonymous_args = 0
 1770              		@ link register save eliminated.
 1771 06ac 80B4     		push	{r7}
 1772              		.cfi_def_cfa_offset 4
 1773              		.cfi_offset 7, -4
 1774 06ae 83B0     		sub	sp, sp, #12
 1775              		.cfi_def_cfa_offset 16
 1776 06b0 00AF     		add	r7, sp, #0
 1777              		.cfi_def_cfa_register 7
 1778 06b2 0346     		mov	r3, r0
 1779 06b4 FB71     		strb	r3, [r7, #7]
1253:common/stm32f10x_rcc.c ****   /* Check the parameters */
1254:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1255:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 1780              		.loc 1 1255 0
 1781 06b6 044A     		ldr	r2, .L119
 1782 06b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1783 06ba 1360     		str	r3, [r2]
1256:common/stm32f10x_rcc.c **** }
 1784              		.loc 1 1256 0
 1785 06bc 00BF     		nop
 1786 06be 0C37     		adds	r7, r7, #12
 1787              		.cfi_def_cfa_offset 4
 1788 06c0 BD46     		mov	sp, r7
 1789              		.cfi_def_cfa_register 13
 1790              		@ sp needed
 1791 06c2 80BC     		pop	{r7}
 1792              		.cfi_restore 7
 1793              		.cfi_def_cfa_offset 0
 1794 06c4 7047     		bx	lr
 1795              	.L120:
 1796 06c6 00BF     		.align	2
 1797              	.L119:
 1798 06c8 4C004242 		.word	1111621708
 1799              		.cfi_endproc
 1800              	.LFE89:
 1801              		.size	RCC_ClockSecuritySystemCmd, .-RCC_ClockSecuritySystemCmd
 1802              		.align	1
 1803              		.global	RCC_MCOConfig
 1804              		.syntax unified
 1805              		.thumb
ARM GAS  /tmp/ccB6Y6ca.s 			page 55


 1806              		.thumb_func
 1807              		.fpu softvfp
 1808              		.type	RCC_MCOConfig, %function
 1809              	RCC_MCOConfig:
 1810              	.LFB90:
1257:common/stm32f10x_rcc.c **** 
1258:common/stm32f10x_rcc.c **** /**
1259:common/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1260:common/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1261:common/stm32f10x_rcc.c ****   *   
1262:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1263:common/stm32f10x_rcc.c ****   *   following values:       
1264:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1265:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1266:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1267:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1268:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1269:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1270:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1271:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1272:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1273:common/stm32f10x_rcc.c ****   * 
1274:common/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1275:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1276:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1277:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1278:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1279:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1280:common/stm32f10x_rcc.c ****   *   
1281:common/stm32f10x_rcc.c ****   * @retval None
1282:common/stm32f10x_rcc.c ****   */
1283:common/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1284:common/stm32f10x_rcc.c **** {
 1811              		.loc 1 1284 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 8
 1814              		@ frame_needed = 1, uses_anonymous_args = 0
 1815              		@ link register save eliminated.
 1816 06cc 80B4     		push	{r7}
 1817              		.cfi_def_cfa_offset 4
 1818              		.cfi_offset 7, -4
 1819 06ce 83B0     		sub	sp, sp, #12
 1820              		.cfi_def_cfa_offset 16
 1821 06d0 00AF     		add	r7, sp, #0
 1822              		.cfi_def_cfa_register 7
 1823 06d2 0346     		mov	r3, r0
 1824 06d4 FB71     		strb	r3, [r7, #7]
1285:common/stm32f10x_rcc.c ****   /* Check the parameters */
1286:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1287:common/stm32f10x_rcc.c **** 
1288:common/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1289:common/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 1825              		.loc 1 1289 0
 1826 06d6 044A     		ldr	r2, .L122
 1827 06d8 FB79     		ldrb	r3, [r7, #7]
 1828 06da 1370     		strb	r3, [r2]
1290:common/stm32f10x_rcc.c **** }
ARM GAS  /tmp/ccB6Y6ca.s 			page 56


 1829              		.loc 1 1290 0
 1830 06dc 00BF     		nop
 1831 06de 0C37     		adds	r7, r7, #12
 1832              		.cfi_def_cfa_offset 4
 1833 06e0 BD46     		mov	sp, r7
 1834              		.cfi_def_cfa_register 13
 1835              		@ sp needed
 1836 06e2 80BC     		pop	{r7}
 1837              		.cfi_restore 7
 1838              		.cfi_def_cfa_offset 0
 1839 06e4 7047     		bx	lr
 1840              	.L123:
 1841 06e6 00BF     		.align	2
 1842              	.L122:
 1843 06e8 07100240 		.word	1073876999
 1844              		.cfi_endproc
 1845              	.LFE90:
 1846              		.size	RCC_MCOConfig, .-RCC_MCOConfig
 1847              		.align	1
 1848              		.global	RCC_GetFlagStatus
 1849              		.syntax unified
 1850              		.thumb
 1851              		.thumb_func
 1852              		.fpu softvfp
 1853              		.type	RCC_GetFlagStatus, %function
 1854              	RCC_GetFlagStatus:
 1855              	.LFB91:
1291:common/stm32f10x_rcc.c **** 
1292:common/stm32f10x_rcc.c **** /**
1293:common/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1294:common/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1295:common/stm32f10x_rcc.c ****   *   
1296:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1297:common/stm32f10x_rcc.c ****   *   following values:
1298:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1299:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1300:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1301:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1302:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1303:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1304:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1305:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1306:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1307:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1308:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1309:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1310:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1311:common/stm32f10x_rcc.c ****   * 
1312:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1313:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1314:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1315:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1316:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1317:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1318:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1319:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1320:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
ARM GAS  /tmp/ccB6Y6ca.s 			page 57


1321:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1322:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1323:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1324:common/stm32f10x_rcc.c ****   *   
1325:common/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1326:common/stm32f10x_rcc.c ****   */
1327:common/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1328:common/stm32f10x_rcc.c **** {
 1856              		.loc 1 1328 0
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 24
 1859              		@ frame_needed = 1, uses_anonymous_args = 0
 1860              		@ link register save eliminated.
 1861 06ec 80B4     		push	{r7}
 1862              		.cfi_def_cfa_offset 4
 1863              		.cfi_offset 7, -4
 1864 06ee 87B0     		sub	sp, sp, #28
 1865              		.cfi_def_cfa_offset 32
 1866 06f0 00AF     		add	r7, sp, #0
 1867              		.cfi_def_cfa_register 7
 1868 06f2 0346     		mov	r3, r0
 1869 06f4 FB71     		strb	r3, [r7, #7]
1329:common/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 1870              		.loc 1 1329 0
 1871 06f6 0023     		movs	r3, #0
 1872 06f8 FB60     		str	r3, [r7, #12]
1330:common/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 1873              		.loc 1 1330 0
 1874 06fa 0023     		movs	r3, #0
 1875 06fc 7B61     		str	r3, [r7, #20]
1331:common/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 1876              		.loc 1 1331 0
 1877 06fe 0023     		movs	r3, #0
 1878 0700 FB74     		strb	r3, [r7, #19]
1332:common/stm32f10x_rcc.c ****   /* Check the parameters */
1333:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1334:common/stm32f10x_rcc.c **** 
1335:common/stm32f10x_rcc.c ****   /* Get the RCC register index */
1336:common/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 1879              		.loc 1 1336 0
 1880 0702 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1881 0704 5B09     		lsrs	r3, r3, #5
 1882 0706 DBB2     		uxtb	r3, r3
 1883 0708 FB60     		str	r3, [r7, #12]
1337:common/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1884              		.loc 1 1337 0
 1885 070a FB68     		ldr	r3, [r7, #12]
 1886 070c 012B     		cmp	r3, #1
 1887 070e 03D1     		bne	.L125
1338:common/stm32f10x_rcc.c ****   {
1339:common/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 1888              		.loc 1 1339 0
 1889 0710 124B     		ldr	r3, .L131
 1890 0712 1B68     		ldr	r3, [r3]
 1891 0714 7B61     		str	r3, [r7, #20]
 1892 0716 09E0     		b	.L126
 1893              	.L125:
ARM GAS  /tmp/ccB6Y6ca.s 			page 58


1340:common/stm32f10x_rcc.c ****   }
1341:common/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1894              		.loc 1 1341 0
 1895 0718 FB68     		ldr	r3, [r7, #12]
 1896 071a 022B     		cmp	r3, #2
 1897 071c 03D1     		bne	.L127
1342:common/stm32f10x_rcc.c ****   {
1343:common/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 1898              		.loc 1 1343 0
 1899 071e 0F4B     		ldr	r3, .L131
 1900 0720 1B6A     		ldr	r3, [r3, #32]
 1901 0722 7B61     		str	r3, [r7, #20]
 1902 0724 02E0     		b	.L126
 1903              	.L127:
1344:common/stm32f10x_rcc.c ****   }
1345:common/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1346:common/stm32f10x_rcc.c ****   {
1347:common/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 1904              		.loc 1 1347 0
 1905 0726 0D4B     		ldr	r3, .L131
 1906 0728 5B6A     		ldr	r3, [r3, #36]
 1907 072a 7B61     		str	r3, [r7, #20]
 1908              	.L126:
1348:common/stm32f10x_rcc.c ****   }
1349:common/stm32f10x_rcc.c **** 
1350:common/stm32f10x_rcc.c ****   /* Get the flag position */
1351:common/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 1909              		.loc 1 1351 0
 1910 072c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1911 072e 03F01F03 		and	r3, r3, #31
 1912 0732 FB60     		str	r3, [r7, #12]
1352:common/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1913              		.loc 1 1352 0
 1914 0734 7A69     		ldr	r2, [r7, #20]
 1915 0736 FB68     		ldr	r3, [r7, #12]
 1916 0738 22FA03F3 		lsr	r3, r2, r3
 1917 073c 03F00103 		and	r3, r3, #1
 1918 0740 002B     		cmp	r3, #0
 1919 0742 02D0     		beq	.L128
1353:common/stm32f10x_rcc.c ****   {
1354:common/stm32f10x_rcc.c ****     bitstatus = SET;
 1920              		.loc 1 1354 0
 1921 0744 0123     		movs	r3, #1
 1922 0746 FB74     		strb	r3, [r7, #19]
 1923 0748 01E0     		b	.L129
 1924              	.L128:
1355:common/stm32f10x_rcc.c ****   }
1356:common/stm32f10x_rcc.c ****   else
1357:common/stm32f10x_rcc.c ****   {
1358:common/stm32f10x_rcc.c ****     bitstatus = RESET;
 1925              		.loc 1 1358 0
 1926 074a 0023     		movs	r3, #0
 1927 074c FB74     		strb	r3, [r7, #19]
 1928              	.L129:
1359:common/stm32f10x_rcc.c ****   }
1360:common/stm32f10x_rcc.c **** 
1361:common/stm32f10x_rcc.c ****   /* Return the flag status */
ARM GAS  /tmp/ccB6Y6ca.s 			page 59


1362:common/stm32f10x_rcc.c ****   return bitstatus;
 1929              		.loc 1 1362 0
 1930 074e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1363:common/stm32f10x_rcc.c **** }
 1931              		.loc 1 1363 0
 1932 0750 1846     		mov	r0, r3
 1933 0752 1C37     		adds	r7, r7, #28
 1934              		.cfi_def_cfa_offset 4
 1935 0754 BD46     		mov	sp, r7
 1936              		.cfi_def_cfa_register 13
 1937              		@ sp needed
 1938 0756 80BC     		pop	{r7}
 1939              		.cfi_restore 7
 1940              		.cfi_def_cfa_offset 0
 1941 0758 7047     		bx	lr
 1942              	.L132:
 1943 075a 00BF     		.align	2
 1944              	.L131:
 1945 075c 00100240 		.word	1073876992
 1946              		.cfi_endproc
 1947              	.LFE91:
 1948              		.size	RCC_GetFlagStatus, .-RCC_GetFlagStatus
 1949              		.align	1
 1950              		.global	RCC_ClearFlag
 1951              		.syntax unified
 1952              		.thumb
 1953              		.thumb_func
 1954              		.fpu softvfp
 1955              		.type	RCC_ClearFlag, %function
 1956              	RCC_ClearFlag:
 1957              	.LFB92:
1364:common/stm32f10x_rcc.c **** 
1365:common/stm32f10x_rcc.c **** /**
1366:common/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1367:common/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1368:common/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1369:common/stm32f10x_rcc.c ****   * @param  None
1370:common/stm32f10x_rcc.c ****   * @retval None
1371:common/stm32f10x_rcc.c ****   */
1372:common/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1373:common/stm32f10x_rcc.c **** {
 1958              		.loc 1 1373 0
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 0
 1961              		@ frame_needed = 1, uses_anonymous_args = 0
 1962              		@ link register save eliminated.
 1963 0760 80B4     		push	{r7}
 1964              		.cfi_def_cfa_offset 4
 1965              		.cfi_offset 7, -4
 1966 0762 00AF     		add	r7, sp, #0
 1967              		.cfi_def_cfa_register 7
1374:common/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1375:common/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 1968              		.loc 1 1375 0
 1969 0764 044A     		ldr	r2, .L134
 1970 0766 044B     		ldr	r3, .L134
 1971 0768 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/ccB6Y6ca.s 			page 60


 1972 076a 43F08073 		orr	r3, r3, #16777216
 1973 076e 5362     		str	r3, [r2, #36]
1376:common/stm32f10x_rcc.c **** }
 1974              		.loc 1 1376 0
 1975 0770 00BF     		nop
 1976 0772 BD46     		mov	sp, r7
 1977              		.cfi_def_cfa_register 13
 1978              		@ sp needed
 1979 0774 80BC     		pop	{r7}
 1980              		.cfi_restore 7
 1981              		.cfi_def_cfa_offset 0
 1982 0776 7047     		bx	lr
 1983              	.L135:
 1984              		.align	2
 1985              	.L134:
 1986 0778 00100240 		.word	1073876992
 1987              		.cfi_endproc
 1988              	.LFE92:
 1989              		.size	RCC_ClearFlag, .-RCC_ClearFlag
 1990              		.align	1
 1991              		.global	RCC_GetITStatus
 1992              		.syntax unified
 1993              		.thumb
 1994              		.thumb_func
 1995              		.fpu softvfp
 1996              		.type	RCC_GetITStatus, %function
 1997              	RCC_GetITStatus:
 1998              	.LFB93:
1377:common/stm32f10x_rcc.c **** 
1378:common/stm32f10x_rcc.c **** /**
1379:common/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1380:common/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1381:common/stm32f10x_rcc.c ****   *   
1382:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1383:common/stm32f10x_rcc.c ****   *   following values:
1384:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1385:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1386:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1387:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1388:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1389:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1390:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1391:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1392:common/stm32f10x_rcc.c ****   * 
1393:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1394:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1395:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1396:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1397:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1398:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1399:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1400:common/stm32f10x_rcc.c ****   *   
1401:common/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1402:common/stm32f10x_rcc.c ****   */
1403:common/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1404:common/stm32f10x_rcc.c **** {
 1999              		.loc 1 1404 0
ARM GAS  /tmp/ccB6Y6ca.s 			page 61


 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 16
 2002              		@ frame_needed = 1, uses_anonymous_args = 0
 2003              		@ link register save eliminated.
 2004 077c 80B4     		push	{r7}
 2005              		.cfi_def_cfa_offset 4
 2006              		.cfi_offset 7, -4
 2007 077e 85B0     		sub	sp, sp, #20
 2008              		.cfi_def_cfa_offset 24
 2009 0780 00AF     		add	r7, sp, #0
 2010              		.cfi_def_cfa_register 7
 2011 0782 0346     		mov	r3, r0
 2012 0784 FB71     		strb	r3, [r7, #7]
1405:common/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 2013              		.loc 1 1405 0
 2014 0786 0023     		movs	r3, #0
 2015 0788 FB73     		strb	r3, [r7, #15]
1406:common/stm32f10x_rcc.c ****   /* Check the parameters */
1407:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1408:common/stm32f10x_rcc.c **** 
1409:common/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1410:common/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2016              		.loc 1 1410 0
 2017 078a 084B     		ldr	r3, .L140
 2018 078c 9A68     		ldr	r2, [r3, #8]
 2019 078e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2020 0790 1340     		ands	r3, r3, r2
 2021 0792 002B     		cmp	r3, #0
 2022 0794 02D0     		beq	.L137
1411:common/stm32f10x_rcc.c ****   {
1412:common/stm32f10x_rcc.c ****     bitstatus = SET;
 2023              		.loc 1 1412 0
 2024 0796 0123     		movs	r3, #1
 2025 0798 FB73     		strb	r3, [r7, #15]
 2026 079a 01E0     		b	.L138
 2027              	.L137:
1413:common/stm32f10x_rcc.c ****   }
1414:common/stm32f10x_rcc.c ****   else
1415:common/stm32f10x_rcc.c ****   {
1416:common/stm32f10x_rcc.c ****     bitstatus = RESET;
 2028              		.loc 1 1416 0
 2029 079c 0023     		movs	r3, #0
 2030 079e FB73     		strb	r3, [r7, #15]
 2031              	.L138:
1417:common/stm32f10x_rcc.c ****   }
1418:common/stm32f10x_rcc.c **** 
1419:common/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1420:common/stm32f10x_rcc.c ****   return  bitstatus;
 2032              		.loc 1 1420 0
 2033 07a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1421:common/stm32f10x_rcc.c **** }
 2034              		.loc 1 1421 0
 2035 07a2 1846     		mov	r0, r3
 2036 07a4 1437     		adds	r7, r7, #20
 2037              		.cfi_def_cfa_offset 4
 2038 07a6 BD46     		mov	sp, r7
 2039              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccB6Y6ca.s 			page 62


 2040              		@ sp needed
 2041 07a8 80BC     		pop	{r7}
 2042              		.cfi_restore 7
 2043              		.cfi_def_cfa_offset 0
 2044 07aa 7047     		bx	lr
 2045              	.L141:
 2046              		.align	2
 2047              	.L140:
 2048 07ac 00100240 		.word	1073876992
 2049              		.cfi_endproc
 2050              	.LFE93:
 2051              		.size	RCC_GetITStatus, .-RCC_GetITStatus
 2052              		.align	1
 2053              		.global	RCC_ClearITPendingBit
 2054              		.syntax unified
 2055              		.thumb
 2056              		.thumb_func
 2057              		.fpu softvfp
 2058              		.type	RCC_ClearITPendingBit, %function
 2059              	RCC_ClearITPendingBit:
 2060              	.LFB94:
1422:common/stm32f10x_rcc.c **** 
1423:common/stm32f10x_rcc.c **** /**
1424:common/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1425:common/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1426:common/stm32f10x_rcc.c ****   *   
1427:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1428:common/stm32f10x_rcc.c ****   *   of the following values:
1429:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1430:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1431:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1432:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1433:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1434:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1435:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1436:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1437:common/stm32f10x_rcc.c ****   * 
1438:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1439:common/stm32f10x_rcc.c ****   *   following values:        
1440:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1441:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1442:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1443:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1444:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1445:common/stm32f10x_rcc.c ****   *   
1446:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1447:common/stm32f10x_rcc.c ****   * @retval None
1448:common/stm32f10x_rcc.c ****   */
1449:common/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1450:common/stm32f10x_rcc.c **** {
 2061              		.loc 1 1450 0
 2062              		.cfi_startproc
 2063              		@ args = 0, pretend = 0, frame = 8
 2064              		@ frame_needed = 1, uses_anonymous_args = 0
 2065              		@ link register save eliminated.
 2066 07b0 80B4     		push	{r7}
 2067              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccB6Y6ca.s 			page 63


 2068              		.cfi_offset 7, -4
 2069 07b2 83B0     		sub	sp, sp, #12
 2070              		.cfi_def_cfa_offset 16
 2071 07b4 00AF     		add	r7, sp, #0
 2072              		.cfi_def_cfa_register 7
 2073 07b6 0346     		mov	r3, r0
 2074 07b8 FB71     		strb	r3, [r7, #7]
1451:common/stm32f10x_rcc.c ****   /* Check the parameters */
1452:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1453:common/stm32f10x_rcc.c **** 
1454:common/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1455:common/stm32f10x_rcc.c ****      pending bits */
1456:common/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2075              		.loc 1 1456 0
 2076 07ba 044A     		ldr	r2, .L143
 2077 07bc FB79     		ldrb	r3, [r7, #7]
 2078 07be 1370     		strb	r3, [r2]
1457:common/stm32f10x_rcc.c **** }
 2079              		.loc 1 1457 0
 2080 07c0 00BF     		nop
 2081 07c2 0C37     		adds	r7, r7, #12
 2082              		.cfi_def_cfa_offset 4
 2083 07c4 BD46     		mov	sp, r7
 2084              		.cfi_def_cfa_register 13
 2085              		@ sp needed
 2086 07c6 80BC     		pop	{r7}
 2087              		.cfi_restore 7
 2088              		.cfi_def_cfa_offset 0
 2089 07c8 7047     		bx	lr
 2090              	.L144:
 2091 07ca 00BF     		.align	2
 2092              	.L143:
 2093 07cc 0A100240 		.word	1073877002
 2094              		.cfi_endproc
 2095              	.LFE94:
 2096              		.size	RCC_ClearITPendingBit, .-RCC_ClearITPendingBit
 2097              	.Letext0:
 2098              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2099              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2100              		.file 4 "include/core_cm3.h"
 2101              		.file 5 "include/system_stm32f10x.h"
 2102              		.file 6 "include/stm32f10x.h"
 2103              		.file 7 "include/stm32f10x_rcc.h"
 2104              		.section	.debug_info,"",%progbits
 2105              	.Ldebug_info0:
 2106 0000 AE080000 		.4byte	0x8ae
 2107 0004 0400     		.2byte	0x4
 2108 0006 00000000 		.4byte	.Ldebug_abbrev0
 2109 000a 04       		.byte	0x4
 2110 000b 01       		.uleb128 0x1
 2111 000c 59030000 		.4byte	.LASF104
 2112 0010 0C       		.byte	0xc
 2113 0011 CD000000 		.4byte	.LASF105
 2114 0015 64020000 		.4byte	.LASF106
 2115 0019 00000000 		.4byte	.Ltext0
 2116 001d D0070000 		.4byte	.Letext0-.Ltext0
 2117 0021 00000000 		.4byte	.Ldebug_line0
ARM GAS  /tmp/ccB6Y6ca.s 			page 64


 2118 0025 02       		.uleb128 0x2
 2119 0026 01       		.byte	0x1
 2120 0027 06       		.byte	0x6
 2121 0028 DE020000 		.4byte	.LASF0
 2122 002c 03       		.uleb128 0x3
 2123 002d 17020000 		.4byte	.LASF3
 2124 0031 02       		.byte	0x2
 2125 0032 1D       		.byte	0x1d
 2126 0033 37000000 		.4byte	0x37
 2127 0037 02       		.uleb128 0x2
 2128 0038 01       		.byte	0x1
 2129 0039 08       		.byte	0x8
 2130 003a B9020000 		.4byte	.LASF1
 2131 003e 02       		.uleb128 0x2
 2132 003f 02       		.byte	0x2
 2133 0040 05       		.byte	0x5
 2134 0041 C3000000 		.4byte	.LASF2
 2135 0045 03       		.uleb128 0x3
 2136 0046 A3000000 		.4byte	.LASF4
 2137 004a 02       		.byte	0x2
 2138 004b 2B       		.byte	0x2b
 2139 004c 50000000 		.4byte	0x50
 2140 0050 02       		.uleb128 0x2
 2141 0051 02       		.byte	0x2
 2142 0052 07       		.byte	0x7
 2143 0053 E2030000 		.4byte	.LASF5
 2144 0057 03       		.uleb128 0x3
 2145 0058 25050000 		.4byte	.LASF6
 2146 005c 02       		.byte	0x2
 2147 005d 3F       		.byte	0x3f
 2148 005e 62000000 		.4byte	0x62
 2149 0062 02       		.uleb128 0x2
 2150 0063 04       		.byte	0x4
 2151 0064 05       		.byte	0x5
 2152 0065 C1010000 		.4byte	.LASF7
 2153 0069 03       		.uleb128 0x3
 2154 006a 98000000 		.4byte	.LASF8
 2155 006e 02       		.byte	0x2
 2156 006f 41       		.byte	0x41
 2157 0070 74000000 		.4byte	0x74
 2158 0074 02       		.uleb128 0x2
 2159 0075 04       		.byte	0x4
 2160 0076 07       		.byte	0x7
 2161 0077 A7040000 		.4byte	.LASF9
 2162 007b 02       		.uleb128 0x2
 2163 007c 08       		.byte	0x8
 2164 007d 05       		.byte	0x5
 2165 007e 6E010000 		.4byte	.LASF10
 2166 0082 02       		.uleb128 0x2
 2167 0083 08       		.byte	0x8
 2168 0084 07       		.byte	0x7
 2169 0085 7C010000 		.4byte	.LASF11
 2170 0089 04       		.uleb128 0x4
 2171 008a 04       		.byte	0x4
 2172 008b 05       		.byte	0x5
 2173 008c 696E7400 		.ascii	"int\000"
 2174 0090 02       		.uleb128 0x2
ARM GAS  /tmp/ccB6Y6ca.s 			page 65


 2175 0091 04       		.byte	0x4
 2176 0092 07       		.byte	0x7
 2177 0093 35030000 		.4byte	.LASF12
 2178 0097 03       		.uleb128 0x3
 2179 0098 FF000000 		.4byte	.LASF13
 2180 009c 03       		.byte	0x3
 2181 009d 18       		.byte	0x18
 2182 009e 2C000000 		.4byte	0x2c
 2183 00a2 05       		.uleb128 0x5
 2184 00a3 97000000 		.4byte	0x97
 2185 00a7 06       		.uleb128 0x6
 2186 00a8 A2000000 		.4byte	0xa2
 2187 00ac 03       		.uleb128 0x3
 2188 00ad 50030000 		.4byte	.LASF14
 2189 00b1 03       		.byte	0x3
 2190 00b2 24       		.byte	0x24
 2191 00b3 45000000 		.4byte	0x45
 2192 00b7 03       		.uleb128 0x3
 2193 00b8 22040000 		.4byte	.LASF15
 2194 00bc 03       		.byte	0x3
 2195 00bd 2C       		.byte	0x2c
 2196 00be 57000000 		.4byte	0x57
 2197 00c2 06       		.uleb128 0x6
 2198 00c3 B7000000 		.4byte	0xb7
 2199 00c7 03       		.uleb128 0x3
 2200 00c8 8D040000 		.4byte	.LASF16
 2201 00cc 03       		.byte	0x3
 2202 00cd 30       		.byte	0x30
 2203 00ce 69000000 		.4byte	0x69
 2204 00d2 06       		.uleb128 0x6
 2205 00d3 C7000000 		.4byte	0xc7
 2206 00d7 02       		.uleb128 0x2
 2207 00d8 04       		.byte	0x4
 2208 00d9 07       		.byte	0x7
 2209 00da 5C000000 		.4byte	.LASF17
 2210 00de 07       		.uleb128 0x7
 2211 00df 9C050000 		.4byte	.LASF18
 2212 00e3 04       		.byte	0x4
 2213 00e4 9606     		.2byte	0x696
 2214 00e6 C2000000 		.4byte	0xc2
 2215 00ea 08       		.uleb128 0x8
 2216 00eb 49040000 		.4byte	.LASF19
 2217 00ef 05       		.byte	0x5
 2218 00f0 35       		.byte	0x35
 2219 00f1 C7000000 		.4byte	0xc7
 2220 00f5 09       		.uleb128 0x9
 2221 00f6 01       		.byte	0x1
 2222 00f7 37000000 		.4byte	0x37
 2223 00fb 06       		.byte	0x6
 2224 00fc 0702     		.2byte	0x207
 2225 00fe 0F010000 		.4byte	0x10f
 2226 0102 0A       		.uleb128 0xa
 2227 0103 47020000 		.4byte	.LASF20
 2228 0107 00       		.byte	0
 2229 0108 0B       		.uleb128 0xb
 2230 0109 53455400 		.ascii	"SET\000"
 2231 010d 01       		.byte	0x1
ARM GAS  /tmp/ccB6Y6ca.s 			page 66


 2232 010e 00       		.byte	0
 2233 010f 0C       		.uleb128 0xc
 2234 0110 B8050000 		.4byte	.LASF21
 2235 0114 06       		.byte	0x6
 2236 0115 0702     		.2byte	0x207
 2237 0117 F5000000 		.4byte	0xf5
 2238 011b 0C       		.uleb128 0xc
 2239 011c B8010000 		.4byte	.LASF22
 2240 0120 06       		.byte	0x6
 2241 0121 0702     		.2byte	0x207
 2242 0123 F5000000 		.4byte	0xf5
 2243 0127 09       		.uleb128 0x9
 2244 0128 01       		.byte	0x1
 2245 0129 37000000 		.4byte	0x37
 2246 012d 06       		.byte	0x6
 2247 012e 0902     		.2byte	0x209
 2248 0130 41010000 		.4byte	0x141
 2249 0134 0A       		.uleb128 0xa
 2250 0135 4D010000 		.4byte	.LASF23
 2251 0139 00       		.byte	0
 2252 013a 0A       		.uleb128 0xa
 2253 013b E9000000 		.4byte	.LASF24
 2254 013f 01       		.byte	0x1
 2255 0140 00       		.byte	0
 2256 0141 0C       		.uleb128 0xc
 2257 0142 D2040000 		.4byte	.LASF25
 2258 0146 06       		.byte	0x6
 2259 0147 0902     		.2byte	0x209
 2260 0149 27010000 		.4byte	0x127
 2261 014d 09       		.uleb128 0x9
 2262 014e 01       		.byte	0x1
 2263 014f 37000000 		.4byte	0x37
 2264 0153 06       		.byte	0x6
 2265 0154 0C02     		.2byte	0x20c
 2266 0156 67010000 		.4byte	0x167
 2267 015a 0A       		.uleb128 0xa
 2268 015b 37020000 		.4byte	.LASF26
 2269 015f 00       		.byte	0
 2270 0160 0A       		.uleb128 0xa
 2271 0161 BA030000 		.4byte	.LASF27
 2272 0165 01       		.byte	0x1
 2273 0166 00       		.byte	0
 2274 0167 0C       		.uleb128 0xc
 2275 0168 CA010000 		.4byte	.LASF28
 2276 016c 06       		.byte	0x6
 2277 016d 0C02     		.2byte	0x20c
 2278 016f 4D010000 		.4byte	0x14d
 2279 0173 0D       		.uleb128 0xd
 2280 0174 28       		.byte	0x28
 2281 0175 06       		.byte	0x6
 2282 0176 3404     		.2byte	0x434
 2283 0178 FE010000 		.4byte	0x1fe
 2284 017c 0E       		.uleb128 0xe
 2285 017d 435200   		.ascii	"CR\000"
 2286 0180 06       		.byte	0x6
 2287 0181 3604     		.2byte	0x436
 2288 0183 D2000000 		.4byte	0xd2
ARM GAS  /tmp/ccB6Y6ca.s 			page 67


 2289 0187 00       		.byte	0
 2290 0188 0F       		.uleb128 0xf
 2291 0189 E4000000 		.4byte	.LASF29
 2292 018d 06       		.byte	0x6
 2293 018e 3704     		.2byte	0x437
 2294 0190 D2000000 		.4byte	0xd2
 2295 0194 04       		.byte	0x4
 2296 0195 0E       		.uleb128 0xe
 2297 0196 43495200 		.ascii	"CIR\000"
 2298 019a 06       		.byte	0x6
 2299 019b 3804     		.2byte	0x438
 2300 019d D2000000 		.4byte	0xd2
 2301 01a1 08       		.byte	0x8
 2302 01a2 0F       		.uleb128 0xf
 2303 01a3 0E020000 		.4byte	.LASF30
 2304 01a7 06       		.byte	0x6
 2305 01a8 3904     		.2byte	0x439
 2306 01aa D2000000 		.4byte	0xd2
 2307 01ae 0C       		.byte	0xc
 2308 01af 0F       		.uleb128 0xf
 2309 01b0 0C000000 		.4byte	.LASF31
 2310 01b4 06       		.byte	0x6
 2311 01b5 3A04     		.2byte	0x43a
 2312 01b7 D2000000 		.4byte	0xd2
 2313 01bb 10       		.byte	0x10
 2314 01bc 0F       		.uleb128 0xf
 2315 01bd 4D020000 		.4byte	.LASF32
 2316 01c1 06       		.byte	0x6
 2317 01c2 3B04     		.2byte	0x43b
 2318 01c4 D2000000 		.4byte	0xd2
 2319 01c8 14       		.byte	0x14
 2320 01c9 0F       		.uleb128 0xf
 2321 01ca C7020000 		.4byte	.LASF33
 2322 01ce 06       		.byte	0x6
 2323 01cf 3C04     		.2byte	0x43c
 2324 01d1 D2000000 		.4byte	0xd2
 2325 01d5 18       		.byte	0x18
 2326 01d6 0F       		.uleb128 0xf
 2327 01d7 07010000 		.4byte	.LASF34
 2328 01db 06       		.byte	0x6
 2329 01dc 3D04     		.2byte	0x43d
 2330 01de D2000000 		.4byte	0xd2
 2331 01e2 1C       		.byte	0x1c
 2332 01e3 0F       		.uleb128 0xf
 2333 01e4 9D020000 		.4byte	.LASF35
 2334 01e8 06       		.byte	0x6
 2335 01e9 3E04     		.2byte	0x43e
 2336 01eb D2000000 		.4byte	0xd2
 2337 01ef 20       		.byte	0x20
 2338 01f0 0E       		.uleb128 0xe
 2339 01f1 43535200 		.ascii	"CSR\000"
 2340 01f5 06       		.byte	0x6
 2341 01f6 3F04     		.2byte	0x43f
 2342 01f8 D2000000 		.4byte	0xd2
 2343 01fc 24       		.byte	0x24
 2344 01fd 00       		.byte	0
 2345 01fe 0C       		.uleb128 0xc
ARM GAS  /tmp/ccB6Y6ca.s 			page 68


 2346 01ff 00000000 		.4byte	.LASF36
 2347 0203 06       		.byte	0x6
 2348 0204 4A04     		.2byte	0x44a
 2349 0206 73010000 		.4byte	0x173
 2350 020a 10       		.uleb128 0x10
 2351 020b 14       		.byte	0x14
 2352 020c 07       		.byte	0x7
 2353 020d 2E       		.byte	0x2e
 2354 020e 4F020000 		.4byte	0x24f
 2355 0212 11       		.uleb128 0x11
 2356 0213 38040000 		.4byte	.LASF37
 2357 0217 07       		.byte	0x7
 2358 0218 30       		.byte	0x30
 2359 0219 C7000000 		.4byte	0xc7
 2360 021d 00       		.byte	0
 2361 021e 11       		.uleb128 0x11
 2362 021f 65000000 		.4byte	.LASF38
 2363 0223 07       		.byte	0x7
 2364 0224 31       		.byte	0x31
 2365 0225 C7000000 		.4byte	0xc7
 2366 0229 04       		.byte	0x4
 2367 022a 11       		.uleb128 0x11
 2368 022b E2040000 		.4byte	.LASF39
 2369 022f 07       		.byte	0x7
 2370 0230 32       		.byte	0x32
 2371 0231 C7000000 		.4byte	0xc7
 2372 0235 08       		.byte	0x8
 2373 0236 11       		.uleb128 0x11
 2374 0237 59040000 		.4byte	.LASF40
 2375 023b 07       		.byte	0x7
 2376 023c 33       		.byte	0x33
 2377 023d C7000000 		.4byte	0xc7
 2378 0241 0C       		.byte	0xc
 2379 0242 11       		.uleb128 0x11
 2380 0243 1B030000 		.4byte	.LASF41
 2381 0247 07       		.byte	0x7
 2382 0248 34       		.byte	0x34
 2383 0249 C7000000 		.4byte	0xc7
 2384 024d 10       		.byte	0x10
 2385 024e 00       		.byte	0
 2386 024f 03       		.uleb128 0x3
 2387 0250 C2030000 		.4byte	.LASF42
 2388 0254 07       		.byte	0x7
 2389 0255 35       		.byte	0x35
 2390 0256 0A020000 		.4byte	0x20a
 2391 025a 12       		.uleb128 0x12
 2392 025b A7000000 		.4byte	0xa7
 2393 025f 6A020000 		.4byte	0x26a
 2394 0263 13       		.uleb128 0x13
 2395 0264 D7000000 		.4byte	0xd7
 2396 0268 0F       		.byte	0xf
 2397 0269 00       		.byte	0
 2398 026a 05       		.uleb128 0x5
 2399 026b 5A020000 		.4byte	0x25a
 2400 026f 06       		.uleb128 0x6
 2401 0270 6A020000 		.4byte	0x26a
 2402 0274 14       		.uleb128 0x14
ARM GAS  /tmp/ccB6Y6ca.s 			page 69


 2403 0275 00050000 		.4byte	.LASF43
 2404 0279 01       		.byte	0x1
 2405 027a C2       		.byte	0xc2
 2406 027b 6F020000 		.4byte	0x26f
 2407 027f 05       		.uleb128 0x5
 2408 0280 03       		.byte	0x3
 2409 0281 00000000 		.4byte	APBAHBPrescTable
 2410 0285 12       		.uleb128 0x12
 2411 0286 A7000000 		.4byte	0xa7
 2412 028a 95020000 		.4byte	0x295
 2413 028e 13       		.uleb128 0x13
 2414 028f D7000000 		.4byte	0xd7
 2415 0293 03       		.byte	0x3
 2416 0294 00       		.byte	0
 2417 0295 05       		.uleb128 0x5
 2418 0296 85020000 		.4byte	0x285
 2419 029a 06       		.uleb128 0x6
 2420 029b 95020000 		.4byte	0x295
 2421 029f 14       		.uleb128 0x14
 2422 02a0 E1050000 		.4byte	.LASF44
 2423 02a4 01       		.byte	0x1
 2424 02a5 C3       		.byte	0xc3
 2425 02a6 9A020000 		.4byte	0x29a
 2426 02aa 05       		.uleb128 0x5
 2427 02ab 03       		.byte	0x3
 2428 02ac 10000000 		.4byte	ADCPrescTable
 2429 02b0 15       		.uleb128 0x15
 2430 02b1 2F000000 		.4byte	.LASF51
 2431 02b5 01       		.byte	0x1
 2432 02b6 A905     		.2byte	0x5a9
 2433 02b8 B0070000 		.4byte	.LFB94
 2434 02bc 20000000 		.4byte	.LFE94-.LFB94
 2435 02c0 01       		.uleb128 0x1
 2436 02c1 9C       		.byte	0x9c
 2437 02c2 D6020000 		.4byte	0x2d6
 2438 02c6 16       		.uleb128 0x16
 2439 02c7 B1050000 		.4byte	.LASF45
 2440 02cb 01       		.byte	0x1
 2441 02cc A905     		.2byte	0x5a9
 2442 02ce 97000000 		.4byte	0x97
 2443 02d2 02       		.uleb128 0x2
 2444 02d3 91       		.byte	0x91
 2445 02d4 77       		.sleb128 -9
 2446 02d5 00       		.byte	0
 2447 02d6 17       		.uleb128 0x17
 2448 02d7 4C000000 		.4byte	.LASF47
 2449 02db 01       		.byte	0x1
 2450 02dc 7B05     		.2byte	0x57b
 2451 02de 1B010000 		.4byte	0x11b
 2452 02e2 7C070000 		.4byte	.LFB93
 2453 02e6 34000000 		.4byte	.LFE93-.LFB93
 2454 02ea 01       		.uleb128 0x1
 2455 02eb 9C       		.byte	0x9c
 2456 02ec 0F030000 		.4byte	0x30f
 2457 02f0 16       		.uleb128 0x16
 2458 02f1 B1050000 		.4byte	.LASF45
 2459 02f5 01       		.byte	0x1
ARM GAS  /tmp/ccB6Y6ca.s 			page 70


 2460 02f6 7B05     		.2byte	0x57b
 2461 02f8 97000000 		.4byte	0x97
 2462 02fc 02       		.uleb128 0x2
 2463 02fd 91       		.byte	0x91
 2464 02fe 6F       		.sleb128 -17
 2465 02ff 18       		.uleb128 0x18
 2466 0300 89020000 		.4byte	.LASF46
 2467 0304 01       		.byte	0x1
 2468 0305 7D05     		.2byte	0x57d
 2469 0307 1B010000 		.4byte	0x11b
 2470 030b 02       		.uleb128 0x2
 2471 030c 91       		.byte	0x91
 2472 030d 77       		.sleb128 -9
 2473 030e 00       		.byte	0
 2474 030f 19       		.uleb128 0x19
 2475 0310 D4030000 		.4byte	.LASF102
 2476 0314 01       		.byte	0x1
 2477 0315 5C05     		.2byte	0x55c
 2478 0317 60070000 		.4byte	.LFB92
 2479 031b 1C000000 		.4byte	.LFE92-.LFB92
 2480 031f 01       		.uleb128 0x1
 2481 0320 9C       		.byte	0x9c
 2482 0321 17       		.uleb128 0x17
 2483 0322 97030000 		.4byte	.LASF48
 2484 0326 01       		.byte	0x1
 2485 0327 2F05     		.2byte	0x52f
 2486 0329 0F010000 		.4byte	0x10f
 2487 032d EC060000 		.4byte	.LFB91
 2488 0331 74000000 		.4byte	.LFE91-.LFB91
 2489 0335 01       		.uleb128 0x1
 2490 0336 9C       		.byte	0x9c
 2491 0337 78030000 		.4byte	0x378
 2492 033b 16       		.uleb128 0x16
 2493 033c 2C030000 		.4byte	.LASF49
 2494 0340 01       		.byte	0x1
 2495 0341 2F05     		.2byte	0x52f
 2496 0343 97000000 		.4byte	0x97
 2497 0347 02       		.uleb128 0x2
 2498 0348 91       		.byte	0x91
 2499 0349 67       		.sleb128 -25
 2500 034a 1A       		.uleb128 0x1a
 2501 034b 746D7000 		.ascii	"tmp\000"
 2502 034f 01       		.byte	0x1
 2503 0350 3105     		.2byte	0x531
 2504 0352 C7000000 		.4byte	0xc7
 2505 0356 02       		.uleb128 0x2
 2506 0357 91       		.byte	0x91
 2507 0358 6C       		.sleb128 -20
 2508 0359 18       		.uleb128 0x18
 2509 035a 93020000 		.4byte	.LASF50
 2510 035e 01       		.byte	0x1
 2511 035f 3205     		.2byte	0x532
 2512 0361 C7000000 		.4byte	0xc7
 2513 0365 02       		.uleb128 0x2
 2514 0366 91       		.byte	0x91
 2515 0367 74       		.sleb128 -12
 2516 0368 18       		.uleb128 0x18
ARM GAS  /tmp/ccB6Y6ca.s 			page 71


 2517 0369 89020000 		.4byte	.LASF46
 2518 036d 01       		.byte	0x1
 2519 036e 3305     		.2byte	0x533
 2520 0370 0F010000 		.4byte	0x10f
 2521 0374 02       		.uleb128 0x2
 2522 0375 91       		.byte	0x91
 2523 0376 73       		.sleb128 -13
 2524 0377 00       		.byte	0
 2525 0378 15       		.uleb128 0x15
 2526 0379 1E010000 		.4byte	.LASF52
 2527 037d 01       		.byte	0x1
 2528 037e 0305     		.2byte	0x503
 2529 0380 CC060000 		.4byte	.LFB90
 2530 0384 20000000 		.4byte	.LFE90-.LFB90
 2531 0388 01       		.uleb128 0x1
 2532 0389 9C       		.byte	0x9c
 2533 038a 9E030000 		.4byte	0x39e
 2534 038e 16       		.uleb128 0x16
 2535 038f A9050000 		.4byte	.LASF53
 2536 0393 01       		.byte	0x1
 2537 0394 0305     		.2byte	0x503
 2538 0396 97000000 		.4byte	0x97
 2539 039a 02       		.uleb128 0x2
 2540 039b 91       		.byte	0x91
 2541 039c 77       		.sleb128 -9
 2542 039d 00       		.byte	0
 2543 039e 15       		.uleb128 0x15
 2544 039f 07040000 		.4byte	.LASF54
 2545 03a3 01       		.byte	0x1
 2546 03a4 E304     		.2byte	0x4e3
 2547 03a6 AC060000 		.4byte	.LFB89
 2548 03aa 20000000 		.4byte	.LFE89-.LFB89
 2549 03ae 01       		.uleb128 0x1
 2550 03af 9C       		.byte	0x9c
 2551 03b0 C4030000 		.4byte	0x3c4
 2552 03b4 16       		.uleb128 0x16
 2553 03b5 15010000 		.4byte	.LASF55
 2554 03b9 01       		.byte	0x1
 2555 03ba E304     		.2byte	0x4e3
 2556 03bc 41010000 		.4byte	0x141
 2557 03c0 02       		.uleb128 0x2
 2558 03c1 91       		.byte	0x91
 2559 03c2 77       		.sleb128 -9
 2560 03c3 00       		.byte	0
 2561 03c4 15       		.uleb128 0x15
 2562 03c5 EA020000 		.4byte	.LASF56
 2563 03c9 01       		.byte	0x1
 2564 03ca D604     		.2byte	0x4d6
 2565 03cc 8C060000 		.4byte	.LFB88
 2566 03d0 20000000 		.4byte	.LFE88-.LFB88
 2567 03d4 01       		.uleb128 0x1
 2568 03d5 9C       		.byte	0x9c
 2569 03d6 EA030000 		.4byte	0x3ea
 2570 03da 16       		.uleb128 0x16
 2571 03db 15010000 		.4byte	.LASF55
 2572 03df 01       		.byte	0x1
 2573 03e0 D604     		.2byte	0x4d6
ARM GAS  /tmp/ccB6Y6ca.s 			page 72


 2574 03e2 41010000 		.4byte	0x141
 2575 03e6 02       		.uleb128 0x2
 2576 03e7 91       		.byte	0x91
 2577 03e8 77       		.sleb128 -9
 2578 03e9 00       		.byte	0
 2579 03ea 15       		.uleb128 0x15
 2580 03eb 93010000 		.4byte	.LASF57
 2581 03ef 01       		.byte	0x1
 2582 03f0 C104     		.2byte	0x4c1
 2583 03f2 50060000 		.4byte	.LFB87
 2584 03f6 3C000000 		.4byte	.LFE87-.LFB87
 2585 03fa 01       		.uleb128 0x1
 2586 03fb 9C       		.byte	0x9c
 2587 03fc 1F040000 		.4byte	0x41f
 2588 0400 16       		.uleb128 0x16
 2589 0401 F0000000 		.4byte	.LASF58
 2590 0405 01       		.byte	0x1
 2591 0406 C104     		.2byte	0x4c1
 2592 0408 C7000000 		.4byte	0xc7
 2593 040c 02       		.uleb128 0x2
 2594 040d 91       		.byte	0x91
 2595 040e 74       		.sleb128 -12
 2596 040f 16       		.uleb128 0x16
 2597 0410 15010000 		.4byte	.LASF55
 2598 0414 01       		.byte	0x1
 2599 0415 C104     		.2byte	0x4c1
 2600 0417 41010000 		.4byte	0x141
 2601 041b 02       		.uleb128 0x2
 2602 041c 91       		.byte	0x91
 2603 041d 73       		.sleb128 -13
 2604 041e 00       		.byte	0
 2605 041f 15       		.uleb128 0x15
 2606 0420 41050000 		.4byte	.LASF59
 2607 0424 01       		.byte	0x1
 2608 0425 A204     		.2byte	0x4a2
 2609 0427 14060000 		.4byte	.LFB86
 2610 042b 3C000000 		.4byte	.LFE86-.LFB86
 2611 042f 01       		.uleb128 0x1
 2612 0430 9C       		.byte	0x9c
 2613 0431 54040000 		.4byte	0x454
 2614 0435 16       		.uleb128 0x16
 2615 0436 7F000000 		.4byte	.LASF60
 2616 043a 01       		.byte	0x1
 2617 043b A204     		.2byte	0x4a2
 2618 043d C7000000 		.4byte	0xc7
 2619 0441 02       		.uleb128 0x2
 2620 0442 91       		.byte	0x91
 2621 0443 74       		.sleb128 -12
 2622 0444 16       		.uleb128 0x16
 2623 0445 15010000 		.4byte	.LASF55
 2624 0449 01       		.byte	0x1
 2625 044a A204     		.2byte	0x4a2
 2626 044c 41010000 		.4byte	0x141
 2627 0450 02       		.uleb128 0x2
 2628 0451 91       		.byte	0x91
 2629 0452 73       		.sleb128 -13
 2630 0453 00       		.byte	0
ARM GAS  /tmp/ccB6Y6ca.s 			page 73


 2631 0454 15       		.uleb128 0x15
 2632 0455 A2020000 		.4byte	.LASF61
 2633 0459 01       		.byte	0x1
 2634 045a 6704     		.2byte	0x467
 2635 045c D8050000 		.4byte	.LFB85
 2636 0460 3C000000 		.4byte	.LFE85-.LFB85
 2637 0464 01       		.uleb128 0x1
 2638 0465 9C       		.byte	0x9c
 2639 0466 89040000 		.4byte	0x489
 2640 046a 16       		.uleb128 0x16
 2641 046b F0000000 		.4byte	.LASF58
 2642 046f 01       		.byte	0x1
 2643 0470 6704     		.2byte	0x467
 2644 0472 C7000000 		.4byte	0xc7
 2645 0476 02       		.uleb128 0x2
 2646 0477 91       		.byte	0x91
 2647 0478 74       		.sleb128 -12
 2648 0479 16       		.uleb128 0x16
 2649 047a 15010000 		.4byte	.LASF55
 2650 047e 01       		.byte	0x1
 2651 047f 6704     		.2byte	0x467
 2652 0481 41010000 		.4byte	0x141
 2653 0485 02       		.uleb128 0x2
 2654 0486 91       		.byte	0x91
 2655 0487 73       		.sleb128 -13
 2656 0488 00       		.byte	0
 2657 0489 15       		.uleb128 0x15
 2658 048a 76040000 		.4byte	.LASF62
 2659 048e 01       		.byte	0x1
 2660 048f 4804     		.2byte	0x448
 2661 0491 9C050000 		.4byte	.LFB84
 2662 0495 3C000000 		.4byte	.LFE84-.LFB84
 2663 0499 01       		.uleb128 0x1
 2664 049a 9C       		.byte	0x9c
 2665 049b BE040000 		.4byte	0x4be
 2666 049f 16       		.uleb128 0x16
 2667 04a0 7F000000 		.4byte	.LASF60
 2668 04a4 01       		.byte	0x1
 2669 04a5 4804     		.2byte	0x448
 2670 04a7 C7000000 		.4byte	0xc7
 2671 04ab 02       		.uleb128 0x2
 2672 04ac 91       		.byte	0x91
 2673 04ad 74       		.sleb128 -12
 2674 04ae 16       		.uleb128 0x16
 2675 04af 15010000 		.4byte	.LASF55
 2676 04b3 01       		.byte	0x1
 2677 04b4 4804     		.2byte	0x448
 2678 04b6 41010000 		.4byte	0x141
 2679 04ba 02       		.uleb128 0x2
 2680 04bb 91       		.byte	0x91
 2681 04bc 73       		.sleb128 -13
 2682 04bd 00       		.byte	0
 2683 04be 15       		.uleb128 0x15
 2684 04bf 21020000 		.4byte	.LASF63
 2685 04c3 01       		.byte	0x1
 2686 04c4 2904     		.2byte	0x429
 2687 04c6 60050000 		.4byte	.LFB83
ARM GAS  /tmp/ccB6Y6ca.s 			page 74


 2688 04ca 3C000000 		.4byte	.LFE83-.LFB83
 2689 04ce 01       		.uleb128 0x1
 2690 04cf 9C       		.byte	0x9c
 2691 04d0 F3040000 		.4byte	0x4f3
 2692 04d4 16       		.uleb128 0x16
 2693 04d5 C3050000 		.4byte	.LASF64
 2694 04d9 01       		.byte	0x1
 2695 04da 2904     		.2byte	0x429
 2696 04dc C7000000 		.4byte	0xc7
 2697 04e0 02       		.uleb128 0x2
 2698 04e1 91       		.byte	0x91
 2699 04e2 74       		.sleb128 -12
 2700 04e3 16       		.uleb128 0x16
 2701 04e4 15010000 		.4byte	.LASF55
 2702 04e8 01       		.byte	0x1
 2703 04e9 2904     		.2byte	0x429
 2704 04eb 41010000 		.4byte	0x141
 2705 04ef 02       		.uleb128 0x2
 2706 04f0 91       		.byte	0x91
 2707 04f1 73       		.sleb128 -13
 2708 04f2 00       		.byte	0
 2709 04f3 15       		.uleb128 0x15
 2710 04f4 2F050000 		.4byte	.LASF65
 2711 04f8 01       		.byte	0x1
 2712 04f9 8D03     		.2byte	0x38d
 2713 04fb 00040000 		.4byte	.LFB82
 2714 04ff 60010000 		.4byte	.LFE82-.LFB82
 2715 0503 01       		.uleb128 0x1
 2716 0504 9C       		.byte	0x9c
 2717 0505 55050000 		.4byte	0x555
 2718 0509 16       		.uleb128 0x16
 2719 050a 66050000 		.4byte	.LASF66
 2720 050e 01       		.byte	0x1
 2721 050f 8D03     		.2byte	0x38d
 2722 0511 55050000 		.4byte	0x555
 2723 0515 02       		.uleb128 0x2
 2724 0516 91       		.byte	0x91
 2725 0517 64       		.sleb128 -28
 2726 0518 1A       		.uleb128 0x1a
 2727 0519 746D7000 		.ascii	"tmp\000"
 2728 051d 01       		.byte	0x1
 2729 051e 8F03     		.2byte	0x38f
 2730 0520 C7000000 		.4byte	0xc7
 2731 0524 02       		.uleb128 0x2
 2732 0525 91       		.byte	0x91
 2733 0526 74       		.sleb128 -12
 2734 0527 18       		.uleb128 0x18
 2735 0528 D6010000 		.4byte	.LASF67
 2736 052c 01       		.byte	0x1
 2737 052d 8F03     		.2byte	0x38f
 2738 052f C7000000 		.4byte	0xc7
 2739 0533 02       		.uleb128 0x2
 2740 0534 91       		.byte	0x91
 2741 0535 70       		.sleb128 -16
 2742 0536 18       		.uleb128 0x18
 2743 0537 3D020000 		.4byte	.LASF68
 2744 053b 01       		.byte	0x1
ARM GAS  /tmp/ccB6Y6ca.s 			page 75


 2745 053c 8F03     		.2byte	0x38f
 2746 053e C7000000 		.4byte	0xc7
 2747 0542 02       		.uleb128 0x2
 2748 0543 91       		.byte	0x91
 2749 0544 6C       		.sleb128 -20
 2750 0545 18       		.uleb128 0x18
 2751 0546 0F010000 		.4byte	.LASF69
 2752 054a 01       		.byte	0x1
 2753 054b 8F03     		.2byte	0x38f
 2754 054d C7000000 		.4byte	0xc7
 2755 0551 02       		.uleb128 0x2
 2756 0552 91       		.byte	0x91
 2757 0553 68       		.sleb128 -24
 2758 0554 00       		.byte	0
 2759 0555 1B       		.uleb128 0x1b
 2760 0556 04       		.byte	0x4
 2761 0557 4F020000 		.4byte	0x24f
 2762 055b 15       		.uleb128 0x15
 2763 055c 58050000 		.4byte	.LASF70
 2764 0560 01       		.byte	0x1
 2765 0561 7E03     		.2byte	0x37e
 2766 0563 E0030000 		.4byte	.LFB81
 2767 0567 20000000 		.4byte	.LFE81-.LFB81
 2768 056b 01       		.uleb128 0x1
 2769 056c 9C       		.byte	0x9c
 2770 056d 81050000 		.4byte	0x581
 2771 0571 16       		.uleb128 0x16
 2772 0572 15010000 		.4byte	.LASF55
 2773 0576 01       		.byte	0x1
 2774 0577 7E03     		.2byte	0x37e
 2775 0579 41010000 		.4byte	0x141
 2776 057d 02       		.uleb128 0x2
 2777 057e 91       		.byte	0x91
 2778 057f 77       		.sleb128 -9
 2779 0580 00       		.byte	0
 2780 0581 15       		.uleb128 0x15
 2781 0582 96040000 		.4byte	.LASF71
 2782 0586 01       		.byte	0x1
 2783 0587 7003     		.2byte	0x370
 2784 0589 BC030000 		.4byte	.LFB80
 2785 058d 24000000 		.4byte	.LFE80-.LFB80
 2786 0591 01       		.uleb128 0x1
 2787 0592 9C       		.byte	0x9c
 2788 0593 A7050000 		.4byte	0x5a7
 2789 0597 16       		.uleb128 0x16
 2790 0598 5D010000 		.4byte	.LASF72
 2791 059c 01       		.byte	0x1
 2792 059d 7003     		.2byte	0x370
 2793 059f C7000000 		.4byte	0xc7
 2794 05a3 02       		.uleb128 0x2
 2795 05a4 91       		.byte	0x91
 2796 05a5 74       		.sleb128 -12
 2797 05a6 00       		.byte	0
 2798 05a7 15       		.uleb128 0x15
 2799 05a8 EF010000 		.4byte	.LASF73
 2800 05ac 01       		.byte	0x1
 2801 05ad 5F03     		.2byte	0x35f
ARM GAS  /tmp/ccB6Y6ca.s 			page 76


 2802 05af 9C030000 		.4byte	.LFB79
 2803 05b3 20000000 		.4byte	.LFE79-.LFB79
 2804 05b7 01       		.uleb128 0x1
 2805 05b8 9C       		.byte	0x9c
 2806 05b9 CD050000 		.4byte	0x5cd
 2807 05bd 16       		.uleb128 0x16
 2808 05be 15010000 		.4byte	.LASF55
 2809 05c2 01       		.byte	0x1
 2810 05c3 5F03     		.2byte	0x35f
 2811 05c5 41010000 		.4byte	0x141
 2812 05c9 02       		.uleb128 0x2
 2813 05ca 91       		.byte	0x91
 2814 05cb 77       		.sleb128 -9
 2815 05cc 00       		.byte	0
 2816 05cd 15       		.uleb128 0x15
 2817 05ce F2040000 		.4byte	.LASF74
 2818 05d2 01       		.byte	0x1
 2819 05d3 3E03     		.2byte	0x33e
 2820 05d5 5C030000 		.4byte	.LFB78
 2821 05d9 40000000 		.4byte	.LFE78-.LFB78
 2822 05dd 01       		.uleb128 0x1
 2823 05de 9C       		.byte	0x9c
 2824 05df F3050000 		.4byte	0x5f3
 2825 05e3 16       		.uleb128 0x16
 2826 05e4 55010000 		.4byte	.LASF75
 2827 05e8 01       		.byte	0x1
 2828 05e9 3E03     		.2byte	0x33e
 2829 05eb 97000000 		.4byte	0x97
 2830 05ef 02       		.uleb128 0x2
 2831 05f0 91       		.byte	0x91
 2832 05f1 77       		.sleb128 -9
 2833 05f2 00       		.byte	0
 2834 05f3 15       		.uleb128 0x15
 2835 05f4 1E000000 		.4byte	.LASF76
 2836 05f8 01       		.byte	0x1
 2837 05f9 FF02     		.2byte	0x2ff
 2838 05fb 24030000 		.4byte	.LFB77
 2839 05ff 38000000 		.4byte	.LFE77-.LFB77
 2840 0603 01       		.uleb128 0x1
 2841 0604 9C       		.byte	0x9c
 2842 0605 28060000 		.4byte	0x628
 2843 0609 16       		.uleb128 0x16
 2844 060a 8E000000 		.4byte	.LASF77
 2845 060e 01       		.byte	0x1
 2846 060f FF02     		.2byte	0x2ff
 2847 0611 C7000000 		.4byte	0xc7
 2848 0615 02       		.uleb128 0x2
 2849 0616 91       		.byte	0x91
 2850 0617 6C       		.sleb128 -20
 2851 0618 18       		.uleb128 0x18
 2852 0619 45000000 		.4byte	.LASF78
 2853 061d 01       		.byte	0x1
 2854 061e 0103     		.2byte	0x301
 2855 0620 C7000000 		.4byte	0xc7
 2856 0624 02       		.uleb128 0x2
 2857 0625 91       		.byte	0x91
 2858 0626 74       		.sleb128 -12
ARM GAS  /tmp/ccB6Y6ca.s 			page 77


 2859 0627 00       		.byte	0
 2860 0628 15       		.uleb128 0x15
 2861 0629 DE010000 		.4byte	.LASF79
 2862 062d 01       		.byte	0x1
 2863 062e D902     		.2byte	0x2d9
 2864 0630 08030000 		.4byte	.LFB76
 2865 0634 1C000000 		.4byte	.LFE76-.LFB76
 2866 0638 01       		.uleb128 0x1
 2867 0639 9C       		.byte	0x9c
 2868 063a 4E060000 		.4byte	0x64e
 2869 063e 16       		.uleb128 0x16
 2870 063f A9030000 		.4byte	.LASF80
 2871 0643 01       		.byte	0x1
 2872 0644 D902     		.2byte	0x2d9
 2873 0646 C7000000 		.4byte	0xc7
 2874 064a 02       		.uleb128 0x2
 2875 064b 91       		.byte	0x91
 2876 064c 74       		.sleb128 -12
 2877 064d 00       		.byte	0
 2878 064e 15       		.uleb128 0x15
 2879 064f 69040000 		.4byte	.LASF81
 2880 0653 01       		.byte	0x1
 2881 0654 BD02     		.2byte	0x2bd
 2882 0656 BC020000 		.4byte	.LFB75
 2883 065a 4C000000 		.4byte	.LFE75-.LFB75
 2884 065e 01       		.uleb128 0x1
 2885 065f 9C       		.byte	0x9c
 2886 0660 83060000 		.4byte	0x683
 2887 0664 16       		.uleb128 0x16
 2888 0665 B1050000 		.4byte	.LASF45
 2889 0669 01       		.byte	0x1
 2890 066a BD02     		.2byte	0x2bd
 2891 066c 97000000 		.4byte	0x97
 2892 0670 02       		.uleb128 0x2
 2893 0671 91       		.byte	0x91
 2894 0672 77       		.sleb128 -9
 2895 0673 16       		.uleb128 0x16
 2896 0674 15010000 		.4byte	.LASF55
 2897 0678 01       		.byte	0x1
 2898 0679 BD02     		.2byte	0x2bd
 2899 067b 41010000 		.4byte	0x141
 2900 067f 02       		.uleb128 0x2
 2901 0680 91       		.byte	0x91
 2902 0681 76       		.sleb128 -10
 2903 0682 00       		.byte	0
 2904 0683 15       		.uleb128 0x15
 2905 0684 D1050000 		.4byte	.LASF82
 2906 0688 01       		.byte	0x1
 2907 0689 9502     		.2byte	0x295
 2908 068b 84020000 		.4byte	.LFB74
 2909 068f 38000000 		.4byte	.LFE74-.LFB74
 2910 0693 01       		.uleb128 0x1
 2911 0694 9C       		.byte	0x9c
 2912 0695 B8060000 		.4byte	0x6b8
 2913 0699 16       		.uleb128 0x16
 2914 069a 15000000 		.4byte	.LASF83
 2915 069e 01       		.byte	0x1
ARM GAS  /tmp/ccB6Y6ca.s 			page 78


 2916 069f 9502     		.2byte	0x295
 2917 06a1 C7000000 		.4byte	0xc7
 2918 06a5 02       		.uleb128 0x2
 2919 06a6 91       		.byte	0x91
 2920 06a7 6C       		.sleb128 -20
 2921 06a8 18       		.uleb128 0x18
 2922 06a9 45000000 		.4byte	.LASF78
 2923 06ad 01       		.byte	0x1
 2924 06ae 9702     		.2byte	0x297
 2925 06b0 C7000000 		.4byte	0xc7
 2926 06b4 02       		.uleb128 0x2
 2927 06b5 91       		.byte	0x91
 2928 06b6 74       		.sleb128 -12
 2929 06b7 00       		.byte	0
 2930 06b8 15       		.uleb128 0x15
 2931 06b9 54020000 		.4byte	.LASF84
 2932 06bd 01       		.byte	0x1
 2933 06be 7B02     		.2byte	0x27b
 2934 06c0 4C020000 		.4byte	.LFB73
 2935 06c4 38000000 		.4byte	.LFE73-.LFB73
 2936 06c8 01       		.uleb128 0x1
 2937 06c9 9C       		.byte	0x9c
 2938 06ca ED060000 		.4byte	0x6ed
 2939 06ce 16       		.uleb128 0x16
 2940 06cf 15000000 		.4byte	.LASF83
 2941 06d3 01       		.byte	0x1
 2942 06d4 7B02     		.2byte	0x27b
 2943 06d6 C7000000 		.4byte	0xc7
 2944 06da 02       		.uleb128 0x2
 2945 06db 91       		.byte	0x91
 2946 06dc 6C       		.sleb128 -20
 2947 06dd 18       		.uleb128 0x18
 2948 06de 45000000 		.4byte	.LASF78
 2949 06e2 01       		.byte	0x1
 2950 06e3 7D02     		.2byte	0x27d
 2951 06e5 C7000000 		.4byte	0xc7
 2952 06e9 02       		.uleb128 0x2
 2953 06ea 91       		.byte	0x91
 2954 06eb 74       		.sleb128 -12
 2955 06ec 00       		.byte	0
 2956 06ed 15       		.uleb128 0x15
 2957 06ee 82050000 		.4byte	.LASF85
 2958 06f2 01       		.byte	0x1
 2959 06f3 6102     		.2byte	0x261
 2960 06f5 14020000 		.4byte	.LFB72
 2961 06f9 38000000 		.4byte	.LFE72-.LFB72
 2962 06fd 01       		.uleb128 0x1
 2963 06fe 9C       		.byte	0x9c
 2964 06ff 22070000 		.4byte	0x722
 2965 0703 16       		.uleb128 0x16
 2966 0704 FC030000 		.4byte	.LASF86
 2967 0708 01       		.byte	0x1
 2968 0709 6102     		.2byte	0x261
 2969 070b C7000000 		.4byte	0xc7
 2970 070f 02       		.uleb128 0x2
 2971 0710 91       		.byte	0x91
 2972 0711 6C       		.sleb128 -20
ARM GAS  /tmp/ccB6Y6ca.s 			page 79


 2973 0712 18       		.uleb128 0x18
 2974 0713 45000000 		.4byte	.LASF78
 2975 0717 01       		.byte	0x1
 2976 0718 6302     		.2byte	0x263
 2977 071a C7000000 		.4byte	0xc7
 2978 071e 02       		.uleb128 0x2
 2979 071f 91       		.byte	0x91
 2980 0720 74       		.sleb128 -12
 2981 0721 00       		.byte	0
 2982 0722 1C       		.uleb128 0x1c
 2983 0723 FA010000 		.4byte	.LASF107
 2984 0727 01       		.byte	0x1
 2985 0728 4C02     		.2byte	0x24c
 2986 072a 97000000 		.4byte	0x97
 2987 072e F8010000 		.4byte	.LFB71
 2988 0732 1C000000 		.4byte	.LFE71-.LFB71
 2989 0736 01       		.uleb128 0x1
 2990 0737 9C       		.byte	0x9c
 2991 0738 15       		.uleb128 0x15
 2992 0739 71050000 		.4byte	.LASF87
 2993 073d 01       		.byte	0x1
 2994 073e 3502     		.2byte	0x235
 2995 0740 C0010000 		.4byte	.LFB70
 2996 0744 38000000 		.4byte	.LFE70-.LFB70
 2997 0748 01       		.uleb128 0x1
 2998 0749 9C       		.byte	0x9c
 2999 074a 6D070000 		.4byte	0x76d
 3000 074e 16       		.uleb128 0x16
 3001 074f C1040000 		.4byte	.LASF88
 3002 0753 01       		.byte	0x1
 3003 0754 3502     		.2byte	0x235
 3004 0756 C7000000 		.4byte	0xc7
 3005 075a 02       		.uleb128 0x2
 3006 075b 91       		.byte	0x91
 3007 075c 6C       		.sleb128 -20
 3008 075d 18       		.uleb128 0x18
 3009 075e 45000000 		.4byte	.LASF78
 3010 0762 01       		.byte	0x1
 3011 0763 3702     		.2byte	0x237
 3012 0765 C7000000 		.4byte	0xc7
 3013 0769 02       		.uleb128 0x2
 3014 076a 91       		.byte	0x91
 3015 076b 74       		.sleb128 -12
 3016 076c 00       		.byte	0
 3017 076d 15       		.uleb128 0x15
 3018 076e AE000000 		.4byte	.LASF89
 3019 0772 01       		.byte	0x1
 3020 0773 9201     		.2byte	0x192
 3021 0775 A0010000 		.4byte	.LFB69
 3022 0779 20000000 		.4byte	.LFE69-.LFB69
 3023 077d 01       		.uleb128 0x1
 3024 077e 9C       		.byte	0x9c
 3025 077f 93070000 		.4byte	0x793
 3026 0783 16       		.uleb128 0x16
 3027 0784 15010000 		.4byte	.LASF55
 3028 0788 01       		.byte	0x1
 3029 0789 9201     		.2byte	0x192
ARM GAS  /tmp/ccB6Y6ca.s 			page 80


 3030 078b 41010000 		.4byte	0x141
 3031 078f 02       		.uleb128 0x2
 3032 0790 91       		.byte	0x91
 3033 0791 77       		.sleb128 -9
 3034 0792 00       		.byte	0
 3035 0793 15       		.uleb128 0x15
 3036 0794 AA010000 		.4byte	.LASF90
 3037 0798 01       		.byte	0x1
 3038 0799 7B01     		.2byte	0x17b
 3039 079b 64010000 		.4byte	.LFB68
 3040 079f 3C000000 		.4byte	.LFE68-.LFB68
 3041 07a3 01       		.uleb128 0x1
 3042 07a4 9C       		.byte	0x9c
 3043 07a5 D7070000 		.4byte	0x7d7
 3044 07a9 16       		.uleb128 0x16
 3045 07aa 42030000 		.4byte	.LASF91
 3046 07ae 01       		.byte	0x1
 3047 07af 7B01     		.2byte	0x17b
 3048 07b1 C7000000 		.4byte	0xc7
 3049 07b5 02       		.uleb128 0x2
 3050 07b6 91       		.byte	0x91
 3051 07b7 6C       		.sleb128 -20
 3052 07b8 16       		.uleb128 0x16
 3053 07b9 74000000 		.4byte	.LASF92
 3054 07bd 01       		.byte	0x1
 3055 07be 7B01     		.2byte	0x17b
 3056 07c0 C7000000 		.4byte	0xc7
 3057 07c4 02       		.uleb128 0x2
 3058 07c5 91       		.byte	0x91
 3059 07c6 68       		.sleb128 -24
 3060 07c7 18       		.uleb128 0x18
 3061 07c8 45000000 		.4byte	.LASF78
 3062 07cc 01       		.byte	0x1
 3063 07cd 7D01     		.2byte	0x17d
 3064 07cf C7000000 		.4byte	0xc7
 3065 07d3 02       		.uleb128 0x2
 3066 07d4 91       		.byte	0x91
 3067 07d5 74       		.sleb128 -12
 3068 07d6 00       		.byte	0
 3069 07d7 15       		.uleb128 0x15
 3070 07d8 91050000 		.4byte	.LASF93
 3071 07dc 01       		.byte	0x1
 3072 07dd 6301     		.2byte	0x163
 3073 07df 44010000 		.4byte	.LFB67
 3074 07e3 20000000 		.4byte	.LFE67-.LFB67
 3075 07e7 01       		.uleb128 0x1
 3076 07e8 9C       		.byte	0x9c
 3077 07e9 FD070000 		.4byte	0x7fd
 3078 07ed 16       		.uleb128 0x16
 3079 07ee 15010000 		.4byte	.LASF55
 3080 07f2 01       		.byte	0x1
 3081 07f3 6301     		.2byte	0x163
 3082 07f5 41010000 		.4byte	0x141
 3083 07f9 02       		.uleb128 0x2
 3084 07fa 91       		.byte	0x91
 3085 07fb 77       		.sleb128 -9
 3086 07fc 00       		.byte	0
ARM GAS  /tmp/ccB6Y6ca.s 			page 81


 3087 07fd 15       		.uleb128 0x15
 3088 07fe FD020000 		.4byte	.LASF94
 3089 0802 01       		.byte	0x1
 3090 0803 4F01     		.2byte	0x14f
 3091 0805 08010000 		.4byte	.LFB66
 3092 0809 3C000000 		.4byte	.LFE66-.LFB66
 3093 080d 01       		.uleb128 0x1
 3094 080e 9C       		.byte	0x9c
 3095 080f 32080000 		.4byte	0x832
 3096 0813 16       		.uleb128 0x16
 3097 0814 11050000 		.4byte	.LASF95
 3098 0818 01       		.byte	0x1
 3099 0819 4F01     		.2byte	0x14f
 3100 081b 97000000 		.4byte	0x97
 3101 081f 02       		.uleb128 0x2
 3102 0820 91       		.byte	0x91
 3103 0821 6F       		.sleb128 -17
 3104 0822 18       		.uleb128 0x18
 3105 0823 45000000 		.4byte	.LASF78
 3106 0827 01       		.byte	0x1
 3107 0828 5101     		.2byte	0x151
 3108 082a C7000000 		.4byte	0xc7
 3109 082e 02       		.uleb128 0x2
 3110 082f 91       		.byte	0x91
 3111 0830 74       		.sleb128 -12
 3112 0831 00       		.byte	0
 3113 0832 1D       		.uleb128 0x1d
 3114 0833 37010000 		.4byte	.LASF96
 3115 0837 01       		.byte	0x1
 3116 0838 3101     		.2byte	0x131
 3117 083a 67010000 		.4byte	0x167
 3118 083e B8000000 		.4byte	.LFB65
 3119 0842 50000000 		.4byte	.LFE65-.LFB65
 3120 0846 01       		.uleb128 0x1
 3121 0847 9C       		.byte	0x9c
 3122 0848 7A080000 		.4byte	0x87a
 3123 084c 18       		.uleb128 0x18
 3124 084d CF020000 		.4byte	.LASF97
 3125 0851 01       		.byte	0x1
 3126 0852 3301     		.2byte	0x133
 3127 0854 D2000000 		.4byte	0xd2
 3128 0858 02       		.uleb128 0x2
 3129 0859 91       		.byte	0x91
 3130 085a 70       		.sleb128 -16
 3131 085b 18       		.uleb128 0x18
 3132 085c F5030000 		.4byte	.LASF98
 3133 0860 01       		.byte	0x1
 3134 0861 3401     		.2byte	0x134
 3135 0863 67010000 		.4byte	0x167
 3136 0867 02       		.uleb128 0x2
 3137 0868 91       		.byte	0x91
 3138 0869 77       		.sleb128 -9
 3139 086a 18       		.uleb128 0x18
 3140 086b B9000000 		.4byte	.LASF99
 3141 086f 01       		.byte	0x1
 3142 0870 3501     		.2byte	0x135
 3143 0872 0F010000 		.4byte	0x10f
ARM GAS  /tmp/ccB6Y6ca.s 			page 82


 3144 0876 02       		.uleb128 0x2
 3145 0877 91       		.byte	0x91
 3146 0878 76       		.sleb128 -10
 3147 0879 00       		.byte	0
 3148 087a 15       		.uleb128 0x15
 3149 087b 2A040000 		.4byte	.LASF100
 3150 087f 01       		.byte	0x1
 3151 0880 0F01     		.2byte	0x10f
 3152 0882 5C000000 		.4byte	.LFB64
 3153 0886 5C000000 		.4byte	.LFE64-.LFB64
 3154 088a 01       		.uleb128 0x1
 3155 088b 9C       		.byte	0x9c
 3156 088c A0080000 		.4byte	0x8a0
 3157 0890 16       		.uleb128 0x16
 3158 0891 B9040000 		.4byte	.LASF101
 3159 0895 01       		.byte	0x1
 3160 0896 0F01     		.2byte	0x10f
 3161 0898 C7000000 		.4byte	0xc7
 3162 089c 02       		.uleb128 0x2
 3163 089d 91       		.byte	0x91
 3164 089e 74       		.sleb128 -12
 3165 089f 00       		.byte	0
 3166 08a0 1E       		.uleb128 0x1e
 3167 08a1 2C010000 		.4byte	.LASF103
 3168 08a5 01       		.byte	0x1
 3169 08a6 DA       		.byte	0xda
 3170 08a7 00000000 		.4byte	.LFB63
 3171 08ab 5C000000 		.4byte	.LFE63-.LFB63
 3172 08af 01       		.uleb128 0x1
 3173 08b0 9C       		.byte	0x9c
 3174 08b1 00       		.byte	0
 3175              		.section	.debug_abbrev,"",%progbits
 3176              	.Ldebug_abbrev0:
 3177 0000 01       		.uleb128 0x1
 3178 0001 11       		.uleb128 0x11
 3179 0002 01       		.byte	0x1
 3180 0003 25       		.uleb128 0x25
 3181 0004 0E       		.uleb128 0xe
 3182 0005 13       		.uleb128 0x13
 3183 0006 0B       		.uleb128 0xb
 3184 0007 03       		.uleb128 0x3
 3185 0008 0E       		.uleb128 0xe
 3186 0009 1B       		.uleb128 0x1b
 3187 000a 0E       		.uleb128 0xe
 3188 000b 11       		.uleb128 0x11
 3189 000c 01       		.uleb128 0x1
 3190 000d 12       		.uleb128 0x12
 3191 000e 06       		.uleb128 0x6
 3192 000f 10       		.uleb128 0x10
 3193 0010 17       		.uleb128 0x17
 3194 0011 00       		.byte	0
 3195 0012 00       		.byte	0
 3196 0013 02       		.uleb128 0x2
 3197 0014 24       		.uleb128 0x24
 3198 0015 00       		.byte	0
 3199 0016 0B       		.uleb128 0xb
 3200 0017 0B       		.uleb128 0xb
ARM GAS  /tmp/ccB6Y6ca.s 			page 83


 3201 0018 3E       		.uleb128 0x3e
 3202 0019 0B       		.uleb128 0xb
 3203 001a 03       		.uleb128 0x3
 3204 001b 0E       		.uleb128 0xe
 3205 001c 00       		.byte	0
 3206 001d 00       		.byte	0
 3207 001e 03       		.uleb128 0x3
 3208 001f 16       		.uleb128 0x16
 3209 0020 00       		.byte	0
 3210 0021 03       		.uleb128 0x3
 3211 0022 0E       		.uleb128 0xe
 3212 0023 3A       		.uleb128 0x3a
 3213 0024 0B       		.uleb128 0xb
 3214 0025 3B       		.uleb128 0x3b
 3215 0026 0B       		.uleb128 0xb
 3216 0027 49       		.uleb128 0x49
 3217 0028 13       		.uleb128 0x13
 3218 0029 00       		.byte	0
 3219 002a 00       		.byte	0
 3220 002b 04       		.uleb128 0x4
 3221 002c 24       		.uleb128 0x24
 3222 002d 00       		.byte	0
 3223 002e 0B       		.uleb128 0xb
 3224 002f 0B       		.uleb128 0xb
 3225 0030 3E       		.uleb128 0x3e
 3226 0031 0B       		.uleb128 0xb
 3227 0032 03       		.uleb128 0x3
 3228 0033 08       		.uleb128 0x8
 3229 0034 00       		.byte	0
 3230 0035 00       		.byte	0
 3231 0036 05       		.uleb128 0x5
 3232 0037 26       		.uleb128 0x26
 3233 0038 00       		.byte	0
 3234 0039 49       		.uleb128 0x49
 3235 003a 13       		.uleb128 0x13
 3236 003b 00       		.byte	0
 3237 003c 00       		.byte	0
 3238 003d 06       		.uleb128 0x6
 3239 003e 35       		.uleb128 0x35
 3240 003f 00       		.byte	0
 3241 0040 49       		.uleb128 0x49
 3242 0041 13       		.uleb128 0x13
 3243 0042 00       		.byte	0
 3244 0043 00       		.byte	0
 3245 0044 07       		.uleb128 0x7
 3246 0045 34       		.uleb128 0x34
 3247 0046 00       		.byte	0
 3248 0047 03       		.uleb128 0x3
 3249 0048 0E       		.uleb128 0xe
 3250 0049 3A       		.uleb128 0x3a
 3251 004a 0B       		.uleb128 0xb
 3252 004b 3B       		.uleb128 0x3b
 3253 004c 05       		.uleb128 0x5
 3254 004d 49       		.uleb128 0x49
 3255 004e 13       		.uleb128 0x13
 3256 004f 3F       		.uleb128 0x3f
 3257 0050 19       		.uleb128 0x19
ARM GAS  /tmp/ccB6Y6ca.s 			page 84


 3258 0051 3C       		.uleb128 0x3c
 3259 0052 19       		.uleb128 0x19
 3260 0053 00       		.byte	0
 3261 0054 00       		.byte	0
 3262 0055 08       		.uleb128 0x8
 3263 0056 34       		.uleb128 0x34
 3264 0057 00       		.byte	0
 3265 0058 03       		.uleb128 0x3
 3266 0059 0E       		.uleb128 0xe
 3267 005a 3A       		.uleb128 0x3a
 3268 005b 0B       		.uleb128 0xb
 3269 005c 3B       		.uleb128 0x3b
 3270 005d 0B       		.uleb128 0xb
 3271 005e 49       		.uleb128 0x49
 3272 005f 13       		.uleb128 0x13
 3273 0060 3F       		.uleb128 0x3f
 3274 0061 19       		.uleb128 0x19
 3275 0062 3C       		.uleb128 0x3c
 3276 0063 19       		.uleb128 0x19
 3277 0064 00       		.byte	0
 3278 0065 00       		.byte	0
 3279 0066 09       		.uleb128 0x9
 3280 0067 04       		.uleb128 0x4
 3281 0068 01       		.byte	0x1
 3282 0069 0B       		.uleb128 0xb
 3283 006a 0B       		.uleb128 0xb
 3284 006b 49       		.uleb128 0x49
 3285 006c 13       		.uleb128 0x13
 3286 006d 3A       		.uleb128 0x3a
 3287 006e 0B       		.uleb128 0xb
 3288 006f 3B       		.uleb128 0x3b
 3289 0070 05       		.uleb128 0x5
 3290 0071 01       		.uleb128 0x1
 3291 0072 13       		.uleb128 0x13
 3292 0073 00       		.byte	0
 3293 0074 00       		.byte	0
 3294 0075 0A       		.uleb128 0xa
 3295 0076 28       		.uleb128 0x28
 3296 0077 00       		.byte	0
 3297 0078 03       		.uleb128 0x3
 3298 0079 0E       		.uleb128 0xe
 3299 007a 1C       		.uleb128 0x1c
 3300 007b 0B       		.uleb128 0xb
 3301 007c 00       		.byte	0
 3302 007d 00       		.byte	0
 3303 007e 0B       		.uleb128 0xb
 3304 007f 28       		.uleb128 0x28
 3305 0080 00       		.byte	0
 3306 0081 03       		.uleb128 0x3
 3307 0082 08       		.uleb128 0x8
 3308 0083 1C       		.uleb128 0x1c
 3309 0084 0B       		.uleb128 0xb
 3310 0085 00       		.byte	0
 3311 0086 00       		.byte	0
 3312 0087 0C       		.uleb128 0xc
 3313 0088 16       		.uleb128 0x16
 3314 0089 00       		.byte	0
ARM GAS  /tmp/ccB6Y6ca.s 			page 85


 3315 008a 03       		.uleb128 0x3
 3316 008b 0E       		.uleb128 0xe
 3317 008c 3A       		.uleb128 0x3a
 3318 008d 0B       		.uleb128 0xb
 3319 008e 3B       		.uleb128 0x3b
 3320 008f 05       		.uleb128 0x5
 3321 0090 49       		.uleb128 0x49
 3322 0091 13       		.uleb128 0x13
 3323 0092 00       		.byte	0
 3324 0093 00       		.byte	0
 3325 0094 0D       		.uleb128 0xd
 3326 0095 13       		.uleb128 0x13
 3327 0096 01       		.byte	0x1
 3328 0097 0B       		.uleb128 0xb
 3329 0098 0B       		.uleb128 0xb
 3330 0099 3A       		.uleb128 0x3a
 3331 009a 0B       		.uleb128 0xb
 3332 009b 3B       		.uleb128 0x3b
 3333 009c 05       		.uleb128 0x5
 3334 009d 01       		.uleb128 0x1
 3335 009e 13       		.uleb128 0x13
 3336 009f 00       		.byte	0
 3337 00a0 00       		.byte	0
 3338 00a1 0E       		.uleb128 0xe
 3339 00a2 0D       		.uleb128 0xd
 3340 00a3 00       		.byte	0
 3341 00a4 03       		.uleb128 0x3
 3342 00a5 08       		.uleb128 0x8
 3343 00a6 3A       		.uleb128 0x3a
 3344 00a7 0B       		.uleb128 0xb
 3345 00a8 3B       		.uleb128 0x3b
 3346 00a9 05       		.uleb128 0x5
 3347 00aa 49       		.uleb128 0x49
 3348 00ab 13       		.uleb128 0x13
 3349 00ac 38       		.uleb128 0x38
 3350 00ad 0B       		.uleb128 0xb
 3351 00ae 00       		.byte	0
 3352 00af 00       		.byte	0
 3353 00b0 0F       		.uleb128 0xf
 3354 00b1 0D       		.uleb128 0xd
 3355 00b2 00       		.byte	0
 3356 00b3 03       		.uleb128 0x3
 3357 00b4 0E       		.uleb128 0xe
 3358 00b5 3A       		.uleb128 0x3a
 3359 00b6 0B       		.uleb128 0xb
 3360 00b7 3B       		.uleb128 0x3b
 3361 00b8 05       		.uleb128 0x5
 3362 00b9 49       		.uleb128 0x49
 3363 00ba 13       		.uleb128 0x13
 3364 00bb 38       		.uleb128 0x38
 3365 00bc 0B       		.uleb128 0xb
 3366 00bd 00       		.byte	0
 3367 00be 00       		.byte	0
 3368 00bf 10       		.uleb128 0x10
 3369 00c0 13       		.uleb128 0x13
 3370 00c1 01       		.byte	0x1
 3371 00c2 0B       		.uleb128 0xb
ARM GAS  /tmp/ccB6Y6ca.s 			page 86


 3372 00c3 0B       		.uleb128 0xb
 3373 00c4 3A       		.uleb128 0x3a
 3374 00c5 0B       		.uleb128 0xb
 3375 00c6 3B       		.uleb128 0x3b
 3376 00c7 0B       		.uleb128 0xb
 3377 00c8 01       		.uleb128 0x1
 3378 00c9 13       		.uleb128 0x13
 3379 00ca 00       		.byte	0
 3380 00cb 00       		.byte	0
 3381 00cc 11       		.uleb128 0x11
 3382 00cd 0D       		.uleb128 0xd
 3383 00ce 00       		.byte	0
 3384 00cf 03       		.uleb128 0x3
 3385 00d0 0E       		.uleb128 0xe
 3386 00d1 3A       		.uleb128 0x3a
 3387 00d2 0B       		.uleb128 0xb
 3388 00d3 3B       		.uleb128 0x3b
 3389 00d4 0B       		.uleb128 0xb
 3390 00d5 49       		.uleb128 0x49
 3391 00d6 13       		.uleb128 0x13
 3392 00d7 38       		.uleb128 0x38
 3393 00d8 0B       		.uleb128 0xb
 3394 00d9 00       		.byte	0
 3395 00da 00       		.byte	0
 3396 00db 12       		.uleb128 0x12
 3397 00dc 01       		.uleb128 0x1
 3398 00dd 01       		.byte	0x1
 3399 00de 49       		.uleb128 0x49
 3400 00df 13       		.uleb128 0x13
 3401 00e0 01       		.uleb128 0x1
 3402 00e1 13       		.uleb128 0x13
 3403 00e2 00       		.byte	0
 3404 00e3 00       		.byte	0
 3405 00e4 13       		.uleb128 0x13
 3406 00e5 21       		.uleb128 0x21
 3407 00e6 00       		.byte	0
 3408 00e7 49       		.uleb128 0x49
 3409 00e8 13       		.uleb128 0x13
 3410 00e9 2F       		.uleb128 0x2f
 3411 00ea 0B       		.uleb128 0xb
 3412 00eb 00       		.byte	0
 3413 00ec 00       		.byte	0
 3414 00ed 14       		.uleb128 0x14
 3415 00ee 34       		.uleb128 0x34
 3416 00ef 00       		.byte	0
 3417 00f0 03       		.uleb128 0x3
 3418 00f1 0E       		.uleb128 0xe
 3419 00f2 3A       		.uleb128 0x3a
 3420 00f3 0B       		.uleb128 0xb
 3421 00f4 3B       		.uleb128 0x3b
 3422 00f5 0B       		.uleb128 0xb
 3423 00f6 49       		.uleb128 0x49
 3424 00f7 13       		.uleb128 0x13
 3425 00f8 02       		.uleb128 0x2
 3426 00f9 18       		.uleb128 0x18
 3427 00fa 00       		.byte	0
 3428 00fb 00       		.byte	0
ARM GAS  /tmp/ccB6Y6ca.s 			page 87


 3429 00fc 15       		.uleb128 0x15
 3430 00fd 2E       		.uleb128 0x2e
 3431 00fe 01       		.byte	0x1
 3432 00ff 3F       		.uleb128 0x3f
 3433 0100 19       		.uleb128 0x19
 3434 0101 03       		.uleb128 0x3
 3435 0102 0E       		.uleb128 0xe
 3436 0103 3A       		.uleb128 0x3a
 3437 0104 0B       		.uleb128 0xb
 3438 0105 3B       		.uleb128 0x3b
 3439 0106 05       		.uleb128 0x5
 3440 0107 27       		.uleb128 0x27
 3441 0108 19       		.uleb128 0x19
 3442 0109 11       		.uleb128 0x11
 3443 010a 01       		.uleb128 0x1
 3444 010b 12       		.uleb128 0x12
 3445 010c 06       		.uleb128 0x6
 3446 010d 40       		.uleb128 0x40
 3447 010e 18       		.uleb128 0x18
 3448 010f 9742     		.uleb128 0x2117
 3449 0111 19       		.uleb128 0x19
 3450 0112 01       		.uleb128 0x1
 3451 0113 13       		.uleb128 0x13
 3452 0114 00       		.byte	0
 3453 0115 00       		.byte	0
 3454 0116 16       		.uleb128 0x16
 3455 0117 05       		.uleb128 0x5
 3456 0118 00       		.byte	0
 3457 0119 03       		.uleb128 0x3
 3458 011a 0E       		.uleb128 0xe
 3459 011b 3A       		.uleb128 0x3a
 3460 011c 0B       		.uleb128 0xb
 3461 011d 3B       		.uleb128 0x3b
 3462 011e 05       		.uleb128 0x5
 3463 011f 49       		.uleb128 0x49
 3464 0120 13       		.uleb128 0x13
 3465 0121 02       		.uleb128 0x2
 3466 0122 18       		.uleb128 0x18
 3467 0123 00       		.byte	0
 3468 0124 00       		.byte	0
 3469 0125 17       		.uleb128 0x17
 3470 0126 2E       		.uleb128 0x2e
 3471 0127 01       		.byte	0x1
 3472 0128 3F       		.uleb128 0x3f
 3473 0129 19       		.uleb128 0x19
 3474 012a 03       		.uleb128 0x3
 3475 012b 0E       		.uleb128 0xe
 3476 012c 3A       		.uleb128 0x3a
 3477 012d 0B       		.uleb128 0xb
 3478 012e 3B       		.uleb128 0x3b
 3479 012f 05       		.uleb128 0x5
 3480 0130 27       		.uleb128 0x27
 3481 0131 19       		.uleb128 0x19
 3482 0132 49       		.uleb128 0x49
 3483 0133 13       		.uleb128 0x13
 3484 0134 11       		.uleb128 0x11
 3485 0135 01       		.uleb128 0x1
ARM GAS  /tmp/ccB6Y6ca.s 			page 88


 3486 0136 12       		.uleb128 0x12
 3487 0137 06       		.uleb128 0x6
 3488 0138 40       		.uleb128 0x40
 3489 0139 18       		.uleb128 0x18
 3490 013a 9742     		.uleb128 0x2117
 3491 013c 19       		.uleb128 0x19
 3492 013d 01       		.uleb128 0x1
 3493 013e 13       		.uleb128 0x13
 3494 013f 00       		.byte	0
 3495 0140 00       		.byte	0
 3496 0141 18       		.uleb128 0x18
 3497 0142 34       		.uleb128 0x34
 3498 0143 00       		.byte	0
 3499 0144 03       		.uleb128 0x3
 3500 0145 0E       		.uleb128 0xe
 3501 0146 3A       		.uleb128 0x3a
 3502 0147 0B       		.uleb128 0xb
 3503 0148 3B       		.uleb128 0x3b
 3504 0149 05       		.uleb128 0x5
 3505 014a 49       		.uleb128 0x49
 3506 014b 13       		.uleb128 0x13
 3507 014c 02       		.uleb128 0x2
 3508 014d 18       		.uleb128 0x18
 3509 014e 00       		.byte	0
 3510 014f 00       		.byte	0
 3511 0150 19       		.uleb128 0x19
 3512 0151 2E       		.uleb128 0x2e
 3513 0152 00       		.byte	0
 3514 0153 3F       		.uleb128 0x3f
 3515 0154 19       		.uleb128 0x19
 3516 0155 03       		.uleb128 0x3
 3517 0156 0E       		.uleb128 0xe
 3518 0157 3A       		.uleb128 0x3a
 3519 0158 0B       		.uleb128 0xb
 3520 0159 3B       		.uleb128 0x3b
 3521 015a 05       		.uleb128 0x5
 3522 015b 27       		.uleb128 0x27
 3523 015c 19       		.uleb128 0x19
 3524 015d 11       		.uleb128 0x11
 3525 015e 01       		.uleb128 0x1
 3526 015f 12       		.uleb128 0x12
 3527 0160 06       		.uleb128 0x6
 3528 0161 40       		.uleb128 0x40
 3529 0162 18       		.uleb128 0x18
 3530 0163 9742     		.uleb128 0x2117
 3531 0165 19       		.uleb128 0x19
 3532 0166 00       		.byte	0
 3533 0167 00       		.byte	0
 3534 0168 1A       		.uleb128 0x1a
 3535 0169 34       		.uleb128 0x34
 3536 016a 00       		.byte	0
 3537 016b 03       		.uleb128 0x3
 3538 016c 08       		.uleb128 0x8
 3539 016d 3A       		.uleb128 0x3a
 3540 016e 0B       		.uleb128 0xb
 3541 016f 3B       		.uleb128 0x3b
 3542 0170 05       		.uleb128 0x5
ARM GAS  /tmp/ccB6Y6ca.s 			page 89


 3543 0171 49       		.uleb128 0x49
 3544 0172 13       		.uleb128 0x13
 3545 0173 02       		.uleb128 0x2
 3546 0174 18       		.uleb128 0x18
 3547 0175 00       		.byte	0
 3548 0176 00       		.byte	0
 3549 0177 1B       		.uleb128 0x1b
 3550 0178 0F       		.uleb128 0xf
 3551 0179 00       		.byte	0
 3552 017a 0B       		.uleb128 0xb
 3553 017b 0B       		.uleb128 0xb
 3554 017c 49       		.uleb128 0x49
 3555 017d 13       		.uleb128 0x13
 3556 017e 00       		.byte	0
 3557 017f 00       		.byte	0
 3558 0180 1C       		.uleb128 0x1c
 3559 0181 2E       		.uleb128 0x2e
 3560 0182 00       		.byte	0
 3561 0183 3F       		.uleb128 0x3f
 3562 0184 19       		.uleb128 0x19
 3563 0185 03       		.uleb128 0x3
 3564 0186 0E       		.uleb128 0xe
 3565 0187 3A       		.uleb128 0x3a
 3566 0188 0B       		.uleb128 0xb
 3567 0189 3B       		.uleb128 0x3b
 3568 018a 05       		.uleb128 0x5
 3569 018b 27       		.uleb128 0x27
 3570 018c 19       		.uleb128 0x19
 3571 018d 49       		.uleb128 0x49
 3572 018e 13       		.uleb128 0x13
 3573 018f 11       		.uleb128 0x11
 3574 0190 01       		.uleb128 0x1
 3575 0191 12       		.uleb128 0x12
 3576 0192 06       		.uleb128 0x6
 3577 0193 40       		.uleb128 0x40
 3578 0194 18       		.uleb128 0x18
 3579 0195 9742     		.uleb128 0x2117
 3580 0197 19       		.uleb128 0x19
 3581 0198 00       		.byte	0
 3582 0199 00       		.byte	0
 3583 019a 1D       		.uleb128 0x1d
 3584 019b 2E       		.uleb128 0x2e
 3585 019c 01       		.byte	0x1
 3586 019d 3F       		.uleb128 0x3f
 3587 019e 19       		.uleb128 0x19
 3588 019f 03       		.uleb128 0x3
 3589 01a0 0E       		.uleb128 0xe
 3590 01a1 3A       		.uleb128 0x3a
 3591 01a2 0B       		.uleb128 0xb
 3592 01a3 3B       		.uleb128 0x3b
 3593 01a4 05       		.uleb128 0x5
 3594 01a5 27       		.uleb128 0x27
 3595 01a6 19       		.uleb128 0x19
 3596 01a7 49       		.uleb128 0x49
 3597 01a8 13       		.uleb128 0x13
 3598 01a9 11       		.uleb128 0x11
 3599 01aa 01       		.uleb128 0x1
ARM GAS  /tmp/ccB6Y6ca.s 			page 90


 3600 01ab 12       		.uleb128 0x12
 3601 01ac 06       		.uleb128 0x6
 3602 01ad 40       		.uleb128 0x40
 3603 01ae 18       		.uleb128 0x18
 3604 01af 9642     		.uleb128 0x2116
 3605 01b1 19       		.uleb128 0x19
 3606 01b2 01       		.uleb128 0x1
 3607 01b3 13       		.uleb128 0x13
 3608 01b4 00       		.byte	0
 3609 01b5 00       		.byte	0
 3610 01b6 1E       		.uleb128 0x1e
 3611 01b7 2E       		.uleb128 0x2e
 3612 01b8 00       		.byte	0
 3613 01b9 3F       		.uleb128 0x3f
 3614 01ba 19       		.uleb128 0x19
 3615 01bb 03       		.uleb128 0x3
 3616 01bc 0E       		.uleb128 0xe
 3617 01bd 3A       		.uleb128 0x3a
 3618 01be 0B       		.uleb128 0xb
 3619 01bf 3B       		.uleb128 0x3b
 3620 01c0 0B       		.uleb128 0xb
 3621 01c1 27       		.uleb128 0x27
 3622 01c2 19       		.uleb128 0x19
 3623 01c3 11       		.uleb128 0x11
 3624 01c4 01       		.uleb128 0x1
 3625 01c5 12       		.uleb128 0x12
 3626 01c6 06       		.uleb128 0x6
 3627 01c7 40       		.uleb128 0x40
 3628 01c8 18       		.uleb128 0x18
 3629 01c9 9742     		.uleb128 0x2117
 3630 01cb 19       		.uleb128 0x19
 3631 01cc 00       		.byte	0
 3632 01cd 00       		.byte	0
 3633 01ce 00       		.byte	0
 3634              		.section	.debug_aranges,"",%progbits
 3635 0000 1C000000 		.4byte	0x1c
 3636 0004 0200     		.2byte	0x2
 3637 0006 00000000 		.4byte	.Ldebug_info0
 3638 000a 04       		.byte	0x4
 3639 000b 00       		.byte	0
 3640 000c 0000     		.2byte	0
 3641 000e 0000     		.2byte	0
 3642 0010 00000000 		.4byte	.Ltext0
 3643 0014 D0070000 		.4byte	.Letext0-.Ltext0
 3644 0018 00000000 		.4byte	0
 3645 001c 00000000 		.4byte	0
 3646              		.section	.debug_line,"",%progbits
 3647              	.Ldebug_line0:
 3648 0000 39020000 		.section	.debug_str,"MS",%progbits,1
 3648      0200DE00 
 3648      00000201 
 3648      FB0E0D00 
 3648      01010101 
 3649              	.LASF36:
 3650 0000 5243435F 		.ascii	"RCC_TypeDef\000"
 3650      54797065 
 3650      44656600 
ARM GAS  /tmp/ccB6Y6ca.s 			page 91


 3651              	.LASF31:
 3652 000c 41504231 		.ascii	"APB1RSTR\000"
 3652      52535452 
 3652      00
 3653              	.LASF83:
 3654 0015 5243435F 		.ascii	"RCC_HCLK\000"
 3654      48434C4B 
 3654      00
 3655              	.LASF76:
 3656 001e 5243435F 		.ascii	"RCC_ADCCLKConfig\000"
 3656      41444343 
 3656      4C4B436F 
 3656      6E666967 
 3656      00
 3657              	.LASF51:
 3658 002f 5243435F 		.ascii	"RCC_ClearITPendingBit\000"
 3658      436C6561 
 3658      72495450 
 3658      656E6469 
 3658      6E674269 
 3659              	.LASF78:
 3660 0045 746D7072 		.ascii	"tmpreg\000"
 3660      656700
 3661              	.LASF47:
 3662 004c 5243435F 		.ascii	"RCC_GetITStatus\000"
 3662      47657449 
 3662      54537461 
 3662      74757300 
 3663              	.LASF17:
 3664 005c 73697A65 		.ascii	"sizetype\000"
 3664      74797065 
 3664      00
 3665              	.LASF38:
 3666 0065 48434C4B 		.ascii	"HCLK_Frequency\000"
 3666      5F467265 
 3666      7175656E 
 3666      637900
 3667              	.LASF92:
 3668 0074 5243435F 		.ascii	"RCC_PLLMul\000"
 3668      504C4C4D 
 3668      756C00
 3669              	.LASF60:
 3670 007f 5243435F 		.ascii	"RCC_APB2Periph\000"
 3670      41504232 
 3670      50657269 
 3670      706800
 3671              	.LASF77:
 3672 008e 5243435F 		.ascii	"RCC_PCLK2\000"
 3672      50434C4B 
 3672      3200
 3673              	.LASF8:
 3674 0098 5F5F7569 		.ascii	"__uint32_t\000"
 3674      6E743332 
 3674      5F7400
 3675              	.LASF4:
 3676 00a3 5F5F7569 		.ascii	"__uint16_t\000"
 3676      6E743136 
ARM GAS  /tmp/ccB6Y6ca.s 			page 92


 3676      5F7400
 3677              	.LASF89:
 3678 00ae 5243435F 		.ascii	"RCC_PLLCmd\000"
 3678      504C4C43 
 3678      6D6400
 3679              	.LASF99:
 3680 00b9 48534553 		.ascii	"HSEStatus\000"
 3680      74617475 
 3680      7300
 3681              	.LASF2:
 3682 00c3 73686F72 		.ascii	"short int\000"
 3682      7420696E 
 3682      7400
 3683              	.LASF105:
 3684 00cd 636F6D6D 		.ascii	"common/stm32f10x_rcc.c\000"
 3684      6F6E2F73 
 3684      746D3332 
 3684      66313078 
 3684      5F726363 
 3685              	.LASF29:
 3686 00e4 43464752 		.ascii	"CFGR\000"
 3686      00
 3687              	.LASF24:
 3688 00e9 454E4142 		.ascii	"ENABLE\000"
 3688      4C4500
 3689              	.LASF58:
 3690 00f0 5243435F 		.ascii	"RCC_APB1Periph\000"
 3690      41504231 
 3690      50657269 
 3690      706800
 3691              	.LASF13:
 3692 00ff 75696E74 		.ascii	"uint8_t\000"
 3692      385F7400 
 3693              	.LASF34:
 3694 0107 41504231 		.ascii	"APB1ENR\000"
 3694      454E5200 
 3695              	.LASF69:
 3696 010f 70726573 		.ascii	"presc\000"
 3696      6300
 3697              	.LASF55:
 3698 0115 4E657753 		.ascii	"NewState\000"
 3698      74617465 
 3698      00
 3699              	.LASF52:
 3700 011e 5243435F 		.ascii	"RCC_MCOConfig\000"
 3700      4D434F43 
 3700      6F6E6669 
 3700      6700
 3701              	.LASF103:
 3702 012c 5243435F 		.ascii	"RCC_DeInit\000"
 3702      4465496E 
 3702      697400
 3703              	.LASF96:
 3704 0137 5243435F 		.ascii	"RCC_WaitForHSEStartUp\000"
 3704      57616974 
 3704      466F7248 
 3704      53455374 
ARM GAS  /tmp/ccB6Y6ca.s 			page 93


 3704      61727455 
 3705              	.LASF23:
 3706 014d 44495341 		.ascii	"DISABLE\000"
 3706      424C4500 
 3707              	.LASF75:
 3708 0155 5243435F 		.ascii	"RCC_LSE\000"
 3708      4C534500 
 3709              	.LASF72:
 3710 015d 5243435F 		.ascii	"RCC_RTCCLKSource\000"
 3710      52544343 
 3710      4C4B536F 
 3710      75726365 
 3710      00
 3711              	.LASF10:
 3712 016e 6C6F6E67 		.ascii	"long long int\000"
 3712      206C6F6E 
 3712      6720696E 
 3712      7400
 3713              	.LASF11:
 3714 017c 6C6F6E67 		.ascii	"long long unsigned int\000"
 3714      206C6F6E 
 3714      6720756E 
 3714      7369676E 
 3714      65642069 
 3715              	.LASF57:
 3716 0193 5243435F 		.ascii	"RCC_APB1PeriphResetCmd\000"
 3716      41504231 
 3716      50657269 
 3716      70685265 
 3716      73657443 
 3717              	.LASF90:
 3718 01aa 5243435F 		.ascii	"RCC_PLLConfig\000"
 3718      504C4C43 
 3718      6F6E6669 
 3718      6700
 3719              	.LASF22:
 3720 01b8 49545374 		.ascii	"ITStatus\000"
 3720      61747573 
 3720      00
 3721              	.LASF7:
 3722 01c1 6C6F6E67 		.ascii	"long int\000"
 3722      20696E74 
 3722      00
 3723              	.LASF28:
 3724 01ca 4572726F 		.ascii	"ErrorStatus\000"
 3724      72537461 
 3724      74757300 
 3725              	.LASF67:
 3726 01d6 706C6C6D 		.ascii	"pllmull\000"
 3726      756C6C00 
 3727              	.LASF79:
 3728 01de 5243435F 		.ascii	"RCC_USBCLKConfig\000"
 3728      55534243 
 3728      4C4B436F 
 3728      6E666967 
 3728      00
 3729              	.LASF73:
ARM GAS  /tmp/ccB6Y6ca.s 			page 94


 3730 01ef 5243435F 		.ascii	"RCC_LSICmd\000"
 3730      4C534943 
 3730      6D6400
 3731              	.LASF107:
 3732 01fa 5243435F 		.ascii	"RCC_GetSYSCLKSource\000"
 3732      47657453 
 3732      5953434C 
 3732      4B536F75 
 3732      72636500 
 3733              	.LASF30:
 3734 020e 41504232 		.ascii	"APB2RSTR\000"
 3734      52535452 
 3734      00
 3735              	.LASF3:
 3736 0217 5F5F7569 		.ascii	"__uint8_t\000"
 3736      6E74385F 
 3736      7400
 3737              	.LASF63:
 3738 0221 5243435F 		.ascii	"RCC_AHBPeriphClockCmd\000"
 3738      41484250 
 3738      65726970 
 3738      68436C6F 
 3738      636B436D 
 3739              	.LASF26:
 3740 0237 4552524F 		.ascii	"ERROR\000"
 3740      5200
 3741              	.LASF68:
 3742 023d 706C6C73 		.ascii	"pllsource\000"
 3742      6F757263 
 3742      6500
 3743              	.LASF20:
 3744 0247 52455345 		.ascii	"RESET\000"
 3744      5400
 3745              	.LASF32:
 3746 024d 41484245 		.ascii	"AHBENR\000"
 3746      4E5200
 3747              	.LASF84:
 3748 0254 5243435F 		.ascii	"RCC_PCLK1Config\000"
 3748      50434C4B 
 3748      31436F6E 
 3748      66696700 
 3749              	.LASF106:
 3750 0264 2F686F6D 		.ascii	"/home/enbin/Documents/code/STM/usart\000"
 3750      652F656E 
 3750      62696E2F 
 3750      446F6375 
 3750      6D656E74 
 3751              	.LASF46:
 3752 0289 62697473 		.ascii	"bitstatus\000"
 3752      74617475 
 3752      7300
 3753              	.LASF50:
 3754 0293 73746174 		.ascii	"statusreg\000"
 3754      75737265 
 3754      6700
 3755              	.LASF35:
 3756 029d 42444352 		.ascii	"BDCR\000"
ARM GAS  /tmp/ccB6Y6ca.s 			page 95


 3756      00
 3757              	.LASF61:
 3758 02a2 5243435F 		.ascii	"RCC_APB1PeriphClockCmd\000"
 3758      41504231 
 3758      50657269 
 3758      7068436C 
 3758      6F636B43 
 3759              	.LASF1:
 3760 02b9 756E7369 		.ascii	"unsigned char\000"
 3760      676E6564 
 3760      20636861 
 3760      7200
 3761              	.LASF33:
 3762 02c7 41504232 		.ascii	"APB2ENR\000"
 3762      454E5200 
 3763              	.LASF97:
 3764 02cf 53746172 		.ascii	"StartUpCounter\000"
 3764      74557043 
 3764      6F756E74 
 3764      657200
 3765              	.LASF0:
 3766 02de 7369676E 		.ascii	"signed char\000"
 3766      65642063 
 3766      68617200 
 3767              	.LASF56:
 3768 02ea 5243435F 		.ascii	"RCC_BackupResetCmd\000"
 3768      4261636B 
 3768      75705265 
 3768      73657443 
 3768      6D6400
 3769              	.LASF94:
 3770 02fd 5243435F 		.ascii	"RCC_AdjustHSICalibrationValue\000"
 3770      41646A75 
 3770      73744853 
 3770      4943616C 
 3770      69627261 
 3771              	.LASF41:
 3772 031b 41444343 		.ascii	"ADCCLK_Frequency\000"
 3772      4C4B5F46 
 3772      72657175 
 3772      656E6379 
 3772      00
 3773              	.LASF49:
 3774 032c 5243435F 		.ascii	"RCC_FLAG\000"
 3774      464C4147 
 3774      00
 3775              	.LASF12:
 3776 0335 756E7369 		.ascii	"unsigned int\000"
 3776      676E6564 
 3776      20696E74 
 3776      00
 3777              	.LASF91:
 3778 0342 5243435F 		.ascii	"RCC_PLLSource\000"
 3778      504C4C53 
 3778      6F757263 
 3778      6500
 3779              	.LASF14:
ARM GAS  /tmp/ccB6Y6ca.s 			page 96


 3780 0350 75696E74 		.ascii	"uint16_t\000"
 3780      31365F74 
 3780      00
 3781              	.LASF104:
 3782 0359 474E5520 		.ascii	"GNU C11 6.1.1 20160526 -mthumb -mcpu=cortex-m3 -g -"
 3782      43313120 
 3782      362E312E 
 3782      31203230 
 3782      31363035 
 3783 038c 666E6F2D 		.ascii	"fno-common\000"
 3783      636F6D6D 
 3783      6F6E00
 3784              	.LASF48:
 3785 0397 5243435F 		.ascii	"RCC_GetFlagStatus\000"
 3785      47657446 
 3785      6C616753 
 3785      74617475 
 3785      7300
 3786              	.LASF80:
 3787 03a9 5243435F 		.ascii	"RCC_USBCLKSource\000"
 3787      55534243 
 3787      4C4B536F 
 3787      75726365 
 3787      00
 3788              	.LASF27:
 3789 03ba 53554343 		.ascii	"SUCCESS\000"
 3789      45535300 
 3790              	.LASF42:
 3791 03c2 5243435F 		.ascii	"RCC_ClocksTypeDef\000"
 3791      436C6F63 
 3791      6B735479 
 3791      70654465 
 3791      6600
 3792              	.LASF102:
 3793 03d4 5243435F 		.ascii	"RCC_ClearFlag\000"
 3793      436C6561 
 3793      72466C61 
 3793      6700
 3794              	.LASF5:
 3795 03e2 73686F72 		.ascii	"short unsigned int\000"
 3795      7420756E 
 3795      7369676E 
 3795      65642069 
 3795      6E7400
 3796              	.LASF98:
 3797 03f5 73746174 		.ascii	"status\000"
 3797      757300
 3798              	.LASF86:
 3799 03fc 5243435F 		.ascii	"RCC_SYSCLK\000"
 3799      53595343 
 3799      4C4B00
 3800              	.LASF54:
 3801 0407 5243435F 		.ascii	"RCC_ClockSecuritySystemCmd\000"
 3801      436C6F63 
 3801      6B536563 
 3801      75726974 
 3801      79537973 
ARM GAS  /tmp/ccB6Y6ca.s 			page 97


 3802              	.LASF15:
 3803 0422 696E7433 		.ascii	"int32_t\000"
 3803      325F7400 
 3804              	.LASF100:
 3805 042a 5243435F 		.ascii	"RCC_HSEConfig\000"
 3805      48534543 
 3805      6F6E6669 
 3805      6700
 3806              	.LASF37:
 3807 0438 53595343 		.ascii	"SYSCLK_Frequency\000"
 3807      4C4B5F46 
 3807      72657175 
 3807      656E6379 
 3807      00
 3808              	.LASF19:
 3809 0449 53797374 		.ascii	"SystemCoreClock\000"
 3809      656D436F 
 3809      7265436C 
 3809      6F636B00 
 3810              	.LASF40:
 3811 0459 50434C4B 		.ascii	"PCLK2_Frequency\000"
 3811      325F4672 
 3811      65717565 
 3811      6E637900 
 3812              	.LASF81:
 3813 0469 5243435F 		.ascii	"RCC_ITConfig\000"
 3813      4954436F 
 3813      6E666967 
 3813      00
 3814              	.LASF62:
 3815 0476 5243435F 		.ascii	"RCC_APB2PeriphClockCmd\000"
 3815      41504232 
 3815      50657269 
 3815      7068436C 
 3815      6F636B43 
 3816              	.LASF16:
 3817 048d 75696E74 		.ascii	"uint32_t\000"
 3817      33325F74 
 3817      00
 3818              	.LASF71:
 3819 0496 5243435F 		.ascii	"RCC_RTCCLKConfig\000"
 3819      52544343 
 3819      4C4B436F 
 3819      6E666967 
 3819      00
 3820              	.LASF9:
 3821 04a7 6C6F6E67 		.ascii	"long unsigned int\000"
 3821      20756E73 
 3821      69676E65 
 3821      6420696E 
 3821      7400
 3822              	.LASF101:
 3823 04b9 5243435F 		.ascii	"RCC_HSE\000"
 3823      48534500 
 3824              	.LASF88:
 3825 04c1 5243435F 		.ascii	"RCC_SYSCLKSource\000"
 3825      53595343 
ARM GAS  /tmp/ccB6Y6ca.s 			page 98


 3825      4C4B536F 
 3825      75726365 
 3825      00
 3826              	.LASF25:
 3827 04d2 46756E63 		.ascii	"FunctionalState\000"
 3827      74696F6E 
 3827      616C5374 
 3827      61746500 
 3828              	.LASF39:
 3829 04e2 50434C4B 		.ascii	"PCLK1_Frequency\000"
 3829      315F4672 
 3829      65717565 
 3829      6E637900 
 3830              	.LASF74:
 3831 04f2 5243435F 		.ascii	"RCC_LSEConfig\000"
 3831      4C534543 
 3831      6F6E6669 
 3831      6700
 3832              	.LASF43:
 3833 0500 41504241 		.ascii	"APBAHBPrescTable\000"
 3833      48425072 
 3833      65736354 
 3833      61626C65 
 3833      00
 3834              	.LASF95:
 3835 0511 48534943 		.ascii	"HSICalibrationValue\000"
 3835      616C6962 
 3835      72617469 
 3835      6F6E5661 
 3835      6C756500 
 3836              	.LASF6:
 3837 0525 5F5F696E 		.ascii	"__int32_t\000"
 3837      7433325F 
 3837      7400
 3838              	.LASF65:
 3839 052f 5243435F 		.ascii	"RCC_GetClocksFreq\000"
 3839      47657443 
 3839      6C6F636B 
 3839      73467265 
 3839      7100
 3840              	.LASF59:
 3841 0541 5243435F 		.ascii	"RCC_APB2PeriphResetCmd\000"
 3841      41504232 
 3841      50657269 
 3841      70685265 
 3841      73657443 
 3842              	.LASF70:
 3843 0558 5243435F 		.ascii	"RCC_RTCCLKCmd\000"
 3843      52544343 
 3843      4C4B436D 
 3843      6400
 3844              	.LASF66:
 3845 0566 5243435F 		.ascii	"RCC_Clocks\000"
 3845      436C6F63 
 3845      6B7300
 3846              	.LASF87:
 3847 0571 5243435F 		.ascii	"RCC_SYSCLKConfig\000"
ARM GAS  /tmp/ccB6Y6ca.s 			page 99


 3847      53595343 
 3847      4C4B436F 
 3847      6E666967 
 3847      00
 3848              	.LASF85:
 3849 0582 5243435F 		.ascii	"RCC_HCLKConfig\000"
 3849      48434C4B 
 3849      436F6E66 
 3849      696700
 3850              	.LASF93:
 3851 0591 5243435F 		.ascii	"RCC_HSICmd\000"
 3851      48534943 
 3851      6D6400
 3852              	.LASF18:
 3853 059c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3853      52784275 
 3853      66666572 
 3853      00
 3854              	.LASF53:
 3855 05a9 5243435F 		.ascii	"RCC_MCO\000"
 3855      4D434F00 
 3856              	.LASF45:
 3857 05b1 5243435F 		.ascii	"RCC_IT\000"
 3857      495400
 3858              	.LASF21:
 3859 05b8 466C6167 		.ascii	"FlagStatus\000"
 3859      53746174 
 3859      757300
 3860              	.LASF64:
 3861 05c3 5243435F 		.ascii	"RCC_AHBPeriph\000"
 3861      41484250 
 3861      65726970 
 3861      6800
 3862              	.LASF82:
 3863 05d1 5243435F 		.ascii	"RCC_PCLK2Config\000"
 3863      50434C4B 
 3863      32436F6E 
 3863      66696700 
 3864              	.LASF44:
 3865 05e1 41444350 		.ascii	"ADCPrescTable\000"
 3865      72657363 
 3865      5461626C 
 3865      6500
 3866              		.ident	"GCC: (Arch Repository) 6.1.1 20160526"
ARM GAS  /tmp/ccB6Y6ca.s 			page 100


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_rcc.c
     /tmp/ccB6Y6ca.s:16     .data:0000000000000000 $d
     /tmp/ccB6Y6ca.s:19     .data:0000000000000000 APBAHBPrescTable
     /tmp/ccB6Y6ca.s:39     .data:0000000000000010 ADCPrescTable
     /tmp/ccB6Y6ca.s:45     .text:0000000000000000 $t
     /tmp/ccB6Y6ca.s:52     .text:0000000000000000 RCC_DeInit
     /tmp/ccB6Y6ca.s:113    .text:0000000000000054 $d
     /tmp/ccB6Y6ca.s:118    .text:000000000000005c $t
     /tmp/ccB6Y6ca.s:125    .text:000000000000005c RCC_HSEConfig
     /tmp/ccB6Y6ca.s:193    .text:00000000000000b4 $d
     /tmp/ccB6Y6ca.s:197    .text:00000000000000b8 $t
     /tmp/ccB6Y6ca.s:204    .text:00000000000000b8 RCC_WaitForHSEStartUp
     /tmp/ccB6Y6ca.s:1854   .text:00000000000006ec RCC_GetFlagStatus
     /tmp/ccB6Y6ca.s:281    .text:0000000000000108 RCC_AdjustHSICalibrationValue
     /tmp/ccB6Y6ca.s:332    .text:0000000000000140 $d
     /tmp/ccB6Y6ca.s:336    .text:0000000000000144 $t
     /tmp/ccB6Y6ca.s:343    .text:0000000000000144 RCC_HSICmd
     /tmp/ccB6Y6ca.s:377    .text:0000000000000160 $d
     /tmp/ccB6Y6ca.s:381    .text:0000000000000164 $t
     /tmp/ccB6Y6ca.s:388    .text:0000000000000164 RCC_PLLConfig
     /tmp/ccB6Y6ca.s:440    .text:000000000000019c $d
     /tmp/ccB6Y6ca.s:444    .text:00000000000001a0 $t
     /tmp/ccB6Y6ca.s:451    .text:00000000000001a0 RCC_PLLCmd
     /tmp/ccB6Y6ca.s:485    .text:00000000000001bc $d
     /tmp/ccB6Y6ca.s:489    .text:00000000000001c0 $t
     /tmp/ccB6Y6ca.s:496    .text:00000000000001c0 RCC_SYSCLKConfig
     /tmp/ccB6Y6ca.s:545    .text:00000000000001f4 $d
     /tmp/ccB6Y6ca.s:549    .text:00000000000001f8 $t
     /tmp/ccB6Y6ca.s:556    .text:00000000000001f8 RCC_GetSYSCLKSource
     /tmp/ccB6Y6ca.s:586    .text:0000000000000210 $d
     /tmp/ccB6Y6ca.s:590    .text:0000000000000214 $t
     /tmp/ccB6Y6ca.s:597    .text:0000000000000214 RCC_HCLKConfig
     /tmp/ccB6Y6ca.s:646    .text:0000000000000248 $d
     /tmp/ccB6Y6ca.s:650    .text:000000000000024c $t
     /tmp/ccB6Y6ca.s:657    .text:000000000000024c RCC_PCLK1Config
     /tmp/ccB6Y6ca.s:706    .text:0000000000000280 $d
     /tmp/ccB6Y6ca.s:710    .text:0000000000000284 $t
     /tmp/ccB6Y6ca.s:717    .text:0000000000000284 RCC_PCLK2Config
     /tmp/ccB6Y6ca.s:767    .text:00000000000002b8 $d
     /tmp/ccB6Y6ca.s:771    .text:00000000000002bc $t
     /tmp/ccB6Y6ca.s:778    .text:00000000000002bc RCC_ITConfig
     /tmp/ccB6Y6ca.s:839    .text:0000000000000304 $d
     /tmp/ccB6Y6ca.s:843    .text:0000000000000308 $t
     /tmp/ccB6Y6ca.s:850    .text:0000000000000308 RCC_USBCLKConfig
     /tmp/ccB6Y6ca.s:883    .text:0000000000000320 $d
     /tmp/ccB6Y6ca.s:887    .text:0000000000000324 $t
     /tmp/ccB6Y6ca.s:894    .text:0000000000000324 RCC_ADCCLKConfig
     /tmp/ccB6Y6ca.s:943    .text:0000000000000358 $d
     /tmp/ccB6Y6ca.s:947    .text:000000000000035c $t
     /tmp/ccB6Y6ca.s:954    .text:000000000000035c RCC_LSEConfig
     /tmp/ccB6Y6ca.s:1015   .text:0000000000000398 $d
     /tmp/ccB6Y6ca.s:1019   .text:000000000000039c $t
     /tmp/ccB6Y6ca.s:1026   .text:000000000000039c RCC_LSICmd
     /tmp/ccB6Y6ca.s:1060   .text:00000000000003b8 $d
     /tmp/ccB6Y6ca.s:1064   .text:00000000000003bc $t
     /tmp/ccB6Y6ca.s:1071   .text:00000000000003bc RCC_RTCCLKConfig
ARM GAS  /tmp/ccB6Y6ca.s 			page 101


     /tmp/ccB6Y6ca.s:1107   .text:00000000000003dc $d
     /tmp/ccB6Y6ca.s:1111   .text:00000000000003e0 $t
     /tmp/ccB6Y6ca.s:1118   .text:00000000000003e0 RCC_RTCCLKCmd
     /tmp/ccB6Y6ca.s:1152   .text:00000000000003fc $d
     /tmp/ccB6Y6ca.s:1156   .text:0000000000000400 $t
     /tmp/ccB6Y6ca.s:1163   .text:0000000000000400 RCC_GetClocksFreq
     /tmp/ccB6Y6ca.s:1379   .text:000000000000054c $d
     /tmp/ccB6Y6ca.s:1387   .text:0000000000000560 $t
     /tmp/ccB6Y6ca.s:1394   .text:0000000000000560 RCC_AHBPeriphClockCmd
     /tmp/ccB6Y6ca.s:1448   .text:0000000000000598 $d
     /tmp/ccB6Y6ca.s:1452   .text:000000000000059c $t
     /tmp/ccB6Y6ca.s:1459   .text:000000000000059c RCC_APB2PeriphClockCmd
     /tmp/ccB6Y6ca.s:1513   .text:00000000000005d4 $d
     /tmp/ccB6Y6ca.s:1517   .text:00000000000005d8 $t
     /tmp/ccB6Y6ca.s:1524   .text:00000000000005d8 RCC_APB1PeriphClockCmd
     /tmp/ccB6Y6ca.s:1578   .text:0000000000000610 $d
     /tmp/ccB6Y6ca.s:1582   .text:0000000000000614 $t
     /tmp/ccB6Y6ca.s:1589   .text:0000000000000614 RCC_APB2PeriphResetCmd
     /tmp/ccB6Y6ca.s:1643   .text:000000000000064c $d
     /tmp/ccB6Y6ca.s:1647   .text:0000000000000650 $t
     /tmp/ccB6Y6ca.s:1654   .text:0000000000000650 RCC_APB1PeriphResetCmd
     /tmp/ccB6Y6ca.s:1708   .text:0000000000000688 $d
     /tmp/ccB6Y6ca.s:1712   .text:000000000000068c $t
     /tmp/ccB6Y6ca.s:1719   .text:000000000000068c RCC_BackupResetCmd
     /tmp/ccB6Y6ca.s:1753   .text:00000000000006a8 $d
     /tmp/ccB6Y6ca.s:1757   .text:00000000000006ac $t
     /tmp/ccB6Y6ca.s:1764   .text:00000000000006ac RCC_ClockSecuritySystemCmd
     /tmp/ccB6Y6ca.s:1798   .text:00000000000006c8 $d
     /tmp/ccB6Y6ca.s:1802   .text:00000000000006cc $t
     /tmp/ccB6Y6ca.s:1809   .text:00000000000006cc RCC_MCOConfig
     /tmp/ccB6Y6ca.s:1843   .text:00000000000006e8 $d
     /tmp/ccB6Y6ca.s:1847   .text:00000000000006ec $t
     /tmp/ccB6Y6ca.s:1945   .text:000000000000075c $d
     /tmp/ccB6Y6ca.s:1949   .text:0000000000000760 $t
     /tmp/ccB6Y6ca.s:1956   .text:0000000000000760 RCC_ClearFlag
     /tmp/ccB6Y6ca.s:1986   .text:0000000000000778 $d
     /tmp/ccB6Y6ca.s:1990   .text:000000000000077c $t
     /tmp/ccB6Y6ca.s:1997   .text:000000000000077c RCC_GetITStatus
     /tmp/ccB6Y6ca.s:2048   .text:00000000000007ac $d
     /tmp/ccB6Y6ca.s:2052   .text:00000000000007b0 $t
     /tmp/ccB6Y6ca.s:2059   .text:00000000000007b0 RCC_ClearITPendingBit
     /tmp/ccB6Y6ca.s:2093   .text:00000000000007cc $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
