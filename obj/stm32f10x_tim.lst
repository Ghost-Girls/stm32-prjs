ARM GAS  /tmp/ccRayNMu.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_tim.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	TIM_DeInit
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  21              		.type	TIM_DeInit, %function
  22              	TIM_DeInit:
  23              	.LFB63:
  24              		.file 1 "common/stm32f10x_tim.c"
   1:common/stm32f10x_tim.c **** /**
   2:common/stm32f10x_tim.c ****   ******************************************************************************
   3:common/stm32f10x_tim.c ****   * @file    stm32f10x_tim.c
   4:common/stm32f10x_tim.c ****   * @author  MCD Application Team
   5:common/stm32f10x_tim.c ****   * @version V3.5.0
   6:common/stm32f10x_tim.c ****   * @date    11-March-2011
   7:common/stm32f10x_tim.c ****   * @brief   This file provides all the TIM firmware functions.
   8:common/stm32f10x_tim.c ****   ******************************************************************************
   9:common/stm32f10x_tim.c ****   * @attention
  10:common/stm32f10x_tim.c ****   *
  11:common/stm32f10x_tim.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:common/stm32f10x_tim.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:common/stm32f10x_tim.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:common/stm32f10x_tim.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:common/stm32f10x_tim.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:common/stm32f10x_tim.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:common/stm32f10x_tim.c ****   *
  18:common/stm32f10x_tim.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:common/stm32f10x_tim.c ****   ******************************************************************************
  20:common/stm32f10x_tim.c ****   */
  21:common/stm32f10x_tim.c **** 
  22:common/stm32f10x_tim.c **** /* Includes ------------------------------------------------------------------*/
  23:common/stm32f10x_tim.c **** #include "stm32f10x_tim.h"
  24:common/stm32f10x_tim.c **** #include "stm32f10x_rcc.h"
  25:common/stm32f10x_tim.c **** #include "stm32f10x_conf.h"
  26:common/stm32f10x_tim.c **** 
  27:common/stm32f10x_tim.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  28:common/stm32f10x_tim.c ****   * @{
  29:common/stm32f10x_tim.c ****   */
  30:common/stm32f10x_tim.c **** 
  31:common/stm32f10x_tim.c **** /** @defgroup TIM 
  32:common/stm32f10x_tim.c ****   * @brief TIM driver modules
  33:common/stm32f10x_tim.c ****   * @{
ARM GAS  /tmp/ccRayNMu.s 			page 2


  34:common/stm32f10x_tim.c ****   */
  35:common/stm32f10x_tim.c **** 
  36:common/stm32f10x_tim.c **** /** @defgroup TIM_Private_TypesDefinitions
  37:common/stm32f10x_tim.c ****   * @{
  38:common/stm32f10x_tim.c ****   */
  39:common/stm32f10x_tim.c **** 
  40:common/stm32f10x_tim.c **** /**
  41:common/stm32f10x_tim.c ****   * @}
  42:common/stm32f10x_tim.c ****   */
  43:common/stm32f10x_tim.c **** 
  44:common/stm32f10x_tim.c **** /** @defgroup TIM_Private_Defines
  45:common/stm32f10x_tim.c ****   * @{
  46:common/stm32f10x_tim.c ****   */
  47:common/stm32f10x_tim.c **** 
  48:common/stm32f10x_tim.c **** /* ---------------------- TIM registers bit mask ------------------------ */
  49:common/stm32f10x_tim.c **** #define SMCR_ETR_Mask               ((uint16_t)0x00FF) 
  50:common/stm32f10x_tim.c **** #define CCMR_Offset                 ((uint16_t)0x0018)
  51:common/stm32f10x_tim.c **** #define CCER_CCE_Set                ((uint16_t)0x0001)  
  52:common/stm32f10x_tim.c **** #define	CCER_CCNE_Set               ((uint16_t)0x0004) 
  53:common/stm32f10x_tim.c **** 
  54:common/stm32f10x_tim.c **** /**
  55:common/stm32f10x_tim.c ****   * @}
  56:common/stm32f10x_tim.c ****   */
  57:common/stm32f10x_tim.c **** 
  58:common/stm32f10x_tim.c **** /** @defgroup TIM_Private_Macros
  59:common/stm32f10x_tim.c ****   * @{
  60:common/stm32f10x_tim.c ****   */
  61:common/stm32f10x_tim.c **** 
  62:common/stm32f10x_tim.c **** /**
  63:common/stm32f10x_tim.c ****   * @}
  64:common/stm32f10x_tim.c ****   */
  65:common/stm32f10x_tim.c **** 
  66:common/stm32f10x_tim.c **** /** @defgroup TIM_Private_Variables
  67:common/stm32f10x_tim.c ****   * @{
  68:common/stm32f10x_tim.c ****   */
  69:common/stm32f10x_tim.c **** 
  70:common/stm32f10x_tim.c **** /**
  71:common/stm32f10x_tim.c ****   * @}
  72:common/stm32f10x_tim.c ****   */
  73:common/stm32f10x_tim.c **** 
  74:common/stm32f10x_tim.c **** /** @defgroup TIM_Private_FunctionPrototypes
  75:common/stm32f10x_tim.c ****   * @{
  76:common/stm32f10x_tim.c ****   */
  77:common/stm32f10x_tim.c **** 
  78:common/stm32f10x_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
  79:common/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter);
  80:common/stm32f10x_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
  81:common/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter);
  82:common/stm32f10x_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
  83:common/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter);
  84:common/stm32f10x_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
  85:common/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter);
  86:common/stm32f10x_tim.c **** /**
  87:common/stm32f10x_tim.c ****   * @}
  88:common/stm32f10x_tim.c ****   */
  89:common/stm32f10x_tim.c **** 
  90:common/stm32f10x_tim.c **** /** @defgroup TIM_Private_Macros
ARM GAS  /tmp/ccRayNMu.s 			page 3


  91:common/stm32f10x_tim.c ****   * @{
  92:common/stm32f10x_tim.c ****   */
  93:common/stm32f10x_tim.c **** 
  94:common/stm32f10x_tim.c **** /**
  95:common/stm32f10x_tim.c ****   * @}
  96:common/stm32f10x_tim.c ****   */
  97:common/stm32f10x_tim.c **** 
  98:common/stm32f10x_tim.c **** /** @defgroup TIM_Private_Variables
  99:common/stm32f10x_tim.c ****   * @{
 100:common/stm32f10x_tim.c ****   */
 101:common/stm32f10x_tim.c **** 
 102:common/stm32f10x_tim.c **** /**
 103:common/stm32f10x_tim.c ****   * @}
 104:common/stm32f10x_tim.c ****   */
 105:common/stm32f10x_tim.c **** 
 106:common/stm32f10x_tim.c **** /** @defgroup TIM_Private_FunctionPrototypes
 107:common/stm32f10x_tim.c ****   * @{
 108:common/stm32f10x_tim.c ****   */
 109:common/stm32f10x_tim.c **** 
 110:common/stm32f10x_tim.c **** /**
 111:common/stm32f10x_tim.c ****   * @}
 112:common/stm32f10x_tim.c ****   */
 113:common/stm32f10x_tim.c **** 
 114:common/stm32f10x_tim.c **** /** @defgroup TIM_Private_Functions
 115:common/stm32f10x_tim.c ****   * @{
 116:common/stm32f10x_tim.c ****   */
 117:common/stm32f10x_tim.c **** 
 118:common/stm32f10x_tim.c **** /**
 119:common/stm32f10x_tim.c ****   * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
 120:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
 121:common/stm32f10x_tim.c ****   * @retval None
 122:common/stm32f10x_tim.c ****   */
 123:common/stm32f10x_tim.c **** void TIM_DeInit(TIM_TypeDef* TIMx)
 124:common/stm32f10x_tim.c **** {
  25              		.loc 1 124 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 16
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 7860     		str	r0, [r7, #4]
 125:common/stm32f10x_tim.c ****   /* Check the parameters */
 126:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 127:common/stm32f10x_tim.c ****  
 128:common/stm32f10x_tim.c ****   if (TIMx == TIM1)
  38              		.loc 1 128 0
  39 0008 7B68     		ldr	r3, [r7, #4]
  40 000a 784A     		ldr	r2, .L20
  41 000c 9342     		cmp	r3, r2
  42 000e 0AD1     		bne	.L2
 129:common/stm32f10x_tim.c ****   {
ARM GAS  /tmp/ccRayNMu.s 			page 4


 130:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
  43              		.loc 1 130 0
  44 0010 0121     		movs	r1, #1
  45 0012 4FF40060 		mov	r0, #2048
  46 0016 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 131:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  47              		.loc 1 131 0
  48 001a 0021     		movs	r1, #0
  49 001c 4FF40060 		mov	r0, #2048
  50 0020 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 132:common/stm32f10x_tim.c ****   }     
 133:common/stm32f10x_tim.c ****   else if (TIMx == TIM2)
 134:common/stm32f10x_tim.c ****   {
 135:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 136:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 137:common/stm32f10x_tim.c ****   }
 138:common/stm32f10x_tim.c ****   else if (TIMx == TIM3)
 139:common/stm32f10x_tim.c ****   {
 140:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 141:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 142:common/stm32f10x_tim.c ****   }
 143:common/stm32f10x_tim.c ****   else if (TIMx == TIM4)
 144:common/stm32f10x_tim.c ****   {
 145:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 146:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 147:common/stm32f10x_tim.c ****   } 
 148:common/stm32f10x_tim.c ****   else if (TIMx == TIM5)
 149:common/stm32f10x_tim.c ****   {
 150:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 151:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 152:common/stm32f10x_tim.c ****   } 
 153:common/stm32f10x_tim.c ****   else if (TIMx == TIM6)
 154:common/stm32f10x_tim.c ****   {
 155:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 156:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 157:common/stm32f10x_tim.c ****   } 
 158:common/stm32f10x_tim.c ****   else if (TIMx == TIM7)
 159:common/stm32f10x_tim.c ****   {
 160:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 161:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 162:common/stm32f10x_tim.c ****   } 
 163:common/stm32f10x_tim.c ****   else if (TIMx == TIM8)
 164:common/stm32f10x_tim.c ****   {
 165:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 166:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 167:common/stm32f10x_tim.c ****   }
 168:common/stm32f10x_tim.c ****   else if (TIMx == TIM9)
 169:common/stm32f10x_tim.c ****   {      
 170:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 171:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 172:common/stm32f10x_tim.c ****    }  
 173:common/stm32f10x_tim.c ****   else if (TIMx == TIM10)
 174:common/stm32f10x_tim.c ****   {      
 175:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 176:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 177:common/stm32f10x_tim.c ****   }  
 178:common/stm32f10x_tim.c ****   else if (TIMx == TIM11) 
ARM GAS  /tmp/ccRayNMu.s 			page 5


 179:common/stm32f10x_tim.c ****   {     
 180:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 181:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 182:common/stm32f10x_tim.c ****   }  
 183:common/stm32f10x_tim.c ****   else if (TIMx == TIM12)
 184:common/stm32f10x_tim.c ****   {      
 185:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 186:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 187:common/stm32f10x_tim.c ****   }  
 188:common/stm32f10x_tim.c ****   else if (TIMx == TIM13) 
 189:common/stm32f10x_tim.c ****   {       
 190:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 191:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 192:common/stm32f10x_tim.c ****   }
 193:common/stm32f10x_tim.c ****   else if (TIMx == TIM14) 
 194:common/stm32f10x_tim.c ****   {       
 195:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 196:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 197:common/stm32f10x_tim.c ****   }        
 198:common/stm32f10x_tim.c ****   else if (TIMx == TIM15)
 199:common/stm32f10x_tim.c ****   {
 200:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 201:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 202:common/stm32f10x_tim.c ****   } 
 203:common/stm32f10x_tim.c ****   else if (TIMx == TIM16)
 204:common/stm32f10x_tim.c ****   {
 205:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 206:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 207:common/stm32f10x_tim.c ****   } 
 208:common/stm32f10x_tim.c ****   else
 209:common/stm32f10x_tim.c ****   {
 210:common/stm32f10x_tim.c ****     if (TIMx == TIM17)
 211:common/stm32f10x_tim.c ****     {
 212:common/stm32f10x_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 213:common/stm32f10x_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 214:common/stm32f10x_tim.c ****     }  
 215:common/stm32f10x_tim.c ****   }
 216:common/stm32f10x_tim.c **** }
  51              		.loc 1 216 0
  52 0024 DEE0     		b	.L19
  53              	.L2:
 133:common/stm32f10x_tim.c ****   {
  54              		.loc 1 133 0
  55 0026 7B68     		ldr	r3, [r7, #4]
  56 0028 B3F1804F 		cmp	r3, #1073741824
  57 002c 08D1     		bne	.L4
 135:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  58              		.loc 1 135 0
  59 002e 0121     		movs	r1, #1
  60 0030 0120     		movs	r0, #1
  61 0032 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 136:common/stm32f10x_tim.c ****   }
  62              		.loc 1 136 0
  63 0036 0021     		movs	r1, #0
  64 0038 0120     		movs	r0, #1
  65 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  66              		.loc 1 216 0
ARM GAS  /tmp/ccRayNMu.s 			page 6


  67 003e D1E0     		b	.L19
  68              	.L4:
 138:common/stm32f10x_tim.c ****   {
  69              		.loc 1 138 0
  70 0040 7B68     		ldr	r3, [r7, #4]
  71 0042 6B4A     		ldr	r2, .L20+4
  72 0044 9342     		cmp	r3, r2
  73 0046 08D1     		bne	.L5
 140:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  74              		.loc 1 140 0
  75 0048 0121     		movs	r1, #1
  76 004a 0220     		movs	r0, #2
  77 004c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:common/stm32f10x_tim.c ****   }
  78              		.loc 1 141 0
  79 0050 0021     		movs	r1, #0
  80 0052 0220     		movs	r0, #2
  81 0054 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  82              		.loc 1 216 0
  83 0058 C4E0     		b	.L19
  84              	.L5:
 143:common/stm32f10x_tim.c ****   {
  85              		.loc 1 143 0
  86 005a 7B68     		ldr	r3, [r7, #4]
  87 005c 654A     		ldr	r2, .L20+8
  88 005e 9342     		cmp	r3, r2
  89 0060 08D1     		bne	.L6
 145:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  90              		.loc 1 145 0
  91 0062 0121     		movs	r1, #1
  92 0064 0420     		movs	r0, #4
  93 0066 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 146:common/stm32f10x_tim.c ****   } 
  94              		.loc 1 146 0
  95 006a 0021     		movs	r1, #0
  96 006c 0420     		movs	r0, #4
  97 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  98              		.loc 1 216 0
  99 0072 B7E0     		b	.L19
 100              	.L6:
 148:common/stm32f10x_tim.c ****   {
 101              		.loc 1 148 0
 102 0074 7B68     		ldr	r3, [r7, #4]
 103 0076 604A     		ldr	r2, .L20+12
 104 0078 9342     		cmp	r3, r2
 105 007a 08D1     		bne	.L7
 150:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 106              		.loc 1 150 0
 107 007c 0121     		movs	r1, #1
 108 007e 0820     		movs	r0, #8
 109 0080 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 151:common/stm32f10x_tim.c ****   } 
 110              		.loc 1 151 0
 111 0084 0021     		movs	r1, #0
 112 0086 0820     		movs	r0, #8
 113 0088 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 114              		.loc 1 216 0
ARM GAS  /tmp/ccRayNMu.s 			page 7


 115 008c AAE0     		b	.L19
 116              	.L7:
 153:common/stm32f10x_tim.c ****   {
 117              		.loc 1 153 0
 118 008e 7B68     		ldr	r3, [r7, #4]
 119 0090 5A4A     		ldr	r2, .L20+16
 120 0092 9342     		cmp	r3, r2
 121 0094 08D1     		bne	.L8
 155:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 122              		.loc 1 155 0
 123 0096 0121     		movs	r1, #1
 124 0098 1020     		movs	r0, #16
 125 009a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 156:common/stm32f10x_tim.c ****   } 
 126              		.loc 1 156 0
 127 009e 0021     		movs	r1, #0
 128 00a0 1020     		movs	r0, #16
 129 00a2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 130              		.loc 1 216 0
 131 00a6 9DE0     		b	.L19
 132              	.L8:
 158:common/stm32f10x_tim.c ****   {
 133              		.loc 1 158 0
 134 00a8 7B68     		ldr	r3, [r7, #4]
 135 00aa 554A     		ldr	r2, .L20+20
 136 00ac 9342     		cmp	r3, r2
 137 00ae 08D1     		bne	.L9
 160:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 138              		.loc 1 160 0
 139 00b0 0121     		movs	r1, #1
 140 00b2 2020     		movs	r0, #32
 141 00b4 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 161:common/stm32f10x_tim.c ****   } 
 142              		.loc 1 161 0
 143 00b8 0021     		movs	r1, #0
 144 00ba 2020     		movs	r0, #32
 145 00bc FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 146              		.loc 1 216 0
 147 00c0 90E0     		b	.L19
 148              	.L9:
 163:common/stm32f10x_tim.c ****   {
 149              		.loc 1 163 0
 150 00c2 7B68     		ldr	r3, [r7, #4]
 151 00c4 4F4A     		ldr	r2, .L20+24
 152 00c6 9342     		cmp	r3, r2
 153 00c8 0AD1     		bne	.L10
 165:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 154              		.loc 1 165 0
 155 00ca 0121     		movs	r1, #1
 156 00cc 4FF40050 		mov	r0, #8192
 157 00d0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 166:common/stm32f10x_tim.c ****   }
 158              		.loc 1 166 0
 159 00d4 0021     		movs	r1, #0
 160 00d6 4FF40050 		mov	r0, #8192
 161 00da FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 162              		.loc 1 216 0
ARM GAS  /tmp/ccRayNMu.s 			page 8


 163 00de 81E0     		b	.L19
 164              	.L10:
 168:common/stm32f10x_tim.c ****   {      
 165              		.loc 1 168 0
 166 00e0 7B68     		ldr	r3, [r7, #4]
 167 00e2 494A     		ldr	r2, .L20+28
 168 00e4 9342     		cmp	r3, r2
 169 00e6 0AD1     		bne	.L11
 170:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 170              		.loc 1 170 0
 171 00e8 0121     		movs	r1, #1
 172 00ea 4FF40020 		mov	r0, #524288
 173 00ee FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 171:common/stm32f10x_tim.c ****    }  
 174              		.loc 1 171 0
 175 00f2 0021     		movs	r1, #0
 176 00f4 4FF40020 		mov	r0, #524288
 177 00f8 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 178              		.loc 1 216 0
 179 00fc 72E0     		b	.L19
 180              	.L11:
 173:common/stm32f10x_tim.c ****   {      
 181              		.loc 1 173 0
 182 00fe 7B68     		ldr	r3, [r7, #4]
 183 0100 424A     		ldr	r2, .L20+32
 184 0102 9342     		cmp	r3, r2
 185 0104 0AD1     		bne	.L12
 175:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 186              		.loc 1 175 0
 187 0106 0121     		movs	r1, #1
 188 0108 4FF48010 		mov	r0, #1048576
 189 010c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 176:common/stm32f10x_tim.c ****   }  
 190              		.loc 1 176 0
 191 0110 0021     		movs	r1, #0
 192 0112 4FF48010 		mov	r0, #1048576
 193 0116 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 194              		.loc 1 216 0
 195 011a 63E0     		b	.L19
 196              	.L12:
 178:common/stm32f10x_tim.c ****   {     
 197              		.loc 1 178 0
 198 011c 7B68     		ldr	r3, [r7, #4]
 199 011e 3C4A     		ldr	r2, .L20+36
 200 0120 9342     		cmp	r3, r2
 201 0122 0AD1     		bne	.L13
 180:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 202              		.loc 1 180 0
 203 0124 0121     		movs	r1, #1
 204 0126 4FF40010 		mov	r0, #2097152
 205 012a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 181:common/stm32f10x_tim.c ****   }  
 206              		.loc 1 181 0
 207 012e 0021     		movs	r1, #0
 208 0130 4FF40010 		mov	r0, #2097152
 209 0134 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210              		.loc 1 216 0
ARM GAS  /tmp/ccRayNMu.s 			page 9


 211 0138 54E0     		b	.L19
 212              	.L13:
 183:common/stm32f10x_tim.c ****   {      
 213              		.loc 1 183 0
 214 013a 7B68     		ldr	r3, [r7, #4]
 215 013c 354A     		ldr	r2, .L20+40
 216 013e 9342     		cmp	r3, r2
 217 0140 08D1     		bne	.L14
 185:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 218              		.loc 1 185 0
 219 0142 0121     		movs	r1, #1
 220 0144 4020     		movs	r0, #64
 221 0146 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 186:common/stm32f10x_tim.c ****   }  
 222              		.loc 1 186 0
 223 014a 0021     		movs	r1, #0
 224 014c 4020     		movs	r0, #64
 225 014e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 226              		.loc 1 216 0
 227 0152 47E0     		b	.L19
 228              	.L14:
 188:common/stm32f10x_tim.c ****   {       
 229              		.loc 1 188 0
 230 0154 7B68     		ldr	r3, [r7, #4]
 231 0156 304A     		ldr	r2, .L20+44
 232 0158 9342     		cmp	r3, r2
 233 015a 08D1     		bne	.L15
 190:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 234              		.loc 1 190 0
 235 015c 0121     		movs	r1, #1
 236 015e 8020     		movs	r0, #128
 237 0160 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:common/stm32f10x_tim.c ****   }
 238              		.loc 1 191 0
 239 0164 0021     		movs	r1, #0
 240 0166 8020     		movs	r0, #128
 241 0168 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 242              		.loc 1 216 0
 243 016c 3AE0     		b	.L19
 244              	.L15:
 193:common/stm32f10x_tim.c ****   {       
 245              		.loc 1 193 0
 246 016e 7B68     		ldr	r3, [r7, #4]
 247 0170 2A4A     		ldr	r2, .L20+48
 248 0172 9342     		cmp	r3, r2
 249 0174 0AD1     		bne	.L16
 195:common/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 250              		.loc 1 195 0
 251 0176 0121     		movs	r1, #1
 252 0178 4FF48070 		mov	r0, #256
 253 017c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:common/stm32f10x_tim.c ****   }        
 254              		.loc 1 196 0
 255 0180 0021     		movs	r1, #0
 256 0182 4FF48070 		mov	r0, #256
 257 0186 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 258              		.loc 1 216 0
ARM GAS  /tmp/ccRayNMu.s 			page 10


 259 018a 2BE0     		b	.L19
 260              	.L16:
 198:common/stm32f10x_tim.c ****   {
 261              		.loc 1 198 0
 262 018c 7B68     		ldr	r3, [r7, #4]
 263 018e 244A     		ldr	r2, .L20+52
 264 0190 9342     		cmp	r3, r2
 265 0192 0AD1     		bne	.L17
 200:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 266              		.loc 1 200 0
 267 0194 0121     		movs	r1, #1
 268 0196 4FF48030 		mov	r0, #65536
 269 019a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 201:common/stm32f10x_tim.c ****   } 
 270              		.loc 1 201 0
 271 019e 0021     		movs	r1, #0
 272 01a0 4FF48030 		mov	r0, #65536
 273 01a4 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 274              		.loc 1 216 0
 275 01a8 1CE0     		b	.L19
 276              	.L17:
 203:common/stm32f10x_tim.c ****   {
 277              		.loc 1 203 0
 278 01aa 7B68     		ldr	r3, [r7, #4]
 279 01ac 1D4A     		ldr	r2, .L20+56
 280 01ae 9342     		cmp	r3, r2
 281 01b0 0AD1     		bne	.L18
 205:common/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 282              		.loc 1 205 0
 283 01b2 0121     		movs	r1, #1
 284 01b4 4FF40030 		mov	r0, #131072
 285 01b8 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 206:common/stm32f10x_tim.c ****   } 
 286              		.loc 1 206 0
 287 01bc 0021     		movs	r1, #0
 288 01be 4FF40030 		mov	r0, #131072
 289 01c2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 290              		.loc 1 216 0
 291 01c6 0DE0     		b	.L19
 292              	.L18:
 210:common/stm32f10x_tim.c ****     {
 293              		.loc 1 210 0
 294 01c8 7B68     		ldr	r3, [r7, #4]
 295 01ca 174A     		ldr	r2, .L20+60
 296 01cc 9342     		cmp	r3, r2
 297 01ce 09D1     		bne	.L19
 212:common/stm32f10x_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 298              		.loc 1 212 0
 299 01d0 0121     		movs	r1, #1
 300 01d2 4FF48020 		mov	r0, #262144
 301 01d6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:common/stm32f10x_tim.c ****     }  
 302              		.loc 1 213 0
 303 01da 0021     		movs	r1, #0
 304 01dc 4FF48020 		mov	r0, #262144
 305 01e0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 306              	.L19:
ARM GAS  /tmp/ccRayNMu.s 			page 11


 307              		.loc 1 216 0
 308 01e4 00BF     		nop
 309 01e6 0837     		adds	r7, r7, #8
 310              		.cfi_def_cfa_offset 8
 311 01e8 BD46     		mov	sp, r7
 312              		.cfi_def_cfa_register 13
 313              		@ sp needed
 314 01ea 80BD     		pop	{r7, pc}
 315              	.L21:
 316              		.align	2
 317              	.L20:
 318 01ec 002C0140 		.word	1073818624
 319 01f0 00040040 		.word	1073742848
 320 01f4 00080040 		.word	1073743872
 321 01f8 000C0040 		.word	1073744896
 322 01fc 00100040 		.word	1073745920
 323 0200 00140040 		.word	1073746944
 324 0204 00340140 		.word	1073820672
 325 0208 004C0140 		.word	1073826816
 326 020c 00500140 		.word	1073827840
 327 0210 00540140 		.word	1073828864
 328 0214 00180040 		.word	1073747968
 329 0218 001C0040 		.word	1073748992
 330 021c 00200040 		.word	1073750016
 331 0220 00400140 		.word	1073823744
 332 0224 00440140 		.word	1073824768
 333 0228 00480140 		.word	1073825792
 334              		.cfi_endproc
 335              	.LFE63:
 336              		.size	TIM_DeInit, .-TIM_DeInit
 337              		.align	1
 338              		.global	TIM_TimeBaseInit
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu softvfp
 343              		.type	TIM_TimeBaseInit, %function
 344              	TIM_TimeBaseInit:
 345              	.LFB64:
 217:common/stm32f10x_tim.c **** 
 218:common/stm32f10x_tim.c **** /**
 219:common/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Time Base Unit peripheral according to 
 220:common/stm32f10x_tim.c ****   *         the specified parameters in the TIM_TimeBaseInitStruct.
 221:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
 222:common/stm32f10x_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
 223:common/stm32f10x_tim.c ****   *         structure that contains the configuration information for the 
 224:common/stm32f10x_tim.c ****   *         specified TIM peripheral.
 225:common/stm32f10x_tim.c ****   * @retval None
 226:common/stm32f10x_tim.c ****   */
 227:common/stm32f10x_tim.c **** void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 228:common/stm32f10x_tim.c **** {
 346              		.loc 1 228 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 16
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350              		@ link register save eliminated.
 351 022c 80B4     		push	{r7}
ARM GAS  /tmp/ccRayNMu.s 			page 12


 352              		.cfi_def_cfa_offset 4
 353              		.cfi_offset 7, -4
 354 022e 85B0     		sub	sp, sp, #20
 355              		.cfi_def_cfa_offset 24
 356 0230 00AF     		add	r7, sp, #0
 357              		.cfi_def_cfa_register 7
 358 0232 7860     		str	r0, [r7, #4]
 359 0234 3960     		str	r1, [r7]
 229:common/stm32f10x_tim.c ****   uint16_t tmpcr1 = 0;
 360              		.loc 1 229 0
 361 0236 0023     		movs	r3, #0
 362 0238 FB81     		strh	r3, [r7, #14]	@ movhi
 230:common/stm32f10x_tim.c **** 
 231:common/stm32f10x_tim.c ****   /* Check the parameters */
 232:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 233:common/stm32f10x_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 234:common/stm32f10x_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 235:common/stm32f10x_tim.c **** 
 236:common/stm32f10x_tim.c ****   tmpcr1 = TIMx->CR1;  
 363              		.loc 1 236 0
 364 023a 7B68     		ldr	r3, [r7, #4]
 365 023c 1B88     		ldrh	r3, [r3]	@ movhi
 366 023e FB81     		strh	r3, [r7, #14]	@ movhi
 237:common/stm32f10x_tim.c **** 
 238:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 367              		.loc 1 238 0
 368 0240 7B68     		ldr	r3, [r7, #4]
 369 0242 2E4A     		ldr	r2, .L28
 370 0244 9342     		cmp	r3, r2
 371 0246 13D0     		beq	.L23
 372              		.loc 1 238 0 is_stmt 0 discriminator 1
 373 0248 7B68     		ldr	r3, [r7, #4]
 374 024a 2D4A     		ldr	r2, .L28+4
 375 024c 9342     		cmp	r3, r2
 376 024e 0FD0     		beq	.L23
 377              		.loc 1 238 0 discriminator 2
 378 0250 7B68     		ldr	r3, [r7, #4]
 379 0252 B3F1804F 		cmp	r3, #1073741824
 380 0256 0BD0     		beq	.L23
 381              		.loc 1 238 0 discriminator 3
 382 0258 7B68     		ldr	r3, [r7, #4]
 383 025a 2A4A     		ldr	r2, .L28+8
 384 025c 9342     		cmp	r3, r2
 385 025e 07D0     		beq	.L23
 386              		.loc 1 238 0 discriminator 4
 387 0260 7B68     		ldr	r3, [r7, #4]
 388 0262 294A     		ldr	r2, .L28+12
 389 0264 9342     		cmp	r3, r2
 390 0266 03D0     		beq	.L23
 239:common/stm32f10x_tim.c ****      (TIMx == TIM4) || (TIMx == TIM5)) 
 391              		.loc 1 239 0 is_stmt 1
 392 0268 7B68     		ldr	r3, [r7, #4]
 393 026a 284A     		ldr	r2, .L28+16
 394 026c 9342     		cmp	r3, r2
 395 026e 08D1     		bne	.L24
 396              	.L23:
 240:common/stm32f10x_tim.c ****   {
ARM GAS  /tmp/ccRayNMu.s 			page 13


 241:common/stm32f10x_tim.c ****     /* Select the Counter Mode */
 242:common/stm32f10x_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 397              		.loc 1 242 0
 398 0270 FB89     		ldrh	r3, [r7, #14]	@ movhi
 399 0272 23F07003 		bic	r3, r3, #112
 400 0276 FB81     		strh	r3, [r7, #14]	@ movhi
 243:common/stm32f10x_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 401              		.loc 1 243 0
 402 0278 3B68     		ldr	r3, [r7]
 403 027a 5A88     		ldrh	r2, [r3, #2]
 404 027c FB89     		ldrh	r3, [r7, #14]	@ movhi
 405 027e 1343     		orrs	r3, r3, r2
 406 0280 FB81     		strh	r3, [r7, #14]	@ movhi
 407              	.L24:
 244:common/stm32f10x_tim.c ****   }
 245:common/stm32f10x_tim.c ****  
 246:common/stm32f10x_tim.c ****   if((TIMx != TIM6) && (TIMx != TIM7))
 408              		.loc 1 246 0
 409 0282 7B68     		ldr	r3, [r7, #4]
 410 0284 224A     		ldr	r2, .L28+20
 411 0286 9342     		cmp	r3, r2
 412 0288 0CD0     		beq	.L25
 413              		.loc 1 246 0 is_stmt 0 discriminator 1
 414 028a 7B68     		ldr	r3, [r7, #4]
 415 028c 214A     		ldr	r2, .L28+24
 416 028e 9342     		cmp	r3, r2
 417 0290 08D0     		beq	.L25
 247:common/stm32f10x_tim.c ****   {
 248:common/stm32f10x_tim.c ****     /* Set the clock division */
 249:common/stm32f10x_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 418              		.loc 1 249 0 is_stmt 1
 419 0292 FB89     		ldrh	r3, [r7, #14]	@ movhi
 420 0294 23F44073 		bic	r3, r3, #768
 421 0298 FB81     		strh	r3, [r7, #14]	@ movhi
 250:common/stm32f10x_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 422              		.loc 1 250 0
 423 029a 3B68     		ldr	r3, [r7]
 424 029c DA88     		ldrh	r2, [r3, #6]
 425 029e FB89     		ldrh	r3, [r7, #14]	@ movhi
 426 02a0 1343     		orrs	r3, r3, r2
 427 02a2 FB81     		strh	r3, [r7, #14]	@ movhi
 428              	.L25:
 251:common/stm32f10x_tim.c ****   }
 252:common/stm32f10x_tim.c **** 
 253:common/stm32f10x_tim.c ****   TIMx->CR1 = tmpcr1;
 429              		.loc 1 253 0
 430 02a4 7B68     		ldr	r3, [r7, #4]
 431 02a6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 432 02a8 1A80     		strh	r2, [r3]	@ movhi
 254:common/stm32f10x_tim.c **** 
 255:common/stm32f10x_tim.c ****   /* Set the Autoreload value */
 256:common/stm32f10x_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 433              		.loc 1 256 0
 434 02aa 3B68     		ldr	r3, [r7]
 435 02ac 9A88     		ldrh	r2, [r3, #4]
 436 02ae 7B68     		ldr	r3, [r7, #4]
 437 02b0 9A85     		strh	r2, [r3, #44]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 14


 257:common/stm32f10x_tim.c ****  
 258:common/stm32f10x_tim.c ****   /* Set the Prescaler value */
 259:common/stm32f10x_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 438              		.loc 1 259 0
 439 02b2 3B68     		ldr	r3, [r7]
 440 02b4 1A88     		ldrh	r2, [r3]
 441 02b6 7B68     		ldr	r3, [r7, #4]
 442 02b8 1A85     		strh	r2, [r3, #40]	@ movhi
 260:common/stm32f10x_tim.c ****     
 261:common/stm32f10x_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 443              		.loc 1 261 0
 444 02ba 7B68     		ldr	r3, [r7, #4]
 445 02bc 0F4A     		ldr	r2, .L28
 446 02be 9342     		cmp	r3, r2
 447 02c0 0FD0     		beq	.L26
 448              		.loc 1 261 0 is_stmt 0 discriminator 1
 449 02c2 7B68     		ldr	r3, [r7, #4]
 450 02c4 0E4A     		ldr	r2, .L28+4
 451 02c6 9342     		cmp	r3, r2
 452 02c8 0BD0     		beq	.L26
 453              		.loc 1 261 0 discriminator 2
 454 02ca 7B68     		ldr	r3, [r7, #4]
 455 02cc 124A     		ldr	r2, .L28+28
 456 02ce 9342     		cmp	r3, r2
 457 02d0 07D0     		beq	.L26
 458              		.loc 1 261 0 discriminator 3
 459 02d2 7B68     		ldr	r3, [r7, #4]
 460 02d4 114A     		ldr	r2, .L28+32
 461 02d6 9342     		cmp	r3, r2
 462 02d8 03D0     		beq	.L26
 463              		.loc 1 261 0 discriminator 4
 464 02da 7B68     		ldr	r3, [r7, #4]
 465 02dc 104A     		ldr	r2, .L28+36
 466 02de 9342     		cmp	r3, r2
 467 02e0 04D1     		bne	.L27
 468              	.L26:
 262:common/stm32f10x_tim.c ****   {
 263:common/stm32f10x_tim.c ****     /* Set the Repetition Counter value */
 264:common/stm32f10x_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 469              		.loc 1 264 0 is_stmt 1
 470 02e2 3B68     		ldr	r3, [r7]
 471 02e4 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 472 02e6 9AB2     		uxth	r2, r3
 473 02e8 7B68     		ldr	r3, [r7, #4]
 474 02ea 1A86     		strh	r2, [r3, #48]	@ movhi
 475              	.L27:
 265:common/stm32f10x_tim.c ****   }
 266:common/stm32f10x_tim.c **** 
 267:common/stm32f10x_tim.c ****   /* Generate an update event to reload the Prescaler and the Repetition counter
 268:common/stm32f10x_tim.c ****      values immediately */
 269:common/stm32f10x_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 476              		.loc 1 269 0
 477 02ec 7B68     		ldr	r3, [r7, #4]
 478 02ee 0122     		movs	r2, #1
 479 02f0 9A82     		strh	r2, [r3, #20]	@ movhi
 270:common/stm32f10x_tim.c **** }
 480              		.loc 1 270 0
ARM GAS  /tmp/ccRayNMu.s 			page 15


 481 02f2 00BF     		nop
 482 02f4 1437     		adds	r7, r7, #20
 483              		.cfi_def_cfa_offset 4
 484 02f6 BD46     		mov	sp, r7
 485              		.cfi_def_cfa_register 13
 486              		@ sp needed
 487 02f8 80BC     		pop	{r7}
 488              		.cfi_restore 7
 489              		.cfi_def_cfa_offset 0
 490 02fa 7047     		bx	lr
 491              	.L29:
 492              		.align	2
 493              	.L28:
 494 02fc 002C0140 		.word	1073818624
 495 0300 00340140 		.word	1073820672
 496 0304 00040040 		.word	1073742848
 497 0308 00080040 		.word	1073743872
 498 030c 000C0040 		.word	1073744896
 499 0310 00100040 		.word	1073745920
 500 0314 00140040 		.word	1073746944
 501 0318 00400140 		.word	1073823744
 502 031c 00440140 		.word	1073824768
 503 0320 00480140 		.word	1073825792
 504              		.cfi_endproc
 505              	.LFE64:
 506              		.size	TIM_TimeBaseInit, .-TIM_TimeBaseInit
 507              		.align	1
 508              		.global	TIM_OC1Init
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 512              		.fpu softvfp
 513              		.type	TIM_OC1Init, %function
 514              	TIM_OC1Init:
 515              	.LFB65:
 271:common/stm32f10x_tim.c **** 
 272:common/stm32f10x_tim.c **** /**
 273:common/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Channel1 according to the specified
 274:common/stm32f10x_tim.c ****   *         parameters in the TIM_OCInitStruct.
 275:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
 276:common/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 277:common/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 278:common/stm32f10x_tim.c ****   * @retval None
 279:common/stm32f10x_tim.c ****   */
 280:common/stm32f10x_tim.c **** void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 281:common/stm32f10x_tim.c **** {
 516              		.loc 1 281 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 16
 519              		@ frame_needed = 1, uses_anonymous_args = 0
 520              		@ link register save eliminated.
 521 0324 80B4     		push	{r7}
 522              		.cfi_def_cfa_offset 4
 523              		.cfi_offset 7, -4
 524 0326 85B0     		sub	sp, sp, #20
 525              		.cfi_def_cfa_offset 24
 526 0328 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccRayNMu.s 			page 16


 527              		.cfi_def_cfa_register 7
 528 032a 7860     		str	r0, [r7, #4]
 529 032c 3960     		str	r1, [r7]
 282:common/stm32f10x_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 530              		.loc 1 282 0
 531 032e 0023     		movs	r3, #0
 532 0330 7B81     		strh	r3, [r7, #10]	@ movhi
 533 0332 0023     		movs	r3, #0
 534 0334 FB81     		strh	r3, [r7, #14]	@ movhi
 535 0336 0023     		movs	r3, #0
 536 0338 BB81     		strh	r3, [r7, #12]	@ movhi
 283:common/stm32f10x_tim.c ****    
 284:common/stm32f10x_tim.c ****   /* Check the parameters */
 285:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
 286:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 287:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 288:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 289:common/stm32f10x_tim.c ****  /* Disable the Channel 1: Reset the CC1E Bit */
 290:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 537              		.loc 1 290 0
 538 033a 7B68     		ldr	r3, [r7, #4]
 539 033c 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 540 033e 9BB2     		uxth	r3, r3
 541 0340 23F00103 		bic	r3, r3, #1
 542 0344 9AB2     		uxth	r2, r3
 543 0346 7B68     		ldr	r3, [r7, #4]
 544 0348 1A84     		strh	r2, [r3, #32]	@ movhi
 291:common/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */
 292:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 545              		.loc 1 292 0
 546 034a 7B68     		ldr	r3, [r7, #4]
 547 034c 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 548 034e FB81     		strh	r3, [r7, #14]	@ movhi
 293:common/stm32f10x_tim.c ****   /* Get the TIMx CR2 register value */
 294:common/stm32f10x_tim.c ****   tmpcr2 =  TIMx->CR2;
 549              		.loc 1 294 0
 550 0350 7B68     		ldr	r3, [r7, #4]
 551 0352 9B88     		ldrh	r3, [r3, #4]	@ movhi
 552 0354 BB81     		strh	r3, [r7, #12]	@ movhi
 295:common/stm32f10x_tim.c ****   
 296:common/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
 297:common/stm32f10x_tim.c ****   tmpccmrx = TIMx->CCMR1;
 553              		.loc 1 297 0
 554 0356 7B68     		ldr	r3, [r7, #4]
 555 0358 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 556 035a 7B81     		strh	r3, [r7, #10]	@ movhi
 298:common/stm32f10x_tim.c ****     
 299:common/stm32f10x_tim.c ****   /* Reset the Output Compare Mode Bits */
 300:common/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 557              		.loc 1 300 0
 558 035c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 559 035e 23F07003 		bic	r3, r3, #112
 560 0362 7B81     		strh	r3, [r7, #10]	@ movhi
 301:common/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 561              		.loc 1 301 0
 562 0364 7B89     		ldrh	r3, [r7, #10]	@ movhi
 563 0366 23F00303 		bic	r3, r3, #3
ARM GAS  /tmp/ccRayNMu.s 			page 17


 564 036a 7B81     		strh	r3, [r7, #10]	@ movhi
 302:common/stm32f10x_tim.c **** 
 303:common/stm32f10x_tim.c ****   /* Select the Output Compare Mode */
 304:common/stm32f10x_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 565              		.loc 1 304 0
 566 036c 3B68     		ldr	r3, [r7]
 567 036e 1A88     		ldrh	r2, [r3]
 568 0370 7B89     		ldrh	r3, [r7, #10]	@ movhi
 569 0372 1343     		orrs	r3, r3, r2
 570 0374 7B81     		strh	r3, [r7, #10]	@ movhi
 305:common/stm32f10x_tim.c ****   
 306:common/stm32f10x_tim.c ****   /* Reset the Output Polarity level */
 307:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 571              		.loc 1 307 0
 572 0376 FB89     		ldrh	r3, [r7, #14]	@ movhi
 573 0378 23F00203 		bic	r3, r3, #2
 574 037c FB81     		strh	r3, [r7, #14]	@ movhi
 308:common/stm32f10x_tim.c ****   /* Set the Output Compare Polarity */
 309:common/stm32f10x_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 575              		.loc 1 309 0
 576 037e 3B68     		ldr	r3, [r7]
 577 0380 1A89     		ldrh	r2, [r3, #8]
 578 0382 FB89     		ldrh	r3, [r7, #14]	@ movhi
 579 0384 1343     		orrs	r3, r3, r2
 580 0386 FB81     		strh	r3, [r7, #14]	@ movhi
 310:common/stm32f10x_tim.c ****   
 311:common/stm32f10x_tim.c ****   /* Set the Output State */
 312:common/stm32f10x_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 581              		.loc 1 312 0
 582 0388 3B68     		ldr	r3, [r7]
 583 038a 5A88     		ldrh	r2, [r3, #2]
 584 038c FB89     		ldrh	r3, [r7, #14]	@ movhi
 585 038e 1343     		orrs	r3, r3, r2
 586 0390 FB81     		strh	r3, [r7, #14]	@ movhi
 313:common/stm32f10x_tim.c ****     
 314:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 587              		.loc 1 314 0
 588 0392 7B68     		ldr	r3, [r7, #4]
 589 0394 244A     		ldr	r2, .L33
 590 0396 9342     		cmp	r3, r2
 591 0398 0FD0     		beq	.L31
 592              		.loc 1 314 0 is_stmt 0 discriminator 1
 593 039a 7B68     		ldr	r3, [r7, #4]
 594 039c 234A     		ldr	r2, .L33+4
 595 039e 9342     		cmp	r3, r2
 596 03a0 0BD0     		beq	.L31
 597              		.loc 1 314 0 discriminator 2
 598 03a2 7B68     		ldr	r3, [r7, #4]
 599 03a4 224A     		ldr	r2, .L33+8
 600 03a6 9342     		cmp	r3, r2
 601 03a8 07D0     		beq	.L31
 602              		.loc 1 314 0 discriminator 3
 603 03aa 7B68     		ldr	r3, [r7, #4]
 604 03ac 214A     		ldr	r2, .L33+12
 605 03ae 9342     		cmp	r3, r2
 606 03b0 03D0     		beq	.L31
 315:common/stm32f10x_tim.c ****      (TIMx == TIM16)|| (TIMx == TIM17))
ARM GAS  /tmp/ccRayNMu.s 			page 18


 607              		.loc 1 315 0 is_stmt 1
 608 03b2 7B68     		ldr	r3, [r7, #4]
 609 03b4 204A     		ldr	r2, .L33+16
 610 03b6 9342     		cmp	r3, r2
 611 03b8 23D1     		bne	.L32
 612              	.L31:
 316:common/stm32f10x_tim.c ****   {
 317:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 318:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 319:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 320:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 321:common/stm32f10x_tim.c ****     
 322:common/stm32f10x_tim.c ****     /* Reset the Output N Polarity level */
 323:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 613              		.loc 1 323 0
 614 03ba FB89     		ldrh	r3, [r7, #14]	@ movhi
 615 03bc 23F00803 		bic	r3, r3, #8
 616 03c0 FB81     		strh	r3, [r7, #14]	@ movhi
 324:common/stm32f10x_tim.c ****     /* Set the Output N Polarity */
 325:common/stm32f10x_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 617              		.loc 1 325 0
 618 03c2 3B68     		ldr	r3, [r7]
 619 03c4 5A89     		ldrh	r2, [r3, #10]
 620 03c6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 621 03c8 1343     		orrs	r3, r3, r2
 622 03ca FB81     		strh	r3, [r7, #14]	@ movhi
 326:common/stm32f10x_tim.c ****     
 327:common/stm32f10x_tim.c ****     /* Reset the Output N State */
 328:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 623              		.loc 1 328 0
 624 03cc FB89     		ldrh	r3, [r7, #14]	@ movhi
 625 03ce 23F00403 		bic	r3, r3, #4
 626 03d2 FB81     		strh	r3, [r7, #14]	@ movhi
 329:common/stm32f10x_tim.c ****     /* Set the Output N State */
 330:common/stm32f10x_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 627              		.loc 1 330 0
 628 03d4 3B68     		ldr	r3, [r7]
 629 03d6 9A88     		ldrh	r2, [r3, #4]
 630 03d8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 631 03da 1343     		orrs	r3, r3, r2
 632 03dc FB81     		strh	r3, [r7, #14]	@ movhi
 331:common/stm32f10x_tim.c ****     
 332:common/stm32f10x_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 333:common/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 633              		.loc 1 333 0
 634 03de BB89     		ldrh	r3, [r7, #12]	@ movhi
 635 03e0 23F48073 		bic	r3, r3, #256
 636 03e4 BB81     		strh	r3, [r7, #12]	@ movhi
 334:common/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 637              		.loc 1 334 0
 638 03e6 BB89     		ldrh	r3, [r7, #12]	@ movhi
 639 03e8 23F40073 		bic	r3, r3, #512
 640 03ec BB81     		strh	r3, [r7, #12]	@ movhi
 335:common/stm32f10x_tim.c ****     
 336:common/stm32f10x_tim.c ****     /* Set the Output Idle state */
 337:common/stm32f10x_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 641              		.loc 1 337 0
ARM GAS  /tmp/ccRayNMu.s 			page 19


 642 03ee 3B68     		ldr	r3, [r7]
 643 03f0 9A89     		ldrh	r2, [r3, #12]
 644 03f2 BB89     		ldrh	r3, [r7, #12]	@ movhi
 645 03f4 1343     		orrs	r3, r3, r2
 646 03f6 BB81     		strh	r3, [r7, #12]	@ movhi
 338:common/stm32f10x_tim.c ****     /* Set the Output N Idle state */
 339:common/stm32f10x_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 647              		.loc 1 339 0
 648 03f8 3B68     		ldr	r3, [r7]
 649 03fa DA89     		ldrh	r2, [r3, #14]
 650 03fc BB89     		ldrh	r3, [r7, #12]	@ movhi
 651 03fe 1343     		orrs	r3, r3, r2
 652 0400 BB81     		strh	r3, [r7, #12]	@ movhi
 653              	.L32:
 340:common/stm32f10x_tim.c ****   }
 341:common/stm32f10x_tim.c ****   /* Write to TIMx CR2 */
 342:common/stm32f10x_tim.c ****   TIMx->CR2 = tmpcr2;
 654              		.loc 1 342 0
 655 0402 7B68     		ldr	r3, [r7, #4]
 656 0404 BA89     		ldrh	r2, [r7, #12]	@ movhi
 657 0406 9A80     		strh	r2, [r3, #4]	@ movhi
 343:common/stm32f10x_tim.c ****   
 344:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
 345:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 658              		.loc 1 345 0
 659 0408 7B68     		ldr	r3, [r7, #4]
 660 040a 7A89     		ldrh	r2, [r7, #10]	@ movhi
 661 040c 1A83     		strh	r2, [r3, #24]	@ movhi
 346:common/stm32f10x_tim.c **** 
 347:common/stm32f10x_tim.c ****   /* Set the Capture Compare Register value */
 348:common/stm32f10x_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 662              		.loc 1 348 0
 663 040e 3B68     		ldr	r3, [r7]
 664 0410 DA88     		ldrh	r2, [r3, #6]
 665 0412 7B68     		ldr	r3, [r7, #4]
 666 0414 9A86     		strh	r2, [r3, #52]	@ movhi
 349:common/stm32f10x_tim.c ****  
 350:common/stm32f10x_tim.c ****   /* Write to TIMx CCER */
 351:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 667              		.loc 1 351 0
 668 0416 7B68     		ldr	r3, [r7, #4]
 669 0418 FA89     		ldrh	r2, [r7, #14]	@ movhi
 670 041a 1A84     		strh	r2, [r3, #32]	@ movhi
 352:common/stm32f10x_tim.c **** }
 671              		.loc 1 352 0
 672 041c 00BF     		nop
 673 041e 1437     		adds	r7, r7, #20
 674              		.cfi_def_cfa_offset 4
 675 0420 BD46     		mov	sp, r7
 676              		.cfi_def_cfa_register 13
 677              		@ sp needed
 678 0422 80BC     		pop	{r7}
 679              		.cfi_restore 7
 680              		.cfi_def_cfa_offset 0
 681 0424 7047     		bx	lr
 682              	.L34:
 683 0426 00BF     		.align	2
ARM GAS  /tmp/ccRayNMu.s 			page 20


 684              	.L33:
 685 0428 002C0140 		.word	1073818624
 686 042c 00340140 		.word	1073820672
 687 0430 00400140 		.word	1073823744
 688 0434 00440140 		.word	1073824768
 689 0438 00480140 		.word	1073825792
 690              		.cfi_endproc
 691              	.LFE65:
 692              		.size	TIM_OC1Init, .-TIM_OC1Init
 693              		.align	1
 694              		.global	TIM_OC2Init
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 698              		.fpu softvfp
 699              		.type	TIM_OC2Init, %function
 700              	TIM_OC2Init:
 701              	.LFB66:
 353:common/stm32f10x_tim.c **** 
 354:common/stm32f10x_tim.c **** /**
 355:common/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Channel2 according to the specified
 356:common/stm32f10x_tim.c ****   *         parameters in the TIM_OCInitStruct.
 357:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select 
 358:common/stm32f10x_tim.c ****   *         the TIM peripheral.
 359:common/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 360:common/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 361:common/stm32f10x_tim.c ****   * @retval None
 362:common/stm32f10x_tim.c ****   */
 363:common/stm32f10x_tim.c **** void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 364:common/stm32f10x_tim.c **** {
 702              		.loc 1 364 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 16
 705              		@ frame_needed = 1, uses_anonymous_args = 0
 706              		@ link register save eliminated.
 707 043c 80B4     		push	{r7}
 708              		.cfi_def_cfa_offset 4
 709              		.cfi_offset 7, -4
 710 043e 85B0     		sub	sp, sp, #20
 711              		.cfi_def_cfa_offset 24
 712 0440 00AF     		add	r7, sp, #0
 713              		.cfi_def_cfa_register 7
 714 0442 7860     		str	r0, [r7, #4]
 715 0444 3960     		str	r1, [r7]
 365:common/stm32f10x_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 716              		.loc 1 365 0
 717 0446 0023     		movs	r3, #0
 718 0448 7B81     		strh	r3, [r7, #10]	@ movhi
 719 044a 0023     		movs	r3, #0
 720 044c FB81     		strh	r3, [r7, #14]	@ movhi
 721 044e 0023     		movs	r3, #0
 722 0450 BB81     		strh	r3, [r7, #12]	@ movhi
 366:common/stm32f10x_tim.c ****    
 367:common/stm32f10x_tim.c ****   /* Check the parameters */
 368:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
 369:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 370:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
ARM GAS  /tmp/ccRayNMu.s 			page 21


 371:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 372:common/stm32f10x_tim.c ****    /* Disable the Channel 2: Reset the CC2E Bit */
 373:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 723              		.loc 1 373 0
 724 0452 7B68     		ldr	r3, [r7, #4]
 725 0454 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 726 0456 9BB2     		uxth	r3, r3
 727 0458 23F01003 		bic	r3, r3, #16
 728 045c 9AB2     		uxth	r2, r3
 729 045e 7B68     		ldr	r3, [r7, #4]
 730 0460 1A84     		strh	r2, [r3, #32]	@ movhi
 374:common/stm32f10x_tim.c ****   
 375:common/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */  
 376:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 731              		.loc 1 376 0
 732 0462 7B68     		ldr	r3, [r7, #4]
 733 0464 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 734 0466 FB81     		strh	r3, [r7, #14]	@ movhi
 377:common/stm32f10x_tim.c ****   /* Get the TIMx CR2 register value */
 378:common/stm32f10x_tim.c ****   tmpcr2 =  TIMx->CR2;
 735              		.loc 1 378 0
 736 0468 7B68     		ldr	r3, [r7, #4]
 737 046a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 738 046c BB81     		strh	r3, [r7, #12]	@ movhi
 379:common/stm32f10x_tim.c ****   
 380:common/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
 381:common/stm32f10x_tim.c ****   tmpccmrx = TIMx->CCMR1;
 739              		.loc 1 381 0
 740 046e 7B68     		ldr	r3, [r7, #4]
 741 0470 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 742 0472 7B81     		strh	r3, [r7, #10]	@ movhi
 382:common/stm32f10x_tim.c ****     
 383:common/stm32f10x_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 384:common/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 743              		.loc 1 384 0
 744 0474 7B89     		ldrh	r3, [r7, #10]	@ movhi
 745 0476 23F4E043 		bic	r3, r3, #28672
 746 047a 7B81     		strh	r3, [r7, #10]	@ movhi
 385:common/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 747              		.loc 1 385 0
 748 047c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 749 047e 23F44073 		bic	r3, r3, #768
 750 0482 7B81     		strh	r3, [r7, #10]	@ movhi
 386:common/stm32f10x_tim.c ****   
 387:common/stm32f10x_tim.c ****   /* Select the Output Compare Mode */
 388:common/stm32f10x_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 751              		.loc 1 388 0
 752 0484 3B68     		ldr	r3, [r7]
 753 0486 1B88     		ldrh	r3, [r3]
 754 0488 1B02     		lsls	r3, r3, #8
 755 048a 9AB2     		uxth	r2, r3
 756 048c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 757 048e 1343     		orrs	r3, r3, r2
 758 0490 7B81     		strh	r3, [r7, #10]	@ movhi
 389:common/stm32f10x_tim.c ****   
 390:common/stm32f10x_tim.c ****   /* Reset the Output Polarity level */
 391:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
ARM GAS  /tmp/ccRayNMu.s 			page 22


 759              		.loc 1 391 0
 760 0492 FB89     		ldrh	r3, [r7, #14]	@ movhi
 761 0494 23F02003 		bic	r3, r3, #32
 762 0498 FB81     		strh	r3, [r7, #14]	@ movhi
 392:common/stm32f10x_tim.c ****   /* Set the Output Compare Polarity */
 393:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 763              		.loc 1 393 0
 764 049a 3B68     		ldr	r3, [r7]
 765 049c 1B89     		ldrh	r3, [r3, #8]
 766 049e 1B01     		lsls	r3, r3, #4
 767 04a0 9AB2     		uxth	r2, r3
 768 04a2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 769 04a4 1343     		orrs	r3, r3, r2
 770 04a6 FB81     		strh	r3, [r7, #14]	@ movhi
 394:common/stm32f10x_tim.c ****   
 395:common/stm32f10x_tim.c ****   /* Set the Output State */
 396:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 771              		.loc 1 396 0
 772 04a8 3B68     		ldr	r3, [r7]
 773 04aa 5B88     		ldrh	r3, [r3, #2]
 774 04ac 1B01     		lsls	r3, r3, #4
 775 04ae 9AB2     		uxth	r2, r3
 776 04b0 FB89     		ldrh	r3, [r7, #14]	@ movhi
 777 04b2 1343     		orrs	r3, r3, r2
 778 04b4 FB81     		strh	r3, [r7, #14]	@ movhi
 397:common/stm32f10x_tim.c ****     
 398:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 779              		.loc 1 398 0
 780 04b6 7B68     		ldr	r3, [r7, #4]
 781 04b8 224A     		ldr	r2, .L38
 782 04ba 9342     		cmp	r3, r2
 783 04bc 03D0     		beq	.L36
 784              		.loc 1 398 0 is_stmt 0 discriminator 1
 785 04be 7B68     		ldr	r3, [r7, #4]
 786 04c0 214A     		ldr	r2, .L38+4
 787 04c2 9342     		cmp	r3, r2
 788 04c4 2BD1     		bne	.L37
 789              	.L36:
 399:common/stm32f10x_tim.c ****   {
 400:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 401:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 402:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 403:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 404:common/stm32f10x_tim.c ****     
 405:common/stm32f10x_tim.c ****     /* Reset the Output N Polarity level */
 406:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 790              		.loc 1 406 0 is_stmt 1
 791 04c6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 792 04c8 23F08003 		bic	r3, r3, #128
 793 04cc FB81     		strh	r3, [r7, #14]	@ movhi
 407:common/stm32f10x_tim.c ****     /* Set the Output N Polarity */
 408:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 794              		.loc 1 408 0
 795 04ce 3B68     		ldr	r3, [r7]
 796 04d0 5B89     		ldrh	r3, [r3, #10]
 797 04d2 1B01     		lsls	r3, r3, #4
 798 04d4 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccRayNMu.s 			page 23


 799 04d6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 800 04d8 1343     		orrs	r3, r3, r2
 801 04da FB81     		strh	r3, [r7, #14]	@ movhi
 409:common/stm32f10x_tim.c ****     
 410:common/stm32f10x_tim.c ****     /* Reset the Output N State */
 411:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 802              		.loc 1 411 0
 803 04dc FB89     		ldrh	r3, [r7, #14]	@ movhi
 804 04de 23F04003 		bic	r3, r3, #64
 805 04e2 FB81     		strh	r3, [r7, #14]	@ movhi
 412:common/stm32f10x_tim.c ****     /* Set the Output N State */
 413:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 806              		.loc 1 413 0
 807 04e4 3B68     		ldr	r3, [r7]
 808 04e6 9B88     		ldrh	r3, [r3, #4]
 809 04e8 1B01     		lsls	r3, r3, #4
 810 04ea 9AB2     		uxth	r2, r3
 811 04ec FB89     		ldrh	r3, [r7, #14]	@ movhi
 812 04ee 1343     		orrs	r3, r3, r2
 813 04f0 FB81     		strh	r3, [r7, #14]	@ movhi
 414:common/stm32f10x_tim.c ****     
 415:common/stm32f10x_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 416:common/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 814              		.loc 1 416 0
 815 04f2 BB89     		ldrh	r3, [r7, #12]	@ movhi
 816 04f4 23F48063 		bic	r3, r3, #1024
 817 04f8 BB81     		strh	r3, [r7, #12]	@ movhi
 417:common/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 818              		.loc 1 417 0
 819 04fa BB89     		ldrh	r3, [r7, #12]	@ movhi
 820 04fc 23F40063 		bic	r3, r3, #2048
 821 0500 BB81     		strh	r3, [r7, #12]	@ movhi
 418:common/stm32f10x_tim.c ****     
 419:common/stm32f10x_tim.c ****     /* Set the Output Idle state */
 420:common/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 822              		.loc 1 420 0
 823 0502 3B68     		ldr	r3, [r7]
 824 0504 9B89     		ldrh	r3, [r3, #12]
 825 0506 9B00     		lsls	r3, r3, #2
 826 0508 9AB2     		uxth	r2, r3
 827 050a BB89     		ldrh	r3, [r7, #12]	@ movhi
 828 050c 1343     		orrs	r3, r3, r2
 829 050e BB81     		strh	r3, [r7, #12]	@ movhi
 421:common/stm32f10x_tim.c ****     /* Set the Output N Idle state */
 422:common/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 830              		.loc 1 422 0
 831 0510 3B68     		ldr	r3, [r7]
 832 0512 DB89     		ldrh	r3, [r3, #14]
 833 0514 9B00     		lsls	r3, r3, #2
 834 0516 9AB2     		uxth	r2, r3
 835 0518 BB89     		ldrh	r3, [r7, #12]	@ movhi
 836 051a 1343     		orrs	r3, r3, r2
 837 051c BB81     		strh	r3, [r7, #12]	@ movhi
 838              	.L37:
 423:common/stm32f10x_tim.c ****   }
 424:common/stm32f10x_tim.c ****   /* Write to TIMx CR2 */
 425:common/stm32f10x_tim.c ****   TIMx->CR2 = tmpcr2;
ARM GAS  /tmp/ccRayNMu.s 			page 24


 839              		.loc 1 425 0
 840 051e 7B68     		ldr	r3, [r7, #4]
 841 0520 BA89     		ldrh	r2, [r7, #12]	@ movhi
 842 0522 9A80     		strh	r2, [r3, #4]	@ movhi
 426:common/stm32f10x_tim.c ****   
 427:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
 428:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 843              		.loc 1 428 0
 844 0524 7B68     		ldr	r3, [r7, #4]
 845 0526 7A89     		ldrh	r2, [r7, #10]	@ movhi
 846 0528 1A83     		strh	r2, [r3, #24]	@ movhi
 429:common/stm32f10x_tim.c **** 
 430:common/stm32f10x_tim.c ****   /* Set the Capture Compare Register value */
 431:common/stm32f10x_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 847              		.loc 1 431 0
 848 052a 3B68     		ldr	r3, [r7]
 849 052c DA88     		ldrh	r2, [r3, #6]
 850 052e 7B68     		ldr	r3, [r7, #4]
 851 0530 1A87     		strh	r2, [r3, #56]	@ movhi
 432:common/stm32f10x_tim.c ****   
 433:common/stm32f10x_tim.c ****   /* Write to TIMx CCER */
 434:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 852              		.loc 1 434 0
 853 0532 7B68     		ldr	r3, [r7, #4]
 854 0534 FA89     		ldrh	r2, [r7, #14]	@ movhi
 855 0536 1A84     		strh	r2, [r3, #32]	@ movhi
 435:common/stm32f10x_tim.c **** }
 856              		.loc 1 435 0
 857 0538 00BF     		nop
 858 053a 1437     		adds	r7, r7, #20
 859              		.cfi_def_cfa_offset 4
 860 053c BD46     		mov	sp, r7
 861              		.cfi_def_cfa_register 13
 862              		@ sp needed
 863 053e 80BC     		pop	{r7}
 864              		.cfi_restore 7
 865              		.cfi_def_cfa_offset 0
 866 0540 7047     		bx	lr
 867              	.L39:
 868 0542 00BF     		.align	2
 869              	.L38:
 870 0544 002C0140 		.word	1073818624
 871 0548 00340140 		.word	1073820672
 872              		.cfi_endproc
 873              	.LFE66:
 874              		.size	TIM_OC2Init, .-TIM_OC2Init
 875              		.align	1
 876              		.global	TIM_OC3Init
 877              		.syntax unified
 878              		.thumb
 879              		.thumb_func
 880              		.fpu softvfp
 881              		.type	TIM_OC3Init, %function
 882              	TIM_OC3Init:
 883              	.LFB67:
 436:common/stm32f10x_tim.c **** 
 437:common/stm32f10x_tim.c **** /**
ARM GAS  /tmp/ccRayNMu.s 			page 25


 438:common/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Channel3 according to the specified
 439:common/stm32f10x_tim.c ****   *         parameters in the TIM_OCInitStruct.
 440:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 441:common/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 442:common/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 443:common/stm32f10x_tim.c ****   * @retval None
 444:common/stm32f10x_tim.c ****   */
 445:common/stm32f10x_tim.c **** void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 446:common/stm32f10x_tim.c **** {
 884              		.loc 1 446 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 16
 887              		@ frame_needed = 1, uses_anonymous_args = 0
 888              		@ link register save eliminated.
 889 054c 80B4     		push	{r7}
 890              		.cfi_def_cfa_offset 4
 891              		.cfi_offset 7, -4
 892 054e 85B0     		sub	sp, sp, #20
 893              		.cfi_def_cfa_offset 24
 894 0550 00AF     		add	r7, sp, #0
 895              		.cfi_def_cfa_register 7
 896 0552 7860     		str	r0, [r7, #4]
 897 0554 3960     		str	r1, [r7]
 447:common/stm32f10x_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 898              		.loc 1 447 0
 899 0556 0023     		movs	r3, #0
 900 0558 7B81     		strh	r3, [r7, #10]	@ movhi
 901 055a 0023     		movs	r3, #0
 902 055c FB81     		strh	r3, [r7, #14]	@ movhi
 903 055e 0023     		movs	r3, #0
 904 0560 BB81     		strh	r3, [r7, #12]	@ movhi
 448:common/stm32f10x_tim.c ****    
 449:common/stm32f10x_tim.c ****   /* Check the parameters */
 450:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 451:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 452:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 453:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 454:common/stm32f10x_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
 455:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 905              		.loc 1 455 0
 906 0562 7B68     		ldr	r3, [r7, #4]
 907 0564 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 908 0566 9BB2     		uxth	r3, r3
 909 0568 23F48073 		bic	r3, r3, #256
 910 056c 9AB2     		uxth	r2, r3
 911 056e 7B68     		ldr	r3, [r7, #4]
 912 0570 1A84     		strh	r2, [r3, #32]	@ movhi
 456:common/stm32f10x_tim.c ****   
 457:common/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */
 458:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 913              		.loc 1 458 0
 914 0572 7B68     		ldr	r3, [r7, #4]
 915 0574 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 916 0576 FB81     		strh	r3, [r7, #14]	@ movhi
 459:common/stm32f10x_tim.c ****   /* Get the TIMx CR2 register value */
 460:common/stm32f10x_tim.c ****   tmpcr2 =  TIMx->CR2;
 917              		.loc 1 460 0
ARM GAS  /tmp/ccRayNMu.s 			page 26


 918 0578 7B68     		ldr	r3, [r7, #4]
 919 057a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 920 057c BB81     		strh	r3, [r7, #12]	@ movhi
 461:common/stm32f10x_tim.c ****   
 462:common/stm32f10x_tim.c ****   /* Get the TIMx CCMR2 register value */
 463:common/stm32f10x_tim.c ****   tmpccmrx = TIMx->CCMR2;
 921              		.loc 1 463 0
 922 057e 7B68     		ldr	r3, [r7, #4]
 923 0580 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 924 0582 7B81     		strh	r3, [r7, #10]	@ movhi
 464:common/stm32f10x_tim.c ****     
 465:common/stm32f10x_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 466:common/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 925              		.loc 1 466 0
 926 0584 7B89     		ldrh	r3, [r7, #10]	@ movhi
 927 0586 23F07003 		bic	r3, r3, #112
 928 058a 7B81     		strh	r3, [r7, #10]	@ movhi
 467:common/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 929              		.loc 1 467 0
 930 058c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 931 058e 23F00303 		bic	r3, r3, #3
 932 0592 7B81     		strh	r3, [r7, #10]	@ movhi
 468:common/stm32f10x_tim.c ****   /* Select the Output Compare Mode */
 469:common/stm32f10x_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 933              		.loc 1 469 0
 934 0594 3B68     		ldr	r3, [r7]
 935 0596 1A88     		ldrh	r2, [r3]
 936 0598 7B89     		ldrh	r3, [r7, #10]	@ movhi
 937 059a 1343     		orrs	r3, r3, r2
 938 059c 7B81     		strh	r3, [r7, #10]	@ movhi
 470:common/stm32f10x_tim.c ****   
 471:common/stm32f10x_tim.c ****   /* Reset the Output Polarity level */
 472:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 939              		.loc 1 472 0
 940 059e FB89     		ldrh	r3, [r7, #14]	@ movhi
 941 05a0 23F40073 		bic	r3, r3, #512
 942 05a4 FB81     		strh	r3, [r7, #14]	@ movhi
 473:common/stm32f10x_tim.c ****   /* Set the Output Compare Polarity */
 474:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 943              		.loc 1 474 0
 944 05a6 3B68     		ldr	r3, [r7]
 945 05a8 1B89     		ldrh	r3, [r3, #8]
 946 05aa 1B02     		lsls	r3, r3, #8
 947 05ac 9AB2     		uxth	r2, r3
 948 05ae FB89     		ldrh	r3, [r7, #14]	@ movhi
 949 05b0 1343     		orrs	r3, r3, r2
 950 05b2 FB81     		strh	r3, [r7, #14]	@ movhi
 475:common/stm32f10x_tim.c ****   
 476:common/stm32f10x_tim.c ****   /* Set the Output State */
 477:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 951              		.loc 1 477 0
 952 05b4 3B68     		ldr	r3, [r7]
 953 05b6 5B88     		ldrh	r3, [r3, #2]
 954 05b8 1B02     		lsls	r3, r3, #8
 955 05ba 9AB2     		uxth	r2, r3
 956 05bc FB89     		ldrh	r3, [r7, #14]	@ movhi
 957 05be 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccRayNMu.s 			page 27


 958 05c0 FB81     		strh	r3, [r7, #14]	@ movhi
 478:common/stm32f10x_tim.c ****     
 479:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 959              		.loc 1 479 0
 960 05c2 7B68     		ldr	r3, [r7, #4]
 961 05c4 224A     		ldr	r2, .L43
 962 05c6 9342     		cmp	r3, r2
 963 05c8 03D0     		beq	.L41
 964              		.loc 1 479 0 is_stmt 0 discriminator 1
 965 05ca 7B68     		ldr	r3, [r7, #4]
 966 05cc 214A     		ldr	r2, .L43+4
 967 05ce 9342     		cmp	r3, r2
 968 05d0 2BD1     		bne	.L42
 969              	.L41:
 480:common/stm32f10x_tim.c ****   {
 481:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 482:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 483:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 484:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 485:common/stm32f10x_tim.c ****     
 486:common/stm32f10x_tim.c ****     /* Reset the Output N Polarity level */
 487:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 970              		.loc 1 487 0 is_stmt 1
 971 05d2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 972 05d4 23F40063 		bic	r3, r3, #2048
 973 05d8 FB81     		strh	r3, [r7, #14]	@ movhi
 488:common/stm32f10x_tim.c ****     /* Set the Output N Polarity */
 489:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 974              		.loc 1 489 0
 975 05da 3B68     		ldr	r3, [r7]
 976 05dc 5B89     		ldrh	r3, [r3, #10]
 977 05de 1B02     		lsls	r3, r3, #8
 978 05e0 9AB2     		uxth	r2, r3
 979 05e2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 980 05e4 1343     		orrs	r3, r3, r2
 981 05e6 FB81     		strh	r3, [r7, #14]	@ movhi
 490:common/stm32f10x_tim.c ****     /* Reset the Output N State */
 491:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 982              		.loc 1 491 0
 983 05e8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 984 05ea 23F48063 		bic	r3, r3, #1024
 985 05ee FB81     		strh	r3, [r7, #14]	@ movhi
 492:common/stm32f10x_tim.c ****     
 493:common/stm32f10x_tim.c ****     /* Set the Output N State */
 494:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 986              		.loc 1 494 0
 987 05f0 3B68     		ldr	r3, [r7]
 988 05f2 9B88     		ldrh	r3, [r3, #4]
 989 05f4 1B02     		lsls	r3, r3, #8
 990 05f6 9AB2     		uxth	r2, r3
 991 05f8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 992 05fa 1343     		orrs	r3, r3, r2
 993 05fc FB81     		strh	r3, [r7, #14]	@ movhi
 495:common/stm32f10x_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 496:common/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 994              		.loc 1 496 0
 995 05fe BB89     		ldrh	r3, [r7, #12]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 28


 996 0600 23F48053 		bic	r3, r3, #4096
 997 0604 BB81     		strh	r3, [r7, #12]	@ movhi
 497:common/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 998              		.loc 1 497 0
 999 0606 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1000 0608 23F40053 		bic	r3, r3, #8192
 1001 060c BB81     		strh	r3, [r7, #12]	@ movhi
 498:common/stm32f10x_tim.c ****     /* Set the Output Idle state */
 499:common/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 1002              		.loc 1 499 0
 1003 060e 3B68     		ldr	r3, [r7]
 1004 0610 9B89     		ldrh	r3, [r3, #12]
 1005 0612 1B01     		lsls	r3, r3, #4
 1006 0614 9AB2     		uxth	r2, r3
 1007 0616 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1008 0618 1343     		orrs	r3, r3, r2
 1009 061a BB81     		strh	r3, [r7, #12]	@ movhi
 500:common/stm32f10x_tim.c ****     /* Set the Output N Idle state */
 501:common/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 1010              		.loc 1 501 0
 1011 061c 3B68     		ldr	r3, [r7]
 1012 061e DB89     		ldrh	r3, [r3, #14]
 1013 0620 1B01     		lsls	r3, r3, #4
 1014 0622 9AB2     		uxth	r2, r3
 1015 0624 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1016 0626 1343     		orrs	r3, r3, r2
 1017 0628 BB81     		strh	r3, [r7, #12]	@ movhi
 1018              	.L42:
 502:common/stm32f10x_tim.c ****   }
 503:common/stm32f10x_tim.c ****   /* Write to TIMx CR2 */
 504:common/stm32f10x_tim.c ****   TIMx->CR2 = tmpcr2;
 1019              		.loc 1 504 0
 1020 062a 7B68     		ldr	r3, [r7, #4]
 1021 062c BA89     		ldrh	r2, [r7, #12]	@ movhi
 1022 062e 9A80     		strh	r2, [r3, #4]	@ movhi
 505:common/stm32f10x_tim.c ****   
 506:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 */
 507:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1023              		.loc 1 507 0
 1024 0630 7B68     		ldr	r3, [r7, #4]
 1025 0632 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1026 0634 9A83     		strh	r2, [r3, #28]	@ movhi
 508:common/stm32f10x_tim.c **** 
 509:common/stm32f10x_tim.c ****   /* Set the Capture Compare Register value */
 510:common/stm32f10x_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 1027              		.loc 1 510 0
 1028 0636 3B68     		ldr	r3, [r7]
 1029 0638 DA88     		ldrh	r2, [r3, #6]
 1030 063a 7B68     		ldr	r3, [r7, #4]
 1031 063c 9A87     		strh	r2, [r3, #60]	@ movhi
 511:common/stm32f10x_tim.c ****   
 512:common/stm32f10x_tim.c ****   /* Write to TIMx CCER */
 513:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 1032              		.loc 1 513 0
 1033 063e 7B68     		ldr	r3, [r7, #4]
 1034 0640 FA89     		ldrh	r2, [r7, #14]	@ movhi
 1035 0642 1A84     		strh	r2, [r3, #32]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 29


 514:common/stm32f10x_tim.c **** }
 1036              		.loc 1 514 0
 1037 0644 00BF     		nop
 1038 0646 1437     		adds	r7, r7, #20
 1039              		.cfi_def_cfa_offset 4
 1040 0648 BD46     		mov	sp, r7
 1041              		.cfi_def_cfa_register 13
 1042              		@ sp needed
 1043 064a 80BC     		pop	{r7}
 1044              		.cfi_restore 7
 1045              		.cfi_def_cfa_offset 0
 1046 064c 7047     		bx	lr
 1047              	.L44:
 1048 064e 00BF     		.align	2
 1049              	.L43:
 1050 0650 002C0140 		.word	1073818624
 1051 0654 00340140 		.word	1073820672
 1052              		.cfi_endproc
 1053              	.LFE67:
 1054              		.size	TIM_OC3Init, .-TIM_OC3Init
 1055              		.align	1
 1056              		.global	TIM_OC4Init
 1057              		.syntax unified
 1058              		.thumb
 1059              		.thumb_func
 1060              		.fpu softvfp
 1061              		.type	TIM_OC4Init, %function
 1062              	TIM_OC4Init:
 1063              	.LFB68:
 515:common/stm32f10x_tim.c **** 
 516:common/stm32f10x_tim.c **** /**
 517:common/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Channel4 according to the specified
 518:common/stm32f10x_tim.c ****   *         parameters in the TIM_OCInitStruct.
 519:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 520:common/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 521:common/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 522:common/stm32f10x_tim.c ****   * @retval None
 523:common/stm32f10x_tim.c ****   */
 524:common/stm32f10x_tim.c **** void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 525:common/stm32f10x_tim.c **** {
 1064              		.loc 1 525 0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 16
 1067              		@ frame_needed = 1, uses_anonymous_args = 0
 1068              		@ link register save eliminated.
 1069 0658 80B4     		push	{r7}
 1070              		.cfi_def_cfa_offset 4
 1071              		.cfi_offset 7, -4
 1072 065a 85B0     		sub	sp, sp, #20
 1073              		.cfi_def_cfa_offset 24
 1074 065c 00AF     		add	r7, sp, #0
 1075              		.cfi_def_cfa_register 7
 1076 065e 7860     		str	r0, [r7, #4]
 1077 0660 3960     		str	r1, [r7]
 526:common/stm32f10x_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1078              		.loc 1 526 0
 1079 0662 0023     		movs	r3, #0
ARM GAS  /tmp/ccRayNMu.s 			page 30


 1080 0664 BB81     		strh	r3, [r7, #12]	@ movhi
 1081 0666 0023     		movs	r3, #0
 1082 0668 7B81     		strh	r3, [r7, #10]	@ movhi
 1083 066a 0023     		movs	r3, #0
 1084 066c FB81     		strh	r3, [r7, #14]	@ movhi
 527:common/stm32f10x_tim.c ****    
 528:common/stm32f10x_tim.c ****   /* Check the parameters */
 529:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 530:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 531:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 532:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 533:common/stm32f10x_tim.c ****   /* Disable the Channel 2: Reset the CC4E Bit */
 534:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 1085              		.loc 1 534 0
 1086 066e 7B68     		ldr	r3, [r7, #4]
 1087 0670 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1088 0672 9BB2     		uxth	r3, r3
 1089 0674 23F48053 		bic	r3, r3, #4096
 1090 0678 9AB2     		uxth	r2, r3
 1091 067a 7B68     		ldr	r3, [r7, #4]
 1092 067c 1A84     		strh	r2, [r3, #32]	@ movhi
 535:common/stm32f10x_tim.c ****   
 536:common/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */
 537:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 1093              		.loc 1 537 0
 1094 067e 7B68     		ldr	r3, [r7, #4]
 1095 0680 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1096 0682 7B81     		strh	r3, [r7, #10]	@ movhi
 538:common/stm32f10x_tim.c ****   /* Get the TIMx CR2 register value */
 539:common/stm32f10x_tim.c ****   tmpcr2 =  TIMx->CR2;
 1097              		.loc 1 539 0
 1098 0684 7B68     		ldr	r3, [r7, #4]
 1099 0686 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1100 0688 FB81     		strh	r3, [r7, #14]	@ movhi
 540:common/stm32f10x_tim.c ****   
 541:common/stm32f10x_tim.c ****   /* Get the TIMx CCMR2 register value */
 542:common/stm32f10x_tim.c ****   tmpccmrx = TIMx->CCMR2;
 1101              		.loc 1 542 0
 1102 068a 7B68     		ldr	r3, [r7, #4]
 1103 068c 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1104 068e BB81     		strh	r3, [r7, #12]	@ movhi
 543:common/stm32f10x_tim.c ****     
 544:common/stm32f10x_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 545:common/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 1105              		.loc 1 545 0
 1106 0690 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1107 0692 23F4E043 		bic	r3, r3, #28672
 1108 0696 BB81     		strh	r3, [r7, #12]	@ movhi
 546:common/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 1109              		.loc 1 546 0
 1110 0698 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1111 069a 23F44073 		bic	r3, r3, #768
 1112 069e BB81     		strh	r3, [r7, #12]	@ movhi
 547:common/stm32f10x_tim.c ****   
 548:common/stm32f10x_tim.c ****   /* Select the Output Compare Mode */
 549:common/stm32f10x_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1113              		.loc 1 549 0
ARM GAS  /tmp/ccRayNMu.s 			page 31


 1114 06a0 3B68     		ldr	r3, [r7]
 1115 06a2 1B88     		ldrh	r3, [r3]
 1116 06a4 1B02     		lsls	r3, r3, #8
 1117 06a6 9AB2     		uxth	r2, r3
 1118 06a8 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1119 06aa 1343     		orrs	r3, r3, r2
 1120 06ac BB81     		strh	r3, [r7, #12]	@ movhi
 550:common/stm32f10x_tim.c ****   
 551:common/stm32f10x_tim.c ****   /* Reset the Output Polarity level */
 552:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 1121              		.loc 1 552 0
 1122 06ae 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1123 06b0 23F40053 		bic	r3, r3, #8192
 1124 06b4 7B81     		strh	r3, [r7, #10]	@ movhi
 553:common/stm32f10x_tim.c ****   /* Set the Output Compare Polarity */
 554:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 1125              		.loc 1 554 0
 1126 06b6 3B68     		ldr	r3, [r7]
 1127 06b8 1B89     		ldrh	r3, [r3, #8]
 1128 06ba 1B03     		lsls	r3, r3, #12
 1129 06bc 9AB2     		uxth	r2, r3
 1130 06be 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1131 06c0 1343     		orrs	r3, r3, r2
 1132 06c2 7B81     		strh	r3, [r7, #10]	@ movhi
 555:common/stm32f10x_tim.c ****   
 556:common/stm32f10x_tim.c ****   /* Set the Output State */
 557:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 1133              		.loc 1 557 0
 1134 06c4 3B68     		ldr	r3, [r7]
 1135 06c6 5B88     		ldrh	r3, [r3, #2]
 1136 06c8 1B03     		lsls	r3, r3, #12
 1137 06ca 9AB2     		uxth	r2, r3
 1138 06cc 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1139 06ce 1343     		orrs	r3, r3, r2
 1140 06d0 7B81     		strh	r3, [r7, #10]	@ movhi
 558:common/stm32f10x_tim.c ****     
 559:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 1141              		.loc 1 559 0
 1142 06d2 7B68     		ldr	r3, [r7, #4]
 1143 06d4 124A     		ldr	r2, .L48
 1144 06d6 9342     		cmp	r3, r2
 1145 06d8 03D0     		beq	.L46
 1146              		.loc 1 559 0 is_stmt 0 discriminator 1
 1147 06da 7B68     		ldr	r3, [r7, #4]
 1148 06dc 114A     		ldr	r2, .L48+4
 1149 06de 9342     		cmp	r3, r2
 1150 06e0 0AD1     		bne	.L47
 1151              	.L46:
 560:common/stm32f10x_tim.c ****   {
 561:common/stm32f10x_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 562:common/stm32f10x_tim.c ****     /* Reset the Output Compare IDLE State */
 563:common/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 1152              		.loc 1 563 0 is_stmt 1
 1153 06e2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1154 06e4 23F48043 		bic	r3, r3, #16384
 1155 06e8 FB81     		strh	r3, [r7, #14]	@ movhi
 564:common/stm32f10x_tim.c ****     /* Set the Output Idle state */
ARM GAS  /tmp/ccRayNMu.s 			page 32


 565:common/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 1156              		.loc 1 565 0
 1157 06ea 3B68     		ldr	r3, [r7]
 1158 06ec 9B89     		ldrh	r3, [r3, #12]
 1159 06ee 9B01     		lsls	r3, r3, #6
 1160 06f0 9AB2     		uxth	r2, r3
 1161 06f2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1162 06f4 1343     		orrs	r3, r3, r2
 1163 06f6 FB81     		strh	r3, [r7, #14]	@ movhi
 1164              	.L47:
 566:common/stm32f10x_tim.c ****   }
 567:common/stm32f10x_tim.c ****   /* Write to TIMx CR2 */
 568:common/stm32f10x_tim.c ****   TIMx->CR2 = tmpcr2;
 1165              		.loc 1 568 0
 1166 06f8 7B68     		ldr	r3, [r7, #4]
 1167 06fa FA89     		ldrh	r2, [r7, #14]	@ movhi
 1168 06fc 9A80     		strh	r2, [r3, #4]	@ movhi
 569:common/stm32f10x_tim.c ****   
 570:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 */  
 571:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1169              		.loc 1 571 0
 1170 06fe 7B68     		ldr	r3, [r7, #4]
 1171 0700 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1172 0702 9A83     		strh	r2, [r3, #28]	@ movhi
 572:common/stm32f10x_tim.c **** 
 573:common/stm32f10x_tim.c ****   /* Set the Capture Compare Register value */
 574:common/stm32f10x_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 1173              		.loc 1 574 0
 1174 0704 3B68     		ldr	r3, [r7]
 1175 0706 DA88     		ldrh	r2, [r3, #6]
 1176 0708 7B68     		ldr	r3, [r7, #4]
 1177 070a A3F84020 		strh	r2, [r3, #64]	@ movhi
 575:common/stm32f10x_tim.c ****   
 576:common/stm32f10x_tim.c ****   /* Write to TIMx CCER */
 577:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 1178              		.loc 1 577 0
 1179 070e 7B68     		ldr	r3, [r7, #4]
 1180 0710 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1181 0712 1A84     		strh	r2, [r3, #32]	@ movhi
 578:common/stm32f10x_tim.c **** }
 1182              		.loc 1 578 0
 1183 0714 00BF     		nop
 1184 0716 1437     		adds	r7, r7, #20
 1185              		.cfi_def_cfa_offset 4
 1186 0718 BD46     		mov	sp, r7
 1187              		.cfi_def_cfa_register 13
 1188              		@ sp needed
 1189 071a 80BC     		pop	{r7}
 1190              		.cfi_restore 7
 1191              		.cfi_def_cfa_offset 0
 1192 071c 7047     		bx	lr
 1193              	.L49:
 1194 071e 00BF     		.align	2
 1195              	.L48:
 1196 0720 002C0140 		.word	1073818624
 1197 0724 00340140 		.word	1073820672
 1198              		.cfi_endproc
ARM GAS  /tmp/ccRayNMu.s 			page 33


 1199              	.LFE68:
 1200              		.size	TIM_OC4Init, .-TIM_OC4Init
 1201              		.align	1
 1202              		.global	TIM_ICInit
 1203              		.syntax unified
 1204              		.thumb
 1205              		.thumb_func
 1206              		.fpu softvfp
 1207              		.type	TIM_ICInit, %function
 1208              	TIM_ICInit:
 1209              	.LFB69:
 579:common/stm32f10x_tim.c **** 
 580:common/stm32f10x_tim.c **** /**
 581:common/stm32f10x_tim.c ****   * @brief  Initializes the TIM peripheral according to the specified
 582:common/stm32f10x_tim.c ****   *         parameters in the TIM_ICInitStruct.
 583:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
 584:common/stm32f10x_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
 585:common/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 586:common/stm32f10x_tim.c ****   * @retval None
 587:common/stm32f10x_tim.c ****   */
 588:common/stm32f10x_tim.c **** void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
 589:common/stm32f10x_tim.c **** {
 1210              		.loc 1 589 0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 8
 1213              		@ frame_needed = 1, uses_anonymous_args = 0
 1214 0728 80B5     		push	{r7, lr}
 1215              		.cfi_def_cfa_offset 8
 1216              		.cfi_offset 7, -8
 1217              		.cfi_offset 14, -4
 1218 072a 82B0     		sub	sp, sp, #8
 1219              		.cfi_def_cfa_offset 16
 1220 072c 00AF     		add	r7, sp, #0
 1221              		.cfi_def_cfa_register 7
 1222 072e 7860     		str	r0, [r7, #4]
 1223 0730 3960     		str	r1, [r7]
 590:common/stm32f10x_tim.c ****   /* Check the parameters */
 591:common/stm32f10x_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));  
 592:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
 593:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
 594:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
 595:common/stm32f10x_tim.c ****   
 596:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 597:common/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 598:common/stm32f10x_tim.c ****   {
 599:common/stm32f10x_tim.c ****     assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
 600:common/stm32f10x_tim.c ****   }
 601:common/stm32f10x_tim.c ****   else
 602:common/stm32f10x_tim.c ****   {
 603:common/stm32f10x_tim.c ****     assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
 604:common/stm32f10x_tim.c ****   }
 605:common/stm32f10x_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 1224              		.loc 1 605 0
 1225 0732 3B68     		ldr	r3, [r7]
 1226 0734 1B88     		ldrh	r3, [r3]
 1227 0736 002B     		cmp	r3, #0
 1228 0738 0FD1     		bne	.L51
ARM GAS  /tmp/ccRayNMu.s 			page 34


 606:common/stm32f10x_tim.c ****   {
 607:common/stm32f10x_tim.c ****     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
 608:common/stm32f10x_tim.c ****     /* TI1 Configuration */
 609:common/stm32f10x_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 1229              		.loc 1 609 0
 1230 073a 3B68     		ldr	r3, [r7]
 1231 073c 5988     		ldrh	r1, [r3, #2]
 1232 073e 3B68     		ldr	r3, [r7]
 1233 0740 9A88     		ldrh	r2, [r3, #4]
 1234 0742 3B68     		ldr	r3, [r7]
 1235 0744 1B89     		ldrh	r3, [r3, #8]
 1236 0746 7868     		ldr	r0, [r7, #4]
 1237 0748 01F045F9 		bl	TI1_Config
 610:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 611:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 612:common/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 613:common/stm32f10x_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 1238              		.loc 1 613 0
 1239 074c 3B68     		ldr	r3, [r7]
 1240 074e DB88     		ldrh	r3, [r3, #6]
 1241 0750 1946     		mov	r1, r3
 1242 0752 7868     		ldr	r0, [r7, #4]
 1243 0754 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 614:common/stm32f10x_tim.c ****   }
 615:common/stm32f10x_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 616:common/stm32f10x_tim.c ****   {
 617:common/stm32f10x_tim.c ****     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
 618:common/stm32f10x_tim.c ****     /* TI2 Configuration */
 619:common/stm32f10x_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 620:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 621:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 622:common/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 623:common/stm32f10x_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 624:common/stm32f10x_tim.c ****   }
 625:common/stm32f10x_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 626:common/stm32f10x_tim.c ****   {
 627:common/stm32f10x_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 628:common/stm32f10x_tim.c ****     /* TI3 Configuration */
 629:common/stm32f10x_tim.c ****     TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 630:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 631:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 632:common/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 633:common/stm32f10x_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 634:common/stm32f10x_tim.c ****   }
 635:common/stm32f10x_tim.c ****   else
 636:common/stm32f10x_tim.c ****   {
 637:common/stm32f10x_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 638:common/stm32f10x_tim.c ****     /* TI4 Configuration */
 639:common/stm32f10x_tim.c ****     TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 640:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 641:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 642:common/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 643:common/stm32f10x_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 644:common/stm32f10x_tim.c ****   }
 645:common/stm32f10x_tim.c **** }
 1244              		.loc 1 645 0
 1245 0758 36E0     		b	.L55
ARM GAS  /tmp/ccRayNMu.s 			page 35


 1246              	.L51:
 615:common/stm32f10x_tim.c ****   {
 1247              		.loc 1 615 0
 1248 075a 3B68     		ldr	r3, [r7]
 1249 075c 1B88     		ldrh	r3, [r3]
 1250 075e 042B     		cmp	r3, #4
 1251 0760 0FD1     		bne	.L53
 619:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 1252              		.loc 1 619 0
 1253 0762 3B68     		ldr	r3, [r7]
 1254 0764 5988     		ldrh	r1, [r3, #2]
 1255 0766 3B68     		ldr	r3, [r7]
 1256 0768 9A88     		ldrh	r2, [r3, #4]
 1257 076a 3B68     		ldr	r3, [r7]
 1258 076c 1B89     		ldrh	r3, [r3, #8]
 1259 076e 7868     		ldr	r0, [r7, #4]
 1260 0770 01F0A2F9 		bl	TI2_Config
 623:common/stm32f10x_tim.c ****   }
 1261              		.loc 1 623 0
 1262 0774 3B68     		ldr	r3, [r7]
 1263 0776 DB88     		ldrh	r3, [r3, #6]
 1264 0778 1946     		mov	r1, r3
 1265 077a 7868     		ldr	r0, [r7, #4]
 1266 077c FFF7FEFF 		bl	TIM_SetIC2Prescaler
 1267              		.loc 1 645 0
 1268 0780 22E0     		b	.L55
 1269              	.L53:
 625:common/stm32f10x_tim.c ****   {
 1270              		.loc 1 625 0
 1271 0782 3B68     		ldr	r3, [r7]
 1272 0784 1B88     		ldrh	r3, [r3]
 1273 0786 082B     		cmp	r3, #8
 1274 0788 0FD1     		bne	.L54
 629:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 1275              		.loc 1 629 0
 1276 078a 3B68     		ldr	r3, [r7]
 1277 078c 5988     		ldrh	r1, [r3, #2]
 1278 078e 3B68     		ldr	r3, [r7]
 1279 0790 9A88     		ldrh	r2, [r3, #4]
 1280 0792 3B68     		ldr	r3, [r7]
 1281 0794 1B89     		ldrh	r3, [r3, #8]
 1282 0796 7868     		ldr	r0, [r7, #4]
 1283 0798 01F008FA 		bl	TI3_Config
 633:common/stm32f10x_tim.c ****   }
 1284              		.loc 1 633 0
 1285 079c 3B68     		ldr	r3, [r7]
 1286 079e DB88     		ldrh	r3, [r3, #6]
 1287 07a0 1946     		mov	r1, r3
 1288 07a2 7868     		ldr	r0, [r7, #4]
 1289 07a4 FFF7FEFF 		bl	TIM_SetIC3Prescaler
 1290              		.loc 1 645 0
 1291 07a8 0EE0     		b	.L55
 1292              	.L54:
 639:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 1293              		.loc 1 639 0
 1294 07aa 3B68     		ldr	r3, [r7]
 1295 07ac 5988     		ldrh	r1, [r3, #2]
ARM GAS  /tmp/ccRayNMu.s 			page 36


 1296 07ae 3B68     		ldr	r3, [r7]
 1297 07b0 9A88     		ldrh	r2, [r3, #4]
 1298 07b2 3B68     		ldr	r3, [r7]
 1299 07b4 1B89     		ldrh	r3, [r3, #8]
 1300 07b6 7868     		ldr	r0, [r7, #4]
 1301 07b8 01F06EFA 		bl	TI4_Config
 643:common/stm32f10x_tim.c ****   }
 1302              		.loc 1 643 0
 1303 07bc 3B68     		ldr	r3, [r7]
 1304 07be DB88     		ldrh	r3, [r3, #6]
 1305 07c0 1946     		mov	r1, r3
 1306 07c2 7868     		ldr	r0, [r7, #4]
 1307 07c4 FFF7FEFF 		bl	TIM_SetIC4Prescaler
 1308              	.L55:
 1309              		.loc 1 645 0
 1310 07c8 00BF     		nop
 1311 07ca 0837     		adds	r7, r7, #8
 1312              		.cfi_def_cfa_offset 8
 1313 07cc BD46     		mov	sp, r7
 1314              		.cfi_def_cfa_register 13
 1315              		@ sp needed
 1316 07ce 80BD     		pop	{r7, pc}
 1317              		.cfi_endproc
 1318              	.LFE69:
 1319              		.size	TIM_ICInit, .-TIM_ICInit
 1320              		.align	1
 1321              		.global	TIM_PWMIConfig
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1325              		.fpu softvfp
 1326              		.type	TIM_PWMIConfig, %function
 1327              	TIM_PWMIConfig:
 1328              	.LFB70:
 646:common/stm32f10x_tim.c **** 
 647:common/stm32f10x_tim.c **** /**
 648:common/stm32f10x_tim.c ****   * @brief  Configures the TIM peripheral according to the specified
 649:common/stm32f10x_tim.c ****   *         parameters in the TIM_ICInitStruct to measure an external PWM signal.
 650:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
 651:common/stm32f10x_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
 652:common/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 653:common/stm32f10x_tim.c ****   * @retval None
 654:common/stm32f10x_tim.c ****   */
 655:common/stm32f10x_tim.c **** void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
 656:common/stm32f10x_tim.c **** {
 1329              		.loc 1 656 0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 16
 1332              		@ frame_needed = 1, uses_anonymous_args = 0
 1333 07d0 80B5     		push	{r7, lr}
 1334              		.cfi_def_cfa_offset 8
 1335              		.cfi_offset 7, -8
 1336              		.cfi_offset 14, -4
 1337 07d2 84B0     		sub	sp, sp, #16
 1338              		.cfi_def_cfa_offset 24
 1339 07d4 00AF     		add	r7, sp, #0
 1340              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccRayNMu.s 			page 37


 1341 07d6 7860     		str	r0, [r7, #4]
 1342 07d8 3960     		str	r1, [r7]
 657:common/stm32f10x_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 1343              		.loc 1 657 0
 1344 07da 0023     		movs	r3, #0
 1345 07dc FB81     		strh	r3, [r7, #14]	@ movhi
 658:common/stm32f10x_tim.c ****   uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 1346              		.loc 1 658 0
 1347 07de 0123     		movs	r3, #1
 1348 07e0 BB81     		strh	r3, [r7, #12]	@ movhi
 659:common/stm32f10x_tim.c ****   /* Check the parameters */
 660:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
 661:common/stm32f10x_tim.c ****   /* Select the Opposite Input Polarity */
 662:common/stm32f10x_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 1349              		.loc 1 662 0
 1350 07e2 3B68     		ldr	r3, [r7]
 1351 07e4 5B88     		ldrh	r3, [r3, #2]
 1352 07e6 002B     		cmp	r3, #0
 1353 07e8 02D1     		bne	.L57
 663:common/stm32f10x_tim.c ****   {
 664:common/stm32f10x_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
 1354              		.loc 1 664 0
 1355 07ea 0223     		movs	r3, #2
 1356 07ec FB81     		strh	r3, [r7, #14]	@ movhi
 1357 07ee 01E0     		b	.L58
 1358              	.L57:
 665:common/stm32f10x_tim.c ****   }
 666:common/stm32f10x_tim.c ****   else
 667:common/stm32f10x_tim.c ****   {
 668:common/stm32f10x_tim.c ****     icoppositepolarity = TIM_ICPolarity_Rising;
 1359              		.loc 1 668 0
 1360 07f0 0023     		movs	r3, #0
 1361 07f2 FB81     		strh	r3, [r7, #14]	@ movhi
 1362              	.L58:
 669:common/stm32f10x_tim.c ****   }
 670:common/stm32f10x_tim.c ****   /* Select the Opposite Input */
 671:common/stm32f10x_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 1363              		.loc 1 671 0
 1364 07f4 3B68     		ldr	r3, [r7]
 1365 07f6 9B88     		ldrh	r3, [r3, #4]
 1366 07f8 012B     		cmp	r3, #1
 1367 07fa 02D1     		bne	.L59
 672:common/stm32f10x_tim.c ****   {
 673:common/stm32f10x_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
 1368              		.loc 1 673 0
 1369 07fc 0223     		movs	r3, #2
 1370 07fe BB81     		strh	r3, [r7, #12]	@ movhi
 1371 0800 01E0     		b	.L60
 1372              	.L59:
 674:common/stm32f10x_tim.c ****   }
 675:common/stm32f10x_tim.c ****   else
 676:common/stm32f10x_tim.c ****   {
 677:common/stm32f10x_tim.c ****     icoppositeselection = TIM_ICSelection_DirectTI;
 1373              		.loc 1 677 0
 1374 0802 0123     		movs	r3, #1
 1375 0804 BB81     		strh	r3, [r7, #12]	@ movhi
 1376              	.L60:
ARM GAS  /tmp/ccRayNMu.s 			page 38


 678:common/stm32f10x_tim.c ****   }
 679:common/stm32f10x_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 1377              		.loc 1 679 0
 1378 0806 3B68     		ldr	r3, [r7]
 1379 0808 1B88     		ldrh	r3, [r3]
 1380 080a 002B     		cmp	r3, #0
 1381 080c 1CD1     		bne	.L61
 680:common/stm32f10x_tim.c ****   {
 681:common/stm32f10x_tim.c ****     /* TI1 Configuration */
 682:common/stm32f10x_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 1382              		.loc 1 682 0
 1383 080e 3B68     		ldr	r3, [r7]
 1384 0810 5988     		ldrh	r1, [r3, #2]
 1385 0812 3B68     		ldr	r3, [r7]
 1386 0814 9A88     		ldrh	r2, [r3, #4]
 1387 0816 3B68     		ldr	r3, [r7]
 1388 0818 1B89     		ldrh	r3, [r3, #8]
 1389 081a 7868     		ldr	r0, [r7, #4]
 1390 081c 01F0DBF8 		bl	TI1_Config
 683:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 684:common/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 685:common/stm32f10x_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 1391              		.loc 1 685 0
 1392 0820 3B68     		ldr	r3, [r7]
 1393 0822 DB88     		ldrh	r3, [r3, #6]
 1394 0824 1946     		mov	r1, r3
 1395 0826 7868     		ldr	r0, [r7, #4]
 1396 0828 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 686:common/stm32f10x_tim.c ****     /* TI2 Configuration */
 687:common/stm32f10x_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 1397              		.loc 1 687 0
 1398 082c 3B68     		ldr	r3, [r7]
 1399 082e 1B89     		ldrh	r3, [r3, #8]
 1400 0830 BA89     		ldrh	r2, [r7, #12]
 1401 0832 F989     		ldrh	r1, [r7, #14]
 1402 0834 7868     		ldr	r0, [r7, #4]
 1403 0836 01F03FF9 		bl	TI2_Config
 688:common/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 689:common/stm32f10x_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 1404              		.loc 1 689 0
 1405 083a 3B68     		ldr	r3, [r7]
 1406 083c DB88     		ldrh	r3, [r3, #6]
 1407 083e 1946     		mov	r1, r3
 1408 0840 7868     		ldr	r0, [r7, #4]
 1409 0842 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 690:common/stm32f10x_tim.c ****   }
 691:common/stm32f10x_tim.c ****   else
 692:common/stm32f10x_tim.c ****   { 
 693:common/stm32f10x_tim.c ****     /* TI2 Configuration */
 694:common/stm32f10x_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 695:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 696:common/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 697:common/stm32f10x_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 698:common/stm32f10x_tim.c ****     /* TI1 Configuration */
 699:common/stm32f10x_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 700:common/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 701:common/stm32f10x_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
ARM GAS  /tmp/ccRayNMu.s 			page 39


 702:common/stm32f10x_tim.c ****   }
 703:common/stm32f10x_tim.c **** }
 1410              		.loc 1 703 0
 1411 0846 1BE0     		b	.L63
 1412              	.L61:
 694:common/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 1413              		.loc 1 694 0
 1414 0848 3B68     		ldr	r3, [r7]
 1415 084a 5988     		ldrh	r1, [r3, #2]
 1416 084c 3B68     		ldr	r3, [r7]
 1417 084e 9A88     		ldrh	r2, [r3, #4]
 1418 0850 3B68     		ldr	r3, [r7]
 1419 0852 1B89     		ldrh	r3, [r3, #8]
 1420 0854 7868     		ldr	r0, [r7, #4]
 1421 0856 01F02FF9 		bl	TI2_Config
 697:common/stm32f10x_tim.c ****     /* TI1 Configuration */
 1422              		.loc 1 697 0
 1423 085a 3B68     		ldr	r3, [r7]
 1424 085c DB88     		ldrh	r3, [r3, #6]
 1425 085e 1946     		mov	r1, r3
 1426 0860 7868     		ldr	r0, [r7, #4]
 1427 0862 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 699:common/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 1428              		.loc 1 699 0
 1429 0866 3B68     		ldr	r3, [r7]
 1430 0868 1B89     		ldrh	r3, [r3, #8]
 1431 086a BA89     		ldrh	r2, [r7, #12]
 1432 086c F989     		ldrh	r1, [r7, #14]
 1433 086e 7868     		ldr	r0, [r7, #4]
 1434 0870 01F0B1F8 		bl	TI1_Config
 701:common/stm32f10x_tim.c ****   }
 1435              		.loc 1 701 0
 1436 0874 3B68     		ldr	r3, [r7]
 1437 0876 DB88     		ldrh	r3, [r3, #6]
 1438 0878 1946     		mov	r1, r3
 1439 087a 7868     		ldr	r0, [r7, #4]
 1440 087c FFF7FEFF 		bl	TIM_SetIC1Prescaler
 1441              	.L63:
 1442              		.loc 1 703 0
 1443 0880 00BF     		nop
 1444 0882 1037     		adds	r7, r7, #16
 1445              		.cfi_def_cfa_offset 8
 1446 0884 BD46     		mov	sp, r7
 1447              		.cfi_def_cfa_register 13
 1448              		@ sp needed
 1449 0886 80BD     		pop	{r7, pc}
 1450              		.cfi_endproc
 1451              	.LFE70:
 1452              		.size	TIM_PWMIConfig, .-TIM_PWMIConfig
 1453              		.align	1
 1454              		.global	TIM_BDTRConfig
 1455              		.syntax unified
 1456              		.thumb
 1457              		.thumb_func
 1458              		.fpu softvfp
 1459              		.type	TIM_BDTRConfig, %function
 1460              	TIM_BDTRConfig:
ARM GAS  /tmp/ccRayNMu.s 			page 40


 1461              	.LFB71:
 704:common/stm32f10x_tim.c **** 
 705:common/stm32f10x_tim.c **** /**
 706:common/stm32f10x_tim.c ****   * @brief  Configures the: Break feature, dead time, Lock level, the OSSI,
 707:common/stm32f10x_tim.c ****   *         the OSSR State and the AOE(automatic output enable).
 708:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIM 
 709:common/stm32f10x_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
 710:common/stm32f10x_tim.c ****   *         contains the BDTR Register configuration  information for the TIM peripheral.
 711:common/stm32f10x_tim.c ****   * @retval None
 712:common/stm32f10x_tim.c ****   */
 713:common/stm32f10x_tim.c **** void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
 714:common/stm32f10x_tim.c **** {
 1462              		.loc 1 714 0
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 8
 1465              		@ frame_needed = 1, uses_anonymous_args = 0
 1466              		@ link register save eliminated.
 1467 0888 80B4     		push	{r7}
 1468              		.cfi_def_cfa_offset 4
 1469              		.cfi_offset 7, -4
 1470 088a 83B0     		sub	sp, sp, #12
 1471              		.cfi_def_cfa_offset 16
 1472 088c 00AF     		add	r7, sp, #0
 1473              		.cfi_def_cfa_register 7
 1474 088e 7860     		str	r0, [r7, #4]
 1475 0890 3960     		str	r1, [r7]
 715:common/stm32f10x_tim.c ****   /* Check the parameters */
 716:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 717:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
 718:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
 719:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
 720:common/stm32f10x_tim.c ****   assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
 721:common/stm32f10x_tim.c ****   assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
 722:common/stm32f10x_tim.c ****   assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
 723:common/stm32f10x_tim.c ****   /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
 724:common/stm32f10x_tim.c ****      the OSSI State, the dead time value and the Automatic Output Enable Bit */
 725:common/stm32f10x_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 1476              		.loc 1 725 0
 1477 0892 3B68     		ldr	r3, [r7]
 1478 0894 1A88     		ldrh	r2, [r3]
 1479 0896 3B68     		ldr	r3, [r7]
 1480 0898 5B88     		ldrh	r3, [r3, #2]
 1481 089a 1343     		orrs	r3, r3, r2
 1482 089c 9AB2     		uxth	r2, r3
 726:common/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1483              		.loc 1 726 0
 1484 089e 3B68     		ldr	r3, [r7]
 1485 08a0 9B88     		ldrh	r3, [r3, #4]
 725:common/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1486              		.loc 1 725 0
 1487 08a2 1343     		orrs	r3, r3, r2
 1488 08a4 9AB2     		uxth	r2, r3
 1489              		.loc 1 726 0
 1490 08a6 3B68     		ldr	r3, [r7]
 1491 08a8 DB88     		ldrh	r3, [r3, #6]
 725:common/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1492              		.loc 1 725 0
ARM GAS  /tmp/ccRayNMu.s 			page 41


 1493 08aa 1343     		orrs	r3, r3, r2
 1494 08ac 9AB2     		uxth	r2, r3
 727:common/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 1495              		.loc 1 727 0
 1496 08ae 3B68     		ldr	r3, [r7]
 1497 08b0 1B89     		ldrh	r3, [r3, #8]
 725:common/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1498              		.loc 1 725 0
 1499 08b2 1343     		orrs	r3, r3, r2
 1500 08b4 9AB2     		uxth	r2, r3
 1501              		.loc 1 727 0
 1502 08b6 3B68     		ldr	r3, [r7]
 1503 08b8 5B89     		ldrh	r3, [r3, #10]
 725:common/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1504              		.loc 1 725 0
 1505 08ba 1343     		orrs	r3, r3, r2
 1506 08bc 9AB2     		uxth	r2, r3
 728:common/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
 1507              		.loc 1 728 0
 1508 08be 3B68     		ldr	r3, [r7]
 1509 08c0 9B89     		ldrh	r3, [r3, #12]
 725:common/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1510              		.loc 1 725 0
 1511 08c2 1343     		orrs	r3, r3, r2
 1512 08c4 9AB2     		uxth	r2, r3
 1513 08c6 7B68     		ldr	r3, [r7, #4]
 1514 08c8 A3F84420 		strh	r2, [r3, #68]	@ movhi
 729:common/stm32f10x_tim.c **** }
 1515              		.loc 1 729 0
 1516 08cc 00BF     		nop
 1517 08ce 0C37     		adds	r7, r7, #12
 1518              		.cfi_def_cfa_offset 4
 1519 08d0 BD46     		mov	sp, r7
 1520              		.cfi_def_cfa_register 13
 1521              		@ sp needed
 1522 08d2 80BC     		pop	{r7}
 1523              		.cfi_restore 7
 1524              		.cfi_def_cfa_offset 0
 1525 08d4 7047     		bx	lr
 1526              		.cfi_endproc
 1527              	.LFE71:
 1528              		.size	TIM_BDTRConfig, .-TIM_BDTRConfig
 1529              		.align	1
 1530              		.global	TIM_TimeBaseStructInit
 1531              		.syntax unified
 1532              		.thumb
 1533              		.thumb_func
 1534              		.fpu softvfp
 1535              		.type	TIM_TimeBaseStructInit, %function
 1536              	TIM_TimeBaseStructInit:
 1537              	.LFB72:
 730:common/stm32f10x_tim.c **** 
 731:common/stm32f10x_tim.c **** /**
 732:common/stm32f10x_tim.c ****   * @brief  Fills each TIM_TimeBaseInitStruct member with its default value.
 733:common/stm32f10x_tim.c ****   * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
 734:common/stm32f10x_tim.c ****   *         structure which will be initialized.
 735:common/stm32f10x_tim.c ****   * @retval None
ARM GAS  /tmp/ccRayNMu.s 			page 42


 736:common/stm32f10x_tim.c ****   */
 737:common/stm32f10x_tim.c **** void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 738:common/stm32f10x_tim.c **** {
 1538              		.loc 1 738 0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 8
 1541              		@ frame_needed = 1, uses_anonymous_args = 0
 1542              		@ link register save eliminated.
 1543 08d6 80B4     		push	{r7}
 1544              		.cfi_def_cfa_offset 4
 1545              		.cfi_offset 7, -4
 1546 08d8 83B0     		sub	sp, sp, #12
 1547              		.cfi_def_cfa_offset 16
 1548 08da 00AF     		add	r7, sp, #0
 1549              		.cfi_def_cfa_register 7
 1550 08dc 7860     		str	r0, [r7, #4]
 739:common/stm32f10x_tim.c ****   /* Set the default configuration */
 740:common/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 1551              		.loc 1 740 0
 1552 08de 7B68     		ldr	r3, [r7, #4]
 1553 08e0 4FF6FF72 		movw	r2, #65535
 1554 08e4 9A80     		strh	r2, [r3, #4]	@ movhi
 741:common/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 1555              		.loc 1 741 0
 1556 08e6 7B68     		ldr	r3, [r7, #4]
 1557 08e8 0022     		movs	r2, #0
 1558 08ea 1A80     		strh	r2, [r3]	@ movhi
 742:common/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 1559              		.loc 1 742 0
 1560 08ec 7B68     		ldr	r3, [r7, #4]
 1561 08ee 0022     		movs	r2, #0
 1562 08f0 DA80     		strh	r2, [r3, #6]	@ movhi
 743:common/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 1563              		.loc 1 743 0
 1564 08f2 7B68     		ldr	r3, [r7, #4]
 1565 08f4 0022     		movs	r2, #0
 1566 08f6 5A80     		strh	r2, [r3, #2]	@ movhi
 744:common/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 1567              		.loc 1 744 0
 1568 08f8 7B68     		ldr	r3, [r7, #4]
 1569 08fa 0022     		movs	r2, #0
 1570 08fc 1A72     		strb	r2, [r3, #8]
 745:common/stm32f10x_tim.c **** }
 1571              		.loc 1 745 0
 1572 08fe 00BF     		nop
 1573 0900 0C37     		adds	r7, r7, #12
 1574              		.cfi_def_cfa_offset 4
 1575 0902 BD46     		mov	sp, r7
 1576              		.cfi_def_cfa_register 13
 1577              		@ sp needed
 1578 0904 80BC     		pop	{r7}
 1579              		.cfi_restore 7
 1580              		.cfi_def_cfa_offset 0
 1581 0906 7047     		bx	lr
 1582              		.cfi_endproc
 1583              	.LFE72:
 1584              		.size	TIM_TimeBaseStructInit, .-TIM_TimeBaseStructInit
ARM GAS  /tmp/ccRayNMu.s 			page 43


 1585              		.align	1
 1586              		.global	TIM_OCStructInit
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu softvfp
 1591              		.type	TIM_OCStructInit, %function
 1592              	TIM_OCStructInit:
 1593              	.LFB73:
 746:common/stm32f10x_tim.c **** 
 747:common/stm32f10x_tim.c **** /**
 748:common/stm32f10x_tim.c ****   * @brief  Fills each TIM_OCInitStruct member with its default value.
 749:common/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
 750:common/stm32f10x_tim.c ****   *         be initialized.
 751:common/stm32f10x_tim.c ****   * @retval None
 752:common/stm32f10x_tim.c ****   */
 753:common/stm32f10x_tim.c **** void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
 754:common/stm32f10x_tim.c **** {
 1594              		.loc 1 754 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 8
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598              		@ link register save eliminated.
 1599 0908 80B4     		push	{r7}
 1600              		.cfi_def_cfa_offset 4
 1601              		.cfi_offset 7, -4
 1602 090a 83B0     		sub	sp, sp, #12
 1603              		.cfi_def_cfa_offset 16
 1604 090c 00AF     		add	r7, sp, #0
 1605              		.cfi_def_cfa_register 7
 1606 090e 7860     		str	r0, [r7, #4]
 755:common/stm32f10x_tim.c ****   /* Set the default configuration */
 756:common/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 1607              		.loc 1 756 0
 1608 0910 7B68     		ldr	r3, [r7, #4]
 1609 0912 0022     		movs	r2, #0
 1610 0914 1A80     		strh	r2, [r3]	@ movhi
 757:common/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 1611              		.loc 1 757 0
 1612 0916 7B68     		ldr	r3, [r7, #4]
 1613 0918 0022     		movs	r2, #0
 1614 091a 5A80     		strh	r2, [r3, #2]	@ movhi
 758:common/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 1615              		.loc 1 758 0
 1616 091c 7B68     		ldr	r3, [r7, #4]
 1617 091e 0022     		movs	r2, #0
 1618 0920 9A80     		strh	r2, [r3, #4]	@ movhi
 759:common/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x0000;
 1619              		.loc 1 759 0
 1620 0922 7B68     		ldr	r3, [r7, #4]
 1621 0924 0022     		movs	r2, #0
 1622 0926 DA80     		strh	r2, [r3, #6]	@ movhi
 760:common/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 1623              		.loc 1 760 0
 1624 0928 7B68     		ldr	r3, [r7, #4]
 1625 092a 0022     		movs	r2, #0
 1626 092c 1A81     		strh	r2, [r3, #8]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 44


 761:common/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 1627              		.loc 1 761 0
 1628 092e 7B68     		ldr	r3, [r7, #4]
 1629 0930 0022     		movs	r2, #0
 1630 0932 5A81     		strh	r2, [r3, #10]	@ movhi
 762:common/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 1631              		.loc 1 762 0
 1632 0934 7B68     		ldr	r3, [r7, #4]
 1633 0936 0022     		movs	r2, #0
 1634 0938 9A81     		strh	r2, [r3, #12]	@ movhi
 763:common/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 1635              		.loc 1 763 0
 1636 093a 7B68     		ldr	r3, [r7, #4]
 1637 093c 0022     		movs	r2, #0
 1638 093e DA81     		strh	r2, [r3, #14]	@ movhi
 764:common/stm32f10x_tim.c **** }
 1639              		.loc 1 764 0
 1640 0940 00BF     		nop
 1641 0942 0C37     		adds	r7, r7, #12
 1642              		.cfi_def_cfa_offset 4
 1643 0944 BD46     		mov	sp, r7
 1644              		.cfi_def_cfa_register 13
 1645              		@ sp needed
 1646 0946 80BC     		pop	{r7}
 1647              		.cfi_restore 7
 1648              		.cfi_def_cfa_offset 0
 1649 0948 7047     		bx	lr
 1650              		.cfi_endproc
 1651              	.LFE73:
 1652              		.size	TIM_OCStructInit, .-TIM_OCStructInit
 1653              		.align	1
 1654              		.global	TIM_ICStructInit
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1658              		.fpu softvfp
 1659              		.type	TIM_ICStructInit, %function
 1660              	TIM_ICStructInit:
 1661              	.LFB74:
 765:common/stm32f10x_tim.c **** 
 766:common/stm32f10x_tim.c **** /**
 767:common/stm32f10x_tim.c ****   * @brief  Fills each TIM_ICInitStruct member with its default value.
 768:common/stm32f10x_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
 769:common/stm32f10x_tim.c ****   *         be initialized.
 770:common/stm32f10x_tim.c ****   * @retval None
 771:common/stm32f10x_tim.c ****   */
 772:common/stm32f10x_tim.c **** void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
 773:common/stm32f10x_tim.c **** {
 1662              		.loc 1 773 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 8
 1665              		@ frame_needed = 1, uses_anonymous_args = 0
 1666              		@ link register save eliminated.
 1667 094a 80B4     		push	{r7}
 1668              		.cfi_def_cfa_offset 4
 1669              		.cfi_offset 7, -4
 1670 094c 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccRayNMu.s 			page 45


 1671              		.cfi_def_cfa_offset 16
 1672 094e 00AF     		add	r7, sp, #0
 1673              		.cfi_def_cfa_register 7
 1674 0950 7860     		str	r0, [r7, #4]
 774:common/stm32f10x_tim.c ****   /* Set the default configuration */
 775:common/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 1675              		.loc 1 775 0
 1676 0952 7B68     		ldr	r3, [r7, #4]
 1677 0954 0022     		movs	r2, #0
 1678 0956 1A80     		strh	r2, [r3]	@ movhi
 776:common/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 1679              		.loc 1 776 0
 1680 0958 7B68     		ldr	r3, [r7, #4]
 1681 095a 0022     		movs	r2, #0
 1682 095c 5A80     		strh	r2, [r3, #2]	@ movhi
 777:common/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 1683              		.loc 1 777 0
 1684 095e 7B68     		ldr	r3, [r7, #4]
 1685 0960 0122     		movs	r2, #1
 1686 0962 9A80     		strh	r2, [r3, #4]	@ movhi
 778:common/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 1687              		.loc 1 778 0
 1688 0964 7B68     		ldr	r3, [r7, #4]
 1689 0966 0022     		movs	r2, #0
 1690 0968 DA80     		strh	r2, [r3, #6]	@ movhi
 779:common/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
 1691              		.loc 1 779 0
 1692 096a 7B68     		ldr	r3, [r7, #4]
 1693 096c 0022     		movs	r2, #0
 1694 096e 1A81     		strh	r2, [r3, #8]	@ movhi
 780:common/stm32f10x_tim.c **** }
 1695              		.loc 1 780 0
 1696 0970 00BF     		nop
 1697 0972 0C37     		adds	r7, r7, #12
 1698              		.cfi_def_cfa_offset 4
 1699 0974 BD46     		mov	sp, r7
 1700              		.cfi_def_cfa_register 13
 1701              		@ sp needed
 1702 0976 80BC     		pop	{r7}
 1703              		.cfi_restore 7
 1704              		.cfi_def_cfa_offset 0
 1705 0978 7047     		bx	lr
 1706              		.cfi_endproc
 1707              	.LFE74:
 1708              		.size	TIM_ICStructInit, .-TIM_ICStructInit
 1709              		.align	1
 1710              		.global	TIM_BDTRStructInit
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1714              		.fpu softvfp
 1715              		.type	TIM_BDTRStructInit, %function
 1716              	TIM_BDTRStructInit:
 1717              	.LFB75:
 781:common/stm32f10x_tim.c **** 
 782:common/stm32f10x_tim.c **** /**
 783:common/stm32f10x_tim.c ****   * @brief  Fills each TIM_BDTRInitStruct member with its default value.
ARM GAS  /tmp/ccRayNMu.s 			page 46


 784:common/stm32f10x_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
 785:common/stm32f10x_tim.c ****   *         will be initialized.
 786:common/stm32f10x_tim.c ****   * @retval None
 787:common/stm32f10x_tim.c ****   */
 788:common/stm32f10x_tim.c **** void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
 789:common/stm32f10x_tim.c **** {
 1718              		.loc 1 789 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 8
 1721              		@ frame_needed = 1, uses_anonymous_args = 0
 1722              		@ link register save eliminated.
 1723 097a 80B4     		push	{r7}
 1724              		.cfi_def_cfa_offset 4
 1725              		.cfi_offset 7, -4
 1726 097c 83B0     		sub	sp, sp, #12
 1727              		.cfi_def_cfa_offset 16
 1728 097e 00AF     		add	r7, sp, #0
 1729              		.cfi_def_cfa_register 7
 1730 0980 7860     		str	r0, [r7, #4]
 790:common/stm32f10x_tim.c ****   /* Set the default configuration */
 791:common/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 1731              		.loc 1 791 0
 1732 0982 7B68     		ldr	r3, [r7, #4]
 1733 0984 0022     		movs	r2, #0
 1734 0986 1A80     		strh	r2, [r3]	@ movhi
 792:common/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 1735              		.loc 1 792 0
 1736 0988 7B68     		ldr	r3, [r7, #4]
 1737 098a 0022     		movs	r2, #0
 1738 098c 5A80     		strh	r2, [r3, #2]	@ movhi
 793:common/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 1739              		.loc 1 793 0
 1740 098e 7B68     		ldr	r3, [r7, #4]
 1741 0990 0022     		movs	r2, #0
 1742 0992 9A80     		strh	r2, [r3, #4]	@ movhi
 794:common/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 1743              		.loc 1 794 0
 1744 0994 7B68     		ldr	r3, [r7, #4]
 1745 0996 0022     		movs	r2, #0
 1746 0998 DA80     		strh	r2, [r3, #6]	@ movhi
 795:common/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 1747              		.loc 1 795 0
 1748 099a 7B68     		ldr	r3, [r7, #4]
 1749 099c 0022     		movs	r2, #0
 1750 099e 1A81     		strh	r2, [r3, #8]	@ movhi
 796:common/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 1751              		.loc 1 796 0
 1752 09a0 7B68     		ldr	r3, [r7, #4]
 1753 09a2 0022     		movs	r2, #0
 1754 09a4 5A81     		strh	r2, [r3, #10]	@ movhi
 797:common/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 1755              		.loc 1 797 0
 1756 09a6 7B68     		ldr	r3, [r7, #4]
 1757 09a8 0022     		movs	r2, #0
 1758 09aa 9A81     		strh	r2, [r3, #12]	@ movhi
 798:common/stm32f10x_tim.c **** }
 1759              		.loc 1 798 0
ARM GAS  /tmp/ccRayNMu.s 			page 47


 1760 09ac 00BF     		nop
 1761 09ae 0C37     		adds	r7, r7, #12
 1762              		.cfi_def_cfa_offset 4
 1763 09b0 BD46     		mov	sp, r7
 1764              		.cfi_def_cfa_register 13
 1765              		@ sp needed
 1766 09b2 80BC     		pop	{r7}
 1767              		.cfi_restore 7
 1768              		.cfi_def_cfa_offset 0
 1769 09b4 7047     		bx	lr
 1770              		.cfi_endproc
 1771              	.LFE75:
 1772              		.size	TIM_BDTRStructInit, .-TIM_BDTRStructInit
 1773              		.align	1
 1774              		.global	TIM_Cmd
 1775              		.syntax unified
 1776              		.thumb
 1777              		.thumb_func
 1778              		.fpu softvfp
 1779              		.type	TIM_Cmd, %function
 1780              	TIM_Cmd:
 1781              	.LFB76:
 799:common/stm32f10x_tim.c **** 
 800:common/stm32f10x_tim.c **** /**
 801:common/stm32f10x_tim.c ****   * @brief  Enables or disables the specified TIM peripheral.
 802:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIMx peripheral.
 803:common/stm32f10x_tim.c ****   * @param  NewState: new state of the TIMx peripheral.
 804:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
 805:common/stm32f10x_tim.c ****   * @retval None
 806:common/stm32f10x_tim.c ****   */
 807:common/stm32f10x_tim.c **** void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
 808:common/stm32f10x_tim.c **** {
 1782              		.loc 1 808 0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 8
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786              		@ link register save eliminated.
 1787 09b6 80B4     		push	{r7}
 1788              		.cfi_def_cfa_offset 4
 1789              		.cfi_offset 7, -4
 1790 09b8 83B0     		sub	sp, sp, #12
 1791              		.cfi_def_cfa_offset 16
 1792 09ba 00AF     		add	r7, sp, #0
 1793              		.cfi_def_cfa_register 7
 1794 09bc 7860     		str	r0, [r7, #4]
 1795 09be 0B46     		mov	r3, r1
 1796 09c0 FB70     		strb	r3, [r7, #3]
 809:common/stm32f10x_tim.c ****   /* Check the parameters */
 810:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 811:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 812:common/stm32f10x_tim.c ****   
 813:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 1797              		.loc 1 813 0
 1798 09c2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1799 09c4 002B     		cmp	r3, #0
 1800 09c6 08D0     		beq	.L70
 814:common/stm32f10x_tim.c ****   {
ARM GAS  /tmp/ccRayNMu.s 			page 48


 815:common/stm32f10x_tim.c ****     /* Enable the TIM Counter */
 816:common/stm32f10x_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 1801              		.loc 1 816 0
 1802 09c8 7B68     		ldr	r3, [r7, #4]
 1803 09ca 1B88     		ldrh	r3, [r3]	@ movhi
 1804 09cc 9BB2     		uxth	r3, r3
 1805 09ce 43F00103 		orr	r3, r3, #1
 1806 09d2 9AB2     		uxth	r2, r3
 1807 09d4 7B68     		ldr	r3, [r7, #4]
 1808 09d6 1A80     		strh	r2, [r3]	@ movhi
 817:common/stm32f10x_tim.c ****   }
 818:common/stm32f10x_tim.c ****   else
 819:common/stm32f10x_tim.c ****   {
 820:common/stm32f10x_tim.c ****     /* Disable the TIM Counter */
 821:common/stm32f10x_tim.c ****     TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 822:common/stm32f10x_tim.c ****   }
 823:common/stm32f10x_tim.c **** }
 1809              		.loc 1 823 0
 1810 09d8 07E0     		b	.L72
 1811              	.L70:
 821:common/stm32f10x_tim.c ****   }
 1812              		.loc 1 821 0
 1813 09da 7B68     		ldr	r3, [r7, #4]
 1814 09dc 1B88     		ldrh	r3, [r3]	@ movhi
 1815 09de 9BB2     		uxth	r3, r3
 1816 09e0 23F00103 		bic	r3, r3, #1
 1817 09e4 9AB2     		uxth	r2, r3
 1818 09e6 7B68     		ldr	r3, [r7, #4]
 1819 09e8 1A80     		strh	r2, [r3]	@ movhi
 1820              	.L72:
 1821              		.loc 1 823 0
 1822 09ea 00BF     		nop
 1823 09ec 0C37     		adds	r7, r7, #12
 1824              		.cfi_def_cfa_offset 4
 1825 09ee BD46     		mov	sp, r7
 1826              		.cfi_def_cfa_register 13
 1827              		@ sp needed
 1828 09f0 80BC     		pop	{r7}
 1829              		.cfi_restore 7
 1830              		.cfi_def_cfa_offset 0
 1831 09f2 7047     		bx	lr
 1832              		.cfi_endproc
 1833              	.LFE76:
 1834              		.size	TIM_Cmd, .-TIM_Cmd
 1835              		.align	1
 1836              		.global	TIM_CtrlPWMOutputs
 1837              		.syntax unified
 1838              		.thumb
 1839              		.thumb_func
 1840              		.fpu softvfp
 1841              		.type	TIM_CtrlPWMOutputs, %function
 1842              	TIM_CtrlPWMOutputs:
 1843              	.LFB77:
 824:common/stm32f10x_tim.c **** 
 825:common/stm32f10x_tim.c **** /**
 826:common/stm32f10x_tim.c ****   * @brief  Enables or disables the TIM peripheral Main Outputs.
 827:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 8, 15, 16 or 17 to select the TIMx peripheral.
ARM GAS  /tmp/ccRayNMu.s 			page 49


 828:common/stm32f10x_tim.c ****   * @param  NewState: new state of the TIM peripheral Main Outputs.
 829:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
 830:common/stm32f10x_tim.c ****   * @retval None
 831:common/stm32f10x_tim.c ****   */
 832:common/stm32f10x_tim.c **** void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
 833:common/stm32f10x_tim.c **** {
 1844              		.loc 1 833 0
 1845              		.cfi_startproc
 1846              		@ args = 0, pretend = 0, frame = 8
 1847              		@ frame_needed = 1, uses_anonymous_args = 0
 1848              		@ link register save eliminated.
 1849 09f4 80B4     		push	{r7}
 1850              		.cfi_def_cfa_offset 4
 1851              		.cfi_offset 7, -4
 1852 09f6 83B0     		sub	sp, sp, #12
 1853              		.cfi_def_cfa_offset 16
 1854 09f8 00AF     		add	r7, sp, #0
 1855              		.cfi_def_cfa_register 7
 1856 09fa 7860     		str	r0, [r7, #4]
 1857 09fc 0B46     		mov	r3, r1
 1858 09fe FB70     		strb	r3, [r7, #3]
 834:common/stm32f10x_tim.c ****   /* Check the parameters */
 835:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 836:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 837:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 1859              		.loc 1 837 0
 1860 0a00 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1861 0a02 002B     		cmp	r3, #0
 1862 0a04 0CD0     		beq	.L74
 838:common/stm32f10x_tim.c ****   {
 839:common/stm32f10x_tim.c ****     /* Enable the TIM Main Output */
 840:common/stm32f10x_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
 1863              		.loc 1 840 0
 1864 0a06 7B68     		ldr	r3, [r7, #4]
 1865 0a08 B3F84430 		ldrh	r3, [r3, #68]	@ movhi
 1866 0a0c 9BB2     		uxth	r3, r3
 1867 0a0e 6FEA4343 		mvn	r3, r3, lsl #17
 1868 0a12 6FEA5343 		mvn	r3, r3, lsr #17
 1869 0a16 9AB2     		uxth	r2, r3
 1870 0a18 7B68     		ldr	r3, [r7, #4]
 1871 0a1a A3F84420 		strh	r2, [r3, #68]	@ movhi
 841:common/stm32f10x_tim.c ****   }
 842:common/stm32f10x_tim.c ****   else
 843:common/stm32f10x_tim.c ****   {
 844:common/stm32f10x_tim.c ****     /* Disable the TIM Main Output */
 845:common/stm32f10x_tim.c ****     TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 846:common/stm32f10x_tim.c ****   }  
 847:common/stm32f10x_tim.c **** }
 1872              		.loc 1 847 0
 1873 0a1e 09E0     		b	.L76
 1874              	.L74:
 845:common/stm32f10x_tim.c ****   }  
 1875              		.loc 1 845 0
 1876 0a20 7B68     		ldr	r3, [r7, #4]
 1877 0a22 B3F84430 		ldrh	r3, [r3, #68]	@ movhi
 1878 0a26 9BB2     		uxth	r3, r3
 1879 0a28 C3F30E03 		ubfx	r3, r3, #0, #15
ARM GAS  /tmp/ccRayNMu.s 			page 50


 1880 0a2c 9AB2     		uxth	r2, r3
 1881 0a2e 7B68     		ldr	r3, [r7, #4]
 1882 0a30 A3F84420 		strh	r2, [r3, #68]	@ movhi
 1883              	.L76:
 1884              		.loc 1 847 0
 1885 0a34 00BF     		nop
 1886 0a36 0C37     		adds	r7, r7, #12
 1887              		.cfi_def_cfa_offset 4
 1888 0a38 BD46     		mov	sp, r7
 1889              		.cfi_def_cfa_register 13
 1890              		@ sp needed
 1891 0a3a 80BC     		pop	{r7}
 1892              		.cfi_restore 7
 1893              		.cfi_def_cfa_offset 0
 1894 0a3c 7047     		bx	lr
 1895              		.cfi_endproc
 1896              	.LFE77:
 1897              		.size	TIM_CtrlPWMOutputs, .-TIM_CtrlPWMOutputs
 1898              		.align	1
 1899              		.global	TIM_ITConfig
 1900              		.syntax unified
 1901              		.thumb
 1902              		.thumb_func
 1903              		.fpu softvfp
 1904              		.type	TIM_ITConfig, %function
 1905              	TIM_ITConfig:
 1906              	.LFB78:
 848:common/stm32f10x_tim.c **** 
 849:common/stm32f10x_tim.c **** /**
 850:common/stm32f10x_tim.c ****   * @brief  Enables or disables the specified TIM interrupts.
 851:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIMx peripheral.
 852:common/stm32f10x_tim.c ****   * @param  TIM_IT: specifies the TIM interrupts sources to be enabled or disabled.
 853:common/stm32f10x_tim.c ****   *   This parameter can be any combination of the following values:
 854:common/stm32f10x_tim.c ****   *     @arg TIM_IT_Update: TIM update Interrupt source
 855:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
 856:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
 857:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
 858:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
 859:common/stm32f10x_tim.c ****   *     @arg TIM_IT_COM: TIM Commutation Interrupt source
 860:common/stm32f10x_tim.c ****   *     @arg TIM_IT_Trigger: TIM Trigger Interrupt source
 861:common/stm32f10x_tim.c ****   *     @arg TIM_IT_Break: TIM Break Interrupt source
 862:common/stm32f10x_tim.c ****   * @note 
 863:common/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can only generate an update interrupt.
 864:common/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_IT_Update, TIM_IT_CC1,
 865:common/stm32f10x_tim.c ****   *      TIM_IT_CC2 or TIM_IT_Trigger. 
 866:common/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
 867:common/stm32f10x_tim.c ****   *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
 868:common/stm32f10x_tim.c ****   *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
 869:common/stm32f10x_tim.c ****   * @param  NewState: new state of the TIM interrupts.
 870:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
 871:common/stm32f10x_tim.c ****   * @retval None
 872:common/stm32f10x_tim.c ****   */
 873:common/stm32f10x_tim.c **** void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
 874:common/stm32f10x_tim.c **** {  
 1907              		.loc 1 874 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccRayNMu.s 			page 51


 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911              		@ link register save eliminated.
 1912 0a3e 80B4     		push	{r7}
 1913              		.cfi_def_cfa_offset 4
 1914              		.cfi_offset 7, -4
 1915 0a40 83B0     		sub	sp, sp, #12
 1916              		.cfi_def_cfa_offset 16
 1917 0a42 00AF     		add	r7, sp, #0
 1918              		.cfi_def_cfa_register 7
 1919 0a44 7860     		str	r0, [r7, #4]
 1920 0a46 0B46     		mov	r3, r1
 1921 0a48 7B80     		strh	r3, [r7, #2]	@ movhi
 1922 0a4a 1346     		mov	r3, r2
 1923 0a4c 7B70     		strb	r3, [r7, #1]
 875:common/stm32f10x_tim.c ****   /* Check the parameters */
 876:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 877:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
 878:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 879:common/stm32f10x_tim.c ****   
 880:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 1924              		.loc 1 880 0
 1925 0a4e 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1926 0a50 002B     		cmp	r3, #0
 1927 0a52 08D0     		beq	.L78
 881:common/stm32f10x_tim.c ****   {
 882:common/stm32f10x_tim.c ****     /* Enable the Interrupt sources */
 883:common/stm32f10x_tim.c ****     TIMx->DIER |= TIM_IT;
 1928              		.loc 1 883 0
 1929 0a54 7B68     		ldr	r3, [r7, #4]
 1930 0a56 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1931 0a58 9AB2     		uxth	r2, r3
 1932 0a5a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1933 0a5c 1343     		orrs	r3, r3, r2
 1934 0a5e 9AB2     		uxth	r2, r3
 1935 0a60 7B68     		ldr	r3, [r7, #4]
 1936 0a62 9A81     		strh	r2, [r3, #12]	@ movhi
 884:common/stm32f10x_tim.c ****   }
 885:common/stm32f10x_tim.c ****   else
 886:common/stm32f10x_tim.c ****   {
 887:common/stm32f10x_tim.c ****     /* Disable the Interrupt sources */
 888:common/stm32f10x_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
 889:common/stm32f10x_tim.c ****   }
 890:common/stm32f10x_tim.c **** }
 1937              		.loc 1 890 0
 1938 0a64 09E0     		b	.L80
 1939              	.L78:
 888:common/stm32f10x_tim.c ****   }
 1940              		.loc 1 888 0
 1941 0a66 7B68     		ldr	r3, [r7, #4]
 1942 0a68 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1943 0a6a 9AB2     		uxth	r2, r3
 1944 0a6c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1945 0a6e DB43     		mvns	r3, r3
 1946 0a70 9BB2     		uxth	r3, r3
 1947 0a72 1340     		ands	r3, r3, r2
 1948 0a74 9AB2     		uxth	r2, r3
 1949 0a76 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRayNMu.s 			page 52


 1950 0a78 9A81     		strh	r2, [r3, #12]	@ movhi
 1951              	.L80:
 1952              		.loc 1 890 0
 1953 0a7a 00BF     		nop
 1954 0a7c 0C37     		adds	r7, r7, #12
 1955              		.cfi_def_cfa_offset 4
 1956 0a7e BD46     		mov	sp, r7
 1957              		.cfi_def_cfa_register 13
 1958              		@ sp needed
 1959 0a80 80BC     		pop	{r7}
 1960              		.cfi_restore 7
 1961              		.cfi_def_cfa_offset 0
 1962 0a82 7047     		bx	lr
 1963              		.cfi_endproc
 1964              	.LFE78:
 1965              		.size	TIM_ITConfig, .-TIM_ITConfig
 1966              		.align	1
 1967              		.global	TIM_GenerateEvent
 1968              		.syntax unified
 1969              		.thumb
 1970              		.thumb_func
 1971              		.fpu softvfp
 1972              		.type	TIM_GenerateEvent, %function
 1973              	TIM_GenerateEvent:
 1974              	.LFB79:
 891:common/stm32f10x_tim.c **** 
 892:common/stm32f10x_tim.c **** /**
 893:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx event to be generate by software.
 894:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
 895:common/stm32f10x_tim.c ****   * @param  TIM_EventSource: specifies the event source.
 896:common/stm32f10x_tim.c ****   *   This parameter can be one or more of the following values:	   
 897:common/stm32f10x_tim.c ****   *     @arg TIM_EventSource_Update: Timer update Event source
 898:common/stm32f10x_tim.c ****   *     @arg TIM_EventSource_CC1: Timer Capture Compare 1 Event source
 899:common/stm32f10x_tim.c ****   *     @arg TIM_EventSource_CC2: Timer Capture Compare 2 Event source
 900:common/stm32f10x_tim.c ****   *     @arg TIM_EventSource_CC3: Timer Capture Compare 3 Event source
 901:common/stm32f10x_tim.c ****   *     @arg TIM_EventSource_CC4: Timer Capture Compare 4 Event source
 902:common/stm32f10x_tim.c ****   *     @arg TIM_EventSource_COM: Timer COM event source  
 903:common/stm32f10x_tim.c ****   *     @arg TIM_EventSource_Trigger: Timer Trigger Event source
 904:common/stm32f10x_tim.c ****   *     @arg TIM_EventSource_Break: Timer Break event source
 905:common/stm32f10x_tim.c ****   * @note 
 906:common/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can only generate an update event. 
 907:common/stm32f10x_tim.c ****   *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
 908:common/stm32f10x_tim.c ****   * @retval None
 909:common/stm32f10x_tim.c ****   */
 910:common/stm32f10x_tim.c **** void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
 911:common/stm32f10x_tim.c **** { 
 1975              		.loc 1 911 0
 1976              		.cfi_startproc
 1977              		@ args = 0, pretend = 0, frame = 8
 1978              		@ frame_needed = 1, uses_anonymous_args = 0
 1979              		@ link register save eliminated.
 1980 0a84 80B4     		push	{r7}
 1981              		.cfi_def_cfa_offset 4
 1982              		.cfi_offset 7, -4
 1983 0a86 83B0     		sub	sp, sp, #12
 1984              		.cfi_def_cfa_offset 16
 1985 0a88 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccRayNMu.s 			page 53


 1986              		.cfi_def_cfa_register 7
 1987 0a8a 7860     		str	r0, [r7, #4]
 1988 0a8c 0B46     		mov	r3, r1
 1989 0a8e 7B80     		strh	r3, [r7, #2]	@ movhi
 912:common/stm32f10x_tim.c ****   /* Check the parameters */
 913:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 914:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 915:common/stm32f10x_tim.c ****   
 916:common/stm32f10x_tim.c ****   /* Set the event sources */
 917:common/stm32f10x_tim.c ****   TIMx->EGR = TIM_EventSource;
 1990              		.loc 1 917 0
 1991 0a90 7B68     		ldr	r3, [r7, #4]
 1992 0a92 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1993 0a94 9A82     		strh	r2, [r3, #20]	@ movhi
 918:common/stm32f10x_tim.c **** }
 1994              		.loc 1 918 0
 1995 0a96 00BF     		nop
 1996 0a98 0C37     		adds	r7, r7, #12
 1997              		.cfi_def_cfa_offset 4
 1998 0a9a BD46     		mov	sp, r7
 1999              		.cfi_def_cfa_register 13
 2000              		@ sp needed
 2001 0a9c 80BC     		pop	{r7}
 2002              		.cfi_restore 7
 2003              		.cfi_def_cfa_offset 0
 2004 0a9e 7047     		bx	lr
 2005              		.cfi_endproc
 2006              	.LFE79:
 2007              		.size	TIM_GenerateEvent, .-TIM_GenerateEvent
 2008              		.align	1
 2009              		.global	TIM_DMAConfig
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2013              		.fpu softvfp
 2014              		.type	TIM_DMAConfig, %function
 2015              	TIM_DMAConfig:
 2016              	.LFB80:
 919:common/stm32f10x_tim.c **** 
 920:common/stm32f10x_tim.c **** /**
 921:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx's DMA interface.
 922:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 15, 16 or 17 to select 
 923:common/stm32f10x_tim.c ****   *   the TIM peripheral.
 924:common/stm32f10x_tim.c ****   * @param  TIM_DMABase: DMA Base address.
 925:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
 926:common/stm32f10x_tim.c ****   *     @arg TIM_DMABase_CR, TIM_DMABase_CR2, TIM_DMABase_SMCR,
 927:common/stm32f10x_tim.c ****   *          TIM_DMABase_DIER, TIM1_DMABase_SR, TIM_DMABase_EGR,
 928:common/stm32f10x_tim.c ****   *          TIM_DMABase_CCMR1, TIM_DMABase_CCMR2, TIM_DMABase_CCER,
 929:common/stm32f10x_tim.c ****   *          TIM_DMABase_CNT, TIM_DMABase_PSC, TIM_DMABase_ARR,
 930:common/stm32f10x_tim.c ****   *          TIM_DMABase_RCR, TIM_DMABase_CCR1, TIM_DMABase_CCR2,
 931:common/stm32f10x_tim.c ****   *          TIM_DMABase_CCR3, TIM_DMABase_CCR4, TIM_DMABase_BDTR,
 932:common/stm32f10x_tim.c ****   *          TIM_DMABase_DCR.
 933:common/stm32f10x_tim.c ****   * @param  TIM_DMABurstLength: DMA Burst length.
 934:common/stm32f10x_tim.c ****   *   This parameter can be one value between:
 935:common/stm32f10x_tim.c ****   *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
 936:common/stm32f10x_tim.c ****   * @retval None
 937:common/stm32f10x_tim.c ****   */
ARM GAS  /tmp/ccRayNMu.s 			page 54


 938:common/stm32f10x_tim.c **** void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
 939:common/stm32f10x_tim.c **** {
 2017              		.loc 1 939 0
 2018              		.cfi_startproc
 2019              		@ args = 0, pretend = 0, frame = 8
 2020              		@ frame_needed = 1, uses_anonymous_args = 0
 2021              		@ link register save eliminated.
 2022 0aa0 80B4     		push	{r7}
 2023              		.cfi_def_cfa_offset 4
 2024              		.cfi_offset 7, -4
 2025 0aa2 83B0     		sub	sp, sp, #12
 2026              		.cfi_def_cfa_offset 16
 2027 0aa4 00AF     		add	r7, sp, #0
 2028              		.cfi_def_cfa_register 7
 2029 0aa6 7860     		str	r0, [r7, #4]
 2030 0aa8 0B46     		mov	r3, r1
 2031 0aaa 7B80     		strh	r3, [r7, #2]	@ movhi
 2032 0aac 1346     		mov	r3, r2	@ movhi
 2033 0aae 3B80     		strh	r3, [r7]	@ movhi
 940:common/stm32f10x_tim.c ****   /* Check the parameters */
 941:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
 942:common/stm32f10x_tim.c ****   assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
 943:common/stm32f10x_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
 944:common/stm32f10x_tim.c ****   /* Set the DMA Base and the DMA Burst Length */
 945:common/stm32f10x_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 2034              		.loc 1 945 0
 2035 0ab0 7A88     		ldrh	r2, [r7, #2]	@ movhi
 2036 0ab2 3B88     		ldrh	r3, [r7]	@ movhi
 2037 0ab4 1343     		orrs	r3, r3, r2
 2038 0ab6 9AB2     		uxth	r2, r3
 2039 0ab8 7B68     		ldr	r3, [r7, #4]
 2040 0aba A3F84820 		strh	r2, [r3, #72]	@ movhi
 946:common/stm32f10x_tim.c **** }
 2041              		.loc 1 946 0
 2042 0abe 00BF     		nop
 2043 0ac0 0C37     		adds	r7, r7, #12
 2044              		.cfi_def_cfa_offset 4
 2045 0ac2 BD46     		mov	sp, r7
 2046              		.cfi_def_cfa_register 13
 2047              		@ sp needed
 2048 0ac4 80BC     		pop	{r7}
 2049              		.cfi_restore 7
 2050              		.cfi_def_cfa_offset 0
 2051 0ac6 7047     		bx	lr
 2052              		.cfi_endproc
 2053              	.LFE80:
 2054              		.size	TIM_DMAConfig, .-TIM_DMAConfig
 2055              		.align	1
 2056              		.global	TIM_DMACmd
 2057              		.syntax unified
 2058              		.thumb
 2059              		.thumb_func
 2060              		.fpu softvfp
 2061              		.type	TIM_DMACmd, %function
 2062              	TIM_DMACmd:
 2063              	.LFB81:
 947:common/stm32f10x_tim.c **** 
ARM GAS  /tmp/ccRayNMu.s 			page 55


 948:common/stm32f10x_tim.c **** /**
 949:common/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx's DMA Requests.
 950:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 6, 7, 8, 15, 16 or 17 
 951:common/stm32f10x_tim.c ****   *   to select the TIM peripheral. 
 952:common/stm32f10x_tim.c ****   * @param  TIM_DMASource: specifies the DMA Request sources.
 953:common/stm32f10x_tim.c ****   *   This parameter can be any combination of the following values:
 954:common/stm32f10x_tim.c ****   *     @arg TIM_DMA_Update: TIM update Interrupt source
 955:common/stm32f10x_tim.c ****   *     @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
 956:common/stm32f10x_tim.c ****   *     @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
 957:common/stm32f10x_tim.c ****   *     @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
 958:common/stm32f10x_tim.c ****   *     @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
 959:common/stm32f10x_tim.c ****   *     @arg TIM_DMA_COM: TIM Commutation DMA source
 960:common/stm32f10x_tim.c ****   *     @arg TIM_DMA_Trigger: TIM Trigger DMA source
 961:common/stm32f10x_tim.c ****   * @param  NewState: new state of the DMA Request sources.
 962:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
 963:common/stm32f10x_tim.c ****   * @retval None
 964:common/stm32f10x_tim.c ****   */
 965:common/stm32f10x_tim.c **** void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
 966:common/stm32f10x_tim.c **** { 
 2064              		.loc 1 966 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 8
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068              		@ link register save eliminated.
 2069 0ac8 80B4     		push	{r7}
 2070              		.cfi_def_cfa_offset 4
 2071              		.cfi_offset 7, -4
 2072 0aca 83B0     		sub	sp, sp, #12
 2073              		.cfi_def_cfa_offset 16
 2074 0acc 00AF     		add	r7, sp, #0
 2075              		.cfi_def_cfa_register 7
 2076 0ace 7860     		str	r0, [r7, #4]
 2077 0ad0 0B46     		mov	r3, r1
 2078 0ad2 7B80     		strh	r3, [r7, #2]	@ movhi
 2079 0ad4 1346     		mov	r3, r2
 2080 0ad6 7B70     		strb	r3, [r7, #1]
 967:common/stm32f10x_tim.c ****   /* Check the parameters */
 968:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST9_PERIPH(TIMx));
 969:common/stm32f10x_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
 970:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 971:common/stm32f10x_tim.c ****   
 972:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 2081              		.loc 1 972 0
 2082 0ad8 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2083 0ada 002B     		cmp	r3, #0
 2084 0adc 08D0     		beq	.L84
 973:common/stm32f10x_tim.c ****   {
 974:common/stm32f10x_tim.c ****     /* Enable the DMA sources */
 975:common/stm32f10x_tim.c ****     TIMx->DIER |= TIM_DMASource; 
 2085              		.loc 1 975 0
 2086 0ade 7B68     		ldr	r3, [r7, #4]
 2087 0ae0 9B89     		ldrh	r3, [r3, #12]	@ movhi
 2088 0ae2 9AB2     		uxth	r2, r3
 2089 0ae4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2090 0ae6 1343     		orrs	r3, r3, r2
 2091 0ae8 9AB2     		uxth	r2, r3
 2092 0aea 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRayNMu.s 			page 56


 2093 0aec 9A81     		strh	r2, [r3, #12]	@ movhi
 976:common/stm32f10x_tim.c ****   }
 977:common/stm32f10x_tim.c ****   else
 978:common/stm32f10x_tim.c ****   {
 979:common/stm32f10x_tim.c ****     /* Disable the DMA sources */
 980:common/stm32f10x_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
 981:common/stm32f10x_tim.c ****   }
 982:common/stm32f10x_tim.c **** }
 2094              		.loc 1 982 0
 2095 0aee 09E0     		b	.L86
 2096              	.L84:
 980:common/stm32f10x_tim.c ****   }
 2097              		.loc 1 980 0
 2098 0af0 7B68     		ldr	r3, [r7, #4]
 2099 0af2 9B89     		ldrh	r3, [r3, #12]	@ movhi
 2100 0af4 9AB2     		uxth	r2, r3
 2101 0af6 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2102 0af8 DB43     		mvns	r3, r3
 2103 0afa 9BB2     		uxth	r3, r3
 2104 0afc 1340     		ands	r3, r3, r2
 2105 0afe 9AB2     		uxth	r2, r3
 2106 0b00 7B68     		ldr	r3, [r7, #4]
 2107 0b02 9A81     		strh	r2, [r3, #12]	@ movhi
 2108              	.L86:
 2109              		.loc 1 982 0
 2110 0b04 00BF     		nop
 2111 0b06 0C37     		adds	r7, r7, #12
 2112              		.cfi_def_cfa_offset 4
 2113 0b08 BD46     		mov	sp, r7
 2114              		.cfi_def_cfa_register 13
 2115              		@ sp needed
 2116 0b0a 80BC     		pop	{r7}
 2117              		.cfi_restore 7
 2118              		.cfi_def_cfa_offset 0
 2119 0b0c 7047     		bx	lr
 2120              		.cfi_endproc
 2121              	.LFE81:
 2122              		.size	TIM_DMACmd, .-TIM_DMACmd
 2123              		.align	1
 2124              		.global	TIM_InternalClockConfig
 2125              		.syntax unified
 2126              		.thumb
 2127              		.thumb_func
 2128              		.fpu softvfp
 2129              		.type	TIM_InternalClockConfig, %function
 2130              	TIM_InternalClockConfig:
 2131              	.LFB82:
 983:common/stm32f10x_tim.c **** 
 984:common/stm32f10x_tim.c **** /**
 985:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx internal Clock
 986:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
 987:common/stm32f10x_tim.c ****   *         to select the TIM peripheral.
 988:common/stm32f10x_tim.c ****   * @retval None
 989:common/stm32f10x_tim.c ****   */
 990:common/stm32f10x_tim.c **** void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
 991:common/stm32f10x_tim.c **** {
 2132              		.loc 1 991 0
ARM GAS  /tmp/ccRayNMu.s 			page 57


 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 8
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136              		@ link register save eliminated.
 2137 0b0e 80B4     		push	{r7}
 2138              		.cfi_def_cfa_offset 4
 2139              		.cfi_offset 7, -4
 2140 0b10 83B0     		sub	sp, sp, #12
 2141              		.cfi_def_cfa_offset 16
 2142 0b12 00AF     		add	r7, sp, #0
 2143              		.cfi_def_cfa_register 7
 2144 0b14 7860     		str	r0, [r7, #4]
 992:common/stm32f10x_tim.c ****   /* Check the parameters */
 993:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
 994:common/stm32f10x_tim.c ****   /* Disable slave mode to clock the prescaler directly with the internal clock */
 995:common/stm32f10x_tim.c ****   TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 2145              		.loc 1 995 0
 2146 0b16 7B68     		ldr	r3, [r7, #4]
 2147 0b18 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2148 0b1a 9BB2     		uxth	r3, r3
 2149 0b1c 23F00703 		bic	r3, r3, #7
 2150 0b20 9AB2     		uxth	r2, r3
 2151 0b22 7B68     		ldr	r3, [r7, #4]
 2152 0b24 1A81     		strh	r2, [r3, #8]	@ movhi
 996:common/stm32f10x_tim.c **** }
 2153              		.loc 1 996 0
 2154 0b26 00BF     		nop
 2155 0b28 0C37     		adds	r7, r7, #12
 2156              		.cfi_def_cfa_offset 4
 2157 0b2a BD46     		mov	sp, r7
 2158              		.cfi_def_cfa_register 13
 2159              		@ sp needed
 2160 0b2c 80BC     		pop	{r7}
 2161              		.cfi_restore 7
 2162              		.cfi_def_cfa_offset 0
 2163 0b2e 7047     		bx	lr
 2164              		.cfi_endproc
 2165              	.LFE82:
 2166              		.size	TIM_InternalClockConfig, .-TIM_InternalClockConfig
 2167              		.align	1
 2168              		.global	TIM_ITRxExternalClockConfig
 2169              		.syntax unified
 2170              		.thumb
 2171              		.thumb_func
 2172              		.fpu softvfp
 2173              		.type	TIM_ITRxExternalClockConfig, %function
 2174              	TIM_ITRxExternalClockConfig:
 2175              	.LFB83:
 997:common/stm32f10x_tim.c **** 
 998:common/stm32f10x_tim.c **** /**
 999:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Internal Trigger as External Clock
1000:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 9, 12 or 15 to select the TIM peripheral.
1001:common/stm32f10x_tim.c ****   * @param  TIM_ITRSource: Trigger source.
1002:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1003:common/stm32f10x_tim.c ****   * @param  TIM_TS_ITR0: Internal Trigger 0
1004:common/stm32f10x_tim.c ****   * @param  TIM_TS_ITR1: Internal Trigger 1
1005:common/stm32f10x_tim.c ****   * @param  TIM_TS_ITR2: Internal Trigger 2
ARM GAS  /tmp/ccRayNMu.s 			page 58


1006:common/stm32f10x_tim.c ****   * @param  TIM_TS_ITR3: Internal Trigger 3
1007:common/stm32f10x_tim.c ****   * @retval None
1008:common/stm32f10x_tim.c ****   */
1009:common/stm32f10x_tim.c **** void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
1010:common/stm32f10x_tim.c **** {
 2176              		.loc 1 1010 0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 8
 2179              		@ frame_needed = 1, uses_anonymous_args = 0
 2180 0b30 80B5     		push	{r7, lr}
 2181              		.cfi_def_cfa_offset 8
 2182              		.cfi_offset 7, -8
 2183              		.cfi_offset 14, -4
 2184 0b32 82B0     		sub	sp, sp, #8
 2185              		.cfi_def_cfa_offset 16
 2186 0b34 00AF     		add	r7, sp, #0
 2187              		.cfi_def_cfa_register 7
 2188 0b36 7860     		str	r0, [r7, #4]
 2189 0b38 0B46     		mov	r3, r1
 2190 0b3a 7B80     		strh	r3, [r7, #2]	@ movhi
1011:common/stm32f10x_tim.c ****   /* Check the parameters */
1012:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1013:common/stm32f10x_tim.c ****   assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
1014:common/stm32f10x_tim.c ****   /* Select the Internal Trigger */
1015:common/stm32f10x_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 2191              		.loc 1 1015 0
 2192 0b3c 7B88     		ldrh	r3, [r7, #2]
 2193 0b3e 1946     		mov	r1, r3
 2194 0b40 7868     		ldr	r0, [r7, #4]
 2195 0b42 FFF7FEFF 		bl	TIM_SelectInputTrigger
1016:common/stm32f10x_tim.c ****   /* Select the External clock mode1 */
1017:common/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 2196              		.loc 1 1017 0
 2197 0b46 7B68     		ldr	r3, [r7, #4]
 2198 0b48 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2199 0b4a 9BB2     		uxth	r3, r3
 2200 0b4c 43F00703 		orr	r3, r3, #7
 2201 0b50 9AB2     		uxth	r2, r3
 2202 0b52 7B68     		ldr	r3, [r7, #4]
 2203 0b54 1A81     		strh	r2, [r3, #8]	@ movhi
1018:common/stm32f10x_tim.c **** }
 2204              		.loc 1 1018 0
 2205 0b56 00BF     		nop
 2206 0b58 0837     		adds	r7, r7, #8
 2207              		.cfi_def_cfa_offset 8
 2208 0b5a BD46     		mov	sp, r7
 2209              		.cfi_def_cfa_register 13
 2210              		@ sp needed
 2211 0b5c 80BD     		pop	{r7, pc}
 2212              		.cfi_endproc
 2213              	.LFE83:
 2214              		.size	TIM_ITRxExternalClockConfig, .-TIM_ITRxExternalClockConfig
 2215              		.align	1
 2216              		.global	TIM_TIxExternalClockConfig
 2217              		.syntax unified
 2218              		.thumb
 2219              		.thumb_func
ARM GAS  /tmp/ccRayNMu.s 			page 59


 2220              		.fpu softvfp
 2221              		.type	TIM_TIxExternalClockConfig, %function
 2222              	TIM_TIxExternalClockConfig:
 2223              	.LFB84:
1019:common/stm32f10x_tim.c **** 
1020:common/stm32f10x_tim.c **** /**
1021:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Trigger as External Clock
1022:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 9, 12 or 15 to select the TIM peripheral.
1023:common/stm32f10x_tim.c ****   * @param  TIM_TIxExternalCLKSource: Trigger source.
1024:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1025:common/stm32f10x_tim.c ****   *     @arg TIM_TIxExternalCLK1Source_TI1ED: TI1 Edge Detector
1026:common/stm32f10x_tim.c ****   *     @arg TIM_TIxExternalCLK1Source_TI1: Filtered Timer Input 1
1027:common/stm32f10x_tim.c ****   *     @arg TIM_TIxExternalCLK1Source_TI2: Filtered Timer Input 2
1028:common/stm32f10x_tim.c ****   * @param  TIM_ICPolarity: specifies the TIx Polarity.
1029:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1030:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
1031:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
1032:common/stm32f10x_tim.c ****   * @param  ICFilter : specifies the filter value.
1033:common/stm32f10x_tim.c ****   *   This parameter must be a value between 0x0 and 0xF.
1034:common/stm32f10x_tim.c ****   * @retval None
1035:common/stm32f10x_tim.c ****   */
1036:common/stm32f10x_tim.c **** void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
1037:common/stm32f10x_tim.c ****                                 uint16_t TIM_ICPolarity, uint16_t ICFilter)
1038:common/stm32f10x_tim.c **** {
 2224              		.loc 1 1038 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 16
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228 0b5e 80B5     		push	{r7, lr}
 2229              		.cfi_def_cfa_offset 8
 2230              		.cfi_offset 7, -8
 2231              		.cfi_offset 14, -4
 2232 0b60 84B0     		sub	sp, sp, #16
 2233              		.cfi_def_cfa_offset 24
 2234 0b62 00AF     		add	r7, sp, #0
 2235              		.cfi_def_cfa_register 7
 2236 0b64 F860     		str	r0, [r7, #12]
 2237 0b66 0846     		mov	r0, r1
 2238 0b68 1146     		mov	r1, r2
 2239 0b6a 1A46     		mov	r2, r3
 2240 0b6c 0346     		mov	r3, r0	@ movhi
 2241 0b6e 7B81     		strh	r3, [r7, #10]	@ movhi
 2242 0b70 0B46     		mov	r3, r1	@ movhi
 2243 0b72 3B81     		strh	r3, [r7, #8]	@ movhi
 2244 0b74 1346     		mov	r3, r2	@ movhi
 2245 0b76 FB80     		strh	r3, [r7, #6]	@ movhi
1039:common/stm32f10x_tim.c ****   /* Check the parameters */
1040:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1041:common/stm32f10x_tim.c ****   assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
1042:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
1043:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_FILTER(ICFilter));
1044:common/stm32f10x_tim.c ****   /* Configure the Timer Input Clock Source */
1045:common/stm32f10x_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 2246              		.loc 1 1045 0
 2247 0b78 7B89     		ldrh	r3, [r7, #10]
 2248 0b7a 602B     		cmp	r3, #96
 2249 0b7c 06D1     		bne	.L90
ARM GAS  /tmp/ccRayNMu.s 			page 60


1046:common/stm32f10x_tim.c ****   {
1047:common/stm32f10x_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 2250              		.loc 1 1047 0
 2251 0b7e FB88     		ldrh	r3, [r7, #6]
 2252 0b80 3989     		ldrh	r1, [r7, #8]
 2253 0b82 0122     		movs	r2, #1
 2254 0b84 F868     		ldr	r0, [r7, #12]
 2255 0b86 00F097FF 		bl	TI2_Config
 2256 0b8a 05E0     		b	.L91
 2257              	.L90:
1048:common/stm32f10x_tim.c ****   }
1049:common/stm32f10x_tim.c ****   else
1050:common/stm32f10x_tim.c ****   {
1051:common/stm32f10x_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 2258              		.loc 1 1051 0
 2259 0b8c FB88     		ldrh	r3, [r7, #6]
 2260 0b8e 3989     		ldrh	r1, [r7, #8]
 2261 0b90 0122     		movs	r2, #1
 2262 0b92 F868     		ldr	r0, [r7, #12]
 2263 0b94 00F01FFF 		bl	TI1_Config
 2264              	.L91:
1052:common/stm32f10x_tim.c ****   }
1053:common/stm32f10x_tim.c ****   /* Select the Trigger source */
1054:common/stm32f10x_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 2265              		.loc 1 1054 0
 2266 0b98 7B89     		ldrh	r3, [r7, #10]
 2267 0b9a 1946     		mov	r1, r3
 2268 0b9c F868     		ldr	r0, [r7, #12]
 2269 0b9e FFF7FEFF 		bl	TIM_SelectInputTrigger
1055:common/stm32f10x_tim.c ****   /* Select the External clock mode1 */
1056:common/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 2270              		.loc 1 1056 0
 2271 0ba2 FB68     		ldr	r3, [r7, #12]
 2272 0ba4 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2273 0ba6 9BB2     		uxth	r3, r3
 2274 0ba8 43F00703 		orr	r3, r3, #7
 2275 0bac 9AB2     		uxth	r2, r3
 2276 0bae FB68     		ldr	r3, [r7, #12]
 2277 0bb0 1A81     		strh	r2, [r3, #8]	@ movhi
1057:common/stm32f10x_tim.c **** }
 2278              		.loc 1 1057 0
 2279 0bb2 00BF     		nop
 2280 0bb4 1037     		adds	r7, r7, #16
 2281              		.cfi_def_cfa_offset 8
 2282 0bb6 BD46     		mov	sp, r7
 2283              		.cfi_def_cfa_register 13
 2284              		@ sp needed
 2285 0bb8 80BD     		pop	{r7, pc}
 2286              		.cfi_endproc
 2287              	.LFE84:
 2288              		.size	TIM_TIxExternalClockConfig, .-TIM_TIxExternalClockConfig
 2289              		.align	1
 2290              		.global	TIM_ETRClockMode1Config
 2291              		.syntax unified
 2292              		.thumb
 2293              		.thumb_func
 2294              		.fpu softvfp
ARM GAS  /tmp/ccRayNMu.s 			page 61


 2295              		.type	TIM_ETRClockMode1Config, %function
 2296              	TIM_ETRClockMode1Config:
 2297              	.LFB85:
1058:common/stm32f10x_tim.c **** 
1059:common/stm32f10x_tim.c **** /**
1060:common/stm32f10x_tim.c ****   * @brief  Configures the External clock Mode1
1061:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1062:common/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
1063:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1064:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
1065:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
1066:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
1067:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
1068:common/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
1069:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1070:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
1071:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
1072:common/stm32f10x_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
1073:common/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F
1074:common/stm32f10x_tim.c ****   * @retval None
1075:common/stm32f10x_tim.c ****   */
1076:common/stm32f10x_tim.c **** void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPo
1077:common/stm32f10x_tim.c ****                              uint16_t ExtTRGFilter)
1078:common/stm32f10x_tim.c **** {
 2298              		.loc 1 1078 0
 2299              		.cfi_startproc
 2300              		@ args = 0, pretend = 0, frame = 24
 2301              		@ frame_needed = 1, uses_anonymous_args = 0
 2302 0bba 80B5     		push	{r7, lr}
 2303              		.cfi_def_cfa_offset 8
 2304              		.cfi_offset 7, -8
 2305              		.cfi_offset 14, -4
 2306 0bbc 86B0     		sub	sp, sp, #24
 2307              		.cfi_def_cfa_offset 32
 2308 0bbe 00AF     		add	r7, sp, #0
 2309              		.cfi_def_cfa_register 7
 2310 0bc0 F860     		str	r0, [r7, #12]
 2311 0bc2 0846     		mov	r0, r1
 2312 0bc4 1146     		mov	r1, r2
 2313 0bc6 1A46     		mov	r2, r3
 2314 0bc8 0346     		mov	r3, r0	@ movhi
 2315 0bca 7B81     		strh	r3, [r7, #10]	@ movhi
 2316 0bcc 0B46     		mov	r3, r1	@ movhi
 2317 0bce 3B81     		strh	r3, [r7, #8]	@ movhi
 2318 0bd0 1346     		mov	r3, r2	@ movhi
 2319 0bd2 FB80     		strh	r3, [r7, #6]	@ movhi
1079:common/stm32f10x_tim.c ****   uint16_t tmpsmcr = 0;
 2320              		.loc 1 1079 0
 2321 0bd4 0023     		movs	r3, #0
 2322 0bd6 FB82     		strh	r3, [r7, #22]	@ movhi
1080:common/stm32f10x_tim.c ****   /* Check the parameters */
1081:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1082:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
1083:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
1084:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
1085:common/stm32f10x_tim.c ****   /* Configure the ETR Clock source */
1086:common/stm32f10x_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
ARM GAS  /tmp/ccRayNMu.s 			page 62


 2323              		.loc 1 1086 0
 2324 0bd8 FB88     		ldrh	r3, [r7, #6]
 2325 0bda 3A89     		ldrh	r2, [r7, #8]
 2326 0bdc 7989     		ldrh	r1, [r7, #10]
 2327 0bde F868     		ldr	r0, [r7, #12]
 2328 0be0 FFF7FEFF 		bl	TIM_ETRConfig
1087:common/stm32f10x_tim.c ****   
1088:common/stm32f10x_tim.c ****   /* Get the TIMx SMCR register value */
1089:common/stm32f10x_tim.c ****   tmpsmcr = TIMx->SMCR;
 2329              		.loc 1 1089 0
 2330 0be4 FB68     		ldr	r3, [r7, #12]
 2331 0be6 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2332 0be8 FB82     		strh	r3, [r7, #22]	@ movhi
1090:common/stm32f10x_tim.c ****   /* Reset the SMS Bits */
1091:common/stm32f10x_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 2333              		.loc 1 1091 0
 2334 0bea FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2335 0bec 23F00703 		bic	r3, r3, #7
 2336 0bf0 FB82     		strh	r3, [r7, #22]	@ movhi
1092:common/stm32f10x_tim.c ****   /* Select the External clock mode1 */
1093:common/stm32f10x_tim.c ****   tmpsmcr |= TIM_SlaveMode_External1;
 2337              		.loc 1 1093 0
 2338 0bf2 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2339 0bf4 43F00703 		orr	r3, r3, #7
 2340 0bf8 FB82     		strh	r3, [r7, #22]	@ movhi
1094:common/stm32f10x_tim.c ****   /* Select the Trigger selection : ETRF */
1095:common/stm32f10x_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 2341              		.loc 1 1095 0
 2342 0bfa FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2343 0bfc 23F07003 		bic	r3, r3, #112
 2344 0c00 FB82     		strh	r3, [r7, #22]	@ movhi
1096:common/stm32f10x_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
 2345              		.loc 1 1096 0
 2346 0c02 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2347 0c04 43F07003 		orr	r3, r3, #112
 2348 0c08 FB82     		strh	r3, [r7, #22]	@ movhi
1097:common/stm32f10x_tim.c ****   /* Write to TIMx SMCR */
1098:common/stm32f10x_tim.c ****   TIMx->SMCR = tmpsmcr;
 2349              		.loc 1 1098 0
 2350 0c0a FB68     		ldr	r3, [r7, #12]
 2351 0c0c FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2352 0c0e 1A81     		strh	r2, [r3, #8]	@ movhi
1099:common/stm32f10x_tim.c **** }
 2353              		.loc 1 1099 0
 2354 0c10 00BF     		nop
 2355 0c12 1837     		adds	r7, r7, #24
 2356              		.cfi_def_cfa_offset 8
 2357 0c14 BD46     		mov	sp, r7
 2358              		.cfi_def_cfa_register 13
 2359              		@ sp needed
 2360 0c16 80BD     		pop	{r7, pc}
 2361              		.cfi_endproc
 2362              	.LFE85:
 2363              		.size	TIM_ETRClockMode1Config, .-TIM_ETRClockMode1Config
 2364              		.align	1
 2365              		.global	TIM_ETRClockMode2Config
 2366              		.syntax unified
ARM GAS  /tmp/ccRayNMu.s 			page 63


 2367              		.thumb
 2368              		.thumb_func
 2369              		.fpu softvfp
 2370              		.type	TIM_ETRClockMode2Config, %function
 2371              	TIM_ETRClockMode2Config:
 2372              	.LFB86:
1100:common/stm32f10x_tim.c **** 
1101:common/stm32f10x_tim.c **** /**
1102:common/stm32f10x_tim.c ****   * @brief  Configures the External clock Mode2
1103:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1104:common/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
1105:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1106:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
1107:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
1108:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
1109:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
1110:common/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
1111:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1112:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
1113:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
1114:common/stm32f10x_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
1115:common/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F
1116:common/stm32f10x_tim.c ****   * @retval None
1117:common/stm32f10x_tim.c ****   */
1118:common/stm32f10x_tim.c **** void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
1119:common/stm32f10x_tim.c ****                              uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
1120:common/stm32f10x_tim.c **** {
 2373              		.loc 1 1120 0
 2374              		.cfi_startproc
 2375              		@ args = 0, pretend = 0, frame = 16
 2376              		@ frame_needed = 1, uses_anonymous_args = 0
 2377 0c18 80B5     		push	{r7, lr}
 2378              		.cfi_def_cfa_offset 8
 2379              		.cfi_offset 7, -8
 2380              		.cfi_offset 14, -4
 2381 0c1a 84B0     		sub	sp, sp, #16
 2382              		.cfi_def_cfa_offset 24
 2383 0c1c 00AF     		add	r7, sp, #0
 2384              		.cfi_def_cfa_register 7
 2385 0c1e F860     		str	r0, [r7, #12]
 2386 0c20 0846     		mov	r0, r1
 2387 0c22 1146     		mov	r1, r2
 2388 0c24 1A46     		mov	r2, r3
 2389 0c26 0346     		mov	r3, r0	@ movhi
 2390 0c28 7B81     		strh	r3, [r7, #10]	@ movhi
 2391 0c2a 0B46     		mov	r3, r1	@ movhi
 2392 0c2c 3B81     		strh	r3, [r7, #8]	@ movhi
 2393 0c2e 1346     		mov	r3, r2	@ movhi
 2394 0c30 FB80     		strh	r3, [r7, #6]	@ movhi
1121:common/stm32f10x_tim.c ****   /* Check the parameters */
1122:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1123:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
1124:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
1125:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
1126:common/stm32f10x_tim.c ****   /* Configure the ETR Clock source */
1127:common/stm32f10x_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 2395              		.loc 1 1127 0
ARM GAS  /tmp/ccRayNMu.s 			page 64


 2396 0c32 FB88     		ldrh	r3, [r7, #6]
 2397 0c34 3A89     		ldrh	r2, [r7, #8]
 2398 0c36 7989     		ldrh	r1, [r7, #10]
 2399 0c38 F868     		ldr	r0, [r7, #12]
 2400 0c3a FFF7FEFF 		bl	TIM_ETRConfig
1128:common/stm32f10x_tim.c ****   /* Enable the External clock mode2 */
1129:common/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
 2401              		.loc 1 1129 0
 2402 0c3e FB68     		ldr	r3, [r7, #12]
 2403 0c40 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2404 0c42 9BB2     		uxth	r3, r3
 2405 0c44 43F48043 		orr	r3, r3, #16384
 2406 0c48 9AB2     		uxth	r2, r3
 2407 0c4a FB68     		ldr	r3, [r7, #12]
 2408 0c4c 1A81     		strh	r2, [r3, #8]	@ movhi
1130:common/stm32f10x_tim.c **** }
 2409              		.loc 1 1130 0
 2410 0c4e 00BF     		nop
 2411 0c50 1037     		adds	r7, r7, #16
 2412              		.cfi_def_cfa_offset 8
 2413 0c52 BD46     		mov	sp, r7
 2414              		.cfi_def_cfa_register 13
 2415              		@ sp needed
 2416 0c54 80BD     		pop	{r7, pc}
 2417              		.cfi_endproc
 2418              	.LFE86:
 2419              		.size	TIM_ETRClockMode2Config, .-TIM_ETRClockMode2Config
 2420              		.align	1
 2421              		.global	TIM_ETRConfig
 2422              		.syntax unified
 2423              		.thumb
 2424              		.thumb_func
 2425              		.fpu softvfp
 2426              		.type	TIM_ETRConfig, %function
 2427              	TIM_ETRConfig:
 2428              	.LFB87:
1131:common/stm32f10x_tim.c **** 
1132:common/stm32f10x_tim.c **** /**
1133:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
1134:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1135:common/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
1136:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1137:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
1138:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
1139:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
1140:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
1141:common/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
1142:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1143:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
1144:common/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
1145:common/stm32f10x_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
1146:common/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F
1147:common/stm32f10x_tim.c ****   * @retval None
1148:common/stm32f10x_tim.c ****   */
1149:common/stm32f10x_tim.c **** void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
1150:common/stm32f10x_tim.c ****                    uint16_t ExtTRGFilter)
1151:common/stm32f10x_tim.c **** {
ARM GAS  /tmp/ccRayNMu.s 			page 65


 2429              		.loc 1 1151 0
 2430              		.cfi_startproc
 2431              		@ args = 0, pretend = 0, frame = 24
 2432              		@ frame_needed = 1, uses_anonymous_args = 0
 2433              		@ link register save eliminated.
 2434 0c56 80B4     		push	{r7}
 2435              		.cfi_def_cfa_offset 4
 2436              		.cfi_offset 7, -4
 2437 0c58 87B0     		sub	sp, sp, #28
 2438              		.cfi_def_cfa_offset 32
 2439 0c5a 00AF     		add	r7, sp, #0
 2440              		.cfi_def_cfa_register 7
 2441 0c5c F860     		str	r0, [r7, #12]
 2442 0c5e 0846     		mov	r0, r1
 2443 0c60 1146     		mov	r1, r2
 2444 0c62 1A46     		mov	r2, r3
 2445 0c64 0346     		mov	r3, r0	@ movhi
 2446 0c66 7B81     		strh	r3, [r7, #10]	@ movhi
 2447 0c68 0B46     		mov	r3, r1	@ movhi
 2448 0c6a 3B81     		strh	r3, [r7, #8]	@ movhi
 2449 0c6c 1346     		mov	r3, r2	@ movhi
 2450 0c6e FB80     		strh	r3, [r7, #6]	@ movhi
1152:common/stm32f10x_tim.c ****   uint16_t tmpsmcr = 0;
 2451              		.loc 1 1152 0
 2452 0c70 0023     		movs	r3, #0
 2453 0c72 FB82     		strh	r3, [r7, #22]	@ movhi
1153:common/stm32f10x_tim.c ****   /* Check the parameters */
1154:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1155:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
1156:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
1157:common/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
1158:common/stm32f10x_tim.c ****   tmpsmcr = TIMx->SMCR;
 2454              		.loc 1 1158 0
 2455 0c74 FB68     		ldr	r3, [r7, #12]
 2456 0c76 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2457 0c78 FB82     		strh	r3, [r7, #22]	@ movhi
1159:common/stm32f10x_tim.c ****   /* Reset the ETR Bits */
1160:common/stm32f10x_tim.c ****   tmpsmcr &= SMCR_ETR_Mask;
 2458              		.loc 1 1160 0
 2459 0c7a FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2460 0c7c DBB2     		uxtb	r3, r3
 2461 0c7e FB82     		strh	r3, [r7, #22]	@ movhi
1161:common/stm32f10x_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
1162:common/stm32f10x_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
 2462              		.loc 1 1162 0
 2463 0c80 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2464 0c82 1B02     		lsls	r3, r3, #8
 2465 0c84 9AB2     		uxth	r2, r3
 2466 0c86 3B89     		ldrh	r3, [r7, #8]	@ movhi
 2467 0c88 1343     		orrs	r3, r3, r2
 2468 0c8a 9AB2     		uxth	r2, r3
 2469 0c8c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2470 0c8e 1343     		orrs	r3, r3, r2
 2471 0c90 9AB2     		uxth	r2, r3
 2472 0c92 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2473 0c94 1343     		orrs	r3, r3, r2
 2474 0c96 FB82     		strh	r3, [r7, #22]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 66


1163:common/stm32f10x_tim.c ****   /* Write to TIMx SMCR */
1164:common/stm32f10x_tim.c ****   TIMx->SMCR = tmpsmcr;
 2475              		.loc 1 1164 0
 2476 0c98 FB68     		ldr	r3, [r7, #12]
 2477 0c9a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2478 0c9c 1A81     		strh	r2, [r3, #8]	@ movhi
1165:common/stm32f10x_tim.c **** }
 2479              		.loc 1 1165 0
 2480 0c9e 00BF     		nop
 2481 0ca0 1C37     		adds	r7, r7, #28
 2482              		.cfi_def_cfa_offset 4
 2483 0ca2 BD46     		mov	sp, r7
 2484              		.cfi_def_cfa_register 13
 2485              		@ sp needed
 2486 0ca4 80BC     		pop	{r7}
 2487              		.cfi_restore 7
 2488              		.cfi_def_cfa_offset 0
 2489 0ca6 7047     		bx	lr
 2490              		.cfi_endproc
 2491              	.LFE87:
 2492              		.size	TIM_ETRConfig, .-TIM_ETRConfig
 2493              		.align	1
 2494              		.global	TIM_PrescalerConfig
 2495              		.syntax unified
 2496              		.thumb
 2497              		.thumb_func
 2498              		.fpu softvfp
 2499              		.type	TIM_PrescalerConfig, %function
 2500              	TIM_PrescalerConfig:
 2501              	.LFB88:
1166:common/stm32f10x_tim.c **** 
1167:common/stm32f10x_tim.c **** /**
1168:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Prescaler.
1169:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
1170:common/stm32f10x_tim.c ****   * @param  Prescaler: specifies the Prescaler Register value
1171:common/stm32f10x_tim.c ****   * @param  TIM_PSCReloadMode: specifies the TIM Prescaler Reload mode
1172:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1173:common/stm32f10x_tim.c ****   *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
1174:common/stm32f10x_tim.c ****   *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
1175:common/stm32f10x_tim.c ****   * @retval None
1176:common/stm32f10x_tim.c ****   */
1177:common/stm32f10x_tim.c **** void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
1178:common/stm32f10x_tim.c **** {
 2502              		.loc 1 1178 0
 2503              		.cfi_startproc
 2504              		@ args = 0, pretend = 0, frame = 8
 2505              		@ frame_needed = 1, uses_anonymous_args = 0
 2506              		@ link register save eliminated.
 2507 0ca8 80B4     		push	{r7}
 2508              		.cfi_def_cfa_offset 4
 2509              		.cfi_offset 7, -4
 2510 0caa 83B0     		sub	sp, sp, #12
 2511              		.cfi_def_cfa_offset 16
 2512 0cac 00AF     		add	r7, sp, #0
 2513              		.cfi_def_cfa_register 7
 2514 0cae 7860     		str	r0, [r7, #4]
 2515 0cb0 0B46     		mov	r3, r1
ARM GAS  /tmp/ccRayNMu.s 			page 67


 2516 0cb2 7B80     		strh	r3, [r7, #2]	@ movhi
 2517 0cb4 1346     		mov	r3, r2	@ movhi
 2518 0cb6 3B80     		strh	r3, [r7]	@ movhi
1179:common/stm32f10x_tim.c ****   /* Check the parameters */
1180:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
1181:common/stm32f10x_tim.c ****   assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
1182:common/stm32f10x_tim.c ****   /* Set the Prescaler value */
1183:common/stm32f10x_tim.c ****   TIMx->PSC = Prescaler;
 2519              		.loc 1 1183 0
 2520 0cb8 7B68     		ldr	r3, [r7, #4]
 2521 0cba 7A88     		ldrh	r2, [r7, #2]	@ movhi
 2522 0cbc 1A85     		strh	r2, [r3, #40]	@ movhi
1184:common/stm32f10x_tim.c ****   /* Set or reset the UG Bit */
1185:common/stm32f10x_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 2523              		.loc 1 1185 0
 2524 0cbe 7B68     		ldr	r3, [r7, #4]
 2525 0cc0 3A88     		ldrh	r2, [r7]	@ movhi
 2526 0cc2 9A82     		strh	r2, [r3, #20]	@ movhi
1186:common/stm32f10x_tim.c **** }
 2527              		.loc 1 1186 0
 2528 0cc4 00BF     		nop
 2529 0cc6 0C37     		adds	r7, r7, #12
 2530              		.cfi_def_cfa_offset 4
 2531 0cc8 BD46     		mov	sp, r7
 2532              		.cfi_def_cfa_register 13
 2533              		@ sp needed
 2534 0cca 80BC     		pop	{r7}
 2535              		.cfi_restore 7
 2536              		.cfi_def_cfa_offset 0
 2537 0ccc 7047     		bx	lr
 2538              		.cfi_endproc
 2539              	.LFE88:
 2540              		.size	TIM_PrescalerConfig, .-TIM_PrescalerConfig
 2541              		.align	1
 2542              		.global	TIM_CounterModeConfig
 2543              		.syntax unified
 2544              		.thumb
 2545              		.thumb_func
 2546              		.fpu softvfp
 2547              		.type	TIM_CounterModeConfig, %function
 2548              	TIM_CounterModeConfig:
 2549              	.LFB89:
1187:common/stm32f10x_tim.c **** 
1188:common/stm32f10x_tim.c **** /**
1189:common/stm32f10x_tim.c ****   * @brief  Specifies the TIMx Counter Mode to be used.
1190:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1191:common/stm32f10x_tim.c ****   * @param  TIM_CounterMode: specifies the Counter Mode to be used
1192:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1193:common/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_Up: TIM Up Counting Mode
1194:common/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_Down: TIM Down Counting Mode
1195:common/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_CenterAligned1: TIM Center Aligned Mode1
1196:common/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
1197:common/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
1198:common/stm32f10x_tim.c ****   * @retval None
1199:common/stm32f10x_tim.c ****   */
1200:common/stm32f10x_tim.c **** void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
1201:common/stm32f10x_tim.c **** {
ARM GAS  /tmp/ccRayNMu.s 			page 68


 2550              		.loc 1 1201 0
 2551              		.cfi_startproc
 2552              		@ args = 0, pretend = 0, frame = 16
 2553              		@ frame_needed = 1, uses_anonymous_args = 0
 2554              		@ link register save eliminated.
 2555 0cce 80B4     		push	{r7}
 2556              		.cfi_def_cfa_offset 4
 2557              		.cfi_offset 7, -4
 2558 0cd0 85B0     		sub	sp, sp, #20
 2559              		.cfi_def_cfa_offset 24
 2560 0cd2 00AF     		add	r7, sp, #0
 2561              		.cfi_def_cfa_register 7
 2562 0cd4 7860     		str	r0, [r7, #4]
 2563 0cd6 0B46     		mov	r3, r1
 2564 0cd8 7B80     		strh	r3, [r7, #2]	@ movhi
1202:common/stm32f10x_tim.c ****   uint16_t tmpcr1 = 0;
 2565              		.loc 1 1202 0
 2566 0cda 0023     		movs	r3, #0
 2567 0cdc FB81     		strh	r3, [r7, #14]	@ movhi
1203:common/stm32f10x_tim.c ****   /* Check the parameters */
1204:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1205:common/stm32f10x_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
1206:common/stm32f10x_tim.c ****   tmpcr1 = TIMx->CR1;
 2568              		.loc 1 1206 0
 2569 0cde 7B68     		ldr	r3, [r7, #4]
 2570 0ce0 1B88     		ldrh	r3, [r3]	@ movhi
 2571 0ce2 FB81     		strh	r3, [r7, #14]	@ movhi
1207:common/stm32f10x_tim.c ****   /* Reset the CMS and DIR Bits */
1208:common/stm32f10x_tim.c ****   tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 2572              		.loc 1 1208 0
 2573 0ce4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2574 0ce6 23F07003 		bic	r3, r3, #112
 2575 0cea FB81     		strh	r3, [r7, #14]	@ movhi
1209:common/stm32f10x_tim.c ****   /* Set the Counter Mode */
1210:common/stm32f10x_tim.c ****   tmpcr1 |= TIM_CounterMode;
 2576              		.loc 1 1210 0
 2577 0cec FA89     		ldrh	r2, [r7, #14]	@ movhi
 2578 0cee 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2579 0cf0 1343     		orrs	r3, r3, r2
 2580 0cf2 FB81     		strh	r3, [r7, #14]	@ movhi
1211:common/stm32f10x_tim.c ****   /* Write to TIMx CR1 register */
1212:common/stm32f10x_tim.c ****   TIMx->CR1 = tmpcr1;
 2581              		.loc 1 1212 0
 2582 0cf4 7B68     		ldr	r3, [r7, #4]
 2583 0cf6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2584 0cf8 1A80     		strh	r2, [r3]	@ movhi
1213:common/stm32f10x_tim.c **** }
 2585              		.loc 1 1213 0
 2586 0cfa 00BF     		nop
 2587 0cfc 1437     		adds	r7, r7, #20
 2588              		.cfi_def_cfa_offset 4
 2589 0cfe BD46     		mov	sp, r7
 2590              		.cfi_def_cfa_register 13
 2591              		@ sp needed
 2592 0d00 80BC     		pop	{r7}
 2593              		.cfi_restore 7
 2594              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccRayNMu.s 			page 69


 2595 0d02 7047     		bx	lr
 2596              		.cfi_endproc
 2597              	.LFE89:
 2598              		.size	TIM_CounterModeConfig, .-TIM_CounterModeConfig
 2599              		.align	1
 2600              		.global	TIM_SelectInputTrigger
 2601              		.syntax unified
 2602              		.thumb
 2603              		.thumb_func
 2604              		.fpu softvfp
 2605              		.type	TIM_SelectInputTrigger, %function
 2606              	TIM_SelectInputTrigger:
 2607              	.LFB90:
1214:common/stm32f10x_tim.c **** 
1215:common/stm32f10x_tim.c **** /**
1216:common/stm32f10x_tim.c ****   * @brief  Selects the Input Trigger source
1217:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
1218:common/stm32f10x_tim.c ****   * @param  TIM_InputTriggerSource: The Input Trigger source.
1219:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1220:common/stm32f10x_tim.c ****   *     @arg TIM_TS_ITR0: Internal Trigger 0
1221:common/stm32f10x_tim.c ****   *     @arg TIM_TS_ITR1: Internal Trigger 1
1222:common/stm32f10x_tim.c ****   *     @arg TIM_TS_ITR2: Internal Trigger 2
1223:common/stm32f10x_tim.c ****   *     @arg TIM_TS_ITR3: Internal Trigger 3
1224:common/stm32f10x_tim.c ****   *     @arg TIM_TS_TI1F_ED: TI1 Edge Detector
1225:common/stm32f10x_tim.c ****   *     @arg TIM_TS_TI1FP1: Filtered Timer Input 1
1226:common/stm32f10x_tim.c ****   *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
1227:common/stm32f10x_tim.c ****   *     @arg TIM_TS_ETRF: External Trigger input
1228:common/stm32f10x_tim.c ****   * @retval None
1229:common/stm32f10x_tim.c ****   */
1230:common/stm32f10x_tim.c **** void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
1231:common/stm32f10x_tim.c **** {
 2608              		.loc 1 1231 0
 2609              		.cfi_startproc
 2610              		@ args = 0, pretend = 0, frame = 16
 2611              		@ frame_needed = 1, uses_anonymous_args = 0
 2612              		@ link register save eliminated.
 2613 0d04 80B4     		push	{r7}
 2614              		.cfi_def_cfa_offset 4
 2615              		.cfi_offset 7, -4
 2616 0d06 85B0     		sub	sp, sp, #20
 2617              		.cfi_def_cfa_offset 24
 2618 0d08 00AF     		add	r7, sp, #0
 2619              		.cfi_def_cfa_register 7
 2620 0d0a 7860     		str	r0, [r7, #4]
 2621 0d0c 0B46     		mov	r3, r1
 2622 0d0e 7B80     		strh	r3, [r7, #2]	@ movhi
1232:common/stm32f10x_tim.c ****   uint16_t tmpsmcr = 0;
 2623              		.loc 1 1232 0
 2624 0d10 0023     		movs	r3, #0
 2625 0d12 FB81     		strh	r3, [r7, #14]	@ movhi
1233:common/stm32f10x_tim.c ****   /* Check the parameters */
1234:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1235:common/stm32f10x_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
1236:common/stm32f10x_tim.c ****   /* Get the TIMx SMCR register value */
1237:common/stm32f10x_tim.c ****   tmpsmcr = TIMx->SMCR;
 2626              		.loc 1 1237 0
 2627 0d14 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRayNMu.s 			page 70


 2628 0d16 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2629 0d18 FB81     		strh	r3, [r7, #14]	@ movhi
1238:common/stm32f10x_tim.c ****   /* Reset the TS Bits */
1239:common/stm32f10x_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 2630              		.loc 1 1239 0
 2631 0d1a FB89     		ldrh	r3, [r7, #14]	@ movhi
 2632 0d1c 23F07003 		bic	r3, r3, #112
 2633 0d20 FB81     		strh	r3, [r7, #14]	@ movhi
1240:common/stm32f10x_tim.c ****   /* Set the Input Trigger source */
1241:common/stm32f10x_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
 2634              		.loc 1 1241 0
 2635 0d22 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2636 0d24 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2637 0d26 1343     		orrs	r3, r3, r2
 2638 0d28 FB81     		strh	r3, [r7, #14]	@ movhi
1242:common/stm32f10x_tim.c ****   /* Write to TIMx SMCR */
1243:common/stm32f10x_tim.c ****   TIMx->SMCR = tmpsmcr;
 2639              		.loc 1 1243 0
 2640 0d2a 7B68     		ldr	r3, [r7, #4]
 2641 0d2c FA89     		ldrh	r2, [r7, #14]	@ movhi
 2642 0d2e 1A81     		strh	r2, [r3, #8]	@ movhi
1244:common/stm32f10x_tim.c **** }
 2643              		.loc 1 1244 0
 2644 0d30 00BF     		nop
 2645 0d32 1437     		adds	r7, r7, #20
 2646              		.cfi_def_cfa_offset 4
 2647 0d34 BD46     		mov	sp, r7
 2648              		.cfi_def_cfa_register 13
 2649              		@ sp needed
 2650 0d36 80BC     		pop	{r7}
 2651              		.cfi_restore 7
 2652              		.cfi_def_cfa_offset 0
 2653 0d38 7047     		bx	lr
 2654              		.cfi_endproc
 2655              	.LFE90:
 2656              		.size	TIM_SelectInputTrigger, .-TIM_SelectInputTrigger
 2657              		.align	1
 2658              		.global	TIM_EncoderInterfaceConfig
 2659              		.syntax unified
 2660              		.thumb
 2661              		.thumb_func
 2662              		.fpu softvfp
 2663              		.type	TIM_EncoderInterfaceConfig, %function
 2664              	TIM_EncoderInterfaceConfig:
 2665              	.LFB91:
1245:common/stm32f10x_tim.c **** 
1246:common/stm32f10x_tim.c **** /**
1247:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Encoder Interface.
1248:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1249:common/stm32f10x_tim.c ****   * @param  TIM_EncoderMode: specifies the TIMx Encoder Mode.
1250:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1251:common/stm32f10x_tim.c ****   *     @arg TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
1252:common/stm32f10x_tim.c ****   *     @arg TIM_EncoderMode_TI2: Counter counts on TI2FP2 edge depending on TI1FP1 level.
1253:common/stm32f10x_tim.c ****   *     @arg TIM_EncoderMode_TI12: Counter counts on both TI1FP1 and TI2FP2 edges depending
1254:common/stm32f10x_tim.c ****   *                                on the level of the other input.
1255:common/stm32f10x_tim.c ****   * @param  TIM_IC1Polarity: specifies the IC1 Polarity
1256:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
ARM GAS  /tmp/ccRayNMu.s 			page 71


1257:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling: IC Falling edge.
1258:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising: IC Rising edge.
1259:common/stm32f10x_tim.c ****   * @param  TIM_IC2Polarity: specifies the IC2 Polarity
1260:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1261:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling: IC Falling edge.
1262:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising: IC Rising edge.
1263:common/stm32f10x_tim.c ****   * @retval None
1264:common/stm32f10x_tim.c ****   */
1265:common/stm32f10x_tim.c **** void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
1266:common/stm32f10x_tim.c ****                                 uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
1267:common/stm32f10x_tim.c **** {
 2666              		.loc 1 1267 0
 2667              		.cfi_startproc
 2668              		@ args = 0, pretend = 0, frame = 24
 2669              		@ frame_needed = 1, uses_anonymous_args = 0
 2670              		@ link register save eliminated.
 2671 0d3a 80B4     		push	{r7}
 2672              		.cfi_def_cfa_offset 4
 2673              		.cfi_offset 7, -4
 2674 0d3c 87B0     		sub	sp, sp, #28
 2675              		.cfi_def_cfa_offset 32
 2676 0d3e 00AF     		add	r7, sp, #0
 2677              		.cfi_def_cfa_register 7
 2678 0d40 F860     		str	r0, [r7, #12]
 2679 0d42 0846     		mov	r0, r1
 2680 0d44 1146     		mov	r1, r2
 2681 0d46 1A46     		mov	r2, r3
 2682 0d48 0346     		mov	r3, r0	@ movhi
 2683 0d4a 7B81     		strh	r3, [r7, #10]	@ movhi
 2684 0d4c 0B46     		mov	r3, r1	@ movhi
 2685 0d4e 3B81     		strh	r3, [r7, #8]	@ movhi
 2686 0d50 1346     		mov	r3, r2	@ movhi
 2687 0d52 FB80     		strh	r3, [r7, #6]	@ movhi
1268:common/stm32f10x_tim.c ****   uint16_t tmpsmcr = 0;
 2688              		.loc 1 1268 0
 2689 0d54 0023     		movs	r3, #0
 2690 0d56 FB82     		strh	r3, [r7, #22]	@ movhi
1269:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 2691              		.loc 1 1269 0
 2692 0d58 0023     		movs	r3, #0
 2693 0d5a BB82     		strh	r3, [r7, #20]	@ movhi
1270:common/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 2694              		.loc 1 1270 0
 2695 0d5c 0023     		movs	r3, #0
 2696 0d5e 7B82     		strh	r3, [r7, #18]	@ movhi
1271:common/stm32f10x_tim.c ****     
1272:common/stm32f10x_tim.c ****   /* Check the parameters */
1273:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
1274:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
1275:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
1276:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
1277:common/stm32f10x_tim.c **** 
1278:common/stm32f10x_tim.c ****   /* Get the TIMx SMCR register value */
1279:common/stm32f10x_tim.c ****   tmpsmcr = TIMx->SMCR;
 2697              		.loc 1 1279 0
 2698 0d60 FB68     		ldr	r3, [r7, #12]
 2699 0d62 1B89     		ldrh	r3, [r3, #8]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 72


 2700 0d64 FB82     		strh	r3, [r7, #22]	@ movhi
1280:common/stm32f10x_tim.c ****   
1281:common/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
1282:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2701              		.loc 1 1282 0
 2702 0d66 FB68     		ldr	r3, [r7, #12]
 2703 0d68 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2704 0d6a BB82     		strh	r3, [r7, #20]	@ movhi
1283:common/stm32f10x_tim.c ****   
1284:common/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */
1285:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 2705              		.loc 1 1285 0
 2706 0d6c FB68     		ldr	r3, [r7, #12]
 2707 0d6e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 2708 0d70 7B82     		strh	r3, [r7, #18]	@ movhi
1286:common/stm32f10x_tim.c ****   
1287:common/stm32f10x_tim.c ****   /* Set the encoder Mode */
1288:common/stm32f10x_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 2709              		.loc 1 1288 0
 2710 0d72 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2711 0d74 23F00703 		bic	r3, r3, #7
 2712 0d78 FB82     		strh	r3, [r7, #22]	@ movhi
1289:common/stm32f10x_tim.c ****   tmpsmcr |= TIM_EncoderMode;
 2713              		.loc 1 1289 0
 2714 0d7a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2715 0d7c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2716 0d7e 1343     		orrs	r3, r3, r2
 2717 0d80 FB82     		strh	r3, [r7, #22]	@ movhi
1290:common/stm32f10x_tim.c ****   
1291:common/stm32f10x_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
1292:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1
 2718              		.loc 1 1292 0
 2719 0d82 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2720 0d84 23F44073 		bic	r3, r3, #768
 2721 0d88 23F00303 		bic	r3, r3, #3
 2722 0d8c BB82     		strh	r3, [r7, #20]	@ movhi
1293:common/stm32f10x_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 2723              		.loc 1 1293 0
 2724 0d8e BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2725 0d90 43F48073 		orr	r3, r3, #256
 2726 0d94 43F00103 		orr	r3, r3, #1
 2727 0d98 BB82     		strh	r3, [r7, #20]	@ movhi
1294:common/stm32f10x_tim.c ****   
1295:common/stm32f10x_tim.c ****   /* Set the TI1 and the TI2 Polarities */
1296:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC
 2728              		.loc 1 1296 0
 2729 0d9a 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 2730 0d9c 23F02203 		bic	r3, r3, #34
 2731 0da0 7B82     		strh	r3, [r7, #18]	@ movhi
1297:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 2732              		.loc 1 1297 0
 2733 0da2 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2734 0da4 1B01     		lsls	r3, r3, #4
 2735 0da6 9AB2     		uxth	r2, r3
 2736 0da8 3B89     		ldrh	r3, [r7, #8]	@ movhi
 2737 0daa 1343     		orrs	r3, r3, r2
 2738 0dac 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccRayNMu.s 			page 73


 2739 0dae 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 2740 0db0 1343     		orrs	r3, r3, r2
 2741 0db2 7B82     		strh	r3, [r7, #18]	@ movhi
1298:common/stm32f10x_tim.c ****   
1299:common/stm32f10x_tim.c ****   /* Write to TIMx SMCR */
1300:common/stm32f10x_tim.c ****   TIMx->SMCR = tmpsmcr;
 2742              		.loc 1 1300 0
 2743 0db4 FB68     		ldr	r3, [r7, #12]
 2744 0db6 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2745 0db8 1A81     		strh	r2, [r3, #8]	@ movhi
1301:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
1302:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2746              		.loc 1 1302 0
 2747 0dba FB68     		ldr	r3, [r7, #12]
 2748 0dbc BA8A     		ldrh	r2, [r7, #20]	@ movhi
 2749 0dbe 1A83     		strh	r2, [r3, #24]	@ movhi
1303:common/stm32f10x_tim.c ****   /* Write to TIMx CCER */
1304:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 2750              		.loc 1 1304 0
 2751 0dc0 FB68     		ldr	r3, [r7, #12]
 2752 0dc2 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 2753 0dc4 1A84     		strh	r2, [r3, #32]	@ movhi
1305:common/stm32f10x_tim.c **** }
 2754              		.loc 1 1305 0
 2755 0dc6 00BF     		nop
 2756 0dc8 1C37     		adds	r7, r7, #28
 2757              		.cfi_def_cfa_offset 4
 2758 0dca BD46     		mov	sp, r7
 2759              		.cfi_def_cfa_register 13
 2760              		@ sp needed
 2761 0dcc 80BC     		pop	{r7}
 2762              		.cfi_restore 7
 2763              		.cfi_def_cfa_offset 0
 2764 0dce 7047     		bx	lr
 2765              		.cfi_endproc
 2766              	.LFE91:
 2767              		.size	TIM_EncoderInterfaceConfig, .-TIM_EncoderInterfaceConfig
 2768              		.align	1
 2769              		.global	TIM_ForcedOC1Config
 2770              		.syntax unified
 2771              		.thumb
 2772              		.thumb_func
 2773              		.fpu softvfp
 2774              		.type	TIM_ForcedOC1Config, %function
 2775              	TIM_ForcedOC1Config:
 2776              	.LFB92:
1306:common/stm32f10x_tim.c **** 
1307:common/stm32f10x_tim.c **** /**
1308:common/stm32f10x_tim.c ****   * @brief  Forces the TIMx output 1 waveform to active or inactive level.
1309:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
1310:common/stm32f10x_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1311:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1312:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
1313:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
1314:common/stm32f10x_tim.c ****   * @retval None
1315:common/stm32f10x_tim.c ****   */
1316:common/stm32f10x_tim.c **** void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
ARM GAS  /tmp/ccRayNMu.s 			page 74


1317:common/stm32f10x_tim.c **** {
 2777              		.loc 1 1317 0
 2778              		.cfi_startproc
 2779              		@ args = 0, pretend = 0, frame = 16
 2780              		@ frame_needed = 1, uses_anonymous_args = 0
 2781              		@ link register save eliminated.
 2782 0dd0 80B4     		push	{r7}
 2783              		.cfi_def_cfa_offset 4
 2784              		.cfi_offset 7, -4
 2785 0dd2 85B0     		sub	sp, sp, #20
 2786              		.cfi_def_cfa_offset 24
 2787 0dd4 00AF     		add	r7, sp, #0
 2788              		.cfi_def_cfa_register 7
 2789 0dd6 7860     		str	r0, [r7, #4]
 2790 0dd8 0B46     		mov	r3, r1
 2791 0dda 7B80     		strh	r3, [r7, #2]	@ movhi
1318:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 2792              		.loc 1 1318 0
 2793 0ddc 0023     		movs	r3, #0
 2794 0dde FB81     		strh	r3, [r7, #14]	@ movhi
1319:common/stm32f10x_tim.c ****   /* Check the parameters */
1320:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1321:common/stm32f10x_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1322:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2795              		.loc 1 1322 0
 2796 0de0 7B68     		ldr	r3, [r7, #4]
 2797 0de2 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2798 0de4 FB81     		strh	r3, [r7, #14]	@ movhi
1323:common/stm32f10x_tim.c ****   /* Reset the OC1M Bits */
1324:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 2799              		.loc 1 1324 0
 2800 0de6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2801 0de8 23F07003 		bic	r3, r3, #112
 2802 0dec FB81     		strh	r3, [r7, #14]	@ movhi
1325:common/stm32f10x_tim.c ****   /* Configure The Forced output Mode */
1326:common/stm32f10x_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
 2803              		.loc 1 1326 0
 2804 0dee FA89     		ldrh	r2, [r7, #14]	@ movhi
 2805 0df0 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2806 0df2 1343     		orrs	r3, r3, r2
 2807 0df4 FB81     		strh	r3, [r7, #14]	@ movhi
1327:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1328:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2808              		.loc 1 1328 0
 2809 0df6 7B68     		ldr	r3, [r7, #4]
 2810 0df8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2811 0dfa 1A83     		strh	r2, [r3, #24]	@ movhi
1329:common/stm32f10x_tim.c **** }
 2812              		.loc 1 1329 0
 2813 0dfc 00BF     		nop
 2814 0dfe 1437     		adds	r7, r7, #20
 2815              		.cfi_def_cfa_offset 4
 2816 0e00 BD46     		mov	sp, r7
 2817              		.cfi_def_cfa_register 13
 2818              		@ sp needed
 2819 0e02 80BC     		pop	{r7}
 2820              		.cfi_restore 7
ARM GAS  /tmp/ccRayNMu.s 			page 75


 2821              		.cfi_def_cfa_offset 0
 2822 0e04 7047     		bx	lr
 2823              		.cfi_endproc
 2824              	.LFE92:
 2825              		.size	TIM_ForcedOC1Config, .-TIM_ForcedOC1Config
 2826              		.align	1
 2827              		.global	TIM_ForcedOC2Config
 2828              		.syntax unified
 2829              		.thumb
 2830              		.thumb_func
 2831              		.fpu softvfp
 2832              		.type	TIM_ForcedOC2Config, %function
 2833              	TIM_ForcedOC2Config:
 2834              	.LFB93:
1330:common/stm32f10x_tim.c **** 
1331:common/stm32f10x_tim.c **** /**
1332:common/stm32f10x_tim.c ****   * @brief  Forces the TIMx output 2 waveform to active or inactive level.
1333:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
1334:common/stm32f10x_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1335:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1336:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
1337:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
1338:common/stm32f10x_tim.c ****   * @retval None
1339:common/stm32f10x_tim.c ****   */
1340:common/stm32f10x_tim.c **** void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1341:common/stm32f10x_tim.c **** {
 2835              		.loc 1 1341 0
 2836              		.cfi_startproc
 2837              		@ args = 0, pretend = 0, frame = 16
 2838              		@ frame_needed = 1, uses_anonymous_args = 0
 2839              		@ link register save eliminated.
 2840 0e06 80B4     		push	{r7}
 2841              		.cfi_def_cfa_offset 4
 2842              		.cfi_offset 7, -4
 2843 0e08 85B0     		sub	sp, sp, #20
 2844              		.cfi_def_cfa_offset 24
 2845 0e0a 00AF     		add	r7, sp, #0
 2846              		.cfi_def_cfa_register 7
 2847 0e0c 7860     		str	r0, [r7, #4]
 2848 0e0e 0B46     		mov	r3, r1
 2849 0e10 7B80     		strh	r3, [r7, #2]	@ movhi
1342:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 2850              		.loc 1 1342 0
 2851 0e12 0023     		movs	r3, #0
 2852 0e14 FB81     		strh	r3, [r7, #14]	@ movhi
1343:common/stm32f10x_tim.c ****   /* Check the parameters */
1344:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1345:common/stm32f10x_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1346:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2853              		.loc 1 1346 0
 2854 0e16 7B68     		ldr	r3, [r7, #4]
 2855 0e18 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2856 0e1a FB81     		strh	r3, [r7, #14]	@ movhi
1347:common/stm32f10x_tim.c ****   /* Reset the OC2M Bits */
1348:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 2857              		.loc 1 1348 0
 2858 0e1c FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 76


 2859 0e1e 23F4E043 		bic	r3, r3, #28672
 2860 0e22 FB81     		strh	r3, [r7, #14]	@ movhi
1349:common/stm32f10x_tim.c ****   /* Configure The Forced output Mode */
1350:common/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 2861              		.loc 1 1350 0
 2862 0e24 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2863 0e26 1B02     		lsls	r3, r3, #8
 2864 0e28 9AB2     		uxth	r2, r3
 2865 0e2a FB89     		ldrh	r3, [r7, #14]	@ movhi
 2866 0e2c 1343     		orrs	r3, r3, r2
 2867 0e2e FB81     		strh	r3, [r7, #14]	@ movhi
1351:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1352:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2868              		.loc 1 1352 0
 2869 0e30 7B68     		ldr	r3, [r7, #4]
 2870 0e32 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2871 0e34 1A83     		strh	r2, [r3, #24]	@ movhi
1353:common/stm32f10x_tim.c **** }
 2872              		.loc 1 1353 0
 2873 0e36 00BF     		nop
 2874 0e38 1437     		adds	r7, r7, #20
 2875              		.cfi_def_cfa_offset 4
 2876 0e3a BD46     		mov	sp, r7
 2877              		.cfi_def_cfa_register 13
 2878              		@ sp needed
 2879 0e3c 80BC     		pop	{r7}
 2880              		.cfi_restore 7
 2881              		.cfi_def_cfa_offset 0
 2882 0e3e 7047     		bx	lr
 2883              		.cfi_endproc
 2884              	.LFE93:
 2885              		.size	TIM_ForcedOC2Config, .-TIM_ForcedOC2Config
 2886              		.align	1
 2887              		.global	TIM_ForcedOC3Config
 2888              		.syntax unified
 2889              		.thumb
 2890              		.thumb_func
 2891              		.fpu softvfp
 2892              		.type	TIM_ForcedOC3Config, %function
 2893              	TIM_ForcedOC3Config:
 2894              	.LFB94:
1354:common/stm32f10x_tim.c **** 
1355:common/stm32f10x_tim.c **** /**
1356:common/stm32f10x_tim.c ****   * @brief  Forces the TIMx output 3 waveform to active or inactive level.
1357:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1358:common/stm32f10x_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1359:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1360:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
1361:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
1362:common/stm32f10x_tim.c ****   * @retval None
1363:common/stm32f10x_tim.c ****   */
1364:common/stm32f10x_tim.c **** void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1365:common/stm32f10x_tim.c **** {
 2895              		.loc 1 1365 0
 2896              		.cfi_startproc
 2897              		@ args = 0, pretend = 0, frame = 16
 2898              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccRayNMu.s 			page 77


 2899              		@ link register save eliminated.
 2900 0e40 80B4     		push	{r7}
 2901              		.cfi_def_cfa_offset 4
 2902              		.cfi_offset 7, -4
 2903 0e42 85B0     		sub	sp, sp, #20
 2904              		.cfi_def_cfa_offset 24
 2905 0e44 00AF     		add	r7, sp, #0
 2906              		.cfi_def_cfa_register 7
 2907 0e46 7860     		str	r0, [r7, #4]
 2908 0e48 0B46     		mov	r3, r1
 2909 0e4a 7B80     		strh	r3, [r7, #2]	@ movhi
1366:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 2910              		.loc 1 1366 0
 2911 0e4c 0023     		movs	r3, #0
 2912 0e4e FB81     		strh	r3, [r7, #14]	@ movhi
1367:common/stm32f10x_tim.c ****   /* Check the parameters */
1368:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1369:common/stm32f10x_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1370:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2913              		.loc 1 1370 0
 2914 0e50 7B68     		ldr	r3, [r7, #4]
 2915 0e52 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2916 0e54 FB81     		strh	r3, [r7, #14]	@ movhi
1371:common/stm32f10x_tim.c ****   /* Reset the OC1M Bits */
1372:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 2917              		.loc 1 1372 0
 2918 0e56 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2919 0e58 23F07003 		bic	r3, r3, #112
 2920 0e5c FB81     		strh	r3, [r7, #14]	@ movhi
1373:common/stm32f10x_tim.c ****   /* Configure The Forced output Mode */
1374:common/stm32f10x_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
 2921              		.loc 1 1374 0
 2922 0e5e FA89     		ldrh	r2, [r7, #14]	@ movhi
 2923 0e60 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2924 0e62 1343     		orrs	r3, r3, r2
 2925 0e64 FB81     		strh	r3, [r7, #14]	@ movhi
1375:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1376:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2926              		.loc 1 1376 0
 2927 0e66 7B68     		ldr	r3, [r7, #4]
 2928 0e68 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2929 0e6a 9A83     		strh	r2, [r3, #28]	@ movhi
1377:common/stm32f10x_tim.c **** }
 2930              		.loc 1 1377 0
 2931 0e6c 00BF     		nop
 2932 0e6e 1437     		adds	r7, r7, #20
 2933              		.cfi_def_cfa_offset 4
 2934 0e70 BD46     		mov	sp, r7
 2935              		.cfi_def_cfa_register 13
 2936              		@ sp needed
 2937 0e72 80BC     		pop	{r7}
 2938              		.cfi_restore 7
 2939              		.cfi_def_cfa_offset 0
 2940 0e74 7047     		bx	lr
 2941              		.cfi_endproc
 2942              	.LFE94:
 2943              		.size	TIM_ForcedOC3Config, .-TIM_ForcedOC3Config
ARM GAS  /tmp/ccRayNMu.s 			page 78


 2944              		.align	1
 2945              		.global	TIM_ForcedOC4Config
 2946              		.syntax unified
 2947              		.thumb
 2948              		.thumb_func
 2949              		.fpu softvfp
 2950              		.type	TIM_ForcedOC4Config, %function
 2951              	TIM_ForcedOC4Config:
 2952              	.LFB95:
1378:common/stm32f10x_tim.c **** 
1379:common/stm32f10x_tim.c **** /**
1380:common/stm32f10x_tim.c ****   * @brief  Forces the TIMx output 4 waveform to active or inactive level.
1381:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1382:common/stm32f10x_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1383:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1384:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
1385:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
1386:common/stm32f10x_tim.c ****   * @retval None
1387:common/stm32f10x_tim.c ****   */
1388:common/stm32f10x_tim.c **** void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1389:common/stm32f10x_tim.c **** {
 2953              		.loc 1 1389 0
 2954              		.cfi_startproc
 2955              		@ args = 0, pretend = 0, frame = 16
 2956              		@ frame_needed = 1, uses_anonymous_args = 0
 2957              		@ link register save eliminated.
 2958 0e76 80B4     		push	{r7}
 2959              		.cfi_def_cfa_offset 4
 2960              		.cfi_offset 7, -4
 2961 0e78 85B0     		sub	sp, sp, #20
 2962              		.cfi_def_cfa_offset 24
 2963 0e7a 00AF     		add	r7, sp, #0
 2964              		.cfi_def_cfa_register 7
 2965 0e7c 7860     		str	r0, [r7, #4]
 2966 0e7e 0B46     		mov	r3, r1
 2967 0e80 7B80     		strh	r3, [r7, #2]	@ movhi
1390:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 2968              		.loc 1 1390 0
 2969 0e82 0023     		movs	r3, #0
 2970 0e84 FB81     		strh	r3, [r7, #14]	@ movhi
1391:common/stm32f10x_tim.c ****   /* Check the parameters */
1392:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1393:common/stm32f10x_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1394:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2971              		.loc 1 1394 0
 2972 0e86 7B68     		ldr	r3, [r7, #4]
 2973 0e88 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2974 0e8a FB81     		strh	r3, [r7, #14]	@ movhi
1395:common/stm32f10x_tim.c ****   /* Reset the OC2M Bits */
1396:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 2975              		.loc 1 1396 0
 2976 0e8c FB89     		ldrh	r3, [r7, #14]	@ movhi
 2977 0e8e 23F4E043 		bic	r3, r3, #28672
 2978 0e92 FB81     		strh	r3, [r7, #14]	@ movhi
1397:common/stm32f10x_tim.c ****   /* Configure The Forced output Mode */
1398:common/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 2979              		.loc 1 1398 0
ARM GAS  /tmp/ccRayNMu.s 			page 79


 2980 0e94 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2981 0e96 1B02     		lsls	r3, r3, #8
 2982 0e98 9AB2     		uxth	r2, r3
 2983 0e9a FB89     		ldrh	r3, [r7, #14]	@ movhi
 2984 0e9c 1343     		orrs	r3, r3, r2
 2985 0e9e FB81     		strh	r3, [r7, #14]	@ movhi
1399:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1400:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2986              		.loc 1 1400 0
 2987 0ea0 7B68     		ldr	r3, [r7, #4]
 2988 0ea2 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2989 0ea4 9A83     		strh	r2, [r3, #28]	@ movhi
1401:common/stm32f10x_tim.c **** }
 2990              		.loc 1 1401 0
 2991 0ea6 00BF     		nop
 2992 0ea8 1437     		adds	r7, r7, #20
 2993              		.cfi_def_cfa_offset 4
 2994 0eaa BD46     		mov	sp, r7
 2995              		.cfi_def_cfa_register 13
 2996              		@ sp needed
 2997 0eac 80BC     		pop	{r7}
 2998              		.cfi_restore 7
 2999              		.cfi_def_cfa_offset 0
 3000 0eae 7047     		bx	lr
 3001              		.cfi_endproc
 3002              	.LFE95:
 3003              		.size	TIM_ForcedOC4Config, .-TIM_ForcedOC4Config
 3004              		.align	1
 3005              		.global	TIM_ARRPreloadConfig
 3006              		.syntax unified
 3007              		.thumb
 3008              		.thumb_func
 3009              		.fpu softvfp
 3010              		.type	TIM_ARRPreloadConfig, %function
 3011              	TIM_ARRPreloadConfig:
 3012              	.LFB96:
1402:common/stm32f10x_tim.c **** 
1403:common/stm32f10x_tim.c **** /**
1404:common/stm32f10x_tim.c ****   * @brief  Enables or disables TIMx peripheral Preload register on ARR.
1405:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 to select the TIM peripheral.
1406:common/stm32f10x_tim.c ****   * @param  NewState: new state of the TIMx peripheral Preload register
1407:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
1408:common/stm32f10x_tim.c ****   * @retval None
1409:common/stm32f10x_tim.c ****   */
1410:common/stm32f10x_tim.c **** void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
1411:common/stm32f10x_tim.c **** {
 3013              		.loc 1 1411 0
 3014              		.cfi_startproc
 3015              		@ args = 0, pretend = 0, frame = 8
 3016              		@ frame_needed = 1, uses_anonymous_args = 0
 3017              		@ link register save eliminated.
 3018 0eb0 80B4     		push	{r7}
 3019              		.cfi_def_cfa_offset 4
 3020              		.cfi_offset 7, -4
 3021 0eb2 83B0     		sub	sp, sp, #12
 3022              		.cfi_def_cfa_offset 16
 3023 0eb4 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccRayNMu.s 			page 80


 3024              		.cfi_def_cfa_register 7
 3025 0eb6 7860     		str	r0, [r7, #4]
 3026 0eb8 0B46     		mov	r3, r1
 3027 0eba FB70     		strb	r3, [r7, #3]
1412:common/stm32f10x_tim.c ****   /* Check the parameters */
1413:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
1414:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1415:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 3028              		.loc 1 1415 0
 3029 0ebc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3030 0ebe 002B     		cmp	r3, #0
 3031 0ec0 08D0     		beq	.L104
1416:common/stm32f10x_tim.c ****   {
1417:common/stm32f10x_tim.c ****     /* Set the ARR Preload Bit */
1418:common/stm32f10x_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 3032              		.loc 1 1418 0
 3033 0ec2 7B68     		ldr	r3, [r7, #4]
 3034 0ec4 1B88     		ldrh	r3, [r3]	@ movhi
 3035 0ec6 9BB2     		uxth	r3, r3
 3036 0ec8 43F08003 		orr	r3, r3, #128
 3037 0ecc 9AB2     		uxth	r2, r3
 3038 0ece 7B68     		ldr	r3, [r7, #4]
 3039 0ed0 1A80     		strh	r2, [r3]	@ movhi
1419:common/stm32f10x_tim.c ****   }
1420:common/stm32f10x_tim.c ****   else
1421:common/stm32f10x_tim.c ****   {
1422:common/stm32f10x_tim.c ****     /* Reset the ARR Preload Bit */
1423:common/stm32f10x_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
1424:common/stm32f10x_tim.c ****   }
1425:common/stm32f10x_tim.c **** }
 3040              		.loc 1 1425 0
 3041 0ed2 07E0     		b	.L106
 3042              	.L104:
1423:common/stm32f10x_tim.c ****   }
 3043              		.loc 1 1423 0
 3044 0ed4 7B68     		ldr	r3, [r7, #4]
 3045 0ed6 1B88     		ldrh	r3, [r3]	@ movhi
 3046 0ed8 9BB2     		uxth	r3, r3
 3047 0eda 23F08003 		bic	r3, r3, #128
 3048 0ede 9AB2     		uxth	r2, r3
 3049 0ee0 7B68     		ldr	r3, [r7, #4]
 3050 0ee2 1A80     		strh	r2, [r3]	@ movhi
 3051              	.L106:
 3052              		.loc 1 1425 0
 3053 0ee4 00BF     		nop
 3054 0ee6 0C37     		adds	r7, r7, #12
 3055              		.cfi_def_cfa_offset 4
 3056 0ee8 BD46     		mov	sp, r7
 3057              		.cfi_def_cfa_register 13
 3058              		@ sp needed
 3059 0eea 80BC     		pop	{r7}
 3060              		.cfi_restore 7
 3061              		.cfi_def_cfa_offset 0
 3062 0eec 7047     		bx	lr
 3063              		.cfi_endproc
 3064              	.LFE96:
 3065              		.size	TIM_ARRPreloadConfig, .-TIM_ARRPreloadConfig
ARM GAS  /tmp/ccRayNMu.s 			page 81


 3066              		.align	1
 3067              		.global	TIM_SelectCOM
 3068              		.syntax unified
 3069              		.thumb
 3070              		.thumb_func
 3071              		.fpu softvfp
 3072              		.type	TIM_SelectCOM, %function
 3073              	TIM_SelectCOM:
 3074              	.LFB97:
1426:common/stm32f10x_tim.c **** 
1427:common/stm32f10x_tim.c **** /**
1428:common/stm32f10x_tim.c ****   * @brief  Selects the TIM peripheral Commutation event.
1429:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 8, 15, 16 or 17 to select the TIMx peripheral
1430:common/stm32f10x_tim.c ****   * @param  NewState: new state of the Commutation event.
1431:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
1432:common/stm32f10x_tim.c ****   * @retval None
1433:common/stm32f10x_tim.c ****   */
1434:common/stm32f10x_tim.c **** void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
1435:common/stm32f10x_tim.c **** {
 3075              		.loc 1 1435 0
 3076              		.cfi_startproc
 3077              		@ args = 0, pretend = 0, frame = 8
 3078              		@ frame_needed = 1, uses_anonymous_args = 0
 3079              		@ link register save eliminated.
 3080 0eee 80B4     		push	{r7}
 3081              		.cfi_def_cfa_offset 4
 3082              		.cfi_offset 7, -4
 3083 0ef0 83B0     		sub	sp, sp, #12
 3084              		.cfi_def_cfa_offset 16
 3085 0ef2 00AF     		add	r7, sp, #0
 3086              		.cfi_def_cfa_register 7
 3087 0ef4 7860     		str	r0, [r7, #4]
 3088 0ef6 0B46     		mov	r3, r1
 3089 0ef8 FB70     		strb	r3, [r7, #3]
1436:common/stm32f10x_tim.c ****   /* Check the parameters */
1437:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1438:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1439:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 3090              		.loc 1 1439 0
 3091 0efa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3092 0efc 002B     		cmp	r3, #0
 3093 0efe 08D0     		beq	.L108
1440:common/stm32f10x_tim.c ****   {
1441:common/stm32f10x_tim.c ****     /* Set the COM Bit */
1442:common/stm32f10x_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
 3094              		.loc 1 1442 0
 3095 0f00 7B68     		ldr	r3, [r7, #4]
 3096 0f02 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3097 0f04 9BB2     		uxth	r3, r3
 3098 0f06 43F00403 		orr	r3, r3, #4
 3099 0f0a 9AB2     		uxth	r2, r3
 3100 0f0c 7B68     		ldr	r3, [r7, #4]
 3101 0f0e 9A80     		strh	r2, [r3, #4]	@ movhi
1443:common/stm32f10x_tim.c ****   }
1444:common/stm32f10x_tim.c ****   else
1445:common/stm32f10x_tim.c ****   {
1446:common/stm32f10x_tim.c ****     /* Reset the COM Bit */
ARM GAS  /tmp/ccRayNMu.s 			page 82


1447:common/stm32f10x_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
1448:common/stm32f10x_tim.c ****   }
1449:common/stm32f10x_tim.c **** }
 3102              		.loc 1 1449 0
 3103 0f10 07E0     		b	.L110
 3104              	.L108:
1447:common/stm32f10x_tim.c ****   }
 3105              		.loc 1 1447 0
 3106 0f12 7B68     		ldr	r3, [r7, #4]
 3107 0f14 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3108 0f16 9BB2     		uxth	r3, r3
 3109 0f18 23F00403 		bic	r3, r3, #4
 3110 0f1c 9AB2     		uxth	r2, r3
 3111 0f1e 7B68     		ldr	r3, [r7, #4]
 3112 0f20 9A80     		strh	r2, [r3, #4]	@ movhi
 3113              	.L110:
 3114              		.loc 1 1449 0
 3115 0f22 00BF     		nop
 3116 0f24 0C37     		adds	r7, r7, #12
 3117              		.cfi_def_cfa_offset 4
 3118 0f26 BD46     		mov	sp, r7
 3119              		.cfi_def_cfa_register 13
 3120              		@ sp needed
 3121 0f28 80BC     		pop	{r7}
 3122              		.cfi_restore 7
 3123              		.cfi_def_cfa_offset 0
 3124 0f2a 7047     		bx	lr
 3125              		.cfi_endproc
 3126              	.LFE97:
 3127              		.size	TIM_SelectCOM, .-TIM_SelectCOM
 3128              		.align	1
 3129              		.global	TIM_SelectCCDMA
 3130              		.syntax unified
 3131              		.thumb
 3132              		.thumb_func
 3133              		.fpu softvfp
 3134              		.type	TIM_SelectCCDMA, %function
 3135              	TIM_SelectCCDMA:
 3136              	.LFB98:
1450:common/stm32f10x_tim.c **** 
1451:common/stm32f10x_tim.c **** /**
1452:common/stm32f10x_tim.c ****   * @brief  Selects the TIMx peripheral Capture Compare DMA source.
1453:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 15, 16 or 17 to select 
1454:common/stm32f10x_tim.c ****   *         the TIM peripheral.
1455:common/stm32f10x_tim.c ****   * @param  NewState: new state of the Capture Compare DMA source
1456:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
1457:common/stm32f10x_tim.c ****   * @retval None
1458:common/stm32f10x_tim.c ****   */
1459:common/stm32f10x_tim.c **** void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
1460:common/stm32f10x_tim.c **** {
 3137              		.loc 1 1460 0
 3138              		.cfi_startproc
 3139              		@ args = 0, pretend = 0, frame = 8
 3140              		@ frame_needed = 1, uses_anonymous_args = 0
 3141              		@ link register save eliminated.
 3142 0f2c 80B4     		push	{r7}
 3143              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRayNMu.s 			page 83


 3144              		.cfi_offset 7, -4
 3145 0f2e 83B0     		sub	sp, sp, #12
 3146              		.cfi_def_cfa_offset 16
 3147 0f30 00AF     		add	r7, sp, #0
 3148              		.cfi_def_cfa_register 7
 3149 0f32 7860     		str	r0, [r7, #4]
 3150 0f34 0B46     		mov	r3, r1
 3151 0f36 FB70     		strb	r3, [r7, #3]
1461:common/stm32f10x_tim.c ****   /* Check the parameters */
1462:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1463:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1464:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 3152              		.loc 1 1464 0
 3153 0f38 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3154 0f3a 002B     		cmp	r3, #0
 3155 0f3c 08D0     		beq	.L112
1465:common/stm32f10x_tim.c ****   {
1466:common/stm32f10x_tim.c ****     /* Set the CCDS Bit */
1467:common/stm32f10x_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
 3156              		.loc 1 1467 0
 3157 0f3e 7B68     		ldr	r3, [r7, #4]
 3158 0f40 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3159 0f42 9BB2     		uxth	r3, r3
 3160 0f44 43F00803 		orr	r3, r3, #8
 3161 0f48 9AB2     		uxth	r2, r3
 3162 0f4a 7B68     		ldr	r3, [r7, #4]
 3163 0f4c 9A80     		strh	r2, [r3, #4]	@ movhi
1468:common/stm32f10x_tim.c ****   }
1469:common/stm32f10x_tim.c ****   else
1470:common/stm32f10x_tim.c ****   {
1471:common/stm32f10x_tim.c ****     /* Reset the CCDS Bit */
1472:common/stm32f10x_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
1473:common/stm32f10x_tim.c ****   }
1474:common/stm32f10x_tim.c **** }
 3164              		.loc 1 1474 0
 3165 0f4e 07E0     		b	.L114
 3166              	.L112:
1472:common/stm32f10x_tim.c ****   }
 3167              		.loc 1 1472 0
 3168 0f50 7B68     		ldr	r3, [r7, #4]
 3169 0f52 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3170 0f54 9BB2     		uxth	r3, r3
 3171 0f56 23F00803 		bic	r3, r3, #8
 3172 0f5a 9AB2     		uxth	r2, r3
 3173 0f5c 7B68     		ldr	r3, [r7, #4]
 3174 0f5e 9A80     		strh	r2, [r3, #4]	@ movhi
 3175              	.L114:
 3176              		.loc 1 1474 0
 3177 0f60 00BF     		nop
 3178 0f62 0C37     		adds	r7, r7, #12
 3179              		.cfi_def_cfa_offset 4
 3180 0f64 BD46     		mov	sp, r7
 3181              		.cfi_def_cfa_register 13
 3182              		@ sp needed
 3183 0f66 80BC     		pop	{r7}
 3184              		.cfi_restore 7
 3185              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccRayNMu.s 			page 84


 3186 0f68 7047     		bx	lr
 3187              		.cfi_endproc
 3188              	.LFE98:
 3189              		.size	TIM_SelectCCDMA, .-TIM_SelectCCDMA
 3190              		.align	1
 3191              		.global	TIM_CCPreloadControl
 3192              		.syntax unified
 3193              		.thumb
 3194              		.thumb_func
 3195              		.fpu softvfp
 3196              		.type	TIM_CCPreloadControl, %function
 3197              	TIM_CCPreloadControl:
 3198              	.LFB99:
1475:common/stm32f10x_tim.c **** 
1476:common/stm32f10x_tim.c **** /**
1477:common/stm32f10x_tim.c ****   * @brief  Sets or Resets the TIM peripheral Capture Compare Preload Control bit.
1478:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be   1, 2, 3, 4, 5, 8 or 15 
1479:common/stm32f10x_tim.c ****   *         to select the TIMx peripheral
1480:common/stm32f10x_tim.c ****   * @param  NewState: new state of the Capture Compare Preload Control bit
1481:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
1482:common/stm32f10x_tim.c ****   * @retval None
1483:common/stm32f10x_tim.c ****   */
1484:common/stm32f10x_tim.c **** void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
1485:common/stm32f10x_tim.c **** { 
 3199              		.loc 1 1485 0
 3200              		.cfi_startproc
 3201              		@ args = 0, pretend = 0, frame = 8
 3202              		@ frame_needed = 1, uses_anonymous_args = 0
 3203              		@ link register save eliminated.
 3204 0f6a 80B4     		push	{r7}
 3205              		.cfi_def_cfa_offset 4
 3206              		.cfi_offset 7, -4
 3207 0f6c 83B0     		sub	sp, sp, #12
 3208              		.cfi_def_cfa_offset 16
 3209 0f6e 00AF     		add	r7, sp, #0
 3210              		.cfi_def_cfa_register 7
 3211 0f70 7860     		str	r0, [r7, #4]
 3212 0f72 0B46     		mov	r3, r1
 3213 0f74 FB70     		strb	r3, [r7, #3]
1486:common/stm32f10x_tim.c ****   /* Check the parameters */
1487:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
1488:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1489:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 3214              		.loc 1 1489 0
 3215 0f76 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3216 0f78 002B     		cmp	r3, #0
 3217 0f7a 08D0     		beq	.L116
1490:common/stm32f10x_tim.c ****   {
1491:common/stm32f10x_tim.c ****     /* Set the CCPC Bit */
1492:common/stm32f10x_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
 3218              		.loc 1 1492 0
 3219 0f7c 7B68     		ldr	r3, [r7, #4]
 3220 0f7e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3221 0f80 9BB2     		uxth	r3, r3
 3222 0f82 43F00103 		orr	r3, r3, #1
 3223 0f86 9AB2     		uxth	r2, r3
 3224 0f88 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRayNMu.s 			page 85


 3225 0f8a 9A80     		strh	r2, [r3, #4]	@ movhi
1493:common/stm32f10x_tim.c ****   }
1494:common/stm32f10x_tim.c ****   else
1495:common/stm32f10x_tim.c ****   {
1496:common/stm32f10x_tim.c ****     /* Reset the CCPC Bit */
1497:common/stm32f10x_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
1498:common/stm32f10x_tim.c ****   }
1499:common/stm32f10x_tim.c **** }
 3226              		.loc 1 1499 0
 3227 0f8c 07E0     		b	.L118
 3228              	.L116:
1497:common/stm32f10x_tim.c ****   }
 3229              		.loc 1 1497 0
 3230 0f8e 7B68     		ldr	r3, [r7, #4]
 3231 0f90 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3232 0f92 9BB2     		uxth	r3, r3
 3233 0f94 23F00103 		bic	r3, r3, #1
 3234 0f98 9AB2     		uxth	r2, r3
 3235 0f9a 7B68     		ldr	r3, [r7, #4]
 3236 0f9c 9A80     		strh	r2, [r3, #4]	@ movhi
 3237              	.L118:
 3238              		.loc 1 1499 0
 3239 0f9e 00BF     		nop
 3240 0fa0 0C37     		adds	r7, r7, #12
 3241              		.cfi_def_cfa_offset 4
 3242 0fa2 BD46     		mov	sp, r7
 3243              		.cfi_def_cfa_register 13
 3244              		@ sp needed
 3245 0fa4 80BC     		pop	{r7}
 3246              		.cfi_restore 7
 3247              		.cfi_def_cfa_offset 0
 3248 0fa6 7047     		bx	lr
 3249              		.cfi_endproc
 3250              	.LFE99:
 3251              		.size	TIM_CCPreloadControl, .-TIM_CCPreloadControl
 3252              		.align	1
 3253              		.global	TIM_OC1PreloadConfig
 3254              		.syntax unified
 3255              		.thumb
 3256              		.thumb_func
 3257              		.fpu softvfp
 3258              		.type	TIM_OC1PreloadConfig, %function
 3259              	TIM_OC1PreloadConfig:
 3260              	.LFB100:
1500:common/stm32f10x_tim.c **** 
1501:common/stm32f10x_tim.c **** /**
1502:common/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR1.
1503:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
1504:common/stm32f10x_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1505:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1506:common/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Enable
1507:common/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Disable
1508:common/stm32f10x_tim.c ****   * @retval None
1509:common/stm32f10x_tim.c ****   */
1510:common/stm32f10x_tim.c **** void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1511:common/stm32f10x_tim.c **** {
 3261              		.loc 1 1511 0
ARM GAS  /tmp/ccRayNMu.s 			page 86


 3262              		.cfi_startproc
 3263              		@ args = 0, pretend = 0, frame = 16
 3264              		@ frame_needed = 1, uses_anonymous_args = 0
 3265              		@ link register save eliminated.
 3266 0fa8 80B4     		push	{r7}
 3267              		.cfi_def_cfa_offset 4
 3268              		.cfi_offset 7, -4
 3269 0faa 85B0     		sub	sp, sp, #20
 3270              		.cfi_def_cfa_offset 24
 3271 0fac 00AF     		add	r7, sp, #0
 3272              		.cfi_def_cfa_register 7
 3273 0fae 7860     		str	r0, [r7, #4]
 3274 0fb0 0B46     		mov	r3, r1
 3275 0fb2 7B80     		strh	r3, [r7, #2]	@ movhi
1512:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3276              		.loc 1 1512 0
 3277 0fb4 0023     		movs	r3, #0
 3278 0fb6 FB81     		strh	r3, [r7, #14]	@ movhi
1513:common/stm32f10x_tim.c ****   /* Check the parameters */
1514:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1515:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1516:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3279              		.loc 1 1516 0
 3280 0fb8 7B68     		ldr	r3, [r7, #4]
 3281 0fba 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3282 0fbc FB81     		strh	r3, [r7, #14]	@ movhi
1517:common/stm32f10x_tim.c ****   /* Reset the OC1PE Bit */
1518:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 3283              		.loc 1 1518 0
 3284 0fbe FB89     		ldrh	r3, [r7, #14]	@ movhi
 3285 0fc0 23F00803 		bic	r3, r3, #8
 3286 0fc4 FB81     		strh	r3, [r7, #14]	@ movhi
1519:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1520:common/stm32f10x_tim.c ****   tmpccmr1 |= TIM_OCPreload;
 3287              		.loc 1 1520 0
 3288 0fc6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3289 0fc8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3290 0fca 1343     		orrs	r3, r3, r2
 3291 0fcc FB81     		strh	r3, [r7, #14]	@ movhi
1521:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1522:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3292              		.loc 1 1522 0
 3293 0fce 7B68     		ldr	r3, [r7, #4]
 3294 0fd0 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3295 0fd2 1A83     		strh	r2, [r3, #24]	@ movhi
1523:common/stm32f10x_tim.c **** }
 3296              		.loc 1 1523 0
 3297 0fd4 00BF     		nop
 3298 0fd6 1437     		adds	r7, r7, #20
 3299              		.cfi_def_cfa_offset 4
 3300 0fd8 BD46     		mov	sp, r7
 3301              		.cfi_def_cfa_register 13
 3302              		@ sp needed
 3303 0fda 80BC     		pop	{r7}
 3304              		.cfi_restore 7
 3305              		.cfi_def_cfa_offset 0
 3306 0fdc 7047     		bx	lr
ARM GAS  /tmp/ccRayNMu.s 			page 87


 3307              		.cfi_endproc
 3308              	.LFE100:
 3309              		.size	TIM_OC1PreloadConfig, .-TIM_OC1PreloadConfig
 3310              		.align	1
 3311              		.global	TIM_OC2PreloadConfig
 3312              		.syntax unified
 3313              		.thumb
 3314              		.thumb_func
 3315              		.fpu softvfp
 3316              		.type	TIM_OC2PreloadConfig, %function
 3317              	TIM_OC2PreloadConfig:
 3318              	.LFB101:
1524:common/stm32f10x_tim.c **** 
1525:common/stm32f10x_tim.c **** /**
1526:common/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR2.
1527:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select 
1528:common/stm32f10x_tim.c ****   *         the TIM peripheral.
1529:common/stm32f10x_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1530:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1531:common/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Enable
1532:common/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Disable
1533:common/stm32f10x_tim.c ****   * @retval None
1534:common/stm32f10x_tim.c ****   */
1535:common/stm32f10x_tim.c **** void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1536:common/stm32f10x_tim.c **** {
 3319              		.loc 1 1536 0
 3320              		.cfi_startproc
 3321              		@ args = 0, pretend = 0, frame = 16
 3322              		@ frame_needed = 1, uses_anonymous_args = 0
 3323              		@ link register save eliminated.
 3324 0fde 80B4     		push	{r7}
 3325              		.cfi_def_cfa_offset 4
 3326              		.cfi_offset 7, -4
 3327 0fe0 85B0     		sub	sp, sp, #20
 3328              		.cfi_def_cfa_offset 24
 3329 0fe2 00AF     		add	r7, sp, #0
 3330              		.cfi_def_cfa_register 7
 3331 0fe4 7860     		str	r0, [r7, #4]
 3332 0fe6 0B46     		mov	r3, r1
 3333 0fe8 7B80     		strh	r3, [r7, #2]	@ movhi
1537:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3334              		.loc 1 1537 0
 3335 0fea 0023     		movs	r3, #0
 3336 0fec FB81     		strh	r3, [r7, #14]	@ movhi
1538:common/stm32f10x_tim.c ****   /* Check the parameters */
1539:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1540:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1541:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3337              		.loc 1 1541 0
 3338 0fee 7B68     		ldr	r3, [r7, #4]
 3339 0ff0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3340 0ff2 FB81     		strh	r3, [r7, #14]	@ movhi
1542:common/stm32f10x_tim.c ****   /* Reset the OC2PE Bit */
1543:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 3341              		.loc 1 1543 0
 3342 0ff4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3343 0ff6 23F40063 		bic	r3, r3, #2048
ARM GAS  /tmp/ccRayNMu.s 			page 88


 3344 0ffa FB81     		strh	r3, [r7, #14]	@ movhi
1544:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1545:common/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 3345              		.loc 1 1545 0
 3346 0ffc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3347 0ffe 1B02     		lsls	r3, r3, #8
 3348 1000 9AB2     		uxth	r2, r3
 3349 1002 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3350 1004 1343     		orrs	r3, r3, r2
 3351 1006 FB81     		strh	r3, [r7, #14]	@ movhi
1546:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1547:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3352              		.loc 1 1547 0
 3353 1008 7B68     		ldr	r3, [r7, #4]
 3354 100a FA89     		ldrh	r2, [r7, #14]	@ movhi
 3355 100c 1A83     		strh	r2, [r3, #24]	@ movhi
1548:common/stm32f10x_tim.c **** }
 3356              		.loc 1 1548 0
 3357 100e 00BF     		nop
 3358 1010 1437     		adds	r7, r7, #20
 3359              		.cfi_def_cfa_offset 4
 3360 1012 BD46     		mov	sp, r7
 3361              		.cfi_def_cfa_register 13
 3362              		@ sp needed
 3363 1014 80BC     		pop	{r7}
 3364              		.cfi_restore 7
 3365              		.cfi_def_cfa_offset 0
 3366 1016 7047     		bx	lr
 3367              		.cfi_endproc
 3368              	.LFE101:
 3369              		.size	TIM_OC2PreloadConfig, .-TIM_OC2PreloadConfig
 3370              		.align	1
 3371              		.global	TIM_OC3PreloadConfig
 3372              		.syntax unified
 3373              		.thumb
 3374              		.thumb_func
 3375              		.fpu softvfp
 3376              		.type	TIM_OC3PreloadConfig, %function
 3377              	TIM_OC3PreloadConfig:
 3378              	.LFB102:
1549:common/stm32f10x_tim.c **** 
1550:common/stm32f10x_tim.c **** /**
1551:common/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR3.
1552:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1553:common/stm32f10x_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1554:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1555:common/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Enable
1556:common/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Disable
1557:common/stm32f10x_tim.c ****   * @retval None
1558:common/stm32f10x_tim.c ****   */
1559:common/stm32f10x_tim.c **** void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1560:common/stm32f10x_tim.c **** {
 3379              		.loc 1 1560 0
 3380              		.cfi_startproc
 3381              		@ args = 0, pretend = 0, frame = 16
 3382              		@ frame_needed = 1, uses_anonymous_args = 0
 3383              		@ link register save eliminated.
ARM GAS  /tmp/ccRayNMu.s 			page 89


 3384 1018 80B4     		push	{r7}
 3385              		.cfi_def_cfa_offset 4
 3386              		.cfi_offset 7, -4
 3387 101a 85B0     		sub	sp, sp, #20
 3388              		.cfi_def_cfa_offset 24
 3389 101c 00AF     		add	r7, sp, #0
 3390              		.cfi_def_cfa_register 7
 3391 101e 7860     		str	r0, [r7, #4]
 3392 1020 0B46     		mov	r3, r1
 3393 1022 7B80     		strh	r3, [r7, #2]	@ movhi
1561:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3394              		.loc 1 1561 0
 3395 1024 0023     		movs	r3, #0
 3396 1026 FB81     		strh	r3, [r7, #14]	@ movhi
1562:common/stm32f10x_tim.c ****   /* Check the parameters */
1563:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1564:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1565:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3397              		.loc 1 1565 0
 3398 1028 7B68     		ldr	r3, [r7, #4]
 3399 102a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3400 102c FB81     		strh	r3, [r7, #14]	@ movhi
1566:common/stm32f10x_tim.c ****   /* Reset the OC3PE Bit */
1567:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 3401              		.loc 1 1567 0
 3402 102e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3403 1030 23F00803 		bic	r3, r3, #8
 3404 1034 FB81     		strh	r3, [r7, #14]	@ movhi
1568:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1569:common/stm32f10x_tim.c ****   tmpccmr2 |= TIM_OCPreload;
 3405              		.loc 1 1569 0
 3406 1036 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3407 1038 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3408 103a 1343     		orrs	r3, r3, r2
 3409 103c FB81     		strh	r3, [r7, #14]	@ movhi
1570:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1571:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3410              		.loc 1 1571 0
 3411 103e 7B68     		ldr	r3, [r7, #4]
 3412 1040 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3413 1042 9A83     		strh	r2, [r3, #28]	@ movhi
1572:common/stm32f10x_tim.c **** }
 3414              		.loc 1 1572 0
 3415 1044 00BF     		nop
 3416 1046 1437     		adds	r7, r7, #20
 3417              		.cfi_def_cfa_offset 4
 3418 1048 BD46     		mov	sp, r7
 3419              		.cfi_def_cfa_register 13
 3420              		@ sp needed
 3421 104a 80BC     		pop	{r7}
 3422              		.cfi_restore 7
 3423              		.cfi_def_cfa_offset 0
 3424 104c 7047     		bx	lr
 3425              		.cfi_endproc
 3426              	.LFE102:
 3427              		.size	TIM_OC3PreloadConfig, .-TIM_OC3PreloadConfig
 3428              		.align	1
ARM GAS  /tmp/ccRayNMu.s 			page 90


 3429              		.global	TIM_OC4PreloadConfig
 3430              		.syntax unified
 3431              		.thumb
 3432              		.thumb_func
 3433              		.fpu softvfp
 3434              		.type	TIM_OC4PreloadConfig, %function
 3435              	TIM_OC4PreloadConfig:
 3436              	.LFB103:
1573:common/stm32f10x_tim.c **** 
1574:common/stm32f10x_tim.c **** /**
1575:common/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR4.
1576:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1577:common/stm32f10x_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1578:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1579:common/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Enable
1580:common/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Disable
1581:common/stm32f10x_tim.c ****   * @retval None
1582:common/stm32f10x_tim.c ****   */
1583:common/stm32f10x_tim.c **** void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1584:common/stm32f10x_tim.c **** {
 3437              		.loc 1 1584 0
 3438              		.cfi_startproc
 3439              		@ args = 0, pretend = 0, frame = 16
 3440              		@ frame_needed = 1, uses_anonymous_args = 0
 3441              		@ link register save eliminated.
 3442 104e 80B4     		push	{r7}
 3443              		.cfi_def_cfa_offset 4
 3444              		.cfi_offset 7, -4
 3445 1050 85B0     		sub	sp, sp, #20
 3446              		.cfi_def_cfa_offset 24
 3447 1052 00AF     		add	r7, sp, #0
 3448              		.cfi_def_cfa_register 7
 3449 1054 7860     		str	r0, [r7, #4]
 3450 1056 0B46     		mov	r3, r1
 3451 1058 7B80     		strh	r3, [r7, #2]	@ movhi
1585:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3452              		.loc 1 1585 0
 3453 105a 0023     		movs	r3, #0
 3454 105c FB81     		strh	r3, [r7, #14]	@ movhi
1586:common/stm32f10x_tim.c ****   /* Check the parameters */
1587:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1588:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1589:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3455              		.loc 1 1589 0
 3456 105e 7B68     		ldr	r3, [r7, #4]
 3457 1060 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3458 1062 FB81     		strh	r3, [r7, #14]	@ movhi
1590:common/stm32f10x_tim.c ****   /* Reset the OC4PE Bit */
1591:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 3459              		.loc 1 1591 0
 3460 1064 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3461 1066 23F40063 		bic	r3, r3, #2048
 3462 106a FB81     		strh	r3, [r7, #14]	@ movhi
1592:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1593:common/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 3463              		.loc 1 1593 0
 3464 106c 7B88     		ldrh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 91


 3465 106e 1B02     		lsls	r3, r3, #8
 3466 1070 9AB2     		uxth	r2, r3
 3467 1072 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3468 1074 1343     		orrs	r3, r3, r2
 3469 1076 FB81     		strh	r3, [r7, #14]	@ movhi
1594:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1595:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3470              		.loc 1 1595 0
 3471 1078 7B68     		ldr	r3, [r7, #4]
 3472 107a FA89     		ldrh	r2, [r7, #14]	@ movhi
 3473 107c 9A83     		strh	r2, [r3, #28]	@ movhi
1596:common/stm32f10x_tim.c **** }
 3474              		.loc 1 1596 0
 3475 107e 00BF     		nop
 3476 1080 1437     		adds	r7, r7, #20
 3477              		.cfi_def_cfa_offset 4
 3478 1082 BD46     		mov	sp, r7
 3479              		.cfi_def_cfa_register 13
 3480              		@ sp needed
 3481 1084 80BC     		pop	{r7}
 3482              		.cfi_restore 7
 3483              		.cfi_def_cfa_offset 0
 3484 1086 7047     		bx	lr
 3485              		.cfi_endproc
 3486              	.LFE103:
 3487              		.size	TIM_OC4PreloadConfig, .-TIM_OC4PreloadConfig
 3488              		.align	1
 3489              		.global	TIM_OC1FastConfig
 3490              		.syntax unified
 3491              		.thumb
 3492              		.thumb_func
 3493              		.fpu softvfp
 3494              		.type	TIM_OC1FastConfig, %function
 3495              	TIM_OC1FastConfig:
 3496              	.LFB104:
1597:common/stm32f10x_tim.c **** 
1598:common/stm32f10x_tim.c **** /**
1599:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Output Compare 1 Fast feature.
1600:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
1601:common/stm32f10x_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1602:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1603:common/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Enable: TIM output compare fast enable
1604:common/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Disable: TIM output compare fast disable
1605:common/stm32f10x_tim.c ****   * @retval None
1606:common/stm32f10x_tim.c ****   */
1607:common/stm32f10x_tim.c **** void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1608:common/stm32f10x_tim.c **** {
 3497              		.loc 1 1608 0
 3498              		.cfi_startproc
 3499              		@ args = 0, pretend = 0, frame = 16
 3500              		@ frame_needed = 1, uses_anonymous_args = 0
 3501              		@ link register save eliminated.
 3502 1088 80B4     		push	{r7}
 3503              		.cfi_def_cfa_offset 4
 3504              		.cfi_offset 7, -4
 3505 108a 85B0     		sub	sp, sp, #20
 3506              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccRayNMu.s 			page 92


 3507 108c 00AF     		add	r7, sp, #0
 3508              		.cfi_def_cfa_register 7
 3509 108e 7860     		str	r0, [r7, #4]
 3510 1090 0B46     		mov	r3, r1
 3511 1092 7B80     		strh	r3, [r7, #2]	@ movhi
1609:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3512              		.loc 1 1609 0
 3513 1094 0023     		movs	r3, #0
 3514 1096 FB81     		strh	r3, [r7, #14]	@ movhi
1610:common/stm32f10x_tim.c ****   /* Check the parameters */
1611:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1612:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1613:common/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
1614:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3515              		.loc 1 1614 0
 3516 1098 7B68     		ldr	r3, [r7, #4]
 3517 109a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3518 109c FB81     		strh	r3, [r7, #14]	@ movhi
1615:common/stm32f10x_tim.c ****   /* Reset the OC1FE Bit */
1616:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 3519              		.loc 1 1616 0
 3520 109e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3521 10a0 23F00403 		bic	r3, r3, #4
 3522 10a4 FB81     		strh	r3, [r7, #14]	@ movhi
1617:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1618:common/stm32f10x_tim.c ****   tmpccmr1 |= TIM_OCFast;
 3523              		.loc 1 1618 0
 3524 10a6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3525 10a8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3526 10aa 1343     		orrs	r3, r3, r2
 3527 10ac FB81     		strh	r3, [r7, #14]	@ movhi
1619:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
1620:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3528              		.loc 1 1620 0
 3529 10ae 7B68     		ldr	r3, [r7, #4]
 3530 10b0 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3531 10b2 1A83     		strh	r2, [r3, #24]	@ movhi
1621:common/stm32f10x_tim.c **** }
 3532              		.loc 1 1621 0
 3533 10b4 00BF     		nop
 3534 10b6 1437     		adds	r7, r7, #20
 3535              		.cfi_def_cfa_offset 4
 3536 10b8 BD46     		mov	sp, r7
 3537              		.cfi_def_cfa_register 13
 3538              		@ sp needed
 3539 10ba 80BC     		pop	{r7}
 3540              		.cfi_restore 7
 3541              		.cfi_def_cfa_offset 0
 3542 10bc 7047     		bx	lr
 3543              		.cfi_endproc
 3544              	.LFE104:
 3545              		.size	TIM_OC1FastConfig, .-TIM_OC1FastConfig
 3546              		.align	1
 3547              		.global	TIM_OC2FastConfig
 3548              		.syntax unified
 3549              		.thumb
 3550              		.thumb_func
ARM GAS  /tmp/ccRayNMu.s 			page 93


 3551              		.fpu softvfp
 3552              		.type	TIM_OC2FastConfig, %function
 3553              	TIM_OC2FastConfig:
 3554              	.LFB105:
1622:common/stm32f10x_tim.c **** 
1623:common/stm32f10x_tim.c **** /**
1624:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Output Compare 2 Fast feature.
1625:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select 
1626:common/stm32f10x_tim.c ****   *         the TIM peripheral.
1627:common/stm32f10x_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1628:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1629:common/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Enable: TIM output compare fast enable
1630:common/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Disable: TIM output compare fast disable
1631:common/stm32f10x_tim.c ****   * @retval None
1632:common/stm32f10x_tim.c ****   */
1633:common/stm32f10x_tim.c **** void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1634:common/stm32f10x_tim.c **** {
 3555              		.loc 1 1634 0
 3556              		.cfi_startproc
 3557              		@ args = 0, pretend = 0, frame = 16
 3558              		@ frame_needed = 1, uses_anonymous_args = 0
 3559              		@ link register save eliminated.
 3560 10be 80B4     		push	{r7}
 3561              		.cfi_def_cfa_offset 4
 3562              		.cfi_offset 7, -4
 3563 10c0 85B0     		sub	sp, sp, #20
 3564              		.cfi_def_cfa_offset 24
 3565 10c2 00AF     		add	r7, sp, #0
 3566              		.cfi_def_cfa_register 7
 3567 10c4 7860     		str	r0, [r7, #4]
 3568 10c6 0B46     		mov	r3, r1
 3569 10c8 7B80     		strh	r3, [r7, #2]	@ movhi
1635:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3570              		.loc 1 1635 0
 3571 10ca 0023     		movs	r3, #0
 3572 10cc FB81     		strh	r3, [r7, #14]	@ movhi
1636:common/stm32f10x_tim.c ****   /* Check the parameters */
1637:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1638:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1639:common/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
1640:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3573              		.loc 1 1640 0
 3574 10ce 7B68     		ldr	r3, [r7, #4]
 3575 10d0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3576 10d2 FB81     		strh	r3, [r7, #14]	@ movhi
1641:common/stm32f10x_tim.c ****   /* Reset the OC2FE Bit */
1642:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 3577              		.loc 1 1642 0
 3578 10d4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3579 10d6 23F48063 		bic	r3, r3, #1024
 3580 10da FB81     		strh	r3, [r7, #14]	@ movhi
1643:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1644:common/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 3581              		.loc 1 1644 0
 3582 10dc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3583 10de 1B02     		lsls	r3, r3, #8
 3584 10e0 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccRayNMu.s 			page 94


 3585 10e2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3586 10e4 1343     		orrs	r3, r3, r2
 3587 10e6 FB81     		strh	r3, [r7, #14]	@ movhi
1645:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
1646:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3588              		.loc 1 1646 0
 3589 10e8 7B68     		ldr	r3, [r7, #4]
 3590 10ea FA89     		ldrh	r2, [r7, #14]	@ movhi
 3591 10ec 1A83     		strh	r2, [r3, #24]	@ movhi
1647:common/stm32f10x_tim.c **** }
 3592              		.loc 1 1647 0
 3593 10ee 00BF     		nop
 3594 10f0 1437     		adds	r7, r7, #20
 3595              		.cfi_def_cfa_offset 4
 3596 10f2 BD46     		mov	sp, r7
 3597              		.cfi_def_cfa_register 13
 3598              		@ sp needed
 3599 10f4 80BC     		pop	{r7}
 3600              		.cfi_restore 7
 3601              		.cfi_def_cfa_offset 0
 3602 10f6 7047     		bx	lr
 3603              		.cfi_endproc
 3604              	.LFE105:
 3605              		.size	TIM_OC2FastConfig, .-TIM_OC2FastConfig
 3606              		.align	1
 3607              		.global	TIM_OC3FastConfig
 3608              		.syntax unified
 3609              		.thumb
 3610              		.thumb_func
 3611              		.fpu softvfp
 3612              		.type	TIM_OC3FastConfig, %function
 3613              	TIM_OC3FastConfig:
 3614              	.LFB106:
1648:common/stm32f10x_tim.c **** 
1649:common/stm32f10x_tim.c **** /**
1650:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Output Compare 3 Fast feature.
1651:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1652:common/stm32f10x_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1653:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1654:common/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Enable: TIM output compare fast enable
1655:common/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Disable: TIM output compare fast disable
1656:common/stm32f10x_tim.c ****   * @retval None
1657:common/stm32f10x_tim.c ****   */
1658:common/stm32f10x_tim.c **** void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1659:common/stm32f10x_tim.c **** {
 3615              		.loc 1 1659 0
 3616              		.cfi_startproc
 3617              		@ args = 0, pretend = 0, frame = 16
 3618              		@ frame_needed = 1, uses_anonymous_args = 0
 3619              		@ link register save eliminated.
 3620 10f8 80B4     		push	{r7}
 3621              		.cfi_def_cfa_offset 4
 3622              		.cfi_offset 7, -4
 3623 10fa 85B0     		sub	sp, sp, #20
 3624              		.cfi_def_cfa_offset 24
 3625 10fc 00AF     		add	r7, sp, #0
 3626              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccRayNMu.s 			page 95


 3627 10fe 7860     		str	r0, [r7, #4]
 3628 1100 0B46     		mov	r3, r1
 3629 1102 7B80     		strh	r3, [r7, #2]	@ movhi
1660:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3630              		.loc 1 1660 0
 3631 1104 0023     		movs	r3, #0
 3632 1106 FB81     		strh	r3, [r7, #14]	@ movhi
1661:common/stm32f10x_tim.c ****   /* Check the parameters */
1662:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1663:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1664:common/stm32f10x_tim.c ****   /* Get the TIMx CCMR2 register value */
1665:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3633              		.loc 1 1665 0
 3634 1108 7B68     		ldr	r3, [r7, #4]
 3635 110a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3636 110c FB81     		strh	r3, [r7, #14]	@ movhi
1666:common/stm32f10x_tim.c ****   /* Reset the OC3FE Bit */
1667:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 3637              		.loc 1 1667 0
 3638 110e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3639 1110 23F00403 		bic	r3, r3, #4
 3640 1114 FB81     		strh	r3, [r7, #14]	@ movhi
1668:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1669:common/stm32f10x_tim.c ****   tmpccmr2 |= TIM_OCFast;
 3641              		.loc 1 1669 0
 3642 1116 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3643 1118 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3644 111a 1343     		orrs	r3, r3, r2
 3645 111c FB81     		strh	r3, [r7, #14]	@ movhi
1670:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 */
1671:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3646              		.loc 1 1671 0
 3647 111e 7B68     		ldr	r3, [r7, #4]
 3648 1120 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3649 1122 9A83     		strh	r2, [r3, #28]	@ movhi
1672:common/stm32f10x_tim.c **** }
 3650              		.loc 1 1672 0
 3651 1124 00BF     		nop
 3652 1126 1437     		adds	r7, r7, #20
 3653              		.cfi_def_cfa_offset 4
 3654 1128 BD46     		mov	sp, r7
 3655              		.cfi_def_cfa_register 13
 3656              		@ sp needed
 3657 112a 80BC     		pop	{r7}
 3658              		.cfi_restore 7
 3659              		.cfi_def_cfa_offset 0
 3660 112c 7047     		bx	lr
 3661              		.cfi_endproc
 3662              	.LFE106:
 3663              		.size	TIM_OC3FastConfig, .-TIM_OC3FastConfig
 3664              		.align	1
 3665              		.global	TIM_OC4FastConfig
 3666              		.syntax unified
 3667              		.thumb
 3668              		.thumb_func
 3669              		.fpu softvfp
 3670              		.type	TIM_OC4FastConfig, %function
ARM GAS  /tmp/ccRayNMu.s 			page 96


 3671              	TIM_OC4FastConfig:
 3672              	.LFB107:
1673:common/stm32f10x_tim.c **** 
1674:common/stm32f10x_tim.c **** /**
1675:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Output Compare 4 Fast feature.
1676:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1677:common/stm32f10x_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1678:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1679:common/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Enable: TIM output compare fast enable
1680:common/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Disable: TIM output compare fast disable
1681:common/stm32f10x_tim.c ****   * @retval None
1682:common/stm32f10x_tim.c ****   */
1683:common/stm32f10x_tim.c **** void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1684:common/stm32f10x_tim.c **** {
 3673              		.loc 1 1684 0
 3674              		.cfi_startproc
 3675              		@ args = 0, pretend = 0, frame = 16
 3676              		@ frame_needed = 1, uses_anonymous_args = 0
 3677              		@ link register save eliminated.
 3678 112e 80B4     		push	{r7}
 3679              		.cfi_def_cfa_offset 4
 3680              		.cfi_offset 7, -4
 3681 1130 85B0     		sub	sp, sp, #20
 3682              		.cfi_def_cfa_offset 24
 3683 1132 00AF     		add	r7, sp, #0
 3684              		.cfi_def_cfa_register 7
 3685 1134 7860     		str	r0, [r7, #4]
 3686 1136 0B46     		mov	r3, r1
 3687 1138 7B80     		strh	r3, [r7, #2]	@ movhi
1685:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3688              		.loc 1 1685 0
 3689 113a 0023     		movs	r3, #0
 3690 113c FB81     		strh	r3, [r7, #14]	@ movhi
1686:common/stm32f10x_tim.c ****   /* Check the parameters */
1687:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1688:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1689:common/stm32f10x_tim.c ****   /* Get the TIMx CCMR2 register value */
1690:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3691              		.loc 1 1690 0
 3692 113e 7B68     		ldr	r3, [r7, #4]
 3693 1140 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3694 1142 FB81     		strh	r3, [r7, #14]	@ movhi
1691:common/stm32f10x_tim.c ****   /* Reset the OC4FE Bit */
1692:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 3695              		.loc 1 1692 0
 3696 1144 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3697 1146 23F48063 		bic	r3, r3, #1024
 3698 114a FB81     		strh	r3, [r7, #14]	@ movhi
1693:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1694:common/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 3699              		.loc 1 1694 0
 3700 114c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3701 114e 1B02     		lsls	r3, r3, #8
 3702 1150 9AB2     		uxth	r2, r3
 3703 1152 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3704 1154 1343     		orrs	r3, r3, r2
 3705 1156 FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 97


1695:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 */
1696:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3706              		.loc 1 1696 0
 3707 1158 7B68     		ldr	r3, [r7, #4]
 3708 115a FA89     		ldrh	r2, [r7, #14]	@ movhi
 3709 115c 9A83     		strh	r2, [r3, #28]	@ movhi
1697:common/stm32f10x_tim.c **** }
 3710              		.loc 1 1697 0
 3711 115e 00BF     		nop
 3712 1160 1437     		adds	r7, r7, #20
 3713              		.cfi_def_cfa_offset 4
 3714 1162 BD46     		mov	sp, r7
 3715              		.cfi_def_cfa_register 13
 3716              		@ sp needed
 3717 1164 80BC     		pop	{r7}
 3718              		.cfi_restore 7
 3719              		.cfi_def_cfa_offset 0
 3720 1166 7047     		bx	lr
 3721              		.cfi_endproc
 3722              	.LFE107:
 3723              		.size	TIM_OC4FastConfig, .-TIM_OC4FastConfig
 3724              		.align	1
 3725              		.global	TIM_ClearOC1Ref
 3726              		.syntax unified
 3727              		.thumb
 3728              		.thumb_func
 3729              		.fpu softvfp
 3730              		.type	TIM_ClearOC1Ref, %function
 3731              	TIM_ClearOC1Ref:
 3732              	.LFB108:
1698:common/stm32f10x_tim.c **** 
1699:common/stm32f10x_tim.c **** /**
1700:common/stm32f10x_tim.c ****   * @brief  Clears or safeguards the OCREF1 signal on an external event
1701:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1702:common/stm32f10x_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1703:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1704:common/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Enable: TIM Output clear enable
1705:common/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Disable: TIM Output clear disable
1706:common/stm32f10x_tim.c ****   * @retval None
1707:common/stm32f10x_tim.c ****   */
1708:common/stm32f10x_tim.c **** void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1709:common/stm32f10x_tim.c **** {
 3733              		.loc 1 1709 0
 3734              		.cfi_startproc
 3735              		@ args = 0, pretend = 0, frame = 16
 3736              		@ frame_needed = 1, uses_anonymous_args = 0
 3737              		@ link register save eliminated.
 3738 1168 80B4     		push	{r7}
 3739              		.cfi_def_cfa_offset 4
 3740              		.cfi_offset 7, -4
 3741 116a 85B0     		sub	sp, sp, #20
 3742              		.cfi_def_cfa_offset 24
 3743 116c 00AF     		add	r7, sp, #0
 3744              		.cfi_def_cfa_register 7
 3745 116e 7860     		str	r0, [r7, #4]
 3746 1170 0B46     		mov	r3, r1
 3747 1172 7B80     		strh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 98


1710:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3748              		.loc 1 1710 0
 3749 1174 0023     		movs	r3, #0
 3750 1176 FB81     		strh	r3, [r7, #14]	@ movhi
1711:common/stm32f10x_tim.c ****   /* Check the parameters */
1712:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1713:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1714:common/stm32f10x_tim.c **** 
1715:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3751              		.loc 1 1715 0
 3752 1178 7B68     		ldr	r3, [r7, #4]
 3753 117a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3754 117c FB81     		strh	r3, [r7, #14]	@ movhi
1716:common/stm32f10x_tim.c **** 
1717:common/stm32f10x_tim.c ****   /* Reset the OC1CE Bit */
1718:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 3755              		.loc 1 1718 0
 3756 117e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3757 1180 23F08003 		bic	r3, r3, #128
 3758 1184 FB81     		strh	r3, [r7, #14]	@ movhi
1719:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1720:common/stm32f10x_tim.c ****   tmpccmr1 |= TIM_OCClear;
 3759              		.loc 1 1720 0
 3760 1186 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3761 1188 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3762 118a 1343     		orrs	r3, r3, r2
 3763 118c FB81     		strh	r3, [r7, #14]	@ movhi
1721:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1722:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3764              		.loc 1 1722 0
 3765 118e 7B68     		ldr	r3, [r7, #4]
 3766 1190 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3767 1192 1A83     		strh	r2, [r3, #24]	@ movhi
1723:common/stm32f10x_tim.c **** }
 3768              		.loc 1 1723 0
 3769 1194 00BF     		nop
 3770 1196 1437     		adds	r7, r7, #20
 3771              		.cfi_def_cfa_offset 4
 3772 1198 BD46     		mov	sp, r7
 3773              		.cfi_def_cfa_register 13
 3774              		@ sp needed
 3775 119a 80BC     		pop	{r7}
 3776              		.cfi_restore 7
 3777              		.cfi_def_cfa_offset 0
 3778 119c 7047     		bx	lr
 3779              		.cfi_endproc
 3780              	.LFE108:
 3781              		.size	TIM_ClearOC1Ref, .-TIM_ClearOC1Ref
 3782              		.align	1
 3783              		.global	TIM_ClearOC2Ref
 3784              		.syntax unified
 3785              		.thumb
 3786              		.thumb_func
 3787              		.fpu softvfp
 3788              		.type	TIM_ClearOC2Ref, %function
 3789              	TIM_ClearOC2Ref:
 3790              	.LFB109:
ARM GAS  /tmp/ccRayNMu.s 			page 99


1724:common/stm32f10x_tim.c **** 
1725:common/stm32f10x_tim.c **** /**
1726:common/stm32f10x_tim.c ****   * @brief  Clears or safeguards the OCREF2 signal on an external event
1727:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1728:common/stm32f10x_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1729:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1730:common/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Enable: TIM Output clear enable
1731:common/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Disable: TIM Output clear disable
1732:common/stm32f10x_tim.c ****   * @retval None
1733:common/stm32f10x_tim.c ****   */
1734:common/stm32f10x_tim.c **** void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1735:common/stm32f10x_tim.c **** {
 3791              		.loc 1 1735 0
 3792              		.cfi_startproc
 3793              		@ args = 0, pretend = 0, frame = 16
 3794              		@ frame_needed = 1, uses_anonymous_args = 0
 3795              		@ link register save eliminated.
 3796 119e 80B4     		push	{r7}
 3797              		.cfi_def_cfa_offset 4
 3798              		.cfi_offset 7, -4
 3799 11a0 85B0     		sub	sp, sp, #20
 3800              		.cfi_def_cfa_offset 24
 3801 11a2 00AF     		add	r7, sp, #0
 3802              		.cfi_def_cfa_register 7
 3803 11a4 7860     		str	r0, [r7, #4]
 3804 11a6 0B46     		mov	r3, r1
 3805 11a8 7B80     		strh	r3, [r7, #2]	@ movhi
1736:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3806              		.loc 1 1736 0
 3807 11aa 0023     		movs	r3, #0
 3808 11ac FB81     		strh	r3, [r7, #14]	@ movhi
1737:common/stm32f10x_tim.c ****   /* Check the parameters */
1738:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1739:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1740:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3809              		.loc 1 1740 0
 3810 11ae 7B68     		ldr	r3, [r7, #4]
 3811 11b0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3812 11b2 FB81     		strh	r3, [r7, #14]	@ movhi
1741:common/stm32f10x_tim.c ****   /* Reset the OC2CE Bit */
1742:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 3813              		.loc 1 1742 0
 3814 11b4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3815 11b6 C3F30E03 		ubfx	r3, r3, #0, #15
 3816 11ba FB81     		strh	r3, [r7, #14]	@ movhi
1743:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1744:common/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 3817              		.loc 1 1744 0
 3818 11bc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3819 11be 1B02     		lsls	r3, r3, #8
 3820 11c0 9AB2     		uxth	r2, r3
 3821 11c2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3822 11c4 1343     		orrs	r3, r3, r2
 3823 11c6 FB81     		strh	r3, [r7, #14]	@ movhi
1745:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1746:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3824              		.loc 1 1746 0
ARM GAS  /tmp/ccRayNMu.s 			page 100


 3825 11c8 7B68     		ldr	r3, [r7, #4]
 3826 11ca FA89     		ldrh	r2, [r7, #14]	@ movhi
 3827 11cc 1A83     		strh	r2, [r3, #24]	@ movhi
1747:common/stm32f10x_tim.c **** }
 3828              		.loc 1 1747 0
 3829 11ce 00BF     		nop
 3830 11d0 1437     		adds	r7, r7, #20
 3831              		.cfi_def_cfa_offset 4
 3832 11d2 BD46     		mov	sp, r7
 3833              		.cfi_def_cfa_register 13
 3834              		@ sp needed
 3835 11d4 80BC     		pop	{r7}
 3836              		.cfi_restore 7
 3837              		.cfi_def_cfa_offset 0
 3838 11d6 7047     		bx	lr
 3839              		.cfi_endproc
 3840              	.LFE109:
 3841              		.size	TIM_ClearOC2Ref, .-TIM_ClearOC2Ref
 3842              		.align	1
 3843              		.global	TIM_ClearOC3Ref
 3844              		.syntax unified
 3845              		.thumb
 3846              		.thumb_func
 3847              		.fpu softvfp
 3848              		.type	TIM_ClearOC3Ref, %function
 3849              	TIM_ClearOC3Ref:
 3850              	.LFB110:
1748:common/stm32f10x_tim.c **** 
1749:common/stm32f10x_tim.c **** /**
1750:common/stm32f10x_tim.c ****   * @brief  Clears or safeguards the OCREF3 signal on an external event
1751:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1752:common/stm32f10x_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1753:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1754:common/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Enable: TIM Output clear enable
1755:common/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Disable: TIM Output clear disable
1756:common/stm32f10x_tim.c ****   * @retval None
1757:common/stm32f10x_tim.c ****   */
1758:common/stm32f10x_tim.c **** void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1759:common/stm32f10x_tim.c **** {
 3851              		.loc 1 1759 0
 3852              		.cfi_startproc
 3853              		@ args = 0, pretend = 0, frame = 16
 3854              		@ frame_needed = 1, uses_anonymous_args = 0
 3855              		@ link register save eliminated.
 3856 11d8 80B4     		push	{r7}
 3857              		.cfi_def_cfa_offset 4
 3858              		.cfi_offset 7, -4
 3859 11da 85B0     		sub	sp, sp, #20
 3860              		.cfi_def_cfa_offset 24
 3861 11dc 00AF     		add	r7, sp, #0
 3862              		.cfi_def_cfa_register 7
 3863 11de 7860     		str	r0, [r7, #4]
 3864 11e0 0B46     		mov	r3, r1
 3865 11e2 7B80     		strh	r3, [r7, #2]	@ movhi
1760:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3866              		.loc 1 1760 0
 3867 11e4 0023     		movs	r3, #0
ARM GAS  /tmp/ccRayNMu.s 			page 101


 3868 11e6 FB81     		strh	r3, [r7, #14]	@ movhi
1761:common/stm32f10x_tim.c ****   /* Check the parameters */
1762:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1763:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1764:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3869              		.loc 1 1764 0
 3870 11e8 7B68     		ldr	r3, [r7, #4]
 3871 11ea 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3872 11ec FB81     		strh	r3, [r7, #14]	@ movhi
1765:common/stm32f10x_tim.c ****   /* Reset the OC3CE Bit */
1766:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 3873              		.loc 1 1766 0
 3874 11ee FB89     		ldrh	r3, [r7, #14]	@ movhi
 3875 11f0 23F08003 		bic	r3, r3, #128
 3876 11f4 FB81     		strh	r3, [r7, #14]	@ movhi
1767:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1768:common/stm32f10x_tim.c ****   tmpccmr2 |= TIM_OCClear;
 3877              		.loc 1 1768 0
 3878 11f6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3879 11f8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3880 11fa 1343     		orrs	r3, r3, r2
 3881 11fc FB81     		strh	r3, [r7, #14]	@ movhi
1769:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1770:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3882              		.loc 1 1770 0
 3883 11fe 7B68     		ldr	r3, [r7, #4]
 3884 1200 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3885 1202 9A83     		strh	r2, [r3, #28]	@ movhi
1771:common/stm32f10x_tim.c **** }
 3886              		.loc 1 1771 0
 3887 1204 00BF     		nop
 3888 1206 1437     		adds	r7, r7, #20
 3889              		.cfi_def_cfa_offset 4
 3890 1208 BD46     		mov	sp, r7
 3891              		.cfi_def_cfa_register 13
 3892              		@ sp needed
 3893 120a 80BC     		pop	{r7}
 3894              		.cfi_restore 7
 3895              		.cfi_def_cfa_offset 0
 3896 120c 7047     		bx	lr
 3897              		.cfi_endproc
 3898              	.LFE110:
 3899              		.size	TIM_ClearOC3Ref, .-TIM_ClearOC3Ref
 3900              		.align	1
 3901              		.global	TIM_ClearOC4Ref
 3902              		.syntax unified
 3903              		.thumb
 3904              		.thumb_func
 3905              		.fpu softvfp
 3906              		.type	TIM_ClearOC4Ref, %function
 3907              	TIM_ClearOC4Ref:
 3908              	.LFB111:
1772:common/stm32f10x_tim.c **** 
1773:common/stm32f10x_tim.c **** /**
1774:common/stm32f10x_tim.c ****   * @brief  Clears or safeguards the OCREF4 signal on an external event
1775:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1776:common/stm32f10x_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
ARM GAS  /tmp/ccRayNMu.s 			page 102


1777:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1778:common/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Enable: TIM Output clear enable
1779:common/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Disable: TIM Output clear disable
1780:common/stm32f10x_tim.c ****   * @retval None
1781:common/stm32f10x_tim.c ****   */
1782:common/stm32f10x_tim.c **** void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1783:common/stm32f10x_tim.c **** {
 3909              		.loc 1 1783 0
 3910              		.cfi_startproc
 3911              		@ args = 0, pretend = 0, frame = 16
 3912              		@ frame_needed = 1, uses_anonymous_args = 0
 3913              		@ link register save eliminated.
 3914 120e 80B4     		push	{r7}
 3915              		.cfi_def_cfa_offset 4
 3916              		.cfi_offset 7, -4
 3917 1210 85B0     		sub	sp, sp, #20
 3918              		.cfi_def_cfa_offset 24
 3919 1212 00AF     		add	r7, sp, #0
 3920              		.cfi_def_cfa_register 7
 3921 1214 7860     		str	r0, [r7, #4]
 3922 1216 0B46     		mov	r3, r1
 3923 1218 7B80     		strh	r3, [r7, #2]	@ movhi
1784:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3924              		.loc 1 1784 0
 3925 121a 0023     		movs	r3, #0
 3926 121c FB81     		strh	r3, [r7, #14]	@ movhi
1785:common/stm32f10x_tim.c ****   /* Check the parameters */
1786:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1787:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1788:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3927              		.loc 1 1788 0
 3928 121e 7B68     		ldr	r3, [r7, #4]
 3929 1220 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3930 1222 FB81     		strh	r3, [r7, #14]	@ movhi
1789:common/stm32f10x_tim.c ****   /* Reset the OC4CE Bit */
1790:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 3931              		.loc 1 1790 0
 3932 1224 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3933 1226 C3F30E03 		ubfx	r3, r3, #0, #15
 3934 122a FB81     		strh	r3, [r7, #14]	@ movhi
1791:common/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1792:common/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 3935              		.loc 1 1792 0
 3936 122c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3937 122e 1B02     		lsls	r3, r3, #8
 3938 1230 9AB2     		uxth	r2, r3
 3939 1232 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3940 1234 1343     		orrs	r3, r3, r2
 3941 1236 FB81     		strh	r3, [r7, #14]	@ movhi
1793:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1794:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3942              		.loc 1 1794 0
 3943 1238 7B68     		ldr	r3, [r7, #4]
 3944 123a FA89     		ldrh	r2, [r7, #14]	@ movhi
 3945 123c 9A83     		strh	r2, [r3, #28]	@ movhi
1795:common/stm32f10x_tim.c **** }
 3946              		.loc 1 1795 0
ARM GAS  /tmp/ccRayNMu.s 			page 103


 3947 123e 00BF     		nop
 3948 1240 1437     		adds	r7, r7, #20
 3949              		.cfi_def_cfa_offset 4
 3950 1242 BD46     		mov	sp, r7
 3951              		.cfi_def_cfa_register 13
 3952              		@ sp needed
 3953 1244 80BC     		pop	{r7}
 3954              		.cfi_restore 7
 3955              		.cfi_def_cfa_offset 0
 3956 1246 7047     		bx	lr
 3957              		.cfi_endproc
 3958              	.LFE111:
 3959              		.size	TIM_ClearOC4Ref, .-TIM_ClearOC4Ref
 3960              		.align	1
 3961              		.global	TIM_OC1PolarityConfig
 3962              		.syntax unified
 3963              		.thumb
 3964              		.thumb_func
 3965              		.fpu softvfp
 3966              		.type	TIM_OC1PolarityConfig, %function
 3967              	TIM_OC1PolarityConfig:
 3968              	.LFB112:
1796:common/stm32f10x_tim.c **** 
1797:common/stm32f10x_tim.c **** /**
1798:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx channel 1 polarity.
1799:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
1800:common/stm32f10x_tim.c ****   * @param  TIM_OCPolarity: specifies the OC1 Polarity
1801:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1802:common/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_High: Output Compare active high
1803:common/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_Low: Output Compare active low
1804:common/stm32f10x_tim.c ****   * @retval None
1805:common/stm32f10x_tim.c ****   */
1806:common/stm32f10x_tim.c **** void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1807:common/stm32f10x_tim.c **** {
 3969              		.loc 1 1807 0
 3970              		.cfi_startproc
 3971              		@ args = 0, pretend = 0, frame = 16
 3972              		@ frame_needed = 1, uses_anonymous_args = 0
 3973              		@ link register save eliminated.
 3974 1248 80B4     		push	{r7}
 3975              		.cfi_def_cfa_offset 4
 3976              		.cfi_offset 7, -4
 3977 124a 85B0     		sub	sp, sp, #20
 3978              		.cfi_def_cfa_offset 24
 3979 124c 00AF     		add	r7, sp, #0
 3980              		.cfi_def_cfa_register 7
 3981 124e 7860     		str	r0, [r7, #4]
 3982 1250 0B46     		mov	r3, r1
 3983 1252 7B80     		strh	r3, [r7, #2]	@ movhi
1808:common/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 3984              		.loc 1 1808 0
 3985 1254 0023     		movs	r3, #0
 3986 1256 FB81     		strh	r3, [r7, #14]	@ movhi
1809:common/stm32f10x_tim.c ****   /* Check the parameters */
1810:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1811:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1812:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
ARM GAS  /tmp/ccRayNMu.s 			page 104


 3987              		.loc 1 1812 0
 3988 1258 7B68     		ldr	r3, [r7, #4]
 3989 125a 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3990 125c FB81     		strh	r3, [r7, #14]	@ movhi
1813:common/stm32f10x_tim.c ****   /* Set or Reset the CC1P Bit */
1814:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 3991              		.loc 1 1814 0
 3992 125e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3993 1260 23F00203 		bic	r3, r3, #2
 3994 1264 FB81     		strh	r3, [r7, #14]	@ movhi
1815:common/stm32f10x_tim.c ****   tmpccer |= TIM_OCPolarity;
 3995              		.loc 1 1815 0
 3996 1266 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3997 1268 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3998 126a 1343     		orrs	r3, r3, r2
 3999 126c FB81     		strh	r3, [r7, #14]	@ movhi
1816:common/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1817:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4000              		.loc 1 1817 0
 4001 126e 7B68     		ldr	r3, [r7, #4]
 4002 1270 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4003 1272 1A84     		strh	r2, [r3, #32]	@ movhi
1818:common/stm32f10x_tim.c **** }
 4004              		.loc 1 1818 0
 4005 1274 00BF     		nop
 4006 1276 1437     		adds	r7, r7, #20
 4007              		.cfi_def_cfa_offset 4
 4008 1278 BD46     		mov	sp, r7
 4009              		.cfi_def_cfa_register 13
 4010              		@ sp needed
 4011 127a 80BC     		pop	{r7}
 4012              		.cfi_restore 7
 4013              		.cfi_def_cfa_offset 0
 4014 127c 7047     		bx	lr
 4015              		.cfi_endproc
 4016              	.LFE112:
 4017              		.size	TIM_OC1PolarityConfig, .-TIM_OC1PolarityConfig
 4018              		.align	1
 4019              		.global	TIM_OC1NPolarityConfig
 4020              		.syntax unified
 4021              		.thumb
 4022              		.thumb_func
 4023              		.fpu softvfp
 4024              		.type	TIM_OC1NPolarityConfig, %function
 4025              	TIM_OC1NPolarityConfig:
 4026              	.LFB113:
1819:common/stm32f10x_tim.c **** 
1820:common/stm32f10x_tim.c **** /**
1821:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Channel 1N polarity.
1822:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 8, 15, 16 or 17 to select the TIM peripheral.
1823:common/stm32f10x_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC1N Polarity
1824:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1825:common/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_High: Output Compare active high
1826:common/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_Low: Output Compare active low
1827:common/stm32f10x_tim.c ****   * @retval None
1828:common/stm32f10x_tim.c ****   */
1829:common/stm32f10x_tim.c **** void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
ARM GAS  /tmp/ccRayNMu.s 			page 105


1830:common/stm32f10x_tim.c **** {
 4027              		.loc 1 1830 0
 4028              		.cfi_startproc
 4029              		@ args = 0, pretend = 0, frame = 16
 4030              		@ frame_needed = 1, uses_anonymous_args = 0
 4031              		@ link register save eliminated.
 4032 127e 80B4     		push	{r7}
 4033              		.cfi_def_cfa_offset 4
 4034              		.cfi_offset 7, -4
 4035 1280 85B0     		sub	sp, sp, #20
 4036              		.cfi_def_cfa_offset 24
 4037 1282 00AF     		add	r7, sp, #0
 4038              		.cfi_def_cfa_register 7
 4039 1284 7860     		str	r0, [r7, #4]
 4040 1286 0B46     		mov	r3, r1
 4041 1288 7B80     		strh	r3, [r7, #2]	@ movhi
1831:common/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4042              		.loc 1 1831 0
 4043 128a 0023     		movs	r3, #0
 4044 128c FB81     		strh	r3, [r7, #14]	@ movhi
1832:common/stm32f10x_tim.c ****   /* Check the parameters */
1833:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1834:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1835:common/stm32f10x_tim.c ****    
1836:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4045              		.loc 1 1836 0
 4046 128e 7B68     		ldr	r3, [r7, #4]
 4047 1290 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4048 1292 FB81     		strh	r3, [r7, #14]	@ movhi
1837:common/stm32f10x_tim.c ****   /* Set or Reset the CC1NP Bit */
1838:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 4049              		.loc 1 1838 0
 4050 1294 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4051 1296 23F00803 		bic	r3, r3, #8
 4052 129a FB81     		strh	r3, [r7, #14]	@ movhi
1839:common/stm32f10x_tim.c ****   tmpccer |= TIM_OCNPolarity;
 4053              		.loc 1 1839 0
 4054 129c FA89     		ldrh	r2, [r7, #14]	@ movhi
 4055 129e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4056 12a0 1343     		orrs	r3, r3, r2
 4057 12a2 FB81     		strh	r3, [r7, #14]	@ movhi
1840:common/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1841:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4058              		.loc 1 1841 0
 4059 12a4 7B68     		ldr	r3, [r7, #4]
 4060 12a6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4061 12a8 1A84     		strh	r2, [r3, #32]	@ movhi
1842:common/stm32f10x_tim.c **** }
 4062              		.loc 1 1842 0
 4063 12aa 00BF     		nop
 4064 12ac 1437     		adds	r7, r7, #20
 4065              		.cfi_def_cfa_offset 4
 4066 12ae BD46     		mov	sp, r7
 4067              		.cfi_def_cfa_register 13
 4068              		@ sp needed
 4069 12b0 80BC     		pop	{r7}
 4070              		.cfi_restore 7
ARM GAS  /tmp/ccRayNMu.s 			page 106


 4071              		.cfi_def_cfa_offset 0
 4072 12b2 7047     		bx	lr
 4073              		.cfi_endproc
 4074              	.LFE113:
 4075              		.size	TIM_OC1NPolarityConfig, .-TIM_OC1NPolarityConfig
 4076              		.align	1
 4077              		.global	TIM_OC2PolarityConfig
 4078              		.syntax unified
 4079              		.thumb
 4080              		.thumb_func
 4081              		.fpu softvfp
 4082              		.type	TIM_OC2PolarityConfig, %function
 4083              	TIM_OC2PolarityConfig:
 4084              	.LFB114:
1843:common/stm32f10x_tim.c **** 
1844:common/stm32f10x_tim.c **** /**
1845:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx channel 2 polarity.
1846:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
1847:common/stm32f10x_tim.c ****   * @param  TIM_OCPolarity: specifies the OC2 Polarity
1848:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1849:common/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_High: Output Compare active high
1850:common/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_Low: Output Compare active low
1851:common/stm32f10x_tim.c ****   * @retval None
1852:common/stm32f10x_tim.c ****   */
1853:common/stm32f10x_tim.c **** void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1854:common/stm32f10x_tim.c **** {
 4085              		.loc 1 1854 0
 4086              		.cfi_startproc
 4087              		@ args = 0, pretend = 0, frame = 16
 4088              		@ frame_needed = 1, uses_anonymous_args = 0
 4089              		@ link register save eliminated.
 4090 12b4 80B4     		push	{r7}
 4091              		.cfi_def_cfa_offset 4
 4092              		.cfi_offset 7, -4
 4093 12b6 85B0     		sub	sp, sp, #20
 4094              		.cfi_def_cfa_offset 24
 4095 12b8 00AF     		add	r7, sp, #0
 4096              		.cfi_def_cfa_register 7
 4097 12ba 7860     		str	r0, [r7, #4]
 4098 12bc 0B46     		mov	r3, r1
 4099 12be 7B80     		strh	r3, [r7, #2]	@ movhi
1855:common/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4100              		.loc 1 1855 0
 4101 12c0 0023     		movs	r3, #0
 4102 12c2 FB81     		strh	r3, [r7, #14]	@ movhi
1856:common/stm32f10x_tim.c ****   /* Check the parameters */
1857:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1858:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1859:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4103              		.loc 1 1859 0
 4104 12c4 7B68     		ldr	r3, [r7, #4]
 4105 12c6 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4106 12c8 FB81     		strh	r3, [r7, #14]	@ movhi
1860:common/stm32f10x_tim.c ****   /* Set or Reset the CC2P Bit */
1861:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 4107              		.loc 1 1861 0
 4108 12ca FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 107


 4109 12cc 23F02003 		bic	r3, r3, #32
 4110 12d0 FB81     		strh	r3, [r7, #14]	@ movhi
1862:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 4111              		.loc 1 1862 0
 4112 12d2 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4113 12d4 1B01     		lsls	r3, r3, #4
 4114 12d6 9AB2     		uxth	r2, r3
 4115 12d8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4116 12da 1343     		orrs	r3, r3, r2
 4117 12dc FB81     		strh	r3, [r7, #14]	@ movhi
1863:common/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1864:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4118              		.loc 1 1864 0
 4119 12de 7B68     		ldr	r3, [r7, #4]
 4120 12e0 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4121 12e2 1A84     		strh	r2, [r3, #32]	@ movhi
1865:common/stm32f10x_tim.c **** }
 4122              		.loc 1 1865 0
 4123 12e4 00BF     		nop
 4124 12e6 1437     		adds	r7, r7, #20
 4125              		.cfi_def_cfa_offset 4
 4126 12e8 BD46     		mov	sp, r7
 4127              		.cfi_def_cfa_register 13
 4128              		@ sp needed
 4129 12ea 80BC     		pop	{r7}
 4130              		.cfi_restore 7
 4131              		.cfi_def_cfa_offset 0
 4132 12ec 7047     		bx	lr
 4133              		.cfi_endproc
 4134              	.LFE114:
 4135              		.size	TIM_OC2PolarityConfig, .-TIM_OC2PolarityConfig
 4136              		.align	1
 4137              		.global	TIM_OC2NPolarityConfig
 4138              		.syntax unified
 4139              		.thumb
 4140              		.thumb_func
 4141              		.fpu softvfp
 4142              		.type	TIM_OC2NPolarityConfig, %function
 4143              	TIM_OC2NPolarityConfig:
 4144              	.LFB115:
1866:common/stm32f10x_tim.c **** 
1867:common/stm32f10x_tim.c **** /**
1868:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Channel 2N polarity.
1869:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1870:common/stm32f10x_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC2N Polarity
1871:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1872:common/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_High: Output Compare active high
1873:common/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_Low: Output Compare active low
1874:common/stm32f10x_tim.c ****   * @retval None
1875:common/stm32f10x_tim.c ****   */
1876:common/stm32f10x_tim.c **** void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1877:common/stm32f10x_tim.c **** {
 4145              		.loc 1 1877 0
 4146              		.cfi_startproc
 4147              		@ args = 0, pretend = 0, frame = 16
 4148              		@ frame_needed = 1, uses_anonymous_args = 0
 4149              		@ link register save eliminated.
ARM GAS  /tmp/ccRayNMu.s 			page 108


 4150 12ee 80B4     		push	{r7}
 4151              		.cfi_def_cfa_offset 4
 4152              		.cfi_offset 7, -4
 4153 12f0 85B0     		sub	sp, sp, #20
 4154              		.cfi_def_cfa_offset 24
 4155 12f2 00AF     		add	r7, sp, #0
 4156              		.cfi_def_cfa_register 7
 4157 12f4 7860     		str	r0, [r7, #4]
 4158 12f6 0B46     		mov	r3, r1
 4159 12f8 7B80     		strh	r3, [r7, #2]	@ movhi
1878:common/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4160              		.loc 1 1878 0
 4161 12fa 0023     		movs	r3, #0
 4162 12fc FB81     		strh	r3, [r7, #14]	@ movhi
1879:common/stm32f10x_tim.c ****   /* Check the parameters */
1880:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1881:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1882:common/stm32f10x_tim.c ****   
1883:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4163              		.loc 1 1883 0
 4164 12fe 7B68     		ldr	r3, [r7, #4]
 4165 1300 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4166 1302 FB81     		strh	r3, [r7, #14]	@ movhi
1884:common/stm32f10x_tim.c ****   /* Set or Reset the CC2NP Bit */
1885:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 4167              		.loc 1 1885 0
 4168 1304 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4169 1306 23F08003 		bic	r3, r3, #128
 4170 130a FB81     		strh	r3, [r7, #14]	@ movhi
1886:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 4171              		.loc 1 1886 0
 4172 130c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4173 130e 1B01     		lsls	r3, r3, #4
 4174 1310 9AB2     		uxth	r2, r3
 4175 1312 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4176 1314 1343     		orrs	r3, r3, r2
 4177 1316 FB81     		strh	r3, [r7, #14]	@ movhi
1887:common/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1888:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4178              		.loc 1 1888 0
 4179 1318 7B68     		ldr	r3, [r7, #4]
 4180 131a FA89     		ldrh	r2, [r7, #14]	@ movhi
 4181 131c 1A84     		strh	r2, [r3, #32]	@ movhi
1889:common/stm32f10x_tim.c **** }
 4182              		.loc 1 1889 0
 4183 131e 00BF     		nop
 4184 1320 1437     		adds	r7, r7, #20
 4185              		.cfi_def_cfa_offset 4
 4186 1322 BD46     		mov	sp, r7
 4187              		.cfi_def_cfa_register 13
 4188              		@ sp needed
 4189 1324 80BC     		pop	{r7}
 4190              		.cfi_restore 7
 4191              		.cfi_def_cfa_offset 0
 4192 1326 7047     		bx	lr
 4193              		.cfi_endproc
 4194              	.LFE115:
ARM GAS  /tmp/ccRayNMu.s 			page 109


 4195              		.size	TIM_OC2NPolarityConfig, .-TIM_OC2NPolarityConfig
 4196              		.align	1
 4197              		.global	TIM_OC3PolarityConfig
 4198              		.syntax unified
 4199              		.thumb
 4200              		.thumb_func
 4201              		.fpu softvfp
 4202              		.type	TIM_OC3PolarityConfig, %function
 4203              	TIM_OC3PolarityConfig:
 4204              	.LFB116:
1890:common/stm32f10x_tim.c **** 
1891:common/stm32f10x_tim.c **** /**
1892:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx channel 3 polarity.
1893:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1894:common/stm32f10x_tim.c ****   * @param  TIM_OCPolarity: specifies the OC3 Polarity
1895:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1896:common/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_High: Output Compare active high
1897:common/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_Low: Output Compare active low
1898:common/stm32f10x_tim.c ****   * @retval None
1899:common/stm32f10x_tim.c ****   */
1900:common/stm32f10x_tim.c **** void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1901:common/stm32f10x_tim.c **** {
 4205              		.loc 1 1901 0
 4206              		.cfi_startproc
 4207              		@ args = 0, pretend = 0, frame = 16
 4208              		@ frame_needed = 1, uses_anonymous_args = 0
 4209              		@ link register save eliminated.
 4210 1328 80B4     		push	{r7}
 4211              		.cfi_def_cfa_offset 4
 4212              		.cfi_offset 7, -4
 4213 132a 85B0     		sub	sp, sp, #20
 4214              		.cfi_def_cfa_offset 24
 4215 132c 00AF     		add	r7, sp, #0
 4216              		.cfi_def_cfa_register 7
 4217 132e 7860     		str	r0, [r7, #4]
 4218 1330 0B46     		mov	r3, r1
 4219 1332 7B80     		strh	r3, [r7, #2]	@ movhi
1902:common/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4220              		.loc 1 1902 0
 4221 1334 0023     		movs	r3, #0
 4222 1336 FB81     		strh	r3, [r7, #14]	@ movhi
1903:common/stm32f10x_tim.c ****   /* Check the parameters */
1904:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1905:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1906:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4223              		.loc 1 1906 0
 4224 1338 7B68     		ldr	r3, [r7, #4]
 4225 133a 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4226 133c FB81     		strh	r3, [r7, #14]	@ movhi
1907:common/stm32f10x_tim.c ****   /* Set or Reset the CC3P Bit */
1908:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 4227              		.loc 1 1908 0
 4228 133e FB89     		ldrh	r3, [r7, #14]	@ movhi
 4229 1340 23F40073 		bic	r3, r3, #512
 4230 1344 FB81     		strh	r3, [r7, #14]	@ movhi
1909:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 4231              		.loc 1 1909 0
ARM GAS  /tmp/ccRayNMu.s 			page 110


 4232 1346 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4233 1348 1B02     		lsls	r3, r3, #8
 4234 134a 9AB2     		uxth	r2, r3
 4235 134c FB89     		ldrh	r3, [r7, #14]	@ movhi
 4236 134e 1343     		orrs	r3, r3, r2
 4237 1350 FB81     		strh	r3, [r7, #14]	@ movhi
1910:common/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1911:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4238              		.loc 1 1911 0
 4239 1352 7B68     		ldr	r3, [r7, #4]
 4240 1354 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4241 1356 1A84     		strh	r2, [r3, #32]	@ movhi
1912:common/stm32f10x_tim.c **** }
 4242              		.loc 1 1912 0
 4243 1358 00BF     		nop
 4244 135a 1437     		adds	r7, r7, #20
 4245              		.cfi_def_cfa_offset 4
 4246 135c BD46     		mov	sp, r7
 4247              		.cfi_def_cfa_register 13
 4248              		@ sp needed
 4249 135e 80BC     		pop	{r7}
 4250              		.cfi_restore 7
 4251              		.cfi_def_cfa_offset 0
 4252 1360 7047     		bx	lr
 4253              		.cfi_endproc
 4254              	.LFE116:
 4255              		.size	TIM_OC3PolarityConfig, .-TIM_OC3PolarityConfig
 4256              		.align	1
 4257              		.global	TIM_OC3NPolarityConfig
 4258              		.syntax unified
 4259              		.thumb
 4260              		.thumb_func
 4261              		.fpu softvfp
 4262              		.type	TIM_OC3NPolarityConfig, %function
 4263              	TIM_OC3NPolarityConfig:
 4264              	.LFB117:
1913:common/stm32f10x_tim.c **** 
1914:common/stm32f10x_tim.c **** /**
1915:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Channel 3N polarity.
1916:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1917:common/stm32f10x_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC3N Polarity
1918:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1919:common/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_High: Output Compare active high
1920:common/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_Low: Output Compare active low
1921:common/stm32f10x_tim.c ****   * @retval None
1922:common/stm32f10x_tim.c ****   */
1923:common/stm32f10x_tim.c **** void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1924:common/stm32f10x_tim.c **** {
 4265              		.loc 1 1924 0
 4266              		.cfi_startproc
 4267              		@ args = 0, pretend = 0, frame = 16
 4268              		@ frame_needed = 1, uses_anonymous_args = 0
 4269              		@ link register save eliminated.
 4270 1362 80B4     		push	{r7}
 4271              		.cfi_def_cfa_offset 4
 4272              		.cfi_offset 7, -4
 4273 1364 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccRayNMu.s 			page 111


 4274              		.cfi_def_cfa_offset 24
 4275 1366 00AF     		add	r7, sp, #0
 4276              		.cfi_def_cfa_register 7
 4277 1368 7860     		str	r0, [r7, #4]
 4278 136a 0B46     		mov	r3, r1
 4279 136c 7B80     		strh	r3, [r7, #2]	@ movhi
1925:common/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4280              		.loc 1 1925 0
 4281 136e 0023     		movs	r3, #0
 4282 1370 FB81     		strh	r3, [r7, #14]	@ movhi
1926:common/stm32f10x_tim.c ****  
1927:common/stm32f10x_tim.c ****   /* Check the parameters */
1928:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1929:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1930:common/stm32f10x_tim.c ****     
1931:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4283              		.loc 1 1931 0
 4284 1372 7B68     		ldr	r3, [r7, #4]
 4285 1374 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4286 1376 FB81     		strh	r3, [r7, #14]	@ movhi
1932:common/stm32f10x_tim.c ****   /* Set or Reset the CC3NP Bit */
1933:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 4287              		.loc 1 1933 0
 4288 1378 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4289 137a 23F40063 		bic	r3, r3, #2048
 4290 137e FB81     		strh	r3, [r7, #14]	@ movhi
1934:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 4291              		.loc 1 1934 0
 4292 1380 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4293 1382 1B02     		lsls	r3, r3, #8
 4294 1384 9AB2     		uxth	r2, r3
 4295 1386 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4296 1388 1343     		orrs	r3, r3, r2
 4297 138a FB81     		strh	r3, [r7, #14]	@ movhi
1935:common/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1936:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4298              		.loc 1 1936 0
 4299 138c 7B68     		ldr	r3, [r7, #4]
 4300 138e FA89     		ldrh	r2, [r7, #14]	@ movhi
 4301 1390 1A84     		strh	r2, [r3, #32]	@ movhi
1937:common/stm32f10x_tim.c **** }
 4302              		.loc 1 1937 0
 4303 1392 00BF     		nop
 4304 1394 1437     		adds	r7, r7, #20
 4305              		.cfi_def_cfa_offset 4
 4306 1396 BD46     		mov	sp, r7
 4307              		.cfi_def_cfa_register 13
 4308              		@ sp needed
 4309 1398 80BC     		pop	{r7}
 4310              		.cfi_restore 7
 4311              		.cfi_def_cfa_offset 0
 4312 139a 7047     		bx	lr
 4313              		.cfi_endproc
 4314              	.LFE117:
 4315              		.size	TIM_OC3NPolarityConfig, .-TIM_OC3NPolarityConfig
 4316              		.align	1
 4317              		.global	TIM_OC4PolarityConfig
ARM GAS  /tmp/ccRayNMu.s 			page 112


 4318              		.syntax unified
 4319              		.thumb
 4320              		.thumb_func
 4321              		.fpu softvfp
 4322              		.type	TIM_OC4PolarityConfig, %function
 4323              	TIM_OC4PolarityConfig:
 4324              	.LFB118:
1938:common/stm32f10x_tim.c **** 
1939:common/stm32f10x_tim.c **** /**
1940:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx channel 4 polarity.
1941:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1942:common/stm32f10x_tim.c ****   * @param  TIM_OCPolarity: specifies the OC4 Polarity
1943:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1944:common/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_High: Output Compare active high
1945:common/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_Low: Output Compare active low
1946:common/stm32f10x_tim.c ****   * @retval None
1947:common/stm32f10x_tim.c ****   */
1948:common/stm32f10x_tim.c **** void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1949:common/stm32f10x_tim.c **** {
 4325              		.loc 1 1949 0
 4326              		.cfi_startproc
 4327              		@ args = 0, pretend = 0, frame = 16
 4328              		@ frame_needed = 1, uses_anonymous_args = 0
 4329              		@ link register save eliminated.
 4330 139c 80B4     		push	{r7}
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 7, -4
 4333 139e 85B0     		sub	sp, sp, #20
 4334              		.cfi_def_cfa_offset 24
 4335 13a0 00AF     		add	r7, sp, #0
 4336              		.cfi_def_cfa_register 7
 4337 13a2 7860     		str	r0, [r7, #4]
 4338 13a4 0B46     		mov	r3, r1
 4339 13a6 7B80     		strh	r3, [r7, #2]	@ movhi
1950:common/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4340              		.loc 1 1950 0
 4341 13a8 0023     		movs	r3, #0
 4342 13aa FB81     		strh	r3, [r7, #14]	@ movhi
1951:common/stm32f10x_tim.c ****   /* Check the parameters */
1952:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1953:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1954:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4343              		.loc 1 1954 0
 4344 13ac 7B68     		ldr	r3, [r7, #4]
 4345 13ae 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4346 13b0 FB81     		strh	r3, [r7, #14]	@ movhi
1955:common/stm32f10x_tim.c ****   /* Set or Reset the CC4P Bit */
1956:common/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 4347              		.loc 1 1956 0
 4348 13b2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4349 13b4 23F40053 		bic	r3, r3, #8192
 4350 13b8 FB81     		strh	r3, [r7, #14]	@ movhi
1957:common/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 4351              		.loc 1 1957 0
 4352 13ba 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4353 13bc 1B03     		lsls	r3, r3, #12
 4354 13be 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccRayNMu.s 			page 113


 4355 13c0 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4356 13c2 1343     		orrs	r3, r3, r2
 4357 13c4 FB81     		strh	r3, [r7, #14]	@ movhi
1958:common/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1959:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4358              		.loc 1 1959 0
 4359 13c6 7B68     		ldr	r3, [r7, #4]
 4360 13c8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4361 13ca 1A84     		strh	r2, [r3, #32]	@ movhi
1960:common/stm32f10x_tim.c **** }
 4362              		.loc 1 1960 0
 4363 13cc 00BF     		nop
 4364 13ce 1437     		adds	r7, r7, #20
 4365              		.cfi_def_cfa_offset 4
 4366 13d0 BD46     		mov	sp, r7
 4367              		.cfi_def_cfa_register 13
 4368              		@ sp needed
 4369 13d2 80BC     		pop	{r7}
 4370              		.cfi_restore 7
 4371              		.cfi_def_cfa_offset 0
 4372 13d4 7047     		bx	lr
 4373              		.cfi_endproc
 4374              	.LFE118:
 4375              		.size	TIM_OC4PolarityConfig, .-TIM_OC4PolarityConfig
 4376              		.align	1
 4377              		.global	TIM_CCxCmd
 4378              		.syntax unified
 4379              		.thumb
 4380              		.thumb_func
 4381              		.fpu softvfp
 4382              		.type	TIM_CCxCmd, %function
 4383              	TIM_CCxCmd:
 4384              	.LFB119:
1961:common/stm32f10x_tim.c **** 
1962:common/stm32f10x_tim.c **** /**
1963:common/stm32f10x_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
1964:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
1965:common/stm32f10x_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1966:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1967:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_1: TIM Channel 1
1968:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_2: TIM Channel 2
1969:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_3: TIM Channel 3
1970:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_4: TIM Channel 4
1971:common/stm32f10x_tim.c ****   * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
1972:common/stm32f10x_tim.c ****   *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
1973:common/stm32f10x_tim.c ****   * @retval None
1974:common/stm32f10x_tim.c ****   */
1975:common/stm32f10x_tim.c **** void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
1976:common/stm32f10x_tim.c **** {
 4385              		.loc 1 1976 0
 4386              		.cfi_startproc
 4387              		@ args = 0, pretend = 0, frame = 16
 4388              		@ frame_needed = 1, uses_anonymous_args = 0
 4389              		@ link register save eliminated.
 4390 13d6 80B4     		push	{r7}
 4391              		.cfi_def_cfa_offset 4
 4392              		.cfi_offset 7, -4
ARM GAS  /tmp/ccRayNMu.s 			page 114


 4393 13d8 85B0     		sub	sp, sp, #20
 4394              		.cfi_def_cfa_offset 24
 4395 13da 00AF     		add	r7, sp, #0
 4396              		.cfi_def_cfa_register 7
 4397 13dc 7860     		str	r0, [r7, #4]
 4398 13de 0B46     		mov	r3, r1
 4399 13e0 7B80     		strh	r3, [r7, #2]	@ movhi
 4400 13e2 1346     		mov	r3, r2	@ movhi
 4401 13e4 3B80     		strh	r3, [r7]	@ movhi
1977:common/stm32f10x_tim.c ****   uint16_t tmp = 0;
 4402              		.loc 1 1977 0
 4403 13e6 0023     		movs	r3, #0
 4404 13e8 FB81     		strh	r3, [r7, #14]	@ movhi
1978:common/stm32f10x_tim.c **** 
1979:common/stm32f10x_tim.c ****   /* Check the parameters */
1980:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1981:common/stm32f10x_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
1982:common/stm32f10x_tim.c ****   assert_param(IS_TIM_CCX(TIM_CCx));
1983:common/stm32f10x_tim.c **** 
1984:common/stm32f10x_tim.c ****   tmp = CCER_CCE_Set << TIM_Channel;
 4405              		.loc 1 1984 0
 4406 13ea 7B88     		ldrh	r3, [r7, #2]
 4407 13ec 0122     		movs	r2, #1
 4408 13ee 02FA03F3 		lsl	r3, r2, r3
 4409 13f2 FB81     		strh	r3, [r7, #14]	@ movhi
1985:common/stm32f10x_tim.c **** 
1986:common/stm32f10x_tim.c ****   /* Reset the CCxE Bit */
1987:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
 4410              		.loc 1 1987 0
 4411 13f4 7B68     		ldr	r3, [r7, #4]
 4412 13f6 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4413 13f8 9AB2     		uxth	r2, r3
 4414 13fa FB89     		ldrh	r3, [r7, #14]	@ movhi
 4415 13fc DB43     		mvns	r3, r3
 4416 13fe 9BB2     		uxth	r3, r3
 4417 1400 1340     		ands	r3, r3, r2
 4418 1402 9AB2     		uxth	r2, r3
 4419 1404 7B68     		ldr	r3, [r7, #4]
 4420 1406 1A84     		strh	r2, [r3, #32]	@ movhi
1988:common/stm32f10x_tim.c **** 
1989:common/stm32f10x_tim.c ****   /* Set or reset the CCxE Bit */ 
1990:common/stm32f10x_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 4421              		.loc 1 1990 0
 4422 1408 7B68     		ldr	r3, [r7, #4]
 4423 140a 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4424 140c 9AB2     		uxth	r2, r3
 4425 140e 3988     		ldrh	r1, [r7]
 4426 1410 7B88     		ldrh	r3, [r7, #2]
 4427 1412 01FA03F3 		lsl	r3, r1, r3
 4428 1416 9BB2     		uxth	r3, r3
 4429 1418 1343     		orrs	r3, r3, r2
 4430 141a 9AB2     		uxth	r2, r3
 4431 141c 7B68     		ldr	r3, [r7, #4]
 4432 141e 1A84     		strh	r2, [r3, #32]	@ movhi
1991:common/stm32f10x_tim.c **** }
 4433              		.loc 1 1991 0
 4434 1420 00BF     		nop
ARM GAS  /tmp/ccRayNMu.s 			page 115


 4435 1422 1437     		adds	r7, r7, #20
 4436              		.cfi_def_cfa_offset 4
 4437 1424 BD46     		mov	sp, r7
 4438              		.cfi_def_cfa_register 13
 4439              		@ sp needed
 4440 1426 80BC     		pop	{r7}
 4441              		.cfi_restore 7
 4442              		.cfi_def_cfa_offset 0
 4443 1428 7047     		bx	lr
 4444              		.cfi_endproc
 4445              	.LFE119:
 4446              		.size	TIM_CCxCmd, .-TIM_CCxCmd
 4447              		.align	1
 4448              		.global	TIM_CCxNCmd
 4449              		.syntax unified
 4450              		.thumb
 4451              		.thumb_func
 4452              		.fpu softvfp
 4453              		.type	TIM_CCxNCmd, %function
 4454              	TIM_CCxNCmd:
 4455              	.LFB120:
1992:common/stm32f10x_tim.c **** 
1993:common/stm32f10x_tim.c **** /**
1994:common/stm32f10x_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel xN.
1995:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 8, 15, 16 or 17 to select the TIM peripheral.
1996:common/stm32f10x_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1997:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1998:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_1: TIM Channel 1
1999:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_2: TIM Channel 2
2000:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_3: TIM Channel 3
2001:common/stm32f10x_tim.c ****   * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
2002:common/stm32f10x_tim.c ****   *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
2003:common/stm32f10x_tim.c ****   * @retval None
2004:common/stm32f10x_tim.c ****   */
2005:common/stm32f10x_tim.c **** void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
2006:common/stm32f10x_tim.c **** {
 4456              		.loc 1 2006 0
 4457              		.cfi_startproc
 4458              		@ args = 0, pretend = 0, frame = 16
 4459              		@ frame_needed = 1, uses_anonymous_args = 0
 4460              		@ link register save eliminated.
 4461 142a 80B4     		push	{r7}
 4462              		.cfi_def_cfa_offset 4
 4463              		.cfi_offset 7, -4
 4464 142c 85B0     		sub	sp, sp, #20
 4465              		.cfi_def_cfa_offset 24
 4466 142e 00AF     		add	r7, sp, #0
 4467              		.cfi_def_cfa_register 7
 4468 1430 7860     		str	r0, [r7, #4]
 4469 1432 0B46     		mov	r3, r1
 4470 1434 7B80     		strh	r3, [r7, #2]	@ movhi
 4471 1436 1346     		mov	r3, r2	@ movhi
 4472 1438 3B80     		strh	r3, [r7]	@ movhi
2007:common/stm32f10x_tim.c ****   uint16_t tmp = 0;
 4473              		.loc 1 2007 0
 4474 143a 0023     		movs	r3, #0
 4475 143c FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 116


2008:common/stm32f10x_tim.c **** 
2009:common/stm32f10x_tim.c ****   /* Check the parameters */
2010:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2011:common/stm32f10x_tim.c ****   assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
2012:common/stm32f10x_tim.c ****   assert_param(IS_TIM_CCXN(TIM_CCxN));
2013:common/stm32f10x_tim.c **** 
2014:common/stm32f10x_tim.c ****   tmp = CCER_CCNE_Set << TIM_Channel;
 4476              		.loc 1 2014 0
 4477 143e 7B88     		ldrh	r3, [r7, #2]
 4478 1440 0422     		movs	r2, #4
 4479 1442 02FA03F3 		lsl	r3, r2, r3
 4480 1446 FB81     		strh	r3, [r7, #14]	@ movhi
2015:common/stm32f10x_tim.c **** 
2016:common/stm32f10x_tim.c ****   /* Reset the CCxNE Bit */
2017:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
 4481              		.loc 1 2017 0
 4482 1448 7B68     		ldr	r3, [r7, #4]
 4483 144a 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4484 144c 9AB2     		uxth	r2, r3
 4485 144e FB89     		ldrh	r3, [r7, #14]	@ movhi
 4486 1450 DB43     		mvns	r3, r3
 4487 1452 9BB2     		uxth	r3, r3
 4488 1454 1340     		ands	r3, r3, r2
 4489 1456 9AB2     		uxth	r2, r3
 4490 1458 7B68     		ldr	r3, [r7, #4]
 4491 145a 1A84     		strh	r2, [r3, #32]	@ movhi
2018:common/stm32f10x_tim.c **** 
2019:common/stm32f10x_tim.c ****   /* Set or reset the CCxNE Bit */ 
2020:common/stm32f10x_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 4492              		.loc 1 2020 0
 4493 145c 7B68     		ldr	r3, [r7, #4]
 4494 145e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4495 1460 9AB2     		uxth	r2, r3
 4496 1462 3988     		ldrh	r1, [r7]
 4497 1464 7B88     		ldrh	r3, [r7, #2]
 4498 1466 01FA03F3 		lsl	r3, r1, r3
 4499 146a 9BB2     		uxth	r3, r3
 4500 146c 1343     		orrs	r3, r3, r2
 4501 146e 9AB2     		uxth	r2, r3
 4502 1470 7B68     		ldr	r3, [r7, #4]
 4503 1472 1A84     		strh	r2, [r3, #32]	@ movhi
2021:common/stm32f10x_tim.c **** }
 4504              		.loc 1 2021 0
 4505 1474 00BF     		nop
 4506 1476 1437     		adds	r7, r7, #20
 4507              		.cfi_def_cfa_offset 4
 4508 1478 BD46     		mov	sp, r7
 4509              		.cfi_def_cfa_register 13
 4510              		@ sp needed
 4511 147a 80BC     		pop	{r7}
 4512              		.cfi_restore 7
 4513              		.cfi_def_cfa_offset 0
 4514 147c 7047     		bx	lr
 4515              		.cfi_endproc
 4516              	.LFE120:
 4517              		.size	TIM_CCxNCmd, .-TIM_CCxNCmd
 4518              		.align	1
ARM GAS  /tmp/ccRayNMu.s 			page 117


 4519              		.global	TIM_SelectOCxM
 4520              		.syntax unified
 4521              		.thumb
 4522              		.thumb_func
 4523              		.fpu softvfp
 4524              		.type	TIM_SelectOCxM, %function
 4525              	TIM_SelectOCxM:
 4526              	.LFB121:
2022:common/stm32f10x_tim.c **** 
2023:common/stm32f10x_tim.c **** /**
2024:common/stm32f10x_tim.c ****   * @brief  Selects the TIM Output Compare Mode.
2025:common/stm32f10x_tim.c ****   * @note   This function disables the selected channel before changing the Output
2026:common/stm32f10x_tim.c ****   *         Compare Mode.
2027:common/stm32f10x_tim.c ****   *         User has to enable this channel using TIM_CCxCmd and TIM_CCxNCmd functions.
2028:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2029:common/stm32f10x_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
2030:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2031:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_1: TIM Channel 1
2032:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_2: TIM Channel 2
2033:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_3: TIM Channel 3
2034:common/stm32f10x_tim.c ****   *     @arg TIM_Channel_4: TIM Channel 4
2035:common/stm32f10x_tim.c ****   * @param  TIM_OCMode: specifies the TIM Output Compare Mode.
2036:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2037:common/stm32f10x_tim.c ****   *     @arg TIM_OCMode_Timing
2038:common/stm32f10x_tim.c ****   *     @arg TIM_OCMode_Active
2039:common/stm32f10x_tim.c ****   *     @arg TIM_OCMode_Toggle
2040:common/stm32f10x_tim.c ****   *     @arg TIM_OCMode_PWM1
2041:common/stm32f10x_tim.c ****   *     @arg TIM_OCMode_PWM2
2042:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active
2043:common/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive
2044:common/stm32f10x_tim.c ****   * @retval None
2045:common/stm32f10x_tim.c ****   */
2046:common/stm32f10x_tim.c **** void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
2047:common/stm32f10x_tim.c **** {
 4527              		.loc 1 2047 0
 4528              		.cfi_startproc
 4529              		@ args = 0, pretend = 0, frame = 16
 4530              		@ frame_needed = 1, uses_anonymous_args = 0
 4531              		@ link register save eliminated.
 4532 147e 80B4     		push	{r7}
 4533              		.cfi_def_cfa_offset 4
 4534              		.cfi_offset 7, -4
 4535 1480 85B0     		sub	sp, sp, #20
 4536              		.cfi_def_cfa_offset 24
 4537 1482 00AF     		add	r7, sp, #0
 4538              		.cfi_def_cfa_register 7
 4539 1484 7860     		str	r0, [r7, #4]
 4540 1486 0B46     		mov	r3, r1
 4541 1488 7B80     		strh	r3, [r7, #2]	@ movhi
 4542 148a 1346     		mov	r3, r2	@ movhi
 4543 148c 3B80     		strh	r3, [r7]	@ movhi
2048:common/stm32f10x_tim.c ****   uint32_t tmp = 0;
 4544              		.loc 1 2048 0
 4545 148e 0023     		movs	r3, #0
 4546 1490 FB60     		str	r3, [r7, #12]
2049:common/stm32f10x_tim.c ****   uint16_t tmp1 = 0;
 4547              		.loc 1 2049 0
ARM GAS  /tmp/ccRayNMu.s 			page 118


 4548 1492 0023     		movs	r3, #0
 4549 1494 7B81     		strh	r3, [r7, #10]	@ movhi
2050:common/stm32f10x_tim.c **** 
2051:common/stm32f10x_tim.c ****   /* Check the parameters */
2052:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2053:common/stm32f10x_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
2054:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OCM(TIM_OCMode));
2055:common/stm32f10x_tim.c **** 
2056:common/stm32f10x_tim.c ****   tmp = (uint32_t) TIMx;
 4550              		.loc 1 2056 0
 4551 1496 7B68     		ldr	r3, [r7, #4]
 4552 1498 FB60     		str	r3, [r7, #12]
2057:common/stm32f10x_tim.c ****   tmp += CCMR_Offset;
 4553              		.loc 1 2057 0
 4554 149a FB68     		ldr	r3, [r7, #12]
 4555 149c 1833     		adds	r3, r3, #24
 4556 149e FB60     		str	r3, [r7, #12]
2058:common/stm32f10x_tim.c **** 
2059:common/stm32f10x_tim.c ****   tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 4557              		.loc 1 2059 0
 4558 14a0 7B88     		ldrh	r3, [r7, #2]
 4559 14a2 0122     		movs	r2, #1
 4560 14a4 02FA03F3 		lsl	r3, r2, r3
 4561 14a8 7B81     		strh	r3, [r7, #10]	@ movhi
2060:common/stm32f10x_tim.c **** 
2061:common/stm32f10x_tim.c ****   /* Disable the Channel: Reset the CCxE Bit */
2062:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
 4562              		.loc 1 2062 0
 4563 14aa 7B68     		ldr	r3, [r7, #4]
 4564 14ac 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4565 14ae 9AB2     		uxth	r2, r3
 4566 14b0 7B89     		ldrh	r3, [r7, #10]	@ movhi
 4567 14b2 DB43     		mvns	r3, r3
 4568 14b4 9BB2     		uxth	r3, r3
 4569 14b6 1340     		ands	r3, r3, r2
 4570 14b8 9AB2     		uxth	r2, r3
 4571 14ba 7B68     		ldr	r3, [r7, #4]
 4572 14bc 1A84     		strh	r2, [r3, #32]	@ movhi
2063:common/stm32f10x_tim.c **** 
2064:common/stm32f10x_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 4573              		.loc 1 2064 0
 4574 14be 7B88     		ldrh	r3, [r7, #2]
 4575 14c0 002B     		cmp	r3, #0
 4576 14c2 02D0     		beq	.L141
 4577              		.loc 1 2064 0 is_stmt 0 discriminator 1
 4578 14c4 7B88     		ldrh	r3, [r7, #2]
 4579 14c6 082B     		cmp	r3, #8
 4580 14c8 13D1     		bne	.L142
 4581              	.L141:
2065:common/stm32f10x_tim.c ****   {
2066:common/stm32f10x_tim.c ****     tmp += (TIM_Channel>>1);
 4582              		.loc 1 2066 0 is_stmt 1
 4583 14ca 7B88     		ldrh	r3, [r7, #2]
 4584 14cc 5B08     		lsrs	r3, r3, #1
 4585 14ce 9BB2     		uxth	r3, r3
 4586 14d0 1A46     		mov	r2, r3
 4587 14d2 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccRayNMu.s 			page 119


 4588 14d4 1344     		add	r3, r3, r2
 4589 14d6 FB60     		str	r3, [r7, #12]
2067:common/stm32f10x_tim.c **** 
2068:common/stm32f10x_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
2069:common/stm32f10x_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 4590              		.loc 1 2069 0
 4591 14d8 FB68     		ldr	r3, [r7, #12]
 4592 14da FA68     		ldr	r2, [r7, #12]
 4593 14dc 1268     		ldr	r2, [r2]
 4594 14de 22F07002 		bic	r2, r2, #112
 4595 14e2 1A60     		str	r2, [r3]
2070:common/stm32f10x_tim.c ****    
2071:common/stm32f10x_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
2072:common/stm32f10x_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
 4596              		.loc 1 2072 0
 4597 14e4 FB68     		ldr	r3, [r7, #12]
 4598 14e6 FA68     		ldr	r2, [r7, #12]
 4599 14e8 1168     		ldr	r1, [r2]
 4600 14ea 3A88     		ldrh	r2, [r7]
 4601 14ec 0A43     		orrs	r2, r2, r1
 4602 14ee 1A60     		str	r2, [r3]
 4603 14f0 16E0     		b	.L143
 4604              	.L142:
2073:common/stm32f10x_tim.c ****   }
2074:common/stm32f10x_tim.c ****   else
2075:common/stm32f10x_tim.c ****   {
2076:common/stm32f10x_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 4605              		.loc 1 2076 0
 4606 14f2 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4607 14f4 043B     		subs	r3, r3, #4
 4608 14f6 9BB2     		uxth	r3, r3
 4609 14f8 5B08     		lsrs	r3, r3, #1
 4610 14fa 9BB2     		uxth	r3, r3
 4611 14fc 1A46     		mov	r2, r3
 4612 14fe FB68     		ldr	r3, [r7, #12]
 4613 1500 1344     		add	r3, r3, r2
 4614 1502 FB60     		str	r3, [r7, #12]
2077:common/stm32f10x_tim.c **** 
2078:common/stm32f10x_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
2079:common/stm32f10x_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 4615              		.loc 1 2079 0
 4616 1504 FB68     		ldr	r3, [r7, #12]
 4617 1506 FA68     		ldr	r2, [r7, #12]
 4618 1508 1268     		ldr	r2, [r2]
 4619 150a 22F4E042 		bic	r2, r2, #28672
 4620 150e 1A60     		str	r2, [r3]
2080:common/stm32f10x_tim.c ****     
2081:common/stm32f10x_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
2082:common/stm32f10x_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 4621              		.loc 1 2082 0
 4622 1510 FB68     		ldr	r3, [r7, #12]
 4623 1512 FA68     		ldr	r2, [r7, #12]
 4624 1514 1268     		ldr	r2, [r2]
 4625 1516 3988     		ldrh	r1, [r7]	@ movhi
 4626 1518 0902     		lsls	r1, r1, #8
 4627 151a 89B2     		uxth	r1, r1
 4628 151c 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccRayNMu.s 			page 120


 4629 151e 1A60     		str	r2, [r3]
 4630              	.L143:
2083:common/stm32f10x_tim.c ****   }
2084:common/stm32f10x_tim.c **** }
 4631              		.loc 1 2084 0
 4632 1520 00BF     		nop
 4633 1522 1437     		adds	r7, r7, #20
 4634              		.cfi_def_cfa_offset 4
 4635 1524 BD46     		mov	sp, r7
 4636              		.cfi_def_cfa_register 13
 4637              		@ sp needed
 4638 1526 80BC     		pop	{r7}
 4639              		.cfi_restore 7
 4640              		.cfi_def_cfa_offset 0
 4641 1528 7047     		bx	lr
 4642              		.cfi_endproc
 4643              	.LFE121:
 4644              		.size	TIM_SelectOCxM, .-TIM_SelectOCxM
 4645              		.align	1
 4646              		.global	TIM_UpdateDisableConfig
 4647              		.syntax unified
 4648              		.thumb
 4649              		.thumb_func
 4650              		.fpu softvfp
 4651              		.type	TIM_UpdateDisableConfig, %function
 4652              	TIM_UpdateDisableConfig:
 4653              	.LFB122:
2085:common/stm32f10x_tim.c **** 
2086:common/stm32f10x_tim.c **** /**
2087:common/stm32f10x_tim.c ****   * @brief  Enables or Disables the TIMx Update event.
2088:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2089:common/stm32f10x_tim.c ****   * @param  NewState: new state of the TIMx UDIS bit
2090:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
2091:common/stm32f10x_tim.c ****   * @retval None
2092:common/stm32f10x_tim.c ****   */
2093:common/stm32f10x_tim.c **** void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
2094:common/stm32f10x_tim.c **** {
 4654              		.loc 1 2094 0
 4655              		.cfi_startproc
 4656              		@ args = 0, pretend = 0, frame = 8
 4657              		@ frame_needed = 1, uses_anonymous_args = 0
 4658              		@ link register save eliminated.
 4659 152a 80B4     		push	{r7}
 4660              		.cfi_def_cfa_offset 4
 4661              		.cfi_offset 7, -4
 4662 152c 83B0     		sub	sp, sp, #12
 4663              		.cfi_def_cfa_offset 16
 4664 152e 00AF     		add	r7, sp, #0
 4665              		.cfi_def_cfa_register 7
 4666 1530 7860     		str	r0, [r7, #4]
 4667 1532 0B46     		mov	r3, r1
 4668 1534 FB70     		strb	r3, [r7, #3]
2095:common/stm32f10x_tim.c ****   /* Check the parameters */
2096:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2097:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2098:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 4669              		.loc 1 2098 0
ARM GAS  /tmp/ccRayNMu.s 			page 121


 4670 1536 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4671 1538 002B     		cmp	r3, #0
 4672 153a 08D0     		beq	.L145
2099:common/stm32f10x_tim.c ****   {
2100:common/stm32f10x_tim.c ****     /* Set the Update Disable Bit */
2101:common/stm32f10x_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 4673              		.loc 1 2101 0
 4674 153c 7B68     		ldr	r3, [r7, #4]
 4675 153e 1B88     		ldrh	r3, [r3]	@ movhi
 4676 1540 9BB2     		uxth	r3, r3
 4677 1542 43F00203 		orr	r3, r3, #2
 4678 1546 9AB2     		uxth	r2, r3
 4679 1548 7B68     		ldr	r3, [r7, #4]
 4680 154a 1A80     		strh	r2, [r3]	@ movhi
2102:common/stm32f10x_tim.c ****   }
2103:common/stm32f10x_tim.c ****   else
2104:common/stm32f10x_tim.c ****   {
2105:common/stm32f10x_tim.c ****     /* Reset the Update Disable Bit */
2106:common/stm32f10x_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
2107:common/stm32f10x_tim.c ****   }
2108:common/stm32f10x_tim.c **** }
 4681              		.loc 1 2108 0
 4682 154c 07E0     		b	.L147
 4683              	.L145:
2106:common/stm32f10x_tim.c ****   }
 4684              		.loc 1 2106 0
 4685 154e 7B68     		ldr	r3, [r7, #4]
 4686 1550 1B88     		ldrh	r3, [r3]	@ movhi
 4687 1552 9BB2     		uxth	r3, r3
 4688 1554 23F00203 		bic	r3, r3, #2
 4689 1558 9AB2     		uxth	r2, r3
 4690 155a 7B68     		ldr	r3, [r7, #4]
 4691 155c 1A80     		strh	r2, [r3]	@ movhi
 4692              	.L147:
 4693              		.loc 1 2108 0
 4694 155e 00BF     		nop
 4695 1560 0C37     		adds	r7, r7, #12
 4696              		.cfi_def_cfa_offset 4
 4697 1562 BD46     		mov	sp, r7
 4698              		.cfi_def_cfa_register 13
 4699              		@ sp needed
 4700 1564 80BC     		pop	{r7}
 4701              		.cfi_restore 7
 4702              		.cfi_def_cfa_offset 0
 4703 1566 7047     		bx	lr
 4704              		.cfi_endproc
 4705              	.LFE122:
 4706              		.size	TIM_UpdateDisableConfig, .-TIM_UpdateDisableConfig
 4707              		.align	1
 4708              		.global	TIM_UpdateRequestConfig
 4709              		.syntax unified
 4710              		.thumb
 4711              		.thumb_func
 4712              		.fpu softvfp
 4713              		.type	TIM_UpdateRequestConfig, %function
 4714              	TIM_UpdateRequestConfig:
 4715              	.LFB123:
ARM GAS  /tmp/ccRayNMu.s 			page 122


2109:common/stm32f10x_tim.c **** 
2110:common/stm32f10x_tim.c **** /**
2111:common/stm32f10x_tim.c ****   * @brief  Configures the TIMx Update Request Interrupt source.
2112:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2113:common/stm32f10x_tim.c ****   * @param  TIM_UpdateSource: specifies the Update source.
2114:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2115:common/stm32f10x_tim.c ****   *     @arg TIM_UpdateSource_Regular: Source of update is the counter overflow/underflow
2116:common/stm32f10x_tim.c ****                                        or the setting of UG bit, or an update generation
2117:common/stm32f10x_tim.c ****                                        through the slave mode controller.
2118:common/stm32f10x_tim.c ****   *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
2119:common/stm32f10x_tim.c ****   * @retval None
2120:common/stm32f10x_tim.c ****   */
2121:common/stm32f10x_tim.c **** void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
2122:common/stm32f10x_tim.c **** {
 4716              		.loc 1 2122 0
 4717              		.cfi_startproc
 4718              		@ args = 0, pretend = 0, frame = 8
 4719              		@ frame_needed = 1, uses_anonymous_args = 0
 4720              		@ link register save eliminated.
 4721 1568 80B4     		push	{r7}
 4722              		.cfi_def_cfa_offset 4
 4723              		.cfi_offset 7, -4
 4724 156a 83B0     		sub	sp, sp, #12
 4725              		.cfi_def_cfa_offset 16
 4726 156c 00AF     		add	r7, sp, #0
 4727              		.cfi_def_cfa_register 7
 4728 156e 7860     		str	r0, [r7, #4]
 4729 1570 0B46     		mov	r3, r1
 4730 1572 7B80     		strh	r3, [r7, #2]	@ movhi
2123:common/stm32f10x_tim.c ****   /* Check the parameters */
2124:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2125:common/stm32f10x_tim.c ****   assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
2126:common/stm32f10x_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 4731              		.loc 1 2126 0
 4732 1574 7B88     		ldrh	r3, [r7, #2]
 4733 1576 002B     		cmp	r3, #0
 4734 1578 08D0     		beq	.L149
2127:common/stm32f10x_tim.c ****   {
2128:common/stm32f10x_tim.c ****     /* Set the URS Bit */
2129:common/stm32f10x_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 4735              		.loc 1 2129 0
 4736 157a 7B68     		ldr	r3, [r7, #4]
 4737 157c 1B88     		ldrh	r3, [r3]	@ movhi
 4738 157e 9BB2     		uxth	r3, r3
 4739 1580 43F00403 		orr	r3, r3, #4
 4740 1584 9AB2     		uxth	r2, r3
 4741 1586 7B68     		ldr	r3, [r7, #4]
 4742 1588 1A80     		strh	r2, [r3]	@ movhi
2130:common/stm32f10x_tim.c ****   }
2131:common/stm32f10x_tim.c ****   else
2132:common/stm32f10x_tim.c ****   {
2133:common/stm32f10x_tim.c ****     /* Reset the URS Bit */
2134:common/stm32f10x_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
2135:common/stm32f10x_tim.c ****   }
2136:common/stm32f10x_tim.c **** }
 4743              		.loc 1 2136 0
 4744 158a 07E0     		b	.L151
ARM GAS  /tmp/ccRayNMu.s 			page 123


 4745              	.L149:
2134:common/stm32f10x_tim.c ****   }
 4746              		.loc 1 2134 0
 4747 158c 7B68     		ldr	r3, [r7, #4]
 4748 158e 1B88     		ldrh	r3, [r3]	@ movhi
 4749 1590 9BB2     		uxth	r3, r3
 4750 1592 23F00403 		bic	r3, r3, #4
 4751 1596 9AB2     		uxth	r2, r3
 4752 1598 7B68     		ldr	r3, [r7, #4]
 4753 159a 1A80     		strh	r2, [r3]	@ movhi
 4754              	.L151:
 4755              		.loc 1 2136 0
 4756 159c 00BF     		nop
 4757 159e 0C37     		adds	r7, r7, #12
 4758              		.cfi_def_cfa_offset 4
 4759 15a0 BD46     		mov	sp, r7
 4760              		.cfi_def_cfa_register 13
 4761              		@ sp needed
 4762 15a2 80BC     		pop	{r7}
 4763              		.cfi_restore 7
 4764              		.cfi_def_cfa_offset 0
 4765 15a4 7047     		bx	lr
 4766              		.cfi_endproc
 4767              	.LFE123:
 4768              		.size	TIM_UpdateRequestConfig, .-TIM_UpdateRequestConfig
 4769              		.align	1
 4770              		.global	TIM_SelectHallSensor
 4771              		.syntax unified
 4772              		.thumb
 4773              		.thumb_func
 4774              		.fpu softvfp
 4775              		.type	TIM_SelectHallSensor, %function
 4776              	TIM_SelectHallSensor:
 4777              	.LFB124:
2137:common/stm32f10x_tim.c **** 
2138:common/stm32f10x_tim.c **** /**
2139:common/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx's Hall sensor interface.
2140:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2141:common/stm32f10x_tim.c ****   * @param  NewState: new state of the TIMx Hall sensor interface.
2142:common/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
2143:common/stm32f10x_tim.c ****   * @retval None
2144:common/stm32f10x_tim.c ****   */
2145:common/stm32f10x_tim.c **** void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
2146:common/stm32f10x_tim.c **** {
 4778              		.loc 1 2146 0
 4779              		.cfi_startproc
 4780              		@ args = 0, pretend = 0, frame = 8
 4781              		@ frame_needed = 1, uses_anonymous_args = 0
 4782              		@ link register save eliminated.
 4783 15a6 80B4     		push	{r7}
 4784              		.cfi_def_cfa_offset 4
 4785              		.cfi_offset 7, -4
 4786 15a8 83B0     		sub	sp, sp, #12
 4787              		.cfi_def_cfa_offset 16
 4788 15aa 00AF     		add	r7, sp, #0
 4789              		.cfi_def_cfa_register 7
 4790 15ac 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccRayNMu.s 			page 124


 4791 15ae 0B46     		mov	r3, r1
 4792 15b0 FB70     		strb	r3, [r7, #3]
2147:common/stm32f10x_tim.c ****   /* Check the parameters */
2148:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2149:common/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2150:common/stm32f10x_tim.c ****   if (NewState != DISABLE)
 4793              		.loc 1 2150 0
 4794 15b2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4795 15b4 002B     		cmp	r3, #0
 4796 15b6 08D0     		beq	.L153
2151:common/stm32f10x_tim.c ****   {
2152:common/stm32f10x_tim.c ****     /* Set the TI1S Bit */
2153:common/stm32f10x_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
 4797              		.loc 1 2153 0
 4798 15b8 7B68     		ldr	r3, [r7, #4]
 4799 15ba 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4800 15bc 9BB2     		uxth	r3, r3
 4801 15be 43F08003 		orr	r3, r3, #128
 4802 15c2 9AB2     		uxth	r2, r3
 4803 15c4 7B68     		ldr	r3, [r7, #4]
 4804 15c6 9A80     		strh	r2, [r3, #4]	@ movhi
2154:common/stm32f10x_tim.c ****   }
2155:common/stm32f10x_tim.c ****   else
2156:common/stm32f10x_tim.c ****   {
2157:common/stm32f10x_tim.c ****     /* Reset the TI1S Bit */
2158:common/stm32f10x_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
2159:common/stm32f10x_tim.c ****   }
2160:common/stm32f10x_tim.c **** }
 4805              		.loc 1 2160 0
 4806 15c8 07E0     		b	.L155
 4807              	.L153:
2158:common/stm32f10x_tim.c ****   }
 4808              		.loc 1 2158 0
 4809 15ca 7B68     		ldr	r3, [r7, #4]
 4810 15cc 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4811 15ce 9BB2     		uxth	r3, r3
 4812 15d0 23F08003 		bic	r3, r3, #128
 4813 15d4 9AB2     		uxth	r2, r3
 4814 15d6 7B68     		ldr	r3, [r7, #4]
 4815 15d8 9A80     		strh	r2, [r3, #4]	@ movhi
 4816              	.L155:
 4817              		.loc 1 2160 0
 4818 15da 00BF     		nop
 4819 15dc 0C37     		adds	r7, r7, #12
 4820              		.cfi_def_cfa_offset 4
 4821 15de BD46     		mov	sp, r7
 4822              		.cfi_def_cfa_register 13
 4823              		@ sp needed
 4824 15e0 80BC     		pop	{r7}
 4825              		.cfi_restore 7
 4826              		.cfi_def_cfa_offset 0
 4827 15e2 7047     		bx	lr
 4828              		.cfi_endproc
 4829              	.LFE124:
 4830              		.size	TIM_SelectHallSensor, .-TIM_SelectHallSensor
 4831              		.align	1
 4832              		.global	TIM_SelectOnePulseMode
ARM GAS  /tmp/ccRayNMu.s 			page 125


 4833              		.syntax unified
 4834              		.thumb
 4835              		.thumb_func
 4836              		.fpu softvfp
 4837              		.type	TIM_SelectOnePulseMode, %function
 4838              	TIM_SelectOnePulseMode:
 4839              	.LFB125:
2161:common/stm32f10x_tim.c **** 
2162:common/stm32f10x_tim.c **** /**
2163:common/stm32f10x_tim.c ****   * @brief  Selects the TIMx's One Pulse Mode.
2164:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2165:common/stm32f10x_tim.c ****   * @param  TIM_OPMode: specifies the OPM Mode to be used.
2166:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2167:common/stm32f10x_tim.c ****   *     @arg TIM_OPMode_Single
2168:common/stm32f10x_tim.c ****   *     @arg TIM_OPMode_Repetitive
2169:common/stm32f10x_tim.c ****   * @retval None
2170:common/stm32f10x_tim.c ****   */
2171:common/stm32f10x_tim.c **** void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
2172:common/stm32f10x_tim.c **** {
 4840              		.loc 1 2172 0
 4841              		.cfi_startproc
 4842              		@ args = 0, pretend = 0, frame = 8
 4843              		@ frame_needed = 1, uses_anonymous_args = 0
 4844              		@ link register save eliminated.
 4845 15e4 80B4     		push	{r7}
 4846              		.cfi_def_cfa_offset 4
 4847              		.cfi_offset 7, -4
 4848 15e6 83B0     		sub	sp, sp, #12
 4849              		.cfi_def_cfa_offset 16
 4850 15e8 00AF     		add	r7, sp, #0
 4851              		.cfi_def_cfa_register 7
 4852 15ea 7860     		str	r0, [r7, #4]
 4853 15ec 0B46     		mov	r3, r1
 4854 15ee 7B80     		strh	r3, [r7, #2]	@ movhi
2173:common/stm32f10x_tim.c ****   /* Check the parameters */
2174:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2175:common/stm32f10x_tim.c ****   assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
2176:common/stm32f10x_tim.c ****   /* Reset the OPM Bit */
2177:common/stm32f10x_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 4855              		.loc 1 2177 0
 4856 15f0 7B68     		ldr	r3, [r7, #4]
 4857 15f2 1B88     		ldrh	r3, [r3]	@ movhi
 4858 15f4 9BB2     		uxth	r3, r3
 4859 15f6 23F00803 		bic	r3, r3, #8
 4860 15fa 9AB2     		uxth	r2, r3
 4861 15fc 7B68     		ldr	r3, [r7, #4]
 4862 15fe 1A80     		strh	r2, [r3]	@ movhi
2178:common/stm32f10x_tim.c ****   /* Configure the OPM Mode */
2179:common/stm32f10x_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 4863              		.loc 1 2179 0
 4864 1600 7B68     		ldr	r3, [r7, #4]
 4865 1602 1B88     		ldrh	r3, [r3]	@ movhi
 4866 1604 9AB2     		uxth	r2, r3
 4867 1606 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4868 1608 1343     		orrs	r3, r3, r2
 4869 160a 9AB2     		uxth	r2, r3
 4870 160c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccRayNMu.s 			page 126


 4871 160e 1A80     		strh	r2, [r3]	@ movhi
2180:common/stm32f10x_tim.c **** }
 4872              		.loc 1 2180 0
 4873 1610 00BF     		nop
 4874 1612 0C37     		adds	r7, r7, #12
 4875              		.cfi_def_cfa_offset 4
 4876 1614 BD46     		mov	sp, r7
 4877              		.cfi_def_cfa_register 13
 4878              		@ sp needed
 4879 1616 80BC     		pop	{r7}
 4880              		.cfi_restore 7
 4881              		.cfi_def_cfa_offset 0
 4882 1618 7047     		bx	lr
 4883              		.cfi_endproc
 4884              	.LFE125:
 4885              		.size	TIM_SelectOnePulseMode, .-TIM_SelectOnePulseMode
 4886              		.align	1
 4887              		.global	TIM_SelectOutputTrigger
 4888              		.syntax unified
 4889              		.thumb
 4890              		.thumb_func
 4891              		.fpu softvfp
 4892              		.type	TIM_SelectOutputTrigger, %function
 4893              	TIM_SelectOutputTrigger:
 4894              	.LFB126:
2181:common/stm32f10x_tim.c **** 
2182:common/stm32f10x_tim.c **** /**
2183:common/stm32f10x_tim.c ****   * @brief  Selects the TIMx Trigger Output Mode.
2184:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7, 8, 9, 12 or 15 to select the TIM peripheral.
2185:common/stm32f10x_tim.c ****   * @param  TIM_TRGOSource: specifies the Trigger Output source.
2186:common/stm32f10x_tim.c ****   *   This paramter can be one of the following values:
2187:common/stm32f10x_tim.c ****   *
2188:common/stm32f10x_tim.c ****   *  - For all TIMx
2189:common/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_Reset:  The UG bit in the TIM_EGR register is used as the trigger outpu
2190:common/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_Enable: The Counter Enable CEN is used as the trigger output (TRGO).
2191:common/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_Update: The update event is selected as the trigger output (TRGO).
2192:common/stm32f10x_tim.c ****   *
2193:common/stm32f10x_tim.c ****   *  - For all TIMx except TIM6 and TIM7
2194:common/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC1: The trigger output sends a positive pulse when the CC1IF flag
2195:common/stm32f10x_tim.c ****   *                              is to be set, as soon as a capture or compare match occurs (TRGO).
2196:common/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC1Ref: OC1REF signal is used as the trigger output (TRGO).
2197:common/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC2Ref: OC2REF signal is used as the trigger output (TRGO).
2198:common/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC3Ref: OC3REF signal is used as the trigger output (TRGO).
2199:common/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
2200:common/stm32f10x_tim.c ****   *
2201:common/stm32f10x_tim.c ****   * @retval None
2202:common/stm32f10x_tim.c ****   */
2203:common/stm32f10x_tim.c **** void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
2204:common/stm32f10x_tim.c **** {
 4895              		.loc 1 2204 0
 4896              		.cfi_startproc
 4897              		@ args = 0, pretend = 0, frame = 8
 4898              		@ frame_needed = 1, uses_anonymous_args = 0
 4899              		@ link register save eliminated.
 4900 161a 80B4     		push	{r7}
 4901              		.cfi_def_cfa_offset 4
 4902              		.cfi_offset 7, -4
ARM GAS  /tmp/ccRayNMu.s 			page 127


 4903 161c 83B0     		sub	sp, sp, #12
 4904              		.cfi_def_cfa_offset 16
 4905 161e 00AF     		add	r7, sp, #0
 4906              		.cfi_def_cfa_register 7
 4907 1620 7860     		str	r0, [r7, #4]
 4908 1622 0B46     		mov	r3, r1
 4909 1624 7B80     		strh	r3, [r7, #2]	@ movhi
2205:common/stm32f10x_tim.c ****   /* Check the parameters */
2206:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST7_PERIPH(TIMx));
2207:common/stm32f10x_tim.c ****   assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
2208:common/stm32f10x_tim.c ****   /* Reset the MMS Bits */
2209:common/stm32f10x_tim.c ****   TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 4910              		.loc 1 2209 0
 4911 1626 7B68     		ldr	r3, [r7, #4]
 4912 1628 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4913 162a 9BB2     		uxth	r3, r3
 4914 162c 23F07003 		bic	r3, r3, #112
 4915 1630 9AB2     		uxth	r2, r3
 4916 1632 7B68     		ldr	r3, [r7, #4]
 4917 1634 9A80     		strh	r2, [r3, #4]	@ movhi
2210:common/stm32f10x_tim.c ****   /* Select the TRGO source */
2211:common/stm32f10x_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
 4918              		.loc 1 2211 0
 4919 1636 7B68     		ldr	r3, [r7, #4]
 4920 1638 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4921 163a 9AB2     		uxth	r2, r3
 4922 163c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4923 163e 1343     		orrs	r3, r3, r2
 4924 1640 9AB2     		uxth	r2, r3
 4925 1642 7B68     		ldr	r3, [r7, #4]
 4926 1644 9A80     		strh	r2, [r3, #4]	@ movhi
2212:common/stm32f10x_tim.c **** }
 4927              		.loc 1 2212 0
 4928 1646 00BF     		nop
 4929 1648 0C37     		adds	r7, r7, #12
 4930              		.cfi_def_cfa_offset 4
 4931 164a BD46     		mov	sp, r7
 4932              		.cfi_def_cfa_register 13
 4933              		@ sp needed
 4934 164c 80BC     		pop	{r7}
 4935              		.cfi_restore 7
 4936              		.cfi_def_cfa_offset 0
 4937 164e 7047     		bx	lr
 4938              		.cfi_endproc
 4939              	.LFE126:
 4940              		.size	TIM_SelectOutputTrigger, .-TIM_SelectOutputTrigger
 4941              		.align	1
 4942              		.global	TIM_SelectSlaveMode
 4943              		.syntax unified
 4944              		.thumb
 4945              		.thumb_func
 4946              		.fpu softvfp
 4947              		.type	TIM_SelectSlaveMode, %function
 4948              	TIM_SelectSlaveMode:
 4949              	.LFB127:
2213:common/stm32f10x_tim.c **** 
2214:common/stm32f10x_tim.c **** /**
ARM GAS  /tmp/ccRayNMu.s 			page 128


2215:common/stm32f10x_tim.c ****   * @brief  Selects the TIMx Slave Mode.
2216:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2217:common/stm32f10x_tim.c ****   * @param  TIM_SlaveMode: specifies the Timer Slave Mode.
2218:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2219:common/stm32f10x_tim.c ****   *     @arg TIM_SlaveMode_Reset: Rising edge of the selected trigger signal (TRGI) re-initializes
2220:common/stm32f10x_tim.c ****   *                               the counter and triggers an update of the registers.
2221:common/stm32f10x_tim.c ****   *     @arg TIM_SlaveMode_Gated:     The counter clock is enabled when the trigger signal (TRGI) i
2222:common/stm32f10x_tim.c ****   *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
2223:common/stm32f10x_tim.c ****   *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
2224:common/stm32f10x_tim.c ****   * @retval None
2225:common/stm32f10x_tim.c ****   */
2226:common/stm32f10x_tim.c **** void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
2227:common/stm32f10x_tim.c **** {
 4950              		.loc 1 2227 0
 4951              		.cfi_startproc
 4952              		@ args = 0, pretend = 0, frame = 8
 4953              		@ frame_needed = 1, uses_anonymous_args = 0
 4954              		@ link register save eliminated.
 4955 1650 80B4     		push	{r7}
 4956              		.cfi_def_cfa_offset 4
 4957              		.cfi_offset 7, -4
 4958 1652 83B0     		sub	sp, sp, #12
 4959              		.cfi_def_cfa_offset 16
 4960 1654 00AF     		add	r7, sp, #0
 4961              		.cfi_def_cfa_register 7
 4962 1656 7860     		str	r0, [r7, #4]
 4963 1658 0B46     		mov	r3, r1
 4964 165a 7B80     		strh	r3, [r7, #2]	@ movhi
2228:common/stm32f10x_tim.c ****   /* Check the parameters */
2229:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2230:common/stm32f10x_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
2231:common/stm32f10x_tim.c ****  /* Reset the SMS Bits */
2232:common/stm32f10x_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 4965              		.loc 1 2232 0
 4966 165c 7B68     		ldr	r3, [r7, #4]
 4967 165e 1B89     		ldrh	r3, [r3, #8]	@ movhi
 4968 1660 9BB2     		uxth	r3, r3
 4969 1662 23F00703 		bic	r3, r3, #7
 4970 1666 9AB2     		uxth	r2, r3
 4971 1668 7B68     		ldr	r3, [r7, #4]
 4972 166a 1A81     		strh	r2, [r3, #8]	@ movhi
2233:common/stm32f10x_tim.c ****   /* Select the Slave Mode */
2234:common/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
 4973              		.loc 1 2234 0
 4974 166c 7B68     		ldr	r3, [r7, #4]
 4975 166e 1B89     		ldrh	r3, [r3, #8]	@ movhi
 4976 1670 9AB2     		uxth	r2, r3
 4977 1672 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4978 1674 1343     		orrs	r3, r3, r2
 4979 1676 9AB2     		uxth	r2, r3
 4980 1678 7B68     		ldr	r3, [r7, #4]
 4981 167a 1A81     		strh	r2, [r3, #8]	@ movhi
2235:common/stm32f10x_tim.c **** }
 4982              		.loc 1 2235 0
 4983 167c 00BF     		nop
 4984 167e 0C37     		adds	r7, r7, #12
 4985              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRayNMu.s 			page 129


 4986 1680 BD46     		mov	sp, r7
 4987              		.cfi_def_cfa_register 13
 4988              		@ sp needed
 4989 1682 80BC     		pop	{r7}
 4990              		.cfi_restore 7
 4991              		.cfi_def_cfa_offset 0
 4992 1684 7047     		bx	lr
 4993              		.cfi_endproc
 4994              	.LFE127:
 4995              		.size	TIM_SelectSlaveMode, .-TIM_SelectSlaveMode
 4996              		.align	1
 4997              		.global	TIM_SelectMasterSlaveMode
 4998              		.syntax unified
 4999              		.thumb
 5000              		.thumb_func
 5001              		.fpu softvfp
 5002              		.type	TIM_SelectMasterSlaveMode, %function
 5003              	TIM_SelectMasterSlaveMode:
 5004              	.LFB128:
2236:common/stm32f10x_tim.c **** 
2237:common/stm32f10x_tim.c **** /**
2238:common/stm32f10x_tim.c ****   * @brief  Sets or Resets the TIMx Master/Slave Mode.
2239:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2240:common/stm32f10x_tim.c ****   * @param  TIM_MasterSlaveMode: specifies the Timer Master Slave Mode.
2241:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2242:common/stm32f10x_tim.c ****   *     @arg TIM_MasterSlaveMode_Enable: synchronization between the current timer
2243:common/stm32f10x_tim.c ****   *                                      and its slaves (through TRGO).
2244:common/stm32f10x_tim.c ****   *     @arg TIM_MasterSlaveMode_Disable: No action
2245:common/stm32f10x_tim.c ****   * @retval None
2246:common/stm32f10x_tim.c ****   */
2247:common/stm32f10x_tim.c **** void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
2248:common/stm32f10x_tim.c **** {
 5005              		.loc 1 2248 0
 5006              		.cfi_startproc
 5007              		@ args = 0, pretend = 0, frame = 8
 5008              		@ frame_needed = 1, uses_anonymous_args = 0
 5009              		@ link register save eliminated.
 5010 1686 80B4     		push	{r7}
 5011              		.cfi_def_cfa_offset 4
 5012              		.cfi_offset 7, -4
 5013 1688 83B0     		sub	sp, sp, #12
 5014              		.cfi_def_cfa_offset 16
 5015 168a 00AF     		add	r7, sp, #0
 5016              		.cfi_def_cfa_register 7
 5017 168c 7860     		str	r0, [r7, #4]
 5018 168e 0B46     		mov	r3, r1
 5019 1690 7B80     		strh	r3, [r7, #2]	@ movhi
2249:common/stm32f10x_tim.c ****   /* Check the parameters */
2250:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2251:common/stm32f10x_tim.c ****   assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
2252:common/stm32f10x_tim.c ****   /* Reset the MSM Bit */
2253:common/stm32f10x_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 5020              		.loc 1 2253 0
 5021 1692 7B68     		ldr	r3, [r7, #4]
 5022 1694 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5023 1696 9BB2     		uxth	r3, r3
 5024 1698 23F08003 		bic	r3, r3, #128
ARM GAS  /tmp/ccRayNMu.s 			page 130


 5025 169c 9AB2     		uxth	r2, r3
 5026 169e 7B68     		ldr	r3, [r7, #4]
 5027 16a0 1A81     		strh	r2, [r3, #8]	@ movhi
2254:common/stm32f10x_tim.c ****   
2255:common/stm32f10x_tim.c ****   /* Set or Reset the MSM Bit */
2256:common/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
 5028              		.loc 1 2256 0
 5029 16a2 7B68     		ldr	r3, [r7, #4]
 5030 16a4 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5031 16a6 9AB2     		uxth	r2, r3
 5032 16a8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5033 16aa 1343     		orrs	r3, r3, r2
 5034 16ac 9AB2     		uxth	r2, r3
 5035 16ae 7B68     		ldr	r3, [r7, #4]
 5036 16b0 1A81     		strh	r2, [r3, #8]	@ movhi
2257:common/stm32f10x_tim.c **** }
 5037              		.loc 1 2257 0
 5038 16b2 00BF     		nop
 5039 16b4 0C37     		adds	r7, r7, #12
 5040              		.cfi_def_cfa_offset 4
 5041 16b6 BD46     		mov	sp, r7
 5042              		.cfi_def_cfa_register 13
 5043              		@ sp needed
 5044 16b8 80BC     		pop	{r7}
 5045              		.cfi_restore 7
 5046              		.cfi_def_cfa_offset 0
 5047 16ba 7047     		bx	lr
 5048              		.cfi_endproc
 5049              	.LFE128:
 5050              		.size	TIM_SelectMasterSlaveMode, .-TIM_SelectMasterSlaveMode
 5051              		.align	1
 5052              		.global	TIM_SetCounter
 5053              		.syntax unified
 5054              		.thumb
 5055              		.thumb_func
 5056              		.fpu softvfp
 5057              		.type	TIM_SetCounter, %function
 5058              	TIM_SetCounter:
 5059              	.LFB129:
2258:common/stm32f10x_tim.c **** 
2259:common/stm32f10x_tim.c **** /**
2260:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Counter Register value
2261:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2262:common/stm32f10x_tim.c ****   * @param  Counter: specifies the Counter register new value.
2263:common/stm32f10x_tim.c ****   * @retval None
2264:common/stm32f10x_tim.c ****   */
2265:common/stm32f10x_tim.c **** void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
2266:common/stm32f10x_tim.c **** {
 5060              		.loc 1 2266 0
 5061              		.cfi_startproc
 5062              		@ args = 0, pretend = 0, frame = 8
 5063              		@ frame_needed = 1, uses_anonymous_args = 0
 5064              		@ link register save eliminated.
 5065 16bc 80B4     		push	{r7}
 5066              		.cfi_def_cfa_offset 4
 5067              		.cfi_offset 7, -4
 5068 16be 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccRayNMu.s 			page 131


 5069              		.cfi_def_cfa_offset 16
 5070 16c0 00AF     		add	r7, sp, #0
 5071              		.cfi_def_cfa_register 7
 5072 16c2 7860     		str	r0, [r7, #4]
 5073 16c4 0B46     		mov	r3, r1
 5074 16c6 7B80     		strh	r3, [r7, #2]	@ movhi
2267:common/stm32f10x_tim.c ****   /* Check the parameters */
2268:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2269:common/stm32f10x_tim.c ****   /* Set the Counter Register value */
2270:common/stm32f10x_tim.c ****   TIMx->CNT = Counter;
 5075              		.loc 1 2270 0
 5076 16c8 7B68     		ldr	r3, [r7, #4]
 5077 16ca 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5078 16cc 9A84     		strh	r2, [r3, #36]	@ movhi
2271:common/stm32f10x_tim.c **** }
 5079              		.loc 1 2271 0
 5080 16ce 00BF     		nop
 5081 16d0 0C37     		adds	r7, r7, #12
 5082              		.cfi_def_cfa_offset 4
 5083 16d2 BD46     		mov	sp, r7
 5084              		.cfi_def_cfa_register 13
 5085              		@ sp needed
 5086 16d4 80BC     		pop	{r7}
 5087              		.cfi_restore 7
 5088              		.cfi_def_cfa_offset 0
 5089 16d6 7047     		bx	lr
 5090              		.cfi_endproc
 5091              	.LFE129:
 5092              		.size	TIM_SetCounter, .-TIM_SetCounter
 5093              		.align	1
 5094              		.global	TIM_SetAutoreload
 5095              		.syntax unified
 5096              		.thumb
 5097              		.thumb_func
 5098              		.fpu softvfp
 5099              		.type	TIM_SetAutoreload, %function
 5100              	TIM_SetAutoreload:
 5101              	.LFB130:
2272:common/stm32f10x_tim.c **** 
2273:common/stm32f10x_tim.c **** /**
2274:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Autoreload Register value
2275:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2276:common/stm32f10x_tim.c ****   * @param  Autoreload: specifies the Autoreload register new value.
2277:common/stm32f10x_tim.c ****   * @retval None
2278:common/stm32f10x_tim.c ****   */
2279:common/stm32f10x_tim.c **** void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
2280:common/stm32f10x_tim.c **** {
 5102              		.loc 1 2280 0
 5103              		.cfi_startproc
 5104              		@ args = 0, pretend = 0, frame = 8
 5105              		@ frame_needed = 1, uses_anonymous_args = 0
 5106              		@ link register save eliminated.
 5107 16d8 80B4     		push	{r7}
 5108              		.cfi_def_cfa_offset 4
 5109              		.cfi_offset 7, -4
 5110 16da 83B0     		sub	sp, sp, #12
 5111              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccRayNMu.s 			page 132


 5112 16dc 00AF     		add	r7, sp, #0
 5113              		.cfi_def_cfa_register 7
 5114 16de 7860     		str	r0, [r7, #4]
 5115 16e0 0B46     		mov	r3, r1
 5116 16e2 7B80     		strh	r3, [r7, #2]	@ movhi
2281:common/stm32f10x_tim.c ****   /* Check the parameters */
2282:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2283:common/stm32f10x_tim.c ****   /* Set the Autoreload Register value */
2284:common/stm32f10x_tim.c ****   TIMx->ARR = Autoreload;
 5117              		.loc 1 2284 0
 5118 16e4 7B68     		ldr	r3, [r7, #4]
 5119 16e6 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5120 16e8 9A85     		strh	r2, [r3, #44]	@ movhi
2285:common/stm32f10x_tim.c **** }
 5121              		.loc 1 2285 0
 5122 16ea 00BF     		nop
 5123 16ec 0C37     		adds	r7, r7, #12
 5124              		.cfi_def_cfa_offset 4
 5125 16ee BD46     		mov	sp, r7
 5126              		.cfi_def_cfa_register 13
 5127              		@ sp needed
 5128 16f0 80BC     		pop	{r7}
 5129              		.cfi_restore 7
 5130              		.cfi_def_cfa_offset 0
 5131 16f2 7047     		bx	lr
 5132              		.cfi_endproc
 5133              	.LFE130:
 5134              		.size	TIM_SetAutoreload, .-TIM_SetAutoreload
 5135              		.align	1
 5136              		.global	TIM_SetCompare1
 5137              		.syntax unified
 5138              		.thumb
 5139              		.thumb_func
 5140              		.fpu softvfp
 5141              		.type	TIM_SetCompare1, %function
 5142              	TIM_SetCompare1:
 5143              	.LFB131:
2286:common/stm32f10x_tim.c **** 
2287:common/stm32f10x_tim.c **** /**
2288:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Capture Compare1 Register value
2289:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2290:common/stm32f10x_tim.c ****   * @param  Compare1: specifies the Capture Compare1 register new value.
2291:common/stm32f10x_tim.c ****   * @retval None
2292:common/stm32f10x_tim.c ****   */
2293:common/stm32f10x_tim.c **** void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
2294:common/stm32f10x_tim.c **** {
 5144              		.loc 1 2294 0
 5145              		.cfi_startproc
 5146              		@ args = 0, pretend = 0, frame = 8
 5147              		@ frame_needed = 1, uses_anonymous_args = 0
 5148              		@ link register save eliminated.
 5149 16f4 80B4     		push	{r7}
 5150              		.cfi_def_cfa_offset 4
 5151              		.cfi_offset 7, -4
 5152 16f6 83B0     		sub	sp, sp, #12
 5153              		.cfi_def_cfa_offset 16
 5154 16f8 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccRayNMu.s 			page 133


 5155              		.cfi_def_cfa_register 7
 5156 16fa 7860     		str	r0, [r7, #4]
 5157 16fc 0B46     		mov	r3, r1
 5158 16fe 7B80     		strh	r3, [r7, #2]	@ movhi
2295:common/stm32f10x_tim.c ****   /* Check the parameters */
2296:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2297:common/stm32f10x_tim.c ****   /* Set the Capture Compare1 Register value */
2298:common/stm32f10x_tim.c ****   TIMx->CCR1 = Compare1;
 5159              		.loc 1 2298 0
 5160 1700 7B68     		ldr	r3, [r7, #4]
 5161 1702 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5162 1704 9A86     		strh	r2, [r3, #52]	@ movhi
2299:common/stm32f10x_tim.c **** }
 5163              		.loc 1 2299 0
 5164 1706 00BF     		nop
 5165 1708 0C37     		adds	r7, r7, #12
 5166              		.cfi_def_cfa_offset 4
 5167 170a BD46     		mov	sp, r7
 5168              		.cfi_def_cfa_register 13
 5169              		@ sp needed
 5170 170c 80BC     		pop	{r7}
 5171              		.cfi_restore 7
 5172              		.cfi_def_cfa_offset 0
 5173 170e 7047     		bx	lr
 5174              		.cfi_endproc
 5175              	.LFE131:
 5176              		.size	TIM_SetCompare1, .-TIM_SetCompare1
 5177              		.align	1
 5178              		.global	TIM_SetCompare2
 5179              		.syntax unified
 5180              		.thumb
 5181              		.thumb_func
 5182              		.fpu softvfp
 5183              		.type	TIM_SetCompare2, %function
 5184              	TIM_SetCompare2:
 5185              	.LFB132:
2300:common/stm32f10x_tim.c **** 
2301:common/stm32f10x_tim.c **** /**
2302:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Capture Compare2 Register value
2303:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2304:common/stm32f10x_tim.c ****   * @param  Compare2: specifies the Capture Compare2 register new value.
2305:common/stm32f10x_tim.c ****   * @retval None
2306:common/stm32f10x_tim.c ****   */
2307:common/stm32f10x_tim.c **** void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
2308:common/stm32f10x_tim.c **** {
 5186              		.loc 1 2308 0
 5187              		.cfi_startproc
 5188              		@ args = 0, pretend = 0, frame = 8
 5189              		@ frame_needed = 1, uses_anonymous_args = 0
 5190              		@ link register save eliminated.
 5191 1710 80B4     		push	{r7}
 5192              		.cfi_def_cfa_offset 4
 5193              		.cfi_offset 7, -4
 5194 1712 83B0     		sub	sp, sp, #12
 5195              		.cfi_def_cfa_offset 16
 5196 1714 00AF     		add	r7, sp, #0
 5197              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccRayNMu.s 			page 134


 5198 1716 7860     		str	r0, [r7, #4]
 5199 1718 0B46     		mov	r3, r1
 5200 171a 7B80     		strh	r3, [r7, #2]	@ movhi
2309:common/stm32f10x_tim.c ****   /* Check the parameters */
2310:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2311:common/stm32f10x_tim.c ****   /* Set the Capture Compare2 Register value */
2312:common/stm32f10x_tim.c ****   TIMx->CCR2 = Compare2;
 5201              		.loc 1 2312 0
 5202 171c 7B68     		ldr	r3, [r7, #4]
 5203 171e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5204 1720 1A87     		strh	r2, [r3, #56]	@ movhi
2313:common/stm32f10x_tim.c **** }
 5205              		.loc 1 2313 0
 5206 1722 00BF     		nop
 5207 1724 0C37     		adds	r7, r7, #12
 5208              		.cfi_def_cfa_offset 4
 5209 1726 BD46     		mov	sp, r7
 5210              		.cfi_def_cfa_register 13
 5211              		@ sp needed
 5212 1728 80BC     		pop	{r7}
 5213              		.cfi_restore 7
 5214              		.cfi_def_cfa_offset 0
 5215 172a 7047     		bx	lr
 5216              		.cfi_endproc
 5217              	.LFE132:
 5218              		.size	TIM_SetCompare2, .-TIM_SetCompare2
 5219              		.align	1
 5220              		.global	TIM_SetCompare3
 5221              		.syntax unified
 5222              		.thumb
 5223              		.thumb_func
 5224              		.fpu softvfp
 5225              		.type	TIM_SetCompare3, %function
 5226              	TIM_SetCompare3:
 5227              	.LFB133:
2314:common/stm32f10x_tim.c **** 
2315:common/stm32f10x_tim.c **** /**
2316:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Capture Compare3 Register value
2317:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2318:common/stm32f10x_tim.c ****   * @param  Compare3: specifies the Capture Compare3 register new value.
2319:common/stm32f10x_tim.c ****   * @retval None
2320:common/stm32f10x_tim.c ****   */
2321:common/stm32f10x_tim.c **** void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
2322:common/stm32f10x_tim.c **** {
 5228              		.loc 1 2322 0
 5229              		.cfi_startproc
 5230              		@ args = 0, pretend = 0, frame = 8
 5231              		@ frame_needed = 1, uses_anonymous_args = 0
 5232              		@ link register save eliminated.
 5233 172c 80B4     		push	{r7}
 5234              		.cfi_def_cfa_offset 4
 5235              		.cfi_offset 7, -4
 5236 172e 83B0     		sub	sp, sp, #12
 5237              		.cfi_def_cfa_offset 16
 5238 1730 00AF     		add	r7, sp, #0
 5239              		.cfi_def_cfa_register 7
 5240 1732 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccRayNMu.s 			page 135


 5241 1734 0B46     		mov	r3, r1
 5242 1736 7B80     		strh	r3, [r7, #2]	@ movhi
2323:common/stm32f10x_tim.c ****   /* Check the parameters */
2324:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2325:common/stm32f10x_tim.c ****   /* Set the Capture Compare3 Register value */
2326:common/stm32f10x_tim.c ****   TIMx->CCR3 = Compare3;
 5243              		.loc 1 2326 0
 5244 1738 7B68     		ldr	r3, [r7, #4]
 5245 173a 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5246 173c 9A87     		strh	r2, [r3, #60]	@ movhi
2327:common/stm32f10x_tim.c **** }
 5247              		.loc 1 2327 0
 5248 173e 00BF     		nop
 5249 1740 0C37     		adds	r7, r7, #12
 5250              		.cfi_def_cfa_offset 4
 5251 1742 BD46     		mov	sp, r7
 5252              		.cfi_def_cfa_register 13
 5253              		@ sp needed
 5254 1744 80BC     		pop	{r7}
 5255              		.cfi_restore 7
 5256              		.cfi_def_cfa_offset 0
 5257 1746 7047     		bx	lr
 5258              		.cfi_endproc
 5259              	.LFE133:
 5260              		.size	TIM_SetCompare3, .-TIM_SetCompare3
 5261              		.align	1
 5262              		.global	TIM_SetCompare4
 5263              		.syntax unified
 5264              		.thumb
 5265              		.thumb_func
 5266              		.fpu softvfp
 5267              		.type	TIM_SetCompare4, %function
 5268              	TIM_SetCompare4:
 5269              	.LFB134:
2328:common/stm32f10x_tim.c **** 
2329:common/stm32f10x_tim.c **** /**
2330:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Capture Compare4 Register value
2331:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2332:common/stm32f10x_tim.c ****   * @param  Compare4: specifies the Capture Compare4 register new value.
2333:common/stm32f10x_tim.c ****   * @retval None
2334:common/stm32f10x_tim.c ****   */
2335:common/stm32f10x_tim.c **** void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
2336:common/stm32f10x_tim.c **** {
 5270              		.loc 1 2336 0
 5271              		.cfi_startproc
 5272              		@ args = 0, pretend = 0, frame = 8
 5273              		@ frame_needed = 1, uses_anonymous_args = 0
 5274              		@ link register save eliminated.
 5275 1748 80B4     		push	{r7}
 5276              		.cfi_def_cfa_offset 4
 5277              		.cfi_offset 7, -4
 5278 174a 83B0     		sub	sp, sp, #12
 5279              		.cfi_def_cfa_offset 16
 5280 174c 00AF     		add	r7, sp, #0
 5281              		.cfi_def_cfa_register 7
 5282 174e 7860     		str	r0, [r7, #4]
 5283 1750 0B46     		mov	r3, r1
ARM GAS  /tmp/ccRayNMu.s 			page 136


 5284 1752 7B80     		strh	r3, [r7, #2]	@ movhi
2337:common/stm32f10x_tim.c ****   /* Check the parameters */
2338:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2339:common/stm32f10x_tim.c ****   /* Set the Capture Compare4 Register value */
2340:common/stm32f10x_tim.c ****   TIMx->CCR4 = Compare4;
 5285              		.loc 1 2340 0
 5286 1754 7B68     		ldr	r3, [r7, #4]
 5287 1756 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5288 1758 A3F84020 		strh	r2, [r3, #64]	@ movhi
2341:common/stm32f10x_tim.c **** }
 5289              		.loc 1 2341 0
 5290 175c 00BF     		nop
 5291 175e 0C37     		adds	r7, r7, #12
 5292              		.cfi_def_cfa_offset 4
 5293 1760 BD46     		mov	sp, r7
 5294              		.cfi_def_cfa_register 13
 5295              		@ sp needed
 5296 1762 80BC     		pop	{r7}
 5297              		.cfi_restore 7
 5298              		.cfi_def_cfa_offset 0
 5299 1764 7047     		bx	lr
 5300              		.cfi_endproc
 5301              	.LFE134:
 5302              		.size	TIM_SetCompare4, .-TIM_SetCompare4
 5303              		.align	1
 5304              		.global	TIM_SetIC1Prescaler
 5305              		.syntax unified
 5306              		.thumb
 5307              		.thumb_func
 5308              		.fpu softvfp
 5309              		.type	TIM_SetIC1Prescaler, %function
 5310              	TIM_SetIC1Prescaler:
 5311              	.LFB135:
2342:common/stm32f10x_tim.c **** 
2343:common/stm32f10x_tim.c **** /**
2344:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Input Capture 1 prescaler.
2345:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2346:common/stm32f10x_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture1 prescaler new value.
2347:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2348:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV1: no prescaler
2349:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2350:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2351:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2352:common/stm32f10x_tim.c ****   * @retval None
2353:common/stm32f10x_tim.c ****   */
2354:common/stm32f10x_tim.c **** void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2355:common/stm32f10x_tim.c **** {
 5312              		.loc 1 2355 0
 5313              		.cfi_startproc
 5314              		@ args = 0, pretend = 0, frame = 8
 5315              		@ frame_needed = 1, uses_anonymous_args = 0
 5316              		@ link register save eliminated.
 5317 1766 80B4     		push	{r7}
 5318              		.cfi_def_cfa_offset 4
 5319              		.cfi_offset 7, -4
 5320 1768 83B0     		sub	sp, sp, #12
 5321              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccRayNMu.s 			page 137


 5322 176a 00AF     		add	r7, sp, #0
 5323              		.cfi_def_cfa_register 7
 5324 176c 7860     		str	r0, [r7, #4]
 5325 176e 0B46     		mov	r3, r1
 5326 1770 7B80     		strh	r3, [r7, #2]	@ movhi
2356:common/stm32f10x_tim.c ****   /* Check the parameters */
2357:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2358:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2359:common/stm32f10x_tim.c ****   /* Reset the IC1PSC Bits */
2360:common/stm32f10x_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 5327              		.loc 1 2360 0
 5328 1772 7B68     		ldr	r3, [r7, #4]
 5329 1774 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 5330 1776 9BB2     		uxth	r3, r3
 5331 1778 23F00C03 		bic	r3, r3, #12
 5332 177c 9AB2     		uxth	r2, r3
 5333 177e 7B68     		ldr	r3, [r7, #4]
 5334 1780 1A83     		strh	r2, [r3, #24]	@ movhi
2361:common/stm32f10x_tim.c ****   /* Set the IC1PSC value */
2362:common/stm32f10x_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
 5335              		.loc 1 2362 0
 5336 1782 7B68     		ldr	r3, [r7, #4]
 5337 1784 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 5338 1786 9AB2     		uxth	r2, r3
 5339 1788 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5340 178a 1343     		orrs	r3, r3, r2
 5341 178c 9AB2     		uxth	r2, r3
 5342 178e 7B68     		ldr	r3, [r7, #4]
 5343 1790 1A83     		strh	r2, [r3, #24]	@ movhi
2363:common/stm32f10x_tim.c **** }
 5344              		.loc 1 2363 0
 5345 1792 00BF     		nop
 5346 1794 0C37     		adds	r7, r7, #12
 5347              		.cfi_def_cfa_offset 4
 5348 1796 BD46     		mov	sp, r7
 5349              		.cfi_def_cfa_register 13
 5350              		@ sp needed
 5351 1798 80BC     		pop	{r7}
 5352              		.cfi_restore 7
 5353              		.cfi_def_cfa_offset 0
 5354 179a 7047     		bx	lr
 5355              		.cfi_endproc
 5356              	.LFE135:
 5357              		.size	TIM_SetIC1Prescaler, .-TIM_SetIC1Prescaler
 5358              		.align	1
 5359              		.global	TIM_SetIC2Prescaler
 5360              		.syntax unified
 5361              		.thumb
 5362              		.thumb_func
 5363              		.fpu softvfp
 5364              		.type	TIM_SetIC2Prescaler, %function
 5365              	TIM_SetIC2Prescaler:
 5366              	.LFB136:
2364:common/stm32f10x_tim.c **** 
2365:common/stm32f10x_tim.c **** /**
2366:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Input Capture 2 prescaler.
2367:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
ARM GAS  /tmp/ccRayNMu.s 			page 138


2368:common/stm32f10x_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture2 prescaler new value.
2369:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2370:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV1: no prescaler
2371:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2372:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2373:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2374:common/stm32f10x_tim.c ****   * @retval None
2375:common/stm32f10x_tim.c ****   */
2376:common/stm32f10x_tim.c **** void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2377:common/stm32f10x_tim.c **** {
 5367              		.loc 1 2377 0
 5368              		.cfi_startproc
 5369              		@ args = 0, pretend = 0, frame = 8
 5370              		@ frame_needed = 1, uses_anonymous_args = 0
 5371              		@ link register save eliminated.
 5372 179c 80B4     		push	{r7}
 5373              		.cfi_def_cfa_offset 4
 5374              		.cfi_offset 7, -4
 5375 179e 83B0     		sub	sp, sp, #12
 5376              		.cfi_def_cfa_offset 16
 5377 17a0 00AF     		add	r7, sp, #0
 5378              		.cfi_def_cfa_register 7
 5379 17a2 7860     		str	r0, [r7, #4]
 5380 17a4 0B46     		mov	r3, r1
 5381 17a6 7B80     		strh	r3, [r7, #2]	@ movhi
2378:common/stm32f10x_tim.c ****   /* Check the parameters */
2379:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2380:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2381:common/stm32f10x_tim.c ****   /* Reset the IC2PSC Bits */
2382:common/stm32f10x_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 5382              		.loc 1 2382 0
 5383 17a8 7B68     		ldr	r3, [r7, #4]
 5384 17aa 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 5385 17ac 9BB2     		uxth	r3, r3
 5386 17ae 23F44063 		bic	r3, r3, #3072
 5387 17b2 9AB2     		uxth	r2, r3
 5388 17b4 7B68     		ldr	r3, [r7, #4]
 5389 17b6 1A83     		strh	r2, [r3, #24]	@ movhi
2383:common/stm32f10x_tim.c ****   /* Set the IC2PSC value */
2384:common/stm32f10x_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 5390              		.loc 1 2384 0
 5391 17b8 7B68     		ldr	r3, [r7, #4]
 5392 17ba 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 5393 17bc 9AB2     		uxth	r2, r3
 5394 17be 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5395 17c0 1B02     		lsls	r3, r3, #8
 5396 17c2 9BB2     		uxth	r3, r3
 5397 17c4 1343     		orrs	r3, r3, r2
 5398 17c6 9AB2     		uxth	r2, r3
 5399 17c8 7B68     		ldr	r3, [r7, #4]
 5400 17ca 1A83     		strh	r2, [r3, #24]	@ movhi
2385:common/stm32f10x_tim.c **** }
 5401              		.loc 1 2385 0
 5402 17cc 00BF     		nop
 5403 17ce 0C37     		adds	r7, r7, #12
 5404              		.cfi_def_cfa_offset 4
 5405 17d0 BD46     		mov	sp, r7
ARM GAS  /tmp/ccRayNMu.s 			page 139


 5406              		.cfi_def_cfa_register 13
 5407              		@ sp needed
 5408 17d2 80BC     		pop	{r7}
 5409              		.cfi_restore 7
 5410              		.cfi_def_cfa_offset 0
 5411 17d4 7047     		bx	lr
 5412              		.cfi_endproc
 5413              	.LFE136:
 5414              		.size	TIM_SetIC2Prescaler, .-TIM_SetIC2Prescaler
 5415              		.align	1
 5416              		.global	TIM_SetIC3Prescaler
 5417              		.syntax unified
 5418              		.thumb
 5419              		.thumb_func
 5420              		.fpu softvfp
 5421              		.type	TIM_SetIC3Prescaler, %function
 5422              	TIM_SetIC3Prescaler:
 5423              	.LFB137:
2386:common/stm32f10x_tim.c **** 
2387:common/stm32f10x_tim.c **** /**
2388:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Input Capture 3 prescaler.
2389:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2390:common/stm32f10x_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture3 prescaler new value.
2391:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2392:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV1: no prescaler
2393:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2394:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2395:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2396:common/stm32f10x_tim.c ****   * @retval None
2397:common/stm32f10x_tim.c ****   */
2398:common/stm32f10x_tim.c **** void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2399:common/stm32f10x_tim.c **** {
 5424              		.loc 1 2399 0
 5425              		.cfi_startproc
 5426              		@ args = 0, pretend = 0, frame = 8
 5427              		@ frame_needed = 1, uses_anonymous_args = 0
 5428              		@ link register save eliminated.
 5429 17d6 80B4     		push	{r7}
 5430              		.cfi_def_cfa_offset 4
 5431              		.cfi_offset 7, -4
 5432 17d8 83B0     		sub	sp, sp, #12
 5433              		.cfi_def_cfa_offset 16
 5434 17da 00AF     		add	r7, sp, #0
 5435              		.cfi_def_cfa_register 7
 5436 17dc 7860     		str	r0, [r7, #4]
 5437 17de 0B46     		mov	r3, r1
 5438 17e0 7B80     		strh	r3, [r7, #2]	@ movhi
2400:common/stm32f10x_tim.c ****   /* Check the parameters */
2401:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2402:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2403:common/stm32f10x_tim.c ****   /* Reset the IC3PSC Bits */
2404:common/stm32f10x_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 5439              		.loc 1 2404 0
 5440 17e2 7B68     		ldr	r3, [r7, #4]
 5441 17e4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 5442 17e6 9BB2     		uxth	r3, r3
 5443 17e8 23F00C03 		bic	r3, r3, #12
ARM GAS  /tmp/ccRayNMu.s 			page 140


 5444 17ec 9AB2     		uxth	r2, r3
 5445 17ee 7B68     		ldr	r3, [r7, #4]
 5446 17f0 9A83     		strh	r2, [r3, #28]	@ movhi
2405:common/stm32f10x_tim.c ****   /* Set the IC3PSC value */
2406:common/stm32f10x_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
 5447              		.loc 1 2406 0
 5448 17f2 7B68     		ldr	r3, [r7, #4]
 5449 17f4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 5450 17f6 9AB2     		uxth	r2, r3
 5451 17f8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5452 17fa 1343     		orrs	r3, r3, r2
 5453 17fc 9AB2     		uxth	r2, r3
 5454 17fe 7B68     		ldr	r3, [r7, #4]
 5455 1800 9A83     		strh	r2, [r3, #28]	@ movhi
2407:common/stm32f10x_tim.c **** }
 5456              		.loc 1 2407 0
 5457 1802 00BF     		nop
 5458 1804 0C37     		adds	r7, r7, #12
 5459              		.cfi_def_cfa_offset 4
 5460 1806 BD46     		mov	sp, r7
 5461              		.cfi_def_cfa_register 13
 5462              		@ sp needed
 5463 1808 80BC     		pop	{r7}
 5464              		.cfi_restore 7
 5465              		.cfi_def_cfa_offset 0
 5466 180a 7047     		bx	lr
 5467              		.cfi_endproc
 5468              	.LFE137:
 5469              		.size	TIM_SetIC3Prescaler, .-TIM_SetIC3Prescaler
 5470              		.align	1
 5471              		.global	TIM_SetIC4Prescaler
 5472              		.syntax unified
 5473              		.thumb
 5474              		.thumb_func
 5475              		.fpu softvfp
 5476              		.type	TIM_SetIC4Prescaler, %function
 5477              	TIM_SetIC4Prescaler:
 5478              	.LFB138:
2408:common/stm32f10x_tim.c **** 
2409:common/stm32f10x_tim.c **** /**
2410:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Input Capture 4 prescaler.
2411:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2412:common/stm32f10x_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture4 prescaler new value.
2413:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2414:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV1: no prescaler
2415:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2416:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2417:common/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2418:common/stm32f10x_tim.c ****   * @retval None
2419:common/stm32f10x_tim.c ****   */
2420:common/stm32f10x_tim.c **** void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2421:common/stm32f10x_tim.c **** {  
 5479              		.loc 1 2421 0
 5480              		.cfi_startproc
 5481              		@ args = 0, pretend = 0, frame = 8
 5482              		@ frame_needed = 1, uses_anonymous_args = 0
 5483              		@ link register save eliminated.
ARM GAS  /tmp/ccRayNMu.s 			page 141


 5484 180c 80B4     		push	{r7}
 5485              		.cfi_def_cfa_offset 4
 5486              		.cfi_offset 7, -4
 5487 180e 83B0     		sub	sp, sp, #12
 5488              		.cfi_def_cfa_offset 16
 5489 1810 00AF     		add	r7, sp, #0
 5490              		.cfi_def_cfa_register 7
 5491 1812 7860     		str	r0, [r7, #4]
 5492 1814 0B46     		mov	r3, r1
 5493 1816 7B80     		strh	r3, [r7, #2]	@ movhi
2422:common/stm32f10x_tim.c ****   /* Check the parameters */
2423:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2424:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2425:common/stm32f10x_tim.c ****   /* Reset the IC4PSC Bits */
2426:common/stm32f10x_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 5494              		.loc 1 2426 0
 5495 1818 7B68     		ldr	r3, [r7, #4]
 5496 181a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 5497 181c 9BB2     		uxth	r3, r3
 5498 181e 23F44063 		bic	r3, r3, #3072
 5499 1822 9AB2     		uxth	r2, r3
 5500 1824 7B68     		ldr	r3, [r7, #4]
 5501 1826 9A83     		strh	r2, [r3, #28]	@ movhi
2427:common/stm32f10x_tim.c ****   /* Set the IC4PSC value */
2428:common/stm32f10x_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 5502              		.loc 1 2428 0
 5503 1828 7B68     		ldr	r3, [r7, #4]
 5504 182a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 5505 182c 9AB2     		uxth	r2, r3
 5506 182e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5507 1830 1B02     		lsls	r3, r3, #8
 5508 1832 9BB2     		uxth	r3, r3
 5509 1834 1343     		orrs	r3, r3, r2
 5510 1836 9AB2     		uxth	r2, r3
 5511 1838 7B68     		ldr	r3, [r7, #4]
 5512 183a 9A83     		strh	r2, [r3, #28]	@ movhi
2429:common/stm32f10x_tim.c **** }
 5513              		.loc 1 2429 0
 5514 183c 00BF     		nop
 5515 183e 0C37     		adds	r7, r7, #12
 5516              		.cfi_def_cfa_offset 4
 5517 1840 BD46     		mov	sp, r7
 5518              		.cfi_def_cfa_register 13
 5519              		@ sp needed
 5520 1842 80BC     		pop	{r7}
 5521              		.cfi_restore 7
 5522              		.cfi_def_cfa_offset 0
 5523 1844 7047     		bx	lr
 5524              		.cfi_endproc
 5525              	.LFE138:
 5526              		.size	TIM_SetIC4Prescaler, .-TIM_SetIC4Prescaler
 5527              		.align	1
 5528              		.global	TIM_SetClockDivision
 5529              		.syntax unified
 5530              		.thumb
 5531              		.thumb_func
 5532              		.fpu softvfp
ARM GAS  /tmp/ccRayNMu.s 			page 142


 5533              		.type	TIM_SetClockDivision, %function
 5534              	TIM_SetClockDivision:
 5535              	.LFB139:
2430:common/stm32f10x_tim.c **** 
2431:common/stm32f10x_tim.c **** /**
2432:common/stm32f10x_tim.c ****   * @brief  Sets the TIMx Clock Division value.
2433:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select 
2434:common/stm32f10x_tim.c ****   *   the TIM peripheral.
2435:common/stm32f10x_tim.c ****   * @param  TIM_CKD: specifies the clock division value.
2436:common/stm32f10x_tim.c ****   *   This parameter can be one of the following value:
2437:common/stm32f10x_tim.c ****   *     @arg TIM_CKD_DIV1: TDTS = Tck_tim
2438:common/stm32f10x_tim.c ****   *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
2439:common/stm32f10x_tim.c ****   *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
2440:common/stm32f10x_tim.c ****   * @retval None
2441:common/stm32f10x_tim.c ****   */
2442:common/stm32f10x_tim.c **** void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
2443:common/stm32f10x_tim.c **** {
 5536              		.loc 1 2443 0
 5537              		.cfi_startproc
 5538              		@ args = 0, pretend = 0, frame = 8
 5539              		@ frame_needed = 1, uses_anonymous_args = 0
 5540              		@ link register save eliminated.
 5541 1846 80B4     		push	{r7}
 5542              		.cfi_def_cfa_offset 4
 5543              		.cfi_offset 7, -4
 5544 1848 83B0     		sub	sp, sp, #12
 5545              		.cfi_def_cfa_offset 16
 5546 184a 00AF     		add	r7, sp, #0
 5547              		.cfi_def_cfa_register 7
 5548 184c 7860     		str	r0, [r7, #4]
 5549 184e 0B46     		mov	r3, r1
 5550 1850 7B80     		strh	r3, [r7, #2]	@ movhi
2444:common/stm32f10x_tim.c ****   /* Check the parameters */
2445:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2446:common/stm32f10x_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_CKD));
2447:common/stm32f10x_tim.c ****   /* Reset the CKD Bits */
2448:common/stm32f10x_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 5551              		.loc 1 2448 0
 5552 1852 7B68     		ldr	r3, [r7, #4]
 5553 1854 1B88     		ldrh	r3, [r3]	@ movhi
 5554 1856 9BB2     		uxth	r3, r3
 5555 1858 23F44073 		bic	r3, r3, #768
 5556 185c 9AB2     		uxth	r2, r3
 5557 185e 7B68     		ldr	r3, [r7, #4]
 5558 1860 1A80     		strh	r2, [r3]	@ movhi
2449:common/stm32f10x_tim.c ****   /* Set the CKD value */
2450:common/stm32f10x_tim.c ****   TIMx->CR1 |= TIM_CKD;
 5559              		.loc 1 2450 0
 5560 1862 7B68     		ldr	r3, [r7, #4]
 5561 1864 1B88     		ldrh	r3, [r3]	@ movhi
 5562 1866 9AB2     		uxth	r2, r3
 5563 1868 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5564 186a 1343     		orrs	r3, r3, r2
 5565 186c 9AB2     		uxth	r2, r3
 5566 186e 7B68     		ldr	r3, [r7, #4]
 5567 1870 1A80     		strh	r2, [r3]	@ movhi
2451:common/stm32f10x_tim.c **** }
ARM GAS  /tmp/ccRayNMu.s 			page 143


 5568              		.loc 1 2451 0
 5569 1872 00BF     		nop
 5570 1874 0C37     		adds	r7, r7, #12
 5571              		.cfi_def_cfa_offset 4
 5572 1876 BD46     		mov	sp, r7
 5573              		.cfi_def_cfa_register 13
 5574              		@ sp needed
 5575 1878 80BC     		pop	{r7}
 5576              		.cfi_restore 7
 5577              		.cfi_def_cfa_offset 0
 5578 187a 7047     		bx	lr
 5579              		.cfi_endproc
 5580              	.LFE139:
 5581              		.size	TIM_SetClockDivision, .-TIM_SetClockDivision
 5582              		.align	1
 5583              		.global	TIM_GetCapture1
 5584              		.syntax unified
 5585              		.thumb
 5586              		.thumb_func
 5587              		.fpu softvfp
 5588              		.type	TIM_GetCapture1, %function
 5589              	TIM_GetCapture1:
 5590              	.LFB140:
2452:common/stm32f10x_tim.c **** 
2453:common/stm32f10x_tim.c **** /**
2454:common/stm32f10x_tim.c ****   * @brief  Gets the TIMx Input Capture 1 value.
2455:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2456:common/stm32f10x_tim.c ****   * @retval Capture Compare 1 Register value.
2457:common/stm32f10x_tim.c ****   */
2458:common/stm32f10x_tim.c **** uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
2459:common/stm32f10x_tim.c **** {
 5591              		.loc 1 2459 0
 5592              		.cfi_startproc
 5593              		@ args = 0, pretend = 0, frame = 8
 5594              		@ frame_needed = 1, uses_anonymous_args = 0
 5595              		@ link register save eliminated.
 5596 187c 80B4     		push	{r7}
 5597              		.cfi_def_cfa_offset 4
 5598              		.cfi_offset 7, -4
 5599 187e 83B0     		sub	sp, sp, #12
 5600              		.cfi_def_cfa_offset 16
 5601 1880 00AF     		add	r7, sp, #0
 5602              		.cfi_def_cfa_register 7
 5603 1882 7860     		str	r0, [r7, #4]
2460:common/stm32f10x_tim.c ****   /* Check the parameters */
2461:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2462:common/stm32f10x_tim.c ****   /* Get the Capture 1 Register value */
2463:common/stm32f10x_tim.c ****   return TIMx->CCR1;
 5604              		.loc 1 2463 0
 5605 1884 7B68     		ldr	r3, [r7, #4]
 5606 1886 9B8E     		ldrh	r3, [r3, #52]	@ movhi
 5607 1888 9BB2     		uxth	r3, r3
2464:common/stm32f10x_tim.c **** }
 5608              		.loc 1 2464 0
 5609 188a 1846     		mov	r0, r3
 5610 188c 0C37     		adds	r7, r7, #12
 5611              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRayNMu.s 			page 144


 5612 188e BD46     		mov	sp, r7
 5613              		.cfi_def_cfa_register 13
 5614              		@ sp needed
 5615 1890 80BC     		pop	{r7}
 5616              		.cfi_restore 7
 5617              		.cfi_def_cfa_offset 0
 5618 1892 7047     		bx	lr
 5619              		.cfi_endproc
 5620              	.LFE140:
 5621              		.size	TIM_GetCapture1, .-TIM_GetCapture1
 5622              		.align	1
 5623              		.global	TIM_GetCapture2
 5624              		.syntax unified
 5625              		.thumb
 5626              		.thumb_func
 5627              		.fpu softvfp
 5628              		.type	TIM_GetCapture2, %function
 5629              	TIM_GetCapture2:
 5630              	.LFB141:
2465:common/stm32f10x_tim.c **** 
2466:common/stm32f10x_tim.c **** /**
2467:common/stm32f10x_tim.c ****   * @brief  Gets the TIMx Input Capture 2 value.
2468:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2469:common/stm32f10x_tim.c ****   * @retval Capture Compare 2 Register value.
2470:common/stm32f10x_tim.c ****   */
2471:common/stm32f10x_tim.c **** uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
2472:common/stm32f10x_tim.c **** {
 5631              		.loc 1 2472 0
 5632              		.cfi_startproc
 5633              		@ args = 0, pretend = 0, frame = 8
 5634              		@ frame_needed = 1, uses_anonymous_args = 0
 5635              		@ link register save eliminated.
 5636 1894 80B4     		push	{r7}
 5637              		.cfi_def_cfa_offset 4
 5638              		.cfi_offset 7, -4
 5639 1896 83B0     		sub	sp, sp, #12
 5640              		.cfi_def_cfa_offset 16
 5641 1898 00AF     		add	r7, sp, #0
 5642              		.cfi_def_cfa_register 7
 5643 189a 7860     		str	r0, [r7, #4]
2473:common/stm32f10x_tim.c ****   /* Check the parameters */
2474:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2475:common/stm32f10x_tim.c ****   /* Get the Capture 2 Register value */
2476:common/stm32f10x_tim.c ****   return TIMx->CCR2;
 5644              		.loc 1 2476 0
 5645 189c 7B68     		ldr	r3, [r7, #4]
 5646 189e 1B8F     		ldrh	r3, [r3, #56]	@ movhi
 5647 18a0 9BB2     		uxth	r3, r3
2477:common/stm32f10x_tim.c **** }
 5648              		.loc 1 2477 0
 5649 18a2 1846     		mov	r0, r3
 5650 18a4 0C37     		adds	r7, r7, #12
 5651              		.cfi_def_cfa_offset 4
 5652 18a6 BD46     		mov	sp, r7
 5653              		.cfi_def_cfa_register 13
 5654              		@ sp needed
 5655 18a8 80BC     		pop	{r7}
ARM GAS  /tmp/ccRayNMu.s 			page 145


 5656              		.cfi_restore 7
 5657              		.cfi_def_cfa_offset 0
 5658 18aa 7047     		bx	lr
 5659              		.cfi_endproc
 5660              	.LFE141:
 5661              		.size	TIM_GetCapture2, .-TIM_GetCapture2
 5662              		.align	1
 5663              		.global	TIM_GetCapture3
 5664              		.syntax unified
 5665              		.thumb
 5666              		.thumb_func
 5667              		.fpu softvfp
 5668              		.type	TIM_GetCapture3, %function
 5669              	TIM_GetCapture3:
 5670              	.LFB142:
2478:common/stm32f10x_tim.c **** 
2479:common/stm32f10x_tim.c **** /**
2480:common/stm32f10x_tim.c ****   * @brief  Gets the TIMx Input Capture 3 value.
2481:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2482:common/stm32f10x_tim.c ****   * @retval Capture Compare 3 Register value.
2483:common/stm32f10x_tim.c ****   */
2484:common/stm32f10x_tim.c **** uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
2485:common/stm32f10x_tim.c **** {
 5671              		.loc 1 2485 0
 5672              		.cfi_startproc
 5673              		@ args = 0, pretend = 0, frame = 8
 5674              		@ frame_needed = 1, uses_anonymous_args = 0
 5675              		@ link register save eliminated.
 5676 18ac 80B4     		push	{r7}
 5677              		.cfi_def_cfa_offset 4
 5678              		.cfi_offset 7, -4
 5679 18ae 83B0     		sub	sp, sp, #12
 5680              		.cfi_def_cfa_offset 16
 5681 18b0 00AF     		add	r7, sp, #0
 5682              		.cfi_def_cfa_register 7
 5683 18b2 7860     		str	r0, [r7, #4]
2486:common/stm32f10x_tim.c ****   /* Check the parameters */
2487:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
2488:common/stm32f10x_tim.c ****   /* Get the Capture 3 Register value */
2489:common/stm32f10x_tim.c ****   return TIMx->CCR3;
 5684              		.loc 1 2489 0
 5685 18b4 7B68     		ldr	r3, [r7, #4]
 5686 18b6 9B8F     		ldrh	r3, [r3, #60]	@ movhi
 5687 18b8 9BB2     		uxth	r3, r3
2490:common/stm32f10x_tim.c **** }
 5688              		.loc 1 2490 0
 5689 18ba 1846     		mov	r0, r3
 5690 18bc 0C37     		adds	r7, r7, #12
 5691              		.cfi_def_cfa_offset 4
 5692 18be BD46     		mov	sp, r7
 5693              		.cfi_def_cfa_register 13
 5694              		@ sp needed
 5695 18c0 80BC     		pop	{r7}
 5696              		.cfi_restore 7
 5697              		.cfi_def_cfa_offset 0
 5698 18c2 7047     		bx	lr
 5699              		.cfi_endproc
ARM GAS  /tmp/ccRayNMu.s 			page 146


 5700              	.LFE142:
 5701              		.size	TIM_GetCapture3, .-TIM_GetCapture3
 5702              		.align	1
 5703              		.global	TIM_GetCapture4
 5704              		.syntax unified
 5705              		.thumb
 5706              		.thumb_func
 5707              		.fpu softvfp
 5708              		.type	TIM_GetCapture4, %function
 5709              	TIM_GetCapture4:
 5710              	.LFB143:
2491:common/stm32f10x_tim.c **** 
2492:common/stm32f10x_tim.c **** /**
2493:common/stm32f10x_tim.c ****   * @brief  Gets the TIMx Input Capture 4 value.
2494:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2495:common/stm32f10x_tim.c ****   * @retval Capture Compare 4 Register value.
2496:common/stm32f10x_tim.c ****   */
2497:common/stm32f10x_tim.c **** uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
2498:common/stm32f10x_tim.c **** {
 5711              		.loc 1 2498 0
 5712              		.cfi_startproc
 5713              		@ args = 0, pretend = 0, frame = 8
 5714              		@ frame_needed = 1, uses_anonymous_args = 0
 5715              		@ link register save eliminated.
 5716 18c4 80B4     		push	{r7}
 5717              		.cfi_def_cfa_offset 4
 5718              		.cfi_offset 7, -4
 5719 18c6 83B0     		sub	sp, sp, #12
 5720              		.cfi_def_cfa_offset 16
 5721 18c8 00AF     		add	r7, sp, #0
 5722              		.cfi_def_cfa_register 7
 5723 18ca 7860     		str	r0, [r7, #4]
2499:common/stm32f10x_tim.c ****   /* Check the parameters */
2500:common/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2501:common/stm32f10x_tim.c ****   /* Get the Capture 4 Register value */
2502:common/stm32f10x_tim.c ****   return TIMx->CCR4;
 5724              		.loc 1 2502 0
 5725 18cc 7B68     		ldr	r3, [r7, #4]
 5726 18ce B3F84030 		ldrh	r3, [r3, #64]	@ movhi
 5727 18d2 9BB2     		uxth	r3, r3
2503:common/stm32f10x_tim.c **** }
 5728              		.loc 1 2503 0
 5729 18d4 1846     		mov	r0, r3
 5730 18d6 0C37     		adds	r7, r7, #12
 5731              		.cfi_def_cfa_offset 4
 5732 18d8 BD46     		mov	sp, r7
 5733              		.cfi_def_cfa_register 13
 5734              		@ sp needed
 5735 18da 80BC     		pop	{r7}
 5736              		.cfi_restore 7
 5737              		.cfi_def_cfa_offset 0
 5738 18dc 7047     		bx	lr
 5739              		.cfi_endproc
 5740              	.LFE143:
 5741              		.size	TIM_GetCapture4, .-TIM_GetCapture4
 5742              		.align	1
 5743              		.global	TIM_GetCounter
ARM GAS  /tmp/ccRayNMu.s 			page 147


 5744              		.syntax unified
 5745              		.thumb
 5746              		.thumb_func
 5747              		.fpu softvfp
 5748              		.type	TIM_GetCounter, %function
 5749              	TIM_GetCounter:
 5750              	.LFB144:
2504:common/stm32f10x_tim.c **** 
2505:common/stm32f10x_tim.c **** /**
2506:common/stm32f10x_tim.c ****   * @brief  Gets the TIMx Counter value.
2507:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2508:common/stm32f10x_tim.c ****   * @retval Counter Register value.
2509:common/stm32f10x_tim.c ****   */
2510:common/stm32f10x_tim.c **** uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
2511:common/stm32f10x_tim.c **** {
 5751              		.loc 1 2511 0
 5752              		.cfi_startproc
 5753              		@ args = 0, pretend = 0, frame = 8
 5754              		@ frame_needed = 1, uses_anonymous_args = 0
 5755              		@ link register save eliminated.
 5756 18de 80B4     		push	{r7}
 5757              		.cfi_def_cfa_offset 4
 5758              		.cfi_offset 7, -4
 5759 18e0 83B0     		sub	sp, sp, #12
 5760              		.cfi_def_cfa_offset 16
 5761 18e2 00AF     		add	r7, sp, #0
 5762              		.cfi_def_cfa_register 7
 5763 18e4 7860     		str	r0, [r7, #4]
2512:common/stm32f10x_tim.c ****   /* Check the parameters */
2513:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2514:common/stm32f10x_tim.c ****   /* Get the Counter Register value */
2515:common/stm32f10x_tim.c ****   return TIMx->CNT;
 5764              		.loc 1 2515 0
 5765 18e6 7B68     		ldr	r3, [r7, #4]
 5766 18e8 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 5767 18ea 9BB2     		uxth	r3, r3
2516:common/stm32f10x_tim.c **** }
 5768              		.loc 1 2516 0
 5769 18ec 1846     		mov	r0, r3
 5770 18ee 0C37     		adds	r7, r7, #12
 5771              		.cfi_def_cfa_offset 4
 5772 18f0 BD46     		mov	sp, r7
 5773              		.cfi_def_cfa_register 13
 5774              		@ sp needed
 5775 18f2 80BC     		pop	{r7}
 5776              		.cfi_restore 7
 5777              		.cfi_def_cfa_offset 0
 5778 18f4 7047     		bx	lr
 5779              		.cfi_endproc
 5780              	.LFE144:
 5781              		.size	TIM_GetCounter, .-TIM_GetCounter
 5782              		.align	1
 5783              		.global	TIM_GetPrescaler
 5784              		.syntax unified
 5785              		.thumb
 5786              		.thumb_func
 5787              		.fpu softvfp
ARM GAS  /tmp/ccRayNMu.s 			page 148


 5788              		.type	TIM_GetPrescaler, %function
 5789              	TIM_GetPrescaler:
 5790              	.LFB145:
2517:common/stm32f10x_tim.c **** 
2518:common/stm32f10x_tim.c **** /**
2519:common/stm32f10x_tim.c ****   * @brief  Gets the TIMx Prescaler value.
2520:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2521:common/stm32f10x_tim.c ****   * @retval Prescaler Register value.
2522:common/stm32f10x_tim.c ****   */
2523:common/stm32f10x_tim.c **** uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
2524:common/stm32f10x_tim.c **** {
 5791              		.loc 1 2524 0
 5792              		.cfi_startproc
 5793              		@ args = 0, pretend = 0, frame = 8
 5794              		@ frame_needed = 1, uses_anonymous_args = 0
 5795              		@ link register save eliminated.
 5796 18f6 80B4     		push	{r7}
 5797              		.cfi_def_cfa_offset 4
 5798              		.cfi_offset 7, -4
 5799 18f8 83B0     		sub	sp, sp, #12
 5800              		.cfi_def_cfa_offset 16
 5801 18fa 00AF     		add	r7, sp, #0
 5802              		.cfi_def_cfa_register 7
 5803 18fc 7860     		str	r0, [r7, #4]
2525:common/stm32f10x_tim.c ****   /* Check the parameters */
2526:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2527:common/stm32f10x_tim.c ****   /* Get the Prescaler Register value */
2528:common/stm32f10x_tim.c ****   return TIMx->PSC;
 5804              		.loc 1 2528 0
 5805 18fe 7B68     		ldr	r3, [r7, #4]
 5806 1900 1B8D     		ldrh	r3, [r3, #40]	@ movhi
 5807 1902 9BB2     		uxth	r3, r3
2529:common/stm32f10x_tim.c **** }
 5808              		.loc 1 2529 0
 5809 1904 1846     		mov	r0, r3
 5810 1906 0C37     		adds	r7, r7, #12
 5811              		.cfi_def_cfa_offset 4
 5812 1908 BD46     		mov	sp, r7
 5813              		.cfi_def_cfa_register 13
 5814              		@ sp needed
 5815 190a 80BC     		pop	{r7}
 5816              		.cfi_restore 7
 5817              		.cfi_def_cfa_offset 0
 5818 190c 7047     		bx	lr
 5819              		.cfi_endproc
 5820              	.LFE145:
 5821              		.size	TIM_GetPrescaler, .-TIM_GetPrescaler
 5822              		.align	1
 5823              		.global	TIM_GetFlagStatus
 5824              		.syntax unified
 5825              		.thumb
 5826              		.thumb_func
 5827              		.fpu softvfp
 5828              		.type	TIM_GetFlagStatus, %function
 5829              	TIM_GetFlagStatus:
 5830              	.LFB146:
2530:common/stm32f10x_tim.c **** 
ARM GAS  /tmp/ccRayNMu.s 			page 149


2531:common/stm32f10x_tim.c **** /**
2532:common/stm32f10x_tim.c ****   * @brief  Checks whether the specified TIM flag is set or not.
2533:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2534:common/stm32f10x_tim.c ****   * @param  TIM_FLAG: specifies the flag to check.
2535:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2536:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Update: TIM update Flag
2537:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2538:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2539:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2540:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2541:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_COM: TIM Commutation Flag
2542:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Trigger: TIM Trigger Flag
2543:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Break: TIM Break Flag
2544:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2545:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2546:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2547:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2548:common/stm32f10x_tim.c ****   * @note
2549:common/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can have only one update flag. 
2550:common/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1,
2551:common/stm32f10x_tim.c ****   *      TIM_FLAG_CC2 or TIM_FLAG_Trigger. 
2552:common/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2553:common/stm32f10x_tim.c ****   *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
2554:common/stm32f10x_tim.c ****   *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
2555:common/stm32f10x_tim.c ****   * @retval The new state of TIM_FLAG (SET or RESET).
2556:common/stm32f10x_tim.c ****   */
2557:common/stm32f10x_tim.c **** FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2558:common/stm32f10x_tim.c **** { 
 5831              		.loc 1 2558 0
 5832              		.cfi_startproc
 5833              		@ args = 0, pretend = 0, frame = 16
 5834              		@ frame_needed = 1, uses_anonymous_args = 0
 5835              		@ link register save eliminated.
 5836 190e 80B4     		push	{r7}
 5837              		.cfi_def_cfa_offset 4
 5838              		.cfi_offset 7, -4
 5839 1910 85B0     		sub	sp, sp, #20
 5840              		.cfi_def_cfa_offset 24
 5841 1912 00AF     		add	r7, sp, #0
 5842              		.cfi_def_cfa_register 7
 5843 1914 7860     		str	r0, [r7, #4]
 5844 1916 0B46     		mov	r3, r1
 5845 1918 7B80     		strh	r3, [r7, #2]	@ movhi
2559:common/stm32f10x_tim.c ****   ITStatus bitstatus = RESET;  
 5846              		.loc 1 2559 0
 5847 191a 0023     		movs	r3, #0
 5848 191c FB73     		strb	r3, [r7, #15]
2560:common/stm32f10x_tim.c ****   /* Check the parameters */
2561:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2562:common/stm32f10x_tim.c ****   assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
2563:common/stm32f10x_tim.c ****   
2564:common/stm32f10x_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 5849              		.loc 1 2564 0
 5850 191e 7B68     		ldr	r3, [r7, #4]
 5851 1920 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 5852 1922 9AB2     		uxth	r2, r3
 5853 1924 7B88     		ldrh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 150


 5854 1926 1340     		ands	r3, r3, r2
 5855 1928 9BB2     		uxth	r3, r3
 5856 192a 002B     		cmp	r3, #0
 5857 192c 02D0     		beq	.L184
2565:common/stm32f10x_tim.c ****   {
2566:common/stm32f10x_tim.c ****     bitstatus = SET;
 5858              		.loc 1 2566 0
 5859 192e 0123     		movs	r3, #1
 5860 1930 FB73     		strb	r3, [r7, #15]
 5861 1932 01E0     		b	.L185
 5862              	.L184:
2567:common/stm32f10x_tim.c ****   }
2568:common/stm32f10x_tim.c ****   else
2569:common/stm32f10x_tim.c ****   {
2570:common/stm32f10x_tim.c ****     bitstatus = RESET;
 5863              		.loc 1 2570 0
 5864 1934 0023     		movs	r3, #0
 5865 1936 FB73     		strb	r3, [r7, #15]
 5866              	.L185:
2571:common/stm32f10x_tim.c ****   }
2572:common/stm32f10x_tim.c ****   return bitstatus;
 5867              		.loc 1 2572 0
 5868 1938 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2573:common/stm32f10x_tim.c **** }
 5869              		.loc 1 2573 0
 5870 193a 1846     		mov	r0, r3
 5871 193c 1437     		adds	r7, r7, #20
 5872              		.cfi_def_cfa_offset 4
 5873 193e BD46     		mov	sp, r7
 5874              		.cfi_def_cfa_register 13
 5875              		@ sp needed
 5876 1940 80BC     		pop	{r7}
 5877              		.cfi_restore 7
 5878              		.cfi_def_cfa_offset 0
 5879 1942 7047     		bx	lr
 5880              		.cfi_endproc
 5881              	.LFE146:
 5882              		.size	TIM_GetFlagStatus, .-TIM_GetFlagStatus
 5883              		.align	1
 5884              		.global	TIM_ClearFlag
 5885              		.syntax unified
 5886              		.thumb
 5887              		.thumb_func
 5888              		.fpu softvfp
 5889              		.type	TIM_ClearFlag, %function
 5890              	TIM_ClearFlag:
 5891              	.LFB147:
2574:common/stm32f10x_tim.c **** 
2575:common/stm32f10x_tim.c **** /**
2576:common/stm32f10x_tim.c ****   * @brief  Clears the TIMx's pending flags.
2577:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2578:common/stm32f10x_tim.c ****   * @param  TIM_FLAG: specifies the flag bit to clear.
2579:common/stm32f10x_tim.c ****   *   This parameter can be any combination of the following values:
2580:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Update: TIM update Flag
2581:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2582:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2583:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
ARM GAS  /tmp/ccRayNMu.s 			page 151


2584:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2585:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_COM: TIM Commutation Flag
2586:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Trigger: TIM Trigger Flag
2587:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Break: TIM Break Flag
2588:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2589:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2590:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2591:common/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2592:common/stm32f10x_tim.c ****   * @note
2593:common/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can have only one update flag. 
2594:common/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1,
2595:common/stm32f10x_tim.c ****   *      TIM_FLAG_CC2 or TIM_FLAG_Trigger. 
2596:common/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2597:common/stm32f10x_tim.c ****   *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
2598:common/stm32f10x_tim.c ****   *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
2599:common/stm32f10x_tim.c ****   * @retval None
2600:common/stm32f10x_tim.c ****   */
2601:common/stm32f10x_tim.c **** void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2602:common/stm32f10x_tim.c **** {  
 5892              		.loc 1 2602 0
 5893              		.cfi_startproc
 5894              		@ args = 0, pretend = 0, frame = 8
 5895              		@ frame_needed = 1, uses_anonymous_args = 0
 5896              		@ link register save eliminated.
 5897 1944 80B4     		push	{r7}
 5898              		.cfi_def_cfa_offset 4
 5899              		.cfi_offset 7, -4
 5900 1946 83B0     		sub	sp, sp, #12
 5901              		.cfi_def_cfa_offset 16
 5902 1948 00AF     		add	r7, sp, #0
 5903              		.cfi_def_cfa_register 7
 5904 194a 7860     		str	r0, [r7, #4]
 5905 194c 0B46     		mov	r3, r1
 5906 194e 7B80     		strh	r3, [r7, #2]	@ movhi
2603:common/stm32f10x_tim.c ****   /* Check the parameters */
2604:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2605:common/stm32f10x_tim.c ****   assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
2606:common/stm32f10x_tim.c ****    
2607:common/stm32f10x_tim.c ****   /* Clear the flags */
2608:common/stm32f10x_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
 5907              		.loc 1 2608 0
 5908 1950 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5909 1952 DB43     		mvns	r3, r3
 5910 1954 9AB2     		uxth	r2, r3
 5911 1956 7B68     		ldr	r3, [r7, #4]
 5912 1958 1A82     		strh	r2, [r3, #16]	@ movhi
2609:common/stm32f10x_tim.c **** }
 5913              		.loc 1 2609 0
 5914 195a 00BF     		nop
 5915 195c 0C37     		adds	r7, r7, #12
 5916              		.cfi_def_cfa_offset 4
 5917 195e BD46     		mov	sp, r7
 5918              		.cfi_def_cfa_register 13
 5919              		@ sp needed
 5920 1960 80BC     		pop	{r7}
 5921              		.cfi_restore 7
 5922              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccRayNMu.s 			page 152


 5923 1962 7047     		bx	lr
 5924              		.cfi_endproc
 5925              	.LFE147:
 5926              		.size	TIM_ClearFlag, .-TIM_ClearFlag
 5927              		.align	1
 5928              		.global	TIM_GetITStatus
 5929              		.syntax unified
 5930              		.thumb
 5931              		.thumb_func
 5932              		.fpu softvfp
 5933              		.type	TIM_GetITStatus, %function
 5934              	TIM_GetITStatus:
 5935              	.LFB148:
2610:common/stm32f10x_tim.c **** 
2611:common/stm32f10x_tim.c **** /**
2612:common/stm32f10x_tim.c ****   * @brief  Checks whether the TIM interrupt has occurred or not.
2613:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2614:common/stm32f10x_tim.c ****   * @param  TIM_IT: specifies the TIM interrupt source to check.
2615:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2616:common/stm32f10x_tim.c ****   *     @arg TIM_IT_Update: TIM update Interrupt source
2617:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2618:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2619:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2620:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2621:common/stm32f10x_tim.c ****   *     @arg TIM_IT_COM: TIM Commutation Interrupt source
2622:common/stm32f10x_tim.c ****   *     @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2623:common/stm32f10x_tim.c ****   *     @arg TIM_IT_Break: TIM Break Interrupt source
2624:common/stm32f10x_tim.c ****   * @note
2625:common/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can generate only an update interrupt.
2626:common/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_IT_Update, TIM_IT_CC1,
2627:common/stm32f10x_tim.c ****   *      TIM_IT_CC2 or TIM_IT_Trigger. 
2628:common/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2629:common/stm32f10x_tim.c ****   *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
2630:common/stm32f10x_tim.c ****   *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
2631:common/stm32f10x_tim.c ****   * @retval The new state of the TIM_IT(SET or RESET).
2632:common/stm32f10x_tim.c ****   */
2633:common/stm32f10x_tim.c **** ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2634:common/stm32f10x_tim.c **** {
 5936              		.loc 1 2634 0
 5937              		.cfi_startproc
 5938              		@ args = 0, pretend = 0, frame = 16
 5939              		@ frame_needed = 1, uses_anonymous_args = 0
 5940              		@ link register save eliminated.
 5941 1964 80B4     		push	{r7}
 5942              		.cfi_def_cfa_offset 4
 5943              		.cfi_offset 7, -4
 5944 1966 85B0     		sub	sp, sp, #20
 5945              		.cfi_def_cfa_offset 24
 5946 1968 00AF     		add	r7, sp, #0
 5947              		.cfi_def_cfa_register 7
 5948 196a 7860     		str	r0, [r7, #4]
 5949 196c 0B46     		mov	r3, r1
 5950 196e 7B80     		strh	r3, [r7, #2]	@ movhi
2635:common/stm32f10x_tim.c ****   ITStatus bitstatus = RESET;  
 5951              		.loc 1 2635 0
 5952 1970 0023     		movs	r3, #0
 5953 1972 FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccRayNMu.s 			page 153


2636:common/stm32f10x_tim.c ****   uint16_t itstatus = 0x0, itenable = 0x0;
 5954              		.loc 1 2636 0
 5955 1974 0023     		movs	r3, #0
 5956 1976 BB81     		strh	r3, [r7, #12]	@ movhi
 5957 1978 0023     		movs	r3, #0
 5958 197a 7B81     		strh	r3, [r7, #10]	@ movhi
2637:common/stm32f10x_tim.c ****   /* Check the parameters */
2638:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2639:common/stm32f10x_tim.c ****   assert_param(IS_TIM_GET_IT(TIM_IT));
2640:common/stm32f10x_tim.c ****    
2641:common/stm32f10x_tim.c ****   itstatus = TIMx->SR & TIM_IT;
 5959              		.loc 1 2641 0
 5960 197c 7B68     		ldr	r3, [r7, #4]
 5961 197e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 5962 1980 9AB2     		uxth	r2, r3
 5963 1982 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5964 1984 1340     		ands	r3, r3, r2
 5965 1986 BB81     		strh	r3, [r7, #12]	@ movhi
2642:common/stm32f10x_tim.c ****   
2643:common/stm32f10x_tim.c ****   itenable = TIMx->DIER & TIM_IT;
 5966              		.loc 1 2643 0
 5967 1988 7B68     		ldr	r3, [r7, #4]
 5968 198a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 5969 198c 9AB2     		uxth	r2, r3
 5970 198e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5971 1990 1340     		ands	r3, r3, r2
 5972 1992 7B81     		strh	r3, [r7, #10]	@ movhi
2644:common/stm32f10x_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 5973              		.loc 1 2644 0
 5974 1994 BB89     		ldrh	r3, [r7, #12]
 5975 1996 002B     		cmp	r3, #0
 5976 1998 05D0     		beq	.L189
 5977              		.loc 1 2644 0 is_stmt 0 discriminator 1
 5978 199a 7B89     		ldrh	r3, [r7, #10]
 5979 199c 002B     		cmp	r3, #0
 5980 199e 02D0     		beq	.L189
2645:common/stm32f10x_tim.c ****   {
2646:common/stm32f10x_tim.c ****     bitstatus = SET;
 5981              		.loc 1 2646 0 is_stmt 1
 5982 19a0 0123     		movs	r3, #1
 5983 19a2 FB73     		strb	r3, [r7, #15]
 5984 19a4 01E0     		b	.L190
 5985              	.L189:
2647:common/stm32f10x_tim.c ****   }
2648:common/stm32f10x_tim.c ****   else
2649:common/stm32f10x_tim.c ****   {
2650:common/stm32f10x_tim.c ****     bitstatus = RESET;
 5986              		.loc 1 2650 0
 5987 19a6 0023     		movs	r3, #0
 5988 19a8 FB73     		strb	r3, [r7, #15]
 5989              	.L190:
2651:common/stm32f10x_tim.c ****   }
2652:common/stm32f10x_tim.c ****   return bitstatus;
 5990              		.loc 1 2652 0
 5991 19aa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2653:common/stm32f10x_tim.c **** }
 5992              		.loc 1 2653 0
ARM GAS  /tmp/ccRayNMu.s 			page 154


 5993 19ac 1846     		mov	r0, r3
 5994 19ae 1437     		adds	r7, r7, #20
 5995              		.cfi_def_cfa_offset 4
 5996 19b0 BD46     		mov	sp, r7
 5997              		.cfi_def_cfa_register 13
 5998              		@ sp needed
 5999 19b2 80BC     		pop	{r7}
 6000              		.cfi_restore 7
 6001              		.cfi_def_cfa_offset 0
 6002 19b4 7047     		bx	lr
 6003              		.cfi_endproc
 6004              	.LFE148:
 6005              		.size	TIM_GetITStatus, .-TIM_GetITStatus
 6006              		.align	1
 6007              		.global	TIM_ClearITPendingBit
 6008              		.syntax unified
 6009              		.thumb
 6010              		.thumb_func
 6011              		.fpu softvfp
 6012              		.type	TIM_ClearITPendingBit, %function
 6013              	TIM_ClearITPendingBit:
 6014              	.LFB149:
2654:common/stm32f10x_tim.c **** 
2655:common/stm32f10x_tim.c **** /**
2656:common/stm32f10x_tim.c ****   * @brief  Clears the TIMx's interrupt pending bits.
2657:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2658:common/stm32f10x_tim.c ****   * @param  TIM_IT: specifies the pending bit to clear.
2659:common/stm32f10x_tim.c ****   *   This parameter can be any combination of the following values:
2660:common/stm32f10x_tim.c ****   *     @arg TIM_IT_Update: TIM1 update Interrupt source
2661:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2662:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2663:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2664:common/stm32f10x_tim.c ****   *     @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2665:common/stm32f10x_tim.c ****   *     @arg TIM_IT_COM: TIM Commutation Interrupt source
2666:common/stm32f10x_tim.c ****   *     @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2667:common/stm32f10x_tim.c ****   *     @arg TIM_IT_Break: TIM Break Interrupt source
2668:common/stm32f10x_tim.c ****   * @note
2669:common/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can generate only an update interrupt.
2670:common/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_IT_Update, TIM_IT_CC1,
2671:common/stm32f10x_tim.c ****   *      TIM_IT_CC2 or TIM_IT_Trigger. 
2672:common/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2673:common/stm32f10x_tim.c ****   *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
2674:common/stm32f10x_tim.c ****   *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
2675:common/stm32f10x_tim.c ****   * @retval None
2676:common/stm32f10x_tim.c ****   */
2677:common/stm32f10x_tim.c **** void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2678:common/stm32f10x_tim.c **** {
 6015              		.loc 1 2678 0
 6016              		.cfi_startproc
 6017              		@ args = 0, pretend = 0, frame = 8
 6018              		@ frame_needed = 1, uses_anonymous_args = 0
 6019              		@ link register save eliminated.
 6020 19b6 80B4     		push	{r7}
 6021              		.cfi_def_cfa_offset 4
 6022              		.cfi_offset 7, -4
 6023 19b8 83B0     		sub	sp, sp, #12
 6024              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccRayNMu.s 			page 155


 6025 19ba 00AF     		add	r7, sp, #0
 6026              		.cfi_def_cfa_register 7
 6027 19bc 7860     		str	r0, [r7, #4]
 6028 19be 0B46     		mov	r3, r1
 6029 19c0 7B80     		strh	r3, [r7, #2]	@ movhi
2679:common/stm32f10x_tim.c ****   /* Check the parameters */
2680:common/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2681:common/stm32f10x_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2682:common/stm32f10x_tim.c ****   /* Clear the IT pending Bit */
2683:common/stm32f10x_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
 6030              		.loc 1 2683 0
 6031 19c2 7B88     		ldrh	r3, [r7, #2]	@ movhi
 6032 19c4 DB43     		mvns	r3, r3
 6033 19c6 9AB2     		uxth	r2, r3
 6034 19c8 7B68     		ldr	r3, [r7, #4]
 6035 19ca 1A82     		strh	r2, [r3, #16]	@ movhi
2684:common/stm32f10x_tim.c **** }
 6036              		.loc 1 2684 0
 6037 19cc 00BF     		nop
 6038 19ce 0C37     		adds	r7, r7, #12
 6039              		.cfi_def_cfa_offset 4
 6040 19d0 BD46     		mov	sp, r7
 6041              		.cfi_def_cfa_register 13
 6042              		@ sp needed
 6043 19d2 80BC     		pop	{r7}
 6044              		.cfi_restore 7
 6045              		.cfi_def_cfa_offset 0
 6046 19d4 7047     		bx	lr
 6047              		.cfi_endproc
 6048              	.LFE149:
 6049              		.size	TIM_ClearITPendingBit, .-TIM_ClearITPendingBit
 6050              		.align	1
 6051              		.syntax unified
 6052              		.thumb
 6053              		.thumb_func
 6054              		.fpu softvfp
 6055              		.type	TI1_Config, %function
 6056              	TI1_Config:
 6057              	.LFB150:
2685:common/stm32f10x_tim.c **** 
2686:common/stm32f10x_tim.c **** /**
2687:common/stm32f10x_tim.c ****   * @brief  Configure the TI1 as Input.
2688:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2689:common/stm32f10x_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
2690:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2691:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
2692:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
2693:common/stm32f10x_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
2694:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2695:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
2696:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
2697:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
2698:common/stm32f10x_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
2699:common/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F.
2700:common/stm32f10x_tim.c ****   * @retval None
2701:common/stm32f10x_tim.c ****   */
2702:common/stm32f10x_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
ARM GAS  /tmp/ccRayNMu.s 			page 156


2703:common/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter)
2704:common/stm32f10x_tim.c **** {
 6058              		.loc 1 2704 0
 6059              		.cfi_startproc
 6060              		@ args = 0, pretend = 0, frame = 24
 6061              		@ frame_needed = 1, uses_anonymous_args = 0
 6062              		@ link register save eliminated.
 6063 19d6 80B4     		push	{r7}
 6064              		.cfi_def_cfa_offset 4
 6065              		.cfi_offset 7, -4
 6066 19d8 87B0     		sub	sp, sp, #28
 6067              		.cfi_def_cfa_offset 32
 6068 19da 00AF     		add	r7, sp, #0
 6069              		.cfi_def_cfa_register 7
 6070 19dc F860     		str	r0, [r7, #12]
 6071 19de 0846     		mov	r0, r1
 6072 19e0 1146     		mov	r1, r2
 6073 19e2 1A46     		mov	r2, r3
 6074 19e4 0346     		mov	r3, r0	@ movhi
 6075 19e6 7B81     		strh	r3, [r7, #10]	@ movhi
 6076 19e8 0B46     		mov	r3, r1	@ movhi
 6077 19ea 3B81     		strh	r3, [r7, #8]	@ movhi
 6078 19ec 1346     		mov	r3, r2	@ movhi
 6079 19ee FB80     		strh	r3, [r7, #6]	@ movhi
2705:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0;
 6080              		.loc 1 2705 0
 6081 19f0 0023     		movs	r3, #0
 6082 19f2 BB82     		strh	r3, [r7, #20]	@ movhi
 6083 19f4 0023     		movs	r3, #0
 6084 19f6 FB82     		strh	r3, [r7, #22]	@ movhi
2706:common/stm32f10x_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
2707:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 6085              		.loc 1 2707 0
 6086 19f8 FB68     		ldr	r3, [r7, #12]
 6087 19fa 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6088 19fc 9BB2     		uxth	r3, r3
 6089 19fe 23F00103 		bic	r3, r3, #1
 6090 1a02 9AB2     		uxth	r2, r3
 6091 1a04 FB68     		ldr	r3, [r7, #12]
 6092 1a06 1A84     		strh	r2, [r3, #32]	@ movhi
2708:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 6093              		.loc 1 2708 0
 6094 1a08 FB68     		ldr	r3, [r7, #12]
 6095 1a0a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 6096 1a0c BB82     		strh	r3, [r7, #20]	@ movhi
2709:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 6097              		.loc 1 2709 0
 6098 1a0e FB68     		ldr	r3, [r7, #12]
 6099 1a10 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6100 1a12 FB82     		strh	r3, [r7, #22]	@ movhi
2710:common/stm32f10x_tim.c ****   /* Select the Input and set the filter */
2711:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
 6101              		.loc 1 2711 0
 6102 1a14 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6103 1a16 23F0F303 		bic	r3, r3, #243
 6104 1a1a BB82     		strh	r3, [r7, #20]	@ movhi
2712:common/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
ARM GAS  /tmp/ccRayNMu.s 			page 157


 6105              		.loc 1 2712 0
 6106 1a1c FB88     		ldrh	r3, [r7, #6]	@ movhi
 6107 1a1e 1B01     		lsls	r3, r3, #4
 6108 1a20 9AB2     		uxth	r2, r3
 6109 1a22 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6110 1a24 1343     		orrs	r3, r3, r2
 6111 1a26 9AB2     		uxth	r2, r3
 6112 1a28 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6113 1a2a 1343     		orrs	r3, r3, r2
 6114 1a2c BB82     		strh	r3, [r7, #20]	@ movhi
2713:common/stm32f10x_tim.c ****   
2714:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 6115              		.loc 1 2714 0
 6116 1a2e FB68     		ldr	r3, [r7, #12]
 6117 1a30 1C4A     		ldr	r2, .L197
 6118 1a32 9342     		cmp	r3, r2
 6119 1a34 13D0     		beq	.L194
 6120              		.loc 1 2714 0 is_stmt 0 discriminator 1
 6121 1a36 FB68     		ldr	r3, [r7, #12]
 6122 1a38 1B4A     		ldr	r2, .L197+4
 6123 1a3a 9342     		cmp	r3, r2
 6124 1a3c 0FD0     		beq	.L194
 6125              		.loc 1 2714 0 discriminator 2
 6126 1a3e FB68     		ldr	r3, [r7, #12]
 6127 1a40 B3F1804F 		cmp	r3, #1073741824
 6128 1a44 0BD0     		beq	.L194
 6129              		.loc 1 2714 0 discriminator 3
 6130 1a46 FB68     		ldr	r3, [r7, #12]
 6131 1a48 184A     		ldr	r2, .L197+8
 6132 1a4a 9342     		cmp	r3, r2
 6133 1a4c 07D0     		beq	.L194
 6134              		.loc 1 2714 0 discriminator 4
 6135 1a4e FB68     		ldr	r3, [r7, #12]
 6136 1a50 174A     		ldr	r2, .L197+12
 6137 1a52 9342     		cmp	r3, r2
 6138 1a54 03D0     		beq	.L194
2715:common/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 6139              		.loc 1 2715 0 is_stmt 1
 6140 1a56 FB68     		ldr	r3, [r7, #12]
 6141 1a58 164A     		ldr	r2, .L197+16
 6142 1a5a 9342     		cmp	r3, r2
 6143 1a5c 0BD1     		bne	.L195
 6144              	.L194:
2716:common/stm32f10x_tim.c ****   {
2717:common/stm32f10x_tim.c ****     /* Select the Polarity and set the CC1E Bit */
2718:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 6145              		.loc 1 2718 0
 6146 1a5e FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6147 1a60 23F00203 		bic	r3, r3, #2
 6148 1a64 FB82     		strh	r3, [r7, #22]	@ movhi
2719:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 6149              		.loc 1 2719 0
 6150 1a66 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6151 1a68 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6152 1a6a 1343     		orrs	r3, r3, r2
 6153 1a6c 9BB2     		uxth	r3, r3
 6154 1a6e 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccRayNMu.s 			page 158


 6155 1a72 FB82     		strh	r3, [r7, #22]	@ movhi
 6156 1a74 0AE0     		b	.L196
 6157              	.L195:
2720:common/stm32f10x_tim.c ****   }
2721:common/stm32f10x_tim.c ****   else
2722:common/stm32f10x_tim.c ****   {
2723:common/stm32f10x_tim.c ****     /* Select the Polarity and set the CC1E Bit */
2724:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 6158              		.loc 1 2724 0
 6159 1a76 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6160 1a78 23F00A03 		bic	r3, r3, #10
 6161 1a7c FB82     		strh	r3, [r7, #22]	@ movhi
2725:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 6162              		.loc 1 2725 0
 6163 1a7e 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6164 1a80 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6165 1a82 1343     		orrs	r3, r3, r2
 6166 1a84 9BB2     		uxth	r3, r3
 6167 1a86 43F00103 		orr	r3, r3, #1
 6168 1a8a FB82     		strh	r3, [r7, #22]	@ movhi
 6169              	.L196:
2726:common/stm32f10x_tim.c ****   }
2727:common/stm32f10x_tim.c **** 
2728:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
2729:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 6170              		.loc 1 2729 0
 6171 1a8c FB68     		ldr	r3, [r7, #12]
 6172 1a8e BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6173 1a90 1A83     		strh	r2, [r3, #24]	@ movhi
2730:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 6174              		.loc 1 2730 0
 6175 1a92 FB68     		ldr	r3, [r7, #12]
 6176 1a94 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6177 1a96 1A84     		strh	r2, [r3, #32]	@ movhi
2731:common/stm32f10x_tim.c **** }
 6178              		.loc 1 2731 0
 6179 1a98 00BF     		nop
 6180 1a9a 1C37     		adds	r7, r7, #28
 6181              		.cfi_def_cfa_offset 4
 6182 1a9c BD46     		mov	sp, r7
 6183              		.cfi_def_cfa_register 13
 6184              		@ sp needed
 6185 1a9e 80BC     		pop	{r7}
 6186              		.cfi_restore 7
 6187              		.cfi_def_cfa_offset 0
 6188 1aa0 7047     		bx	lr
 6189              	.L198:
 6190 1aa2 00BF     		.align	2
 6191              	.L197:
 6192 1aa4 002C0140 		.word	1073818624
 6193 1aa8 00340140 		.word	1073820672
 6194 1aac 00040040 		.word	1073742848
 6195 1ab0 00080040 		.word	1073743872
 6196 1ab4 000C0040 		.word	1073744896
 6197              		.cfi_endproc
 6198              	.LFE150:
 6199              		.size	TI1_Config, .-TI1_Config
ARM GAS  /tmp/ccRayNMu.s 			page 159


 6200              		.align	1
 6201              		.syntax unified
 6202              		.thumb
 6203              		.thumb_func
 6204              		.fpu softvfp
 6205              		.type	TI2_Config, %function
 6206              	TI2_Config:
 6207              	.LFB151:
2732:common/stm32f10x_tim.c **** 
2733:common/stm32f10x_tim.c **** /**
2734:common/stm32f10x_tim.c ****   * @brief  Configure the TI2 as Input.
2735:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2736:common/stm32f10x_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
2737:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2738:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
2739:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
2740:common/stm32f10x_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
2741:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2742:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
2743:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
2744:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
2745:common/stm32f10x_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
2746:common/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F.
2747:common/stm32f10x_tim.c ****   * @retval None
2748:common/stm32f10x_tim.c ****   */
2749:common/stm32f10x_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
2750:common/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter)
2751:common/stm32f10x_tim.c **** {
 6208              		.loc 1 2751 0
 6209              		.cfi_startproc
 6210              		@ args = 0, pretend = 0, frame = 24
 6211              		@ frame_needed = 1, uses_anonymous_args = 0
 6212              		@ link register save eliminated.
 6213 1ab8 80B4     		push	{r7}
 6214              		.cfi_def_cfa_offset 4
 6215              		.cfi_offset 7, -4
 6216 1aba 87B0     		sub	sp, sp, #28
 6217              		.cfi_def_cfa_offset 32
 6218 1abc 00AF     		add	r7, sp, #0
 6219              		.cfi_def_cfa_register 7
 6220 1abe F860     		str	r0, [r7, #12]
 6221 1ac0 0846     		mov	r0, r1
 6222 1ac2 1146     		mov	r1, r2
 6223 1ac4 1A46     		mov	r2, r3
 6224 1ac6 0346     		mov	r3, r0	@ movhi
 6225 1ac8 7B81     		strh	r3, [r7, #10]	@ movhi
 6226 1aca 0B46     		mov	r3, r1	@ movhi
 6227 1acc 3B81     		strh	r3, [r7, #8]	@ movhi
 6228 1ace 1346     		mov	r3, r2	@ movhi
 6229 1ad0 FB80     		strh	r3, [r7, #6]	@ movhi
2752:common/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 6230              		.loc 1 2752 0
 6231 1ad2 0023     		movs	r3, #0
 6232 1ad4 BB82     		strh	r3, [r7, #20]	@ movhi
 6233 1ad6 0023     		movs	r3, #0
 6234 1ad8 FB82     		strh	r3, [r7, #22]	@ movhi
 6235 1ada 0023     		movs	r3, #0
ARM GAS  /tmp/ccRayNMu.s 			page 160


 6236 1adc 7B82     		strh	r3, [r7, #18]	@ movhi
2753:common/stm32f10x_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
2754:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 6237              		.loc 1 2754 0
 6238 1ade FB68     		ldr	r3, [r7, #12]
 6239 1ae0 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6240 1ae2 9BB2     		uxth	r3, r3
 6241 1ae4 23F01003 		bic	r3, r3, #16
 6242 1ae8 9AB2     		uxth	r2, r3
 6243 1aea FB68     		ldr	r3, [r7, #12]
 6244 1aec 1A84     		strh	r2, [r3, #32]	@ movhi
2755:common/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 6245              		.loc 1 2755 0
 6246 1aee FB68     		ldr	r3, [r7, #12]
 6247 1af0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 6248 1af2 BB82     		strh	r3, [r7, #20]	@ movhi
2756:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 6249              		.loc 1 2756 0
 6250 1af4 FB68     		ldr	r3, [r7, #12]
 6251 1af6 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6252 1af8 FB82     		strh	r3, [r7, #22]	@ movhi
2757:common/stm32f10x_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
 6253              		.loc 1 2757 0
 6254 1afa 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6255 1afc 1B01     		lsls	r3, r3, #4
 6256 1afe 7B82     		strh	r3, [r7, #18]	@ movhi
2758:common/stm32f10x_tim.c ****   /* Select the Input and set the filter */
2759:common/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
 6257              		.loc 1 2759 0
 6258 1b00 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6259 1b02 23F44073 		bic	r3, r3, #768
 6260 1b06 1B05     		lsls	r3, r3, #20
 6261 1b08 1B0D     		lsrs	r3, r3, #20
 6262 1b0a BB82     		strh	r3, [r7, #20]	@ movhi
2760:common/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 6263              		.loc 1 2760 0
 6264 1b0c FB88     		ldrh	r3, [r7, #6]	@ movhi
 6265 1b0e 1B03     		lsls	r3, r3, #12
 6266 1b10 9AB2     		uxth	r2, r3
 6267 1b12 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6268 1b14 1343     		orrs	r3, r3, r2
 6269 1b16 BB82     		strh	r3, [r7, #20]	@ movhi
2761:common/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 6270              		.loc 1 2761 0
 6271 1b18 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6272 1b1a 1B02     		lsls	r3, r3, #8
 6273 1b1c 9AB2     		uxth	r2, r3
 6274 1b1e BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6275 1b20 1343     		orrs	r3, r3, r2
 6276 1b22 BB82     		strh	r3, [r7, #20]	@ movhi
2762:common/stm32f10x_tim.c ****   
2763:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 6277              		.loc 1 2763 0
 6278 1b24 FB68     		ldr	r3, [r7, #12]
 6279 1b26 1C4A     		ldr	r2, .L203
 6280 1b28 9342     		cmp	r3, r2
 6281 1b2a 13D0     		beq	.L200
ARM GAS  /tmp/ccRayNMu.s 			page 161


 6282              		.loc 1 2763 0 is_stmt 0 discriminator 1
 6283 1b2c FB68     		ldr	r3, [r7, #12]
 6284 1b2e 1B4A     		ldr	r2, .L203+4
 6285 1b30 9342     		cmp	r3, r2
 6286 1b32 0FD0     		beq	.L200
 6287              		.loc 1 2763 0 discriminator 2
 6288 1b34 FB68     		ldr	r3, [r7, #12]
 6289 1b36 B3F1804F 		cmp	r3, #1073741824
 6290 1b3a 0BD0     		beq	.L200
 6291              		.loc 1 2763 0 discriminator 3
 6292 1b3c FB68     		ldr	r3, [r7, #12]
 6293 1b3e 184A     		ldr	r2, .L203+8
 6294 1b40 9342     		cmp	r3, r2
 6295 1b42 07D0     		beq	.L200
 6296              		.loc 1 2763 0 discriminator 4
 6297 1b44 FB68     		ldr	r3, [r7, #12]
 6298 1b46 174A     		ldr	r2, .L203+12
 6299 1b48 9342     		cmp	r3, r2
 6300 1b4a 03D0     		beq	.L200
2764:common/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 6301              		.loc 1 2764 0 is_stmt 1
 6302 1b4c FB68     		ldr	r3, [r7, #12]
 6303 1b4e 164A     		ldr	r2, .L203+16
 6304 1b50 9342     		cmp	r3, r2
 6305 1b52 0BD1     		bne	.L201
 6306              	.L200:
2765:common/stm32f10x_tim.c ****   {
2766:common/stm32f10x_tim.c ****     /* Select the Polarity and set the CC2E Bit */
2767:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 6307              		.loc 1 2767 0
 6308 1b54 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6309 1b56 23F02003 		bic	r3, r3, #32
 6310 1b5a FB82     		strh	r3, [r7, #22]	@ movhi
2768:common/stm32f10x_tim.c ****     tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 6311              		.loc 1 2768 0
 6312 1b5c 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6313 1b5e FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6314 1b60 1343     		orrs	r3, r3, r2
 6315 1b62 9BB2     		uxth	r3, r3
 6316 1b64 43F01003 		orr	r3, r3, #16
 6317 1b68 FB82     		strh	r3, [r7, #22]	@ movhi
 6318 1b6a 0AE0     		b	.L202
 6319              	.L201:
2769:common/stm32f10x_tim.c ****   }
2770:common/stm32f10x_tim.c ****   else
2771:common/stm32f10x_tim.c ****   {
2772:common/stm32f10x_tim.c ****     /* Select the Polarity and set the CC2E Bit */
2773:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 6320              		.loc 1 2773 0
 6321 1b6c FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6322 1b6e 23F0A003 		bic	r3, r3, #160
 6323 1b72 FB82     		strh	r3, [r7, #22]	@ movhi
2774:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 6324              		.loc 1 2774 0
 6325 1b74 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6326 1b76 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6327 1b78 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccRayNMu.s 			page 162


 6328 1b7a 9BB2     		uxth	r3, r3
 6329 1b7c 43F01003 		orr	r3, r3, #16
 6330 1b80 FB82     		strh	r3, [r7, #22]	@ movhi
 6331              	.L202:
2775:common/stm32f10x_tim.c ****   }
2776:common/stm32f10x_tim.c ****   
2777:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
2778:common/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 6332              		.loc 1 2778 0
 6333 1b82 FB68     		ldr	r3, [r7, #12]
 6334 1b84 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6335 1b86 1A83     		strh	r2, [r3, #24]	@ movhi
2779:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 6336              		.loc 1 2779 0
 6337 1b88 FB68     		ldr	r3, [r7, #12]
 6338 1b8a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6339 1b8c 1A84     		strh	r2, [r3, #32]	@ movhi
2780:common/stm32f10x_tim.c **** }
 6340              		.loc 1 2780 0
 6341 1b8e 00BF     		nop
 6342 1b90 1C37     		adds	r7, r7, #28
 6343              		.cfi_def_cfa_offset 4
 6344 1b92 BD46     		mov	sp, r7
 6345              		.cfi_def_cfa_register 13
 6346              		@ sp needed
 6347 1b94 80BC     		pop	{r7}
 6348              		.cfi_restore 7
 6349              		.cfi_def_cfa_offset 0
 6350 1b96 7047     		bx	lr
 6351              	.L204:
 6352              		.align	2
 6353              	.L203:
 6354 1b98 002C0140 		.word	1073818624
 6355 1b9c 00340140 		.word	1073820672
 6356 1ba0 00040040 		.word	1073742848
 6357 1ba4 00080040 		.word	1073743872
 6358 1ba8 000C0040 		.word	1073744896
 6359              		.cfi_endproc
 6360              	.LFE151:
 6361              		.size	TI2_Config, .-TI2_Config
 6362              		.align	1
 6363              		.syntax unified
 6364              		.thumb
 6365              		.thumb_func
 6366              		.fpu softvfp
 6367              		.type	TI3_Config, %function
 6368              	TI3_Config:
 6369              	.LFB152:
2781:common/stm32f10x_tim.c **** 
2782:common/stm32f10x_tim.c **** /**
2783:common/stm32f10x_tim.c ****   * @brief  Configure the TI3 as Input.
2784:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2785:common/stm32f10x_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
2786:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2787:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
2788:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
2789:common/stm32f10x_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
ARM GAS  /tmp/ccRayNMu.s 			page 163


2790:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2791:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
2792:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
2793:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
2794:common/stm32f10x_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
2795:common/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F.
2796:common/stm32f10x_tim.c ****   * @retval None
2797:common/stm32f10x_tim.c ****   */
2798:common/stm32f10x_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
2799:common/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter)
2800:common/stm32f10x_tim.c **** {
 6370              		.loc 1 2800 0
 6371              		.cfi_startproc
 6372              		@ args = 0, pretend = 0, frame = 24
 6373              		@ frame_needed = 1, uses_anonymous_args = 0
 6374              		@ link register save eliminated.
 6375 1bac 80B4     		push	{r7}
 6376              		.cfi_def_cfa_offset 4
 6377              		.cfi_offset 7, -4
 6378 1bae 87B0     		sub	sp, sp, #28
 6379              		.cfi_def_cfa_offset 32
 6380 1bb0 00AF     		add	r7, sp, #0
 6381              		.cfi_def_cfa_register 7
 6382 1bb2 F860     		str	r0, [r7, #12]
 6383 1bb4 0846     		mov	r0, r1
 6384 1bb6 1146     		mov	r1, r2
 6385 1bb8 1A46     		mov	r2, r3
 6386 1bba 0346     		mov	r3, r0	@ movhi
 6387 1bbc 7B81     		strh	r3, [r7, #10]	@ movhi
 6388 1bbe 0B46     		mov	r3, r1	@ movhi
 6389 1bc0 3B81     		strh	r3, [r7, #8]	@ movhi
 6390 1bc2 1346     		mov	r3, r2	@ movhi
 6391 1bc4 FB80     		strh	r3, [r7, #6]	@ movhi
2801:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 6392              		.loc 1 2801 0
 6393 1bc6 0023     		movs	r3, #0
 6394 1bc8 BB82     		strh	r3, [r7, #20]	@ movhi
 6395 1bca 0023     		movs	r3, #0
 6396 1bcc FB82     		strh	r3, [r7, #22]	@ movhi
 6397 1bce 0023     		movs	r3, #0
 6398 1bd0 7B82     		strh	r3, [r7, #18]	@ movhi
2802:common/stm32f10x_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
2803:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 6399              		.loc 1 2803 0
 6400 1bd2 FB68     		ldr	r3, [r7, #12]
 6401 1bd4 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6402 1bd6 9BB2     		uxth	r3, r3
 6403 1bd8 23F48073 		bic	r3, r3, #256
 6404 1bdc 9AB2     		uxth	r2, r3
 6405 1bde FB68     		ldr	r3, [r7, #12]
 6406 1be0 1A84     		strh	r2, [r3, #32]	@ movhi
2804:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 6407              		.loc 1 2804 0
 6408 1be2 FB68     		ldr	r3, [r7, #12]
 6409 1be4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 6410 1be6 BB82     		strh	r3, [r7, #20]	@ movhi
2805:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
ARM GAS  /tmp/ccRayNMu.s 			page 164


 6411              		.loc 1 2805 0
 6412 1be8 FB68     		ldr	r3, [r7, #12]
 6413 1bea 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6414 1bec FB82     		strh	r3, [r7, #22]	@ movhi
2806:common/stm32f10x_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
 6415              		.loc 1 2806 0
 6416 1bee 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6417 1bf0 1B02     		lsls	r3, r3, #8
 6418 1bf2 7B82     		strh	r3, [r7, #18]	@ movhi
2807:common/stm32f10x_tim.c ****   /* Select the Input and set the filter */
2808:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2
 6419              		.loc 1 2808 0
 6420 1bf4 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6421 1bf6 23F0F303 		bic	r3, r3, #243
 6422 1bfa BB82     		strh	r3, [r7, #20]	@ movhi
2809:common/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 6423              		.loc 1 2809 0
 6424 1bfc FB88     		ldrh	r3, [r7, #6]	@ movhi
 6425 1bfe 1B01     		lsls	r3, r3, #4
 6426 1c00 9AB2     		uxth	r2, r3
 6427 1c02 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6428 1c04 1343     		orrs	r3, r3, r2
 6429 1c06 9AB2     		uxth	r2, r3
 6430 1c08 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6431 1c0a 1343     		orrs	r3, r3, r2
 6432 1c0c BB82     		strh	r3, [r7, #20]	@ movhi
2810:common/stm32f10x_tim.c ****     
2811:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 6433              		.loc 1 2811 0
 6434 1c0e FB68     		ldr	r3, [r7, #12]
 6435 1c10 1C4A     		ldr	r2, .L209
 6436 1c12 9342     		cmp	r3, r2
 6437 1c14 13D0     		beq	.L206
 6438              		.loc 1 2811 0 is_stmt 0 discriminator 1
 6439 1c16 FB68     		ldr	r3, [r7, #12]
 6440 1c18 1B4A     		ldr	r2, .L209+4
 6441 1c1a 9342     		cmp	r3, r2
 6442 1c1c 0FD0     		beq	.L206
 6443              		.loc 1 2811 0 discriminator 2
 6444 1c1e FB68     		ldr	r3, [r7, #12]
 6445 1c20 B3F1804F 		cmp	r3, #1073741824
 6446 1c24 0BD0     		beq	.L206
 6447              		.loc 1 2811 0 discriminator 3
 6448 1c26 FB68     		ldr	r3, [r7, #12]
 6449 1c28 184A     		ldr	r2, .L209+8
 6450 1c2a 9342     		cmp	r3, r2
 6451 1c2c 07D0     		beq	.L206
 6452              		.loc 1 2811 0 discriminator 4
 6453 1c2e FB68     		ldr	r3, [r7, #12]
 6454 1c30 174A     		ldr	r2, .L209+12
 6455 1c32 9342     		cmp	r3, r2
 6456 1c34 03D0     		beq	.L206
2812:common/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 6457              		.loc 1 2812 0 is_stmt 1
 6458 1c36 FB68     		ldr	r3, [r7, #12]
 6459 1c38 164A     		ldr	r2, .L209+16
 6460 1c3a 9342     		cmp	r3, r2
ARM GAS  /tmp/ccRayNMu.s 			page 165


 6461 1c3c 0BD1     		bne	.L207
 6462              	.L206:
2813:common/stm32f10x_tim.c ****   {
2814:common/stm32f10x_tim.c ****     /* Select the Polarity and set the CC3E Bit */
2815:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 6463              		.loc 1 2815 0
 6464 1c3e FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6465 1c40 23F40073 		bic	r3, r3, #512
 6466 1c44 FB82     		strh	r3, [r7, #22]	@ movhi
2816:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 6467              		.loc 1 2816 0
 6468 1c46 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6469 1c48 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6470 1c4a 1343     		orrs	r3, r3, r2
 6471 1c4c 9BB2     		uxth	r3, r3
 6472 1c4e 43F48073 		orr	r3, r3, #256
 6473 1c52 FB82     		strh	r3, [r7, #22]	@ movhi
 6474 1c54 0AE0     		b	.L208
 6475              	.L207:
2817:common/stm32f10x_tim.c ****   }
2818:common/stm32f10x_tim.c ****   else
2819:common/stm32f10x_tim.c ****   {
2820:common/stm32f10x_tim.c ****     /* Select the Polarity and set the CC3E Bit */
2821:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 6476              		.loc 1 2821 0
 6477 1c56 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6478 1c58 23F42063 		bic	r3, r3, #2560
 6479 1c5c FB82     		strh	r3, [r7, #22]	@ movhi
2822:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 6480              		.loc 1 2822 0
 6481 1c5e 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6482 1c60 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6483 1c62 1343     		orrs	r3, r3, r2
 6484 1c64 9BB2     		uxth	r3, r3
 6485 1c66 43F48073 		orr	r3, r3, #256
 6486 1c6a FB82     		strh	r3, [r7, #22]	@ movhi
 6487              	.L208:
2823:common/stm32f10x_tim.c ****   }
2824:common/stm32f10x_tim.c ****   
2825:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
2826:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 6488              		.loc 1 2826 0
 6489 1c6c FB68     		ldr	r3, [r7, #12]
 6490 1c6e BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6491 1c70 9A83     		strh	r2, [r3, #28]	@ movhi
2827:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 6492              		.loc 1 2827 0
 6493 1c72 FB68     		ldr	r3, [r7, #12]
 6494 1c74 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6495 1c76 1A84     		strh	r2, [r3, #32]	@ movhi
2828:common/stm32f10x_tim.c **** }
 6496              		.loc 1 2828 0
 6497 1c78 00BF     		nop
 6498 1c7a 1C37     		adds	r7, r7, #28
 6499              		.cfi_def_cfa_offset 4
 6500 1c7c BD46     		mov	sp, r7
 6501              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccRayNMu.s 			page 166


 6502              		@ sp needed
 6503 1c7e 80BC     		pop	{r7}
 6504              		.cfi_restore 7
 6505              		.cfi_def_cfa_offset 0
 6506 1c80 7047     		bx	lr
 6507              	.L210:
 6508 1c82 00BF     		.align	2
 6509              	.L209:
 6510 1c84 002C0140 		.word	1073818624
 6511 1c88 00340140 		.word	1073820672
 6512 1c8c 00040040 		.word	1073742848
 6513 1c90 00080040 		.word	1073743872
 6514 1c94 000C0040 		.word	1073744896
 6515              		.cfi_endproc
 6516              	.LFE152:
 6517              		.size	TI3_Config, .-TI3_Config
 6518              		.align	1
 6519              		.syntax unified
 6520              		.thumb
 6521              		.thumb_func
 6522              		.fpu softvfp
 6523              		.type	TI4_Config, %function
 6524              	TI4_Config:
 6525              	.LFB153:
2829:common/stm32f10x_tim.c **** 
2830:common/stm32f10x_tim.c **** /**
2831:common/stm32f10x_tim.c ****   * @brief  Configure the TI4 as Input.
2832:common/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2833:common/stm32f10x_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
2834:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2835:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
2836:common/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
2837:common/stm32f10x_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
2838:common/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2839:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
2840:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
2841:common/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
2842:common/stm32f10x_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
2843:common/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F.
2844:common/stm32f10x_tim.c ****   * @retval None
2845:common/stm32f10x_tim.c ****   */
2846:common/stm32f10x_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
2847:common/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter)
2848:common/stm32f10x_tim.c **** {
 6526              		.loc 1 2848 0
 6527              		.cfi_startproc
 6528              		@ args = 0, pretend = 0, frame = 24
 6529              		@ frame_needed = 1, uses_anonymous_args = 0
 6530              		@ link register save eliminated.
 6531 1c98 80B4     		push	{r7}
 6532              		.cfi_def_cfa_offset 4
 6533              		.cfi_offset 7, -4
 6534 1c9a 87B0     		sub	sp, sp, #28
 6535              		.cfi_def_cfa_offset 32
 6536 1c9c 00AF     		add	r7, sp, #0
 6537              		.cfi_def_cfa_register 7
 6538 1c9e F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccRayNMu.s 			page 167


 6539 1ca0 0846     		mov	r0, r1
 6540 1ca2 1146     		mov	r1, r2
 6541 1ca4 1A46     		mov	r2, r3
 6542 1ca6 0346     		mov	r3, r0	@ movhi
 6543 1ca8 7B81     		strh	r3, [r7, #10]	@ movhi
 6544 1caa 0B46     		mov	r3, r1	@ movhi
 6545 1cac 3B81     		strh	r3, [r7, #8]	@ movhi
 6546 1cae 1346     		mov	r3, r2	@ movhi
 6547 1cb0 FB80     		strh	r3, [r7, #6]	@ movhi
2849:common/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 6548              		.loc 1 2849 0
 6549 1cb2 0023     		movs	r3, #0
 6550 1cb4 BB82     		strh	r3, [r7, #20]	@ movhi
 6551 1cb6 0023     		movs	r3, #0
 6552 1cb8 FB82     		strh	r3, [r7, #22]	@ movhi
 6553 1cba 0023     		movs	r3, #0
 6554 1cbc 7B82     		strh	r3, [r7, #18]	@ movhi
2850:common/stm32f10x_tim.c **** 
2851:common/stm32f10x_tim.c ****    /* Disable the Channel 4: Reset the CC4E Bit */
2852:common/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 6555              		.loc 1 2852 0
 6556 1cbe FB68     		ldr	r3, [r7, #12]
 6557 1cc0 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6558 1cc2 9BB2     		uxth	r3, r3
 6559 1cc4 23F48053 		bic	r3, r3, #4096
 6560 1cc8 9AB2     		uxth	r2, r3
 6561 1cca FB68     		ldr	r3, [r7, #12]
 6562 1ccc 1A84     		strh	r2, [r3, #32]	@ movhi
2853:common/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 6563              		.loc 1 2853 0
 6564 1cce FB68     		ldr	r3, [r7, #12]
 6565 1cd0 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 6566 1cd2 BB82     		strh	r3, [r7, #20]	@ movhi
2854:common/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 6567              		.loc 1 2854 0
 6568 1cd4 FB68     		ldr	r3, [r7, #12]
 6569 1cd6 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6570 1cd8 FB82     		strh	r3, [r7, #22]	@ movhi
2855:common/stm32f10x_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
 6571              		.loc 1 2855 0
 6572 1cda 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6573 1cdc 1B03     		lsls	r3, r3, #12
 6574 1cde 7B82     		strh	r3, [r7, #18]	@ movhi
2856:common/stm32f10x_tim.c ****   /* Select the Input and set the filter */
2857:common/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_I
 6575              		.loc 1 2857 0
 6576 1ce0 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6577 1ce2 23F44073 		bic	r3, r3, #768
 6578 1ce6 1B05     		lsls	r3, r3, #20
 6579 1ce8 1B0D     		lsrs	r3, r3, #20
 6580 1cea BB82     		strh	r3, [r7, #20]	@ movhi
2858:common/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 6581              		.loc 1 2858 0
 6582 1cec 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6583 1cee 1B02     		lsls	r3, r3, #8
 6584 1cf0 9AB2     		uxth	r2, r3
 6585 1cf2 BB8A     		ldrh	r3, [r7, #20]	@ movhi
ARM GAS  /tmp/ccRayNMu.s 			page 168


 6586 1cf4 1343     		orrs	r3, r3, r2
 6587 1cf6 BB82     		strh	r3, [r7, #20]	@ movhi
2859:common/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 6588              		.loc 1 2859 0
 6589 1cf8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 6590 1cfa 1B03     		lsls	r3, r3, #12
 6591 1cfc 9AB2     		uxth	r2, r3
 6592 1cfe BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6593 1d00 1343     		orrs	r3, r3, r2
 6594 1d02 BB82     		strh	r3, [r7, #20]	@ movhi
2860:common/stm32f10x_tim.c ****   
2861:common/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 6595              		.loc 1 2861 0
 6596 1d04 FB68     		ldr	r3, [r7, #12]
 6597 1d06 1D4A     		ldr	r2, .L215
 6598 1d08 9342     		cmp	r3, r2
 6599 1d0a 13D0     		beq	.L212
 6600              		.loc 1 2861 0 is_stmt 0 discriminator 1
 6601 1d0c FB68     		ldr	r3, [r7, #12]
 6602 1d0e 1C4A     		ldr	r2, .L215+4
 6603 1d10 9342     		cmp	r3, r2
 6604 1d12 0FD0     		beq	.L212
 6605              		.loc 1 2861 0 discriminator 2
 6606 1d14 FB68     		ldr	r3, [r7, #12]
 6607 1d16 B3F1804F 		cmp	r3, #1073741824
 6608 1d1a 0BD0     		beq	.L212
 6609              		.loc 1 2861 0 discriminator 3
 6610 1d1c FB68     		ldr	r3, [r7, #12]
 6611 1d1e 194A     		ldr	r2, .L215+8
 6612 1d20 9342     		cmp	r3, r2
 6613 1d22 07D0     		beq	.L212
 6614              		.loc 1 2861 0 discriminator 4
 6615 1d24 FB68     		ldr	r3, [r7, #12]
 6616 1d26 184A     		ldr	r2, .L215+12
 6617 1d28 9342     		cmp	r3, r2
 6618 1d2a 03D0     		beq	.L212
2862:common/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 6619              		.loc 1 2862 0 is_stmt 1
 6620 1d2c FB68     		ldr	r3, [r7, #12]
 6621 1d2e 174A     		ldr	r2, .L215+16
 6622 1d30 9342     		cmp	r3, r2
 6623 1d32 0BD1     		bne	.L213
 6624              	.L212:
2863:common/stm32f10x_tim.c ****   {
2864:common/stm32f10x_tim.c ****     /* Select the Polarity and set the CC4E Bit */
2865:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 6625              		.loc 1 2865 0
 6626 1d34 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6627 1d36 23F40053 		bic	r3, r3, #8192
 6628 1d3a FB82     		strh	r3, [r7, #22]	@ movhi
2866:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 6629              		.loc 1 2866 0
 6630 1d3c 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6631 1d3e FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6632 1d40 1343     		orrs	r3, r3, r2
 6633 1d42 9BB2     		uxth	r3, r3
 6634 1d44 43F48053 		orr	r3, r3, #4096
ARM GAS  /tmp/ccRayNMu.s 			page 169


 6635 1d48 FB82     		strh	r3, [r7, #22]	@ movhi
 6636 1d4a 0CE0     		b	.L214
 6637              	.L213:
2867:common/stm32f10x_tim.c ****   }
2868:common/stm32f10x_tim.c ****   else
2869:common/stm32f10x_tim.c ****   {
2870:common/stm32f10x_tim.c ****     /* Select the Polarity and set the CC4E Bit */
2871:common/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 6638              		.loc 1 2871 0
 6639 1d4c FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6640 1d4e 23F40073 		bic	r3, r3, #512
 6641 1d52 5B04     		lsls	r3, r3, #17
 6642 1d54 5B0C     		lsrs	r3, r3, #17
 6643 1d56 FB82     		strh	r3, [r7, #22]	@ movhi
2872:common/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 6644              		.loc 1 2872 0
 6645 1d58 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6646 1d5a FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6647 1d5c 1343     		orrs	r3, r3, r2
 6648 1d5e 9BB2     		uxth	r3, r3
 6649 1d60 43F48053 		orr	r3, r3, #4096
 6650 1d64 FB82     		strh	r3, [r7, #22]	@ movhi
 6651              	.L214:
2873:common/stm32f10x_tim.c ****   }
2874:common/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
2875:common/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 6652              		.loc 1 2875 0
 6653 1d66 FB68     		ldr	r3, [r7, #12]
 6654 1d68 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6655 1d6a 9A83     		strh	r2, [r3, #28]	@ movhi
2876:common/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 6656              		.loc 1 2876 0
 6657 1d6c FB68     		ldr	r3, [r7, #12]
 6658 1d6e FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6659 1d70 1A84     		strh	r2, [r3, #32]	@ movhi
2877:common/stm32f10x_tim.c **** }
 6660              		.loc 1 2877 0
 6661 1d72 00BF     		nop
 6662 1d74 1C37     		adds	r7, r7, #28
 6663              		.cfi_def_cfa_offset 4
 6664 1d76 BD46     		mov	sp, r7
 6665              		.cfi_def_cfa_register 13
 6666              		@ sp needed
 6667 1d78 80BC     		pop	{r7}
 6668              		.cfi_restore 7
 6669              		.cfi_def_cfa_offset 0
 6670 1d7a 7047     		bx	lr
 6671              	.L216:
 6672              		.align	2
 6673              	.L215:
 6674 1d7c 002C0140 		.word	1073818624
 6675 1d80 00340140 		.word	1073820672
 6676 1d84 00040040 		.word	1073742848
 6677 1d88 00080040 		.word	1073743872
 6678 1d8c 000C0040 		.word	1073744896
 6679              		.cfi_endproc
 6680              	.LFE153:
ARM GAS  /tmp/ccRayNMu.s 			page 170


 6681              		.size	TI4_Config, .-TI4_Config
 6682              	.Letext0:
 6683              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 6684              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 6685              		.file 4 "include/core_cm3.h"
 6686              		.file 5 "include/system_stm32f10x.h"
 6687              		.file 6 "include/stm32f10x.h"
 6688              		.file 7 "include/stm32f10x_tim.h"
 6689              		.section	.debug_info,"",%progbits
 6690              	.Ldebug_info0:
 6691 0000 671C0000 		.4byte	0x1c67
 6692 0004 0400     		.2byte	0x4
 6693 0006 00000000 		.4byte	.Ldebug_abbrev0
 6694 000a 04       		.byte	0x4
 6695 000b 01       		.uleb128 0x1
 6696 000c 35060000 		.4byte	.LASF232
 6697 0010 0C       		.byte	0xc
 6698 0011 DF020000 		.4byte	.LASF233
 6699 0015 90000000 		.4byte	.LASF234
 6700 0019 00000000 		.4byte	.Ltext0
 6701 001d 901D0000 		.4byte	.Letext0-.Ltext0
 6702 0021 00000000 		.4byte	.Ldebug_line0
 6703 0025 02       		.uleb128 0x2
 6704 0026 01       		.byte	0x1
 6705 0027 06       		.byte	0x6
 6706 0028 9E020000 		.4byte	.LASF0
 6707 002c 03       		.uleb128 0x3
 6708 002d E4000000 		.4byte	.LASF3
 6709 0031 02       		.byte	0x2
 6710 0032 1D       		.byte	0x1d
 6711 0033 37000000 		.4byte	0x37
 6712 0037 02       		.uleb128 0x2
 6713 0038 01       		.byte	0x1
 6714 0039 08       		.byte	0x8
 6715 003a 3F090000 		.4byte	.LASF1
 6716 003e 02       		.uleb128 0x2
 6717 003f 02       		.byte	0x2
 6718 0040 05       		.byte	0x5
 6719 0041 77090000 		.4byte	.LASF2
 6720 0045 03       		.uleb128 0x3
 6721 0046 45040000 		.4byte	.LASF4
 6722 004a 02       		.byte	0x2
 6723 004b 2B       		.byte	0x2b
 6724 004c 50000000 		.4byte	0x50
 6725 0050 02       		.uleb128 0x2
 6726 0051 02       		.byte	0x2
 6727 0052 07       		.byte	0x7
 6728 0053 EF090000 		.4byte	.LASF5
 6729 0057 03       		.uleb128 0x3
 6730 0058 340B0000 		.4byte	.LASF6
 6731 005c 02       		.byte	0x2
 6732 005d 3F       		.byte	0x3f
 6733 005e 62000000 		.4byte	0x62
 6734 0062 02       		.uleb128 0x2
 6735 0063 04       		.byte	0x4
 6736 0064 05       		.byte	0x5
 6737 0065 5B030000 		.4byte	.LASF7
ARM GAS  /tmp/ccRayNMu.s 			page 171


 6738 0069 03       		.uleb128 0x3
 6739 006a 5C040000 		.4byte	.LASF8
 6740 006e 02       		.byte	0x2
 6741 006f 41       		.byte	0x41
 6742 0070 74000000 		.4byte	0x74
 6743 0074 02       		.uleb128 0x2
 6744 0075 04       		.byte	0x4
 6745 0076 07       		.byte	0x7
 6746 0077 890A0000 		.4byte	.LASF9
 6747 007b 02       		.uleb128 0x2
 6748 007c 08       		.byte	0x8
 6749 007d 05       		.byte	0x5
 6750 007e 8A030000 		.4byte	.LASF10
 6751 0082 02       		.uleb128 0x2
 6752 0083 08       		.byte	0x8
 6753 0084 07       		.byte	0x7
 6754 0085 8A010000 		.4byte	.LASF11
 6755 0089 04       		.uleb128 0x4
 6756 008a 04       		.byte	0x4
 6757 008b 05       		.byte	0x5
 6758 008c 696E7400 		.ascii	"int\000"
 6759 0090 02       		.uleb128 0x2
 6760 0091 04       		.byte	0x4
 6761 0092 07       		.byte	0x7
 6762 0093 EA040000 		.4byte	.LASF12
 6763 0097 03       		.uleb128 0x3
 6764 0098 910C0000 		.4byte	.LASF13
 6765 009c 03       		.byte	0x3
 6766 009d 18       		.byte	0x18
 6767 009e 2C000000 		.4byte	0x2c
 6768 00a2 03       		.uleb128 0x3
 6769 00a3 98030000 		.4byte	.LASF14
 6770 00a7 03       		.byte	0x3
 6771 00a8 24       		.byte	0x24
 6772 00a9 45000000 		.4byte	0x45
 6773 00ad 05       		.uleb128 0x5
 6774 00ae A2000000 		.4byte	0xa2
 6775 00b2 03       		.uleb128 0x3
 6776 00b3 37090000 		.4byte	.LASF15
 6777 00b7 03       		.byte	0x3
 6778 00b8 2C       		.byte	0x2c
 6779 00b9 57000000 		.4byte	0x57
 6780 00bd 05       		.uleb128 0x5
 6781 00be B2000000 		.4byte	0xb2
 6782 00c2 03       		.uleb128 0x3
 6783 00c3 3F0C0000 		.4byte	.LASF16
 6784 00c7 03       		.byte	0x3
 6785 00c8 30       		.byte	0x30
 6786 00c9 69000000 		.4byte	0x69
 6787 00cd 02       		.uleb128 0x2
 6788 00ce 04       		.byte	0x4
 6789 00cf 07       		.byte	0x7
 6790 00d0 4F070000 		.4byte	.LASF17
 6791 00d4 06       		.uleb128 0x6
 6792 00d5 F1010000 		.4byte	.LASF18
 6793 00d9 04       		.byte	0x4
 6794 00da 9606     		.2byte	0x696
ARM GAS  /tmp/ccRayNMu.s 			page 172


 6795 00dc BD000000 		.4byte	0xbd
 6796 00e0 07       		.uleb128 0x7
 6797 00e1 240C0000 		.4byte	.LASF19
 6798 00e5 05       		.byte	0x5
 6799 00e6 35       		.byte	0x35
 6800 00e7 C2000000 		.4byte	0xc2
 6801 00eb 08       		.uleb128 0x8
 6802 00ec 01       		.byte	0x1
 6803 00ed 37000000 		.4byte	0x37
 6804 00f1 06       		.byte	0x6
 6805 00f2 0702     		.2byte	0x207
 6806 00f4 05010000 		.4byte	0x105
 6807 00f8 09       		.uleb128 0x9
 6808 00f9 F6060000 		.4byte	.LASF20
 6809 00fd 00       		.byte	0
 6810 00fe 0A       		.uleb128 0xa
 6811 00ff 53455400 		.ascii	"SET\000"
 6812 0103 01       		.byte	0x1
 6813 0104 00       		.byte	0
 6814 0105 0B       		.uleb128 0xb
 6815 0106 D9000000 		.4byte	.LASF21
 6816 010a 06       		.byte	0x6
 6817 010b 0702     		.2byte	0x207
 6818 010d EB000000 		.4byte	0xeb
 6819 0111 0B       		.uleb128 0xb
 6820 0112 AF0C0000 		.4byte	.LASF22
 6821 0116 06       		.byte	0x6
 6822 0117 0702     		.2byte	0x207
 6823 0119 EB000000 		.4byte	0xeb
 6824 011d 08       		.uleb128 0x8
 6825 011e 01       		.byte	0x1
 6826 011f 37000000 		.4byte	0x37
 6827 0123 06       		.byte	0x6
 6828 0124 0902     		.2byte	0x209
 6829 0126 37010000 		.4byte	0x137
 6830 012a 09       		.uleb128 0x9
 6831 012b 64010000 		.4byte	.LASF23
 6832 012f 00       		.byte	0
 6833 0130 09       		.uleb128 0x9
 6834 0131 75030000 		.4byte	.LASF24
 6835 0135 01       		.byte	0x1
 6836 0136 00       		.byte	0
 6837 0137 0B       		.uleb128 0xb
 6838 0138 0C080000 		.4byte	.LASF25
 6839 013c 06       		.byte	0x6
 6840 013d 0902     		.2byte	0x209
 6841 013f 1D010000 		.4byte	0x11d
 6842 0143 0C       		.uleb128 0xc
 6843 0144 50       		.byte	0x50
 6844 0145 06       		.byte	0x6
 6845 0146 A204     		.2byte	0x4a2
 6846 0148 54030000 		.4byte	0x354
 6847 014c 0D       		.uleb128 0xd
 6848 014d 43523100 		.ascii	"CR1\000"
 6849 0151 06       		.byte	0x6
 6850 0152 A404     		.2byte	0x4a4
 6851 0154 AD000000 		.4byte	0xad
ARM GAS  /tmp/ccRayNMu.s 			page 173


 6852 0158 00       		.byte	0
 6853 0159 0E       		.uleb128 0xe
 6854 015a 020A0000 		.4byte	.LASF26
 6855 015e 06       		.byte	0x6
 6856 015f A504     		.2byte	0x4a5
 6857 0161 A2000000 		.4byte	0xa2
 6858 0165 02       		.byte	0x2
 6859 0166 0D       		.uleb128 0xd
 6860 0167 43523200 		.ascii	"CR2\000"
 6861 016b 06       		.byte	0x6
 6862 016c A604     		.2byte	0x4a6
 6863 016e AD000000 		.4byte	0xad
 6864 0172 04       		.byte	0x4
 6865 0173 0E       		.uleb128 0xe
 6866 0174 BE080000 		.4byte	.LASF27
 6867 0178 06       		.byte	0x6
 6868 0179 A704     		.2byte	0x4a7
 6869 017b A2000000 		.4byte	0xa2
 6870 017f 06       		.byte	0x6
 6871 0180 0E       		.uleb128 0xe
 6872 0181 E3050000 		.4byte	.LASF28
 6873 0185 06       		.byte	0x6
 6874 0186 A804     		.2byte	0x4a8
 6875 0188 AD000000 		.4byte	0xad
 6876 018c 08       		.byte	0x8
 6877 018d 0E       		.uleb128 0xe
 6878 018e C8080000 		.4byte	.LASF29
 6879 0192 06       		.byte	0x6
 6880 0193 A904     		.2byte	0x4a9
 6881 0195 A2000000 		.4byte	0xa2
 6882 0199 0A       		.byte	0xa
 6883 019a 0E       		.uleb128 0xe
 6884 019b 4A000000 		.4byte	.LASF30
 6885 019f 06       		.byte	0x6
 6886 01a0 AA04     		.2byte	0x4aa
 6887 01a2 AD000000 		.4byte	0xad
 6888 01a6 0C       		.byte	0xc
 6889 01a7 0E       		.uleb128 0xe
 6890 01a8 D2080000 		.4byte	.LASF31
 6891 01ac 06       		.byte	0x6
 6892 01ad AB04     		.2byte	0x4ab
 6893 01af A2000000 		.4byte	0xa2
 6894 01b3 0E       		.byte	0xe
 6895 01b4 0D       		.uleb128 0xd
 6896 01b5 535200   		.ascii	"SR\000"
 6897 01b8 06       		.byte	0x6
 6898 01b9 AC04     		.2byte	0x4ac
 6899 01bb AD000000 		.4byte	0xad
 6900 01bf 10       		.byte	0x10
 6901 01c0 0E       		.uleb128 0xe
 6902 01c1 DC080000 		.4byte	.LASF32
 6903 01c5 06       		.byte	0x6
 6904 01c6 AD04     		.2byte	0x4ad
 6905 01c8 A2000000 		.4byte	0xa2
 6906 01cc 12       		.byte	0x12
 6907 01cd 0D       		.uleb128 0xd
 6908 01ce 45475200 		.ascii	"EGR\000"
ARM GAS  /tmp/ccRayNMu.s 			page 174


 6909 01d2 06       		.byte	0x6
 6910 01d3 AE04     		.2byte	0x4ae
 6911 01d5 AD000000 		.4byte	0xad
 6912 01d9 14       		.byte	0x14
 6913 01da 0E       		.uleb128 0xe
 6914 01db E6080000 		.4byte	.LASF33
 6915 01df 06       		.byte	0x6
 6916 01e0 AF04     		.2byte	0x4af
 6917 01e2 A2000000 		.4byte	0xa2
 6918 01e6 16       		.byte	0x16
 6919 01e7 0E       		.uleb128 0xe
 6920 01e8 7C020000 		.4byte	.LASF34
 6921 01ec 06       		.byte	0x6
 6922 01ed B004     		.2byte	0x4b0
 6923 01ef AD000000 		.4byte	0xad
 6924 01f3 18       		.byte	0x18
 6925 01f4 0E       		.uleb128 0xe
 6926 01f5 F0080000 		.4byte	.LASF35
 6927 01f9 06       		.byte	0x6
 6928 01fa B104     		.2byte	0x4b1
 6929 01fc A2000000 		.4byte	0xa2
 6930 0200 1A       		.byte	0x1a
 6931 0201 0E       		.uleb128 0xe
 6932 0202 82020000 		.4byte	.LASF36
 6933 0206 06       		.byte	0x6
 6934 0207 B204     		.2byte	0x4b2
 6935 0209 AD000000 		.4byte	0xad
 6936 020d 1C       		.byte	0x1c
 6937 020e 0E       		.uleb128 0xe
 6938 020f 3D0A0000 		.4byte	.LASF37
 6939 0213 06       		.byte	0x6
 6940 0214 B304     		.2byte	0x4b3
 6941 0216 A2000000 		.4byte	0xa2
 6942 021a 1E       		.byte	0x1e
 6943 021b 0E       		.uleb128 0xe
 6944 021c 85030000 		.4byte	.LASF38
 6945 0220 06       		.byte	0x6
 6946 0221 B404     		.2byte	0x4b4
 6947 0223 AD000000 		.4byte	0xad
 6948 0227 20       		.byte	0x20
 6949 0228 0E       		.uleb128 0xe
 6950 0229 FA080000 		.4byte	.LASF39
 6951 022d 06       		.byte	0x6
 6952 022e B504     		.2byte	0x4b5
 6953 0230 A2000000 		.4byte	0xa2
 6954 0234 22       		.byte	0x22
 6955 0235 0D       		.uleb128 0xd
 6956 0236 434E5400 		.ascii	"CNT\000"
 6957 023a 06       		.byte	0x6
 6958 023b B604     		.2byte	0x4b6
 6959 023d AD000000 		.4byte	0xad
 6960 0241 24       		.byte	0x24
 6961 0242 0E       		.uleb128 0xe
 6962 0243 04090000 		.4byte	.LASF40
 6963 0247 06       		.byte	0x6
 6964 0248 B704     		.2byte	0x4b7
 6965 024a A2000000 		.4byte	0xa2
ARM GAS  /tmp/ccRayNMu.s 			page 175


 6966 024e 26       		.byte	0x26
 6967 024f 0D       		.uleb128 0xd
 6968 0250 50534300 		.ascii	"PSC\000"
 6969 0254 06       		.byte	0x6
 6970 0255 B804     		.2byte	0x4b8
 6971 0257 AD000000 		.4byte	0xad
 6972 025b 28       		.byte	0x28
 6973 025c 0E       		.uleb128 0xe
 6974 025d D4020000 		.4byte	.LASF41
 6975 0261 06       		.byte	0x6
 6976 0262 B904     		.2byte	0x4b9
 6977 0264 A2000000 		.4byte	0xa2
 6978 0268 2A       		.byte	0x2a
 6979 0269 0D       		.uleb128 0xd
 6980 026a 41525200 		.ascii	"ARR\000"
 6981 026e 06       		.byte	0x6
 6982 026f BA04     		.2byte	0x4ba
 6983 0271 AD000000 		.4byte	0xad
 6984 0275 2C       		.byte	0x2c
 6985 0276 0E       		.uleb128 0xe
 6986 0277 340C0000 		.4byte	.LASF42
 6987 027b 06       		.byte	0x6
 6988 027c BB04     		.2byte	0x4bb
 6989 027e A2000000 		.4byte	0xa2
 6990 0282 2E       		.byte	0x2e
 6991 0283 0D       		.uleb128 0xd
 6992 0284 52435200 		.ascii	"RCR\000"
 6993 0288 06       		.byte	0x6
 6994 0289 BC04     		.2byte	0x4bc
 6995 028b AD000000 		.4byte	0xad
 6996 028f 30       		.byte	0x30
 6997 0290 0E       		.uleb128 0xe
 6998 0291 F6020000 		.4byte	.LASF43
 6999 0295 06       		.byte	0x6
 7000 0296 BD04     		.2byte	0x4bd
 7001 0298 A2000000 		.4byte	0xa2
 7002 029c 32       		.byte	0x32
 7003 029d 0E       		.uleb128 0xe
 7004 029e 480C0000 		.4byte	.LASF44
 7005 02a2 06       		.byte	0x6
 7006 02a3 BE04     		.2byte	0x4be
 7007 02a5 AD000000 		.4byte	0xad
 7008 02a9 34       		.byte	0x34
 7009 02aa 0E       		.uleb128 0xe
 7010 02ab 01030000 		.4byte	.LASF45
 7011 02af 06       		.byte	0x6
 7012 02b0 BF04     		.2byte	0x4bf
 7013 02b2 A2000000 		.4byte	0xa2
 7014 02b6 36       		.byte	0x36
 7015 02b7 0E       		.uleb128 0xe
 7016 02b8 4D0C0000 		.4byte	.LASF46
 7017 02bc 06       		.byte	0x6
 7018 02bd C004     		.2byte	0x4c0
 7019 02bf AD000000 		.4byte	0xad
 7020 02c3 38       		.byte	0x38
 7021 02c4 0E       		.uleb128 0xe
 7022 02c5 0C030000 		.4byte	.LASF47
ARM GAS  /tmp/ccRayNMu.s 			page 176


 7023 02c9 06       		.byte	0x6
 7024 02ca C104     		.2byte	0x4c1
 7025 02cc A2000000 		.4byte	0xa2
 7026 02d0 3A       		.byte	0x3a
 7027 02d1 0E       		.uleb128 0xe
 7028 02d2 520C0000 		.4byte	.LASF48
 7029 02d6 06       		.byte	0x6
 7030 02d7 C204     		.2byte	0x4c2
 7031 02d9 AD000000 		.4byte	0xad
 7032 02dd 3C       		.byte	0x3c
 7033 02de 0E       		.uleb128 0xe
 7034 02df 17030000 		.4byte	.LASF49
 7035 02e3 06       		.byte	0x6
 7036 02e4 C304     		.2byte	0x4c3
 7037 02e6 A2000000 		.4byte	0xa2
 7038 02ea 3E       		.byte	0x3e
 7039 02eb 0E       		.uleb128 0xe
 7040 02ec 570C0000 		.4byte	.LASF50
 7041 02f0 06       		.byte	0x6
 7042 02f1 C404     		.2byte	0x4c4
 7043 02f3 AD000000 		.4byte	0xad
 7044 02f7 40       		.byte	0x40
 7045 02f8 0E       		.uleb128 0xe
 7046 02f9 22030000 		.4byte	.LASF51
 7047 02fd 06       		.byte	0x6
 7048 02fe C504     		.2byte	0x4c5
 7049 0300 A2000000 		.4byte	0xa2
 7050 0304 42       		.byte	0x42
 7051 0305 0E       		.uleb128 0xe
 7052 0306 81090000 		.4byte	.LASF52
 7053 030a 06       		.byte	0x6
 7054 030b C604     		.2byte	0x4c6
 7055 030d AD000000 		.4byte	0xad
 7056 0311 44       		.byte	0x44
 7057 0312 0E       		.uleb128 0xe
 7058 0313 2D030000 		.4byte	.LASF53
 7059 0317 06       		.byte	0x6
 7060 0318 C704     		.2byte	0x4c7
 7061 031a A2000000 		.4byte	0xa2
 7062 031e 46       		.byte	0x46
 7063 031f 0D       		.uleb128 0xd
 7064 0320 44435200 		.ascii	"DCR\000"
 7065 0324 06       		.byte	0x6
 7066 0325 C804     		.2byte	0x4c8
 7067 0327 AD000000 		.4byte	0xad
 7068 032b 48       		.byte	0x48
 7069 032c 0E       		.uleb128 0xe
 7070 032d 5C0C0000 		.4byte	.LASF54
 7071 0331 06       		.byte	0x6
 7072 0332 C904     		.2byte	0x4c9
 7073 0334 A2000000 		.4byte	0xa2
 7074 0338 4A       		.byte	0x4a
 7075 0339 0E       		.uleb128 0xe
 7076 033a D60A0000 		.4byte	.LASF55
 7077 033e 06       		.byte	0x6
 7078 033f CA04     		.2byte	0x4ca
 7079 0341 AD000000 		.4byte	0xad
ARM GAS  /tmp/ccRayNMu.s 			page 177


 7080 0345 4C       		.byte	0x4c
 7081 0346 0E       		.uleb128 0xe
 7082 0347 50030000 		.4byte	.LASF56
 7083 034b 06       		.byte	0x6
 7084 034c CB04     		.2byte	0x4cb
 7085 034e A2000000 		.4byte	0xa2
 7086 0352 4E       		.byte	0x4e
 7087 0353 00       		.byte	0
 7088 0354 0B       		.uleb128 0xb
 7089 0355 50040000 		.4byte	.LASF57
 7090 0359 06       		.byte	0x6
 7091 035a CC04     		.2byte	0x4cc
 7092 035c 43010000 		.4byte	0x143
 7093 0360 0F       		.uleb128 0xf
 7094 0361 0A       		.byte	0xa
 7095 0362 07       		.byte	0x7
 7096 0363 33       		.byte	0x33
 7097 0364 A5030000 		.4byte	0x3a5
 7098 0368 10       		.uleb128 0x10
 7099 0369 0E090000 		.4byte	.LASF58
 7100 036d 07       		.byte	0x7
 7101 036e 35       		.byte	0x35
 7102 036f A2000000 		.4byte	0xa2
 7103 0373 00       		.byte	0
 7104 0374 10       		.uleb128 0x10
 7105 0375 75000000 		.4byte	.LASF59
 7106 0379 07       		.byte	0x7
 7107 037a 38       		.byte	0x38
 7108 037b A2000000 		.4byte	0xa2
 7109 037f 02       		.byte	0x2
 7110 0380 10       		.uleb128 0x10
 7111 0381 FB0A0000 		.4byte	.LASF60
 7112 0385 07       		.byte	0x7
 7113 0386 3B       		.byte	0x3b
 7114 0387 A2000000 		.4byte	0xa2
 7115 038b 04       		.byte	0x4
 7116 038c 10       		.uleb128 0x10
 7117 038d 11050000 		.4byte	.LASF61
 7118 0391 07       		.byte	0x7
 7119 0392 3F       		.byte	0x3f
 7120 0393 A2000000 		.4byte	0xa2
 7121 0397 06       		.byte	0x6
 7122 0398 10       		.uleb128 0x10
 7123 0399 C40C0000 		.4byte	.LASF62
 7124 039d 07       		.byte	0x7
 7125 039e 42       		.byte	0x42
 7126 039f 97000000 		.4byte	0x97
 7127 03a3 08       		.byte	0x8
 7128 03a4 00       		.byte	0
 7129 03a5 03       		.uleb128 0x3
 7130 03a6 060B0000 		.4byte	.LASF63
 7131 03aa 07       		.byte	0x7
 7132 03ab 4A       		.byte	0x4a
 7133 03ac 60030000 		.4byte	0x360
 7134 03b0 0F       		.uleb128 0xf
 7135 03b1 10       		.byte	0x10
 7136 03b2 07       		.byte	0x7
ARM GAS  /tmp/ccRayNMu.s 			page 178


 7137 03b3 50       		.byte	0x50
 7138 03b4 19040000 		.4byte	0x419
 7139 03b8 10       		.uleb128 0x10
 7140 03b9 CB0B0000 		.4byte	.LASF64
 7141 03bd 07       		.byte	0x7
 7142 03be 52       		.byte	0x52
 7143 03bf A2000000 		.4byte	0xa2
 7144 03c3 00       		.byte	0
 7145 03c4 10       		.uleb128 0x10
 7146 03c5 8F080000 		.4byte	.LASF65
 7147 03c9 07       		.byte	0x7
 7148 03ca 55       		.byte	0x55
 7149 03cb A2000000 		.4byte	0xa2
 7150 03cf 02       		.byte	0x2
 7151 03d0 10       		.uleb128 0x10
 7152 03d1 64030000 		.4byte	.LASF66
 7153 03d5 07       		.byte	0x7
 7154 03d6 58       		.byte	0x58
 7155 03d7 A2000000 		.4byte	0xa2
 7156 03db 04       		.byte	0x4
 7157 03dc 10       		.uleb128 0x10
 7158 03dd 41010000 		.4byte	.LASF67
 7159 03e1 07       		.byte	0x7
 7160 03e2 5C       		.byte	0x5c
 7161 03e3 A2000000 		.4byte	0xa2
 7162 03e7 06       		.byte	0x6
 7163 03e8 10       		.uleb128 0x10
 7164 03e9 02050000 		.4byte	.LASF68
 7165 03ed 07       		.byte	0x7
 7166 03ee 5F       		.byte	0x5f
 7167 03ef A2000000 		.4byte	0xa2
 7168 03f3 08       		.byte	0x8
 7169 03f4 10       		.uleb128 0x10
 7170 03f5 9B0A0000 		.4byte	.LASF69
 7171 03f9 07       		.byte	0x7
 7172 03fa 62       		.byte	0x62
 7173 03fb A2000000 		.4byte	0xa2
 7174 03ff 0A       		.byte	0xa
 7175 0400 10       		.uleb128 0x10
 7176 0401 1F0D0000 		.4byte	.LASF70
 7177 0405 07       		.byte	0x7
 7178 0406 66       		.byte	0x66
 7179 0407 A2000000 		.4byte	0xa2
 7180 040b 0C       		.byte	0xc
 7181 040c 10       		.uleb128 0x10
 7182 040d D2070000 		.4byte	.LASF71
 7183 0411 07       		.byte	0x7
 7184 0412 6A       		.byte	0x6a
 7185 0413 A2000000 		.4byte	0xa2
 7186 0417 0E       		.byte	0xe
 7187 0418 00       		.byte	0
 7188 0419 03       		.uleb128 0x3
 7189 041a 670C0000 		.4byte	.LASF72
 7190 041e 07       		.byte	0x7
 7191 041f 6D       		.byte	0x6d
 7192 0420 B0030000 		.4byte	0x3b0
 7193 0424 0F       		.uleb128 0xf
ARM GAS  /tmp/ccRayNMu.s 			page 179


 7194 0425 0A       		.byte	0xa
 7195 0426 07       		.byte	0x7
 7196 0427 73       		.byte	0x73
 7197 0428 69040000 		.4byte	0x469
 7198 042c 10       		.uleb128 0x10
 7199 042d 70020000 		.4byte	.LASF73
 7200 0431 07       		.byte	0x7
 7201 0432 76       		.byte	0x76
 7202 0433 A2000000 		.4byte	0xa2
 7203 0437 00       		.byte	0
 7204 0438 10       		.uleb128 0x10
 7205 0439 AF080000 		.4byte	.LASF74
 7206 043d 07       		.byte	0x7
 7207 043e 79       		.byte	0x79
 7208 043f A2000000 		.4byte	0xa2
 7209 0443 02       		.byte	0x2
 7210 0444 10       		.uleb128 0x10
 7211 0445 FE010000 		.4byte	.LASF75
 7212 0449 07       		.byte	0x7
 7213 044a 7C       		.byte	0x7c
 7214 044b A2000000 		.4byte	0xa2
 7215 044f 04       		.byte	0x4
 7216 0450 10       		.uleb128 0x10
 7217 0451 AD070000 		.4byte	.LASF76
 7218 0455 07       		.byte	0x7
 7219 0456 7F       		.byte	0x7f
 7220 0457 A2000000 		.4byte	0xa2
 7221 045b 06       		.byte	0x6
 7222 045c 10       		.uleb128 0x10
 7223 045d A1010000 		.4byte	.LASF77
 7224 0461 07       		.byte	0x7
 7225 0462 82       		.byte	0x82
 7226 0463 A2000000 		.4byte	0xa2
 7227 0467 08       		.byte	0x8
 7228 0468 00       		.byte	0
 7229 0469 03       		.uleb128 0x3
 7230 046a 3E0B0000 		.4byte	.LASF78
 7231 046e 07       		.byte	0x7
 7232 046f 84       		.byte	0x84
 7233 0470 24040000 		.4byte	0x424
 7234 0474 0F       		.uleb128 0xf
 7235 0475 0E       		.byte	0xe
 7236 0476 07       		.byte	0x7
 7237 0477 8B       		.byte	0x8b
 7238 0478 D1040000 		.4byte	0x4d1
 7239 047c 10       		.uleb128 0x10
 7240 047d E8050000 		.4byte	.LASF79
 7241 0481 07       		.byte	0x7
 7242 0482 8E       		.byte	0x8e
 7243 0483 A2000000 		.4byte	0xa2
 7244 0487 00       		.byte	0
 7245 0488 10       		.uleb128 0x10
 7246 0489 E1090000 		.4byte	.LASF80
 7247 048d 07       		.byte	0x7
 7248 048e 91       		.byte	0x91
 7249 048f A2000000 		.4byte	0xa2
 7250 0493 02       		.byte	0x2
ARM GAS  /tmp/ccRayNMu.s 			page 180


 7251 0494 10       		.uleb128 0x10
 7252 0495 4D090000 		.4byte	.LASF81
 7253 0499 07       		.byte	0x7
 7254 049a 94       		.byte	0x94
 7255 049b A2000000 		.4byte	0xa2
 7256 049f 04       		.byte	0x4
 7257 04a0 10       		.uleb128 0x10
 7258 04a1 76070000 		.4byte	.LASF82
 7259 04a5 07       		.byte	0x7
 7260 04a6 97       		.byte	0x97
 7261 04a7 A2000000 		.4byte	0xa2
 7262 04ab 06       		.byte	0x6
 7263 04ac 10       		.uleb128 0x10
 7264 04ad 6C070000 		.4byte	.LASF83
 7265 04b1 07       		.byte	0x7
 7266 04b2 9B       		.byte	0x9b
 7267 04b3 A2000000 		.4byte	0xa2
 7268 04b7 08       		.byte	0x8
 7269 04b8 10       		.uleb128 0x10
 7270 04b9 E60B0000 		.4byte	.LASF84
 7271 04bd 07       		.byte	0x7
 7272 04be 9E       		.byte	0x9e
 7273 04bf A2000000 		.4byte	0xa2
 7274 04c3 0A       		.byte	0xa
 7275 04c4 10       		.uleb128 0x10
 7276 04c5 21060000 		.4byte	.LASF85
 7277 04c9 07       		.byte	0x7
 7278 04ca A1       		.byte	0xa1
 7279 04cb A2000000 		.4byte	0xa2
 7280 04cf 0C       		.byte	0xc
 7281 04d0 00       		.byte	0
 7282 04d1 03       		.uleb128 0x3
 7283 04d2 BE050000 		.4byte	.LASF86
 7284 04d6 07       		.byte	0x7
 7285 04d7 A3       		.byte	0xa3
 7286 04d8 74040000 		.4byte	0x474
 7287 04dc 11       		.uleb128 0x11
 7288 04dd F7040000 		.4byte	.LASF90
 7289 04e1 01       		.byte	0x1
 7290 04e2 1E0B     		.2byte	0xb1e
 7291 04e4 981C0000 		.4byte	.LFB153
 7292 04e8 F8000000 		.4byte	.LFE153-.LFB153
 7293 04ec 01       		.uleb128 0x1
 7294 04ed 9C       		.byte	0x9c
 7295 04ee 5C050000 		.4byte	0x55c
 7296 04f2 12       		.uleb128 0x12
 7297 04f3 F6050000 		.4byte	.LASF87
 7298 04f7 01       		.byte	0x1
 7299 04f8 1E0B     		.2byte	0xb1e
 7300 04fa 5C050000 		.4byte	0x55c
 7301 04fe 02       		.uleb128 0x2
 7302 04ff 91       		.byte	0x91
 7303 0500 6C       		.sleb128 -20
 7304 0501 12       		.uleb128 0x12
 7305 0502 AF080000 		.4byte	.LASF74
 7306 0506 01       		.byte	0x1
 7307 0507 1E0B     		.2byte	0xb1e
ARM GAS  /tmp/ccRayNMu.s 			page 181


 7308 0509 A2000000 		.4byte	0xa2
 7309 050d 02       		.uleb128 0x2
 7310 050e 91       		.byte	0x91
 7311 050f 6A       		.sleb128 -22
 7312 0510 12       		.uleb128 0x12
 7313 0511 FE010000 		.4byte	.LASF75
 7314 0515 01       		.byte	0x1
 7315 0516 1E0B     		.2byte	0xb1e
 7316 0518 A2000000 		.4byte	0xa2
 7317 051c 02       		.uleb128 0x2
 7318 051d 91       		.byte	0x91
 7319 051e 68       		.sleb128 -24
 7320 051f 12       		.uleb128 0x12
 7321 0520 A1010000 		.4byte	.LASF77
 7322 0524 01       		.byte	0x1
 7323 0525 1F0B     		.2byte	0xb1f
 7324 0527 A2000000 		.4byte	0xa2
 7325 052b 02       		.uleb128 0x2
 7326 052c 91       		.byte	0x91
 7327 052d 66       		.sleb128 -26
 7328 052e 13       		.uleb128 0x13
 7329 052f 54010000 		.4byte	.LASF88
 7330 0533 01       		.byte	0x1
 7331 0534 210B     		.2byte	0xb21
 7332 0536 A2000000 		.4byte	0xa2
 7333 053a 02       		.uleb128 0x2
 7334 053b 91       		.byte	0x91
 7335 053c 74       		.sleb128 -12
 7336 053d 13       		.uleb128 0x13
 7337 053e CB040000 		.4byte	.LASF89
 7338 0542 01       		.byte	0x1
 7339 0543 210B     		.2byte	0xb21
 7340 0545 A2000000 		.4byte	0xa2
 7341 0549 02       		.uleb128 0x2
 7342 054a 91       		.byte	0x91
 7343 054b 76       		.sleb128 -10
 7344 054c 14       		.uleb128 0x14
 7345 054d 746D7000 		.ascii	"tmp\000"
 7346 0551 01       		.byte	0x1
 7347 0552 210B     		.2byte	0xb21
 7348 0554 A2000000 		.4byte	0xa2
 7349 0558 02       		.uleb128 0x2
 7350 0559 91       		.byte	0x91
 7351 055a 72       		.sleb128 -14
 7352 055b 00       		.byte	0
 7353 055c 15       		.uleb128 0x15
 7354 055d 04       		.byte	0x4
 7355 055e 54030000 		.4byte	0x354
 7356 0562 11       		.uleb128 0x11
 7357 0563 AE060000 		.4byte	.LASF91
 7358 0567 01       		.byte	0x1
 7359 0568 EE0A     		.2byte	0xaee
 7360 056a AC1B0000 		.4byte	.LFB152
 7361 056e EC000000 		.4byte	.LFE152-.LFB152
 7362 0572 01       		.uleb128 0x1
 7363 0573 9C       		.byte	0x9c
 7364 0574 E2050000 		.4byte	0x5e2
ARM GAS  /tmp/ccRayNMu.s 			page 182


 7365 0578 12       		.uleb128 0x12
 7366 0579 F6050000 		.4byte	.LASF87
 7367 057d 01       		.byte	0x1
 7368 057e EE0A     		.2byte	0xaee
 7369 0580 5C050000 		.4byte	0x55c
 7370 0584 02       		.uleb128 0x2
 7371 0585 91       		.byte	0x91
 7372 0586 6C       		.sleb128 -20
 7373 0587 12       		.uleb128 0x12
 7374 0588 AF080000 		.4byte	.LASF74
 7375 058c 01       		.byte	0x1
 7376 058d EE0A     		.2byte	0xaee
 7377 058f A2000000 		.4byte	0xa2
 7378 0593 02       		.uleb128 0x2
 7379 0594 91       		.byte	0x91
 7380 0595 6A       		.sleb128 -22
 7381 0596 12       		.uleb128 0x12
 7382 0597 FE010000 		.4byte	.LASF75
 7383 059b 01       		.byte	0x1
 7384 059c EE0A     		.2byte	0xaee
 7385 059e A2000000 		.4byte	0xa2
 7386 05a2 02       		.uleb128 0x2
 7387 05a3 91       		.byte	0x91
 7388 05a4 68       		.sleb128 -24
 7389 05a5 12       		.uleb128 0x12
 7390 05a6 A1010000 		.4byte	.LASF77
 7391 05aa 01       		.byte	0x1
 7392 05ab EF0A     		.2byte	0xaef
 7393 05ad A2000000 		.4byte	0xa2
 7394 05b1 02       		.uleb128 0x2
 7395 05b2 91       		.byte	0x91
 7396 05b3 66       		.sleb128 -26
 7397 05b4 13       		.uleb128 0x13
 7398 05b5 54010000 		.4byte	.LASF88
 7399 05b9 01       		.byte	0x1
 7400 05ba F10A     		.2byte	0xaf1
 7401 05bc A2000000 		.4byte	0xa2
 7402 05c0 02       		.uleb128 0x2
 7403 05c1 91       		.byte	0x91
 7404 05c2 74       		.sleb128 -12
 7405 05c3 13       		.uleb128 0x13
 7406 05c4 CB040000 		.4byte	.LASF89
 7407 05c8 01       		.byte	0x1
 7408 05c9 F10A     		.2byte	0xaf1
 7409 05cb A2000000 		.4byte	0xa2
 7410 05cf 02       		.uleb128 0x2
 7411 05d0 91       		.byte	0x91
 7412 05d1 76       		.sleb128 -10
 7413 05d2 14       		.uleb128 0x14
 7414 05d3 746D7000 		.ascii	"tmp\000"
 7415 05d7 01       		.byte	0x1
 7416 05d8 F10A     		.2byte	0xaf1
 7417 05da A2000000 		.4byte	0xa2
 7418 05de 02       		.uleb128 0x2
 7419 05df 91       		.byte	0x91
 7420 05e0 72       		.sleb128 -14
 7421 05e1 00       		.byte	0
ARM GAS  /tmp/ccRayNMu.s 			page 183


 7422 05e2 11       		.uleb128 0x11
 7423 05e3 5A0A0000 		.4byte	.LASF92
 7424 05e7 01       		.byte	0x1
 7425 05e8 BD0A     		.2byte	0xabd
 7426 05ea B81A0000 		.4byte	.LFB151
 7427 05ee F4000000 		.4byte	.LFE151-.LFB151
 7428 05f2 01       		.uleb128 0x1
 7429 05f3 9C       		.byte	0x9c
 7430 05f4 62060000 		.4byte	0x662
 7431 05f8 12       		.uleb128 0x12
 7432 05f9 F6050000 		.4byte	.LASF87
 7433 05fd 01       		.byte	0x1
 7434 05fe BD0A     		.2byte	0xabd
 7435 0600 5C050000 		.4byte	0x55c
 7436 0604 02       		.uleb128 0x2
 7437 0605 91       		.byte	0x91
 7438 0606 6C       		.sleb128 -20
 7439 0607 12       		.uleb128 0x12
 7440 0608 AF080000 		.4byte	.LASF74
 7441 060c 01       		.byte	0x1
 7442 060d BD0A     		.2byte	0xabd
 7443 060f A2000000 		.4byte	0xa2
 7444 0613 02       		.uleb128 0x2
 7445 0614 91       		.byte	0x91
 7446 0615 6A       		.sleb128 -22
 7447 0616 12       		.uleb128 0x12
 7448 0617 FE010000 		.4byte	.LASF75
 7449 061b 01       		.byte	0x1
 7450 061c BD0A     		.2byte	0xabd
 7451 061e A2000000 		.4byte	0xa2
 7452 0622 02       		.uleb128 0x2
 7453 0623 91       		.byte	0x91
 7454 0624 68       		.sleb128 -24
 7455 0625 12       		.uleb128 0x12
 7456 0626 A1010000 		.4byte	.LASF77
 7457 062a 01       		.byte	0x1
 7458 062b BE0A     		.2byte	0xabe
 7459 062d A2000000 		.4byte	0xa2
 7460 0631 02       		.uleb128 0x2
 7461 0632 91       		.byte	0x91
 7462 0633 66       		.sleb128 -26
 7463 0634 13       		.uleb128 0x13
 7464 0635 4B010000 		.4byte	.LASF93
 7465 0639 01       		.byte	0x1
 7466 063a C00A     		.2byte	0xac0
 7467 063c A2000000 		.4byte	0xa2
 7468 0640 02       		.uleb128 0x2
 7469 0641 91       		.byte	0x91
 7470 0642 74       		.sleb128 -12
 7471 0643 13       		.uleb128 0x13
 7472 0644 CB040000 		.4byte	.LASF89
 7473 0648 01       		.byte	0x1
 7474 0649 C00A     		.2byte	0xac0
 7475 064b A2000000 		.4byte	0xa2
 7476 064f 02       		.uleb128 0x2
 7477 0650 91       		.byte	0x91
 7478 0651 76       		.sleb128 -10
ARM GAS  /tmp/ccRayNMu.s 			page 184


 7479 0652 14       		.uleb128 0x14
 7480 0653 746D7000 		.ascii	"tmp\000"
 7481 0657 01       		.byte	0x1
 7482 0658 C00A     		.2byte	0xac0
 7483 065a A2000000 		.4byte	0xa2
 7484 065e 02       		.uleb128 0x2
 7485 065f 91       		.byte	0x91
 7486 0660 72       		.sleb128 -14
 7487 0661 00       		.byte	0
 7488 0662 11       		.uleb128 0x11
 7489 0663 C30A0000 		.4byte	.LASF94
 7490 0667 01       		.byte	0x1
 7491 0668 8E0A     		.2byte	0xa8e
 7492 066a D6190000 		.4byte	.LFB150
 7493 066e E2000000 		.4byte	.LFE150-.LFB150
 7494 0672 01       		.uleb128 0x1
 7495 0673 9C       		.byte	0x9c
 7496 0674 D3060000 		.4byte	0x6d3
 7497 0678 12       		.uleb128 0x12
 7498 0679 F6050000 		.4byte	.LASF87
 7499 067d 01       		.byte	0x1
 7500 067e 8E0A     		.2byte	0xa8e
 7501 0680 5C050000 		.4byte	0x55c
 7502 0684 02       		.uleb128 0x2
 7503 0685 91       		.byte	0x91
 7504 0686 6C       		.sleb128 -20
 7505 0687 12       		.uleb128 0x12
 7506 0688 AF080000 		.4byte	.LASF74
 7507 068c 01       		.byte	0x1
 7508 068d 8E0A     		.2byte	0xa8e
 7509 068f A2000000 		.4byte	0xa2
 7510 0693 02       		.uleb128 0x2
 7511 0694 91       		.byte	0x91
 7512 0695 6A       		.sleb128 -22
 7513 0696 12       		.uleb128 0x12
 7514 0697 FE010000 		.4byte	.LASF75
 7515 069b 01       		.byte	0x1
 7516 069c 8E0A     		.2byte	0xa8e
 7517 069e A2000000 		.4byte	0xa2
 7518 06a2 02       		.uleb128 0x2
 7519 06a3 91       		.byte	0x91
 7520 06a4 68       		.sleb128 -24
 7521 06a5 12       		.uleb128 0x12
 7522 06a6 A1010000 		.4byte	.LASF77
 7523 06aa 01       		.byte	0x1
 7524 06ab 8F0A     		.2byte	0xa8f
 7525 06ad A2000000 		.4byte	0xa2
 7526 06b1 02       		.uleb128 0x2
 7527 06b2 91       		.byte	0x91
 7528 06b3 66       		.sleb128 -26
 7529 06b4 13       		.uleb128 0x13
 7530 06b5 4B010000 		.4byte	.LASF93
 7531 06b9 01       		.byte	0x1
 7532 06ba 910A     		.2byte	0xa91
 7533 06bc A2000000 		.4byte	0xa2
 7534 06c0 02       		.uleb128 0x2
 7535 06c1 91       		.byte	0x91
ARM GAS  /tmp/ccRayNMu.s 			page 185


 7536 06c2 74       		.sleb128 -12
 7537 06c3 13       		.uleb128 0x13
 7538 06c4 CB040000 		.4byte	.LASF89
 7539 06c8 01       		.byte	0x1
 7540 06c9 910A     		.2byte	0xa91
 7541 06cb A2000000 		.4byte	0xa2
 7542 06cf 02       		.uleb128 0x2
 7543 06d0 91       		.byte	0x91
 7544 06d1 76       		.sleb128 -10
 7545 06d2 00       		.byte	0
 7546 06d3 16       		.uleb128 0x16
 7547 06d4 1E0B0000 		.4byte	.LASF99
 7548 06d8 01       		.byte	0x1
 7549 06d9 750A     		.2byte	0xa75
 7550 06db B6190000 		.4byte	.LFB149
 7551 06df 20000000 		.4byte	.LFE149-.LFB149
 7552 06e3 01       		.uleb128 0x1
 7553 06e4 9C       		.byte	0x9c
 7554 06e5 08070000 		.4byte	0x708
 7555 06e9 12       		.uleb128 0x12
 7556 06ea F6050000 		.4byte	.LASF87
 7557 06ee 01       		.byte	0x1
 7558 06ef 750A     		.2byte	0xa75
 7559 06f1 5C050000 		.4byte	0x55c
 7560 06f5 02       		.uleb128 0x2
 7561 06f6 91       		.byte	0x91
 7562 06f7 74       		.sleb128 -12
 7563 06f8 12       		.uleb128 0x12
 7564 06f9 0C0A0000 		.4byte	.LASF95
 7565 06fd 01       		.byte	0x1
 7566 06fe 750A     		.2byte	0xa75
 7567 0700 A2000000 		.4byte	0xa2
 7568 0704 02       		.uleb128 0x2
 7569 0705 91       		.byte	0x91
 7570 0706 72       		.sleb128 -14
 7571 0707 00       		.byte	0
 7572 0708 17       		.uleb128 0x17
 7573 0709 2C080000 		.4byte	.LASF102
 7574 070d 01       		.byte	0x1
 7575 070e 490A     		.2byte	0xa49
 7576 0710 11010000 		.4byte	0x111
 7577 0714 64190000 		.4byte	.LFB148
 7578 0718 52000000 		.4byte	.LFE148-.LFB148
 7579 071c 01       		.uleb128 0x1
 7580 071d 9C       		.byte	0x9c
 7581 071e 6E070000 		.4byte	0x76e
 7582 0722 12       		.uleb128 0x12
 7583 0723 F6050000 		.4byte	.LASF87
 7584 0727 01       		.byte	0x1
 7585 0728 490A     		.2byte	0xa49
 7586 072a 5C050000 		.4byte	0x55c
 7587 072e 02       		.uleb128 0x2
 7588 072f 91       		.byte	0x91
 7589 0730 6C       		.sleb128 -20
 7590 0731 12       		.uleb128 0x12
 7591 0732 0C0A0000 		.4byte	.LASF95
 7592 0736 01       		.byte	0x1
ARM GAS  /tmp/ccRayNMu.s 			page 186


 7593 0737 490A     		.2byte	0xa49
 7594 0739 A2000000 		.4byte	0xa2
 7595 073d 02       		.uleb128 0x2
 7596 073e 91       		.byte	0x91
 7597 073f 6A       		.sleb128 -22
 7598 0740 13       		.uleb128 0x13
 7599 0741 EF0C0000 		.4byte	.LASF96
 7600 0745 01       		.byte	0x1
 7601 0746 4B0A     		.2byte	0xa4b
 7602 0748 11010000 		.4byte	0x111
 7603 074c 02       		.uleb128 0x2
 7604 074d 91       		.byte	0x91
 7605 074e 77       		.sleb128 -9
 7606 074f 13       		.uleb128 0x13
 7607 0750 E3070000 		.4byte	.LASF97
 7608 0754 01       		.byte	0x1
 7609 0755 4C0A     		.2byte	0xa4c
 7610 0757 A2000000 		.4byte	0xa2
 7611 075b 02       		.uleb128 0x2
 7612 075c 91       		.byte	0x91
 7613 075d 74       		.sleb128 -12
 7614 075e 13       		.uleb128 0x13
 7615 075f 880C0000 		.4byte	.LASF98
 7616 0763 01       		.byte	0x1
 7617 0764 4C0A     		.2byte	0xa4c
 7618 0766 A2000000 		.4byte	0xa2
 7619 076a 02       		.uleb128 0x2
 7620 076b 91       		.byte	0x91
 7621 076c 72       		.sleb128 -14
 7622 076d 00       		.byte	0
 7623 076e 16       		.uleb128 0x16
 7624 076f 8F040000 		.4byte	.LASF100
 7625 0773 01       		.byte	0x1
 7626 0774 290A     		.2byte	0xa29
 7627 0776 44190000 		.4byte	.LFB147
 7628 077a 20000000 		.4byte	.LFE147-.LFB147
 7629 077e 01       		.uleb128 0x1
 7630 077f 9C       		.byte	0x9c
 7631 0780 A3070000 		.4byte	0x7a3
 7632 0784 12       		.uleb128 0x12
 7633 0785 F6050000 		.4byte	.LASF87
 7634 0789 01       		.byte	0x1
 7635 078a 290A     		.2byte	0xa29
 7636 078c 5C050000 		.4byte	0x55c
 7637 0790 02       		.uleb128 0x2
 7638 0791 91       		.byte	0x91
 7639 0792 74       		.sleb128 -12
 7640 0793 12       		.uleb128 0x12
 7641 0794 EE000000 		.4byte	.LASF101
 7642 0798 01       		.byte	0x1
 7643 0799 290A     		.2byte	0xa29
 7644 079b A2000000 		.4byte	0xa2
 7645 079f 02       		.uleb128 0x2
 7646 07a0 91       		.byte	0x91
 7647 07a1 72       		.sleb128 -14
 7648 07a2 00       		.byte	0
 7649 07a3 17       		.uleb128 0x17
ARM GAS  /tmp/ccRayNMu.s 			page 187


 7650 07a4 AC050000 		.4byte	.LASF103
 7651 07a8 01       		.byte	0x1
 7652 07a9 FD09     		.2byte	0x9fd
 7653 07ab 05010000 		.4byte	0x105
 7654 07af 0E190000 		.4byte	.LFB146
 7655 07b3 36000000 		.4byte	.LFE146-.LFB146
 7656 07b7 01       		.uleb128 0x1
 7657 07b8 9C       		.byte	0x9c
 7658 07b9 EB070000 		.4byte	0x7eb
 7659 07bd 12       		.uleb128 0x12
 7660 07be F6050000 		.4byte	.LASF87
 7661 07c2 01       		.byte	0x1
 7662 07c3 FD09     		.2byte	0x9fd
 7663 07c5 5C050000 		.4byte	0x55c
 7664 07c9 02       		.uleb128 0x2
 7665 07ca 91       		.byte	0x91
 7666 07cb 6C       		.sleb128 -20
 7667 07cc 12       		.uleb128 0x12
 7668 07cd EE000000 		.4byte	.LASF101
 7669 07d1 01       		.byte	0x1
 7670 07d2 FD09     		.2byte	0x9fd
 7671 07d4 A2000000 		.4byte	0xa2
 7672 07d8 02       		.uleb128 0x2
 7673 07d9 91       		.byte	0x91
 7674 07da 6A       		.sleb128 -22
 7675 07db 13       		.uleb128 0x13
 7676 07dc EF0C0000 		.4byte	.LASF96
 7677 07e0 01       		.byte	0x1
 7678 07e1 FF09     		.2byte	0x9ff
 7679 07e3 11010000 		.4byte	0x111
 7680 07e7 02       		.uleb128 0x2
 7681 07e8 91       		.byte	0x91
 7682 07e9 77       		.sleb128 -9
 7683 07ea 00       		.byte	0
 7684 07eb 17       		.uleb128 0x17
 7685 07ec 23050000 		.4byte	.LASF104
 7686 07f0 01       		.byte	0x1
 7687 07f1 DB09     		.2byte	0x9db
 7688 07f3 A2000000 		.4byte	0xa2
 7689 07f7 F6180000 		.4byte	.LFB145
 7690 07fb 18000000 		.4byte	.LFE145-.LFB145
 7691 07ff 01       		.uleb128 0x1
 7692 0800 9C       		.byte	0x9c
 7693 0801 15080000 		.4byte	0x815
 7694 0805 12       		.uleb128 0x12
 7695 0806 F6050000 		.4byte	.LASF87
 7696 080a 01       		.byte	0x1
 7697 080b DB09     		.2byte	0x9db
 7698 080d 5C050000 		.4byte	0x55c
 7699 0811 02       		.uleb128 0x2
 7700 0812 91       		.byte	0x91
 7701 0813 74       		.sleb128 -12
 7702 0814 00       		.byte	0
 7703 0815 17       		.uleb128 0x17
 7704 0816 34050000 		.4byte	.LASF105
 7705 081a 01       		.byte	0x1
 7706 081b CE09     		.2byte	0x9ce
ARM GAS  /tmp/ccRayNMu.s 			page 188


 7707 081d A2000000 		.4byte	0xa2
 7708 0821 DE180000 		.4byte	.LFB144
 7709 0825 18000000 		.4byte	.LFE144-.LFB144
 7710 0829 01       		.uleb128 0x1
 7711 082a 9C       		.byte	0x9c
 7712 082b 3F080000 		.4byte	0x83f
 7713 082f 12       		.uleb128 0x12
 7714 0830 F6050000 		.4byte	.LASF87
 7715 0834 01       		.byte	0x1
 7716 0835 CE09     		.2byte	0x9ce
 7717 0837 5C050000 		.4byte	0x55c
 7718 083b 02       		.uleb128 0x2
 7719 083c 91       		.byte	0x91
 7720 083d 74       		.sleb128 -12
 7721 083e 00       		.byte	0
 7722 083f 17       		.uleb128 0x17
 7723 0840 EC030000 		.4byte	.LASF106
 7724 0844 01       		.byte	0x1
 7725 0845 C109     		.2byte	0x9c1
 7726 0847 A2000000 		.4byte	0xa2
 7727 084b C4180000 		.4byte	.LFB143
 7728 084f 1A000000 		.4byte	.LFE143-.LFB143
 7729 0853 01       		.uleb128 0x1
 7730 0854 9C       		.byte	0x9c
 7731 0855 69080000 		.4byte	0x869
 7732 0859 12       		.uleb128 0x12
 7733 085a F6050000 		.4byte	.LASF87
 7734 085e 01       		.byte	0x1
 7735 085f C109     		.2byte	0x9c1
 7736 0861 5C050000 		.4byte	0x55c
 7737 0865 02       		.uleb128 0x2
 7738 0866 91       		.byte	0x91
 7739 0867 74       		.sleb128 -12
 7740 0868 00       		.byte	0
 7741 0869 17       		.uleb128 0x17
 7742 086a DC030000 		.4byte	.LASF107
 7743 086e 01       		.byte	0x1
 7744 086f B409     		.2byte	0x9b4
 7745 0871 A2000000 		.4byte	0xa2
 7746 0875 AC180000 		.4byte	.LFB142
 7747 0879 18000000 		.4byte	.LFE142-.LFB142
 7748 087d 01       		.uleb128 0x1
 7749 087e 9C       		.byte	0x9c
 7750 087f 93080000 		.4byte	0x893
 7751 0883 12       		.uleb128 0x12
 7752 0884 F6050000 		.4byte	.LASF87
 7753 0888 01       		.byte	0x1
 7754 0889 B409     		.2byte	0x9b4
 7755 088b 5C050000 		.4byte	0x55c
 7756 088f 02       		.uleb128 0x2
 7757 0890 91       		.byte	0x91
 7758 0891 74       		.sleb128 -12
 7759 0892 00       		.byte	0
 7760 0893 17       		.uleb128 0x17
 7761 0894 CC030000 		.4byte	.LASF108
 7762 0898 01       		.byte	0x1
 7763 0899 A709     		.2byte	0x9a7
ARM GAS  /tmp/ccRayNMu.s 			page 189


 7764 089b A2000000 		.4byte	0xa2
 7765 089f 94180000 		.4byte	.LFB141
 7766 08a3 18000000 		.4byte	.LFE141-.LFB141
 7767 08a7 01       		.uleb128 0x1
 7768 08a8 9C       		.byte	0x9c
 7769 08a9 BD080000 		.4byte	0x8bd
 7770 08ad 12       		.uleb128 0x12
 7771 08ae F6050000 		.4byte	.LASF87
 7772 08b2 01       		.byte	0x1
 7773 08b3 A709     		.2byte	0x9a7
 7774 08b5 5C050000 		.4byte	0x55c
 7775 08b9 02       		.uleb128 0x2
 7776 08ba 91       		.byte	0x91
 7777 08bb 74       		.sleb128 -12
 7778 08bc 00       		.byte	0
 7779 08bd 17       		.uleb128 0x17
 7780 08be 5A050000 		.4byte	.LASF109
 7781 08c2 01       		.byte	0x1
 7782 08c3 9A09     		.2byte	0x99a
 7783 08c5 A2000000 		.4byte	0xa2
 7784 08c9 7C180000 		.4byte	.LFB140
 7785 08cd 18000000 		.4byte	.LFE140-.LFB140
 7786 08d1 01       		.uleb128 0x1
 7787 08d2 9C       		.byte	0x9c
 7788 08d3 E7080000 		.4byte	0x8e7
 7789 08d7 12       		.uleb128 0x12
 7790 08d8 F6050000 		.4byte	.LASF87
 7791 08dc 01       		.byte	0x1
 7792 08dd 9A09     		.2byte	0x99a
 7793 08df 5C050000 		.4byte	0x55c
 7794 08e3 02       		.uleb128 0x2
 7795 08e4 91       		.byte	0x91
 7796 08e5 74       		.sleb128 -12
 7797 08e6 00       		.byte	0
 7798 08e7 16       		.uleb128 0x16
 7799 08e8 61080000 		.4byte	.LASF110
 7800 08ec 01       		.byte	0x1
 7801 08ed 8A09     		.2byte	0x98a
 7802 08ef 46180000 		.4byte	.LFB139
 7803 08f3 36000000 		.4byte	.LFE139-.LFB139
 7804 08f7 01       		.uleb128 0x1
 7805 08f8 9C       		.byte	0x9c
 7806 08f9 1C090000 		.4byte	0x91c
 7807 08fd 12       		.uleb128 0x12
 7808 08fe F6050000 		.4byte	.LASF87
 7809 0902 01       		.byte	0x1
 7810 0903 8A09     		.2byte	0x98a
 7811 0905 5C050000 		.4byte	0x55c
 7812 0909 02       		.uleb128 0x2
 7813 090a 91       		.byte	0x91
 7814 090b 74       		.sleb128 -12
 7815 090c 12       		.uleb128 0x12
 7816 090d A1030000 		.4byte	.LASF111
 7817 0911 01       		.byte	0x1
 7818 0912 8A09     		.2byte	0x98a
 7819 0914 A2000000 		.4byte	0xa2
 7820 0918 02       		.uleb128 0x2
ARM GAS  /tmp/ccRayNMu.s 			page 190


 7821 0919 91       		.byte	0x91
 7822 091a 72       		.sleb128 -14
 7823 091b 00       		.byte	0
 7824 091c 16       		.uleb128 0x16
 7825 091d 8C0D0000 		.4byte	.LASF112
 7826 0921 01       		.byte	0x1
 7827 0922 7409     		.2byte	0x974
 7828 0924 0C180000 		.4byte	.LFB138
 7829 0928 3A000000 		.4byte	.LFE138-.LFB138
 7830 092c 01       		.uleb128 0x1
 7831 092d 9C       		.byte	0x9c
 7832 092e 51090000 		.4byte	0x951
 7833 0932 12       		.uleb128 0x12
 7834 0933 F6050000 		.4byte	.LASF87
 7835 0937 01       		.byte	0x1
 7836 0938 7409     		.2byte	0x974
 7837 093a 5C050000 		.4byte	0x55c
 7838 093e 02       		.uleb128 0x2
 7839 093f 91       		.byte	0x91
 7840 0940 74       		.sleb128 -12
 7841 0941 12       		.uleb128 0x12
 7842 0942 420D0000 		.4byte	.LASF113
 7843 0946 01       		.byte	0x1
 7844 0947 7409     		.2byte	0x974
 7845 0949 A2000000 		.4byte	0xa2
 7846 094d 02       		.uleb128 0x2
 7847 094e 91       		.byte	0x91
 7848 094f 72       		.sleb128 -14
 7849 0950 00       		.byte	0
 7850 0951 16       		.uleb128 0x16
 7851 0952 DB0A0000 		.4byte	.LASF114
 7852 0956 01       		.byte	0x1
 7853 0957 5E09     		.2byte	0x95e
 7854 0959 D6170000 		.4byte	.LFB137
 7855 095d 36000000 		.4byte	.LFE137-.LFB137
 7856 0961 01       		.uleb128 0x1
 7857 0962 9C       		.byte	0x9c
 7858 0963 86090000 		.4byte	0x986
 7859 0967 12       		.uleb128 0x12
 7860 0968 F6050000 		.4byte	.LASF87
 7861 096c 01       		.byte	0x1
 7862 096d 5E09     		.2byte	0x95e
 7863 096f 5C050000 		.4byte	0x55c
 7864 0973 02       		.uleb128 0x2
 7865 0974 91       		.byte	0x91
 7866 0975 74       		.sleb128 -12
 7867 0976 12       		.uleb128 0x12
 7868 0977 420D0000 		.4byte	.LASF113
 7869 097b 01       		.byte	0x1
 7870 097c 5E09     		.2byte	0x95e
 7871 097e A2000000 		.4byte	0xa2
 7872 0982 02       		.uleb128 0x2
 7873 0983 91       		.byte	0x91
 7874 0984 72       		.sleb128 -14
 7875 0985 00       		.byte	0
 7876 0986 16       		.uleb128 0x16
 7877 0987 86090000 		.4byte	.LASF115
ARM GAS  /tmp/ccRayNMu.s 			page 191


 7878 098b 01       		.byte	0x1
 7879 098c 4809     		.2byte	0x948
 7880 098e 9C170000 		.4byte	.LFB136
 7881 0992 3A000000 		.4byte	.LFE136-.LFB136
 7882 0996 01       		.uleb128 0x1
 7883 0997 9C       		.byte	0x9c
 7884 0998 BB090000 		.4byte	0x9bb
 7885 099c 12       		.uleb128 0x12
 7886 099d F6050000 		.4byte	.LASF87
 7887 09a1 01       		.byte	0x1
 7888 09a2 4809     		.2byte	0x948
 7889 09a4 5C050000 		.4byte	0x55c
 7890 09a8 02       		.uleb128 0x2
 7891 09a9 91       		.byte	0x91
 7892 09aa 74       		.sleb128 -12
 7893 09ab 12       		.uleb128 0x12
 7894 09ac 420D0000 		.4byte	.LASF113
 7895 09b0 01       		.byte	0x1
 7896 09b1 4809     		.2byte	0x948
 7897 09b3 A2000000 		.4byte	0xa2
 7898 09b7 02       		.uleb128 0x2
 7899 09b8 91       		.byte	0x91
 7900 09b9 72       		.sleb128 -14
 7901 09ba 00       		.byte	0
 7902 09bb 16       		.uleb128 0x16
 7903 09bc 8B060000 		.4byte	.LASF116
 7904 09c0 01       		.byte	0x1
 7905 09c1 3209     		.2byte	0x932
 7906 09c3 66170000 		.4byte	.LFB135
 7907 09c7 36000000 		.4byte	.LFE135-.LFB135
 7908 09cb 01       		.uleb128 0x1
 7909 09cc 9C       		.byte	0x9c
 7910 09cd F0090000 		.4byte	0x9f0
 7911 09d1 12       		.uleb128 0x12
 7912 09d2 F6050000 		.4byte	.LASF87
 7913 09d6 01       		.byte	0x1
 7914 09d7 3209     		.2byte	0x932
 7915 09d9 5C050000 		.4byte	0x55c
 7916 09dd 02       		.uleb128 0x2
 7917 09de 91       		.byte	0x91
 7918 09df 74       		.sleb128 -12
 7919 09e0 12       		.uleb128 0x12
 7920 09e1 420D0000 		.4byte	.LASF113
 7921 09e5 01       		.byte	0x1
 7922 09e6 3209     		.2byte	0x932
 7923 09e8 A2000000 		.4byte	0xa2
 7924 09ec 02       		.uleb128 0x2
 7925 09ed 91       		.byte	0x91
 7926 09ee 72       		.sleb128 -14
 7927 09ef 00       		.byte	0
 7928 09f0 16       		.uleb128 0x16
 7929 09f1 1C080000 		.4byte	.LASF117
 7930 09f5 01       		.byte	0x1
 7931 09f6 1F09     		.2byte	0x91f
 7932 09f8 48170000 		.4byte	.LFB134
 7933 09fc 1E000000 		.4byte	.LFE134-.LFB134
 7934 0a00 01       		.uleb128 0x1
ARM GAS  /tmp/ccRayNMu.s 			page 192


 7935 0a01 9C       		.byte	0x9c
 7936 0a02 250A0000 		.4byte	0xa25
 7937 0a06 12       		.uleb128 0x12
 7938 0a07 F6050000 		.4byte	.LASF87
 7939 0a0b 01       		.byte	0x1
 7940 0a0c 1F09     		.2byte	0x91f
 7941 0a0e 5C050000 		.4byte	0x55c
 7942 0a12 02       		.uleb128 0x2
 7943 0a13 91       		.byte	0x91
 7944 0a14 74       		.sleb128 -12
 7945 0a15 12       		.uleb128 0x12
 7946 0a16 C9070000 		.4byte	.LASF118
 7947 0a1a 01       		.byte	0x1
 7948 0a1b 1F09     		.2byte	0x91f
 7949 0a1d A2000000 		.4byte	0xa2
 7950 0a21 02       		.uleb128 0x2
 7951 0a22 91       		.byte	0x91
 7952 0a23 72       		.sleb128 -14
 7953 0a24 00       		.byte	0
 7954 0a25 16       		.uleb128 0x16
 7955 0a26 AD040000 		.4byte	.LASF119
 7956 0a2a 01       		.byte	0x1
 7957 0a2b 1109     		.2byte	0x911
 7958 0a2d 2C170000 		.4byte	.LFB133
 7959 0a31 1C000000 		.4byte	.LFE133-.LFB133
 7960 0a35 01       		.uleb128 0x1
 7961 0a36 9C       		.byte	0x9c
 7962 0a37 5A0A0000 		.4byte	0xa5a
 7963 0a3b 12       		.uleb128 0x12
 7964 0a3c F6050000 		.4byte	.LASF87
 7965 0a40 01       		.byte	0x1
 7966 0a41 1109     		.2byte	0x911
 7967 0a43 5C050000 		.4byte	0x55c
 7968 0a47 02       		.uleb128 0x2
 7969 0a48 91       		.byte	0x91
 7970 0a49 74       		.sleb128 -12
 7971 0a4a 12       		.uleb128 0x12
 7972 0a4b 38010000 		.4byte	.LASF120
 7973 0a4f 01       		.byte	0x1
 7974 0a50 1109     		.2byte	0x911
 7975 0a52 A2000000 		.4byte	0xa2
 7976 0a56 02       		.uleb128 0x2
 7977 0a57 91       		.byte	0x91
 7978 0a58 72       		.sleb128 -14
 7979 0a59 00       		.byte	0
 7980 0a5a 16       		.uleb128 0x16
 7981 0a5b 9D040000 		.4byte	.LASF121
 7982 0a5f 01       		.byte	0x1
 7983 0a60 0309     		.2byte	0x903
 7984 0a62 10170000 		.4byte	.LFB132
 7985 0a66 1C000000 		.4byte	.LFE132-.LFB132
 7986 0a6a 01       		.uleb128 0x1
 7987 0a6b 9C       		.byte	0x9c
 7988 0a6c 8F0A0000 		.4byte	0xa8f
 7989 0a70 12       		.uleb128 0x12
 7990 0a71 F6050000 		.4byte	.LASF87
 7991 0a75 01       		.byte	0x1
ARM GAS  /tmp/ccRayNMu.s 			page 193


 7992 0a76 0309     		.2byte	0x903
 7993 0a78 5C050000 		.4byte	0x55c
 7994 0a7c 02       		.uleb128 0x2
 7995 0a7d 91       		.byte	0x91
 7996 0a7e 74       		.sleb128 -12
 7997 0a7f 12       		.uleb128 0x12
 7998 0a80 86080000 		.4byte	.LASF122
 7999 0a84 01       		.byte	0x1
 8000 0a85 0309     		.2byte	0x903
 8001 0a87 A2000000 		.4byte	0xa2
 8002 0a8b 02       		.uleb128 0x2
 8003 0a8c 91       		.byte	0x91
 8004 0a8d 72       		.sleb128 -14
 8005 0a8e 00       		.byte	0
 8006 0a8f 16       		.uleb128 0x16
 8007 0a90 00010000 		.4byte	.LASF123
 8008 0a94 01       		.byte	0x1
 8009 0a95 F508     		.2byte	0x8f5
 8010 0a97 F4160000 		.4byte	.LFB131
 8011 0a9b 1C000000 		.4byte	.LFE131-.LFB131
 8012 0a9f 01       		.uleb128 0x1
 8013 0aa0 9C       		.byte	0x9c
 8014 0aa1 C40A0000 		.4byte	0xac4
 8015 0aa5 12       		.uleb128 0x12
 8016 0aa6 F6050000 		.4byte	.LASF87
 8017 0aaa 01       		.byte	0x1
 8018 0aab F508     		.2byte	0x8f5
 8019 0aad 5C050000 		.4byte	0x55c
 8020 0ab1 02       		.uleb128 0x2
 8021 0ab2 91       		.byte	0x91
 8022 0ab3 74       		.sleb128 -12
 8023 0ab4 12       		.uleb128 0x12
 8024 0ab5 F7000000 		.4byte	.LASF124
 8025 0ab9 01       		.byte	0x1
 8026 0aba F508     		.2byte	0x8f5
 8027 0abc A2000000 		.4byte	0xa2
 8028 0ac0 02       		.uleb128 0x2
 8029 0ac1 91       		.byte	0x91
 8030 0ac2 72       		.sleb128 -14
 8031 0ac3 00       		.byte	0
 8032 0ac4 16       		.uleb128 0x16
 8033 0ac5 A9030000 		.4byte	.LASF125
 8034 0ac9 01       		.byte	0x1
 8035 0aca E708     		.2byte	0x8e7
 8036 0acc D8160000 		.4byte	.LFB130
 8037 0ad0 1C000000 		.4byte	.LFE130-.LFB130
 8038 0ad4 01       		.uleb128 0x1
 8039 0ad5 9C       		.byte	0x9c
 8040 0ad6 F90A0000 		.4byte	0xaf9
 8041 0ada 12       		.uleb128 0x12
 8042 0adb F6050000 		.4byte	.LASF87
 8043 0adf 01       		.byte	0x1
 8044 0ae0 E708     		.2byte	0x8e7
 8045 0ae2 5C050000 		.4byte	0x55c
 8046 0ae6 02       		.uleb128 0x2
 8047 0ae7 91       		.byte	0x91
 8048 0ae8 74       		.sleb128 -12
ARM GAS  /tmp/ccRayNMu.s 			page 194


 8049 0ae9 12       		.uleb128 0x12
 8050 0aea 85000000 		.4byte	.LASF126
 8051 0aee 01       		.byte	0x1
 8052 0aef E708     		.2byte	0x8e7
 8053 0af1 A2000000 		.4byte	0xa2
 8054 0af5 02       		.uleb128 0x2
 8055 0af6 91       		.byte	0x91
 8056 0af7 72       		.sleb128 -14
 8057 0af8 00       		.byte	0
 8058 0af9 16       		.uleb128 0x16
 8059 0afa 790C0000 		.4byte	.LASF127
 8060 0afe 01       		.byte	0x1
 8061 0aff D908     		.2byte	0x8d9
 8062 0b01 BC160000 		.4byte	.LFB129
 8063 0b05 1C000000 		.4byte	.LFE129-.LFB129
 8064 0b09 01       		.uleb128 0x1
 8065 0b0a 9C       		.byte	0x9c
 8066 0b0b 2E0B0000 		.4byte	0xb2e
 8067 0b0f 12       		.uleb128 0x12
 8068 0b10 F6050000 		.4byte	.LASF87
 8069 0b14 01       		.byte	0x1
 8070 0b15 D908     		.2byte	0x8d9
 8071 0b17 5C050000 		.4byte	0x55c
 8072 0b1b 02       		.uleb128 0x2
 8073 0b1c 91       		.byte	0x91
 8074 0b1d 74       		.sleb128 -12
 8075 0b1e 12       		.uleb128 0x12
 8076 0b1f 7E080000 		.4byte	.LASF128
 8077 0b23 01       		.byte	0x1
 8078 0b24 D908     		.2byte	0x8d9
 8079 0b26 A2000000 		.4byte	0xa2
 8080 0b2a 02       		.uleb128 0x2
 8081 0b2b 91       		.byte	0x91
 8082 0b2c 72       		.sleb128 -14
 8083 0b2d 00       		.byte	0
 8084 0b2e 16       		.uleb128 0x16
 8085 0b2f 92050000 		.4byte	.LASF129
 8086 0b33 01       		.byte	0x1
 8087 0b34 C708     		.2byte	0x8c7
 8088 0b36 86160000 		.4byte	.LFB128
 8089 0b3a 36000000 		.4byte	.LFE128-.LFB128
 8090 0b3e 01       		.uleb128 0x1
 8091 0b3f 9C       		.byte	0x9c
 8092 0b40 630B0000 		.4byte	0xb63
 8093 0b44 12       		.uleb128 0x12
 8094 0b45 F6050000 		.4byte	.LASF87
 8095 0b49 01       		.byte	0x1
 8096 0b4a C708     		.2byte	0x8c7
 8097 0b4c 5C050000 		.4byte	0x55c
 8098 0b50 02       		.uleb128 0x2
 8099 0b51 91       		.byte	0x91
 8100 0b52 74       		.sleb128 -12
 8101 0b53 12       		.uleb128 0x12
 8102 0b54 6A050000 		.4byte	.LASF130
 8103 0b58 01       		.byte	0x1
 8104 0b59 C708     		.2byte	0x8c7
 8105 0b5b A2000000 		.4byte	0xa2
ARM GAS  /tmp/ccRayNMu.s 			page 195


 8106 0b5f 02       		.uleb128 0x2
 8107 0b60 91       		.byte	0x91
 8108 0b61 72       		.sleb128 -14
 8109 0b62 00       		.byte	0
 8110 0b63 16       		.uleb128 0x16
 8111 0b64 7E050000 		.4byte	.LASF131
 8112 0b68 01       		.byte	0x1
 8113 0b69 B208     		.2byte	0x8b2
 8114 0b6b 50160000 		.4byte	.LFB127
 8115 0b6f 36000000 		.4byte	.LFE127-.LFB127
 8116 0b73 01       		.uleb128 0x1
 8117 0b74 9C       		.byte	0x9c
 8118 0b75 980B0000 		.4byte	0xb98
 8119 0b79 12       		.uleb128 0x12
 8120 0b7a F6050000 		.4byte	.LASF87
 8121 0b7e 01       		.byte	0x1
 8122 0b7f B208     		.2byte	0x8b2
 8123 0b81 5C050000 		.4byte	0x55c
 8124 0b85 02       		.uleb128 0x2
 8125 0b86 91       		.byte	0x91
 8126 0b87 74       		.sleb128 -12
 8127 0b88 12       		.uleb128 0x12
 8128 0b89 BD0B0000 		.4byte	.LASF132
 8129 0b8d 01       		.byte	0x1
 8130 0b8e B208     		.2byte	0x8b2
 8131 0b90 A2000000 		.4byte	0xa2
 8132 0b94 02       		.uleb128 0x2
 8133 0b95 91       		.byte	0x91
 8134 0b96 72       		.sleb128 -14
 8135 0b97 00       		.byte	0
 8136 0b98 16       		.uleb128 0x16
 8137 0b99 73060000 		.4byte	.LASF133
 8138 0b9d 01       		.byte	0x1
 8139 0b9e 9B08     		.2byte	0x89b
 8140 0ba0 1A160000 		.4byte	.LFB126
 8141 0ba4 36000000 		.4byte	.LFE126-.LFB126
 8142 0ba8 01       		.uleb128 0x1
 8143 0ba9 9C       		.byte	0x9c
 8144 0baa CD0B0000 		.4byte	0xbcd
 8145 0bae 12       		.uleb128 0x12
 8146 0baf F6050000 		.4byte	.LASF87
 8147 0bb3 01       		.byte	0x1
 8148 0bb4 9B08     		.2byte	0x89b
 8149 0bb6 5C050000 		.4byte	0x55c
 8150 0bba 02       		.uleb128 0x2
 8151 0bbb 91       		.byte	0x91
 8152 0bbc 74       		.sleb128 -12
 8153 0bbd 12       		.uleb128 0x12
 8154 0bbe 66000000 		.4byte	.LASF134
 8155 0bc2 01       		.byte	0x1
 8156 0bc3 9B08     		.2byte	0x89b
 8157 0bc5 A2000000 		.4byte	0xa2
 8158 0bc9 02       		.uleb128 0x2
 8159 0bca 91       		.byte	0x91
 8160 0bcb 72       		.sleb128 -14
 8161 0bcc 00       		.byte	0
 8162 0bcd 16       		.uleb128 0x16
ARM GAS  /tmp/ccRayNMu.s 			page 196


 8163 0bce 28000000 		.4byte	.LASF135
 8164 0bd2 01       		.byte	0x1
 8165 0bd3 7B08     		.2byte	0x87b
 8166 0bd5 E4150000 		.4byte	.LFB125
 8167 0bd9 36000000 		.4byte	.LFE125-.LFB125
 8168 0bdd 01       		.uleb128 0x1
 8169 0bde 9C       		.byte	0x9c
 8170 0bdf 020C0000 		.4byte	0xc02
 8171 0be3 12       		.uleb128 0x12
 8172 0be4 F6050000 		.4byte	.LASF87
 8173 0be8 01       		.byte	0x1
 8174 0be9 7B08     		.2byte	0x87b
 8175 0beb 5C050000 		.4byte	0x55c
 8176 0bef 02       		.uleb128 0x2
 8177 0bf0 91       		.byte	0x91
 8178 0bf1 74       		.sleb128 -12
 8179 0bf2 12       		.uleb128 0x12
 8180 0bf3 00000000 		.4byte	.LASF136
 8181 0bf7 01       		.byte	0x1
 8182 0bf8 7B08     		.2byte	0x87b
 8183 0bfa A2000000 		.4byte	0xa2
 8184 0bfe 02       		.uleb128 0x2
 8185 0bff 91       		.byte	0x91
 8186 0c00 72       		.sleb128 -14
 8187 0c01 00       		.byte	0
 8188 0c02 16       		.uleb128 0x16
 8189 0c03 DA0C0000 		.4byte	.LASF137
 8190 0c07 01       		.byte	0x1
 8191 0c08 6108     		.2byte	0x861
 8192 0c0a A6150000 		.4byte	.LFB124
 8193 0c0e 3E000000 		.4byte	.LFE124-.LFB124
 8194 0c12 01       		.uleb128 0x1
 8195 0c13 9C       		.byte	0x9c
 8196 0c14 370C0000 		.4byte	0xc37
 8197 0c18 12       		.uleb128 0x12
 8198 0c19 F6050000 		.4byte	.LASF87
 8199 0c1d 01       		.byte	0x1
 8200 0c1e 6108     		.2byte	0x861
 8201 0c20 5C050000 		.4byte	0x55c
 8202 0c24 02       		.uleb128 0x2
 8203 0c25 91       		.byte	0x91
 8204 0c26 74       		.sleb128 -12
 8205 0c27 12       		.uleb128 0x12
 8206 0c28 0B000000 		.4byte	.LASF138
 8207 0c2c 01       		.byte	0x1
 8208 0c2d 6108     		.2byte	0x861
 8209 0c2f 37010000 		.4byte	0x137
 8210 0c33 02       		.uleb128 0x2
 8211 0c34 91       		.byte	0x91
 8212 0c35 73       		.sleb128 -13
 8213 0c36 00       		.byte	0
 8214 0c37 16       		.uleb128 0x16
 8215 0c38 760B0000 		.4byte	.LASF139
 8216 0c3c 01       		.byte	0x1
 8217 0c3d 4908     		.2byte	0x849
 8218 0c3f 68150000 		.4byte	.LFB123
 8219 0c43 3E000000 		.4byte	.LFE123-.LFB123
ARM GAS  /tmp/ccRayNMu.s 			page 197


 8220 0c47 01       		.uleb128 0x1
 8221 0c48 9C       		.byte	0x9c
 8222 0c49 6C0C0000 		.4byte	0xc6c
 8223 0c4d 12       		.uleb128 0x12
 8224 0c4e F6050000 		.4byte	.LASF87
 8225 0c52 01       		.byte	0x1
 8226 0c53 4908     		.2byte	0x849
 8227 0c55 5C050000 		.4byte	0x55c
 8228 0c59 02       		.uleb128 0x2
 8229 0c5a 91       		.byte	0x91
 8230 0c5b 74       		.sleb128 -12
 8231 0c5c 12       		.uleb128 0x12
 8232 0c5d 1B040000 		.4byte	.LASF140
 8233 0c61 01       		.byte	0x1
 8234 0c62 4908     		.2byte	0x849
 8235 0c64 A2000000 		.4byte	0xa2
 8236 0c68 02       		.uleb128 0x2
 8237 0c69 91       		.byte	0x91
 8238 0c6a 72       		.sleb128 -14
 8239 0c6b 00       		.byte	0
 8240 0c6c 16       		.uleb128 0x16
 8241 0c6d 20010000 		.4byte	.LASF141
 8242 0c71 01       		.byte	0x1
 8243 0c72 2D08     		.2byte	0x82d
 8244 0c74 2A150000 		.4byte	.LFB122
 8245 0c78 3E000000 		.4byte	.LFE122-.LFB122
 8246 0c7c 01       		.uleb128 0x1
 8247 0c7d 9C       		.byte	0x9c
 8248 0c7e A10C0000 		.4byte	0xca1
 8249 0c82 12       		.uleb128 0x12
 8250 0c83 F6050000 		.4byte	.LASF87
 8251 0c87 01       		.byte	0x1
 8252 0c88 2D08     		.2byte	0x82d
 8253 0c8a 5C050000 		.4byte	0x55c
 8254 0c8e 02       		.uleb128 0x2
 8255 0c8f 91       		.byte	0x91
 8256 0c90 74       		.sleb128 -12
 8257 0c91 12       		.uleb128 0x12
 8258 0c92 0B000000 		.4byte	.LASF138
 8259 0c96 01       		.byte	0x1
 8260 0c97 2D08     		.2byte	0x82d
 8261 0c99 37010000 		.4byte	0x137
 8262 0c9d 02       		.uleb128 0x2
 8263 0c9e 91       		.byte	0x91
 8264 0c9f 73       		.sleb128 -13
 8265 0ca0 00       		.byte	0
 8266 0ca1 16       		.uleb128 0x16
 8267 0ca2 670B0000 		.4byte	.LASF142
 8268 0ca6 01       		.byte	0x1
 8269 0ca7 FE07     		.2byte	0x7fe
 8270 0ca9 7E140000 		.4byte	.LFB121
 8271 0cad AC000000 		.4byte	.LFE121-.LFB121
 8272 0cb1 01       		.uleb128 0x1
 8273 0cb2 9C       		.byte	0x9c
 8274 0cb3 030D0000 		.4byte	0xd03
 8275 0cb7 12       		.uleb128 0x12
 8276 0cb8 F6050000 		.4byte	.LASF87
ARM GAS  /tmp/ccRayNMu.s 			page 198


 8277 0cbc 01       		.byte	0x1
 8278 0cbd FE07     		.2byte	0x7fe
 8279 0cbf 5C050000 		.4byte	0x55c
 8280 0cc3 02       		.uleb128 0x2
 8281 0cc4 91       		.byte	0x91
 8282 0cc5 6C       		.sleb128 -20
 8283 0cc6 12       		.uleb128 0x12
 8284 0cc7 70020000 		.4byte	.LASF73
 8285 0ccb 01       		.byte	0x1
 8286 0ccc FE07     		.2byte	0x7fe
 8287 0cce A2000000 		.4byte	0xa2
 8288 0cd2 02       		.uleb128 0x2
 8289 0cd3 91       		.byte	0x91
 8290 0cd4 6A       		.sleb128 -22
 8291 0cd5 12       		.uleb128 0x12
 8292 0cd6 CB0B0000 		.4byte	.LASF64
 8293 0cda 01       		.byte	0x1
 8294 0cdb FE07     		.2byte	0x7fe
 8295 0cdd A2000000 		.4byte	0xa2
 8296 0ce1 02       		.uleb128 0x2
 8297 0ce2 91       		.byte	0x91
 8298 0ce3 68       		.sleb128 -24
 8299 0ce4 14       		.uleb128 0x14
 8300 0ce5 746D7000 		.ascii	"tmp\000"
 8301 0ce9 01       		.byte	0x1
 8302 0cea 0008     		.2byte	0x800
 8303 0cec C2000000 		.4byte	0xc2
 8304 0cf0 02       		.uleb128 0x2
 8305 0cf1 91       		.byte	0x91
 8306 0cf2 74       		.sleb128 -12
 8307 0cf3 13       		.uleb128 0x13
 8308 0cf4 0E020000 		.4byte	.LASF143
 8309 0cf8 01       		.byte	0x1
 8310 0cf9 0108     		.2byte	0x801
 8311 0cfb A2000000 		.4byte	0xa2
 8312 0cff 02       		.uleb128 0x2
 8313 0d00 91       		.byte	0x91
 8314 0d01 72       		.sleb128 -14
 8315 0d02 00       		.byte	0
 8316 0d03 16       		.uleb128 0x16
 8317 0d04 BD070000 		.4byte	.LASF144
 8318 0d08 01       		.byte	0x1
 8319 0d09 D507     		.2byte	0x7d5
 8320 0d0b 2A140000 		.4byte	.LFB120
 8321 0d0f 54000000 		.4byte	.LFE120-.LFB120
 8322 0d13 01       		.uleb128 0x1
 8323 0d14 9C       		.byte	0x9c
 8324 0d15 560D0000 		.4byte	0xd56
 8325 0d19 12       		.uleb128 0x12
 8326 0d1a F6050000 		.4byte	.LASF87
 8327 0d1e 01       		.byte	0x1
 8328 0d1f D507     		.2byte	0x7d5
 8329 0d21 5C050000 		.4byte	0x55c
 8330 0d25 02       		.uleb128 0x2
 8331 0d26 91       		.byte	0x91
 8332 0d27 6C       		.sleb128 -20
 8333 0d28 12       		.uleb128 0x12
ARM GAS  /tmp/ccRayNMu.s 			page 199


 8334 0d29 70020000 		.4byte	.LASF73
 8335 0d2d 01       		.byte	0x1
 8336 0d2e D507     		.2byte	0x7d5
 8337 0d30 A2000000 		.4byte	0xa2
 8338 0d34 02       		.uleb128 0x2
 8339 0d35 91       		.byte	0x91
 8340 0d36 6A       		.sleb128 -22
 8341 0d37 12       		.uleb128 0x12
 8342 0d38 2C040000 		.4byte	.LASF145
 8343 0d3c 01       		.byte	0x1
 8344 0d3d D507     		.2byte	0x7d5
 8345 0d3f A2000000 		.4byte	0xa2
 8346 0d43 02       		.uleb128 0x2
 8347 0d44 91       		.byte	0x91
 8348 0d45 68       		.sleb128 -24
 8349 0d46 14       		.uleb128 0x14
 8350 0d47 746D7000 		.ascii	"tmp\000"
 8351 0d4b 01       		.byte	0x1
 8352 0d4c D707     		.2byte	0x7d7
 8353 0d4e A2000000 		.4byte	0xa2
 8354 0d52 02       		.uleb128 0x2
 8355 0d53 91       		.byte	0x91
 8356 0d54 76       		.sleb128 -10
 8357 0d55 00       		.byte	0
 8358 0d56 16       		.uleb128 0x16
 8359 0d57 BB020000 		.4byte	.LASF146
 8360 0d5b 01       		.byte	0x1
 8361 0d5c B707     		.2byte	0x7b7
 8362 0d5e D6130000 		.4byte	.LFB119
 8363 0d62 54000000 		.4byte	.LFE119-.LFB119
 8364 0d66 01       		.uleb128 0x1
 8365 0d67 9C       		.byte	0x9c
 8366 0d68 A90D0000 		.4byte	0xda9
 8367 0d6c 12       		.uleb128 0x12
 8368 0d6d F6050000 		.4byte	.LASF87
 8369 0d71 01       		.byte	0x1
 8370 0d72 B707     		.2byte	0x7b7
 8371 0d74 5C050000 		.4byte	0x55c
 8372 0d78 02       		.uleb128 0x2
 8373 0d79 91       		.byte	0x91
 8374 0d7a 6C       		.sleb128 -20
 8375 0d7b 12       		.uleb128 0x12
 8376 0d7c 70020000 		.4byte	.LASF73
 8377 0d80 01       		.byte	0x1
 8378 0d81 B707     		.2byte	0x7b7
 8379 0d83 A2000000 		.4byte	0xa2
 8380 0d87 02       		.uleb128 0x2
 8381 0d88 91       		.byte	0x91
 8382 0d89 6A       		.sleb128 -22
 8383 0d8a 12       		.uleb128 0x12
 8384 0d8b 76080000 		.4byte	.LASF147
 8385 0d8f 01       		.byte	0x1
 8386 0d90 B707     		.2byte	0x7b7
 8387 0d92 A2000000 		.4byte	0xa2
 8388 0d96 02       		.uleb128 0x2
 8389 0d97 91       		.byte	0x91
 8390 0d98 68       		.sleb128 -24
ARM GAS  /tmp/ccRayNMu.s 			page 200


 8391 0d99 14       		.uleb128 0x14
 8392 0d9a 746D7000 		.ascii	"tmp\000"
 8393 0d9e 01       		.byte	0x1
 8394 0d9f B907     		.2byte	0x7b9
 8395 0da1 A2000000 		.4byte	0xa2
 8396 0da5 02       		.uleb128 0x2
 8397 0da6 91       		.byte	0x91
 8398 0da7 76       		.sleb128 -10
 8399 0da8 00       		.byte	0
 8400 0da9 16       		.uleb128 0x16
 8401 0daa 0B060000 		.4byte	.LASF148
 8402 0dae 01       		.byte	0x1
 8403 0daf 9C07     		.2byte	0x79c
 8404 0db1 9C130000 		.4byte	.LFB118
 8405 0db5 3A000000 		.4byte	.LFE118-.LFB118
 8406 0db9 01       		.uleb128 0x1
 8407 0dba 9C       		.byte	0x9c
 8408 0dbb ED0D0000 		.4byte	0xded
 8409 0dbf 12       		.uleb128 0x12
 8410 0dc0 F6050000 		.4byte	.LASF87
 8411 0dc4 01       		.byte	0x1
 8412 0dc5 9C07     		.2byte	0x79c
 8413 0dc7 5C050000 		.4byte	0x55c
 8414 0dcb 02       		.uleb128 0x2
 8415 0dcc 91       		.byte	0x91
 8416 0dcd 6C       		.sleb128 -20
 8417 0dce 12       		.uleb128 0x12
 8418 0dcf 02050000 		.4byte	.LASF68
 8419 0dd3 01       		.byte	0x1
 8420 0dd4 9C07     		.2byte	0x79c
 8421 0dd6 A2000000 		.4byte	0xa2
 8422 0dda 02       		.uleb128 0x2
 8423 0ddb 91       		.byte	0x91
 8424 0ddc 6A       		.sleb128 -22
 8425 0ddd 13       		.uleb128 0x13
 8426 0dde CB040000 		.4byte	.LASF89
 8427 0de2 01       		.byte	0x1
 8428 0de3 9E07     		.2byte	0x79e
 8429 0de5 A2000000 		.4byte	0xa2
 8430 0de9 02       		.uleb128 0x2
 8431 0dea 91       		.byte	0x91
 8432 0deb 76       		.sleb128 -10
 8433 0dec 00       		.byte	0
 8434 0ded 16       		.uleb128 0x16
 8435 0dee CA090000 		.4byte	.LASF149
 8436 0df2 01       		.byte	0x1
 8437 0df3 8307     		.2byte	0x783
 8438 0df5 62130000 		.4byte	.LFB117
 8439 0df9 3A000000 		.4byte	.LFE117-.LFB117
 8440 0dfd 01       		.uleb128 0x1
 8441 0dfe 9C       		.byte	0x9c
 8442 0dff 310E0000 		.4byte	0xe31
 8443 0e03 12       		.uleb128 0x12
 8444 0e04 F6050000 		.4byte	.LASF87
 8445 0e08 01       		.byte	0x1
 8446 0e09 8307     		.2byte	0x783
 8447 0e0b 5C050000 		.4byte	0x55c
ARM GAS  /tmp/ccRayNMu.s 			page 201


 8448 0e0f 02       		.uleb128 0x2
 8449 0e10 91       		.byte	0x91
 8450 0e11 6C       		.sleb128 -20
 8451 0e12 12       		.uleb128 0x12
 8452 0e13 9B0A0000 		.4byte	.LASF69
 8453 0e17 01       		.byte	0x1
 8454 0e18 8307     		.2byte	0x783
 8455 0e1a A2000000 		.4byte	0xa2
 8456 0e1e 02       		.uleb128 0x2
 8457 0e1f 91       		.byte	0x91
 8458 0e20 6A       		.sleb128 -22
 8459 0e21 13       		.uleb128 0x13
 8460 0e22 CB040000 		.4byte	.LASF89
 8461 0e26 01       		.byte	0x1
 8462 0e27 8507     		.2byte	0x785
 8463 0e29 A2000000 		.4byte	0xa2
 8464 0e2d 02       		.uleb128 0x2
 8465 0e2e 91       		.byte	0x91
 8466 0e2f 76       		.sleb128 -10
 8467 0e30 00       		.byte	0
 8468 0e31 16       		.uleb128 0x16
 8469 0e32 990C0000 		.4byte	.LASF150
 8470 0e36 01       		.byte	0x1
 8471 0e37 6C07     		.2byte	0x76c
 8472 0e39 28130000 		.4byte	.LFB116
 8473 0e3d 3A000000 		.4byte	.LFE116-.LFB116
 8474 0e41 01       		.uleb128 0x1
 8475 0e42 9C       		.byte	0x9c
 8476 0e43 750E0000 		.4byte	0xe75
 8477 0e47 12       		.uleb128 0x12
 8478 0e48 F6050000 		.4byte	.LASF87
 8479 0e4c 01       		.byte	0x1
 8480 0e4d 6C07     		.2byte	0x76c
 8481 0e4f 5C050000 		.4byte	0x55c
 8482 0e53 02       		.uleb128 0x2
 8483 0e54 91       		.byte	0x91
 8484 0e55 6C       		.sleb128 -20
 8485 0e56 12       		.uleb128 0x12
 8486 0e57 02050000 		.4byte	.LASF68
 8487 0e5b 01       		.byte	0x1
 8488 0e5c 6C07     		.2byte	0x76c
 8489 0e5e A2000000 		.4byte	0xa2
 8490 0e62 02       		.uleb128 0x2
 8491 0e63 91       		.byte	0x91
 8492 0e64 6A       		.sleb128 -22
 8493 0e65 13       		.uleb128 0x13
 8494 0e66 CB040000 		.4byte	.LASF89
 8495 0e6a 01       		.byte	0x1
 8496 0e6b 6E07     		.2byte	0x76e
 8497 0e6d A2000000 		.4byte	0xa2
 8498 0e71 02       		.uleb128 0x2
 8499 0e72 91       		.byte	0x91
 8500 0e73 76       		.sleb128 -10
 8501 0e74 00       		.byte	0
 8502 0e75 16       		.uleb128 0x16
 8503 0e76 D3040000 		.4byte	.LASF151
 8504 0e7a 01       		.byte	0x1
ARM GAS  /tmp/ccRayNMu.s 			page 202


 8505 0e7b 5407     		.2byte	0x754
 8506 0e7d EE120000 		.4byte	.LFB115
 8507 0e81 3A000000 		.4byte	.LFE115-.LFB115
 8508 0e85 01       		.uleb128 0x1
 8509 0e86 9C       		.byte	0x9c
 8510 0e87 B90E0000 		.4byte	0xeb9
 8511 0e8b 12       		.uleb128 0x12
 8512 0e8c F6050000 		.4byte	.LASF87
 8513 0e90 01       		.byte	0x1
 8514 0e91 5407     		.2byte	0x754
 8515 0e93 5C050000 		.4byte	0x55c
 8516 0e97 02       		.uleb128 0x2
 8517 0e98 91       		.byte	0x91
 8518 0e99 6C       		.sleb128 -20
 8519 0e9a 12       		.uleb128 0x12
 8520 0e9b 9B0A0000 		.4byte	.LASF69
 8521 0e9f 01       		.byte	0x1
 8522 0ea0 5407     		.2byte	0x754
 8523 0ea2 A2000000 		.4byte	0xa2
 8524 0ea6 02       		.uleb128 0x2
 8525 0ea7 91       		.byte	0x91
 8526 0ea8 6A       		.sleb128 -22
 8527 0ea9 13       		.uleb128 0x13
 8528 0eaa CB040000 		.4byte	.LASF89
 8529 0eae 01       		.byte	0x1
 8530 0eaf 5607     		.2byte	0x756
 8531 0eb1 A2000000 		.4byte	0xa2
 8532 0eb5 02       		.uleb128 0x2
 8533 0eb6 91       		.byte	0x91
 8534 0eb7 76       		.sleb128 -10
 8535 0eb8 00       		.byte	0
 8536 0eb9 16       		.uleb128 0x16
 8537 0eba C6010000 		.4byte	.LASF152
 8538 0ebe 01       		.byte	0x1
 8539 0ebf 3D07     		.2byte	0x73d
 8540 0ec1 B4120000 		.4byte	.LFB114
 8541 0ec5 3A000000 		.4byte	.LFE114-.LFB114
 8542 0ec9 01       		.uleb128 0x1
 8543 0eca 9C       		.byte	0x9c
 8544 0ecb FD0E0000 		.4byte	0xefd
 8545 0ecf 12       		.uleb128 0x12
 8546 0ed0 F6050000 		.4byte	.LASF87
 8547 0ed4 01       		.byte	0x1
 8548 0ed5 3D07     		.2byte	0x73d
 8549 0ed7 5C050000 		.4byte	0x55c
 8550 0edb 02       		.uleb128 0x2
 8551 0edc 91       		.byte	0x91
 8552 0edd 6C       		.sleb128 -20
 8553 0ede 12       		.uleb128 0x12
 8554 0edf 02050000 		.4byte	.LASF68
 8555 0ee3 01       		.byte	0x1
 8556 0ee4 3D07     		.2byte	0x73d
 8557 0ee6 A2000000 		.4byte	0xa2
 8558 0eea 02       		.uleb128 0x2
 8559 0eeb 91       		.byte	0x91
 8560 0eec 6A       		.sleb128 -22
 8561 0eed 13       		.uleb128 0x13
ARM GAS  /tmp/ccRayNMu.s 			page 203


 8562 0eee CB040000 		.4byte	.LASF89
 8563 0ef2 01       		.byte	0x1
 8564 0ef3 3F07     		.2byte	0x73f
 8565 0ef5 A2000000 		.4byte	0xa2
 8566 0ef9 02       		.uleb128 0x2
 8567 0efa 91       		.byte	0x91
 8568 0efb 76       		.sleb128 -10
 8569 0efc 00       		.byte	0
 8570 0efd 16       		.uleb128 0x16
 8571 0efe F80B0000 		.4byte	.LASF153
 8572 0f02 01       		.byte	0x1
 8573 0f03 2507     		.2byte	0x725
 8574 0f05 7E120000 		.4byte	.LFB113
 8575 0f09 36000000 		.4byte	.LFE113-.LFB113
 8576 0f0d 01       		.uleb128 0x1
 8577 0f0e 9C       		.byte	0x9c
 8578 0f0f 410F0000 		.4byte	0xf41
 8579 0f13 12       		.uleb128 0x12
 8580 0f14 F6050000 		.4byte	.LASF87
 8581 0f18 01       		.byte	0x1
 8582 0f19 2507     		.2byte	0x725
 8583 0f1b 5C050000 		.4byte	0x55c
 8584 0f1f 02       		.uleb128 0x2
 8585 0f20 91       		.byte	0x91
 8586 0f21 6C       		.sleb128 -20
 8587 0f22 12       		.uleb128 0x12
 8588 0f23 9B0A0000 		.4byte	.LASF69
 8589 0f27 01       		.byte	0x1
 8590 0f28 2507     		.2byte	0x725
 8591 0f2a A2000000 		.4byte	0xa2
 8592 0f2e 02       		.uleb128 0x2
 8593 0f2f 91       		.byte	0x91
 8594 0f30 6A       		.sleb128 -22
 8595 0f31 13       		.uleb128 0x13
 8596 0f32 CB040000 		.4byte	.LASF89
 8597 0f36 01       		.byte	0x1
 8598 0f37 2707     		.2byte	0x727
 8599 0f39 A2000000 		.4byte	0xa2
 8600 0f3d 02       		.uleb128 0x2
 8601 0f3e 91       		.byte	0x91
 8602 0f3f 76       		.sleb128 -10
 8603 0f40 00       		.byte	0
 8604 0f41 16       		.uleb128 0x16
 8605 0f42 83070000 		.4byte	.LASF154
 8606 0f46 01       		.byte	0x1
 8607 0f47 0E07     		.2byte	0x70e
 8608 0f49 48120000 		.4byte	.LFB112
 8609 0f4d 36000000 		.4byte	.LFE112-.LFB112
 8610 0f51 01       		.uleb128 0x1
 8611 0f52 9C       		.byte	0x9c
 8612 0f53 850F0000 		.4byte	0xf85
 8613 0f57 12       		.uleb128 0x12
 8614 0f58 F6050000 		.4byte	.LASF87
 8615 0f5c 01       		.byte	0x1
 8616 0f5d 0E07     		.2byte	0x70e
 8617 0f5f 5C050000 		.4byte	0x55c
 8618 0f63 02       		.uleb128 0x2
ARM GAS  /tmp/ccRayNMu.s 			page 204


 8619 0f64 91       		.byte	0x91
 8620 0f65 6C       		.sleb128 -20
 8621 0f66 12       		.uleb128 0x12
 8622 0f67 02050000 		.4byte	.LASF68
 8623 0f6b 01       		.byte	0x1
 8624 0f6c 0E07     		.2byte	0x70e
 8625 0f6e A2000000 		.4byte	0xa2
 8626 0f72 02       		.uleb128 0x2
 8627 0f73 91       		.byte	0x91
 8628 0f74 6A       		.sleb128 -22
 8629 0f75 13       		.uleb128 0x13
 8630 0f76 CB040000 		.4byte	.LASF89
 8631 0f7a 01       		.byte	0x1
 8632 0f7b 1007     		.2byte	0x710
 8633 0f7d A2000000 		.4byte	0xa2
 8634 0f81 02       		.uleb128 0x2
 8635 0f82 91       		.byte	0x91
 8636 0f83 76       		.sleb128 -10
 8637 0f84 00       		.byte	0
 8638 0f85 16       		.uleb128 0x16
 8639 0f86 D60B0000 		.4byte	.LASF155
 8640 0f8a 01       		.byte	0x1
 8641 0f8b F606     		.2byte	0x6f6
 8642 0f8d 0E120000 		.4byte	.LFB111
 8643 0f91 3A000000 		.4byte	.LFE111-.LFB111
 8644 0f95 01       		.uleb128 0x1
 8645 0f96 9C       		.byte	0x9c
 8646 0f97 C90F0000 		.4byte	0xfc9
 8647 0f9b 12       		.uleb128 0x12
 8648 0f9c F6050000 		.4byte	.LASF87
 8649 0fa0 01       		.byte	0x1
 8650 0fa1 F606     		.2byte	0x6f6
 8651 0fa3 5C050000 		.4byte	0x55c
 8652 0fa7 02       		.uleb128 0x2
 8653 0fa8 91       		.byte	0x91
 8654 0fa9 6C       		.sleb128 -20
 8655 0faa 12       		.uleb128 0x12
 8656 0fab EA060000 		.4byte	.LASF156
 8657 0faf 01       		.byte	0x1
 8658 0fb0 F606     		.2byte	0x6f6
 8659 0fb2 A2000000 		.4byte	0xa2
 8660 0fb6 02       		.uleb128 0x2
 8661 0fb7 91       		.byte	0x91
 8662 0fb8 6A       		.sleb128 -22
 8663 0fb9 13       		.uleb128 0x13
 8664 0fba 54010000 		.4byte	.LASF88
 8665 0fbe 01       		.byte	0x1
 8666 0fbf F806     		.2byte	0x6f8
 8667 0fc1 A2000000 		.4byte	0xa2
 8668 0fc5 02       		.uleb128 0x2
 8669 0fc6 91       		.byte	0x91
 8670 0fc7 76       		.sleb128 -10
 8671 0fc8 00       		.byte	0
 8672 0fc9 16       		.uleb128 0x16
 8673 0fca AD0B0000 		.4byte	.LASF157
 8674 0fce 01       		.byte	0x1
 8675 0fcf DE06     		.2byte	0x6de
ARM GAS  /tmp/ccRayNMu.s 			page 205


 8676 0fd1 D8110000 		.4byte	.LFB110
 8677 0fd5 36000000 		.4byte	.LFE110-.LFB110
 8678 0fd9 01       		.uleb128 0x1
 8679 0fda 9C       		.byte	0x9c
 8680 0fdb 0D100000 		.4byte	0x100d
 8681 0fdf 12       		.uleb128 0x12
 8682 0fe0 F6050000 		.4byte	.LASF87
 8683 0fe4 01       		.byte	0x1
 8684 0fe5 DE06     		.2byte	0x6de
 8685 0fe7 5C050000 		.4byte	0x55c
 8686 0feb 02       		.uleb128 0x2
 8687 0fec 91       		.byte	0x91
 8688 0fed 6C       		.sleb128 -20
 8689 0fee 12       		.uleb128 0x12
 8690 0fef EA060000 		.4byte	.LASF156
 8691 0ff3 01       		.byte	0x1
 8692 0ff4 DE06     		.2byte	0x6de
 8693 0ff6 A2000000 		.4byte	0xa2
 8694 0ffa 02       		.uleb128 0x2
 8695 0ffb 91       		.byte	0x91
 8696 0ffc 6A       		.sleb128 -22
 8697 0ffd 13       		.uleb128 0x13
 8698 0ffe 54010000 		.4byte	.LASF88
 8699 1002 01       		.byte	0x1
 8700 1003 E006     		.2byte	0x6e0
 8701 1005 A2000000 		.4byte	0xa2
 8702 1009 02       		.uleb128 0x2
 8703 100a 91       		.byte	0x91
 8704 100b 76       		.sleb128 -10
 8705 100c 00       		.byte	0
 8706 100d 16       		.uleb128 0x16
 8707 100e 020D0000 		.4byte	.LASF158
 8708 1012 01       		.byte	0x1
 8709 1013 C606     		.2byte	0x6c6
 8710 1015 9E110000 		.4byte	.LFB109
 8711 1019 3A000000 		.4byte	.LFE109-.LFB109
 8712 101d 01       		.uleb128 0x1
 8713 101e 9C       		.byte	0x9c
 8714 101f 51100000 		.4byte	0x1051
 8715 1023 12       		.uleb128 0x12
 8716 1024 F6050000 		.4byte	.LASF87
 8717 1028 01       		.byte	0x1
 8718 1029 C606     		.2byte	0x6c6
 8719 102b 5C050000 		.4byte	0x55c
 8720 102f 02       		.uleb128 0x2
 8721 1030 91       		.byte	0x91
 8722 1031 6C       		.sleb128 -20
 8723 1032 12       		.uleb128 0x12
 8724 1033 EA060000 		.4byte	.LASF156
 8725 1037 01       		.byte	0x1
 8726 1038 C606     		.2byte	0x6c6
 8727 103a A2000000 		.4byte	0xa2
 8728 103e 02       		.uleb128 0x2
 8729 103f 91       		.byte	0x91
 8730 1040 6A       		.sleb128 -22
 8731 1041 13       		.uleb128 0x13
 8732 1042 4B010000 		.4byte	.LASF93
ARM GAS  /tmp/ccRayNMu.s 			page 206


 8733 1046 01       		.byte	0x1
 8734 1047 C806     		.2byte	0x6c8
 8735 1049 A2000000 		.4byte	0xa2
 8736 104d 02       		.uleb128 0x2
 8737 104e 91       		.byte	0x91
 8738 104f 76       		.sleb128 -10
 8739 1050 00       		.byte	0
 8740 1051 16       		.uleb128 0x16
 8741 1052 C9000000 		.4byte	.LASF159
 8742 1056 01       		.byte	0x1
 8743 1057 AC06     		.2byte	0x6ac
 8744 1059 68110000 		.4byte	.LFB108
 8745 105d 36000000 		.4byte	.LFE108-.LFB108
 8746 1061 01       		.uleb128 0x1
 8747 1062 9C       		.byte	0x9c
 8748 1063 95100000 		.4byte	0x1095
 8749 1067 12       		.uleb128 0x12
 8750 1068 F6050000 		.4byte	.LASF87
 8751 106c 01       		.byte	0x1
 8752 106d AC06     		.2byte	0x6ac
 8753 106f 5C050000 		.4byte	0x55c
 8754 1073 02       		.uleb128 0x2
 8755 1074 91       		.byte	0x91
 8756 1075 6C       		.sleb128 -20
 8757 1076 12       		.uleb128 0x12
 8758 1077 EA060000 		.4byte	.LASF156
 8759 107b 01       		.byte	0x1
 8760 107c AC06     		.2byte	0x6ac
 8761 107e A2000000 		.4byte	0xa2
 8762 1082 02       		.uleb128 0x2
 8763 1083 91       		.byte	0x91
 8764 1084 6A       		.sleb128 -22
 8765 1085 13       		.uleb128 0x13
 8766 1086 4B010000 		.4byte	.LASF93
 8767 108a 01       		.byte	0x1
 8768 108b AE06     		.2byte	0x6ae
 8769 108d A2000000 		.4byte	0xa2
 8770 1091 02       		.uleb128 0x2
 8771 1092 91       		.byte	0x91
 8772 1093 76       		.sleb128 -10
 8773 1094 00       		.byte	0
 8774 1095 16       		.uleb128 0x16
 8775 1096 770A0000 		.4byte	.LASF160
 8776 109a 01       		.byte	0x1
 8777 109b 9306     		.2byte	0x693
 8778 109d 2E110000 		.4byte	.LFB107
 8779 10a1 3A000000 		.4byte	.LFE107-.LFB107
 8780 10a5 01       		.uleb128 0x1
 8781 10a6 9C       		.byte	0x9c
 8782 10a7 D9100000 		.4byte	0x10d9
 8783 10ab 12       		.uleb128 0x12
 8784 10ac F6050000 		.4byte	.LASF87
 8785 10b0 01       		.byte	0x1
 8786 10b1 9306     		.2byte	0x693
 8787 10b3 5C050000 		.4byte	0x55c
 8788 10b7 02       		.uleb128 0x2
 8789 10b8 91       		.byte	0x91
ARM GAS  /tmp/ccRayNMu.s 			page 207


 8790 10b9 6C       		.sleb128 -20
 8791 10ba 12       		.uleb128 0x12
 8792 10bb 65020000 		.4byte	.LASF161
 8793 10bf 01       		.byte	0x1
 8794 10c0 9306     		.2byte	0x693
 8795 10c2 A2000000 		.4byte	0xa2
 8796 10c6 02       		.uleb128 0x2
 8797 10c7 91       		.byte	0x91
 8798 10c8 6A       		.sleb128 -22
 8799 10c9 13       		.uleb128 0x13
 8800 10ca 54010000 		.4byte	.LASF88
 8801 10ce 01       		.byte	0x1
 8802 10cf 9506     		.2byte	0x695
 8803 10d1 A2000000 		.4byte	0xa2
 8804 10d5 02       		.uleb128 0x2
 8805 10d6 91       		.byte	0x91
 8806 10d7 76       		.sleb128 -10
 8807 10d8 00       		.byte	0
 8808 10d9 16       		.uleb128 0x16
 8809 10da 650D0000 		.4byte	.LASF162
 8810 10de 01       		.byte	0x1
 8811 10df 7A06     		.2byte	0x67a
 8812 10e1 F8100000 		.4byte	.LFB106
 8813 10e5 36000000 		.4byte	.LFE106-.LFB106
 8814 10e9 01       		.uleb128 0x1
 8815 10ea 9C       		.byte	0x9c
 8816 10eb 1D110000 		.4byte	0x111d
 8817 10ef 12       		.uleb128 0x12
 8818 10f0 F6050000 		.4byte	.LASF87
 8819 10f4 01       		.byte	0x1
 8820 10f5 7A06     		.2byte	0x67a
 8821 10f7 5C050000 		.4byte	0x55c
 8822 10fb 02       		.uleb128 0x2
 8823 10fc 91       		.byte	0x91
 8824 10fd 6C       		.sleb128 -20
 8825 10fe 12       		.uleb128 0x12
 8826 10ff 65020000 		.4byte	.LASF161
 8827 1103 01       		.byte	0x1
 8828 1104 7A06     		.2byte	0x67a
 8829 1106 A2000000 		.4byte	0xa2
 8830 110a 02       		.uleb128 0x2
 8831 110b 91       		.byte	0x91
 8832 110c 6A       		.sleb128 -22
 8833 110d 13       		.uleb128 0x13
 8834 110e 54010000 		.4byte	.LASF88
 8835 1112 01       		.byte	0x1
 8836 1113 7C06     		.2byte	0x67c
 8837 1115 A2000000 		.4byte	0xa2
 8838 1119 02       		.uleb128 0x2
 8839 111a 91       		.byte	0x91
 8840 111b 76       		.sleb128 -10
 8841 111c 00       		.byte	0
 8842 111d 16       		.uleb128 0x16
 8843 111e 650A0000 		.4byte	.LASF163
 8844 1122 01       		.byte	0x1
 8845 1123 6106     		.2byte	0x661
 8846 1125 BE100000 		.4byte	.LFB105
ARM GAS  /tmp/ccRayNMu.s 			page 208


 8847 1129 3A000000 		.4byte	.LFE105-.LFB105
 8848 112d 01       		.uleb128 0x1
 8849 112e 9C       		.byte	0x9c
 8850 112f 61110000 		.4byte	0x1161
 8851 1133 12       		.uleb128 0x12
 8852 1134 F6050000 		.4byte	.LASF87
 8853 1138 01       		.byte	0x1
 8854 1139 6106     		.2byte	0x661
 8855 113b 5C050000 		.4byte	0x55c
 8856 113f 02       		.uleb128 0x2
 8857 1140 91       		.byte	0x91
 8858 1141 6C       		.sleb128 -20
 8859 1142 12       		.uleb128 0x12
 8860 1143 65020000 		.4byte	.LASF161
 8861 1147 01       		.byte	0x1
 8862 1148 6106     		.2byte	0x661
 8863 114a A2000000 		.4byte	0xa2
 8864 114e 02       		.uleb128 0x2
 8865 114f 91       		.byte	0x91
 8866 1150 6A       		.sleb128 -22
 8867 1151 13       		.uleb128 0x13
 8868 1152 4B010000 		.4byte	.LASF93
 8869 1156 01       		.byte	0x1
 8870 1157 6306     		.2byte	0x663
 8871 1159 A2000000 		.4byte	0xa2
 8872 115d 02       		.uleb128 0x2
 8873 115e 91       		.byte	0x91
 8874 115f 76       		.sleb128 -10
 8875 1160 00       		.byte	0
 8876 1161 16       		.uleb128 0x16
 8877 1162 A00D0000 		.4byte	.LASF164
 8878 1166 01       		.byte	0x1
 8879 1167 4706     		.2byte	0x647
 8880 1169 88100000 		.4byte	.LFB104
 8881 116d 36000000 		.4byte	.LFE104-.LFB104
 8882 1171 01       		.uleb128 0x1
 8883 1172 9C       		.byte	0x9c
 8884 1173 A5110000 		.4byte	0x11a5
 8885 1177 12       		.uleb128 0x12
 8886 1178 F6050000 		.4byte	.LASF87
 8887 117c 01       		.byte	0x1
 8888 117d 4706     		.2byte	0x647
 8889 117f 5C050000 		.4byte	0x55c
 8890 1183 02       		.uleb128 0x2
 8891 1184 91       		.byte	0x91
 8892 1185 6C       		.sleb128 -20
 8893 1186 12       		.uleb128 0x12
 8894 1187 65020000 		.4byte	.LASF161
 8895 118b 01       		.byte	0x1
 8896 118c 4706     		.2byte	0x647
 8897 118e A2000000 		.4byte	0xa2
 8898 1192 02       		.uleb128 0x2
 8899 1193 91       		.byte	0x91
 8900 1194 6A       		.sleb128 -22
 8901 1195 13       		.uleb128 0x13
 8902 1196 4B010000 		.4byte	.LASF93
 8903 119a 01       		.byte	0x1
ARM GAS  /tmp/ccRayNMu.s 			page 209


 8904 119b 4906     		.2byte	0x649
 8905 119d A2000000 		.4byte	0xa2
 8906 11a1 02       		.uleb128 0x2
 8907 11a2 91       		.byte	0x91
 8908 11a3 76       		.sleb128 -10
 8909 11a4 00       		.byte	0
 8910 11a5 16       		.uleb128 0x16
 8911 11a6 980B0000 		.4byte	.LASF165
 8912 11aa 01       		.byte	0x1
 8913 11ab 2F06     		.2byte	0x62f
 8914 11ad 4E100000 		.4byte	.LFB103
 8915 11b1 3A000000 		.4byte	.LFE103-.LFB103
 8916 11b5 01       		.uleb128 0x1
 8917 11b6 9C       		.byte	0x9c
 8918 11b7 E9110000 		.4byte	0x11e9
 8919 11bb 12       		.uleb128 0x12
 8920 11bc F6050000 		.4byte	.LASF87
 8921 11c0 01       		.byte	0x1
 8922 11c1 2F06     		.2byte	0x62f
 8923 11c3 5C050000 		.4byte	0x55c
 8924 11c7 02       		.uleb128 0x2
 8925 11c8 91       		.byte	0x91
 8926 11c9 6C       		.sleb128 -20
 8927 11ca 12       		.uleb128 0x12
 8928 11cb C6020000 		.4byte	.LASF166
 8929 11cf 01       		.byte	0x1
 8930 11d0 2F06     		.2byte	0x62f
 8931 11d2 A2000000 		.4byte	0xa2
 8932 11d6 02       		.uleb128 0x2
 8933 11d7 91       		.byte	0x91
 8934 11d8 6A       		.sleb128 -22
 8935 11d9 13       		.uleb128 0x13
 8936 11da 54010000 		.4byte	.LASF88
 8937 11de 01       		.byte	0x1
 8938 11df 3106     		.2byte	0x631
 8939 11e1 A2000000 		.4byte	0xa2
 8940 11e5 02       		.uleb128 0x2
 8941 11e6 91       		.byte	0x91
 8942 11e7 76       		.sleb128 -10
 8943 11e8 00       		.byte	0
 8944 11e9 16       		.uleb128 0x16
 8945 11ea 770D0000 		.4byte	.LASF167
 8946 11ee 01       		.byte	0x1
 8947 11ef 1706     		.2byte	0x617
 8948 11f1 18100000 		.4byte	.LFB102
 8949 11f5 36000000 		.4byte	.LFE102-.LFB102
 8950 11f9 01       		.uleb128 0x1
 8951 11fa 9C       		.byte	0x9c
 8952 11fb 2D120000 		.4byte	0x122d
 8953 11ff 12       		.uleb128 0x12
 8954 1200 F6050000 		.4byte	.LASF87
 8955 1204 01       		.byte	0x1
 8956 1205 1706     		.2byte	0x617
 8957 1207 5C050000 		.4byte	0x55c
 8958 120b 02       		.uleb128 0x2
 8959 120c 91       		.byte	0x91
 8960 120d 6C       		.sleb128 -20
ARM GAS  /tmp/ccRayNMu.s 			page 210


 8961 120e 12       		.uleb128 0x12
 8962 120f C6020000 		.4byte	.LASF166
 8963 1213 01       		.byte	0x1
 8964 1214 1706     		.2byte	0x617
 8965 1216 A2000000 		.4byte	0xa2
 8966 121a 02       		.uleb128 0x2
 8967 121b 91       		.byte	0x91
 8968 121c 6A       		.sleb128 -22
 8969 121d 13       		.uleb128 0x13
 8970 121e 54010000 		.4byte	.LASF88
 8971 1222 01       		.byte	0x1
 8972 1223 1906     		.2byte	0x619
 8973 1225 A2000000 		.4byte	0xa2
 8974 1229 02       		.uleb128 0x2
 8975 122a 91       		.byte	0x91
 8976 122b 76       		.sleb128 -10
 8977 122c 00       		.byte	0
 8978 122d 16       		.uleb128 0x16
 8979 122e 2E020000 		.4byte	.LASF168
 8980 1232 01       		.byte	0x1
 8981 1233 FF05     		.2byte	0x5ff
 8982 1235 DE0F0000 		.4byte	.LFB101
 8983 1239 3A000000 		.4byte	.LFE101-.LFB101
 8984 123d 01       		.uleb128 0x1
 8985 123e 9C       		.byte	0x9c
 8986 123f 71120000 		.4byte	0x1271
 8987 1243 12       		.uleb128 0x12
 8988 1244 F6050000 		.4byte	.LASF87
 8989 1248 01       		.byte	0x1
 8990 1249 FF05     		.2byte	0x5ff
 8991 124b 5C050000 		.4byte	0x55c
 8992 124f 02       		.uleb128 0x2
 8993 1250 91       		.byte	0x91
 8994 1251 6C       		.sleb128 -20
 8995 1252 12       		.uleb128 0x12
 8996 1253 C6020000 		.4byte	.LASF166
 8997 1257 01       		.byte	0x1
 8998 1258 FF05     		.2byte	0x5ff
 8999 125a A2000000 		.4byte	0xa2
 9000 125e 02       		.uleb128 0x2
 9001 125f 91       		.byte	0x91
 9002 1260 6A       		.sleb128 -22
 9003 1261 13       		.uleb128 0x13
 9004 1262 4B010000 		.4byte	.LASF93
 9005 1266 01       		.byte	0x1
 9006 1267 0106     		.2byte	0x601
 9007 1269 A2000000 		.4byte	0xa2
 9008 126d 02       		.uleb128 0x2
 9009 126e 91       		.byte	0x91
 9010 126f 76       		.sleb128 -10
 9011 1270 00       		.byte	0
 9012 1271 16       		.uleb128 0x16
 9013 1272 67040000 		.4byte	.LASF169
 9014 1276 01       		.byte	0x1
 9015 1277 E605     		.2byte	0x5e6
 9016 1279 A80F0000 		.4byte	.LFB100
 9017 127d 36000000 		.4byte	.LFE100-.LFB100
ARM GAS  /tmp/ccRayNMu.s 			page 211


 9018 1281 01       		.uleb128 0x1
 9019 1282 9C       		.byte	0x9c
 9020 1283 B5120000 		.4byte	0x12b5
 9021 1287 12       		.uleb128 0x12
 9022 1288 F6050000 		.4byte	.LASF87
 9023 128c 01       		.byte	0x1
 9024 128d E605     		.2byte	0x5e6
 9025 128f 5C050000 		.4byte	0x55c
 9026 1293 02       		.uleb128 0x2
 9027 1294 91       		.byte	0x91
 9028 1295 6C       		.sleb128 -20
 9029 1296 12       		.uleb128 0x12
 9030 1297 C6020000 		.4byte	.LASF166
 9031 129b 01       		.byte	0x1
 9032 129c E605     		.2byte	0x5e6
 9033 129e A2000000 		.4byte	0xa2
 9034 12a2 02       		.uleb128 0x2
 9035 12a3 91       		.byte	0x91
 9036 12a4 6A       		.sleb128 -22
 9037 12a5 13       		.uleb128 0x13
 9038 12a6 4B010000 		.4byte	.LASF93
 9039 12aa 01       		.byte	0x1
 9040 12ab E805     		.2byte	0x5e8
 9041 12ad A2000000 		.4byte	0xa2
 9042 12b1 02       		.uleb128 0x2
 9043 12b2 91       		.byte	0x91
 9044 12b3 76       		.sleb128 -10
 9045 12b4 00       		.byte	0
 9046 12b5 16       		.uleb128 0x16
 9047 12b6 0F0C0000 		.4byte	.LASF170
 9048 12ba 01       		.byte	0x1
 9049 12bb CC05     		.2byte	0x5cc
 9050 12bd 6A0F0000 		.4byte	.LFB99
 9051 12c1 3E000000 		.4byte	.LFE99-.LFB99
 9052 12c5 01       		.uleb128 0x1
 9053 12c6 9C       		.byte	0x9c
 9054 12c7 EA120000 		.4byte	0x12ea
 9055 12cb 12       		.uleb128 0x12
 9056 12cc F6050000 		.4byte	.LASF87
 9057 12d0 01       		.byte	0x1
 9058 12d1 CC05     		.2byte	0x5cc
 9059 12d3 5C050000 		.4byte	0x55c
 9060 12d7 02       		.uleb128 0x2
 9061 12d8 91       		.byte	0x91
 9062 12d9 74       		.sleb128 -12
 9063 12da 12       		.uleb128 0x12
 9064 12db 0B000000 		.4byte	.LASF138
 9065 12df 01       		.byte	0x1
 9066 12e0 CC05     		.2byte	0x5cc
 9067 12e2 37010000 		.4byte	0x137
 9068 12e6 02       		.uleb128 0x2
 9069 12e7 91       		.byte	0x91
 9070 12e8 73       		.sleb128 -13
 9071 12e9 00       		.byte	0
 9072 12ea 16       		.uleb128 0x16
 9073 12eb 35040000 		.4byte	.LASF171
 9074 12ef 01       		.byte	0x1
ARM GAS  /tmp/ccRayNMu.s 			page 212


 9075 12f0 B305     		.2byte	0x5b3
 9076 12f2 2C0F0000 		.4byte	.LFB98
 9077 12f6 3E000000 		.4byte	.LFE98-.LFB98
 9078 12fa 01       		.uleb128 0x1
 9079 12fb 9C       		.byte	0x9c
 9080 12fc 1F130000 		.4byte	0x131f
 9081 1300 12       		.uleb128 0x12
 9082 1301 F6050000 		.4byte	.LASF87
 9083 1305 01       		.byte	0x1
 9084 1306 B305     		.2byte	0x5b3
 9085 1308 5C050000 		.4byte	0x55c
 9086 130c 02       		.uleb128 0x2
 9087 130d 91       		.byte	0x91
 9088 130e 74       		.sleb128 -12
 9089 130f 12       		.uleb128 0x12
 9090 1310 0B000000 		.4byte	.LASF138
 9091 1314 01       		.byte	0x1
 9092 1315 B305     		.2byte	0x5b3
 9093 1317 37010000 		.4byte	0x137
 9094 131b 02       		.uleb128 0x2
 9095 131c 91       		.byte	0x91
 9096 131d 73       		.sleb128 -13
 9097 131e 00       		.byte	0
 9098 131f 16       		.uleb128 0x16
 9099 1320 BD040000 		.4byte	.LASF172
 9100 1324 01       		.byte	0x1
 9101 1325 9A05     		.2byte	0x59a
 9102 1327 EE0E0000 		.4byte	.LFB97
 9103 132b 3E000000 		.4byte	.LFE97-.LFB97
 9104 132f 01       		.uleb128 0x1
 9105 1330 9C       		.byte	0x9c
 9106 1331 54130000 		.4byte	0x1354
 9107 1335 12       		.uleb128 0x12
 9108 1336 F6050000 		.4byte	.LASF87
 9109 133a 01       		.byte	0x1
 9110 133b 9A05     		.2byte	0x59a
 9111 133d 5C050000 		.4byte	0x55c
 9112 1341 02       		.uleb128 0x2
 9113 1342 91       		.byte	0x91
 9114 1343 74       		.sleb128 -12
 9115 1344 12       		.uleb128 0x12
 9116 1345 0B000000 		.4byte	.LASF138
 9117 1349 01       		.byte	0x1
 9118 134a 9A05     		.2byte	0x59a
 9119 134c 37010000 		.4byte	0x137
 9120 1350 02       		.uleb128 0x2
 9121 1351 91       		.byte	0x91
 9122 1352 73       		.sleb128 -13
 9123 1353 00       		.byte	0
 9124 1354 16       		.uleb128 0x16
 9125 1355 DC010000 		.4byte	.LASF173
 9126 1359 01       		.byte	0x1
 9127 135a 8205     		.2byte	0x582
 9128 135c B00E0000 		.4byte	.LFB96
 9129 1360 3E000000 		.4byte	.LFE96-.LFB96
 9130 1364 01       		.uleb128 0x1
 9131 1365 9C       		.byte	0x9c
ARM GAS  /tmp/ccRayNMu.s 			page 213


 9132 1366 89130000 		.4byte	0x1389
 9133 136a 12       		.uleb128 0x12
 9134 136b F6050000 		.4byte	.LASF87
 9135 136f 01       		.byte	0x1
 9136 1370 8205     		.2byte	0x582
 9137 1372 5C050000 		.4byte	0x55c
 9138 1376 02       		.uleb128 0x2
 9139 1377 91       		.byte	0x91
 9140 1378 74       		.sleb128 -12
 9141 1379 12       		.uleb128 0x12
 9142 137a 0B000000 		.4byte	.LASF138
 9143 137e 01       		.byte	0x1
 9144 137f 8205     		.2byte	0x582
 9145 1381 37010000 		.4byte	0x137
 9146 1385 02       		.uleb128 0x2
 9147 1386 91       		.byte	0x91
 9148 1387 73       		.sleb128 -13
 9149 1388 00       		.byte	0
 9150 1389 16       		.uleb128 0x16
 9151 138a B5000000 		.4byte	.LASF174
 9152 138e 01       		.byte	0x1
 9153 138f 6C05     		.2byte	0x56c
 9154 1391 760E0000 		.4byte	.LFB95
 9155 1395 3A000000 		.4byte	.LFE95-.LFB95
 9156 1399 01       		.uleb128 0x1
 9157 139a 9C       		.byte	0x9c
 9158 139b CD130000 		.4byte	0x13cd
 9159 139f 12       		.uleb128 0x12
 9160 13a0 F6050000 		.4byte	.LASF87
 9161 13a4 01       		.byte	0x1
 9162 13a5 6C05     		.2byte	0x56c
 9163 13a7 5C050000 		.4byte	0x55c
 9164 13ab 02       		.uleb128 0x2
 9165 13ac 91       		.byte	0x91
 9166 13ad 6C       		.sleb128 -20
 9167 13ae 12       		.uleb128 0x12
 9168 13af AA020000 		.4byte	.LASF175
 9169 13b3 01       		.byte	0x1
 9170 13b4 6C05     		.2byte	0x56c
 9171 13b6 A2000000 		.4byte	0xa2
 9172 13ba 02       		.uleb128 0x2
 9173 13bb 91       		.byte	0x91
 9174 13bc 6A       		.sleb128 -22
 9175 13bd 13       		.uleb128 0x13
 9176 13be 54010000 		.4byte	.LASF88
 9177 13c2 01       		.byte	0x1
 9178 13c3 6E05     		.2byte	0x56e
 9179 13c5 A2000000 		.4byte	0xa2
 9180 13c9 02       		.uleb128 0x2
 9181 13ca 91       		.byte	0x91
 9182 13cb 76       		.sleb128 -10
 9183 13cc 00       		.byte	0
 9184 13cd 16       		.uleb128 0x16
 9185 13ce 99070000 		.4byte	.LASF176
 9186 13d2 01       		.byte	0x1
 9187 13d3 5405     		.2byte	0x554
 9188 13d5 400E0000 		.4byte	.LFB94
ARM GAS  /tmp/ccRayNMu.s 			page 214


 9189 13d9 36000000 		.4byte	.LFE94-.LFB94
 9190 13dd 01       		.uleb128 0x1
 9191 13de 9C       		.byte	0x9c
 9192 13df 11140000 		.4byte	0x1411
 9193 13e3 12       		.uleb128 0x12
 9194 13e4 F6050000 		.4byte	.LASF87
 9195 13e8 01       		.byte	0x1
 9196 13e9 5405     		.2byte	0x554
 9197 13eb 5C050000 		.4byte	0x55c
 9198 13ef 02       		.uleb128 0x2
 9199 13f0 91       		.byte	0x91
 9200 13f1 6C       		.sleb128 -20
 9201 13f2 12       		.uleb128 0x12
 9202 13f3 AA020000 		.4byte	.LASF175
 9203 13f7 01       		.byte	0x1
 9204 13f8 5405     		.2byte	0x554
 9205 13fa A2000000 		.4byte	0xa2
 9206 13fe 02       		.uleb128 0x2
 9207 13ff 91       		.byte	0x91
 9208 1400 6A       		.sleb128 -22
 9209 1401 13       		.uleb128 0x13
 9210 1402 54010000 		.4byte	.LASF88
 9211 1406 01       		.byte	0x1
 9212 1407 5605     		.2byte	0x556
 9213 1409 A2000000 		.4byte	0xa2
 9214 140d 02       		.uleb128 0x2
 9215 140e 91       		.byte	0x91
 9216 140f 76       		.sleb128 -10
 9217 1410 00       		.byte	0
 9218 1411 16       		.uleb128 0x16
 9219 1412 14000000 		.4byte	.LASF177
 9220 1416 01       		.byte	0x1
 9221 1417 3C05     		.2byte	0x53c
 9222 1419 060E0000 		.4byte	.LFB93
 9223 141d 3A000000 		.4byte	.LFE93-.LFB93
 9224 1421 01       		.uleb128 0x1
 9225 1422 9C       		.byte	0x9c
 9226 1423 55140000 		.4byte	0x1455
 9227 1427 12       		.uleb128 0x12
 9228 1428 F6050000 		.4byte	.LASF87
 9229 142c 01       		.byte	0x1
 9230 142d 3C05     		.2byte	0x53c
 9231 142f 5C050000 		.4byte	0x55c
 9232 1433 02       		.uleb128 0x2
 9233 1434 91       		.byte	0x91
 9234 1435 6C       		.sleb128 -20
 9235 1436 12       		.uleb128 0x12
 9236 1437 AA020000 		.4byte	.LASF175
 9237 143b 01       		.byte	0x1
 9238 143c 3C05     		.2byte	0x53c
 9239 143e A2000000 		.4byte	0xa2
 9240 1442 02       		.uleb128 0x2
 9241 1443 91       		.byte	0x91
 9242 1444 6A       		.sleb128 -22
 9243 1445 13       		.uleb128 0x13
 9244 1446 4B010000 		.4byte	.LASF93
 9245 144a 01       		.byte	0x1
ARM GAS  /tmp/ccRayNMu.s 			page 215


 9246 144b 3E05     		.2byte	0x53e
 9247 144d A2000000 		.4byte	0xa2
 9248 1451 02       		.uleb128 0x2
 9249 1452 91       		.byte	0x91
 9250 1453 76       		.sleb128 -10
 9251 1454 00       		.byte	0
 9252 1455 16       		.uleb128 0x16
 9253 1456 3B070000 		.4byte	.LASF178
 9254 145a 01       		.byte	0x1
 9255 145b 2405     		.2byte	0x524
 9256 145d D00D0000 		.4byte	.LFB92
 9257 1461 36000000 		.4byte	.LFE92-.LFB92
 9258 1465 01       		.uleb128 0x1
 9259 1466 9C       		.byte	0x9c
 9260 1467 99140000 		.4byte	0x1499
 9261 146b 12       		.uleb128 0x12
 9262 146c F6050000 		.4byte	.LASF87
 9263 1470 01       		.byte	0x1
 9264 1471 2405     		.2byte	0x524
 9265 1473 5C050000 		.4byte	0x55c
 9266 1477 02       		.uleb128 0x2
 9267 1478 91       		.byte	0x91
 9268 1479 6C       		.sleb128 -20
 9269 147a 12       		.uleb128 0x12
 9270 147b AA020000 		.4byte	.LASF175
 9271 147f 01       		.byte	0x1
 9272 1480 2405     		.2byte	0x524
 9273 1482 A2000000 		.4byte	0xa2
 9274 1486 02       		.uleb128 0x2
 9275 1487 91       		.byte	0x91
 9276 1488 6A       		.sleb128 -22
 9277 1489 13       		.uleb128 0x13
 9278 148a 4B010000 		.4byte	.LASF93
 9279 148e 01       		.byte	0x1
 9280 148f 2605     		.2byte	0x526
 9281 1491 A2000000 		.4byte	0xa2
 9282 1495 02       		.uleb128 0x2
 9283 1496 91       		.byte	0x91
 9284 1497 76       		.sleb128 -10
 9285 1498 00       		.byte	0
 9286 1499 16       		.uleb128 0x16
 9287 149a 13020000 		.4byte	.LASF179
 9288 149e 01       		.byte	0x1
 9289 149f F104     		.2byte	0x4f1
 9290 14a1 3A0D0000 		.4byte	.LFB91
 9291 14a5 96000000 		.4byte	.LFE91-.LFB91
 9292 14a9 01       		.uleb128 0x1
 9293 14aa 9C       		.byte	0x9c
 9294 14ab 19150000 		.4byte	0x1519
 9295 14af 12       		.uleb128 0x12
 9296 14b0 F6050000 		.4byte	.LASF87
 9297 14b4 01       		.byte	0x1
 9298 14b5 F104     		.2byte	0x4f1
 9299 14b7 5C050000 		.4byte	0x55c
 9300 14bb 02       		.uleb128 0x2
 9301 14bc 91       		.byte	0x91
 9302 14bd 6C       		.sleb128 -20
ARM GAS  /tmp/ccRayNMu.s 			page 216


 9303 14be 12       		.uleb128 0x12
 9304 14bf FB050000 		.4byte	.LASF180
 9305 14c3 01       		.byte	0x1
 9306 14c4 F104     		.2byte	0x4f1
 9307 14c6 A2000000 		.4byte	0xa2
 9308 14ca 02       		.uleb128 0x2
 9309 14cb 91       		.byte	0x91
 9310 14cc 6A       		.sleb128 -22
 9311 14cd 12       		.uleb128 0x12
 9312 14ce 55020000 		.4byte	.LASF181
 9313 14d2 01       		.byte	0x1
 9314 14d3 F204     		.2byte	0x4f2
 9315 14d5 A2000000 		.4byte	0xa2
 9316 14d9 02       		.uleb128 0x2
 9317 14da 91       		.byte	0x91
 9318 14db 68       		.sleb128 -24
 9319 14dc 12       		.uleb128 0x12
 9320 14dd 10010000 		.4byte	.LASF182
 9321 14e1 01       		.byte	0x1
 9322 14e2 F204     		.2byte	0x4f2
 9323 14e4 A2000000 		.4byte	0xa2
 9324 14e8 02       		.uleb128 0x2
 9325 14e9 91       		.byte	0x91
 9326 14ea 66       		.sleb128 -26
 9327 14eb 13       		.uleb128 0x13
 9328 14ec FC060000 		.4byte	.LASF183
 9329 14f0 01       		.byte	0x1
 9330 14f1 F404     		.2byte	0x4f4
 9331 14f3 A2000000 		.4byte	0xa2
 9332 14f7 02       		.uleb128 0x2
 9333 14f8 91       		.byte	0x91
 9334 14f9 76       		.sleb128 -10
 9335 14fa 13       		.uleb128 0x13
 9336 14fb 4B010000 		.4byte	.LASF93
 9337 14ff 01       		.byte	0x1
 9338 1500 F504     		.2byte	0x4f5
 9339 1502 A2000000 		.4byte	0xa2
 9340 1506 02       		.uleb128 0x2
 9341 1507 91       		.byte	0x91
 9342 1508 74       		.sleb128 -12
 9343 1509 13       		.uleb128 0x13
 9344 150a CB040000 		.4byte	.LASF89
 9345 150e 01       		.byte	0x1
 9346 150f F604     		.2byte	0x4f6
 9347 1511 A2000000 		.4byte	0xa2
 9348 1515 02       		.uleb128 0x2
 9349 1516 91       		.byte	0x91
 9350 1517 72       		.sleb128 -14
 9351 1518 00       		.byte	0
 9352 1519 16       		.uleb128 0x16
 9353 151a 73010000 		.4byte	.LASF184
 9354 151e 01       		.byte	0x1
 9355 151f CE04     		.2byte	0x4ce
 9356 1521 040D0000 		.4byte	.LFB90
 9357 1525 36000000 		.4byte	.LFE90-.LFB90
 9358 1529 01       		.uleb128 0x1
 9359 152a 9C       		.byte	0x9c
ARM GAS  /tmp/ccRayNMu.s 			page 217


 9360 152b 5D150000 		.4byte	0x155d
 9361 152f 12       		.uleb128 0x12
 9362 1530 F6050000 		.4byte	.LASF87
 9363 1534 01       		.byte	0x1
 9364 1535 CE04     		.2byte	0x4ce
 9365 1537 5C050000 		.4byte	0x55c
 9366 153b 02       		.uleb128 0x2
 9367 153c 91       		.byte	0x91
 9368 153d 6C       		.sleb128 -20
 9369 153e 12       		.uleb128 0x12
 9370 153f 4F000000 		.4byte	.LASF185
 9371 1543 01       		.byte	0x1
 9372 1544 CE04     		.2byte	0x4ce
 9373 1546 A2000000 		.4byte	0xa2
 9374 154a 02       		.uleb128 0x2
 9375 154b 91       		.byte	0x91
 9376 154c 6A       		.sleb128 -22
 9377 154d 13       		.uleb128 0x13
 9378 154e FC060000 		.4byte	.LASF183
 9379 1552 01       		.byte	0x1
 9380 1553 D004     		.2byte	0x4d0
 9381 1555 A2000000 		.4byte	0xa2
 9382 1559 02       		.uleb128 0x2
 9383 155a 91       		.byte	0x91
 9384 155b 76       		.sleb128 -10
 9385 155c 00       		.byte	0
 9386 155d 16       		.uleb128 0x16
 9387 155e 88020000 		.4byte	.LASF186
 9388 1562 01       		.byte	0x1
 9389 1563 B004     		.2byte	0x4b0
 9390 1565 CE0C0000 		.4byte	.LFB89
 9391 1569 36000000 		.4byte	.LFE89-.LFB89
 9392 156d 01       		.uleb128 0x1
 9393 156e 9C       		.byte	0x9c
 9394 156f A1150000 		.4byte	0x15a1
 9395 1573 12       		.uleb128 0x12
 9396 1574 F6050000 		.4byte	.LASF87
 9397 1578 01       		.byte	0x1
 9398 1579 B004     		.2byte	0x4b0
 9399 157b 5C050000 		.4byte	0x55c
 9400 157f 02       		.uleb128 0x2
 9401 1580 91       		.byte	0x91
 9402 1581 6C       		.sleb128 -20
 9403 1582 12       		.uleb128 0x12
 9404 1583 75000000 		.4byte	.LASF59
 9405 1587 01       		.byte	0x1
 9406 1588 B004     		.2byte	0x4b0
 9407 158a A2000000 		.4byte	0xa2
 9408 158e 02       		.uleb128 0x2
 9409 158f 91       		.byte	0x91
 9410 1590 6A       		.sleb128 -22
 9411 1591 13       		.uleb128 0x13
 9412 1592 5D010000 		.4byte	.LASF187
 9413 1596 01       		.byte	0x1
 9414 1597 B204     		.2byte	0x4b2
 9415 1599 A2000000 		.4byte	0xa2
 9416 159d 02       		.uleb128 0x2
ARM GAS  /tmp/ccRayNMu.s 			page 218


 9417 159e 91       		.byte	0x91
 9418 159f 76       		.sleb128 -10
 9419 15a0 00       		.byte	0
 9420 15a1 16       		.uleb128 0x16
 9421 15a2 9A090000 		.4byte	.LASF188
 9422 15a6 01       		.byte	0x1
 9423 15a7 9904     		.2byte	0x499
 9424 15a9 A80C0000 		.4byte	.LFB88
 9425 15ad 26000000 		.4byte	.LFE88-.LFB88
 9426 15b1 01       		.uleb128 0x1
 9427 15b2 9C       		.byte	0x9c
 9428 15b3 E5150000 		.4byte	0x15e5
 9429 15b7 12       		.uleb128 0x12
 9430 15b8 F6050000 		.4byte	.LASF87
 9431 15bc 01       		.byte	0x1
 9432 15bd 9904     		.2byte	0x499
 9433 15bf 5C050000 		.4byte	0x55c
 9434 15c3 02       		.uleb128 0x2
 9435 15c4 91       		.byte	0x91
 9436 15c5 74       		.sleb128 -12
 9437 15c6 12       		.uleb128 0x12
 9438 15c7 8E0B0000 		.4byte	.LASF189
 9439 15cb 01       		.byte	0x1
 9440 15cc 9904     		.2byte	0x499
 9441 15ce A2000000 		.4byte	0xa2
 9442 15d2 02       		.uleb128 0x2
 9443 15d3 91       		.byte	0x91
 9444 15d4 72       		.sleb128 -14
 9445 15d5 12       		.uleb128 0x12
 9446 15d6 D8060000 		.4byte	.LASF190
 9447 15da 01       		.byte	0x1
 9448 15db 9904     		.2byte	0x499
 9449 15dd A2000000 		.4byte	0xa2
 9450 15e1 02       		.uleb128 0x2
 9451 15e2 91       		.byte	0x91
 9452 15e3 70       		.sleb128 -16
 9453 15e4 00       		.byte	0
 9454 15e5 16       		.uleb128 0x16
 9455 15e6 4C0D0000 		.4byte	.LASF191
 9456 15ea 01       		.byte	0x1
 9457 15eb 7D04     		.2byte	0x47d
 9458 15ed 560C0000 		.4byte	.LFB87
 9459 15f1 52000000 		.4byte	.LFE87-.LFB87
 9460 15f5 01       		.uleb128 0x1
 9461 15f6 9C       		.byte	0x9c
 9462 15f7 47160000 		.4byte	0x1647
 9463 15fb 12       		.uleb128 0x12
 9464 15fc F6050000 		.4byte	.LASF87
 9465 1600 01       		.byte	0x1
 9466 1601 7D04     		.2byte	0x47d
 9467 1603 5C050000 		.4byte	0x55c
 9468 1607 02       		.uleb128 0x2
 9469 1608 91       		.byte	0x91
 9470 1609 6C       		.sleb128 -20
 9471 160a 12       		.uleb128 0x12
 9472 160b 58070000 		.4byte	.LASF192
 9473 160f 01       		.byte	0x1
ARM GAS  /tmp/ccRayNMu.s 			page 219


 9474 1610 7D04     		.2byte	0x47d
 9475 1612 A2000000 		.4byte	0xa2
 9476 1616 02       		.uleb128 0x2
 9477 1617 91       		.byte	0x91
 9478 1618 6A       		.sleb128 -22
 9479 1619 12       		.uleb128 0x12
 9480 161a 04070000 		.4byte	.LASF193
 9481 161e 01       		.byte	0x1
 9482 161f 7D04     		.2byte	0x47d
 9483 1621 A2000000 		.4byte	0xa2
 9484 1625 02       		.uleb128 0x2
 9485 1626 91       		.byte	0x91
 9486 1627 68       		.sleb128 -24
 9487 1628 12       		.uleb128 0x12
 9488 1629 120D0000 		.4byte	.LASF194
 9489 162d 01       		.byte	0x1
 9490 162e 7E04     		.2byte	0x47e
 9491 1630 A2000000 		.4byte	0xa2
 9492 1634 02       		.uleb128 0x2
 9493 1635 91       		.byte	0x91
 9494 1636 66       		.sleb128 -26
 9495 1637 13       		.uleb128 0x13
 9496 1638 FC060000 		.4byte	.LASF183
 9497 163c 01       		.byte	0x1
 9498 163d 8004     		.2byte	0x480
 9499 163f A2000000 		.4byte	0xa2
 9500 1643 02       		.uleb128 0x2
 9501 1644 91       		.byte	0x91
 9502 1645 76       		.sleb128 -10
 9503 1646 00       		.byte	0
 9504 1647 18       		.uleb128 0x18
 9505 1648 AB0A0000 		.4byte	.LASF195
 9506 164c 01       		.byte	0x1
 9507 164d 5E04     		.2byte	0x45e
 9508 164f 180C0000 		.4byte	.LFB86
 9509 1653 3E000000 		.4byte	.LFE86-.LFB86
 9510 1657 01       		.uleb128 0x1
 9511 1658 9C       		.byte	0x9c
 9512 1659 9A160000 		.4byte	0x169a
 9513 165d 12       		.uleb128 0x12
 9514 165e F6050000 		.4byte	.LASF87
 9515 1662 01       		.byte	0x1
 9516 1663 5E04     		.2byte	0x45e
 9517 1665 5C050000 		.4byte	0x55c
 9518 1669 02       		.uleb128 0x2
 9519 166a 91       		.byte	0x91
 9520 166b 74       		.sleb128 -12
 9521 166c 12       		.uleb128 0x12
 9522 166d 58070000 		.4byte	.LASF192
 9523 1671 01       		.byte	0x1
 9524 1672 5E04     		.2byte	0x45e
 9525 1674 A2000000 		.4byte	0xa2
 9526 1678 02       		.uleb128 0x2
 9527 1679 91       		.byte	0x91
 9528 167a 72       		.sleb128 -14
 9529 167b 12       		.uleb128 0x12
 9530 167c 04070000 		.4byte	.LASF193
ARM GAS  /tmp/ccRayNMu.s 			page 220


 9531 1680 01       		.byte	0x1
 9532 1681 5F04     		.2byte	0x45f
 9533 1683 A2000000 		.4byte	0xa2
 9534 1687 02       		.uleb128 0x2
 9535 1688 91       		.byte	0x91
 9536 1689 70       		.sleb128 -16
 9537 168a 12       		.uleb128 0x12
 9538 168b 120D0000 		.4byte	.LASF194
 9539 168f 01       		.byte	0x1
 9540 1690 5F04     		.2byte	0x45f
 9541 1692 A2000000 		.4byte	0xa2
 9542 1696 02       		.uleb128 0x2
 9543 1697 91       		.byte	0x91
 9544 1698 6E       		.sleb128 -18
 9545 1699 00       		.byte	0
 9546 169a 18       		.uleb128 0x18
 9547 169b 38030000 		.4byte	.LASF196
 9548 169f 01       		.byte	0x1
 9549 16a0 3404     		.2byte	0x434
 9550 16a2 BA0B0000 		.4byte	.LFB85
 9551 16a6 5E000000 		.4byte	.LFE85-.LFB85
 9552 16aa 01       		.uleb128 0x1
 9553 16ab 9C       		.byte	0x9c
 9554 16ac FC160000 		.4byte	0x16fc
 9555 16b0 12       		.uleb128 0x12
 9556 16b1 F6050000 		.4byte	.LASF87
 9557 16b5 01       		.byte	0x1
 9558 16b6 3404     		.2byte	0x434
 9559 16b8 5C050000 		.4byte	0x55c
 9560 16bc 02       		.uleb128 0x2
 9561 16bd 91       		.byte	0x91
 9562 16be 6C       		.sleb128 -20
 9563 16bf 12       		.uleb128 0x12
 9564 16c0 58070000 		.4byte	.LASF192
 9565 16c4 01       		.byte	0x1
 9566 16c5 3404     		.2byte	0x434
 9567 16c7 A2000000 		.4byte	0xa2
 9568 16cb 02       		.uleb128 0x2
 9569 16cc 91       		.byte	0x91
 9570 16cd 6A       		.sleb128 -22
 9571 16ce 12       		.uleb128 0x12
 9572 16cf 04070000 		.4byte	.LASF193
 9573 16d3 01       		.byte	0x1
 9574 16d4 3404     		.2byte	0x434
 9575 16d6 A2000000 		.4byte	0xa2
 9576 16da 02       		.uleb128 0x2
 9577 16db 91       		.byte	0x91
 9578 16dc 68       		.sleb128 -24
 9579 16dd 12       		.uleb128 0x12
 9580 16de 120D0000 		.4byte	.LASF194
 9581 16e2 01       		.byte	0x1
 9582 16e3 3504     		.2byte	0x435
 9583 16e5 A2000000 		.4byte	0xa2
 9584 16e9 02       		.uleb128 0x2
 9585 16ea 91       		.byte	0x91
 9586 16eb 66       		.sleb128 -26
 9587 16ec 13       		.uleb128 0x13
ARM GAS  /tmp/ccRayNMu.s 			page 221


 9588 16ed FC060000 		.4byte	.LASF183
 9589 16f1 01       		.byte	0x1
 9590 16f2 3704     		.2byte	0x437
 9591 16f4 A2000000 		.4byte	0xa2
 9592 16f8 02       		.uleb128 0x2
 9593 16f9 91       		.byte	0x91
 9594 16fa 76       		.sleb128 -10
 9595 16fb 00       		.byte	0
 9596 16fc 18       		.uleb128 0x18
 9597 16fd 1C090000 		.4byte	.LASF197
 9598 1701 01       		.byte	0x1
 9599 1702 0C04     		.2byte	0x40c
 9600 1704 5E0B0000 		.4byte	.LFB84
 9601 1708 5C000000 		.4byte	.LFE84-.LFB84
 9602 170c 01       		.uleb128 0x1
 9603 170d 9C       		.byte	0x9c
 9604 170e 4F170000 		.4byte	0x174f
 9605 1712 12       		.uleb128 0x12
 9606 1713 F6050000 		.4byte	.LASF87
 9607 1717 01       		.byte	0x1
 9608 1718 0C04     		.2byte	0x40c
 9609 171a 5C050000 		.4byte	0x55c
 9610 171e 02       		.uleb128 0x2
 9611 171f 91       		.byte	0x91
 9612 1720 74       		.sleb128 -12
 9613 1721 12       		.uleb128 0x12
 9614 1722 240A0000 		.4byte	.LASF198
 9615 1726 01       		.byte	0x1
 9616 1727 0C04     		.2byte	0x40c
 9617 1729 A2000000 		.4byte	0xa2
 9618 172d 02       		.uleb128 0x2
 9619 172e 91       		.byte	0x91
 9620 172f 72       		.sleb128 -14
 9621 1730 12       		.uleb128 0x12
 9622 1731 AF080000 		.4byte	.LASF74
 9623 1735 01       		.byte	0x1
 9624 1736 0D04     		.2byte	0x40d
 9625 1738 A2000000 		.4byte	0xa2
 9626 173c 02       		.uleb128 0x2
 9627 173d 91       		.byte	0x91
 9628 173e 70       		.sleb128 -16
 9629 173f 12       		.uleb128 0x12
 9630 1740 F90C0000 		.4byte	.LASF199
 9631 1744 01       		.byte	0x1
 9632 1745 0D04     		.2byte	0x40d
 9633 1747 A2000000 		.4byte	0xa2
 9634 174b 02       		.uleb128 0x2
 9635 174c 91       		.byte	0x91
 9636 174d 6E       		.sleb128 -18
 9637 174e 00       		.byte	0
 9638 174f 18       		.uleb128 0x18
 9639 1750 AE090000 		.4byte	.LASF200
 9640 1754 01       		.byte	0x1
 9641 1755 F103     		.2byte	0x3f1
 9642 1757 300B0000 		.4byte	.LFB83
 9643 175b 2E000000 		.4byte	.LFE83-.LFB83
 9644 175f 01       		.uleb128 0x1
ARM GAS  /tmp/ccRayNMu.s 			page 222


 9645 1760 9C       		.byte	0x9c
 9646 1761 84170000 		.4byte	0x1784
 9647 1765 12       		.uleb128 0x12
 9648 1766 F6050000 		.4byte	.LASF87
 9649 176a 01       		.byte	0x1
 9650 176b F103     		.2byte	0x3f1
 9651 176d 5C050000 		.4byte	0x55c
 9652 1771 02       		.uleb128 0x2
 9653 1772 91       		.byte	0x91
 9654 1773 74       		.sleb128 -12
 9655 1774 12       		.uleb128 0x12
 9656 1775 4F000000 		.4byte	.LASF185
 9657 1779 01       		.byte	0x1
 9658 177a F103     		.2byte	0x3f1
 9659 177c A2000000 		.4byte	0xa2
 9660 1780 02       		.uleb128 0x2
 9661 1781 91       		.byte	0x91
 9662 1782 72       		.sleb128 -14
 9663 1783 00       		.byte	0
 9664 1784 16       		.uleb128 0x16
 9665 1785 AE010000 		.4byte	.LASF201
 9666 1789 01       		.byte	0x1
 9667 178a DE03     		.2byte	0x3de
 9668 178c 0E0B0000 		.4byte	.LFB82
 9669 1790 22000000 		.4byte	.LFE82-.LFB82
 9670 1794 01       		.uleb128 0x1
 9671 1795 9C       		.byte	0x9c
 9672 1796 AA170000 		.4byte	0x17aa
 9673 179a 12       		.uleb128 0x12
 9674 179b F6050000 		.4byte	.LASF87
 9675 179f 01       		.byte	0x1
 9676 17a0 DE03     		.2byte	0x3de
 9677 17a2 5C050000 		.4byte	0x55c
 9678 17a6 02       		.uleb128 0x2
 9679 17a7 91       		.byte	0x91
 9680 17a8 74       		.sleb128 -12
 9681 17a9 00       		.byte	0
 9682 17aa 16       		.uleb128 0x16
 9683 17ab 3F000000 		.4byte	.LASF202
 9684 17af 01       		.byte	0x1
 9685 17b0 C503     		.2byte	0x3c5
 9686 17b2 C80A0000 		.4byte	.LFB81
 9687 17b6 46000000 		.4byte	.LFE81-.LFB81
 9688 17ba 01       		.uleb128 0x1
 9689 17bb 9C       		.byte	0x9c
 9690 17bc EE170000 		.4byte	0x17ee
 9691 17c0 12       		.uleb128 0x12
 9692 17c1 F6050000 		.4byte	.LASF87
 9693 17c5 01       		.byte	0x1
 9694 17c6 C503     		.2byte	0x3c5
 9695 17c8 5C050000 		.4byte	0x55c
 9696 17cc 02       		.uleb128 0x2
 9697 17cd 91       		.byte	0x91
 9698 17ce 74       		.sleb128 -12
 9699 17cf 12       		.uleb128 0x12
 9700 17d0 B9060000 		.4byte	.LASF203
 9701 17d4 01       		.byte	0x1
ARM GAS  /tmp/ccRayNMu.s 			page 223


 9702 17d5 C503     		.2byte	0x3c5
 9703 17d7 A2000000 		.4byte	0xa2
 9704 17db 02       		.uleb128 0x2
 9705 17dc 91       		.byte	0x91
 9706 17dd 72       		.sleb128 -14
 9707 17de 12       		.uleb128 0x12
 9708 17df 0B000000 		.4byte	.LASF138
 9709 17e3 01       		.byte	0x1
 9710 17e4 C503     		.2byte	0x3c5
 9711 17e6 37010000 		.4byte	0x137
 9712 17ea 02       		.uleb128 0x2
 9713 17eb 91       		.byte	0x91
 9714 17ec 71       		.sleb128 -15
 9715 17ed 00       		.byte	0
 9716 17ee 16       		.uleb128 0x16
 9717 17ef 53080000 		.4byte	.LASF204
 9718 17f3 01       		.byte	0x1
 9719 17f4 AA03     		.2byte	0x3aa
 9720 17f6 A00A0000 		.4byte	.LFB80
 9721 17fa 28000000 		.4byte	.LFE80-.LFB80
 9722 17fe 01       		.uleb128 0x1
 9723 17ff 9C       		.byte	0x9c
 9724 1800 32180000 		.4byte	0x1832
 9725 1804 12       		.uleb128 0x12
 9726 1805 F6050000 		.4byte	.LASF87
 9727 1809 01       		.byte	0x1
 9728 180a AA03     		.2byte	0x3aa
 9729 180c 5C050000 		.4byte	0x55c
 9730 1810 02       		.uleb128 0x2
 9731 1811 91       		.byte	0x91
 9732 1812 74       		.sleb128 -12
 9733 1813 12       		.uleb128 0x12
 9734 1814 EC070000 		.4byte	.LASF205
 9735 1818 01       		.byte	0x1
 9736 1819 AA03     		.2byte	0x3aa
 9737 181b A2000000 		.4byte	0xa2
 9738 181f 02       		.uleb128 0x2
 9739 1820 91       		.byte	0x91
 9740 1821 72       		.sleb128 -14
 9741 1822 12       		.uleb128 0x12
 9742 1823 7C040000 		.4byte	.LASF206
 9743 1827 01       		.byte	0x1
 9744 1828 AA03     		.2byte	0x3aa
 9745 182a A2000000 		.4byte	0xa2
 9746 182e 02       		.uleb128 0x2
 9747 182f 91       		.byte	0x91
 9748 1830 70       		.sleb128 -16
 9749 1831 00       		.byte	0
 9750 1832 16       		.uleb128 0x16
 9751 1833 43020000 		.4byte	.LASF207
 9752 1837 01       		.byte	0x1
 9753 1838 8E03     		.2byte	0x38e
 9754 183a 840A0000 		.4byte	.LFB79
 9755 183e 1C000000 		.4byte	.LFE79-.LFB79
 9756 1842 01       		.uleb128 0x1
 9757 1843 9C       		.byte	0x9c
 9758 1844 67180000 		.4byte	0x1867
ARM GAS  /tmp/ccRayNMu.s 			page 224


 9759 1848 12       		.uleb128 0x12
 9760 1849 F6050000 		.4byte	.LASF87
 9761 184d 01       		.byte	0x1
 9762 184e 8E03     		.2byte	0x38e
 9763 1850 5C050000 		.4byte	0x55c
 9764 1854 02       		.uleb128 0x2
 9765 1855 91       		.byte	0x91
 9766 1856 74       		.sleb128 -12
 9767 1857 12       		.uleb128 0x12
 9768 1858 9F080000 		.4byte	.LASF208
 9769 185c 01       		.byte	0x1
 9770 185d 8E03     		.2byte	0x38e
 9771 185f A2000000 		.4byte	0xa2
 9772 1863 02       		.uleb128 0x2
 9773 1864 91       		.byte	0x91
 9774 1865 72       		.sleb128 -14
 9775 1866 00       		.byte	0
 9776 1867 16       		.uleb128 0x16
 9777 1868 5B090000 		.4byte	.LASF209
 9778 186c 01       		.byte	0x1
 9779 186d 6903     		.2byte	0x369
 9780 186f 3E0A0000 		.4byte	.LFB78
 9781 1873 46000000 		.4byte	.LFE78-.LFB78
 9782 1877 01       		.uleb128 0x1
 9783 1878 9C       		.byte	0x9c
 9784 1879 AB180000 		.4byte	0x18ab
 9785 187d 12       		.uleb128 0x12
 9786 187e F6050000 		.4byte	.LASF87
 9787 1882 01       		.byte	0x1
 9788 1883 6903     		.2byte	0x369
 9789 1885 5C050000 		.4byte	0x55c
 9790 1889 02       		.uleb128 0x2
 9791 188a 91       		.byte	0x91
 9792 188b 74       		.sleb128 -12
 9793 188c 12       		.uleb128 0x12
 9794 188d 0C0A0000 		.4byte	.LASF95
 9795 1891 01       		.byte	0x1
 9796 1892 6903     		.2byte	0x369
 9797 1894 A2000000 		.4byte	0xa2
 9798 1898 02       		.uleb128 0x2
 9799 1899 91       		.byte	0x91
 9800 189a 72       		.sleb128 -14
 9801 189b 12       		.uleb128 0x12
 9802 189c 0B000000 		.4byte	.LASF138
 9803 18a0 01       		.byte	0x1
 9804 18a1 6903     		.2byte	0x369
 9805 18a3 37010000 		.4byte	0x137
 9806 18a7 02       		.uleb128 0x2
 9807 18a8 91       		.byte	0x91
 9808 18a9 71       		.sleb128 -15
 9809 18aa 00       		.byte	0
 9810 18ab 16       		.uleb128 0x16
 9811 18ac 2F0D0000 		.4byte	.LASF210
 9812 18b0 01       		.byte	0x1
 9813 18b1 4003     		.2byte	0x340
 9814 18b3 F4090000 		.4byte	.LFB77
 9815 18b7 4A000000 		.4byte	.LFE77-.LFB77
ARM GAS  /tmp/ccRayNMu.s 			page 225


 9816 18bb 01       		.uleb128 0x1
 9817 18bc 9C       		.byte	0x9c
 9818 18bd E0180000 		.4byte	0x18e0
 9819 18c1 12       		.uleb128 0x12
 9820 18c2 F6050000 		.4byte	.LASF87
 9821 18c6 01       		.byte	0x1
 9822 18c7 4003     		.2byte	0x340
 9823 18c9 5C050000 		.4byte	0x55c
 9824 18cd 02       		.uleb128 0x2
 9825 18ce 91       		.byte	0x91
 9826 18cf 74       		.sleb128 -12
 9827 18d0 12       		.uleb128 0x12
 9828 18d1 0B000000 		.4byte	.LASF138
 9829 18d5 01       		.byte	0x1
 9830 18d6 4003     		.2byte	0x340
 9831 18d8 37010000 		.4byte	0x137
 9832 18dc 02       		.uleb128 0x2
 9833 18dd 91       		.byte	0x91
 9834 18de 73       		.sleb128 -13
 9835 18df 00       		.byte	0
 9836 18e0 16       		.uleb128 0x16
 9837 18e1 CE0A0000 		.4byte	.LASF211
 9838 18e5 01       		.byte	0x1
 9839 18e6 2703     		.2byte	0x327
 9840 18e8 B6090000 		.4byte	.LFB76
 9841 18ec 3E000000 		.4byte	.LFE76-.LFB76
 9842 18f0 01       		.uleb128 0x1
 9843 18f1 9C       		.byte	0x9c
 9844 18f2 15190000 		.4byte	0x1915
 9845 18f6 12       		.uleb128 0x12
 9846 18f7 F6050000 		.4byte	.LASF87
 9847 18fb 01       		.byte	0x1
 9848 18fc 2703     		.2byte	0x327
 9849 18fe 5C050000 		.4byte	0x55c
 9850 1902 02       		.uleb128 0x2
 9851 1903 91       		.byte	0x91
 9852 1904 74       		.sleb128 -12
 9853 1905 12       		.uleb128 0x12
 9854 1906 0B000000 		.4byte	.LASF138
 9855 190a 01       		.byte	0x1
 9856 190b 2703     		.2byte	0x327
 9857 190d 37010000 		.4byte	0x137
 9858 1911 02       		.uleb128 0x2
 9859 1912 91       		.byte	0x91
 9860 1913 73       		.sleb128 -13
 9861 1914 00       		.byte	0
 9862 1915 16       		.uleb128 0x16
 9863 1916 17070000 		.4byte	.LASF212
 9864 191a 01       		.byte	0x1
 9865 191b 1403     		.2byte	0x314
 9866 191d 7A090000 		.4byte	.LFB75
 9867 1921 3C000000 		.4byte	.LFE75-.LFB75
 9868 1925 01       		.uleb128 0x1
 9869 1926 9C       		.byte	0x9c
 9870 1927 3B190000 		.4byte	0x193b
 9871 192b 12       		.uleb128 0x12
 9872 192c 470A0000 		.4byte	.LASF213
ARM GAS  /tmp/ccRayNMu.s 			page 226


 9873 1930 01       		.byte	0x1
 9874 1931 1403     		.2byte	0x314
 9875 1933 3B190000 		.4byte	0x193b
 9876 1937 02       		.uleb128 0x2
 9877 1938 91       		.byte	0x91
 9878 1939 74       		.sleb128 -12
 9879 193a 00       		.byte	0
 9880 193b 15       		.uleb128 0x15
 9881 193c 04       		.byte	0x4
 9882 193d D1040000 		.4byte	0x4d1
 9883 1941 16       		.uleb128 0x16
 9884 1942 BB030000 		.4byte	.LASF214
 9885 1946 01       		.byte	0x1
 9886 1947 0403     		.2byte	0x304
 9887 1949 4A090000 		.4byte	.LFB74
 9888 194d 30000000 		.4byte	.LFE74-.LFB74
 9889 1951 01       		.uleb128 0x1
 9890 1952 9C       		.byte	0x9c
 9891 1953 67190000 		.4byte	0x1967
 9892 1957 12       		.uleb128 0x12
 9893 1958 2A070000 		.4byte	.LASF215
 9894 195c 01       		.byte	0x1
 9895 195d 0403     		.2byte	0x304
 9896 195f 67190000 		.4byte	0x1967
 9897 1963 02       		.uleb128 0x2
 9898 1964 91       		.byte	0x91
 9899 1965 74       		.sleb128 -12
 9900 1966 00       		.byte	0
 9901 1967 15       		.uleb128 0x15
 9902 1968 04       		.byte	0x4
 9903 1969 69040000 		.4byte	0x469
 9904 196d 16       		.uleb128 0x16
 9905 196e C7060000 		.4byte	.LASF216
 9906 1972 01       		.byte	0x1
 9907 1973 F102     		.2byte	0x2f1
 9908 1975 08090000 		.4byte	.LFB73
 9909 1979 42000000 		.4byte	.LFE73-.LFB73
 9910 197d 01       		.uleb128 0x1
 9911 197e 9C       		.byte	0x9c
 9912 197f 93190000 		.4byte	0x1993
 9913 1983 12       		.uleb128 0x12
 9914 1984 D2050000 		.4byte	.LASF217
 9915 1988 01       		.byte	0x1
 9916 1989 F102     		.2byte	0x2f1
 9917 198b 93190000 		.4byte	0x1993
 9918 198f 02       		.uleb128 0x2
 9919 1990 91       		.byte	0x91
 9920 1991 74       		.sleb128 -12
 9921 1992 00       		.byte	0
 9922 1993 15       		.uleb128 0x15
 9923 1994 04       		.byte	0x4
 9924 1995 19040000 		.4byte	0x419
 9925 1999 16       		.uleb128 0x16
 9926 199a 43050000 		.4byte	.LASF218
 9927 199e 01       		.byte	0x1
 9928 199f E102     		.2byte	0x2e1
 9929 19a1 D6080000 		.4byte	.LFB72
ARM GAS  /tmp/ccRayNMu.s 			page 227


 9930 19a5 32000000 		.4byte	.LFE72-.LFB72
 9931 19a9 01       		.uleb128 0x1
 9932 19aa 9C       		.byte	0x9c
 9933 19ab BF190000 		.4byte	0x19bf
 9934 19af 12       		.uleb128 0x12
 9935 19b0 3C080000 		.4byte	.LASF219
 9936 19b4 01       		.byte	0x1
 9937 19b5 E102     		.2byte	0x2e1
 9938 19b7 BF190000 		.4byte	0x19bf
 9939 19bb 02       		.uleb128 0x2
 9940 19bc 91       		.byte	0x91
 9941 19bd 74       		.sleb128 -12
 9942 19be 00       		.byte	0
 9943 19bf 15       		.uleb128 0x15
 9944 19c0 04       		.byte	0x4
 9945 19c1 A5030000 		.4byte	0x3a5
 9946 19c5 16       		.uleb128 0x16
 9947 19c6 68090000 		.4byte	.LASF220
 9948 19ca 01       		.byte	0x1
 9949 19cb C902     		.2byte	0x2c9
 9950 19cd 88080000 		.4byte	.LFB71
 9951 19d1 4E000000 		.4byte	.LFE71-.LFB71
 9952 19d5 01       		.uleb128 0x1
 9953 19d6 9C       		.byte	0x9c
 9954 19d7 FA190000 		.4byte	0x19fa
 9955 19db 12       		.uleb128 0x12
 9956 19dc F6050000 		.4byte	.LASF87
 9957 19e0 01       		.byte	0x1
 9958 19e1 C902     		.2byte	0x2c9
 9959 19e3 5C050000 		.4byte	0x55c
 9960 19e7 02       		.uleb128 0x2
 9961 19e8 91       		.byte	0x91
 9962 19e9 74       		.sleb128 -12
 9963 19ea 12       		.uleb128 0x12
 9964 19eb 470A0000 		.4byte	.LASF213
 9965 19ef 01       		.byte	0x1
 9966 19f0 C902     		.2byte	0x2c9
 9967 19f2 3B190000 		.4byte	0x193b
 9968 19f6 02       		.uleb128 0x2
 9969 19f7 91       		.byte	0x91
 9970 19f8 70       		.sleb128 -16
 9971 19f9 00       		.byte	0
 9972 19fa 18       		.uleb128 0x18
 9973 19fb 9F060000 		.4byte	.LASF221
 9974 19ff 01       		.byte	0x1
 9975 1a00 8F02     		.2byte	0x28f
 9976 1a02 D0070000 		.4byte	.LFB70
 9977 1a06 B8000000 		.4byte	.LFE70-.LFB70
 9978 1a0a 01       		.uleb128 0x1
 9979 1a0b 9C       		.byte	0x9c
 9980 1a0c 4D1A0000 		.4byte	0x1a4d
 9981 1a10 12       		.uleb128 0x12
 9982 1a11 F6050000 		.4byte	.LASF87
 9983 1a15 01       		.byte	0x1
 9984 1a16 8F02     		.2byte	0x28f
 9985 1a18 5C050000 		.4byte	0x55c
 9986 1a1c 02       		.uleb128 0x2
ARM GAS  /tmp/ccRayNMu.s 			page 228


 9987 1a1d 91       		.byte	0x91
 9988 1a1e 6C       		.sleb128 -20
 9989 1a1f 12       		.uleb128 0x12
 9990 1a20 2A070000 		.4byte	.LASF215
 9991 1a24 01       		.byte	0x1
 9992 1a25 8F02     		.2byte	0x28f
 9993 1a27 67190000 		.4byte	0x1967
 9994 1a2b 02       		.uleb128 0x2
 9995 1a2c 91       		.byte	0x91
 9996 1a2d 68       		.sleb128 -24
 9997 1a2e 13       		.uleb128 0x13
 9998 1a2f 08040000 		.4byte	.LASF222
 9999 1a33 01       		.byte	0x1
 10000 1a34 9102     		.2byte	0x291
 10001 1a36 A2000000 		.4byte	0xa2
 10002 1a3a 02       		.uleb128 0x2
 10003 1a3b 91       		.byte	0x91
 10004 1a3c 76       		.sleb128 -10
 10005 1a3d 13       		.uleb128 0x13
 10006 1a3e F8070000 		.4byte	.LASF223
 10007 1a42 01       		.byte	0x1
 10008 1a43 9202     		.2byte	0x292
 10009 1a45 A2000000 		.4byte	0xa2
 10010 1a49 02       		.uleb128 0x2
 10011 1a4a 91       		.byte	0x91
 10012 1a4b 74       		.sleb128 -12
 10013 1a4c 00       		.byte	0
 10014 1a4d 18       		.uleb128 0x18
 10015 1a4e 5C0B0000 		.4byte	.LASF224
 10016 1a52 01       		.byte	0x1
 10017 1a53 4C02     		.2byte	0x24c
 10018 1a55 28070000 		.4byte	.LFB69
 10019 1a59 A8000000 		.4byte	.LFE69-.LFB69
 10020 1a5d 01       		.uleb128 0x1
 10021 1a5e 9C       		.byte	0x9c
 10022 1a5f 821A0000 		.4byte	0x1a82
 10023 1a63 12       		.uleb128 0x12
 10024 1a64 F6050000 		.4byte	.LASF87
 10025 1a68 01       		.byte	0x1
 10026 1a69 4C02     		.2byte	0x24c
 10027 1a6b 5C050000 		.4byte	0x55c
 10028 1a6f 02       		.uleb128 0x2
 10029 1a70 91       		.byte	0x91
 10030 1a71 74       		.sleb128 -12
 10031 1a72 12       		.uleb128 0x12
 10032 1a73 2A070000 		.4byte	.LASF215
 10033 1a77 01       		.byte	0x1
 10034 1a78 4C02     		.2byte	0x24c
 10035 1a7a 67190000 		.4byte	0x1967
 10036 1a7e 02       		.uleb128 0x2
 10037 1a7f 91       		.byte	0x91
 10038 1a80 70       		.sleb128 -16
 10039 1a81 00       		.byte	0
 10040 1a82 16       		.uleb128 0x16
 10041 1a83 500B0000 		.4byte	.LASF225
 10042 1a87 01       		.byte	0x1
 10043 1a88 0C02     		.2byte	0x20c
ARM GAS  /tmp/ccRayNMu.s 			page 229


 10044 1a8a 58060000 		.4byte	.LFB68
 10045 1a8e D0000000 		.4byte	.LFE68-.LFB68
 10046 1a92 01       		.uleb128 0x1
 10047 1a93 9C       		.byte	0x9c
 10048 1a94 E41A0000 		.4byte	0x1ae4
 10049 1a98 12       		.uleb128 0x12
 10050 1a99 F6050000 		.4byte	.LASF87
 10051 1a9d 01       		.byte	0x1
 10052 1a9e 0C02     		.2byte	0x20c
 10053 1aa0 5C050000 		.4byte	0x55c
 10054 1aa4 02       		.uleb128 0x2
 10055 1aa5 91       		.byte	0x91
 10056 1aa6 6C       		.sleb128 -20
 10057 1aa7 12       		.uleb128 0x12
 10058 1aa8 D2050000 		.4byte	.LASF217
 10059 1aac 01       		.byte	0x1
 10060 1aad 0C02     		.2byte	0x20c
 10061 1aaf 93190000 		.4byte	0x1993
 10062 1ab3 02       		.uleb128 0x2
 10063 1ab4 91       		.byte	0x91
 10064 1ab5 68       		.sleb128 -24
 10065 1ab6 13       		.uleb128 0x13
 10066 1ab7 7C030000 		.4byte	.LASF226
 10067 1abb 01       		.byte	0x1
 10068 1abc 0E02     		.2byte	0x20e
 10069 1abe A2000000 		.4byte	0xa2
 10070 1ac2 02       		.uleb128 0x2
 10071 1ac3 91       		.byte	0x91
 10072 1ac4 74       		.sleb128 -12
 10073 1ac5 13       		.uleb128 0x13
 10074 1ac6 CB040000 		.4byte	.LASF89
 10075 1aca 01       		.byte	0x1
 10076 1acb 0E02     		.2byte	0x20e
 10077 1acd A2000000 		.4byte	0xa2
 10078 1ad1 02       		.uleb128 0x2
 10079 1ad2 91       		.byte	0x91
 10080 1ad3 72       		.sleb128 -14
 10081 1ad4 13       		.uleb128 0x13
 10082 1ad5 6C010000 		.4byte	.LASF227
 10083 1ad9 01       		.byte	0x1
 10084 1ada 0E02     		.2byte	0x20e
 10085 1adc A2000000 		.4byte	0xa2
 10086 1ae0 02       		.uleb128 0x2
 10087 1ae1 91       		.byte	0x91
 10088 1ae2 76       		.sleb128 -10
 10089 1ae3 00       		.byte	0
 10090 1ae4 16       		.uleb128 0x16
 10091 1ae5 FC030000 		.4byte	.LASF228
 10092 1ae9 01       		.byte	0x1
 10093 1aea BD01     		.2byte	0x1bd
 10094 1aec 4C050000 		.4byte	.LFB67
 10095 1af0 0C010000 		.4byte	.LFE67-.LFB67
 10096 1af4 01       		.uleb128 0x1
 10097 1af5 9C       		.byte	0x9c
 10098 1af6 461B0000 		.4byte	0x1b46
 10099 1afa 12       		.uleb128 0x12
 10100 1afb F6050000 		.4byte	.LASF87
ARM GAS  /tmp/ccRayNMu.s 			page 230


 10101 1aff 01       		.byte	0x1
 10102 1b00 BD01     		.2byte	0x1bd
 10103 1b02 5C050000 		.4byte	0x55c
 10104 1b06 02       		.uleb128 0x2
 10105 1b07 91       		.byte	0x91
 10106 1b08 6C       		.sleb128 -20
 10107 1b09 12       		.uleb128 0x12
 10108 1b0a D2050000 		.4byte	.LASF217
 10109 1b0e 01       		.byte	0x1
 10110 1b0f BD01     		.2byte	0x1bd
 10111 1b11 93190000 		.4byte	0x1993
 10112 1b15 02       		.uleb128 0x2
 10113 1b16 91       		.byte	0x91
 10114 1b17 68       		.sleb128 -24
 10115 1b18 13       		.uleb128 0x13
 10116 1b19 7C030000 		.4byte	.LASF226
 10117 1b1d 01       		.byte	0x1
 10118 1b1e BF01     		.2byte	0x1bf
 10119 1b20 A2000000 		.4byte	0xa2
 10120 1b24 02       		.uleb128 0x2
 10121 1b25 91       		.byte	0x91
 10122 1b26 72       		.sleb128 -14
 10123 1b27 13       		.uleb128 0x13
 10124 1b28 CB040000 		.4byte	.LASF89
 10125 1b2c 01       		.byte	0x1
 10126 1b2d BF01     		.2byte	0x1bf
 10127 1b2f A2000000 		.4byte	0xa2
 10128 1b33 02       		.uleb128 0x2
 10129 1b34 91       		.byte	0x91
 10130 1b35 76       		.sleb128 -10
 10131 1b36 13       		.uleb128 0x13
 10132 1b37 6C010000 		.4byte	.LASF227
 10133 1b3b 01       		.byte	0x1
 10134 1b3c BF01     		.2byte	0x1bf
 10135 1b3e A2000000 		.4byte	0xa2
 10136 1b42 02       		.uleb128 0x2
 10137 1b43 91       		.byte	0x91
 10138 1b44 74       		.sleb128 -12
 10139 1b45 00       		.byte	0
 10140 1b46 16       		.uleb128 0x16
 10141 1b47 EF0A0000 		.4byte	.LASF229
 10142 1b4b 01       		.byte	0x1
 10143 1b4c 6B01     		.2byte	0x16b
 10144 1b4e 3C040000 		.4byte	.LFB66
 10145 1b52 10010000 		.4byte	.LFE66-.LFB66
 10146 1b56 01       		.uleb128 0x1
 10147 1b57 9C       		.byte	0x9c
 10148 1b58 A81B0000 		.4byte	0x1ba8
 10149 1b5c 12       		.uleb128 0x12
 10150 1b5d F6050000 		.4byte	.LASF87
 10151 1b61 01       		.byte	0x1
 10152 1b62 6B01     		.2byte	0x16b
 10153 1b64 5C050000 		.4byte	0x55c
 10154 1b68 02       		.uleb128 0x2
 10155 1b69 91       		.byte	0x91
 10156 1b6a 6C       		.sleb128 -20
 10157 1b6b 12       		.uleb128 0x12
ARM GAS  /tmp/ccRayNMu.s 			page 231


 10158 1b6c D2050000 		.4byte	.LASF217
 10159 1b70 01       		.byte	0x1
 10160 1b71 6B01     		.2byte	0x16b
 10161 1b73 93190000 		.4byte	0x1993
 10162 1b77 02       		.uleb128 0x2
 10163 1b78 91       		.byte	0x91
 10164 1b79 68       		.sleb128 -24
 10165 1b7a 13       		.uleb128 0x13
 10166 1b7b 7C030000 		.4byte	.LASF226
 10167 1b7f 01       		.byte	0x1
 10168 1b80 6D01     		.2byte	0x16d
 10169 1b82 A2000000 		.4byte	0xa2
 10170 1b86 02       		.uleb128 0x2
 10171 1b87 91       		.byte	0x91
 10172 1b88 72       		.sleb128 -14
 10173 1b89 13       		.uleb128 0x13
 10174 1b8a CB040000 		.4byte	.LASF89
 10175 1b8e 01       		.byte	0x1
 10176 1b8f 6D01     		.2byte	0x16d
 10177 1b91 A2000000 		.4byte	0xa2
 10178 1b95 02       		.uleb128 0x2
 10179 1b96 91       		.byte	0x91
 10180 1b97 76       		.sleb128 -10
 10181 1b98 13       		.uleb128 0x13
 10182 1b99 6C010000 		.4byte	.LASF227
 10183 1b9d 01       		.byte	0x1
 10184 1b9e 6D01     		.2byte	0x16d
 10185 1ba0 A2000000 		.4byte	0xa2
 10186 1ba4 02       		.uleb128 0x2
 10187 1ba5 91       		.byte	0x91
 10188 1ba6 74       		.sleb128 -12
 10189 1ba7 00       		.byte	0
 10190 1ba8 16       		.uleb128 0x16
 10191 1ba9 B80C0000 		.4byte	.LASF230
 10192 1bad 01       		.byte	0x1
 10193 1bae 1801     		.2byte	0x118
 10194 1bb0 24030000 		.4byte	.LFB65
 10195 1bb4 18010000 		.4byte	.LFE65-.LFB65
 10196 1bb8 01       		.uleb128 0x1
 10197 1bb9 9C       		.byte	0x9c
 10198 1bba 0A1C0000 		.4byte	0x1c0a
 10199 1bbe 12       		.uleb128 0x12
 10200 1bbf F6050000 		.4byte	.LASF87
 10201 1bc3 01       		.byte	0x1
 10202 1bc4 1801     		.2byte	0x118
 10203 1bc6 5C050000 		.4byte	0x55c
 10204 1bca 02       		.uleb128 0x2
 10205 1bcb 91       		.byte	0x91
 10206 1bcc 6C       		.sleb128 -20
 10207 1bcd 12       		.uleb128 0x12
 10208 1bce D2050000 		.4byte	.LASF217
 10209 1bd2 01       		.byte	0x1
 10210 1bd3 1801     		.2byte	0x118
 10211 1bd5 93190000 		.4byte	0x1993
 10212 1bd9 02       		.uleb128 0x2
 10213 1bda 91       		.byte	0x91
 10214 1bdb 68       		.sleb128 -24
ARM GAS  /tmp/ccRayNMu.s 			page 232


 10215 1bdc 13       		.uleb128 0x13
 10216 1bdd 7C030000 		.4byte	.LASF226
 10217 1be1 01       		.byte	0x1
 10218 1be2 1A01     		.2byte	0x11a
 10219 1be4 A2000000 		.4byte	0xa2
 10220 1be8 02       		.uleb128 0x2
 10221 1be9 91       		.byte	0x91
 10222 1bea 72       		.sleb128 -14
 10223 1beb 13       		.uleb128 0x13
 10224 1bec CB040000 		.4byte	.LASF89
 10225 1bf0 01       		.byte	0x1
 10226 1bf1 1A01     		.2byte	0x11a
 10227 1bf3 A2000000 		.4byte	0xa2
 10228 1bf7 02       		.uleb128 0x2
 10229 1bf8 91       		.byte	0x91
 10230 1bf9 76       		.sleb128 -10
 10231 1bfa 13       		.uleb128 0x13
 10232 1bfb 6C010000 		.4byte	.LASF227
 10233 1bff 01       		.byte	0x1
 10234 1c00 1A01     		.2byte	0x11a
 10235 1c02 A2000000 		.4byte	0xa2
 10236 1c06 02       		.uleb128 0x2
 10237 1c07 91       		.byte	0x91
 10238 1c08 74       		.sleb128 -12
 10239 1c09 00       		.byte	0
 10240 1c0a 19       		.uleb128 0x19
 10241 1c0b 130A0000 		.4byte	.LASF231
 10242 1c0f 01       		.byte	0x1
 10243 1c10 E3       		.byte	0xe3
 10244 1c11 2C020000 		.4byte	.LFB64
 10245 1c15 F8000000 		.4byte	.LFE64-.LFB64
 10246 1c19 01       		.uleb128 0x1
 10247 1c1a 9C       		.byte	0x9c
 10248 1c1b 4A1C0000 		.4byte	0x1c4a
 10249 1c1f 1A       		.uleb128 0x1a
 10250 1c20 F6050000 		.4byte	.LASF87
 10251 1c24 01       		.byte	0x1
 10252 1c25 E3       		.byte	0xe3
 10253 1c26 5C050000 		.4byte	0x55c
 10254 1c2a 02       		.uleb128 0x2
 10255 1c2b 91       		.byte	0x91
 10256 1c2c 6C       		.sleb128 -20
 10257 1c2d 1A       		.uleb128 0x1a
 10258 1c2e 3C080000 		.4byte	.LASF219
 10259 1c32 01       		.byte	0x1
 10260 1c33 E3       		.byte	0xe3
 10261 1c34 BF190000 		.4byte	0x19bf
 10262 1c38 02       		.uleb128 0x2
 10263 1c39 91       		.byte	0x91
 10264 1c3a 68       		.sleb128 -24
 10265 1c3b 1B       		.uleb128 0x1b
 10266 1c3c 5D010000 		.4byte	.LASF187
 10267 1c40 01       		.byte	0x1
 10268 1c41 E5       		.byte	0xe5
 10269 1c42 A2000000 		.4byte	0xa2
 10270 1c46 02       		.uleb128 0x2
 10271 1c47 91       		.byte	0x91
ARM GAS  /tmp/ccRayNMu.s 			page 233


 10272 1c48 76       		.sleb128 -10
 10273 1c49 00       		.byte	0
 10274 1c4a 1C       		.uleb128 0x1c
 10275 1c4b 5A0D0000 		.4byte	.LASF235
 10276 1c4f 01       		.byte	0x1
 10277 1c50 7B       		.byte	0x7b
 10278 1c51 00000000 		.4byte	.LFB63
 10279 1c55 2C020000 		.4byte	.LFE63-.LFB63
 10280 1c59 01       		.uleb128 0x1
 10281 1c5a 9C       		.byte	0x9c
 10282 1c5b 1A       		.uleb128 0x1a
 10283 1c5c F6050000 		.4byte	.LASF87
 10284 1c60 01       		.byte	0x1
 10285 1c61 7B       		.byte	0x7b
 10286 1c62 5C050000 		.4byte	0x55c
 10287 1c66 02       		.uleb128 0x2
 10288 1c67 91       		.byte	0x91
 10289 1c68 74       		.sleb128 -12
 10290 1c69 00       		.byte	0
 10291 1c6a 00       		.byte	0
 10292              		.section	.debug_abbrev,"",%progbits
 10293              	.Ldebug_abbrev0:
 10294 0000 01       		.uleb128 0x1
 10295 0001 11       		.uleb128 0x11
 10296 0002 01       		.byte	0x1
 10297 0003 25       		.uleb128 0x25
 10298 0004 0E       		.uleb128 0xe
 10299 0005 13       		.uleb128 0x13
 10300 0006 0B       		.uleb128 0xb
 10301 0007 03       		.uleb128 0x3
 10302 0008 0E       		.uleb128 0xe
 10303 0009 1B       		.uleb128 0x1b
 10304 000a 0E       		.uleb128 0xe
 10305 000b 11       		.uleb128 0x11
 10306 000c 01       		.uleb128 0x1
 10307 000d 12       		.uleb128 0x12
 10308 000e 06       		.uleb128 0x6
 10309 000f 10       		.uleb128 0x10
 10310 0010 17       		.uleb128 0x17
 10311 0011 00       		.byte	0
 10312 0012 00       		.byte	0
 10313 0013 02       		.uleb128 0x2
 10314 0014 24       		.uleb128 0x24
 10315 0015 00       		.byte	0
 10316 0016 0B       		.uleb128 0xb
 10317 0017 0B       		.uleb128 0xb
 10318 0018 3E       		.uleb128 0x3e
 10319 0019 0B       		.uleb128 0xb
 10320 001a 03       		.uleb128 0x3
 10321 001b 0E       		.uleb128 0xe
 10322 001c 00       		.byte	0
 10323 001d 00       		.byte	0
 10324 001e 03       		.uleb128 0x3
 10325 001f 16       		.uleb128 0x16
 10326 0020 00       		.byte	0
 10327 0021 03       		.uleb128 0x3
 10328 0022 0E       		.uleb128 0xe
ARM GAS  /tmp/ccRayNMu.s 			page 234


 10329 0023 3A       		.uleb128 0x3a
 10330 0024 0B       		.uleb128 0xb
 10331 0025 3B       		.uleb128 0x3b
 10332 0026 0B       		.uleb128 0xb
 10333 0027 49       		.uleb128 0x49
 10334 0028 13       		.uleb128 0x13
 10335 0029 00       		.byte	0
 10336 002a 00       		.byte	0
 10337 002b 04       		.uleb128 0x4
 10338 002c 24       		.uleb128 0x24
 10339 002d 00       		.byte	0
 10340 002e 0B       		.uleb128 0xb
 10341 002f 0B       		.uleb128 0xb
 10342 0030 3E       		.uleb128 0x3e
 10343 0031 0B       		.uleb128 0xb
 10344 0032 03       		.uleb128 0x3
 10345 0033 08       		.uleb128 0x8
 10346 0034 00       		.byte	0
 10347 0035 00       		.byte	0
 10348 0036 05       		.uleb128 0x5
 10349 0037 35       		.uleb128 0x35
 10350 0038 00       		.byte	0
 10351 0039 49       		.uleb128 0x49
 10352 003a 13       		.uleb128 0x13
 10353 003b 00       		.byte	0
 10354 003c 00       		.byte	0
 10355 003d 06       		.uleb128 0x6
 10356 003e 34       		.uleb128 0x34
 10357 003f 00       		.byte	0
 10358 0040 03       		.uleb128 0x3
 10359 0041 0E       		.uleb128 0xe
 10360 0042 3A       		.uleb128 0x3a
 10361 0043 0B       		.uleb128 0xb
 10362 0044 3B       		.uleb128 0x3b
 10363 0045 05       		.uleb128 0x5
 10364 0046 49       		.uleb128 0x49
 10365 0047 13       		.uleb128 0x13
 10366 0048 3F       		.uleb128 0x3f
 10367 0049 19       		.uleb128 0x19
 10368 004a 3C       		.uleb128 0x3c
 10369 004b 19       		.uleb128 0x19
 10370 004c 00       		.byte	0
 10371 004d 00       		.byte	0
 10372 004e 07       		.uleb128 0x7
 10373 004f 34       		.uleb128 0x34
 10374 0050 00       		.byte	0
 10375 0051 03       		.uleb128 0x3
 10376 0052 0E       		.uleb128 0xe
 10377 0053 3A       		.uleb128 0x3a
 10378 0054 0B       		.uleb128 0xb
 10379 0055 3B       		.uleb128 0x3b
 10380 0056 0B       		.uleb128 0xb
 10381 0057 49       		.uleb128 0x49
 10382 0058 13       		.uleb128 0x13
 10383 0059 3F       		.uleb128 0x3f
 10384 005a 19       		.uleb128 0x19
 10385 005b 3C       		.uleb128 0x3c
ARM GAS  /tmp/ccRayNMu.s 			page 235


 10386 005c 19       		.uleb128 0x19
 10387 005d 00       		.byte	0
 10388 005e 00       		.byte	0
 10389 005f 08       		.uleb128 0x8
 10390 0060 04       		.uleb128 0x4
 10391 0061 01       		.byte	0x1
 10392 0062 0B       		.uleb128 0xb
 10393 0063 0B       		.uleb128 0xb
 10394 0064 49       		.uleb128 0x49
 10395 0065 13       		.uleb128 0x13
 10396 0066 3A       		.uleb128 0x3a
 10397 0067 0B       		.uleb128 0xb
 10398 0068 3B       		.uleb128 0x3b
 10399 0069 05       		.uleb128 0x5
 10400 006a 01       		.uleb128 0x1
 10401 006b 13       		.uleb128 0x13
 10402 006c 00       		.byte	0
 10403 006d 00       		.byte	0
 10404 006e 09       		.uleb128 0x9
 10405 006f 28       		.uleb128 0x28
 10406 0070 00       		.byte	0
 10407 0071 03       		.uleb128 0x3
 10408 0072 0E       		.uleb128 0xe
 10409 0073 1C       		.uleb128 0x1c
 10410 0074 0B       		.uleb128 0xb
 10411 0075 00       		.byte	0
 10412 0076 00       		.byte	0
 10413 0077 0A       		.uleb128 0xa
 10414 0078 28       		.uleb128 0x28
 10415 0079 00       		.byte	0
 10416 007a 03       		.uleb128 0x3
 10417 007b 08       		.uleb128 0x8
 10418 007c 1C       		.uleb128 0x1c
 10419 007d 0B       		.uleb128 0xb
 10420 007e 00       		.byte	0
 10421 007f 00       		.byte	0
 10422 0080 0B       		.uleb128 0xb
 10423 0081 16       		.uleb128 0x16
 10424 0082 00       		.byte	0
 10425 0083 03       		.uleb128 0x3
 10426 0084 0E       		.uleb128 0xe
 10427 0085 3A       		.uleb128 0x3a
 10428 0086 0B       		.uleb128 0xb
 10429 0087 3B       		.uleb128 0x3b
 10430 0088 05       		.uleb128 0x5
 10431 0089 49       		.uleb128 0x49
 10432 008a 13       		.uleb128 0x13
 10433 008b 00       		.byte	0
 10434 008c 00       		.byte	0
 10435 008d 0C       		.uleb128 0xc
 10436 008e 13       		.uleb128 0x13
 10437 008f 01       		.byte	0x1
 10438 0090 0B       		.uleb128 0xb
 10439 0091 0B       		.uleb128 0xb
 10440 0092 3A       		.uleb128 0x3a
 10441 0093 0B       		.uleb128 0xb
 10442 0094 3B       		.uleb128 0x3b
ARM GAS  /tmp/ccRayNMu.s 			page 236


 10443 0095 05       		.uleb128 0x5
 10444 0096 01       		.uleb128 0x1
 10445 0097 13       		.uleb128 0x13
 10446 0098 00       		.byte	0
 10447 0099 00       		.byte	0
 10448 009a 0D       		.uleb128 0xd
 10449 009b 0D       		.uleb128 0xd
 10450 009c 00       		.byte	0
 10451 009d 03       		.uleb128 0x3
 10452 009e 08       		.uleb128 0x8
 10453 009f 3A       		.uleb128 0x3a
 10454 00a0 0B       		.uleb128 0xb
 10455 00a1 3B       		.uleb128 0x3b
 10456 00a2 05       		.uleb128 0x5
 10457 00a3 49       		.uleb128 0x49
 10458 00a4 13       		.uleb128 0x13
 10459 00a5 38       		.uleb128 0x38
 10460 00a6 0B       		.uleb128 0xb
 10461 00a7 00       		.byte	0
 10462 00a8 00       		.byte	0
 10463 00a9 0E       		.uleb128 0xe
 10464 00aa 0D       		.uleb128 0xd
 10465 00ab 00       		.byte	0
 10466 00ac 03       		.uleb128 0x3
 10467 00ad 0E       		.uleb128 0xe
 10468 00ae 3A       		.uleb128 0x3a
 10469 00af 0B       		.uleb128 0xb
 10470 00b0 3B       		.uleb128 0x3b
 10471 00b1 05       		.uleb128 0x5
 10472 00b2 49       		.uleb128 0x49
 10473 00b3 13       		.uleb128 0x13
 10474 00b4 38       		.uleb128 0x38
 10475 00b5 0B       		.uleb128 0xb
 10476 00b6 00       		.byte	0
 10477 00b7 00       		.byte	0
 10478 00b8 0F       		.uleb128 0xf
 10479 00b9 13       		.uleb128 0x13
 10480 00ba 01       		.byte	0x1
 10481 00bb 0B       		.uleb128 0xb
 10482 00bc 0B       		.uleb128 0xb
 10483 00bd 3A       		.uleb128 0x3a
 10484 00be 0B       		.uleb128 0xb
 10485 00bf 3B       		.uleb128 0x3b
 10486 00c0 0B       		.uleb128 0xb
 10487 00c1 01       		.uleb128 0x1
 10488 00c2 13       		.uleb128 0x13
 10489 00c3 00       		.byte	0
 10490 00c4 00       		.byte	0
 10491 00c5 10       		.uleb128 0x10
 10492 00c6 0D       		.uleb128 0xd
 10493 00c7 00       		.byte	0
 10494 00c8 03       		.uleb128 0x3
 10495 00c9 0E       		.uleb128 0xe
 10496 00ca 3A       		.uleb128 0x3a
 10497 00cb 0B       		.uleb128 0xb
 10498 00cc 3B       		.uleb128 0x3b
 10499 00cd 0B       		.uleb128 0xb
ARM GAS  /tmp/ccRayNMu.s 			page 237


 10500 00ce 49       		.uleb128 0x49
 10501 00cf 13       		.uleb128 0x13
 10502 00d0 38       		.uleb128 0x38
 10503 00d1 0B       		.uleb128 0xb
 10504 00d2 00       		.byte	0
 10505 00d3 00       		.byte	0
 10506 00d4 11       		.uleb128 0x11
 10507 00d5 2E       		.uleb128 0x2e
 10508 00d6 01       		.byte	0x1
 10509 00d7 03       		.uleb128 0x3
 10510 00d8 0E       		.uleb128 0xe
 10511 00d9 3A       		.uleb128 0x3a
 10512 00da 0B       		.uleb128 0xb
 10513 00db 3B       		.uleb128 0x3b
 10514 00dc 05       		.uleb128 0x5
 10515 00dd 27       		.uleb128 0x27
 10516 00de 19       		.uleb128 0x19
 10517 00df 11       		.uleb128 0x11
 10518 00e0 01       		.uleb128 0x1
 10519 00e1 12       		.uleb128 0x12
 10520 00e2 06       		.uleb128 0x6
 10521 00e3 40       		.uleb128 0x40
 10522 00e4 18       		.uleb128 0x18
 10523 00e5 9742     		.uleb128 0x2117
 10524 00e7 19       		.uleb128 0x19
 10525 00e8 01       		.uleb128 0x1
 10526 00e9 13       		.uleb128 0x13
 10527 00ea 00       		.byte	0
 10528 00eb 00       		.byte	0
 10529 00ec 12       		.uleb128 0x12
 10530 00ed 05       		.uleb128 0x5
 10531 00ee 00       		.byte	0
 10532 00ef 03       		.uleb128 0x3
 10533 00f0 0E       		.uleb128 0xe
 10534 00f1 3A       		.uleb128 0x3a
 10535 00f2 0B       		.uleb128 0xb
 10536 00f3 3B       		.uleb128 0x3b
 10537 00f4 05       		.uleb128 0x5
 10538 00f5 49       		.uleb128 0x49
 10539 00f6 13       		.uleb128 0x13
 10540 00f7 02       		.uleb128 0x2
 10541 00f8 18       		.uleb128 0x18
 10542 00f9 00       		.byte	0
 10543 00fa 00       		.byte	0
 10544 00fb 13       		.uleb128 0x13
 10545 00fc 34       		.uleb128 0x34
 10546 00fd 00       		.byte	0
 10547 00fe 03       		.uleb128 0x3
 10548 00ff 0E       		.uleb128 0xe
 10549 0100 3A       		.uleb128 0x3a
 10550 0101 0B       		.uleb128 0xb
 10551 0102 3B       		.uleb128 0x3b
 10552 0103 05       		.uleb128 0x5
 10553 0104 49       		.uleb128 0x49
 10554 0105 13       		.uleb128 0x13
 10555 0106 02       		.uleb128 0x2
 10556 0107 18       		.uleb128 0x18
ARM GAS  /tmp/ccRayNMu.s 			page 238


 10557 0108 00       		.byte	0
 10558 0109 00       		.byte	0
 10559 010a 14       		.uleb128 0x14
 10560 010b 34       		.uleb128 0x34
 10561 010c 00       		.byte	0
 10562 010d 03       		.uleb128 0x3
 10563 010e 08       		.uleb128 0x8
 10564 010f 3A       		.uleb128 0x3a
 10565 0110 0B       		.uleb128 0xb
 10566 0111 3B       		.uleb128 0x3b
 10567 0112 05       		.uleb128 0x5
 10568 0113 49       		.uleb128 0x49
 10569 0114 13       		.uleb128 0x13
 10570 0115 02       		.uleb128 0x2
 10571 0116 18       		.uleb128 0x18
 10572 0117 00       		.byte	0
 10573 0118 00       		.byte	0
 10574 0119 15       		.uleb128 0x15
 10575 011a 0F       		.uleb128 0xf
 10576 011b 00       		.byte	0
 10577 011c 0B       		.uleb128 0xb
 10578 011d 0B       		.uleb128 0xb
 10579 011e 49       		.uleb128 0x49
 10580 011f 13       		.uleb128 0x13
 10581 0120 00       		.byte	0
 10582 0121 00       		.byte	0
 10583 0122 16       		.uleb128 0x16
 10584 0123 2E       		.uleb128 0x2e
 10585 0124 01       		.byte	0x1
 10586 0125 3F       		.uleb128 0x3f
 10587 0126 19       		.uleb128 0x19
 10588 0127 03       		.uleb128 0x3
 10589 0128 0E       		.uleb128 0xe
 10590 0129 3A       		.uleb128 0x3a
 10591 012a 0B       		.uleb128 0xb
 10592 012b 3B       		.uleb128 0x3b
 10593 012c 05       		.uleb128 0x5
 10594 012d 27       		.uleb128 0x27
 10595 012e 19       		.uleb128 0x19
 10596 012f 11       		.uleb128 0x11
 10597 0130 01       		.uleb128 0x1
 10598 0131 12       		.uleb128 0x12
 10599 0132 06       		.uleb128 0x6
 10600 0133 40       		.uleb128 0x40
 10601 0134 18       		.uleb128 0x18
 10602 0135 9742     		.uleb128 0x2117
 10603 0137 19       		.uleb128 0x19
 10604 0138 01       		.uleb128 0x1
 10605 0139 13       		.uleb128 0x13
 10606 013a 00       		.byte	0
 10607 013b 00       		.byte	0
 10608 013c 17       		.uleb128 0x17
 10609 013d 2E       		.uleb128 0x2e
 10610 013e 01       		.byte	0x1
 10611 013f 3F       		.uleb128 0x3f
 10612 0140 19       		.uleb128 0x19
 10613 0141 03       		.uleb128 0x3
ARM GAS  /tmp/ccRayNMu.s 			page 239


 10614 0142 0E       		.uleb128 0xe
 10615 0143 3A       		.uleb128 0x3a
 10616 0144 0B       		.uleb128 0xb
 10617 0145 3B       		.uleb128 0x3b
 10618 0146 05       		.uleb128 0x5
 10619 0147 27       		.uleb128 0x27
 10620 0148 19       		.uleb128 0x19
 10621 0149 49       		.uleb128 0x49
 10622 014a 13       		.uleb128 0x13
 10623 014b 11       		.uleb128 0x11
 10624 014c 01       		.uleb128 0x1
 10625 014d 12       		.uleb128 0x12
 10626 014e 06       		.uleb128 0x6
 10627 014f 40       		.uleb128 0x40
 10628 0150 18       		.uleb128 0x18
 10629 0151 9742     		.uleb128 0x2117
 10630 0153 19       		.uleb128 0x19
 10631 0154 01       		.uleb128 0x1
 10632 0155 13       		.uleb128 0x13
 10633 0156 00       		.byte	0
 10634 0157 00       		.byte	0
 10635 0158 18       		.uleb128 0x18
 10636 0159 2E       		.uleb128 0x2e
 10637 015a 01       		.byte	0x1
 10638 015b 3F       		.uleb128 0x3f
 10639 015c 19       		.uleb128 0x19
 10640 015d 03       		.uleb128 0x3
 10641 015e 0E       		.uleb128 0xe
 10642 015f 3A       		.uleb128 0x3a
 10643 0160 0B       		.uleb128 0xb
 10644 0161 3B       		.uleb128 0x3b
 10645 0162 05       		.uleb128 0x5
 10646 0163 27       		.uleb128 0x27
 10647 0164 19       		.uleb128 0x19
 10648 0165 11       		.uleb128 0x11
 10649 0166 01       		.uleb128 0x1
 10650 0167 12       		.uleb128 0x12
 10651 0168 06       		.uleb128 0x6
 10652 0169 40       		.uleb128 0x40
 10653 016a 18       		.uleb128 0x18
 10654 016b 9642     		.uleb128 0x2116
 10655 016d 19       		.uleb128 0x19
 10656 016e 01       		.uleb128 0x1
 10657 016f 13       		.uleb128 0x13
 10658 0170 00       		.byte	0
 10659 0171 00       		.byte	0
 10660 0172 19       		.uleb128 0x19
 10661 0173 2E       		.uleb128 0x2e
 10662 0174 01       		.byte	0x1
 10663 0175 3F       		.uleb128 0x3f
 10664 0176 19       		.uleb128 0x19
 10665 0177 03       		.uleb128 0x3
 10666 0178 0E       		.uleb128 0xe
 10667 0179 3A       		.uleb128 0x3a
 10668 017a 0B       		.uleb128 0xb
 10669 017b 3B       		.uleb128 0x3b
 10670 017c 0B       		.uleb128 0xb
ARM GAS  /tmp/ccRayNMu.s 			page 240


 10671 017d 27       		.uleb128 0x27
 10672 017e 19       		.uleb128 0x19
 10673 017f 11       		.uleb128 0x11
 10674 0180 01       		.uleb128 0x1
 10675 0181 12       		.uleb128 0x12
 10676 0182 06       		.uleb128 0x6
 10677 0183 40       		.uleb128 0x40
 10678 0184 18       		.uleb128 0x18
 10679 0185 9742     		.uleb128 0x2117
 10680 0187 19       		.uleb128 0x19
 10681 0188 01       		.uleb128 0x1
 10682 0189 13       		.uleb128 0x13
 10683 018a 00       		.byte	0
 10684 018b 00       		.byte	0
 10685 018c 1A       		.uleb128 0x1a
 10686 018d 05       		.uleb128 0x5
 10687 018e 00       		.byte	0
 10688 018f 03       		.uleb128 0x3
 10689 0190 0E       		.uleb128 0xe
 10690 0191 3A       		.uleb128 0x3a
 10691 0192 0B       		.uleb128 0xb
 10692 0193 3B       		.uleb128 0x3b
 10693 0194 0B       		.uleb128 0xb
 10694 0195 49       		.uleb128 0x49
 10695 0196 13       		.uleb128 0x13
 10696 0197 02       		.uleb128 0x2
 10697 0198 18       		.uleb128 0x18
 10698 0199 00       		.byte	0
 10699 019a 00       		.byte	0
 10700 019b 1B       		.uleb128 0x1b
 10701 019c 34       		.uleb128 0x34
 10702 019d 00       		.byte	0
 10703 019e 03       		.uleb128 0x3
 10704 019f 0E       		.uleb128 0xe
 10705 01a0 3A       		.uleb128 0x3a
 10706 01a1 0B       		.uleb128 0xb
 10707 01a2 3B       		.uleb128 0x3b
 10708 01a3 0B       		.uleb128 0xb
 10709 01a4 49       		.uleb128 0x49
 10710 01a5 13       		.uleb128 0x13
 10711 01a6 02       		.uleb128 0x2
 10712 01a7 18       		.uleb128 0x18
 10713 01a8 00       		.byte	0
 10714 01a9 00       		.byte	0
 10715 01aa 1C       		.uleb128 0x1c
 10716 01ab 2E       		.uleb128 0x2e
 10717 01ac 01       		.byte	0x1
 10718 01ad 3F       		.uleb128 0x3f
 10719 01ae 19       		.uleb128 0x19
 10720 01af 03       		.uleb128 0x3
 10721 01b0 0E       		.uleb128 0xe
 10722 01b1 3A       		.uleb128 0x3a
 10723 01b2 0B       		.uleb128 0xb
 10724 01b3 3B       		.uleb128 0x3b
 10725 01b4 0B       		.uleb128 0xb
 10726 01b5 27       		.uleb128 0x27
 10727 01b6 19       		.uleb128 0x19
ARM GAS  /tmp/ccRayNMu.s 			page 241


 10728 01b7 11       		.uleb128 0x11
 10729 01b8 01       		.uleb128 0x1
 10730 01b9 12       		.uleb128 0x12
 10731 01ba 06       		.uleb128 0x6
 10732 01bb 40       		.uleb128 0x40
 10733 01bc 18       		.uleb128 0x18
 10734 01bd 9642     		.uleb128 0x2116
 10735 01bf 19       		.uleb128 0x19
 10736 01c0 00       		.byte	0
 10737 01c1 00       		.byte	0
 10738 01c2 00       		.byte	0
 10739              		.section	.debug_aranges,"",%progbits
 10740 0000 1C000000 		.4byte	0x1c
 10741 0004 0200     		.2byte	0x2
 10742 0006 00000000 		.4byte	.Ldebug_info0
 10743 000a 04       		.byte	0x4
 10744 000b 00       		.byte	0
 10745 000c 0000     		.2byte	0
 10746 000e 0000     		.2byte	0
 10747 0010 00000000 		.4byte	.Ltext0
 10748 0014 901D0000 		.4byte	.Letext0-.Ltext0
 10749 0018 00000000 		.4byte	0
 10750 001c 00000000 		.4byte	0
 10751              		.section	.debug_line,"",%progbits
 10752              	.Ldebug_line0:
 10753 0000 B5050000 		.section	.debug_str,"MS",%progbits,1
 10753      0200DE00 
 10753      00000201 
 10753      FB0E0D00 
 10753      01010101 
 10754              	.LASF136:
 10755 0000 54494D5F 		.ascii	"TIM_OPMode\000"
 10755      4F504D6F 
 10755      646500
 10756              	.LASF138:
 10757 000b 4E657753 		.ascii	"NewState\000"
 10757      74617465 
 10757      00
 10758              	.LASF177:
 10759 0014 54494D5F 		.ascii	"TIM_ForcedOC2Config\000"
 10759      466F7263 
 10759      65644F43 
 10759      32436F6E 
 10759      66696700 
 10760              	.LASF135:
 10761 0028 54494D5F 		.ascii	"TIM_SelectOnePulseMode\000"
 10761      53656C65 
 10761      63744F6E 
 10761      6550756C 
 10761      73654D6F 
 10762              	.LASF202:
 10763 003f 54494D5F 		.ascii	"TIM_DMACmd\000"
 10763      444D4143 
 10763      6D6400
 10764              	.LASF30:
 10765 004a 44494552 		.ascii	"DIER\000"
 10765      00
ARM GAS  /tmp/ccRayNMu.s 			page 242


 10766              	.LASF185:
 10767 004f 54494D5F 		.ascii	"TIM_InputTriggerSource\000"
 10767      496E7075 
 10767      74547269 
 10767      67676572 
 10767      536F7572 
 10768              	.LASF134:
 10769 0066 54494D5F 		.ascii	"TIM_TRGOSource\000"
 10769      5452474F 
 10769      536F7572 
 10769      636500
 10770              	.LASF59:
 10771 0075 54494D5F 		.ascii	"TIM_CounterMode\000"
 10771      436F756E 
 10771      7465724D 
 10771      6F646500 
 10772              	.LASF126:
 10773 0085 4175746F 		.ascii	"Autoreload\000"
 10773      72656C6F 
 10773      616400
 10774              	.LASF234:
 10775 0090 2F686F6D 		.ascii	"/home/enbin/Documents/code/STM/usart\000"
 10775      652F656E 
 10775      62696E2F 
 10775      446F6375 
 10775      6D656E74 
 10776              	.LASF174:
 10777 00b5 54494D5F 		.ascii	"TIM_ForcedOC4Config\000"
 10777      466F7263 
 10777      65644F43 
 10777      34436F6E 
 10777      66696700 
 10778              	.LASF159:
 10779 00c9 54494D5F 		.ascii	"TIM_ClearOC1Ref\000"
 10779      436C6561 
 10779      724F4331 
 10779      52656600 
 10780              	.LASF21:
 10781 00d9 466C6167 		.ascii	"FlagStatus\000"
 10781      53746174 
 10781      757300
 10782              	.LASF3:
 10783 00e4 5F5F7569 		.ascii	"__uint8_t\000"
 10783      6E74385F 
 10783      7400
 10784              	.LASF101:
 10785 00ee 54494D5F 		.ascii	"TIM_FLAG\000"
 10785      464C4147 
 10785      00
 10786              	.LASF124:
 10787 00f7 436F6D70 		.ascii	"Compare1\000"
 10787      61726531 
 10787      00
 10788              	.LASF123:
 10789 0100 54494D5F 		.ascii	"TIM_SetCompare1\000"
 10789      53657443 
 10789      6F6D7061 
ARM GAS  /tmp/ccRayNMu.s 			page 243


 10789      72653100 
 10790              	.LASF182:
 10791 0110 54494D5F 		.ascii	"TIM_IC2Polarity\000"
 10791      49433250 
 10791      6F6C6172 
 10791      69747900 
 10792              	.LASF141:
 10793 0120 54494D5F 		.ascii	"TIM_UpdateDisableConfig\000"
 10793      55706461 
 10793      74654469 
 10793      7361626C 
 10793      65436F6E 
 10794              	.LASF120:
 10795 0138 436F6D70 		.ascii	"Compare3\000"
 10795      61726533 
 10795      00
 10796              	.LASF67:
 10797 0141 54494D5F 		.ascii	"TIM_Pulse\000"
 10797      50756C73 
 10797      6500
 10798              	.LASF93:
 10799 014b 746D7063 		.ascii	"tmpccmr1\000"
 10799      636D7231 
 10799      00
 10800              	.LASF88:
 10801 0154 746D7063 		.ascii	"tmpccmr2\000"
 10801      636D7232 
 10801      00
 10802              	.LASF187:
 10803 015d 746D7063 		.ascii	"tmpcr1\000"
 10803      723100
 10804              	.LASF23:
 10805 0164 44495341 		.ascii	"DISABLE\000"
 10805      424C4500 
 10806              	.LASF227:
 10807 016c 746D7063 		.ascii	"tmpcr2\000"
 10807      723200
 10808              	.LASF184:
 10809 0173 54494D5F 		.ascii	"TIM_SelectInputTrigger\000"
 10809      53656C65 
 10809      6374496E 
 10809      70757454 
 10809      72696767 
 10810              	.LASF11:
 10811 018a 6C6F6E67 		.ascii	"long long unsigned int\000"
 10811      206C6F6E 
 10811      6720756E 
 10811      7369676E 
 10811      65642069 
 10812              	.LASF77:
 10813 01a1 54494D5F 		.ascii	"TIM_ICFilter\000"
 10813      49434669 
 10813      6C746572 
 10813      00
 10814              	.LASF201:
 10815 01ae 54494D5F 		.ascii	"TIM_InternalClockConfig\000"
 10815      496E7465 
ARM GAS  /tmp/ccRayNMu.s 			page 244


 10815      726E616C 
 10815      436C6F63 
 10815      6B436F6E 
 10816              	.LASF152:
 10817 01c6 54494D5F 		.ascii	"TIM_OC2PolarityConfig\000"
 10817      4F433250 
 10817      6F6C6172 
 10817      69747943 
 10817      6F6E6669 
 10818              	.LASF173:
 10819 01dc 54494D5F 		.ascii	"TIM_ARRPreloadConfig\000"
 10819      41525250 
 10819      72656C6F 
 10819      6164436F 
 10819      6E666967 
 10820              	.LASF18:
 10821 01f1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 10821      52784275 
 10821      66666572 
 10821      00
 10822              	.LASF75:
 10823 01fe 54494D5F 		.ascii	"TIM_ICSelection\000"
 10823      49435365 
 10823      6C656374 
 10823      696F6E00 
 10824              	.LASF143:
 10825 020e 746D7031 		.ascii	"tmp1\000"
 10825      00
 10826              	.LASF179:
 10827 0213 54494D5F 		.ascii	"TIM_EncoderInterfaceConfig\000"
 10827      456E636F 
 10827      64657249 
 10827      6E746572 
 10827      66616365 
 10828              	.LASF168:
 10829 022e 54494D5F 		.ascii	"TIM_OC2PreloadConfig\000"
 10829      4F433250 
 10829      72656C6F 
 10829      6164436F 
 10829      6E666967 
 10830              	.LASF207:
 10831 0243 54494D5F 		.ascii	"TIM_GenerateEvent\000"
 10831      47656E65 
 10831      72617465 
 10831      4576656E 
 10831      7400
 10832              	.LASF181:
 10833 0255 54494D5F 		.ascii	"TIM_IC1Polarity\000"
 10833      49433150 
 10833      6F6C6172 
 10833      69747900 
 10834              	.LASF161:
 10835 0265 54494D5F 		.ascii	"TIM_OCFast\000"
 10835      4F434661 
 10835      737400
 10836              	.LASF73:
 10837 0270 54494D5F 		.ascii	"TIM_Channel\000"
ARM GAS  /tmp/ccRayNMu.s 			page 245


 10837      4368616E 
 10837      6E656C00 
 10838              	.LASF34:
 10839 027c 43434D52 		.ascii	"CCMR1\000"
 10839      3100
 10840              	.LASF36:
 10841 0282 43434D52 		.ascii	"CCMR2\000"
 10841      3200
 10842              	.LASF186:
 10843 0288 54494D5F 		.ascii	"TIM_CounterModeConfig\000"
 10843      436F756E 
 10843      7465724D 
 10843      6F646543 
 10843      6F6E6669 
 10844              	.LASF0:
 10845 029e 7369676E 		.ascii	"signed char\000"
 10845      65642063 
 10845      68617200 
 10846              	.LASF175:
 10847 02aa 54494D5F 		.ascii	"TIM_ForcedAction\000"
 10847      466F7263 
 10847      65644163 
 10847      74696F6E 
 10847      00
 10848              	.LASF146:
 10849 02bb 54494D5F 		.ascii	"TIM_CCxCmd\000"
 10849      43437843 
 10849      6D6400
 10850              	.LASF166:
 10851 02c6 54494D5F 		.ascii	"TIM_OCPreload\000"
 10851      4F435072 
 10851      656C6F61 
 10851      6400
 10852              	.LASF41:
 10853 02d4 52455345 		.ascii	"RESERVED10\000"
 10853      52564544 
 10853      313000
 10854              	.LASF233:
 10855 02df 636F6D6D 		.ascii	"common/stm32f10x_tim.c\000"
 10855      6F6E2F73 
 10855      746D3332 
 10855      66313078 
 10855      5F74696D 
 10856              	.LASF43:
 10857 02f6 52455345 		.ascii	"RESERVED12\000"
 10857      52564544 
 10857      313200
 10858              	.LASF45:
 10859 0301 52455345 		.ascii	"RESERVED13\000"
 10859      52564544 
 10859      313300
 10860              	.LASF47:
 10861 030c 52455345 		.ascii	"RESERVED14\000"
 10861      52564544 
 10861      313400
 10862              	.LASF49:
 10863 0317 52455345 		.ascii	"RESERVED15\000"
ARM GAS  /tmp/ccRayNMu.s 			page 246


 10863      52564544 
 10863      313500
 10864              	.LASF51:
 10865 0322 52455345 		.ascii	"RESERVED16\000"
 10865      52564544 
 10865      313600
 10866              	.LASF53:
 10867 032d 52455345 		.ascii	"RESERVED17\000"
 10867      52564544 
 10867      313700
 10868              	.LASF196:
 10869 0338 54494D5F 		.ascii	"TIM_ETRClockMode1Config\000"
 10869      45545243 
 10869      6C6F636B 
 10869      4D6F6465 
 10869      31436F6E 
 10870              	.LASF56:
 10871 0350 52455345 		.ascii	"RESERVED19\000"
 10871      52564544 
 10871      313900
 10872              	.LASF7:
 10873 035b 6C6F6E67 		.ascii	"long int\000"
 10873      20696E74 
 10873      00
 10874              	.LASF66:
 10875 0364 54494D5F 		.ascii	"TIM_OutputNState\000"
 10875      4F757470 
 10875      75744E53 
 10875      74617465 
 10875      00
 10876              	.LASF24:
 10877 0375 454E4142 		.ascii	"ENABLE\000"
 10877      4C4500
 10878              	.LASF226:
 10879 037c 746D7063 		.ascii	"tmpccmrx\000"
 10879      636D7278 
 10879      00
 10880              	.LASF38:
 10881 0385 43434552 		.ascii	"CCER\000"
 10881      00
 10882              	.LASF10:
 10883 038a 6C6F6E67 		.ascii	"long long int\000"
 10883      206C6F6E 
 10883      6720696E 
 10883      7400
 10884              	.LASF14:
 10885 0398 75696E74 		.ascii	"uint16_t\000"
 10885      31365F74 
 10885      00
 10886              	.LASF111:
 10887 03a1 54494D5F 		.ascii	"TIM_CKD\000"
 10887      434B4400 
 10888              	.LASF125:
 10889 03a9 54494D5F 		.ascii	"TIM_SetAutoreload\000"
 10889      53657441 
 10889      75746F72 
 10889      656C6F61 
ARM GAS  /tmp/ccRayNMu.s 			page 247


 10889      6400
 10890              	.LASF214:
 10891 03bb 54494D5F 		.ascii	"TIM_ICStructInit\000"
 10891      49435374 
 10891      72756374 
 10891      496E6974 
 10891      00
 10892              	.LASF108:
 10893 03cc 54494D5F 		.ascii	"TIM_GetCapture2\000"
 10893      47657443 
 10893      61707475 
 10893      72653200 
 10894              	.LASF107:
 10895 03dc 54494D5F 		.ascii	"TIM_GetCapture3\000"
 10895      47657443 
 10895      61707475 
 10895      72653300 
 10896              	.LASF106:
 10897 03ec 54494D5F 		.ascii	"TIM_GetCapture4\000"
 10897      47657443 
 10897      61707475 
 10897      72653400 
 10898              	.LASF228:
 10899 03fc 54494D5F 		.ascii	"TIM_OC3Init\000"
 10899      4F433349 
 10899      6E697400 
 10900              	.LASF222:
 10901 0408 69636F70 		.ascii	"icoppositepolarity\000"
 10901      706F7369 
 10901      7465706F 
 10901      6C617269 
 10901      747900
 10902              	.LASF140:
 10903 041b 54494D5F 		.ascii	"TIM_UpdateSource\000"
 10903      55706461 
 10903      7465536F 
 10903      75726365 
 10903      00
 10904              	.LASF145:
 10905 042c 54494D5F 		.ascii	"TIM_CCxN\000"
 10905      4343784E 
 10905      00
 10906              	.LASF171:
 10907 0435 54494D5F 		.ascii	"TIM_SelectCCDMA\000"
 10907      53656C65 
 10907      63744343 
 10907      444D4100 
 10908              	.LASF4:
 10909 0445 5F5F7569 		.ascii	"__uint16_t\000"
 10909      6E743136 
 10909      5F7400
 10910              	.LASF57:
 10911 0450 54494D5F 		.ascii	"TIM_TypeDef\000"
 10911      54797065 
 10911      44656600 
 10912              	.LASF8:
 10913 045c 5F5F7569 		.ascii	"__uint32_t\000"
ARM GAS  /tmp/ccRayNMu.s 			page 248


 10913      6E743332 
 10913      5F7400
 10914              	.LASF169:
 10915 0467 54494D5F 		.ascii	"TIM_OC1PreloadConfig\000"
 10915      4F433150 
 10915      72656C6F 
 10915      6164436F 
 10915      6E666967 
 10916              	.LASF206:
 10917 047c 54494D5F 		.ascii	"TIM_DMABurstLength\000"
 10917      444D4142 
 10917      75727374 
 10917      4C656E67 
 10917      746800
 10918              	.LASF100:
 10919 048f 54494D5F 		.ascii	"TIM_ClearFlag\000"
 10919      436C6561 
 10919      72466C61 
 10919      6700
 10920              	.LASF121:
 10921 049d 54494D5F 		.ascii	"TIM_SetCompare2\000"
 10921      53657443 
 10921      6F6D7061 
 10921      72653200 
 10922              	.LASF119:
 10923 04ad 54494D5F 		.ascii	"TIM_SetCompare3\000"
 10923      53657443 
 10923      6F6D7061 
 10923      72653300 
 10924              	.LASF172:
 10925 04bd 54494D5F 		.ascii	"TIM_SelectCOM\000"
 10925      53656C65 
 10925      6374434F 
 10925      4D00
 10926              	.LASF89:
 10927 04cb 746D7063 		.ascii	"tmpccer\000"
 10927      63657200 
 10928              	.LASF151:
 10929 04d3 54494D5F 		.ascii	"TIM_OC2NPolarityConfig\000"
 10929      4F43324E 
 10929      506F6C61 
 10929      72697479 
 10929      436F6E66 
 10930              	.LASF12:
 10931 04ea 756E7369 		.ascii	"unsigned int\000"
 10931      676E6564 
 10931      20696E74 
 10931      00
 10932              	.LASF90:
 10933 04f7 5449345F 		.ascii	"TI4_Config\000"
 10933      436F6E66 
 10933      696700
 10934              	.LASF68:
 10935 0502 54494D5F 		.ascii	"TIM_OCPolarity\000"
 10935      4F43506F 
 10935      6C617269 
 10935      747900
ARM GAS  /tmp/ccRayNMu.s 			page 249


 10936              	.LASF61:
 10937 0511 54494D5F 		.ascii	"TIM_ClockDivision\000"
 10937      436C6F63 
 10937      6B446976 
 10937      6973696F 
 10937      6E00
 10938              	.LASF104:
 10939 0523 54494D5F 		.ascii	"TIM_GetPrescaler\000"
 10939      47657450 
 10939      72657363 
 10939      616C6572 
 10939      00
 10940              	.LASF105:
 10941 0534 54494D5F 		.ascii	"TIM_GetCounter\000"
 10941      47657443 
 10941      6F756E74 
 10941      657200
 10942              	.LASF218:
 10943 0543 54494D5F 		.ascii	"TIM_TimeBaseStructInit\000"
 10943      54696D65 
 10943      42617365 
 10943      53747275 
 10943      6374496E 
 10944              	.LASF109:
 10945 055a 54494D5F 		.ascii	"TIM_GetCapture1\000"
 10945      47657443 
 10945      61707475 
 10945      72653100 
 10946              	.LASF130:
 10947 056a 54494D5F 		.ascii	"TIM_MasterSlaveMode\000"
 10947      4D617374 
 10947      6572536C 
 10947      6176654D 
 10947      6F646500 
 10948              	.LASF131:
 10949 057e 54494D5F 		.ascii	"TIM_SelectSlaveMode\000"
 10949      53656C65 
 10949      6374536C 
 10949      6176654D 
 10949      6F646500 
 10950              	.LASF129:
 10951 0592 54494D5F 		.ascii	"TIM_SelectMasterSlaveMode\000"
 10951      53656C65 
 10951      63744D61 
 10951      73746572 
 10951      536C6176 
 10952              	.LASF103:
 10953 05ac 54494D5F 		.ascii	"TIM_GetFlagStatus\000"
 10953      47657446 
 10953      6C616753 
 10953      74617475 
 10953      7300
 10954              	.LASF86:
 10955 05be 54494D5F 		.ascii	"TIM_BDTRInitTypeDef\000"
 10955      42445452 
 10955      496E6974 
 10955      54797065 
ARM GAS  /tmp/ccRayNMu.s 			page 250


 10955      44656600 
 10956              	.LASF217:
 10957 05d2 54494D5F 		.ascii	"TIM_OCInitStruct\000"
 10957      4F43496E 
 10957      69745374 
 10957      72756374 
 10957      00
 10958              	.LASF28:
 10959 05e3 534D4352 		.ascii	"SMCR\000"
 10959      00
 10960              	.LASF79:
 10961 05e8 54494D5F 		.ascii	"TIM_OSSRState\000"
 10961      4F535352 
 10961      53746174 
 10961      6500
 10962              	.LASF87:
 10963 05f6 54494D78 		.ascii	"TIMx\000"
 10963      00
 10964              	.LASF180:
 10965 05fb 54494D5F 		.ascii	"TIM_EncoderMode\000"
 10965      456E636F 
 10965      6465724D 
 10965      6F646500 
 10966              	.LASF148:
 10967 060b 54494D5F 		.ascii	"TIM_OC4PolarityConfig\000"
 10967      4F433450 
 10967      6F6C6172 
 10967      69747943 
 10967      6F6E6669 
 10968              	.LASF85:
 10969 0621 54494D5F 		.ascii	"TIM_AutomaticOutput\000"
 10969      4175746F 
 10969      6D617469 
 10969      634F7574 
 10969      70757400 
 10970              	.LASF232:
 10971 0635 474E5520 		.ascii	"GNU C11 6.1.1 20160526 -mthumb -mcpu=cortex-m3 -g -"
 10971      43313120 
 10971      362E312E 
 10971      31203230 
 10971      31363035 
 10972 0668 666E6F2D 		.ascii	"fno-common\000"
 10972      636F6D6D 
 10972      6F6E00
 10973              	.LASF133:
 10974 0673 54494D5F 		.ascii	"TIM_SelectOutputTrigger\000"
 10974      53656C65 
 10974      63744F75 
 10974      74707574 
 10974      54726967 
 10975              	.LASF116:
 10976 068b 54494D5F 		.ascii	"TIM_SetIC1Prescaler\000"
 10976      53657449 
 10976      43315072 
 10976      65736361 
 10976      6C657200 
 10977              	.LASF221:
ARM GAS  /tmp/ccRayNMu.s 			page 251


 10978 069f 54494D5F 		.ascii	"TIM_PWMIConfig\000"
 10978      50574D49 
 10978      436F6E66 
 10978      696700
 10979              	.LASF91:
 10980 06ae 5449335F 		.ascii	"TI3_Config\000"
 10980      436F6E66 
 10980      696700
 10981              	.LASF203:
 10982 06b9 54494D5F 		.ascii	"TIM_DMASource\000"
 10982      444D4153 
 10982      6F757263 
 10982      6500
 10983              	.LASF216:
 10984 06c7 54494D5F 		.ascii	"TIM_OCStructInit\000"
 10984      4F435374 
 10984      72756374 
 10984      496E6974 
 10984      00
 10985              	.LASF190:
 10986 06d8 54494D5F 		.ascii	"TIM_PSCReloadMode\000"
 10986      50534352 
 10986      656C6F61 
 10986      644D6F64 
 10986      6500
 10987              	.LASF156:
 10988 06ea 54494D5F 		.ascii	"TIM_OCClear\000"
 10988      4F43436C 
 10988      65617200 
 10989              	.LASF20:
 10990 06f6 52455345 		.ascii	"RESET\000"
 10990      5400
 10991              	.LASF183:
 10992 06fc 746D7073 		.ascii	"tmpsmcr\000"
 10992      6D637200 
 10993              	.LASF193:
 10994 0704 54494D5F 		.ascii	"TIM_ExtTRGPolarity\000"
 10994      45787454 
 10994      5247506F 
 10994      6C617269 
 10994      747900
 10995              	.LASF212:
 10996 0717 54494D5F 		.ascii	"TIM_BDTRStructInit\000"
 10996      42445452 
 10996      53747275 
 10996      6374496E 
 10996      697400
 10997              	.LASF215:
 10998 072a 54494D5F 		.ascii	"TIM_ICInitStruct\000"
 10998      4943496E 
 10998      69745374 
 10998      72756374 
 10998      00
 10999              	.LASF178:
 11000 073b 54494D5F 		.ascii	"TIM_ForcedOC1Config\000"
 11000      466F7263 
 11000      65644F43 
ARM GAS  /tmp/ccRayNMu.s 			page 252


 11000      31436F6E 
 11000      66696700 
 11001              	.LASF17:
 11002 074f 73697A65 		.ascii	"sizetype\000"
 11002      74797065 
 11002      00
 11003              	.LASF192:
 11004 0758 54494D5F 		.ascii	"TIM_ExtTRGPrescaler\000"
 11004      45787454 
 11004      52475072 
 11004      65736361 
 11004      6C657200 
 11005              	.LASF83:
 11006 076c 54494D5F 		.ascii	"TIM_Break\000"
 11006      42726561 
 11006      6B00
 11007              	.LASF82:
 11008 0776 54494D5F 		.ascii	"TIM_DeadTime\000"
 11008      44656164 
 11008      54696D65 
 11008      00
 11009              	.LASF154:
 11010 0783 54494D5F 		.ascii	"TIM_OC1PolarityConfig\000"
 11010      4F433150 
 11010      6F6C6172 
 11010      69747943 
 11010      6F6E6669 
 11011              	.LASF176:
 11012 0799 54494D5F 		.ascii	"TIM_ForcedOC3Config\000"
 11012      466F7263 
 11012      65644F43 
 11012      33436F6E 
 11012      66696700 
 11013              	.LASF76:
 11014 07ad 54494D5F 		.ascii	"TIM_ICPrescaler\000"
 11014      49435072 
 11014      65736361 
 11014      6C657200 
 11015              	.LASF144:
 11016 07bd 54494D5F 		.ascii	"TIM_CCxNCmd\000"
 11016      4343784E 
 11016      436D6400 
 11017              	.LASF118:
 11018 07c9 436F6D70 		.ascii	"Compare4\000"
 11018      61726534 
 11018      00
 11019              	.LASF71:
 11020 07d2 54494D5F 		.ascii	"TIM_OCNIdleState\000"
 11020      4F434E49 
 11020      646C6553 
 11020      74617465 
 11020      00
 11021              	.LASF97:
 11022 07e3 69747374 		.ascii	"itstatus\000"
 11022      61747573 
 11022      00
 11023              	.LASF205:
ARM GAS  /tmp/ccRayNMu.s 			page 253


 11024 07ec 54494D5F 		.ascii	"TIM_DMABase\000"
 11024      444D4142 
 11024      61736500 
 11025              	.LASF223:
 11026 07f8 69636F70 		.ascii	"icoppositeselection\000"
 11026      706F7369 
 11026      74657365 
 11026      6C656374 
 11026      696F6E00 
 11027              	.LASF25:
 11028 080c 46756E63 		.ascii	"FunctionalState\000"
 11028      74696F6E 
 11028      616C5374 
 11028      61746500 
 11029              	.LASF117:
 11030 081c 54494D5F 		.ascii	"TIM_SetCompare4\000"
 11030      53657443 
 11030      6F6D7061 
 11030      72653400 
 11031              	.LASF102:
 11032 082c 54494D5F 		.ascii	"TIM_GetITStatus\000"
 11032      47657449 
 11032      54537461 
 11032      74757300 
 11033              	.LASF219:
 11034 083c 54494D5F 		.ascii	"TIM_TimeBaseInitStruct\000"
 11034      54696D65 
 11034      42617365 
 11034      496E6974 
 11034      53747275 
 11035              	.LASF204:
 11036 0853 54494D5F 		.ascii	"TIM_DMAConfig\000"
 11036      444D4143 
 11036      6F6E6669 
 11036      6700
 11037              	.LASF110:
 11038 0861 54494D5F 		.ascii	"TIM_SetClockDivision\000"
 11038      53657443 
 11038      6C6F636B 
 11038      44697669 
 11038      73696F6E 
 11039              	.LASF147:
 11040 0876 54494D5F 		.ascii	"TIM_CCx\000"
 11040      43437800 
 11041              	.LASF128:
 11042 087e 436F756E 		.ascii	"Counter\000"
 11042      74657200 
 11043              	.LASF122:
 11044 0886 436F6D70 		.ascii	"Compare2\000"
 11044      61726532 
 11044      00
 11045              	.LASF65:
 11046 088f 54494D5F 		.ascii	"TIM_OutputState\000"
 11046      4F757470 
 11046      75745374 
 11046      61746500 
 11047              	.LASF208:
ARM GAS  /tmp/ccRayNMu.s 			page 254


 11048 089f 54494D5F 		.ascii	"TIM_EventSource\000"
 11048      4576656E 
 11048      74536F75 
 11048      72636500 
 11049              	.LASF74:
 11050 08af 54494D5F 		.ascii	"TIM_ICPolarity\000"
 11050      4943506F 
 11050      6C617269 
 11050      747900
 11051              	.LASF27:
 11052 08be 52455345 		.ascii	"RESERVED1\000"
 11052      52564544 
 11052      3100
 11053              	.LASF29:
 11054 08c8 52455345 		.ascii	"RESERVED2\000"
 11054      52564544 
 11054      3200
 11055              	.LASF31:
 11056 08d2 52455345 		.ascii	"RESERVED3\000"
 11056      52564544 
 11056      3300
 11057              	.LASF32:
 11058 08dc 52455345 		.ascii	"RESERVED4\000"
 11058      52564544 
 11058      3400
 11059              	.LASF33:
 11060 08e6 52455345 		.ascii	"RESERVED5\000"
 11060      52564544 
 11060      3500
 11061              	.LASF35:
 11062 08f0 52455345 		.ascii	"RESERVED6\000"
 11062      52564544 
 11062      3600
 11063              	.LASF39:
 11064 08fa 52455345 		.ascii	"RESERVED8\000"
 11064      52564544 
 11064      3800
 11065              	.LASF40:
 11066 0904 52455345 		.ascii	"RESERVED9\000"
 11066      52564544 
 11066      3900
 11067              	.LASF58:
 11068 090e 54494D5F 		.ascii	"TIM_Prescaler\000"
 11068      50726573 
 11068      63616C65 
 11068      7200
 11069              	.LASF197:
 11070 091c 54494D5F 		.ascii	"TIM_TIxExternalClockConfig\000"
 11070      54497845 
 11070      78746572 
 11070      6E616C43 
 11070      6C6F636B 
 11071              	.LASF15:
 11072 0937 696E7433 		.ascii	"int32_t\000"
 11072      325F7400 
 11073              	.LASF1:
 11074 093f 756E7369 		.ascii	"unsigned char\000"
ARM GAS  /tmp/ccRayNMu.s 			page 255


 11074      676E6564 
 11074      20636861 
 11074      7200
 11075              	.LASF81:
 11076 094d 54494D5F 		.ascii	"TIM_LOCKLevel\000"
 11076      4C4F434B 
 11076      4C657665 
 11076      6C00
 11077              	.LASF209:
 11078 095b 54494D5F 		.ascii	"TIM_ITConfig\000"
 11078      4954436F 
 11078      6E666967 
 11078      00
 11079              	.LASF220:
 11080 0968 54494D5F 		.ascii	"TIM_BDTRConfig\000"
 11080      42445452 
 11080      436F6E66 
 11080      696700
 11081              	.LASF2:
 11082 0977 73686F72 		.ascii	"short int\000"
 11082      7420696E 
 11082      7400
 11083              	.LASF52:
 11084 0981 42445452 		.ascii	"BDTR\000"
 11084      00
 11085              	.LASF115:
 11086 0986 54494D5F 		.ascii	"TIM_SetIC2Prescaler\000"
 11086      53657449 
 11086      43325072 
 11086      65736361 
 11086      6C657200 
 11087              	.LASF188:
 11088 099a 54494D5F 		.ascii	"TIM_PrescalerConfig\000"
 11088      50726573 
 11088      63616C65 
 11088      72436F6E 
 11088      66696700 
 11089              	.LASF200:
 11090 09ae 54494D5F 		.ascii	"TIM_ITRxExternalClockConfig\000"
 11090      49545278 
 11090      45787465 
 11090      726E616C 
 11090      436C6F63 
 11091              	.LASF149:
 11092 09ca 54494D5F 		.ascii	"TIM_OC3NPolarityConfig\000"
 11092      4F43334E 
 11092      506F6C61 
 11092      72697479 
 11092      436F6E66 
 11093              	.LASF80:
 11094 09e1 54494D5F 		.ascii	"TIM_OSSIState\000"
 11094      4F535349 
 11094      53746174 
 11094      6500
 11095              	.LASF5:
 11096 09ef 73686F72 		.ascii	"short unsigned int\000"
 11096      7420756E 
ARM GAS  /tmp/ccRayNMu.s 			page 256


 11096      7369676E 
 11096      65642069 
 11096      6E7400
 11097              	.LASF26:
 11098 0a02 52455345 		.ascii	"RESERVED0\000"
 11098      52564544 
 11098      3000
 11099              	.LASF95:
 11100 0a0c 54494D5F 		.ascii	"TIM_IT\000"
 11100      495400
 11101              	.LASF231:
 11102 0a13 54494D5F 		.ascii	"TIM_TimeBaseInit\000"
 11102      54696D65 
 11102      42617365 
 11102      496E6974 
 11102      00
 11103              	.LASF198:
 11104 0a24 54494D5F 		.ascii	"TIM_TIxExternalCLKSource\000"
 11104      54497845 
 11104      78746572 
 11104      6E616C43 
 11104      4C4B536F 
 11105              	.LASF37:
 11106 0a3d 52455345 		.ascii	"RESERVED7\000"
 11106      52564544 
 11106      3700
 11107              	.LASF213:
 11108 0a47 54494D5F 		.ascii	"TIM_BDTRInitStruct\000"
 11108      42445452 
 11108      496E6974 
 11108      53747275 
 11108      637400
 11109              	.LASF92:
 11110 0a5a 5449325F 		.ascii	"TI2_Config\000"
 11110      436F6E66 
 11110      696700
 11111              	.LASF163:
 11112 0a65 54494D5F 		.ascii	"TIM_OC2FastConfig\000"
 11112      4F433246 
 11112      61737443 
 11112      6F6E6669 
 11112      6700
 11113              	.LASF160:
 11114 0a77 54494D5F 		.ascii	"TIM_OC4FastConfig\000"
 11114      4F433446 
 11114      61737443 
 11114      6F6E6669 
 11114      6700
 11115              	.LASF9:
 11116 0a89 6C6F6E67 		.ascii	"long unsigned int\000"
 11116      20756E73 
 11116      69676E65 
 11116      6420696E 
 11116      7400
 11117              	.LASF69:
 11118 0a9b 54494D5F 		.ascii	"TIM_OCNPolarity\000"
 11118      4F434E50 
ARM GAS  /tmp/ccRayNMu.s 			page 257


 11118      6F6C6172 
 11118      69747900 
 11119              	.LASF195:
 11120 0aab 54494D5F 		.ascii	"TIM_ETRClockMode2Config\000"
 11120      45545243 
 11120      6C6F636B 
 11120      4D6F6465 
 11120      32436F6E 
 11121              	.LASF94:
 11122 0ac3 5449315F 		.ascii	"TI1_Config\000"
 11122      436F6E66 
 11122      696700
 11123              	.LASF211:
 11124 0ace 54494D5F 		.ascii	"TIM_Cmd\000"
 11124      436D6400 
 11125              	.LASF55:
 11126 0ad6 444D4152 		.ascii	"DMAR\000"
 11126      00
 11127              	.LASF114:
 11128 0adb 54494D5F 		.ascii	"TIM_SetIC3Prescaler\000"
 11128      53657449 
 11128      43335072 
 11128      65736361 
 11128      6C657200 
 11129              	.LASF229:
 11130 0aef 54494D5F 		.ascii	"TIM_OC2Init\000"
 11130      4F433249 
 11130      6E697400 
 11131              	.LASF60:
 11132 0afb 54494D5F 		.ascii	"TIM_Period\000"
 11132      50657269 
 11132      6F6400
 11133              	.LASF63:
 11134 0b06 54494D5F 		.ascii	"TIM_TimeBaseInitTypeDef\000"
 11134      54696D65 
 11134      42617365 
 11134      496E6974 
 11134      54797065 
 11135              	.LASF99:
 11136 0b1e 54494D5F 		.ascii	"TIM_ClearITPendingBit\000"
 11136      436C6561 
 11136      72495450 
 11136      656E6469 
 11136      6E674269 
 11137              	.LASF6:
 11138 0b34 5F5F696E 		.ascii	"__int32_t\000"
 11138      7433325F 
 11138      7400
 11139              	.LASF78:
 11140 0b3e 54494D5F 		.ascii	"TIM_ICInitTypeDef\000"
 11140      4943496E 
 11140      69745479 
 11140      70654465 
 11140      6600
 11141              	.LASF225:
 11142 0b50 54494D5F 		.ascii	"TIM_OC4Init\000"
 11142      4F433449 
ARM GAS  /tmp/ccRayNMu.s 			page 258


 11142      6E697400 
 11143              	.LASF224:
 11144 0b5c 54494D5F 		.ascii	"TIM_ICInit\000"
 11144      4943496E 
 11144      697400
 11145              	.LASF142:
 11146 0b67 54494D5F 		.ascii	"TIM_SelectOCxM\000"
 11146      53656C65 
 11146      63744F43 
 11146      784D00
 11147              	.LASF139:
 11148 0b76 54494D5F 		.ascii	"TIM_UpdateRequestConfig\000"
 11148      55706461 
 11148      74655265 
 11148      71756573 
 11148      74436F6E 
 11149              	.LASF189:
 11150 0b8e 50726573 		.ascii	"Prescaler\000"
 11150      63616C65 
 11150      7200
 11151              	.LASF165:
 11152 0b98 54494D5F 		.ascii	"TIM_OC4PreloadConfig\000"
 11152      4F433450 
 11152      72656C6F 
 11152      6164436F 
 11152      6E666967 
 11153              	.LASF157:
 11154 0bad 54494D5F 		.ascii	"TIM_ClearOC3Ref\000"
 11154      436C6561 
 11154      724F4333 
 11154      52656600 
 11155              	.LASF132:
 11156 0bbd 54494D5F 		.ascii	"TIM_SlaveMode\000"
 11156      536C6176 
 11156      654D6F64 
 11156      6500
 11157              	.LASF64:
 11158 0bcb 54494D5F 		.ascii	"TIM_OCMode\000"
 11158      4F434D6F 
 11158      646500
 11159              	.LASF155:
 11160 0bd6 54494D5F 		.ascii	"TIM_ClearOC4Ref\000"
 11160      436C6561 
 11160      724F4334 
 11160      52656600 
 11161              	.LASF84:
 11162 0be6 54494D5F 		.ascii	"TIM_BreakPolarity\000"
 11162      42726561 
 11162      6B506F6C 
 11162      61726974 
 11162      7900
 11163              	.LASF153:
 11164 0bf8 54494D5F 		.ascii	"TIM_OC1NPolarityConfig\000"
 11164      4F43314E 
 11164      506F6C61 
 11164      72697479 
 11164      436F6E66 
ARM GAS  /tmp/ccRayNMu.s 			page 259


 11165              	.LASF170:
 11166 0c0f 54494D5F 		.ascii	"TIM_CCPreloadControl\000"
 11166      43435072 
 11166      656C6F61 
 11166      64436F6E 
 11166      74726F6C 
 11167              	.LASF19:
 11168 0c24 53797374 		.ascii	"SystemCoreClock\000"
 11168      656D436F 
 11168      7265436C 
 11168      6F636B00 
 11169              	.LASF42:
 11170 0c34 52455345 		.ascii	"RESERVED11\000"
 11170      52564544 
 11170      313100
 11171              	.LASF16:
 11172 0c3f 75696E74 		.ascii	"uint32_t\000"
 11172      33325F74 
 11172      00
 11173              	.LASF44:
 11174 0c48 43435231 		.ascii	"CCR1\000"
 11174      00
 11175              	.LASF46:
 11176 0c4d 43435232 		.ascii	"CCR2\000"
 11176      00
 11177              	.LASF48:
 11178 0c52 43435233 		.ascii	"CCR3\000"
 11178      00
 11179              	.LASF50:
 11180 0c57 43435234 		.ascii	"CCR4\000"
 11180      00
 11181              	.LASF54:
 11182 0c5c 52455345 		.ascii	"RESERVED18\000"
 11182      52564544 
 11182      313800
 11183              	.LASF72:
 11184 0c67 54494D5F 		.ascii	"TIM_OCInitTypeDef\000"
 11184      4F43496E 
 11184      69745479 
 11184      70654465 
 11184      6600
 11185              	.LASF127:
 11186 0c79 54494D5F 		.ascii	"TIM_SetCounter\000"
 11186      53657443 
 11186      6F756E74 
 11186      657200
 11187              	.LASF98:
 11188 0c88 6974656E 		.ascii	"itenable\000"
 11188      61626C65 
 11188      00
 11189              	.LASF13:
 11190 0c91 75696E74 		.ascii	"uint8_t\000"
 11190      385F7400 
 11191              	.LASF150:
 11192 0c99 54494D5F 		.ascii	"TIM_OC3PolarityConfig\000"
 11192      4F433350 
 11192      6F6C6172 
ARM GAS  /tmp/ccRayNMu.s 			page 260


 11192      69747943 
 11192      6F6E6669 
 11193              	.LASF22:
 11194 0caf 49545374 		.ascii	"ITStatus\000"
 11194      61747573 
 11194      00
 11195              	.LASF230:
 11196 0cb8 54494D5F 		.ascii	"TIM_OC1Init\000"
 11196      4F433149 
 11196      6E697400 
 11197              	.LASF62:
 11198 0cc4 54494D5F 		.ascii	"TIM_RepetitionCounter\000"
 11198      52657065 
 11198      74697469 
 11198      6F6E436F 
 11198      756E7465 
 11199              	.LASF137:
 11200 0cda 54494D5F 		.ascii	"TIM_SelectHallSensor\000"
 11200      53656C65 
 11200      63744861 
 11200      6C6C5365 
 11200      6E736F72 
 11201              	.LASF96:
 11202 0cef 62697473 		.ascii	"bitstatus\000"
 11202      74617475 
 11202      7300
 11203              	.LASF199:
 11204 0cf9 49434669 		.ascii	"ICFilter\000"
 11204      6C746572 
 11204      00
 11205              	.LASF158:
 11206 0d02 54494D5F 		.ascii	"TIM_ClearOC2Ref\000"
 11206      436C6561 
 11206      724F4332 
 11206      52656600 
 11207              	.LASF194:
 11208 0d12 45787454 		.ascii	"ExtTRGFilter\000"
 11208      52474669 
 11208      6C746572 
 11208      00
 11209              	.LASF70:
 11210 0d1f 54494D5F 		.ascii	"TIM_OCIdleState\000"
 11210      4F434964 
 11210      6C655374 
 11210      61746500 
 11211              	.LASF210:
 11212 0d2f 54494D5F 		.ascii	"TIM_CtrlPWMOutputs\000"
 11212      4374726C 
 11212      50574D4F 
 11212      75747075 
 11212      747300
 11213              	.LASF113:
 11214 0d42 54494D5F 		.ascii	"TIM_ICPSC\000"
 11214      49435053 
 11214      4300
 11215              	.LASF191:
 11216 0d4c 54494D5F 		.ascii	"TIM_ETRConfig\000"
ARM GAS  /tmp/ccRayNMu.s 			page 261


 11216      45545243 
 11216      6F6E6669 
 11216      6700
 11217              	.LASF235:
 11218 0d5a 54494D5F 		.ascii	"TIM_DeInit\000"
 11218      4465496E 
 11218      697400
 11219              	.LASF162:
 11220 0d65 54494D5F 		.ascii	"TIM_OC3FastConfig\000"
 11220      4F433346 
 11220      61737443 
 11220      6F6E6669 
 11220      6700
 11221              	.LASF167:
 11222 0d77 54494D5F 		.ascii	"TIM_OC3PreloadConfig\000"
 11222      4F433350 
 11222      72656C6F 
 11222      6164436F 
 11222      6E666967 
 11223              	.LASF112:
 11224 0d8c 54494D5F 		.ascii	"TIM_SetIC4Prescaler\000"
 11224      53657449 
 11224      43345072 
 11224      65736361 
 11224      6C657200 
 11225              	.LASF164:
 11226 0da0 54494D5F 		.ascii	"TIM_OC1FastConfig\000"
 11226      4F433146 
 11226      61737443 
 11226      6F6E6669 
 11226      6700
 11227              		.ident	"GCC: (Arch Repository) 6.1.1 20160526"
ARM GAS  /tmp/ccRayNMu.s 			page 262


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_tim.c
     /tmp/ccRayNMu.s:15     .text:0000000000000000 $t
     /tmp/ccRayNMu.s:22     .text:0000000000000000 TIM_DeInit
     /tmp/ccRayNMu.s:318    .text:00000000000001ec $d
     /tmp/ccRayNMu.s:337    .text:000000000000022c $t
     /tmp/ccRayNMu.s:344    .text:000000000000022c TIM_TimeBaseInit
     /tmp/ccRayNMu.s:494    .text:00000000000002fc $d
     /tmp/ccRayNMu.s:507    .text:0000000000000324 $t
     /tmp/ccRayNMu.s:514    .text:0000000000000324 TIM_OC1Init
     /tmp/ccRayNMu.s:685    .text:0000000000000428 $d
     /tmp/ccRayNMu.s:693    .text:000000000000043c $t
     /tmp/ccRayNMu.s:700    .text:000000000000043c TIM_OC2Init
     /tmp/ccRayNMu.s:870    .text:0000000000000544 $d
     /tmp/ccRayNMu.s:875    .text:000000000000054c $t
     /tmp/ccRayNMu.s:882    .text:000000000000054c TIM_OC3Init
     /tmp/ccRayNMu.s:1050   .text:0000000000000650 $d
     /tmp/ccRayNMu.s:1055   .text:0000000000000658 $t
     /tmp/ccRayNMu.s:1062   .text:0000000000000658 TIM_OC4Init
     /tmp/ccRayNMu.s:1196   .text:0000000000000720 $d
     /tmp/ccRayNMu.s:1201   .text:0000000000000728 $t
     /tmp/ccRayNMu.s:1208   .text:0000000000000728 TIM_ICInit
     /tmp/ccRayNMu.s:6056   .text:00000000000019d6 TI1_Config
     /tmp/ccRayNMu.s:5310   .text:0000000000001766 TIM_SetIC1Prescaler
     /tmp/ccRayNMu.s:6206   .text:0000000000001ab8 TI2_Config
     /tmp/ccRayNMu.s:5365   .text:000000000000179c TIM_SetIC2Prescaler
     /tmp/ccRayNMu.s:6368   .text:0000000000001bac TI3_Config
     /tmp/ccRayNMu.s:5422   .text:00000000000017d6 TIM_SetIC3Prescaler
     /tmp/ccRayNMu.s:6524   .text:0000000000001c98 TI4_Config
     /tmp/ccRayNMu.s:5477   .text:000000000000180c TIM_SetIC4Prescaler
     /tmp/ccRayNMu.s:1327   .text:00000000000007d0 TIM_PWMIConfig
     /tmp/ccRayNMu.s:1460   .text:0000000000000888 TIM_BDTRConfig
     /tmp/ccRayNMu.s:1536   .text:00000000000008d6 TIM_TimeBaseStructInit
     /tmp/ccRayNMu.s:1592   .text:0000000000000908 TIM_OCStructInit
     /tmp/ccRayNMu.s:1660   .text:000000000000094a TIM_ICStructInit
     /tmp/ccRayNMu.s:1716   .text:000000000000097a TIM_BDTRStructInit
     /tmp/ccRayNMu.s:1780   .text:00000000000009b6 TIM_Cmd
     /tmp/ccRayNMu.s:1842   .text:00000000000009f4 TIM_CtrlPWMOutputs
     /tmp/ccRayNMu.s:1905   .text:0000000000000a3e TIM_ITConfig
     /tmp/ccRayNMu.s:1973   .text:0000000000000a84 TIM_GenerateEvent
     /tmp/ccRayNMu.s:2015   .text:0000000000000aa0 TIM_DMAConfig
     /tmp/ccRayNMu.s:2062   .text:0000000000000ac8 TIM_DMACmd
     /tmp/ccRayNMu.s:2130   .text:0000000000000b0e TIM_InternalClockConfig
     /tmp/ccRayNMu.s:2174   .text:0000000000000b30 TIM_ITRxExternalClockConfig
     /tmp/ccRayNMu.s:2606   .text:0000000000000d04 TIM_SelectInputTrigger
     /tmp/ccRayNMu.s:2222   .text:0000000000000b5e TIM_TIxExternalClockConfig
     /tmp/ccRayNMu.s:2296   .text:0000000000000bba TIM_ETRClockMode1Config
     /tmp/ccRayNMu.s:2427   .text:0000000000000c56 TIM_ETRConfig
     /tmp/ccRayNMu.s:2371   .text:0000000000000c18 TIM_ETRClockMode2Config
     /tmp/ccRayNMu.s:2500   .text:0000000000000ca8 TIM_PrescalerConfig
     /tmp/ccRayNMu.s:2548   .text:0000000000000cce TIM_CounterModeConfig
     /tmp/ccRayNMu.s:2664   .text:0000000000000d3a TIM_EncoderInterfaceConfig
     /tmp/ccRayNMu.s:2775   .text:0000000000000dd0 TIM_ForcedOC1Config
     /tmp/ccRayNMu.s:2833   .text:0000000000000e06 TIM_ForcedOC2Config
     /tmp/ccRayNMu.s:2893   .text:0000000000000e40 TIM_ForcedOC3Config
     /tmp/ccRayNMu.s:2951   .text:0000000000000e76 TIM_ForcedOC4Config
     /tmp/ccRayNMu.s:3011   .text:0000000000000eb0 TIM_ARRPreloadConfig
ARM GAS  /tmp/ccRayNMu.s 			page 263


     /tmp/ccRayNMu.s:3073   .text:0000000000000eee TIM_SelectCOM
     /tmp/ccRayNMu.s:3135   .text:0000000000000f2c TIM_SelectCCDMA
     /tmp/ccRayNMu.s:3197   .text:0000000000000f6a TIM_CCPreloadControl
     /tmp/ccRayNMu.s:3259   .text:0000000000000fa8 TIM_OC1PreloadConfig
     /tmp/ccRayNMu.s:3317   .text:0000000000000fde TIM_OC2PreloadConfig
     /tmp/ccRayNMu.s:3377   .text:0000000000001018 TIM_OC3PreloadConfig
     /tmp/ccRayNMu.s:3435   .text:000000000000104e TIM_OC4PreloadConfig
     /tmp/ccRayNMu.s:3495   .text:0000000000001088 TIM_OC1FastConfig
     /tmp/ccRayNMu.s:3553   .text:00000000000010be TIM_OC2FastConfig
     /tmp/ccRayNMu.s:3613   .text:00000000000010f8 TIM_OC3FastConfig
     /tmp/ccRayNMu.s:3671   .text:000000000000112e TIM_OC4FastConfig
     /tmp/ccRayNMu.s:3731   .text:0000000000001168 TIM_ClearOC1Ref
     /tmp/ccRayNMu.s:3789   .text:000000000000119e TIM_ClearOC2Ref
     /tmp/ccRayNMu.s:3849   .text:00000000000011d8 TIM_ClearOC3Ref
     /tmp/ccRayNMu.s:3907   .text:000000000000120e TIM_ClearOC4Ref
     /tmp/ccRayNMu.s:3967   .text:0000000000001248 TIM_OC1PolarityConfig
     /tmp/ccRayNMu.s:4025   .text:000000000000127e TIM_OC1NPolarityConfig
     /tmp/ccRayNMu.s:4083   .text:00000000000012b4 TIM_OC2PolarityConfig
     /tmp/ccRayNMu.s:4143   .text:00000000000012ee TIM_OC2NPolarityConfig
     /tmp/ccRayNMu.s:4203   .text:0000000000001328 TIM_OC3PolarityConfig
     /tmp/ccRayNMu.s:4263   .text:0000000000001362 TIM_OC3NPolarityConfig
     /tmp/ccRayNMu.s:4323   .text:000000000000139c TIM_OC4PolarityConfig
     /tmp/ccRayNMu.s:4383   .text:00000000000013d6 TIM_CCxCmd
     /tmp/ccRayNMu.s:4454   .text:000000000000142a TIM_CCxNCmd
     /tmp/ccRayNMu.s:4525   .text:000000000000147e TIM_SelectOCxM
     /tmp/ccRayNMu.s:4652   .text:000000000000152a TIM_UpdateDisableConfig
     /tmp/ccRayNMu.s:4714   .text:0000000000001568 TIM_UpdateRequestConfig
     /tmp/ccRayNMu.s:4776   .text:00000000000015a6 TIM_SelectHallSensor
     /tmp/ccRayNMu.s:4838   .text:00000000000015e4 TIM_SelectOnePulseMode
     /tmp/ccRayNMu.s:4893   .text:000000000000161a TIM_SelectOutputTrigger
     /tmp/ccRayNMu.s:4948   .text:0000000000001650 TIM_SelectSlaveMode
     /tmp/ccRayNMu.s:5003   .text:0000000000001686 TIM_SelectMasterSlaveMode
     /tmp/ccRayNMu.s:5058   .text:00000000000016bc TIM_SetCounter
     /tmp/ccRayNMu.s:5100   .text:00000000000016d8 TIM_SetAutoreload
     /tmp/ccRayNMu.s:5142   .text:00000000000016f4 TIM_SetCompare1
     /tmp/ccRayNMu.s:5184   .text:0000000000001710 TIM_SetCompare2
     /tmp/ccRayNMu.s:5226   .text:000000000000172c TIM_SetCompare3
     /tmp/ccRayNMu.s:5268   .text:0000000000001748 TIM_SetCompare4
     /tmp/ccRayNMu.s:5534   .text:0000000000001846 TIM_SetClockDivision
     /tmp/ccRayNMu.s:5589   .text:000000000000187c TIM_GetCapture1
     /tmp/ccRayNMu.s:5629   .text:0000000000001894 TIM_GetCapture2
     /tmp/ccRayNMu.s:5669   .text:00000000000018ac TIM_GetCapture3
     /tmp/ccRayNMu.s:5709   .text:00000000000018c4 TIM_GetCapture4
     /tmp/ccRayNMu.s:5749   .text:00000000000018de TIM_GetCounter
     /tmp/ccRayNMu.s:5789   .text:00000000000018f6 TIM_GetPrescaler
     /tmp/ccRayNMu.s:5829   .text:000000000000190e TIM_GetFlagStatus
     /tmp/ccRayNMu.s:5890   .text:0000000000001944 TIM_ClearFlag
     /tmp/ccRayNMu.s:5934   .text:0000000000001964 TIM_GetITStatus
     /tmp/ccRayNMu.s:6013   .text:00000000000019b6 TIM_ClearITPendingBit
     /tmp/ccRayNMu.s:6192   .text:0000000000001aa4 $d
     /tmp/ccRayNMu.s:6200   .text:0000000000001ab8 $t
     /tmp/ccRayNMu.s:6354   .text:0000000000001b98 $d
     /tmp/ccRayNMu.s:6362   .text:0000000000001bac $t
     /tmp/ccRayNMu.s:6510   .text:0000000000001c84 $d
     /tmp/ccRayNMu.s:6518   .text:0000000000001c98 $t
     /tmp/ccRayNMu.s:6674   .text:0000000000001d7c $d
                     .debug_frame:0000000000000010 $d
ARM GAS  /tmp/ccRayNMu.s 			page 264



UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
