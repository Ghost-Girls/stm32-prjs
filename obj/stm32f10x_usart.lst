ARM GAS  /tmp/cc27momk.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_usart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	USART_DeInit
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  21              		.type	USART_DeInit, %function
  22              	USART_DeInit:
  23              	.LFB63:
  24              		.file 1 "common/stm32f10x_usart.c"
   1:common/stm32f10x_usart.c **** /**
   2:common/stm32f10x_usart.c ****   ******************************************************************************
   3:common/stm32f10x_usart.c ****   * @file    stm32f10x_usart.c
   4:common/stm32f10x_usart.c ****   * @author  MCD Application Team
   5:common/stm32f10x_usart.c ****   * @version V3.5.0
   6:common/stm32f10x_usart.c ****   * @date    11-March-2011
   7:common/stm32f10x_usart.c ****   * @brief   This file provides all the USART firmware functions.
   8:common/stm32f10x_usart.c ****   ******************************************************************************
   9:common/stm32f10x_usart.c ****   * @attention
  10:common/stm32f10x_usart.c ****   *
  11:common/stm32f10x_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:common/stm32f10x_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:common/stm32f10x_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:common/stm32f10x_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:common/stm32f10x_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:common/stm32f10x_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:common/stm32f10x_usart.c ****   *
  18:common/stm32f10x_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:common/stm32f10x_usart.c ****   ******************************************************************************
  20:common/stm32f10x_usart.c ****   */
  21:common/stm32f10x_usart.c **** 
  22:common/stm32f10x_usart.c **** /* Includes ------------------------------------------------------------------*/
  23:common/stm32f10x_usart.c **** #include "stm32f10x_usart.h"
  24:common/stm32f10x_usart.c **** #include "stm32f10x_rcc.h"
  25:common/stm32f10x_usart.c **** #include "stm32f10x_conf.h"
  26:common/stm32f10x_usart.c **** 
  27:common/stm32f10x_usart.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  28:common/stm32f10x_usart.c ****   * @{
  29:common/stm32f10x_usart.c ****   */
  30:common/stm32f10x_usart.c **** 
  31:common/stm32f10x_usart.c **** /** @defgroup USART 
  32:common/stm32f10x_usart.c ****   * @brief USART driver modules
  33:common/stm32f10x_usart.c ****   * @{
ARM GAS  /tmp/cc27momk.s 			page 2


  34:common/stm32f10x_usart.c ****   */
  35:common/stm32f10x_usart.c **** 
  36:common/stm32f10x_usart.c **** /** @defgroup USART_Private_TypesDefinitions
  37:common/stm32f10x_usart.c ****   * @{
  38:common/stm32f10x_usart.c ****   */
  39:common/stm32f10x_usart.c **** 
  40:common/stm32f10x_usart.c **** /**
  41:common/stm32f10x_usart.c ****   * @}
  42:common/stm32f10x_usart.c ****   */
  43:common/stm32f10x_usart.c **** 
  44:common/stm32f10x_usart.c **** /** @defgroup USART_Private_Defines
  45:common/stm32f10x_usart.c ****   * @{
  46:common/stm32f10x_usart.c ****   */
  47:common/stm32f10x_usart.c **** 
  48:common/stm32f10x_usart.c **** #define CR1_UE_Set                ((uint16_t)0x2000)  /*!< USART Enable Mask */
  49:common/stm32f10x_usart.c **** #define CR1_UE_Reset              ((uint16_t)0xDFFF)  /*!< USART Disable Mask */
  50:common/stm32f10x_usart.c **** 
  51:common/stm32f10x_usart.c **** #define CR1_WAKE_Mask             ((uint16_t)0xF7FF)  /*!< USART WakeUp Method Mask */
  52:common/stm32f10x_usart.c **** 
  53:common/stm32f10x_usart.c **** #define CR1_RWU_Set               ((uint16_t)0x0002)  /*!< USART mute mode Enable Mask */
  54:common/stm32f10x_usart.c **** #define CR1_RWU_Reset             ((uint16_t)0xFFFD)  /*!< USART mute mode Enable Mask */
  55:common/stm32f10x_usart.c **** #define CR1_SBK_Set               ((uint16_t)0x0001)  /*!< USART Break Character send Mask */
  56:common/stm32f10x_usart.c **** #define CR1_CLEAR_Mask            ((uint16_t)0xE9F3)  /*!< USART CR1 Mask */
  57:common/stm32f10x_usart.c **** #define CR2_Address_Mask          ((uint16_t)0xFFF0)  /*!< USART address Mask */
  58:common/stm32f10x_usart.c **** 
  59:common/stm32f10x_usart.c **** #define CR2_LINEN_Set              ((uint16_t)0x4000)  /*!< USART LIN Enable Mask */
  60:common/stm32f10x_usart.c **** #define CR2_LINEN_Reset            ((uint16_t)0xBFFF)  /*!< USART LIN Disable Mask */
  61:common/stm32f10x_usart.c **** 
  62:common/stm32f10x_usart.c **** #define CR2_LBDL_Mask             ((uint16_t)0xFFDF)  /*!< USART LIN Break detection Mask */
  63:common/stm32f10x_usart.c **** #define CR2_STOP_CLEAR_Mask       ((uint16_t)0xCFFF)  /*!< USART CR2 STOP Bits Mask */
  64:common/stm32f10x_usart.c **** #define CR2_CLOCK_CLEAR_Mask      ((uint16_t)0xF0FF)  /*!< USART CR2 Clock Mask */
  65:common/stm32f10x_usart.c **** 
  66:common/stm32f10x_usart.c **** #define CR3_SCEN_Set              ((uint16_t)0x0020)  /*!< USART SC Enable Mask */
  67:common/stm32f10x_usart.c **** #define CR3_SCEN_Reset            ((uint16_t)0xFFDF)  /*!< USART SC Disable Mask */
  68:common/stm32f10x_usart.c **** 
  69:common/stm32f10x_usart.c **** #define CR3_NACK_Set              ((uint16_t)0x0010)  /*!< USART SC NACK Enable Mask */
  70:common/stm32f10x_usart.c **** #define CR3_NACK_Reset            ((uint16_t)0xFFEF)  /*!< USART SC NACK Disable Mask */
  71:common/stm32f10x_usart.c **** 
  72:common/stm32f10x_usart.c **** #define CR3_HDSEL_Set             ((uint16_t)0x0008)  /*!< USART Half-Duplex Enable Mask */
  73:common/stm32f10x_usart.c **** #define CR3_HDSEL_Reset           ((uint16_t)0xFFF7)  /*!< USART Half-Duplex Disable Mask */
  74:common/stm32f10x_usart.c **** 
  75:common/stm32f10x_usart.c **** #define CR3_IRLP_Mask             ((uint16_t)0xFFFB)  /*!< USART IrDA LowPower mode Mask */
  76:common/stm32f10x_usart.c **** #define CR3_CLEAR_Mask            ((uint16_t)0xFCFF)  /*!< USART CR3 Mask */
  77:common/stm32f10x_usart.c **** 
  78:common/stm32f10x_usart.c **** #define CR3_IREN_Set              ((uint16_t)0x0002)  /*!< USART IrDA Enable Mask */
  79:common/stm32f10x_usart.c **** #define CR3_IREN_Reset            ((uint16_t)0xFFFD)  /*!< USART IrDA Disable Mask */
  80:common/stm32f10x_usart.c **** #define GTPR_LSB_Mask             ((uint16_t)0x00FF)  /*!< Guard Time Register LSB Mask */
  81:common/stm32f10x_usart.c **** #define GTPR_MSB_Mask             ((uint16_t)0xFF00)  /*!< Guard Time Register MSB Mask */
  82:common/stm32f10x_usart.c **** #define IT_Mask                   ((uint16_t)0x001F)  /*!< USART Interrupt Mask */
  83:common/stm32f10x_usart.c **** 
  84:common/stm32f10x_usart.c **** /* USART OverSampling-8 Mask */
  85:common/stm32f10x_usart.c **** #define CR1_OVER8_Set             ((u16)0x8000)  /* USART OVER8 mode Enable Mask */
  86:common/stm32f10x_usart.c **** #define CR1_OVER8_Reset           ((u16)0x7FFF)  /* USART OVER8 mode Disable Mask */
  87:common/stm32f10x_usart.c **** 
  88:common/stm32f10x_usart.c **** /* USART One Bit Sampling Mask */
  89:common/stm32f10x_usart.c **** #define CR3_ONEBITE_Set           ((u16)0x0800)  /* USART ONEBITE mode Enable Mask */
  90:common/stm32f10x_usart.c **** #define CR3_ONEBITE_Reset         ((u16)0xF7FF)  /* USART ONEBITE mode Disable Mask */
ARM GAS  /tmp/cc27momk.s 			page 3


  91:common/stm32f10x_usart.c **** 
  92:common/stm32f10x_usart.c **** /**
  93:common/stm32f10x_usart.c ****   * @}
  94:common/stm32f10x_usart.c ****   */
  95:common/stm32f10x_usart.c **** 
  96:common/stm32f10x_usart.c **** /** @defgroup USART_Private_Macros
  97:common/stm32f10x_usart.c ****   * @{
  98:common/stm32f10x_usart.c ****   */
  99:common/stm32f10x_usart.c **** 
 100:common/stm32f10x_usart.c **** /**
 101:common/stm32f10x_usart.c ****   * @}
 102:common/stm32f10x_usart.c ****   */
 103:common/stm32f10x_usart.c **** 
 104:common/stm32f10x_usart.c **** /** @defgroup USART_Private_Variables
 105:common/stm32f10x_usart.c ****   * @{
 106:common/stm32f10x_usart.c ****   */
 107:common/stm32f10x_usart.c **** 
 108:common/stm32f10x_usart.c **** /**
 109:common/stm32f10x_usart.c ****   * @}
 110:common/stm32f10x_usart.c ****   */
 111:common/stm32f10x_usart.c **** 
 112:common/stm32f10x_usart.c **** /** @defgroup USART_Private_FunctionPrototypes
 113:common/stm32f10x_usart.c ****   * @{
 114:common/stm32f10x_usart.c ****   */
 115:common/stm32f10x_usart.c **** 
 116:common/stm32f10x_usart.c **** /**
 117:common/stm32f10x_usart.c ****   * @}
 118:common/stm32f10x_usart.c ****   */
 119:common/stm32f10x_usart.c **** 
 120:common/stm32f10x_usart.c **** /** @defgroup USART_Private_Functions
 121:common/stm32f10x_usart.c ****   * @{
 122:common/stm32f10x_usart.c ****   */
 123:common/stm32f10x_usart.c **** 
 124:common/stm32f10x_usart.c **** /**
 125:common/stm32f10x_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 126:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 127:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values: 
 128:common/stm32f10x_usart.c ****   *      USART1, USART2, USART3, UART4 or UART5.
 129:common/stm32f10x_usart.c ****   * @retval None
 130:common/stm32f10x_usart.c ****   */
 131:common/stm32f10x_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 132:common/stm32f10x_usart.c **** {
  25              		.loc 1 132 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 16
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 7860     		str	r0, [r7, #4]
 133:common/stm32f10x_usart.c ****   /* Check the parameters */
 134:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
ARM GAS  /tmp/cc27momk.s 			page 4


 135:common/stm32f10x_usart.c **** 
 136:common/stm32f10x_usart.c ****   if (USARTx == USART1)
  38              		.loc 1 136 0
  39 0008 7B68     		ldr	r3, [r7, #4]
  40 000a 264A     		ldr	r2, .L8
  41 000c 9342     		cmp	r3, r2
  42 000e 0AD1     		bne	.L2
 137:common/stm32f10x_usart.c ****   {
 138:common/stm32f10x_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  43              		.loc 1 138 0
  44 0010 0121     		movs	r1, #1
  45 0012 4FF48040 		mov	r0, #16384
  46 0016 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 139:common/stm32f10x_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  47              		.loc 1 139 0
  48 001a 0021     		movs	r1, #0
  49 001c 4FF48040 		mov	r0, #16384
  50 0020 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 140:common/stm32f10x_usart.c ****   }
 141:common/stm32f10x_usart.c ****   else if (USARTx == USART2)
 142:common/stm32f10x_usart.c ****   {
 143:common/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 144:common/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 145:common/stm32f10x_usart.c ****   }
 146:common/stm32f10x_usart.c ****   else if (USARTx == USART3)
 147:common/stm32f10x_usart.c ****   {
 148:common/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 149:common/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 150:common/stm32f10x_usart.c ****   }    
 151:common/stm32f10x_usart.c ****   else if (USARTx == UART4)
 152:common/stm32f10x_usart.c ****   {
 153:common/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 154:common/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 155:common/stm32f10x_usart.c ****   }    
 156:common/stm32f10x_usart.c ****   else
 157:common/stm32f10x_usart.c ****   {
 158:common/stm32f10x_usart.c ****     if (USARTx == UART5)
 159:common/stm32f10x_usart.c ****     { 
 160:common/stm32f10x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 161:common/stm32f10x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 162:common/stm32f10x_usart.c ****     }
 163:common/stm32f10x_usart.c ****   }
 164:common/stm32f10x_usart.c **** }
  51              		.loc 1 164 0
  52 0024 3AE0     		b	.L7
  53              	.L2:
 141:common/stm32f10x_usart.c ****   {
  54              		.loc 1 141 0
  55 0026 7B68     		ldr	r3, [r7, #4]
  56 0028 1F4A     		ldr	r2, .L8+4
  57 002a 9342     		cmp	r3, r2
  58 002c 0AD1     		bne	.L4
 143:common/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  59              		.loc 1 143 0
  60 002e 0121     		movs	r1, #1
  61 0030 4FF40030 		mov	r0, #131072
  62 0034 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
ARM GAS  /tmp/cc27momk.s 			page 5


 144:common/stm32f10x_usart.c ****   }
  63              		.loc 1 144 0
  64 0038 0021     		movs	r1, #0
  65 003a 4FF40030 		mov	r0, #131072
  66 003e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  67              		.loc 1 164 0
  68 0042 2BE0     		b	.L7
  69              	.L4:
 146:common/stm32f10x_usart.c ****   {
  70              		.loc 1 146 0
  71 0044 7B68     		ldr	r3, [r7, #4]
  72 0046 194A     		ldr	r2, .L8+8
  73 0048 9342     		cmp	r3, r2
  74 004a 0AD1     		bne	.L5
 148:common/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  75              		.loc 1 148 0
  76 004c 0121     		movs	r1, #1
  77 004e 4FF48020 		mov	r0, #262144
  78 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 149:common/stm32f10x_usart.c ****   }    
  79              		.loc 1 149 0
  80 0056 0021     		movs	r1, #0
  81 0058 4FF48020 		mov	r0, #262144
  82 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  83              		.loc 1 164 0
  84 0060 1CE0     		b	.L7
  85              	.L5:
 151:common/stm32f10x_usart.c ****   {
  86              		.loc 1 151 0
  87 0062 7B68     		ldr	r3, [r7, #4]
  88 0064 124A     		ldr	r2, .L8+12
  89 0066 9342     		cmp	r3, r2
  90 0068 0AD1     		bne	.L6
 153:common/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  91              		.loc 1 153 0
  92 006a 0121     		movs	r1, #1
  93 006c 4FF40020 		mov	r0, #524288
  94 0070 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 154:common/stm32f10x_usart.c ****   }    
  95              		.loc 1 154 0
  96 0074 0021     		movs	r1, #0
  97 0076 4FF40020 		mov	r0, #524288
  98 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  99              		.loc 1 164 0
 100 007e 0DE0     		b	.L7
 101              	.L6:
 158:common/stm32f10x_usart.c ****     { 
 102              		.loc 1 158 0
 103 0080 7B68     		ldr	r3, [r7, #4]
 104 0082 0C4A     		ldr	r2, .L8+16
 105 0084 9342     		cmp	r3, r2
 106 0086 09D1     		bne	.L7
 160:common/stm32f10x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 107              		.loc 1 160 0
 108 0088 0121     		movs	r1, #1
 109 008a 4FF48010 		mov	r0, #1048576
 110 008e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
ARM GAS  /tmp/cc27momk.s 			page 6


 161:common/stm32f10x_usart.c ****     }
 111              		.loc 1 161 0
 112 0092 0021     		movs	r1, #0
 113 0094 4FF48010 		mov	r0, #1048576
 114 0098 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 115              	.L7:
 116              		.loc 1 164 0
 117 009c 00BF     		nop
 118 009e 0837     		adds	r7, r7, #8
 119              		.cfi_def_cfa_offset 8
 120 00a0 BD46     		mov	sp, r7
 121              		.cfi_def_cfa_register 13
 122              		@ sp needed
 123 00a2 80BD     		pop	{r7, pc}
 124              	.L9:
 125              		.align	2
 126              	.L8:
 127 00a4 00380140 		.word	1073821696
 128 00a8 00440040 		.word	1073759232
 129 00ac 00480040 		.word	1073760256
 130 00b0 004C0040 		.word	1073761280
 131 00b4 00500040 		.word	1073762304
 132              		.cfi_endproc
 133              	.LFE63:
 134              		.size	USART_DeInit, .-USART_DeInit
 135              		.align	1
 136              		.global	USART_Init
 137              		.syntax unified
 138              		.thumb
 139              		.thumb_func
 140              		.fpu softvfp
 141              		.type	USART_Init, %function
 142              	USART_Init:
 143              	.LFB64:
 165:common/stm32f10x_usart.c **** 
 166:common/stm32f10x_usart.c **** /**
 167:common/stm32f10x_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 168:common/stm32f10x_usart.c ****   *         parameters in the USART_InitStruct .
 169:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 170:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 171:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 172:common/stm32f10x_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 173:common/stm32f10x_usart.c ****   *         that contains the configuration information for the specified USART 
 174:common/stm32f10x_usart.c ****   *         peripheral.
 175:common/stm32f10x_usart.c ****   * @retval None
 176:common/stm32f10x_usart.c ****   */
 177:common/stm32f10x_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 178:common/stm32f10x_usart.c **** {
 144              		.loc 1 178 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 48
 147              		@ frame_needed = 1, uses_anonymous_args = 0
 148 00b8 80B5     		push	{r7, lr}
 149              		.cfi_def_cfa_offset 8
 150              		.cfi_offset 7, -8
 151              		.cfi_offset 14, -4
 152 00ba 8CB0     		sub	sp, sp, #48
ARM GAS  /tmp/cc27momk.s 			page 7


 153              		.cfi_def_cfa_offset 56
 154 00bc 00AF     		add	r7, sp, #0
 155              		.cfi_def_cfa_register 7
 156 00be 7860     		str	r0, [r7, #4]
 157 00c0 3960     		str	r1, [r7]
 179:common/stm32f10x_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 158              		.loc 1 179 0
 159 00c2 0023     		movs	r3, #0
 160 00c4 FB62     		str	r3, [r7, #44]
 161 00c6 0023     		movs	r3, #0
 162 00c8 BB62     		str	r3, [r7, #40]
 180:common/stm32f10x_usart.c ****   uint32_t integerdivider = 0x00;
 163              		.loc 1 180 0
 164 00ca 0023     		movs	r3, #0
 165 00cc 7B62     		str	r3, [r7, #36]
 181:common/stm32f10x_usart.c ****   uint32_t fractionaldivider = 0x00;
 166              		.loc 1 181 0
 167 00ce 0023     		movs	r3, #0
 168 00d0 3B62     		str	r3, [r7, #32]
 182:common/stm32f10x_usart.c ****   uint32_t usartxbase = 0;
 169              		.loc 1 182 0
 170 00d2 0023     		movs	r3, #0
 171 00d4 FB61     		str	r3, [r7, #28]
 183:common/stm32f10x_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 184:common/stm32f10x_usart.c ****   /* Check the parameters */
 185:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 186:common/stm32f10x_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 187:common/stm32f10x_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 188:common/stm32f10x_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 189:common/stm32f10x_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 190:common/stm32f10x_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 191:common/stm32f10x_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 192:common/stm32f10x_usart.c ****   /* The hardware flow control is available only for USART1, USART2 and USART3 */
 193:common/stm32f10x_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 194:common/stm32f10x_usart.c ****   {
 195:common/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 196:common/stm32f10x_usart.c ****   }
 197:common/stm32f10x_usart.c **** 
 198:common/stm32f10x_usart.c ****   usartxbase = (uint32_t)USARTx;
 172              		.loc 1 198 0
 173 00d6 7B68     		ldr	r3, [r7, #4]
 174 00d8 FB61     		str	r3, [r7, #28]
 199:common/stm32f10x_usart.c **** 
 200:common/stm32f10x_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 201:common/stm32f10x_usart.c ****   tmpreg = USARTx->CR2;
 175              		.loc 1 201 0
 176 00da 7B68     		ldr	r3, [r7, #4]
 177 00dc 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 178 00de 9BB2     		uxth	r3, r3
 179 00e0 FB62     		str	r3, [r7, #44]
 202:common/stm32f10x_usart.c ****   /* Clear STOP[13:12] bits */
 203:common/stm32f10x_usart.c ****   tmpreg &= CR2_STOP_CLEAR_Mask;
 180              		.loc 1 203 0
 181 00e2 FA6A     		ldr	r2, [r7, #44]
 182 00e4 4CF6FF73 		movw	r3, #53247
 183 00e8 1340     		ands	r3, r3, r2
 184 00ea FB62     		str	r3, [r7, #44]
ARM GAS  /tmp/cc27momk.s 			page 8


 204:common/stm32f10x_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
 205:common/stm32f10x_usart.c ****   /* Set STOP[13:12] bits according to USART_StopBits value */
 206:common/stm32f10x_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 185              		.loc 1 206 0
 186 00ec 3B68     		ldr	r3, [r7]
 187 00ee DB88     		ldrh	r3, [r3, #6]
 188 00f0 1A46     		mov	r2, r3
 189 00f2 FB6A     		ldr	r3, [r7, #44]
 190 00f4 1343     		orrs	r3, r3, r2
 191 00f6 FB62     		str	r3, [r7, #44]
 207:common/stm32f10x_usart.c ****   
 208:common/stm32f10x_usart.c ****   /* Write to USART CR2 */
 209:common/stm32f10x_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 192              		.loc 1 209 0
 193 00f8 FB6A     		ldr	r3, [r7, #44]
 194 00fa 9AB2     		uxth	r2, r3
 195 00fc 7B68     		ldr	r3, [r7, #4]
 196 00fe 1A82     		strh	r2, [r3, #16]	@ movhi
 210:common/stm32f10x_usart.c **** 
 211:common/stm32f10x_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 212:common/stm32f10x_usart.c ****   tmpreg = USARTx->CR1;
 197              		.loc 1 212 0
 198 0100 7B68     		ldr	r3, [r7, #4]
 199 0102 9B89     		ldrh	r3, [r3, #12]	@ movhi
 200 0104 9BB2     		uxth	r3, r3
 201 0106 FB62     		str	r3, [r7, #44]
 213:common/stm32f10x_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 214:common/stm32f10x_usart.c ****   tmpreg &= CR1_CLEAR_Mask;
 202              		.loc 1 214 0
 203 0108 FA6A     		ldr	r2, [r7, #44]
 204 010a 4EF6F313 		movw	r3, #59891
 205 010e 1340     		ands	r3, r3, r2
 206 0110 FB62     		str	r3, [r7, #44]
 215:common/stm32f10x_usart.c ****   /* Configure the USART Word Length, Parity and mode ----------------------- */
 216:common/stm32f10x_usart.c ****   /* Set the M bits according to USART_WordLength value */
 217:common/stm32f10x_usart.c ****   /* Set PCE and PS bits according to USART_Parity value */
 218:common/stm32f10x_usart.c ****   /* Set TE and RE bits according to USART_Mode value */
 219:common/stm32f10x_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 207              		.loc 1 219 0
 208 0112 3B68     		ldr	r3, [r7]
 209 0114 9A88     		ldrh	r2, [r3, #4]
 210 0116 3B68     		ldr	r3, [r7]
 211 0118 1B89     		ldrh	r3, [r3, #8]
 212 011a 1343     		orrs	r3, r3, r2
 213 011c 9AB2     		uxth	r2, r3
 220:common/stm32f10x_usart.c ****             USART_InitStruct->USART_Mode;
 214              		.loc 1 220 0
 215 011e 3B68     		ldr	r3, [r7]
 216 0120 5B89     		ldrh	r3, [r3, #10]
 219:common/stm32f10x_usart.c ****             USART_InitStruct->USART_Mode;
 217              		.loc 1 219 0
 218 0122 1343     		orrs	r3, r3, r2
 219 0124 9BB2     		uxth	r3, r3
 220 0126 1A46     		mov	r2, r3
 221 0128 FB6A     		ldr	r3, [r7, #44]
 222 012a 1343     		orrs	r3, r3, r2
 223 012c FB62     		str	r3, [r7, #44]
ARM GAS  /tmp/cc27momk.s 			page 9


 221:common/stm32f10x_usart.c ****   /* Write to USART CR1 */
 222:common/stm32f10x_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 224              		.loc 1 222 0
 225 012e FB6A     		ldr	r3, [r7, #44]
 226 0130 9AB2     		uxth	r2, r3
 227 0132 7B68     		ldr	r3, [r7, #4]
 228 0134 9A81     		strh	r2, [r3, #12]	@ movhi
 223:common/stm32f10x_usart.c **** 
 224:common/stm32f10x_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 225:common/stm32f10x_usart.c ****   tmpreg = USARTx->CR3;
 229              		.loc 1 225 0
 230 0136 7B68     		ldr	r3, [r7, #4]
 231 0138 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 232 013a 9BB2     		uxth	r3, r3
 233 013c FB62     		str	r3, [r7, #44]
 226:common/stm32f10x_usart.c ****   /* Clear CTSE and RTSE bits */
 227:common/stm32f10x_usart.c ****   tmpreg &= CR3_CLEAR_Mask;
 234              		.loc 1 227 0
 235 013e FA6A     		ldr	r2, [r7, #44]
 236 0140 4FF6FF43 		movw	r3, #64767
 237 0144 1340     		ands	r3, r3, r2
 238 0146 FB62     		str	r3, [r7, #44]
 228:common/stm32f10x_usart.c ****   /* Configure the USART HFC -------------------------------------------------*/
 229:common/stm32f10x_usart.c ****   /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 230:common/stm32f10x_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 239              		.loc 1 230 0
 240 0148 3B68     		ldr	r3, [r7]
 241 014a 9B89     		ldrh	r3, [r3, #12]
 242 014c 1A46     		mov	r2, r3
 243 014e FB6A     		ldr	r3, [r7, #44]
 244 0150 1343     		orrs	r3, r3, r2
 245 0152 FB62     		str	r3, [r7, #44]
 231:common/stm32f10x_usart.c ****   /* Write to USART CR3 */
 232:common/stm32f10x_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 246              		.loc 1 232 0
 247 0154 FB6A     		ldr	r3, [r7, #44]
 248 0156 9AB2     		uxth	r2, r3
 249 0158 7B68     		ldr	r3, [r7, #4]
 250 015a 9A82     		strh	r2, [r3, #20]	@ movhi
 233:common/stm32f10x_usart.c **** 
 234:common/stm32f10x_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 235:common/stm32f10x_usart.c ****   /* Configure the USART Baud Rate -------------------------------------------*/
 236:common/stm32f10x_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 251              		.loc 1 236 0
 252 015c 07F10803 		add	r3, r7, #8
 253 0160 1846     		mov	r0, r3
 254 0162 FFF7FEFF 		bl	RCC_GetClocksFreq
 237:common/stm32f10x_usart.c ****   if (usartxbase == USART1_BASE)
 255              		.loc 1 237 0
 256 0166 FB69     		ldr	r3, [r7, #28]
 257 0168 2E4A     		ldr	r2, .L17
 258 016a 9342     		cmp	r3, r2
 259 016c 02D1     		bne	.L11
 238:common/stm32f10x_usart.c ****   {
 239:common/stm32f10x_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 260              		.loc 1 239 0
 261 016e 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cc27momk.s 			page 10


 262 0170 BB62     		str	r3, [r7, #40]
 263 0172 01E0     		b	.L12
 264              	.L11:
 240:common/stm32f10x_usart.c ****   }
 241:common/stm32f10x_usart.c ****   else
 242:common/stm32f10x_usart.c ****   {
 243:common/stm32f10x_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 265              		.loc 1 243 0
 266 0174 3B69     		ldr	r3, [r7, #16]
 267 0176 BB62     		str	r3, [r7, #40]
 268              	.L12:
 244:common/stm32f10x_usart.c ****   }
 245:common/stm32f10x_usart.c ****   
 246:common/stm32f10x_usart.c ****   /* Determine the integer part */
 247:common/stm32f10x_usart.c ****   if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 269              		.loc 1 247 0
 270 0178 7B68     		ldr	r3, [r7, #4]
 271 017a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 272 017c 9BB2     		uxth	r3, r3
 273 017e 1BB2     		sxth	r3, r3
 274 0180 002B     		cmp	r3, #0
 275 0182 0CDA     		bge	.L13
 248:common/stm32f10x_usart.c ****   {
 249:common/stm32f10x_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 250:common/stm32f10x_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 276              		.loc 1 250 0
 277 0184 BA6A     		ldr	r2, [r7, #40]
 278 0186 1346     		mov	r3, r2
 279 0188 9B00     		lsls	r3, r3, #2
 280 018a 1344     		add	r3, r3, r2
 281 018c 9A00     		lsls	r2, r3, #2
 282 018e 1A44     		add	r2, r2, r3
 283 0190 3B68     		ldr	r3, [r7]
 284 0192 1B68     		ldr	r3, [r3]
 285 0194 5B00     		lsls	r3, r3, #1
 286 0196 B2FBF3F3 		udiv	r3, r2, r3
 287 019a 7B62     		str	r3, [r7, #36]
 288 019c 0BE0     		b	.L14
 289              	.L13:
 251:common/stm32f10x_usart.c ****   }
 252:common/stm32f10x_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 253:common/stm32f10x_usart.c ****   {
 254:common/stm32f10x_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 255:common/stm32f10x_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 290              		.loc 1 255 0
 291 019e BA6A     		ldr	r2, [r7, #40]
 292 01a0 1346     		mov	r3, r2
 293 01a2 9B00     		lsls	r3, r3, #2
 294 01a4 1344     		add	r3, r3, r2
 295 01a6 9A00     		lsls	r2, r3, #2
 296 01a8 1A44     		add	r2, r2, r3
 297 01aa 3B68     		ldr	r3, [r7]
 298 01ac 1B68     		ldr	r3, [r3]
 299 01ae 9B00     		lsls	r3, r3, #2
 300 01b0 B2FBF3F3 		udiv	r3, r2, r3
 301 01b4 7B62     		str	r3, [r7, #36]
 302              	.L14:
ARM GAS  /tmp/cc27momk.s 			page 11


 256:common/stm32f10x_usart.c ****   }
 257:common/stm32f10x_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 303              		.loc 1 257 0
 304 01b6 7B6A     		ldr	r3, [r7, #36]
 305 01b8 1B4A     		ldr	r2, .L17+4
 306 01ba A2FB0323 		umull	r2, r3, r2, r3
 307 01be 5B09     		lsrs	r3, r3, #5
 308 01c0 1B01     		lsls	r3, r3, #4
 309 01c2 FB62     		str	r3, [r7, #44]
 258:common/stm32f10x_usart.c **** 
 259:common/stm32f10x_usart.c ****   /* Determine the fractional part */
 260:common/stm32f10x_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 310              		.loc 1 260 0
 311 01c4 FB6A     		ldr	r3, [r7, #44]
 312 01c6 1B09     		lsrs	r3, r3, #4
 313 01c8 6422     		movs	r2, #100
 314 01ca 02FB03F3 		mul	r3, r2, r3
 315 01ce 7A6A     		ldr	r2, [r7, #36]
 316 01d0 D31A     		subs	r3, r2, r3
 317 01d2 3B62     		str	r3, [r7, #32]
 261:common/stm32f10x_usart.c **** 
 262:common/stm32f10x_usart.c ****   /* Implement the fractional part in the register */
 263:common/stm32f10x_usart.c ****   if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 318              		.loc 1 263 0
 319 01d4 7B68     		ldr	r3, [r7, #4]
 320 01d6 9B89     		ldrh	r3, [r3, #12]	@ movhi
 321 01d8 9BB2     		uxth	r3, r3
 322 01da 1BB2     		sxth	r3, r3
 323 01dc 002B     		cmp	r3, #0
 324 01de 0CDA     		bge	.L15
 264:common/stm32f10x_usart.c ****   {
 265:common/stm32f10x_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 325              		.loc 1 265 0
 326 01e0 3B6A     		ldr	r3, [r7, #32]
 327 01e2 DB00     		lsls	r3, r3, #3
 328 01e4 3233     		adds	r3, r3, #50
 329 01e6 104A     		ldr	r2, .L17+4
 330 01e8 A2FB0323 		umull	r2, r3, r2, r3
 331 01ec 5B09     		lsrs	r3, r3, #5
 332 01ee 03F00703 		and	r3, r3, #7
 333 01f2 FA6A     		ldr	r2, [r7, #44]
 334 01f4 1343     		orrs	r3, r3, r2
 335 01f6 FB62     		str	r3, [r7, #44]
 336 01f8 0BE0     		b	.L16
 337              	.L15:
 266:common/stm32f10x_usart.c ****   }
 267:common/stm32f10x_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 268:common/stm32f10x_usart.c ****   {
 269:common/stm32f10x_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 338              		.loc 1 269 0
 339 01fa 3B6A     		ldr	r3, [r7, #32]
 340 01fc 1B01     		lsls	r3, r3, #4
 341 01fe 3233     		adds	r3, r3, #50
 342 0200 094A     		ldr	r2, .L17+4
 343 0202 A2FB0323 		umull	r2, r3, r2, r3
 344 0206 5B09     		lsrs	r3, r3, #5
 345 0208 03F00F03 		and	r3, r3, #15
ARM GAS  /tmp/cc27momk.s 			page 12


 346 020c FA6A     		ldr	r2, [r7, #44]
 347 020e 1343     		orrs	r3, r3, r2
 348 0210 FB62     		str	r3, [r7, #44]
 349              	.L16:
 270:common/stm32f10x_usart.c ****   }
 271:common/stm32f10x_usart.c ****   
 272:common/stm32f10x_usart.c ****   /* Write to USART BRR */
 273:common/stm32f10x_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 350              		.loc 1 273 0
 351 0212 FB6A     		ldr	r3, [r7, #44]
 352 0214 9AB2     		uxth	r2, r3
 353 0216 7B68     		ldr	r3, [r7, #4]
 354 0218 1A81     		strh	r2, [r3, #8]	@ movhi
 274:common/stm32f10x_usart.c **** }
 355              		.loc 1 274 0
 356 021a 00BF     		nop
 357 021c 3037     		adds	r7, r7, #48
 358              		.cfi_def_cfa_offset 8
 359 021e BD46     		mov	sp, r7
 360              		.cfi_def_cfa_register 13
 361              		@ sp needed
 362 0220 80BD     		pop	{r7, pc}
 363              	.L18:
 364 0222 00BF     		.align	2
 365              	.L17:
 366 0224 00380140 		.word	1073821696
 367 0228 1F85EB51 		.word	1374389535
 368              		.cfi_endproc
 369              	.LFE64:
 370              		.size	USART_Init, .-USART_Init
 371              		.align	1
 372              		.global	USART_StructInit
 373              		.syntax unified
 374              		.thumb
 375              		.thumb_func
 376              		.fpu softvfp
 377              		.type	USART_StructInit, %function
 378              	USART_StructInit:
 379              	.LFB65:
 275:common/stm32f10x_usart.c **** 
 276:common/stm32f10x_usart.c **** /**
 277:common/stm32f10x_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 278:common/stm32f10x_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 279:common/stm32f10x_usart.c ****   *         which will be initialized.
 280:common/stm32f10x_usart.c ****   * @retval None
 281:common/stm32f10x_usart.c ****   */
 282:common/stm32f10x_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 283:common/stm32f10x_usart.c **** {
 380              		.loc 1 283 0
 381              		.cfi_startproc
 382              		@ args = 0, pretend = 0, frame = 8
 383              		@ frame_needed = 1, uses_anonymous_args = 0
 384              		@ link register save eliminated.
 385 022c 80B4     		push	{r7}
 386              		.cfi_def_cfa_offset 4
 387              		.cfi_offset 7, -4
 388 022e 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/cc27momk.s 			page 13


 389              		.cfi_def_cfa_offset 16
 390 0230 00AF     		add	r7, sp, #0
 391              		.cfi_def_cfa_register 7
 392 0232 7860     		str	r0, [r7, #4]
 284:common/stm32f10x_usart.c ****   /* USART_InitStruct members default value */
 285:common/stm32f10x_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 393              		.loc 1 285 0
 394 0234 7B68     		ldr	r3, [r7, #4]
 395 0236 4FF41652 		mov	r2, #9600
 396 023a 1A60     		str	r2, [r3]
 286:common/stm32f10x_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 397              		.loc 1 286 0
 398 023c 7B68     		ldr	r3, [r7, #4]
 399 023e 0022     		movs	r2, #0
 400 0240 9A80     		strh	r2, [r3, #4]	@ movhi
 287:common/stm32f10x_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 401              		.loc 1 287 0
 402 0242 7B68     		ldr	r3, [r7, #4]
 403 0244 0022     		movs	r2, #0
 404 0246 DA80     		strh	r2, [r3, #6]	@ movhi
 288:common/stm32f10x_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 405              		.loc 1 288 0
 406 0248 7B68     		ldr	r3, [r7, #4]
 407 024a 0022     		movs	r2, #0
 408 024c 1A81     		strh	r2, [r3, #8]	@ movhi
 289:common/stm32f10x_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 409              		.loc 1 289 0
 410 024e 7B68     		ldr	r3, [r7, #4]
 411 0250 0C22     		movs	r2, #12
 412 0252 5A81     		strh	r2, [r3, #10]	@ movhi
 290:common/stm32f10x_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 413              		.loc 1 290 0
 414 0254 7B68     		ldr	r3, [r7, #4]
 415 0256 0022     		movs	r2, #0
 416 0258 9A81     		strh	r2, [r3, #12]	@ movhi
 291:common/stm32f10x_usart.c **** }
 417              		.loc 1 291 0
 418 025a 00BF     		nop
 419 025c 0C37     		adds	r7, r7, #12
 420              		.cfi_def_cfa_offset 4
 421 025e BD46     		mov	sp, r7
 422              		.cfi_def_cfa_register 13
 423              		@ sp needed
 424 0260 80BC     		pop	{r7}
 425              		.cfi_restore 7
 426              		.cfi_def_cfa_offset 0
 427 0262 7047     		bx	lr
 428              		.cfi_endproc
 429              	.LFE65:
 430              		.size	USART_StructInit, .-USART_StructInit
 431              		.align	1
 432              		.global	USART_ClockInit
 433              		.syntax unified
 434              		.thumb
 435              		.thumb_func
 436              		.fpu softvfp
 437              		.type	USART_ClockInit, %function
ARM GAS  /tmp/cc27momk.s 			page 14


 438              	USART_ClockInit:
 439              	.LFB66:
 292:common/stm32f10x_usart.c **** 
 293:common/stm32f10x_usart.c **** /**
 294:common/stm32f10x_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 295:common/stm32f10x_usart.c ****   *          specified parameters in the USART_ClockInitStruct .
 296:common/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 to select the USART peripheral.
 297:common/stm32f10x_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 298:common/stm32f10x_usart.c ****   *         structure that contains the configuration information for the specified 
 299:common/stm32f10x_usart.c ****   *         USART peripheral.  
 300:common/stm32f10x_usart.c ****   * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
 301:common/stm32f10x_usart.c ****   * @retval None
 302:common/stm32f10x_usart.c ****   */
 303:common/stm32f10x_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 304:common/stm32f10x_usart.c **** {
 440              		.loc 1 304 0
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 16
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 445 0264 80B4     		push	{r7}
 446              		.cfi_def_cfa_offset 4
 447              		.cfi_offset 7, -4
 448 0266 85B0     		sub	sp, sp, #20
 449              		.cfi_def_cfa_offset 24
 450 0268 00AF     		add	r7, sp, #0
 451              		.cfi_def_cfa_register 7
 452 026a 7860     		str	r0, [r7, #4]
 453 026c 3960     		str	r1, [r7]
 305:common/stm32f10x_usart.c ****   uint32_t tmpreg = 0x00;
 454              		.loc 1 305 0
 455 026e 0023     		movs	r3, #0
 456 0270 FB60     		str	r3, [r7, #12]
 306:common/stm32f10x_usart.c ****   /* Check the parameters */
 307:common/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 308:common/stm32f10x_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 309:common/stm32f10x_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 310:common/stm32f10x_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 311:common/stm32f10x_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 312:common/stm32f10x_usart.c ****   
 313:common/stm32f10x_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 314:common/stm32f10x_usart.c ****   tmpreg = USARTx->CR2;
 457              		.loc 1 314 0
 458 0272 7B68     		ldr	r3, [r7, #4]
 459 0274 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 460 0276 9BB2     		uxth	r3, r3
 461 0278 FB60     		str	r3, [r7, #12]
 315:common/stm32f10x_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 316:common/stm32f10x_usart.c ****   tmpreg &= CR2_CLOCK_CLEAR_Mask;
 462              		.loc 1 316 0
 463 027a FA68     		ldr	r2, [r7, #12]
 464 027c 4FF2FF03 		movw	r3, #61695
 465 0280 1340     		ands	r3, r3, r2
 466 0282 FB60     		str	r3, [r7, #12]
 317:common/stm32f10x_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 318:common/stm32f10x_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 319:common/stm32f10x_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
ARM GAS  /tmp/cc27momk.s 			page 15


 320:common/stm32f10x_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 321:common/stm32f10x_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 322:common/stm32f10x_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 467              		.loc 1 322 0
 468 0284 3B68     		ldr	r3, [r7]
 469 0286 1A88     		ldrh	r2, [r3]
 470 0288 3B68     		ldr	r3, [r7]
 471 028a 5B88     		ldrh	r3, [r3, #2]
 323:common/stm32f10x_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 472              		.loc 1 323 0
 473 028c 1343     		orrs	r3, r3, r2
 474 028e 9AB2     		uxth	r2, r3
 475 0290 3B68     		ldr	r3, [r7]
 476 0292 9B88     		ldrh	r3, [r3, #4]
 477 0294 1343     		orrs	r3, r3, r2
 478 0296 9AB2     		uxth	r2, r3
 479 0298 3B68     		ldr	r3, [r7]
 480 029a DB88     		ldrh	r3, [r3, #6]
 481 029c 1343     		orrs	r3, r3, r2
 482 029e 9BB2     		uxth	r3, r3
 483 02a0 1A46     		mov	r2, r3
 322:common/stm32f10x_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 484              		.loc 1 322 0
 485 02a2 FB68     		ldr	r3, [r7, #12]
 486 02a4 1343     		orrs	r3, r3, r2
 487 02a6 FB60     		str	r3, [r7, #12]
 324:common/stm32f10x_usart.c ****   /* Write to USART CR2 */
 325:common/stm32f10x_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 488              		.loc 1 325 0
 489 02a8 FB68     		ldr	r3, [r7, #12]
 490 02aa 9AB2     		uxth	r2, r3
 491 02ac 7B68     		ldr	r3, [r7, #4]
 492 02ae 1A82     		strh	r2, [r3, #16]	@ movhi
 326:common/stm32f10x_usart.c **** }
 493              		.loc 1 326 0
 494 02b0 00BF     		nop
 495 02b2 1437     		adds	r7, r7, #20
 496              		.cfi_def_cfa_offset 4
 497 02b4 BD46     		mov	sp, r7
 498              		.cfi_def_cfa_register 13
 499              		@ sp needed
 500 02b6 80BC     		pop	{r7}
 501              		.cfi_restore 7
 502              		.cfi_def_cfa_offset 0
 503 02b8 7047     		bx	lr
 504              		.cfi_endproc
 505              	.LFE66:
 506              		.size	USART_ClockInit, .-USART_ClockInit
 507              		.align	1
 508              		.global	USART_ClockStructInit
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 512              		.fpu softvfp
 513              		.type	USART_ClockStructInit, %function
 514              	USART_ClockStructInit:
 515              	.LFB67:
ARM GAS  /tmp/cc27momk.s 			page 16


 327:common/stm32f10x_usart.c **** 
 328:common/stm32f10x_usart.c **** /**
 329:common/stm32f10x_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 330:common/stm32f10x_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 331:common/stm32f10x_usart.c ****   *         structure which will be initialized.
 332:common/stm32f10x_usart.c ****   * @retval None
 333:common/stm32f10x_usart.c ****   */
 334:common/stm32f10x_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 335:common/stm32f10x_usart.c **** {
 516              		.loc 1 335 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 8
 519              		@ frame_needed = 1, uses_anonymous_args = 0
 520              		@ link register save eliminated.
 521 02ba 80B4     		push	{r7}
 522              		.cfi_def_cfa_offset 4
 523              		.cfi_offset 7, -4
 524 02bc 83B0     		sub	sp, sp, #12
 525              		.cfi_def_cfa_offset 16
 526 02be 00AF     		add	r7, sp, #0
 527              		.cfi_def_cfa_register 7
 528 02c0 7860     		str	r0, [r7, #4]
 336:common/stm32f10x_usart.c ****   /* USART_ClockInitStruct members default value */
 337:common/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 529              		.loc 1 337 0
 530 02c2 7B68     		ldr	r3, [r7, #4]
 531 02c4 0022     		movs	r2, #0
 532 02c6 1A80     		strh	r2, [r3]	@ movhi
 338:common/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 533              		.loc 1 338 0
 534 02c8 7B68     		ldr	r3, [r7, #4]
 535 02ca 0022     		movs	r2, #0
 536 02cc 5A80     		strh	r2, [r3, #2]	@ movhi
 339:common/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 537              		.loc 1 339 0
 538 02ce 7B68     		ldr	r3, [r7, #4]
 539 02d0 0022     		movs	r2, #0
 540 02d2 9A80     		strh	r2, [r3, #4]	@ movhi
 340:common/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 541              		.loc 1 340 0
 542 02d4 7B68     		ldr	r3, [r7, #4]
 543 02d6 0022     		movs	r2, #0
 544 02d8 DA80     		strh	r2, [r3, #6]	@ movhi
 341:common/stm32f10x_usart.c **** }
 545              		.loc 1 341 0
 546 02da 00BF     		nop
 547 02dc 0C37     		adds	r7, r7, #12
 548              		.cfi_def_cfa_offset 4
 549 02de BD46     		mov	sp, r7
 550              		.cfi_def_cfa_register 13
 551              		@ sp needed
 552 02e0 80BC     		pop	{r7}
 553              		.cfi_restore 7
 554              		.cfi_def_cfa_offset 0
 555 02e2 7047     		bx	lr
 556              		.cfi_endproc
 557              	.LFE67:
ARM GAS  /tmp/cc27momk.s 			page 17


 558              		.size	USART_ClockStructInit, .-USART_ClockStructInit
 559              		.align	1
 560              		.global	USART_Cmd
 561              		.syntax unified
 562              		.thumb
 563              		.thumb_func
 564              		.fpu softvfp
 565              		.type	USART_Cmd, %function
 566              	USART_Cmd:
 567              	.LFB68:
 342:common/stm32f10x_usart.c **** 
 343:common/stm32f10x_usart.c **** /**
 344:common/stm32f10x_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 345:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 346:common/stm32f10x_usart.c ****   *         This parameter can be one of the following values:
 347:common/stm32f10x_usart.c ****   *           USART1, USART2, USART3, UART4 or UART5.
 348:common/stm32f10x_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 349:common/stm32f10x_usart.c ****   *         This parameter can be: ENABLE or DISABLE.
 350:common/stm32f10x_usart.c ****   * @retval None
 351:common/stm32f10x_usart.c ****   */
 352:common/stm32f10x_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 353:common/stm32f10x_usart.c **** {
 568              		.loc 1 353 0
 569              		.cfi_startproc
 570              		@ args = 0, pretend = 0, frame = 8
 571              		@ frame_needed = 1, uses_anonymous_args = 0
 572              		@ link register save eliminated.
 573 02e4 80B4     		push	{r7}
 574              		.cfi_def_cfa_offset 4
 575              		.cfi_offset 7, -4
 576 02e6 83B0     		sub	sp, sp, #12
 577              		.cfi_def_cfa_offset 16
 578 02e8 00AF     		add	r7, sp, #0
 579              		.cfi_def_cfa_register 7
 580 02ea 7860     		str	r0, [r7, #4]
 581 02ec 0B46     		mov	r3, r1
 582 02ee FB70     		strb	r3, [r7, #3]
 354:common/stm32f10x_usart.c ****   /* Check the parameters */
 355:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 356:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 357:common/stm32f10x_usart.c ****   
 358:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 583              		.loc 1 358 0
 584 02f0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 585 02f2 002B     		cmp	r3, #0
 586 02f4 08D0     		beq	.L23
 359:common/stm32f10x_usart.c ****   {
 360:common/stm32f10x_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 361:common/stm32f10x_usart.c ****     USARTx->CR1 |= CR1_UE_Set;
 587              		.loc 1 361 0
 588 02f6 7B68     		ldr	r3, [r7, #4]
 589 02f8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 590 02fa 9BB2     		uxth	r3, r3
 591 02fc 43F40053 		orr	r3, r3, #8192
 592 0300 9AB2     		uxth	r2, r3
 593 0302 7B68     		ldr	r3, [r7, #4]
 594 0304 9A81     		strh	r2, [r3, #12]	@ movhi
ARM GAS  /tmp/cc27momk.s 			page 18


 362:common/stm32f10x_usart.c ****   }
 363:common/stm32f10x_usart.c ****   else
 364:common/stm32f10x_usart.c ****   {
 365:common/stm32f10x_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 366:common/stm32f10x_usart.c ****     USARTx->CR1 &= CR1_UE_Reset;
 367:common/stm32f10x_usart.c ****   }
 368:common/stm32f10x_usart.c **** }
 595              		.loc 1 368 0
 596 0306 07E0     		b	.L25
 597              	.L23:
 366:common/stm32f10x_usart.c ****   }
 598              		.loc 1 366 0
 599 0308 7B68     		ldr	r3, [r7, #4]
 600 030a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 601 030c 9BB2     		uxth	r3, r3
 602 030e 23F40053 		bic	r3, r3, #8192
 603 0312 9AB2     		uxth	r2, r3
 604 0314 7B68     		ldr	r3, [r7, #4]
 605 0316 9A81     		strh	r2, [r3, #12]	@ movhi
 606              	.L25:
 607              		.loc 1 368 0
 608 0318 00BF     		nop
 609 031a 0C37     		adds	r7, r7, #12
 610              		.cfi_def_cfa_offset 4
 611 031c BD46     		mov	sp, r7
 612              		.cfi_def_cfa_register 13
 613              		@ sp needed
 614 031e 80BC     		pop	{r7}
 615              		.cfi_restore 7
 616              		.cfi_def_cfa_offset 0
 617 0320 7047     		bx	lr
 618              		.cfi_endproc
 619              	.LFE68:
 620              		.size	USART_Cmd, .-USART_Cmd
 621              		.align	1
 622              		.global	USART_ITConfig
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu softvfp
 627              		.type	USART_ITConfig, %function
 628              	USART_ITConfig:
 629              	.LFB69:
 369:common/stm32f10x_usart.c **** 
 370:common/stm32f10x_usart.c **** /**
 371:common/stm32f10x_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
 372:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 373:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 374:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 375:common/stm32f10x_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
 376:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 377:common/stm32f10x_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
 378:common/stm32f10x_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt
 379:common/stm32f10x_usart.c ****   *     @arg USART_IT_TXE:  Transmit Data Register empty interrupt
 380:common/stm32f10x_usart.c ****   *     @arg USART_IT_TC:   Transmission complete interrupt
 381:common/stm32f10x_usart.c ****   *     @arg USART_IT_RXNE: Receive Data register not empty interrupt
 382:common/stm32f10x_usart.c ****   *     @arg USART_IT_IDLE: Idle line detection interrupt
ARM GAS  /tmp/cc27momk.s 			page 19


 383:common/stm32f10x_usart.c ****   *     @arg USART_IT_PE:   Parity Error interrupt
 384:common/stm32f10x_usart.c ****   *     @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
 385:common/stm32f10x_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
 386:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 387:common/stm32f10x_usart.c ****   * @retval None
 388:common/stm32f10x_usart.c ****   */
 389:common/stm32f10x_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
 390:common/stm32f10x_usart.c **** {
 630              		.loc 1 390 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 24
 633              		@ frame_needed = 1, uses_anonymous_args = 0
 634              		@ link register save eliminated.
 635 0322 80B4     		push	{r7}
 636              		.cfi_def_cfa_offset 4
 637              		.cfi_offset 7, -4
 638 0324 87B0     		sub	sp, sp, #28
 639              		.cfi_def_cfa_offset 32
 640 0326 00AF     		add	r7, sp, #0
 641              		.cfi_def_cfa_register 7
 642 0328 7860     		str	r0, [r7, #4]
 643 032a 0B46     		mov	r3, r1
 644 032c 7B80     		strh	r3, [r7, #2]	@ movhi
 645 032e 1346     		mov	r3, r2
 646 0330 7B70     		strb	r3, [r7, #1]
 391:common/stm32f10x_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 647              		.loc 1 391 0
 648 0332 0023     		movs	r3, #0
 649 0334 3B61     		str	r3, [r7, #16]
 650 0336 0023     		movs	r3, #0
 651 0338 FB60     		str	r3, [r7, #12]
 652 033a 0023     		movs	r3, #0
 653 033c BB60     		str	r3, [r7, #8]
 392:common/stm32f10x_usart.c ****   uint32_t usartxbase = 0x00;
 654              		.loc 1 392 0
 655 033e 0023     		movs	r3, #0
 656 0340 7B61     		str	r3, [r7, #20]
 393:common/stm32f10x_usart.c ****   /* Check the parameters */
 394:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 395:common/stm32f10x_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 396:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 397:common/stm32f10x_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
 398:common/stm32f10x_usart.c ****   if (USART_IT == USART_IT_CTS)
 399:common/stm32f10x_usart.c ****   {
 400:common/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 401:common/stm32f10x_usart.c ****   }   
 402:common/stm32f10x_usart.c ****   
 403:common/stm32f10x_usart.c ****   usartxbase = (uint32_t)USARTx;
 657              		.loc 1 403 0
 658 0342 7B68     		ldr	r3, [r7, #4]
 659 0344 7B61     		str	r3, [r7, #20]
 404:common/stm32f10x_usart.c **** 
 405:common/stm32f10x_usart.c ****   /* Get the USART register index */
 406:common/stm32f10x_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 660              		.loc 1 406 0
 661 0346 7B88     		ldrh	r3, [r7, #2]	@ movhi
 662 0348 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc27momk.s 			page 20


 663 034a 5B09     		lsrs	r3, r3, #5
 664 034c DBB2     		uxtb	r3, r3
 665 034e 3B61     		str	r3, [r7, #16]
 407:common/stm32f10x_usart.c **** 
 408:common/stm32f10x_usart.c ****   /* Get the interrupt position */
 409:common/stm32f10x_usart.c ****   itpos = USART_IT & IT_Mask;
 666              		.loc 1 409 0
 667 0350 7B88     		ldrh	r3, [r7, #2]
 668 0352 03F01F03 		and	r3, r3, #31
 669 0356 FB60     		str	r3, [r7, #12]
 410:common/stm32f10x_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 670              		.loc 1 410 0
 671 0358 0122     		movs	r2, #1
 672 035a FB68     		ldr	r3, [r7, #12]
 673 035c 02FA03F3 		lsl	r3, r2, r3
 674 0360 BB60     		str	r3, [r7, #8]
 411:common/stm32f10x_usart.c ****     
 412:common/stm32f10x_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 675              		.loc 1 412 0
 676 0362 3B69     		ldr	r3, [r7, #16]
 677 0364 012B     		cmp	r3, #1
 678 0366 03D1     		bne	.L27
 413:common/stm32f10x_usart.c ****   {
 414:common/stm32f10x_usart.c ****     usartxbase += 0x0C;
 679              		.loc 1 414 0
 680 0368 7B69     		ldr	r3, [r7, #20]
 681 036a 0C33     		adds	r3, r3, #12
 682 036c 7B61     		str	r3, [r7, #20]
 683 036e 09E0     		b	.L28
 684              	.L27:
 415:common/stm32f10x_usart.c ****   }
 416:common/stm32f10x_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 685              		.loc 1 416 0
 686 0370 3B69     		ldr	r3, [r7, #16]
 687 0372 022B     		cmp	r3, #2
 688 0374 03D1     		bne	.L29
 417:common/stm32f10x_usart.c ****   {
 418:common/stm32f10x_usart.c ****     usartxbase += 0x10;
 689              		.loc 1 418 0
 690 0376 7B69     		ldr	r3, [r7, #20]
 691 0378 1033     		adds	r3, r3, #16
 692 037a 7B61     		str	r3, [r7, #20]
 693 037c 02E0     		b	.L28
 694              	.L29:
 419:common/stm32f10x_usart.c ****   }
 420:common/stm32f10x_usart.c ****   else /* The IT is in CR3 register */
 421:common/stm32f10x_usart.c ****   {
 422:common/stm32f10x_usart.c ****     usartxbase += 0x14; 
 695              		.loc 1 422 0
 696 037e 7B69     		ldr	r3, [r7, #20]
 697 0380 1433     		adds	r3, r3, #20
 698 0382 7B61     		str	r3, [r7, #20]
 699              	.L28:
 423:common/stm32f10x_usart.c ****   }
 424:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 700              		.loc 1 424 0
 701 0384 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
ARM GAS  /tmp/cc27momk.s 			page 21


 702 0386 002B     		cmp	r3, #0
 703 0388 06D0     		beq	.L30
 425:common/stm32f10x_usart.c ****   {
 426:common/stm32f10x_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 704              		.loc 1 426 0
 705 038a 7B69     		ldr	r3, [r7, #20]
 706 038c 7A69     		ldr	r2, [r7, #20]
 707 038e 1168     		ldr	r1, [r2]
 708 0390 BA68     		ldr	r2, [r7, #8]
 709 0392 0A43     		orrs	r2, r2, r1
 710 0394 1A60     		str	r2, [r3]
 427:common/stm32f10x_usart.c ****   }
 428:common/stm32f10x_usart.c ****   else
 429:common/stm32f10x_usart.c ****   {
 430:common/stm32f10x_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 431:common/stm32f10x_usart.c ****   }
 432:common/stm32f10x_usart.c **** }
 711              		.loc 1 432 0
 712 0396 06E0     		b	.L32
 713              	.L30:
 430:common/stm32f10x_usart.c ****   }
 714              		.loc 1 430 0
 715 0398 7B69     		ldr	r3, [r7, #20]
 716 039a 7A69     		ldr	r2, [r7, #20]
 717 039c 1168     		ldr	r1, [r2]
 718 039e BA68     		ldr	r2, [r7, #8]
 719 03a0 D243     		mvns	r2, r2
 720 03a2 0A40     		ands	r2, r2, r1
 721 03a4 1A60     		str	r2, [r3]
 722              	.L32:
 723              		.loc 1 432 0
 724 03a6 00BF     		nop
 725 03a8 1C37     		adds	r7, r7, #28
 726              		.cfi_def_cfa_offset 4
 727 03aa BD46     		mov	sp, r7
 728              		.cfi_def_cfa_register 13
 729              		@ sp needed
 730 03ac 80BC     		pop	{r7}
 731              		.cfi_restore 7
 732              		.cfi_def_cfa_offset 0
 733 03ae 7047     		bx	lr
 734              		.cfi_endproc
 735              	.LFE69:
 736              		.size	USART_ITConfig, .-USART_ITConfig
 737              		.align	1
 738              		.global	USART_DMACmd
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 742              		.fpu softvfp
 743              		.type	USART_DMACmd, %function
 744              	USART_DMACmd:
 745              	.LFB70:
 433:common/stm32f10x_usart.c **** 
 434:common/stm32f10x_usart.c **** /**
 435:common/stm32f10x_usart.c ****   * @brief  Enables or disables the USART\92s DMA interface.
 436:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
ARM GAS  /tmp/cc27momk.s 			page 22


 437:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 438:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 439:common/stm32f10x_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
 440:common/stm32f10x_usart.c ****   *   This parameter can be any combination of the following values:
 441:common/stm32f10x_usart.c ****   *     @arg USART_DMAReq_Tx: USART DMA transmit request
 442:common/stm32f10x_usart.c ****   *     @arg USART_DMAReq_Rx: USART DMA receive request
 443:common/stm32f10x_usart.c ****   * @param  NewState: new state of the DMA Request sources.
 444:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 445:common/stm32f10x_usart.c ****   * @note The DMA mode is not available for UART5 except in the STM32
 446:common/stm32f10x_usart.c ****   *       High density value line devices(STM32F10X_HD_VL).  
 447:common/stm32f10x_usart.c ****   * @retval None
 448:common/stm32f10x_usart.c ****   */
 449:common/stm32f10x_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
 450:common/stm32f10x_usart.c **** {
 746              		.loc 1 450 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 8
 749              		@ frame_needed = 1, uses_anonymous_args = 0
 750              		@ link register save eliminated.
 751 03b0 80B4     		push	{r7}
 752              		.cfi_def_cfa_offset 4
 753              		.cfi_offset 7, -4
 754 03b2 83B0     		sub	sp, sp, #12
 755              		.cfi_def_cfa_offset 16
 756 03b4 00AF     		add	r7, sp, #0
 757              		.cfi_def_cfa_register 7
 758 03b6 7860     		str	r0, [r7, #4]
 759 03b8 0B46     		mov	r3, r1
 760 03ba 7B80     		strh	r3, [r7, #2]	@ movhi
 761 03bc 1346     		mov	r3, r2
 762 03be 7B70     		strb	r3, [r7, #1]
 451:common/stm32f10x_usart.c ****   /* Check the parameters */
 452:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 453:common/stm32f10x_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 454:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 455:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 763              		.loc 1 455 0
 764 03c0 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 765 03c2 002B     		cmp	r3, #0
 766 03c4 08D0     		beq	.L34
 456:common/stm32f10x_usart.c ****   {
 457:common/stm32f10x_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
 458:common/stm32f10x_usart.c ****        DMAR bits in the USART CR3 register */
 459:common/stm32f10x_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 767              		.loc 1 459 0
 768 03c6 7B68     		ldr	r3, [r7, #4]
 769 03c8 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 770 03ca 9AB2     		uxth	r2, r3
 771 03cc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 772 03ce 1343     		orrs	r3, r3, r2
 773 03d0 9AB2     		uxth	r2, r3
 774 03d2 7B68     		ldr	r3, [r7, #4]
 775 03d4 9A82     		strh	r2, [r3, #20]	@ movhi
 460:common/stm32f10x_usart.c ****   }
 461:common/stm32f10x_usart.c ****   else
 462:common/stm32f10x_usart.c ****   {
 463:common/stm32f10x_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
ARM GAS  /tmp/cc27momk.s 			page 23


 464:common/stm32f10x_usart.c ****        DMAR bits in the USART CR3 register */
 465:common/stm32f10x_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 466:common/stm32f10x_usart.c ****   }
 467:common/stm32f10x_usart.c **** }
 776              		.loc 1 467 0
 777 03d6 09E0     		b	.L36
 778              	.L34:
 465:common/stm32f10x_usart.c ****   }
 779              		.loc 1 465 0
 780 03d8 7B68     		ldr	r3, [r7, #4]
 781 03da 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 782 03dc 9AB2     		uxth	r2, r3
 783 03de 7B88     		ldrh	r3, [r7, #2]	@ movhi
 784 03e0 DB43     		mvns	r3, r3
 785 03e2 9BB2     		uxth	r3, r3
 786 03e4 1340     		ands	r3, r3, r2
 787 03e6 9AB2     		uxth	r2, r3
 788 03e8 7B68     		ldr	r3, [r7, #4]
 789 03ea 9A82     		strh	r2, [r3, #20]	@ movhi
 790              	.L36:
 791              		.loc 1 467 0
 792 03ec 00BF     		nop
 793 03ee 0C37     		adds	r7, r7, #12
 794              		.cfi_def_cfa_offset 4
 795 03f0 BD46     		mov	sp, r7
 796              		.cfi_def_cfa_register 13
 797              		@ sp needed
 798 03f2 80BC     		pop	{r7}
 799              		.cfi_restore 7
 800              		.cfi_def_cfa_offset 0
 801 03f4 7047     		bx	lr
 802              		.cfi_endproc
 803              	.LFE70:
 804              		.size	USART_DMACmd, .-USART_DMACmd
 805              		.align	1
 806              		.global	USART_SetAddress
 807              		.syntax unified
 808              		.thumb
 809              		.thumb_func
 810              		.fpu softvfp
 811              		.type	USART_SetAddress, %function
 812              	USART_SetAddress:
 813              	.LFB71:
 468:common/stm32f10x_usart.c **** 
 469:common/stm32f10x_usart.c **** /**
 470:common/stm32f10x_usart.c ****   * @brief  Sets the address of the USART node.
 471:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 472:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 473:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 474:common/stm32f10x_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 475:common/stm32f10x_usart.c ****   * @retval None
 476:common/stm32f10x_usart.c ****   */
 477:common/stm32f10x_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 478:common/stm32f10x_usart.c **** {
 814              		.loc 1 478 0
 815              		.cfi_startproc
 816              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc27momk.s 			page 24


 817              		@ frame_needed = 1, uses_anonymous_args = 0
 818              		@ link register save eliminated.
 819 03f6 80B4     		push	{r7}
 820              		.cfi_def_cfa_offset 4
 821              		.cfi_offset 7, -4
 822 03f8 83B0     		sub	sp, sp, #12
 823              		.cfi_def_cfa_offset 16
 824 03fa 00AF     		add	r7, sp, #0
 825              		.cfi_def_cfa_register 7
 826 03fc 7860     		str	r0, [r7, #4]
 827 03fe 0B46     		mov	r3, r1
 828 0400 FB70     		strb	r3, [r7, #3]
 479:common/stm32f10x_usart.c ****   /* Check the parameters */
 480:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 481:common/stm32f10x_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 482:common/stm32f10x_usart.c ****     
 483:common/stm32f10x_usart.c ****   /* Clear the USART address */
 484:common/stm32f10x_usart.c ****   USARTx->CR2 &= CR2_Address_Mask;
 829              		.loc 1 484 0
 830 0402 7B68     		ldr	r3, [r7, #4]
 831 0404 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 832 0406 9BB2     		uxth	r3, r3
 833 0408 23F00F03 		bic	r3, r3, #15
 834 040c 9AB2     		uxth	r2, r3
 835 040e 7B68     		ldr	r3, [r7, #4]
 836 0410 1A82     		strh	r2, [r3, #16]	@ movhi
 485:common/stm32f10x_usart.c ****   /* Set the USART address node */
 486:common/stm32f10x_usart.c ****   USARTx->CR2 |= USART_Address;
 837              		.loc 1 486 0
 838 0412 7B68     		ldr	r3, [r7, #4]
 839 0414 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 840 0416 9AB2     		uxth	r2, r3
 841 0418 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 842 041a 9BB2     		uxth	r3, r3
 843 041c 1343     		orrs	r3, r3, r2
 844 041e 9AB2     		uxth	r2, r3
 845 0420 7B68     		ldr	r3, [r7, #4]
 846 0422 1A82     		strh	r2, [r3, #16]	@ movhi
 487:common/stm32f10x_usart.c **** }
 847              		.loc 1 487 0
 848 0424 00BF     		nop
 849 0426 0C37     		adds	r7, r7, #12
 850              		.cfi_def_cfa_offset 4
 851 0428 BD46     		mov	sp, r7
 852              		.cfi_def_cfa_register 13
 853              		@ sp needed
 854 042a 80BC     		pop	{r7}
 855              		.cfi_restore 7
 856              		.cfi_def_cfa_offset 0
 857 042c 7047     		bx	lr
 858              		.cfi_endproc
 859              	.LFE71:
 860              		.size	USART_SetAddress, .-USART_SetAddress
 861              		.align	1
 862              		.global	USART_WakeUpConfig
 863              		.syntax unified
 864              		.thumb
ARM GAS  /tmp/cc27momk.s 			page 25


 865              		.thumb_func
 866              		.fpu softvfp
 867              		.type	USART_WakeUpConfig, %function
 868              	USART_WakeUpConfig:
 869              	.LFB72:
 488:common/stm32f10x_usart.c **** 
 489:common/stm32f10x_usart.c **** /**
 490:common/stm32f10x_usart.c ****   * @brief  Selects the USART WakeUp method.
 491:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 492:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 493:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 494:common/stm32f10x_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 495:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 496:common/stm32f10x_usart.c ****   *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 497:common/stm32f10x_usart.c ****   *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 498:common/stm32f10x_usart.c ****   * @retval None
 499:common/stm32f10x_usart.c ****   */
 500:common/stm32f10x_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 501:common/stm32f10x_usart.c **** {
 870              		.loc 1 501 0
 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 8
 873              		@ frame_needed = 1, uses_anonymous_args = 0
 874              		@ link register save eliminated.
 875 042e 80B4     		push	{r7}
 876              		.cfi_def_cfa_offset 4
 877              		.cfi_offset 7, -4
 878 0430 83B0     		sub	sp, sp, #12
 879              		.cfi_def_cfa_offset 16
 880 0432 00AF     		add	r7, sp, #0
 881              		.cfi_def_cfa_register 7
 882 0434 7860     		str	r0, [r7, #4]
 883 0436 0B46     		mov	r3, r1
 884 0438 7B80     		strh	r3, [r7, #2]	@ movhi
 502:common/stm32f10x_usart.c ****   /* Check the parameters */
 503:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 504:common/stm32f10x_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 505:common/stm32f10x_usart.c ****   
 506:common/stm32f10x_usart.c ****   USARTx->CR1 &= CR1_WAKE_Mask;
 885              		.loc 1 506 0
 886 043a 7B68     		ldr	r3, [r7, #4]
 887 043c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 888 043e 9BB2     		uxth	r3, r3
 889 0440 23F40063 		bic	r3, r3, #2048
 890 0444 9AB2     		uxth	r2, r3
 891 0446 7B68     		ldr	r3, [r7, #4]
 892 0448 9A81     		strh	r2, [r3, #12]	@ movhi
 507:common/stm32f10x_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 893              		.loc 1 507 0
 894 044a 7B68     		ldr	r3, [r7, #4]
 895 044c 9B89     		ldrh	r3, [r3, #12]	@ movhi
 896 044e 9AB2     		uxth	r2, r3
 897 0450 7B88     		ldrh	r3, [r7, #2]	@ movhi
 898 0452 1343     		orrs	r3, r3, r2
 899 0454 9AB2     		uxth	r2, r3
 900 0456 7B68     		ldr	r3, [r7, #4]
 901 0458 9A81     		strh	r2, [r3, #12]	@ movhi
ARM GAS  /tmp/cc27momk.s 			page 26


 508:common/stm32f10x_usart.c **** }
 902              		.loc 1 508 0
 903 045a 00BF     		nop
 904 045c 0C37     		adds	r7, r7, #12
 905              		.cfi_def_cfa_offset 4
 906 045e BD46     		mov	sp, r7
 907              		.cfi_def_cfa_register 13
 908              		@ sp needed
 909 0460 80BC     		pop	{r7}
 910              		.cfi_restore 7
 911              		.cfi_def_cfa_offset 0
 912 0462 7047     		bx	lr
 913              		.cfi_endproc
 914              	.LFE72:
 915              		.size	USART_WakeUpConfig, .-USART_WakeUpConfig
 916              		.align	1
 917              		.global	USART_ReceiverWakeUpCmd
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu softvfp
 922              		.type	USART_ReceiverWakeUpCmd, %function
 923              	USART_ReceiverWakeUpCmd:
 924              	.LFB73:
 509:common/stm32f10x_usart.c **** 
 510:common/stm32f10x_usart.c **** /**
 511:common/stm32f10x_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 512:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 513:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 514:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 515:common/stm32f10x_usart.c ****   * @param  NewState: new state of the USART mute mode.
 516:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 517:common/stm32f10x_usart.c ****   * @retval None
 518:common/stm32f10x_usart.c ****   */
 519:common/stm32f10x_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 520:common/stm32f10x_usart.c **** {
 925              		.loc 1 520 0
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 8
 928              		@ frame_needed = 1, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 930 0464 80B4     		push	{r7}
 931              		.cfi_def_cfa_offset 4
 932              		.cfi_offset 7, -4
 933 0466 83B0     		sub	sp, sp, #12
 934              		.cfi_def_cfa_offset 16
 935 0468 00AF     		add	r7, sp, #0
 936              		.cfi_def_cfa_register 7
 937 046a 7860     		str	r0, [r7, #4]
 938 046c 0B46     		mov	r3, r1
 939 046e FB70     		strb	r3, [r7, #3]
 521:common/stm32f10x_usart.c ****   /* Check the parameters */
 522:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 523:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 524:common/stm32f10x_usart.c ****   
 525:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 940              		.loc 1 525 0
ARM GAS  /tmp/cc27momk.s 			page 27


 941 0470 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 942 0472 002B     		cmp	r3, #0
 943 0474 08D0     		beq	.L40
 526:common/stm32f10x_usart.c ****   {
 527:common/stm32f10x_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 528:common/stm32f10x_usart.c ****     USARTx->CR1 |= CR1_RWU_Set;
 944              		.loc 1 528 0
 945 0476 7B68     		ldr	r3, [r7, #4]
 946 0478 9B89     		ldrh	r3, [r3, #12]	@ movhi
 947 047a 9BB2     		uxth	r3, r3
 948 047c 43F00203 		orr	r3, r3, #2
 949 0480 9AB2     		uxth	r2, r3
 950 0482 7B68     		ldr	r3, [r7, #4]
 951 0484 9A81     		strh	r2, [r3, #12]	@ movhi
 529:common/stm32f10x_usart.c ****   }
 530:common/stm32f10x_usart.c ****   else
 531:common/stm32f10x_usart.c ****   {
 532:common/stm32f10x_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 533:common/stm32f10x_usart.c ****     USARTx->CR1 &= CR1_RWU_Reset;
 534:common/stm32f10x_usart.c ****   }
 535:common/stm32f10x_usart.c **** }
 952              		.loc 1 535 0
 953 0486 07E0     		b	.L42
 954              	.L40:
 533:common/stm32f10x_usart.c ****   }
 955              		.loc 1 533 0
 956 0488 7B68     		ldr	r3, [r7, #4]
 957 048a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 958 048c 9BB2     		uxth	r3, r3
 959 048e 23F00203 		bic	r3, r3, #2
 960 0492 9AB2     		uxth	r2, r3
 961 0494 7B68     		ldr	r3, [r7, #4]
 962 0496 9A81     		strh	r2, [r3, #12]	@ movhi
 963              	.L42:
 964              		.loc 1 535 0
 965 0498 00BF     		nop
 966 049a 0C37     		adds	r7, r7, #12
 967              		.cfi_def_cfa_offset 4
 968 049c BD46     		mov	sp, r7
 969              		.cfi_def_cfa_register 13
 970              		@ sp needed
 971 049e 80BC     		pop	{r7}
 972              		.cfi_restore 7
 973              		.cfi_def_cfa_offset 0
 974 04a0 7047     		bx	lr
 975              		.cfi_endproc
 976              	.LFE73:
 977              		.size	USART_ReceiverWakeUpCmd, .-USART_ReceiverWakeUpCmd
 978              		.align	1
 979              		.global	USART_LINBreakDetectLengthConfig
 980              		.syntax unified
 981              		.thumb
 982              		.thumb_func
 983              		.fpu softvfp
 984              		.type	USART_LINBreakDetectLengthConfig, %function
 985              	USART_LINBreakDetectLengthConfig:
 986              	.LFB74:
ARM GAS  /tmp/cc27momk.s 			page 28


 536:common/stm32f10x_usart.c **** 
 537:common/stm32f10x_usart.c **** /**
 538:common/stm32f10x_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 539:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 540:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 541:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 542:common/stm32f10x_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 543:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 544:common/stm32f10x_usart.c ****   *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 545:common/stm32f10x_usart.c ****   *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 546:common/stm32f10x_usart.c ****   * @retval None
 547:common/stm32f10x_usart.c ****   */
 548:common/stm32f10x_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 549:common/stm32f10x_usart.c **** {
 987              		.loc 1 549 0
 988              		.cfi_startproc
 989              		@ args = 0, pretend = 0, frame = 8
 990              		@ frame_needed = 1, uses_anonymous_args = 0
 991              		@ link register save eliminated.
 992 04a2 80B4     		push	{r7}
 993              		.cfi_def_cfa_offset 4
 994              		.cfi_offset 7, -4
 995 04a4 83B0     		sub	sp, sp, #12
 996              		.cfi_def_cfa_offset 16
 997 04a6 00AF     		add	r7, sp, #0
 998              		.cfi_def_cfa_register 7
 999 04a8 7860     		str	r0, [r7, #4]
 1000 04aa 0B46     		mov	r3, r1
 1001 04ac 7B80     		strh	r3, [r7, #2]	@ movhi
 550:common/stm32f10x_usart.c ****   /* Check the parameters */
 551:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 552:common/stm32f10x_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 553:common/stm32f10x_usart.c ****   
 554:common/stm32f10x_usart.c ****   USARTx->CR2 &= CR2_LBDL_Mask;
 1002              		.loc 1 554 0
 1003 04ae 7B68     		ldr	r3, [r7, #4]
 1004 04b0 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1005 04b2 9BB2     		uxth	r3, r3
 1006 04b4 23F02003 		bic	r3, r3, #32
 1007 04b8 9AB2     		uxth	r2, r3
 1008 04ba 7B68     		ldr	r3, [r7, #4]
 1009 04bc 1A82     		strh	r2, [r3, #16]	@ movhi
 555:common/stm32f10x_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1010              		.loc 1 555 0
 1011 04be 7B68     		ldr	r3, [r7, #4]
 1012 04c0 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1013 04c2 9AB2     		uxth	r2, r3
 1014 04c4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1015 04c6 1343     		orrs	r3, r3, r2
 1016 04c8 9AB2     		uxth	r2, r3
 1017 04ca 7B68     		ldr	r3, [r7, #4]
 1018 04cc 1A82     		strh	r2, [r3, #16]	@ movhi
 556:common/stm32f10x_usart.c **** }
 1019              		.loc 1 556 0
 1020 04ce 00BF     		nop
 1021 04d0 0C37     		adds	r7, r7, #12
 1022              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc27momk.s 			page 29


 1023 04d2 BD46     		mov	sp, r7
 1024              		.cfi_def_cfa_register 13
 1025              		@ sp needed
 1026 04d4 80BC     		pop	{r7}
 1027              		.cfi_restore 7
 1028              		.cfi_def_cfa_offset 0
 1029 04d6 7047     		bx	lr
 1030              		.cfi_endproc
 1031              	.LFE74:
 1032              		.size	USART_LINBreakDetectLengthConfig, .-USART_LINBreakDetectLengthConfig
 1033              		.align	1
 1034              		.global	USART_LINCmd
 1035              		.syntax unified
 1036              		.thumb
 1037              		.thumb_func
 1038              		.fpu softvfp
 1039              		.type	USART_LINCmd, %function
 1040              	USART_LINCmd:
 1041              	.LFB75:
 557:common/stm32f10x_usart.c **** 
 558:common/stm32f10x_usart.c **** /**
 559:common/stm32f10x_usart.c ****   * @brief  Enables or disables the USART\92s LIN mode.
 560:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 561:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 562:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 563:common/stm32f10x_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 564:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 565:common/stm32f10x_usart.c ****   * @retval None
 566:common/stm32f10x_usart.c ****   */
 567:common/stm32f10x_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 568:common/stm32f10x_usart.c **** {
 1042              		.loc 1 568 0
 1043              		.cfi_startproc
 1044              		@ args = 0, pretend = 0, frame = 8
 1045              		@ frame_needed = 1, uses_anonymous_args = 0
 1046              		@ link register save eliminated.
 1047 04d8 80B4     		push	{r7}
 1048              		.cfi_def_cfa_offset 4
 1049              		.cfi_offset 7, -4
 1050 04da 83B0     		sub	sp, sp, #12
 1051              		.cfi_def_cfa_offset 16
 1052 04dc 00AF     		add	r7, sp, #0
 1053              		.cfi_def_cfa_register 7
 1054 04de 7860     		str	r0, [r7, #4]
 1055 04e0 0B46     		mov	r3, r1
 1056 04e2 FB70     		strb	r3, [r7, #3]
 569:common/stm32f10x_usart.c ****   /* Check the parameters */
 570:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 571:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 572:common/stm32f10x_usart.c ****   
 573:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1057              		.loc 1 573 0
 1058 04e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1059 04e6 002B     		cmp	r3, #0
 1060 04e8 08D0     		beq	.L45
 574:common/stm32f10x_usart.c ****   {
 575:common/stm32f10x_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
ARM GAS  /tmp/cc27momk.s 			page 30


 576:common/stm32f10x_usart.c ****     USARTx->CR2 |= CR2_LINEN_Set;
 1061              		.loc 1 576 0
 1062 04ea 7B68     		ldr	r3, [r7, #4]
 1063 04ec 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1064 04ee 9BB2     		uxth	r3, r3
 1065 04f0 43F48043 		orr	r3, r3, #16384
 1066 04f4 9AB2     		uxth	r2, r3
 1067 04f6 7B68     		ldr	r3, [r7, #4]
 1068 04f8 1A82     		strh	r2, [r3, #16]	@ movhi
 577:common/stm32f10x_usart.c ****   }
 578:common/stm32f10x_usart.c ****   else
 579:common/stm32f10x_usart.c ****   {
 580:common/stm32f10x_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 581:common/stm32f10x_usart.c ****     USARTx->CR2 &= CR2_LINEN_Reset;
 582:common/stm32f10x_usart.c ****   }
 583:common/stm32f10x_usart.c **** }
 1069              		.loc 1 583 0
 1070 04fa 07E0     		b	.L47
 1071              	.L45:
 581:common/stm32f10x_usart.c ****   }
 1072              		.loc 1 581 0
 1073 04fc 7B68     		ldr	r3, [r7, #4]
 1074 04fe 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1075 0500 9BB2     		uxth	r3, r3
 1076 0502 23F48043 		bic	r3, r3, #16384
 1077 0506 9AB2     		uxth	r2, r3
 1078 0508 7B68     		ldr	r3, [r7, #4]
 1079 050a 1A82     		strh	r2, [r3, #16]	@ movhi
 1080              	.L47:
 1081              		.loc 1 583 0
 1082 050c 00BF     		nop
 1083 050e 0C37     		adds	r7, r7, #12
 1084              		.cfi_def_cfa_offset 4
 1085 0510 BD46     		mov	sp, r7
 1086              		.cfi_def_cfa_register 13
 1087              		@ sp needed
 1088 0512 80BC     		pop	{r7}
 1089              		.cfi_restore 7
 1090              		.cfi_def_cfa_offset 0
 1091 0514 7047     		bx	lr
 1092              		.cfi_endproc
 1093              	.LFE75:
 1094              		.size	USART_LINCmd, .-USART_LINCmd
 1095              		.align	1
 1096              		.global	USART_SendData
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1100              		.fpu softvfp
 1101              		.type	USART_SendData, %function
 1102              	USART_SendData:
 1103              	.LFB76:
 584:common/stm32f10x_usart.c **** 
 585:common/stm32f10x_usart.c **** /**
 586:common/stm32f10x_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 587:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 588:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
ARM GAS  /tmp/cc27momk.s 			page 31


 589:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 590:common/stm32f10x_usart.c ****   * @param  Data: the data to transmit.
 591:common/stm32f10x_usart.c ****   * @retval None
 592:common/stm32f10x_usart.c ****   */
 593:common/stm32f10x_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 594:common/stm32f10x_usart.c **** {
 1104              		.loc 1 594 0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 8
 1107              		@ frame_needed = 1, uses_anonymous_args = 0
 1108              		@ link register save eliminated.
 1109 0516 80B4     		push	{r7}
 1110              		.cfi_def_cfa_offset 4
 1111              		.cfi_offset 7, -4
 1112 0518 83B0     		sub	sp, sp, #12
 1113              		.cfi_def_cfa_offset 16
 1114 051a 00AF     		add	r7, sp, #0
 1115              		.cfi_def_cfa_register 7
 1116 051c 7860     		str	r0, [r7, #4]
 1117 051e 0B46     		mov	r3, r1
 1118 0520 7B80     		strh	r3, [r7, #2]	@ movhi
 595:common/stm32f10x_usart.c ****   /* Check the parameters */
 596:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 597:common/stm32f10x_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 598:common/stm32f10x_usart.c ****     
 599:common/stm32f10x_usart.c ****   /* Transmit Data */
 600:common/stm32f10x_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 1119              		.loc 1 600 0
 1120 0522 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1121 0524 C3F30803 		ubfx	r3, r3, #0, #9
 1122 0528 9AB2     		uxth	r2, r3
 1123 052a 7B68     		ldr	r3, [r7, #4]
 1124 052c 9A80     		strh	r2, [r3, #4]	@ movhi
 601:common/stm32f10x_usart.c **** }
 1125              		.loc 1 601 0
 1126 052e 00BF     		nop
 1127 0530 0C37     		adds	r7, r7, #12
 1128              		.cfi_def_cfa_offset 4
 1129 0532 BD46     		mov	sp, r7
 1130              		.cfi_def_cfa_register 13
 1131              		@ sp needed
 1132 0534 80BC     		pop	{r7}
 1133              		.cfi_restore 7
 1134              		.cfi_def_cfa_offset 0
 1135 0536 7047     		bx	lr
 1136              		.cfi_endproc
 1137              	.LFE76:
 1138              		.size	USART_SendData, .-USART_SendData
 1139              		.align	1
 1140              		.global	USART_ReceiveData
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1144              		.fpu softvfp
 1145              		.type	USART_ReceiveData, %function
 1146              	USART_ReceiveData:
 1147              	.LFB77:
ARM GAS  /tmp/cc27momk.s 			page 32


 602:common/stm32f10x_usart.c **** 
 603:common/stm32f10x_usart.c **** /**
 604:common/stm32f10x_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 605:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 606:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 607:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 608:common/stm32f10x_usart.c ****   * @retval The received data.
 609:common/stm32f10x_usart.c ****   */
 610:common/stm32f10x_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 611:common/stm32f10x_usart.c **** {
 1148              		.loc 1 611 0
 1149              		.cfi_startproc
 1150              		@ args = 0, pretend = 0, frame = 8
 1151              		@ frame_needed = 1, uses_anonymous_args = 0
 1152              		@ link register save eliminated.
 1153 0538 80B4     		push	{r7}
 1154              		.cfi_def_cfa_offset 4
 1155              		.cfi_offset 7, -4
 1156 053a 83B0     		sub	sp, sp, #12
 1157              		.cfi_def_cfa_offset 16
 1158 053c 00AF     		add	r7, sp, #0
 1159              		.cfi_def_cfa_register 7
 1160 053e 7860     		str	r0, [r7, #4]
 612:common/stm32f10x_usart.c ****   /* Check the parameters */
 613:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 614:common/stm32f10x_usart.c ****   
 615:common/stm32f10x_usart.c ****   /* Receive Data */
 616:common/stm32f10x_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 1161              		.loc 1 616 0
 1162 0540 7B68     		ldr	r3, [r7, #4]
 1163 0542 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1164 0544 9BB2     		uxth	r3, r3
 1165 0546 C3F30803 		ubfx	r3, r3, #0, #9
 1166 054a 9BB2     		uxth	r3, r3
 617:common/stm32f10x_usart.c **** }
 1167              		.loc 1 617 0
 1168 054c 1846     		mov	r0, r3
 1169 054e 0C37     		adds	r7, r7, #12
 1170              		.cfi_def_cfa_offset 4
 1171 0550 BD46     		mov	sp, r7
 1172              		.cfi_def_cfa_register 13
 1173              		@ sp needed
 1174 0552 80BC     		pop	{r7}
 1175              		.cfi_restore 7
 1176              		.cfi_def_cfa_offset 0
 1177 0554 7047     		bx	lr
 1178              		.cfi_endproc
 1179              	.LFE77:
 1180              		.size	USART_ReceiveData, .-USART_ReceiveData
 1181              		.align	1
 1182              		.global	USART_SendBreak
 1183              		.syntax unified
 1184              		.thumb
 1185              		.thumb_func
 1186              		.fpu softvfp
 1187              		.type	USART_SendBreak, %function
 1188              	USART_SendBreak:
ARM GAS  /tmp/cc27momk.s 			page 33


 1189              	.LFB78:
 618:common/stm32f10x_usart.c **** 
 619:common/stm32f10x_usart.c **** /**
 620:common/stm32f10x_usart.c ****   * @brief  Transmits break characters.
 621:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 622:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 623:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 624:common/stm32f10x_usart.c ****   * @retval None
 625:common/stm32f10x_usart.c ****   */
 626:common/stm32f10x_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 627:common/stm32f10x_usart.c **** {
 1190              		.loc 1 627 0
 1191              		.cfi_startproc
 1192              		@ args = 0, pretend = 0, frame = 8
 1193              		@ frame_needed = 1, uses_anonymous_args = 0
 1194              		@ link register save eliminated.
 1195 0556 80B4     		push	{r7}
 1196              		.cfi_def_cfa_offset 4
 1197              		.cfi_offset 7, -4
 1198 0558 83B0     		sub	sp, sp, #12
 1199              		.cfi_def_cfa_offset 16
 1200 055a 00AF     		add	r7, sp, #0
 1201              		.cfi_def_cfa_register 7
 1202 055c 7860     		str	r0, [r7, #4]
 628:common/stm32f10x_usart.c ****   /* Check the parameters */
 629:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 630:common/stm32f10x_usart.c ****   
 631:common/stm32f10x_usart.c ****   /* Send break characters */
 632:common/stm32f10x_usart.c ****   USARTx->CR1 |= CR1_SBK_Set;
 1203              		.loc 1 632 0
 1204 055e 7B68     		ldr	r3, [r7, #4]
 1205 0560 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1206 0562 9BB2     		uxth	r3, r3
 1207 0564 43F00103 		orr	r3, r3, #1
 1208 0568 9AB2     		uxth	r2, r3
 1209 056a 7B68     		ldr	r3, [r7, #4]
 1210 056c 9A81     		strh	r2, [r3, #12]	@ movhi
 633:common/stm32f10x_usart.c **** }
 1211              		.loc 1 633 0
 1212 056e 00BF     		nop
 1213 0570 0C37     		adds	r7, r7, #12
 1214              		.cfi_def_cfa_offset 4
 1215 0572 BD46     		mov	sp, r7
 1216              		.cfi_def_cfa_register 13
 1217              		@ sp needed
 1218 0574 80BC     		pop	{r7}
 1219              		.cfi_restore 7
 1220              		.cfi_def_cfa_offset 0
 1221 0576 7047     		bx	lr
 1222              		.cfi_endproc
 1223              	.LFE78:
 1224              		.size	USART_SendBreak, .-USART_SendBreak
 1225              		.align	1
 1226              		.global	USART_SetGuardTime
 1227              		.syntax unified
 1228              		.thumb
 1229              		.thumb_func
ARM GAS  /tmp/cc27momk.s 			page 34


 1230              		.fpu softvfp
 1231              		.type	USART_SetGuardTime, %function
 1232              	USART_SetGuardTime:
 1233              	.LFB79:
 634:common/stm32f10x_usart.c **** 
 635:common/stm32f10x_usart.c **** /**
 636:common/stm32f10x_usart.c ****   * @brief  Sets the specified USART guard time.
 637:common/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 638:common/stm32f10x_usart.c ****   * @param  USART_GuardTime: specifies the guard time.
 639:common/stm32f10x_usart.c ****   * @note The guard time bits are not available for UART4 and UART5.   
 640:common/stm32f10x_usart.c ****   * @retval None
 641:common/stm32f10x_usart.c ****   */
 642:common/stm32f10x_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 643:common/stm32f10x_usart.c **** {    
 1234              		.loc 1 643 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 8
 1237              		@ frame_needed = 1, uses_anonymous_args = 0
 1238              		@ link register save eliminated.
 1239 0578 80B4     		push	{r7}
 1240              		.cfi_def_cfa_offset 4
 1241              		.cfi_offset 7, -4
 1242 057a 83B0     		sub	sp, sp, #12
 1243              		.cfi_def_cfa_offset 16
 1244 057c 00AF     		add	r7, sp, #0
 1245              		.cfi_def_cfa_register 7
 1246 057e 7860     		str	r0, [r7, #4]
 1247 0580 0B46     		mov	r3, r1
 1248 0582 FB70     		strb	r3, [r7, #3]
 644:common/stm32f10x_usart.c ****   /* Check the parameters */
 645:common/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 646:common/stm32f10x_usart.c ****   
 647:common/stm32f10x_usart.c ****   /* Clear the USART Guard time */
 648:common/stm32f10x_usart.c ****   USARTx->GTPR &= GTPR_LSB_Mask;
 1249              		.loc 1 648 0
 1250 0584 7B68     		ldr	r3, [r7, #4]
 1251 0586 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1252 0588 9BB2     		uxth	r3, r3
 1253 058a DBB2     		uxtb	r3, r3
 1254 058c 9AB2     		uxth	r2, r3
 1255 058e 7B68     		ldr	r3, [r7, #4]
 1256 0590 1A83     		strh	r2, [r3, #24]	@ movhi
 649:common/stm32f10x_usart.c ****   /* Set the USART guard time */
 650:common/stm32f10x_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1257              		.loc 1 650 0
 1258 0592 7B68     		ldr	r3, [r7, #4]
 1259 0594 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1260 0596 9AB2     		uxth	r2, r3
 1261 0598 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1262 059a 9BB2     		uxth	r3, r3
 1263 059c 1B02     		lsls	r3, r3, #8
 1264 059e 9BB2     		uxth	r3, r3
 1265 05a0 1343     		orrs	r3, r3, r2
 1266 05a2 9AB2     		uxth	r2, r3
 1267 05a4 7B68     		ldr	r3, [r7, #4]
 1268 05a6 1A83     		strh	r2, [r3, #24]	@ movhi
 651:common/stm32f10x_usart.c **** }
ARM GAS  /tmp/cc27momk.s 			page 35


 1269              		.loc 1 651 0
 1270 05a8 00BF     		nop
 1271 05aa 0C37     		adds	r7, r7, #12
 1272              		.cfi_def_cfa_offset 4
 1273 05ac BD46     		mov	sp, r7
 1274              		.cfi_def_cfa_register 13
 1275              		@ sp needed
 1276 05ae 80BC     		pop	{r7}
 1277              		.cfi_restore 7
 1278              		.cfi_def_cfa_offset 0
 1279 05b0 7047     		bx	lr
 1280              		.cfi_endproc
 1281              	.LFE79:
 1282              		.size	USART_SetGuardTime, .-USART_SetGuardTime
 1283              		.align	1
 1284              		.global	USART_SetPrescaler
 1285              		.syntax unified
 1286              		.thumb
 1287              		.thumb_func
 1288              		.fpu softvfp
 1289              		.type	USART_SetPrescaler, %function
 1290              	USART_SetPrescaler:
 1291              	.LFB80:
 652:common/stm32f10x_usart.c **** 
 653:common/stm32f10x_usart.c **** /**
 654:common/stm32f10x_usart.c ****   * @brief  Sets the system clock prescaler.
 655:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 656:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 657:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 658:common/stm32f10x_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock.  
 659:common/stm32f10x_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.
 660:common/stm32f10x_usart.c ****   * @retval None
 661:common/stm32f10x_usart.c ****   */
 662:common/stm32f10x_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 663:common/stm32f10x_usart.c **** { 
 1292              		.loc 1 663 0
 1293              		.cfi_startproc
 1294              		@ args = 0, pretend = 0, frame = 8
 1295              		@ frame_needed = 1, uses_anonymous_args = 0
 1296              		@ link register save eliminated.
 1297 05b2 80B4     		push	{r7}
 1298              		.cfi_def_cfa_offset 4
 1299              		.cfi_offset 7, -4
 1300 05b4 83B0     		sub	sp, sp, #12
 1301              		.cfi_def_cfa_offset 16
 1302 05b6 00AF     		add	r7, sp, #0
 1303              		.cfi_def_cfa_register 7
 1304 05b8 7860     		str	r0, [r7, #4]
 1305 05ba 0B46     		mov	r3, r1
 1306 05bc FB70     		strb	r3, [r7, #3]
 664:common/stm32f10x_usart.c ****   /* Check the parameters */
 665:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 666:common/stm32f10x_usart.c ****   
 667:common/stm32f10x_usart.c ****   /* Clear the USART prescaler */
 668:common/stm32f10x_usart.c ****   USARTx->GTPR &= GTPR_MSB_Mask;
 1307              		.loc 1 668 0
 1308 05be 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc27momk.s 			page 36


 1309 05c0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1310 05c2 9BB2     		uxth	r3, r3
 1311 05c4 23F0FF03 		bic	r3, r3, #255
 1312 05c8 9AB2     		uxth	r2, r3
 1313 05ca 7B68     		ldr	r3, [r7, #4]
 1314 05cc 1A83     		strh	r2, [r3, #24]	@ movhi
 669:common/stm32f10x_usart.c ****   /* Set the USART prescaler */
 670:common/stm32f10x_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 1315              		.loc 1 670 0
 1316 05ce 7B68     		ldr	r3, [r7, #4]
 1317 05d0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1318 05d2 9AB2     		uxth	r2, r3
 1319 05d4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1320 05d6 9BB2     		uxth	r3, r3
 1321 05d8 1343     		orrs	r3, r3, r2
 1322 05da 9AB2     		uxth	r2, r3
 1323 05dc 7B68     		ldr	r3, [r7, #4]
 1324 05de 1A83     		strh	r2, [r3, #24]	@ movhi
 671:common/stm32f10x_usart.c **** }
 1325              		.loc 1 671 0
 1326 05e0 00BF     		nop
 1327 05e2 0C37     		adds	r7, r7, #12
 1328              		.cfi_def_cfa_offset 4
 1329 05e4 BD46     		mov	sp, r7
 1330              		.cfi_def_cfa_register 13
 1331              		@ sp needed
 1332 05e6 80BC     		pop	{r7}
 1333              		.cfi_restore 7
 1334              		.cfi_def_cfa_offset 0
 1335 05e8 7047     		bx	lr
 1336              		.cfi_endproc
 1337              	.LFE80:
 1338              		.size	USART_SetPrescaler, .-USART_SetPrescaler
 1339              		.align	1
 1340              		.global	USART_SmartCardCmd
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu softvfp
 1345              		.type	USART_SmartCardCmd, %function
 1346              	USART_SmartCardCmd:
 1347              	.LFB81:
 672:common/stm32f10x_usart.c **** 
 673:common/stm32f10x_usart.c **** /**
 674:common/stm32f10x_usart.c ****   * @brief  Enables or disables the USART\92s Smart Card mode.
 675:common/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 676:common/stm32f10x_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 677:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.     
 678:common/stm32f10x_usart.c ****   * @note The Smart Card mode is not available for UART4 and UART5. 
 679:common/stm32f10x_usart.c ****   * @retval None
 680:common/stm32f10x_usart.c ****   */
 681:common/stm32f10x_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 682:common/stm32f10x_usart.c **** {
 1348              		.loc 1 682 0
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 8
 1351              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc27momk.s 			page 37


 1352              		@ link register save eliminated.
 1353 05ea 80B4     		push	{r7}
 1354              		.cfi_def_cfa_offset 4
 1355              		.cfi_offset 7, -4
 1356 05ec 83B0     		sub	sp, sp, #12
 1357              		.cfi_def_cfa_offset 16
 1358 05ee 00AF     		add	r7, sp, #0
 1359              		.cfi_def_cfa_register 7
 1360 05f0 7860     		str	r0, [r7, #4]
 1361 05f2 0B46     		mov	r3, r1
 1362 05f4 FB70     		strb	r3, [r7, #3]
 683:common/stm32f10x_usart.c ****   /* Check the parameters */
 684:common/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 685:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 686:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1363              		.loc 1 686 0
 1364 05f6 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1365 05f8 002B     		cmp	r3, #0
 1366 05fa 08D0     		beq	.L55
 687:common/stm32f10x_usart.c ****   {
 688:common/stm32f10x_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 689:common/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_SCEN_Set;
 1367              		.loc 1 689 0
 1368 05fc 7B68     		ldr	r3, [r7, #4]
 1369 05fe 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1370 0600 9BB2     		uxth	r3, r3
 1371 0602 43F02003 		orr	r3, r3, #32
 1372 0606 9AB2     		uxth	r2, r3
 1373 0608 7B68     		ldr	r3, [r7, #4]
 1374 060a 9A82     		strh	r2, [r3, #20]	@ movhi
 690:common/stm32f10x_usart.c ****   }
 691:common/stm32f10x_usart.c ****   else
 692:common/stm32f10x_usart.c ****   {
 693:common/stm32f10x_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 694:common/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_SCEN_Reset;
 695:common/stm32f10x_usart.c ****   }
 696:common/stm32f10x_usart.c **** }
 1375              		.loc 1 696 0
 1376 060c 07E0     		b	.L57
 1377              	.L55:
 694:common/stm32f10x_usart.c ****   }
 1378              		.loc 1 694 0
 1379 060e 7B68     		ldr	r3, [r7, #4]
 1380 0610 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1381 0612 9BB2     		uxth	r3, r3
 1382 0614 23F02003 		bic	r3, r3, #32
 1383 0618 9AB2     		uxth	r2, r3
 1384 061a 7B68     		ldr	r3, [r7, #4]
 1385 061c 9A82     		strh	r2, [r3, #20]	@ movhi
 1386              	.L57:
 1387              		.loc 1 696 0
 1388 061e 00BF     		nop
 1389 0620 0C37     		adds	r7, r7, #12
 1390              		.cfi_def_cfa_offset 4
 1391 0622 BD46     		mov	sp, r7
 1392              		.cfi_def_cfa_register 13
 1393              		@ sp needed
ARM GAS  /tmp/cc27momk.s 			page 38


 1394 0624 80BC     		pop	{r7}
 1395              		.cfi_restore 7
 1396              		.cfi_def_cfa_offset 0
 1397 0626 7047     		bx	lr
 1398              		.cfi_endproc
 1399              	.LFE81:
 1400              		.size	USART_SmartCardCmd, .-USART_SmartCardCmd
 1401              		.align	1
 1402              		.global	USART_SmartCardNACKCmd
 1403              		.syntax unified
 1404              		.thumb
 1405              		.thumb_func
 1406              		.fpu softvfp
 1407              		.type	USART_SmartCardNACKCmd, %function
 1408              	USART_SmartCardNACKCmd:
 1409              	.LFB82:
 697:common/stm32f10x_usart.c **** 
 698:common/stm32f10x_usart.c **** /**
 699:common/stm32f10x_usart.c ****   * @brief  Enables or disables NACK transmission.
 700:common/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral. 
 701:common/stm32f10x_usart.c ****   * @param  NewState: new state of the NACK transmission.
 702:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
 703:common/stm32f10x_usart.c ****   * @note The Smart Card mode is not available for UART4 and UART5.
 704:common/stm32f10x_usart.c ****   * @retval None
 705:common/stm32f10x_usart.c ****   */
 706:common/stm32f10x_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 707:common/stm32f10x_usart.c **** {
 1410              		.loc 1 707 0
 1411              		.cfi_startproc
 1412              		@ args = 0, pretend = 0, frame = 8
 1413              		@ frame_needed = 1, uses_anonymous_args = 0
 1414              		@ link register save eliminated.
 1415 0628 80B4     		push	{r7}
 1416              		.cfi_def_cfa_offset 4
 1417              		.cfi_offset 7, -4
 1418 062a 83B0     		sub	sp, sp, #12
 1419              		.cfi_def_cfa_offset 16
 1420 062c 00AF     		add	r7, sp, #0
 1421              		.cfi_def_cfa_register 7
 1422 062e 7860     		str	r0, [r7, #4]
 1423 0630 0B46     		mov	r3, r1
 1424 0632 FB70     		strb	r3, [r7, #3]
 708:common/stm32f10x_usart.c ****   /* Check the parameters */
 709:common/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));  
 710:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 711:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1425              		.loc 1 711 0
 1426 0634 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1427 0636 002B     		cmp	r3, #0
 1428 0638 08D0     		beq	.L59
 712:common/stm32f10x_usart.c ****   {
 713:common/stm32f10x_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 714:common/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_NACK_Set;
 1429              		.loc 1 714 0
 1430 063a 7B68     		ldr	r3, [r7, #4]
 1431 063c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1432 063e 9BB2     		uxth	r3, r3
ARM GAS  /tmp/cc27momk.s 			page 39


 1433 0640 43F01003 		orr	r3, r3, #16
 1434 0644 9AB2     		uxth	r2, r3
 1435 0646 7B68     		ldr	r3, [r7, #4]
 1436 0648 9A82     		strh	r2, [r3, #20]	@ movhi
 715:common/stm32f10x_usart.c ****   }
 716:common/stm32f10x_usart.c ****   else
 717:common/stm32f10x_usart.c ****   {
 718:common/stm32f10x_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 719:common/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_NACK_Reset;
 720:common/stm32f10x_usart.c ****   }
 721:common/stm32f10x_usart.c **** }
 1437              		.loc 1 721 0
 1438 064a 07E0     		b	.L61
 1439              	.L59:
 719:common/stm32f10x_usart.c ****   }
 1440              		.loc 1 719 0
 1441 064c 7B68     		ldr	r3, [r7, #4]
 1442 064e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1443 0650 9BB2     		uxth	r3, r3
 1444 0652 23F01003 		bic	r3, r3, #16
 1445 0656 9AB2     		uxth	r2, r3
 1446 0658 7B68     		ldr	r3, [r7, #4]
 1447 065a 9A82     		strh	r2, [r3, #20]	@ movhi
 1448              	.L61:
 1449              		.loc 1 721 0
 1450 065c 00BF     		nop
 1451 065e 0C37     		adds	r7, r7, #12
 1452              		.cfi_def_cfa_offset 4
 1453 0660 BD46     		mov	sp, r7
 1454              		.cfi_def_cfa_register 13
 1455              		@ sp needed
 1456 0662 80BC     		pop	{r7}
 1457              		.cfi_restore 7
 1458              		.cfi_def_cfa_offset 0
 1459 0664 7047     		bx	lr
 1460              		.cfi_endproc
 1461              	.LFE82:
 1462              		.size	USART_SmartCardNACKCmd, .-USART_SmartCardNACKCmd
 1463              		.align	1
 1464              		.global	USART_HalfDuplexCmd
 1465              		.syntax unified
 1466              		.thumb
 1467              		.thumb_func
 1468              		.fpu softvfp
 1469              		.type	USART_HalfDuplexCmd, %function
 1470              	USART_HalfDuplexCmd:
 1471              	.LFB83:
 722:common/stm32f10x_usart.c **** 
 723:common/stm32f10x_usart.c **** /**
 724:common/stm32f10x_usart.c ****   * @brief  Enables or disables the USART\92s Half Duplex communication.
 725:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 726:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 727:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 728:common/stm32f10x_usart.c ****   * @param  NewState: new state of the USART Communication.
 729:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 730:common/stm32f10x_usart.c ****   * @retval None
 731:common/stm32f10x_usart.c ****   */
ARM GAS  /tmp/cc27momk.s 			page 40


 732:common/stm32f10x_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 733:common/stm32f10x_usart.c **** {
 1472              		.loc 1 733 0
 1473              		.cfi_startproc
 1474              		@ args = 0, pretend = 0, frame = 8
 1475              		@ frame_needed = 1, uses_anonymous_args = 0
 1476              		@ link register save eliminated.
 1477 0666 80B4     		push	{r7}
 1478              		.cfi_def_cfa_offset 4
 1479              		.cfi_offset 7, -4
 1480 0668 83B0     		sub	sp, sp, #12
 1481              		.cfi_def_cfa_offset 16
 1482 066a 00AF     		add	r7, sp, #0
 1483              		.cfi_def_cfa_register 7
 1484 066c 7860     		str	r0, [r7, #4]
 1485 066e 0B46     		mov	r3, r1
 1486 0670 FB70     		strb	r3, [r7, #3]
 734:common/stm32f10x_usart.c ****   /* Check the parameters */
 735:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 736:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 737:common/stm32f10x_usart.c ****   
 738:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1487              		.loc 1 738 0
 1488 0672 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1489 0674 002B     		cmp	r3, #0
 1490 0676 08D0     		beq	.L63
 739:common/stm32f10x_usart.c ****   {
 740:common/stm32f10x_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 741:common/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_HDSEL_Set;
 1491              		.loc 1 741 0
 1492 0678 7B68     		ldr	r3, [r7, #4]
 1493 067a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1494 067c 9BB2     		uxth	r3, r3
 1495 067e 43F00803 		orr	r3, r3, #8
 1496 0682 9AB2     		uxth	r2, r3
 1497 0684 7B68     		ldr	r3, [r7, #4]
 1498 0686 9A82     		strh	r2, [r3, #20]	@ movhi
 742:common/stm32f10x_usart.c ****   }
 743:common/stm32f10x_usart.c ****   else
 744:common/stm32f10x_usart.c ****   {
 745:common/stm32f10x_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 746:common/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_HDSEL_Reset;
 747:common/stm32f10x_usart.c ****   }
 748:common/stm32f10x_usart.c **** }
 1499              		.loc 1 748 0
 1500 0688 07E0     		b	.L65
 1501              	.L63:
 746:common/stm32f10x_usart.c ****   }
 1502              		.loc 1 746 0
 1503 068a 7B68     		ldr	r3, [r7, #4]
 1504 068c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1505 068e 9BB2     		uxth	r3, r3
 1506 0690 23F00803 		bic	r3, r3, #8
 1507 0694 9AB2     		uxth	r2, r3
 1508 0696 7B68     		ldr	r3, [r7, #4]
 1509 0698 9A82     		strh	r2, [r3, #20]	@ movhi
 1510              	.L65:
ARM GAS  /tmp/cc27momk.s 			page 41


 1511              		.loc 1 748 0
 1512 069a 00BF     		nop
 1513 069c 0C37     		adds	r7, r7, #12
 1514              		.cfi_def_cfa_offset 4
 1515 069e BD46     		mov	sp, r7
 1516              		.cfi_def_cfa_register 13
 1517              		@ sp needed
 1518 06a0 80BC     		pop	{r7}
 1519              		.cfi_restore 7
 1520              		.cfi_def_cfa_offset 0
 1521 06a2 7047     		bx	lr
 1522              		.cfi_endproc
 1523              	.LFE83:
 1524              		.size	USART_HalfDuplexCmd, .-USART_HalfDuplexCmd
 1525              		.align	1
 1526              		.global	USART_OverSampling8Cmd
 1527              		.syntax unified
 1528              		.thumb
 1529              		.thumb_func
 1530              		.fpu softvfp
 1531              		.type	USART_OverSampling8Cmd, %function
 1532              	USART_OverSampling8Cmd:
 1533              	.LFB84:
 749:common/stm32f10x_usart.c **** 
 750:common/stm32f10x_usart.c **** 
 751:common/stm32f10x_usart.c **** /**
 752:common/stm32f10x_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 753:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral.
 754:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 755:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 756:common/stm32f10x_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 757:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 758:common/stm32f10x_usart.c ****   * @note
 759:common/stm32f10x_usart.c ****   *     This function has to be called before calling USART_Init()
 760:common/stm32f10x_usart.c ****   *     function in order to have correct baudrate Divider value.   
 761:common/stm32f10x_usart.c ****   * @retval None
 762:common/stm32f10x_usart.c ****   */
 763:common/stm32f10x_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 764:common/stm32f10x_usart.c **** {
 1534              		.loc 1 764 0
 1535              		.cfi_startproc
 1536              		@ args = 0, pretend = 0, frame = 8
 1537              		@ frame_needed = 1, uses_anonymous_args = 0
 1538              		@ link register save eliminated.
 1539 06a4 80B4     		push	{r7}
 1540              		.cfi_def_cfa_offset 4
 1541              		.cfi_offset 7, -4
 1542 06a6 83B0     		sub	sp, sp, #12
 1543              		.cfi_def_cfa_offset 16
 1544 06a8 00AF     		add	r7, sp, #0
 1545              		.cfi_def_cfa_register 7
 1546 06aa 7860     		str	r0, [r7, #4]
 1547 06ac 0B46     		mov	r3, r1
 1548 06ae FB70     		strb	r3, [r7, #3]
 765:common/stm32f10x_usart.c ****   /* Check the parameters */
 766:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 767:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/cc27momk.s 			page 42


 768:common/stm32f10x_usart.c ****   
 769:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1549              		.loc 1 769 0
 1550 06b0 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1551 06b2 002B     		cmp	r3, #0
 1552 06b4 0AD0     		beq	.L67
 770:common/stm32f10x_usart.c ****   {
 771:common/stm32f10x_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 772:common/stm32f10x_usart.c ****     USARTx->CR1 |= CR1_OVER8_Set;
 1553              		.loc 1 772 0
 1554 06b6 7B68     		ldr	r3, [r7, #4]
 1555 06b8 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1556 06ba 9BB2     		uxth	r3, r3
 1557 06bc 6FEA4343 		mvn	r3, r3, lsl #17
 1558 06c0 6FEA5343 		mvn	r3, r3, lsr #17
 1559 06c4 9AB2     		uxth	r2, r3
 1560 06c6 7B68     		ldr	r3, [r7, #4]
 1561 06c8 9A81     		strh	r2, [r3, #12]	@ movhi
 773:common/stm32f10x_usart.c ****   }
 774:common/stm32f10x_usart.c ****   else
 775:common/stm32f10x_usart.c ****   {
 776:common/stm32f10x_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 777:common/stm32f10x_usart.c ****     USARTx->CR1 &= CR1_OVER8_Reset;
 778:common/stm32f10x_usart.c ****   }
 779:common/stm32f10x_usart.c **** }
 1562              		.loc 1 779 0
 1563 06ca 07E0     		b	.L69
 1564              	.L67:
 777:common/stm32f10x_usart.c ****   }
 1565              		.loc 1 777 0
 1566 06cc 7B68     		ldr	r3, [r7, #4]
 1567 06ce 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1568 06d0 9BB2     		uxth	r3, r3
 1569 06d2 C3F30E03 		ubfx	r3, r3, #0, #15
 1570 06d6 9AB2     		uxth	r2, r3
 1571 06d8 7B68     		ldr	r3, [r7, #4]
 1572 06da 9A81     		strh	r2, [r3, #12]	@ movhi
 1573              	.L69:
 1574              		.loc 1 779 0
 1575 06dc 00BF     		nop
 1576 06de 0C37     		adds	r7, r7, #12
 1577              		.cfi_def_cfa_offset 4
 1578 06e0 BD46     		mov	sp, r7
 1579              		.cfi_def_cfa_register 13
 1580              		@ sp needed
 1581 06e2 80BC     		pop	{r7}
 1582              		.cfi_restore 7
 1583              		.cfi_def_cfa_offset 0
 1584 06e4 7047     		bx	lr
 1585              		.cfi_endproc
 1586              	.LFE84:
 1587              		.size	USART_OverSampling8Cmd, .-USART_OverSampling8Cmd
 1588              		.align	1
 1589              		.global	USART_OneBitMethodCmd
 1590              		.syntax unified
 1591              		.thumb
 1592              		.thumb_func
ARM GAS  /tmp/cc27momk.s 			page 43


 1593              		.fpu softvfp
 1594              		.type	USART_OneBitMethodCmd, %function
 1595              	USART_OneBitMethodCmd:
 1596              	.LFB85:
 780:common/stm32f10x_usart.c **** 
 781:common/stm32f10x_usart.c **** /**
 782:common/stm32f10x_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 783:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral.
 784:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 785:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 786:common/stm32f10x_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 787:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 788:common/stm32f10x_usart.c ****   * @retval None
 789:common/stm32f10x_usart.c ****   */
 790:common/stm32f10x_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 791:common/stm32f10x_usart.c **** {
 1597              		.loc 1 791 0
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 8
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601              		@ link register save eliminated.
 1602 06e6 80B4     		push	{r7}
 1603              		.cfi_def_cfa_offset 4
 1604              		.cfi_offset 7, -4
 1605 06e8 83B0     		sub	sp, sp, #12
 1606              		.cfi_def_cfa_offset 16
 1607 06ea 00AF     		add	r7, sp, #0
 1608              		.cfi_def_cfa_register 7
 1609 06ec 7860     		str	r0, [r7, #4]
 1610 06ee 0B46     		mov	r3, r1
 1611 06f0 FB70     		strb	r3, [r7, #3]
 792:common/stm32f10x_usart.c ****   /* Check the parameters */
 793:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 794:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 795:common/stm32f10x_usart.c ****   
 796:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1612              		.loc 1 796 0
 1613 06f2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1614 06f4 002B     		cmp	r3, #0
 1615 06f6 08D0     		beq	.L71
 797:common/stm32f10x_usart.c ****   {
 798:common/stm32f10x_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 799:common/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_ONEBITE_Set;
 1616              		.loc 1 799 0
 1617 06f8 7B68     		ldr	r3, [r7, #4]
 1618 06fa 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1619 06fc 9BB2     		uxth	r3, r3
 1620 06fe 43F40063 		orr	r3, r3, #2048
 1621 0702 9AB2     		uxth	r2, r3
 1622 0704 7B68     		ldr	r3, [r7, #4]
 1623 0706 9A82     		strh	r2, [r3, #20]	@ movhi
 800:common/stm32f10x_usart.c ****   }
 801:common/stm32f10x_usart.c ****   else
 802:common/stm32f10x_usart.c ****   {
 803:common/stm32f10x_usart.c ****     /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
 804:common/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_ONEBITE_Reset;
 805:common/stm32f10x_usart.c ****   }
ARM GAS  /tmp/cc27momk.s 			page 44


 806:common/stm32f10x_usart.c **** }
 1624              		.loc 1 806 0
 1625 0708 07E0     		b	.L73
 1626              	.L71:
 804:common/stm32f10x_usart.c ****   }
 1627              		.loc 1 804 0
 1628 070a 7B68     		ldr	r3, [r7, #4]
 1629 070c 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1630 070e 9BB2     		uxth	r3, r3
 1631 0710 23F40063 		bic	r3, r3, #2048
 1632 0714 9AB2     		uxth	r2, r3
 1633 0716 7B68     		ldr	r3, [r7, #4]
 1634 0718 9A82     		strh	r2, [r3, #20]	@ movhi
 1635              	.L73:
 1636              		.loc 1 806 0
 1637 071a 00BF     		nop
 1638 071c 0C37     		adds	r7, r7, #12
 1639              		.cfi_def_cfa_offset 4
 1640 071e BD46     		mov	sp, r7
 1641              		.cfi_def_cfa_register 13
 1642              		@ sp needed
 1643 0720 80BC     		pop	{r7}
 1644              		.cfi_restore 7
 1645              		.cfi_def_cfa_offset 0
 1646 0722 7047     		bx	lr
 1647              		.cfi_endproc
 1648              	.LFE85:
 1649              		.size	USART_OneBitMethodCmd, .-USART_OneBitMethodCmd
 1650              		.align	1
 1651              		.global	USART_IrDAConfig
 1652              		.syntax unified
 1653              		.thumb
 1654              		.thumb_func
 1655              		.fpu softvfp
 1656              		.type	USART_IrDAConfig, %function
 1657              	USART_IrDAConfig:
 1658              	.LFB86:
 807:common/stm32f10x_usart.c **** 
 808:common/stm32f10x_usart.c **** /**
 809:common/stm32f10x_usart.c ****   * @brief  Configures the USART's IrDA interface.
 810:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 811:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 812:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 813:common/stm32f10x_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
 814:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 815:common/stm32f10x_usart.c ****   *     @arg USART_IrDAMode_LowPower
 816:common/stm32f10x_usart.c ****   *     @arg USART_IrDAMode_Normal
 817:common/stm32f10x_usart.c ****   * @retval None
 818:common/stm32f10x_usart.c ****   */
 819:common/stm32f10x_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
 820:common/stm32f10x_usart.c **** {
 1659              		.loc 1 820 0
 1660              		.cfi_startproc
 1661              		@ args = 0, pretend = 0, frame = 8
 1662              		@ frame_needed = 1, uses_anonymous_args = 0
 1663              		@ link register save eliminated.
 1664 0724 80B4     		push	{r7}
ARM GAS  /tmp/cc27momk.s 			page 45


 1665              		.cfi_def_cfa_offset 4
 1666              		.cfi_offset 7, -4
 1667 0726 83B0     		sub	sp, sp, #12
 1668              		.cfi_def_cfa_offset 16
 1669 0728 00AF     		add	r7, sp, #0
 1670              		.cfi_def_cfa_register 7
 1671 072a 7860     		str	r0, [r7, #4]
 1672 072c 0B46     		mov	r3, r1
 1673 072e 7B80     		strh	r3, [r7, #2]	@ movhi
 821:common/stm32f10x_usart.c ****   /* Check the parameters */
 822:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 823:common/stm32f10x_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
 824:common/stm32f10x_usart.c ****     
 825:common/stm32f10x_usart.c ****   USARTx->CR3 &= CR3_IRLP_Mask;
 1674              		.loc 1 825 0
 1675 0730 7B68     		ldr	r3, [r7, #4]
 1676 0732 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1677 0734 9BB2     		uxth	r3, r3
 1678 0736 23F00403 		bic	r3, r3, #4
 1679 073a 9AB2     		uxth	r2, r3
 1680 073c 7B68     		ldr	r3, [r7, #4]
 1681 073e 9A82     		strh	r2, [r3, #20]	@ movhi
 826:common/stm32f10x_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1682              		.loc 1 826 0
 1683 0740 7B68     		ldr	r3, [r7, #4]
 1684 0742 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1685 0744 9AB2     		uxth	r2, r3
 1686 0746 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1687 0748 1343     		orrs	r3, r3, r2
 1688 074a 9AB2     		uxth	r2, r3
 1689 074c 7B68     		ldr	r3, [r7, #4]
 1690 074e 9A82     		strh	r2, [r3, #20]	@ movhi
 827:common/stm32f10x_usart.c **** }
 1691              		.loc 1 827 0
 1692 0750 00BF     		nop
 1693 0752 0C37     		adds	r7, r7, #12
 1694              		.cfi_def_cfa_offset 4
 1695 0754 BD46     		mov	sp, r7
 1696              		.cfi_def_cfa_register 13
 1697              		@ sp needed
 1698 0756 80BC     		pop	{r7}
 1699              		.cfi_restore 7
 1700              		.cfi_def_cfa_offset 0
 1701 0758 7047     		bx	lr
 1702              		.cfi_endproc
 1703              	.LFE86:
 1704              		.size	USART_IrDAConfig, .-USART_IrDAConfig
 1705              		.align	1
 1706              		.global	USART_IrDACmd
 1707              		.syntax unified
 1708              		.thumb
 1709              		.thumb_func
 1710              		.fpu softvfp
 1711              		.type	USART_IrDACmd, %function
 1712              	USART_IrDACmd:
 1713              	.LFB87:
 828:common/stm32f10x_usart.c **** 
ARM GAS  /tmp/cc27momk.s 			page 46


 829:common/stm32f10x_usart.c **** /**
 830:common/stm32f10x_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
 831:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 832:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 833:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 834:common/stm32f10x_usart.c ****   * @param  NewState: new state of the IrDA mode.
 835:common/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 836:common/stm32f10x_usart.c ****   * @retval None
 837:common/stm32f10x_usart.c ****   */
 838:common/stm32f10x_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
 839:common/stm32f10x_usart.c **** {
 1714              		.loc 1 839 0
 1715              		.cfi_startproc
 1716              		@ args = 0, pretend = 0, frame = 8
 1717              		@ frame_needed = 1, uses_anonymous_args = 0
 1718              		@ link register save eliminated.
 1719 075a 80B4     		push	{r7}
 1720              		.cfi_def_cfa_offset 4
 1721              		.cfi_offset 7, -4
 1722 075c 83B0     		sub	sp, sp, #12
 1723              		.cfi_def_cfa_offset 16
 1724 075e 00AF     		add	r7, sp, #0
 1725              		.cfi_def_cfa_register 7
 1726 0760 7860     		str	r0, [r7, #4]
 1727 0762 0B46     		mov	r3, r1
 1728 0764 FB70     		strb	r3, [r7, #3]
 840:common/stm32f10x_usart.c ****   /* Check the parameters */
 841:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 842:common/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 843:common/stm32f10x_usart.c ****     
 844:common/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1729              		.loc 1 844 0
 1730 0766 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1731 0768 002B     		cmp	r3, #0
 1732 076a 08D0     		beq	.L76
 845:common/stm32f10x_usart.c ****   {
 846:common/stm32f10x_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
 847:common/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_IREN_Set;
 1733              		.loc 1 847 0
 1734 076c 7B68     		ldr	r3, [r7, #4]
 1735 076e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1736 0770 9BB2     		uxth	r3, r3
 1737 0772 43F00203 		orr	r3, r3, #2
 1738 0776 9AB2     		uxth	r2, r3
 1739 0778 7B68     		ldr	r3, [r7, #4]
 1740 077a 9A82     		strh	r2, [r3, #20]	@ movhi
 848:common/stm32f10x_usart.c ****   }
 849:common/stm32f10x_usart.c ****   else
 850:common/stm32f10x_usart.c ****   {
 851:common/stm32f10x_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
 852:common/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_IREN_Reset;
 853:common/stm32f10x_usart.c ****   }
 854:common/stm32f10x_usart.c **** }
 1741              		.loc 1 854 0
 1742 077c 07E0     		b	.L78
 1743              	.L76:
 852:common/stm32f10x_usart.c ****   }
ARM GAS  /tmp/cc27momk.s 			page 47


 1744              		.loc 1 852 0
 1745 077e 7B68     		ldr	r3, [r7, #4]
 1746 0780 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1747 0782 9BB2     		uxth	r3, r3
 1748 0784 23F00203 		bic	r3, r3, #2
 1749 0788 9AB2     		uxth	r2, r3
 1750 078a 7B68     		ldr	r3, [r7, #4]
 1751 078c 9A82     		strh	r2, [r3, #20]	@ movhi
 1752              	.L78:
 1753              		.loc 1 854 0
 1754 078e 00BF     		nop
 1755 0790 0C37     		adds	r7, r7, #12
 1756              		.cfi_def_cfa_offset 4
 1757 0792 BD46     		mov	sp, r7
 1758              		.cfi_def_cfa_register 13
 1759              		@ sp needed
 1760 0794 80BC     		pop	{r7}
 1761              		.cfi_restore 7
 1762              		.cfi_def_cfa_offset 0
 1763 0796 7047     		bx	lr
 1764              		.cfi_endproc
 1765              	.LFE87:
 1766              		.size	USART_IrDACmd, .-USART_IrDACmd
 1767              		.align	1
 1768              		.global	USART_GetFlagStatus
 1769              		.syntax unified
 1770              		.thumb
 1771              		.thumb_func
 1772              		.fpu softvfp
 1773              		.type	USART_GetFlagStatus, %function
 1774              	USART_GetFlagStatus:
 1775              	.LFB88:
 855:common/stm32f10x_usart.c **** 
 856:common/stm32f10x_usart.c **** /**
 857:common/stm32f10x_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
 858:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 859:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 860:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 861:common/stm32f10x_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
 862:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 863:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
 864:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag
 865:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_TXE:  Transmit data register empty flag
 866:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_TC:   Transmission Complete flag
 867:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_RXNE: Receive data register not empty flag
 868:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_IDLE: Idle Line detection flag
 869:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_ORE:  OverRun Error flag
 870:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_NE:   Noise Error flag
 871:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_FE:   Framing Error flag
 872:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_PE:   Parity Error flag
 873:common/stm32f10x_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
 874:common/stm32f10x_usart.c ****   */
 875:common/stm32f10x_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
 876:common/stm32f10x_usart.c **** {
 1776              		.loc 1 876 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/cc27momk.s 			page 48


 1779              		@ frame_needed = 1, uses_anonymous_args = 0
 1780              		@ link register save eliminated.
 1781 0798 80B4     		push	{r7}
 1782              		.cfi_def_cfa_offset 4
 1783              		.cfi_offset 7, -4
 1784 079a 85B0     		sub	sp, sp, #20
 1785              		.cfi_def_cfa_offset 24
 1786 079c 00AF     		add	r7, sp, #0
 1787              		.cfi_def_cfa_register 7
 1788 079e 7860     		str	r0, [r7, #4]
 1789 07a0 0B46     		mov	r3, r1
 1790 07a2 7B80     		strh	r3, [r7, #2]	@ movhi
 877:common/stm32f10x_usart.c ****   FlagStatus bitstatus = RESET;
 1791              		.loc 1 877 0
 1792 07a4 0023     		movs	r3, #0
 1793 07a6 FB73     		strb	r3, [r7, #15]
 878:common/stm32f10x_usart.c ****   /* Check the parameters */
 879:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 880:common/stm32f10x_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 881:common/stm32f10x_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
 882:common/stm32f10x_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
 883:common/stm32f10x_usart.c ****   {
 884:common/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 885:common/stm32f10x_usart.c ****   }  
 886:common/stm32f10x_usart.c ****   
 887:common/stm32f10x_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 1794              		.loc 1 887 0
 1795 07a8 7B68     		ldr	r3, [r7, #4]
 1796 07aa 1B88     		ldrh	r3, [r3]	@ movhi
 1797 07ac 9AB2     		uxth	r2, r3
 1798 07ae 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1799 07b0 1340     		ands	r3, r3, r2
 1800 07b2 9BB2     		uxth	r3, r3
 1801 07b4 002B     		cmp	r3, #0
 1802 07b6 02D0     		beq	.L80
 888:common/stm32f10x_usart.c ****   {
 889:common/stm32f10x_usart.c ****     bitstatus = SET;
 1803              		.loc 1 889 0
 1804 07b8 0123     		movs	r3, #1
 1805 07ba FB73     		strb	r3, [r7, #15]
 1806 07bc 01E0     		b	.L81
 1807              	.L80:
 890:common/stm32f10x_usart.c ****   }
 891:common/stm32f10x_usart.c ****   else
 892:common/stm32f10x_usart.c ****   {
 893:common/stm32f10x_usart.c ****     bitstatus = RESET;
 1808              		.loc 1 893 0
 1809 07be 0023     		movs	r3, #0
 1810 07c0 FB73     		strb	r3, [r7, #15]
 1811              	.L81:
 894:common/stm32f10x_usart.c ****   }
 895:common/stm32f10x_usart.c ****   return bitstatus;
 1812              		.loc 1 895 0
 1813 07c2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 896:common/stm32f10x_usart.c **** }
 1814              		.loc 1 896 0
 1815 07c4 1846     		mov	r0, r3
ARM GAS  /tmp/cc27momk.s 			page 49


 1816 07c6 1437     		adds	r7, r7, #20
 1817              		.cfi_def_cfa_offset 4
 1818 07c8 BD46     		mov	sp, r7
 1819              		.cfi_def_cfa_register 13
 1820              		@ sp needed
 1821 07ca 80BC     		pop	{r7}
 1822              		.cfi_restore 7
 1823              		.cfi_def_cfa_offset 0
 1824 07cc 7047     		bx	lr
 1825              		.cfi_endproc
 1826              	.LFE88:
 1827              		.size	USART_GetFlagStatus, .-USART_GetFlagStatus
 1828              		.align	1
 1829              		.global	USART_ClearFlag
 1830              		.syntax unified
 1831              		.thumb
 1832              		.thumb_func
 1833              		.fpu softvfp
 1834              		.type	USART_ClearFlag, %function
 1835              	USART_ClearFlag:
 1836              	.LFB89:
 897:common/stm32f10x_usart.c **** 
 898:common/stm32f10x_usart.c **** /**
 899:common/stm32f10x_usart.c ****   * @brief  Clears the USARTx's pending flags.
 900:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 901:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 902:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 903:common/stm32f10x_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
 904:common/stm32f10x_usart.c ****   *   This parameter can be any combination of the following values:
 905:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
 906:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag.
 907:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_TC:   Transmission Complete flag.
 908:common/stm32f10x_usart.c ****   *     @arg USART_FLAG_RXNE: Receive data register not empty flag.
 909:common/stm32f10x_usart.c ****   *   
 910:common/stm32f10x_usart.c ****   * @note
 911:common/stm32f10x_usart.c ****   *   - PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
 912:common/stm32f10x_usart.c ****   *     error) and IDLE (Idle line detected) flags are cleared by software 
 913:common/stm32f10x_usart.c ****   *     sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
 914:common/stm32f10x_usart.c ****   *     followed by a read operation to USART_DR register (USART_ReceiveData()).
 915:common/stm32f10x_usart.c ****   *   - RXNE flag can be also cleared by a read to the USART_DR register 
 916:common/stm32f10x_usart.c ****   *     (USART_ReceiveData()).
 917:common/stm32f10x_usart.c ****   *   - TC flag can be also cleared by software sequence: a read operation to 
 918:common/stm32f10x_usart.c ****   *     USART_SR register (USART_GetFlagStatus()) followed by a write operation
 919:common/stm32f10x_usart.c ****   *     to USART_DR register (USART_SendData()).
 920:common/stm32f10x_usart.c ****   *   - TXE flag is cleared only by a write to the USART_DR register 
 921:common/stm32f10x_usart.c ****   *     (USART_SendData()).
 922:common/stm32f10x_usart.c ****   * @retval None
 923:common/stm32f10x_usart.c ****   */
 924:common/stm32f10x_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
 925:common/stm32f10x_usart.c **** {
 1837              		.loc 1 925 0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 8
 1840              		@ frame_needed = 1, uses_anonymous_args = 0
 1841              		@ link register save eliminated.
 1842 07ce 80B4     		push	{r7}
 1843              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cc27momk.s 			page 50


 1844              		.cfi_offset 7, -4
 1845 07d0 83B0     		sub	sp, sp, #12
 1846              		.cfi_def_cfa_offset 16
 1847 07d2 00AF     		add	r7, sp, #0
 1848              		.cfi_def_cfa_register 7
 1849 07d4 7860     		str	r0, [r7, #4]
 1850 07d6 0B46     		mov	r3, r1
 1851 07d8 7B80     		strh	r3, [r7, #2]	@ movhi
 926:common/stm32f10x_usart.c ****   /* Check the parameters */
 927:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 928:common/stm32f10x_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
 929:common/stm32f10x_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
 930:common/stm32f10x_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
 931:common/stm32f10x_usart.c ****   {
 932:common/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 933:common/stm32f10x_usart.c ****   } 
 934:common/stm32f10x_usart.c ****    
 935:common/stm32f10x_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 1852              		.loc 1 935 0
 1853 07da 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1854 07dc DB43     		mvns	r3, r3
 1855 07de 9AB2     		uxth	r2, r3
 1856 07e0 7B68     		ldr	r3, [r7, #4]
 1857 07e2 1A80     		strh	r2, [r3]	@ movhi
 936:common/stm32f10x_usart.c **** }
 1858              		.loc 1 936 0
 1859 07e4 00BF     		nop
 1860 07e6 0C37     		adds	r7, r7, #12
 1861              		.cfi_def_cfa_offset 4
 1862 07e8 BD46     		mov	sp, r7
 1863              		.cfi_def_cfa_register 13
 1864              		@ sp needed
 1865 07ea 80BC     		pop	{r7}
 1866              		.cfi_restore 7
 1867              		.cfi_def_cfa_offset 0
 1868 07ec 7047     		bx	lr
 1869              		.cfi_endproc
 1870              	.LFE89:
 1871              		.size	USART_ClearFlag, .-USART_ClearFlag
 1872              		.align	1
 1873              		.global	USART_GetITStatus
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1877              		.fpu softvfp
 1878              		.type	USART_GetITStatus, %function
 1879              	USART_GetITStatus:
 1880              	.LFB90:
 937:common/stm32f10x_usart.c **** 
 938:common/stm32f10x_usart.c **** /**
 939:common/stm32f10x_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
 940:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 941:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 942:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 943:common/stm32f10x_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
 944:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 945:common/stm32f10x_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
ARM GAS  /tmp/cc27momk.s 			page 51


 946:common/stm32f10x_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt
 947:common/stm32f10x_usart.c ****   *     @arg USART_IT_TXE:  Tansmit Data Register empty interrupt
 948:common/stm32f10x_usart.c ****   *     @arg USART_IT_TC:   Transmission complete interrupt
 949:common/stm32f10x_usart.c ****   *     @arg USART_IT_RXNE: Receive Data register not empty interrupt
 950:common/stm32f10x_usart.c ****   *     @arg USART_IT_IDLE: Idle line detection interrupt
 951:common/stm32f10x_usart.c ****   *     @arg USART_IT_ORE:  OverRun Error interrupt
 952:common/stm32f10x_usart.c ****   *     @arg USART_IT_NE:   Noise Error interrupt
 953:common/stm32f10x_usart.c ****   *     @arg USART_IT_FE:   Framing Error interrupt
 954:common/stm32f10x_usart.c ****   *     @arg USART_IT_PE:   Parity Error interrupt
 955:common/stm32f10x_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
 956:common/stm32f10x_usart.c ****   */
 957:common/stm32f10x_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 958:common/stm32f10x_usart.c **** {
 1881              		.loc 1 958 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 24
 1884              		@ frame_needed = 1, uses_anonymous_args = 0
 1885              		@ link register save eliminated.
 1886 07ee 80B4     		push	{r7}
 1887              		.cfi_def_cfa_offset 4
 1888              		.cfi_offset 7, -4
 1889 07f0 87B0     		sub	sp, sp, #28
 1890              		.cfi_def_cfa_offset 32
 1891 07f2 00AF     		add	r7, sp, #0
 1892              		.cfi_def_cfa_register 7
 1893 07f4 7860     		str	r0, [r7, #4]
 1894 07f6 0B46     		mov	r3, r1
 1895 07f8 7B80     		strh	r3, [r7, #2]	@ movhi
 959:common/stm32f10x_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 1896              		.loc 1 959 0
 1897 07fa 0023     		movs	r3, #0
 1898 07fc FB60     		str	r3, [r7, #12]
 1899 07fe 0023     		movs	r3, #0
 1900 0800 7B61     		str	r3, [r7, #20]
 1901 0802 0023     		movs	r3, #0
 1902 0804 BB60     		str	r3, [r7, #8]
 960:common/stm32f10x_usart.c ****   ITStatus bitstatus = RESET;
 1903              		.loc 1 960 0
 1904 0806 0023     		movs	r3, #0
 1905 0808 FB74     		strb	r3, [r7, #19]
 961:common/stm32f10x_usart.c ****   /* Check the parameters */
 962:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 963:common/stm32f10x_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT));
 964:common/stm32f10x_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
 965:common/stm32f10x_usart.c ****   if (USART_IT == USART_IT_CTS)
 966:common/stm32f10x_usart.c ****   {
 967:common/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 968:common/stm32f10x_usart.c ****   }   
 969:common/stm32f10x_usart.c ****   
 970:common/stm32f10x_usart.c ****   /* Get the USART register index */
 971:common/stm32f10x_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 1906              		.loc 1 971 0
 1907 080a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1908 080c DBB2     		uxtb	r3, r3
 1909 080e 5B09     		lsrs	r3, r3, #5
 1910 0810 DBB2     		uxtb	r3, r3
 1911 0812 BB60     		str	r3, [r7, #8]
ARM GAS  /tmp/cc27momk.s 			page 52


 972:common/stm32f10x_usart.c ****   /* Get the interrupt position */
 973:common/stm32f10x_usart.c ****   itmask = USART_IT & IT_Mask;
 1912              		.loc 1 973 0
 1913 0814 7B88     		ldrh	r3, [r7, #2]
 1914 0816 03F01F03 		and	r3, r3, #31
 1915 081a 7B61     		str	r3, [r7, #20]
 974:common/stm32f10x_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 1916              		.loc 1 974 0
 1917 081c 0122     		movs	r2, #1
 1918 081e 7B69     		ldr	r3, [r7, #20]
 1919 0820 02FA03F3 		lsl	r3, r2, r3
 1920 0824 7B61     		str	r3, [r7, #20]
 975:common/stm32f10x_usart.c ****   
 976:common/stm32f10x_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 1921              		.loc 1 976 0
 1922 0826 BB68     		ldr	r3, [r7, #8]
 1923 0828 012B     		cmp	r3, #1
 1924 082a 07D1     		bne	.L85
 977:common/stm32f10x_usart.c ****   {
 978:common/stm32f10x_usart.c ****     itmask &= USARTx->CR1;
 1925              		.loc 1 978 0
 1926 082c 7B68     		ldr	r3, [r7, #4]
 1927 082e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1928 0830 9BB2     		uxth	r3, r3
 1929 0832 1A46     		mov	r2, r3
 1930 0834 7B69     		ldr	r3, [r7, #20]
 1931 0836 1340     		ands	r3, r3, r2
 1932 0838 7B61     		str	r3, [r7, #20]
 1933 083a 11E0     		b	.L86
 1934              	.L85:
 979:common/stm32f10x_usart.c ****   }
 980:common/stm32f10x_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 1935              		.loc 1 980 0
 1936 083c BB68     		ldr	r3, [r7, #8]
 1937 083e 022B     		cmp	r3, #2
 1938 0840 07D1     		bne	.L87
 981:common/stm32f10x_usart.c ****   {
 982:common/stm32f10x_usart.c ****     itmask &= USARTx->CR2;
 1939              		.loc 1 982 0
 1940 0842 7B68     		ldr	r3, [r7, #4]
 1941 0844 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1942 0846 9BB2     		uxth	r3, r3
 1943 0848 1A46     		mov	r2, r3
 1944 084a 7B69     		ldr	r3, [r7, #20]
 1945 084c 1340     		ands	r3, r3, r2
 1946 084e 7B61     		str	r3, [r7, #20]
 1947 0850 06E0     		b	.L86
 1948              	.L87:
 983:common/stm32f10x_usart.c ****   }
 984:common/stm32f10x_usart.c ****   else /* The IT  is in CR3 register */
 985:common/stm32f10x_usart.c ****   {
 986:common/stm32f10x_usart.c ****     itmask &= USARTx->CR3;
 1949              		.loc 1 986 0
 1950 0852 7B68     		ldr	r3, [r7, #4]
 1951 0854 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1952 0856 9BB2     		uxth	r3, r3
 1953 0858 1A46     		mov	r2, r3
ARM GAS  /tmp/cc27momk.s 			page 53


 1954 085a 7B69     		ldr	r3, [r7, #20]
 1955 085c 1340     		ands	r3, r3, r2
 1956 085e 7B61     		str	r3, [r7, #20]
 1957              	.L86:
 987:common/stm32f10x_usart.c ****   }
 988:common/stm32f10x_usart.c ****   
 989:common/stm32f10x_usart.c ****   bitpos = USART_IT >> 0x08;
 1958              		.loc 1 989 0
 1959 0860 7B88     		ldrh	r3, [r7, #2]
 1960 0862 1B0A     		lsrs	r3, r3, #8
 1961 0864 9BB2     		uxth	r3, r3
 1962 0866 FB60     		str	r3, [r7, #12]
 990:common/stm32f10x_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 1963              		.loc 1 990 0
 1964 0868 0122     		movs	r2, #1
 1965 086a FB68     		ldr	r3, [r7, #12]
 1966 086c 02FA03F3 		lsl	r3, r2, r3
 1967 0870 FB60     		str	r3, [r7, #12]
 991:common/stm32f10x_usart.c ****   bitpos &= USARTx->SR;
 1968              		.loc 1 991 0
 1969 0872 7B68     		ldr	r3, [r7, #4]
 1970 0874 1B88     		ldrh	r3, [r3]	@ movhi
 1971 0876 9BB2     		uxth	r3, r3
 1972 0878 1A46     		mov	r2, r3
 1973 087a FB68     		ldr	r3, [r7, #12]
 1974 087c 1340     		ands	r3, r3, r2
 1975 087e FB60     		str	r3, [r7, #12]
 992:common/stm32f10x_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 1976              		.loc 1 992 0
 1977 0880 7B69     		ldr	r3, [r7, #20]
 1978 0882 002B     		cmp	r3, #0
 1979 0884 05D0     		beq	.L88
 1980              		.loc 1 992 0 is_stmt 0 discriminator 1
 1981 0886 FB68     		ldr	r3, [r7, #12]
 1982 0888 002B     		cmp	r3, #0
 1983 088a 02D0     		beq	.L88
 993:common/stm32f10x_usart.c ****   {
 994:common/stm32f10x_usart.c ****     bitstatus = SET;
 1984              		.loc 1 994 0 is_stmt 1
 1985 088c 0123     		movs	r3, #1
 1986 088e FB74     		strb	r3, [r7, #19]
 1987 0890 01E0     		b	.L89
 1988              	.L88:
 995:common/stm32f10x_usart.c ****   }
 996:common/stm32f10x_usart.c ****   else
 997:common/stm32f10x_usart.c ****   {
 998:common/stm32f10x_usart.c ****     bitstatus = RESET;
 1989              		.loc 1 998 0
 1990 0892 0023     		movs	r3, #0
 1991 0894 FB74     		strb	r3, [r7, #19]
 1992              	.L89:
 999:common/stm32f10x_usart.c ****   }
1000:common/stm32f10x_usart.c ****   
1001:common/stm32f10x_usart.c ****   return bitstatus;  
 1993              		.loc 1 1001 0
 1994 0896 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1002:common/stm32f10x_usart.c **** }
ARM GAS  /tmp/cc27momk.s 			page 54


 1995              		.loc 1 1002 0
 1996 0898 1846     		mov	r0, r3
 1997 089a 1C37     		adds	r7, r7, #28
 1998              		.cfi_def_cfa_offset 4
 1999 089c BD46     		mov	sp, r7
 2000              		.cfi_def_cfa_register 13
 2001              		@ sp needed
 2002 089e 80BC     		pop	{r7}
 2003              		.cfi_restore 7
 2004              		.cfi_def_cfa_offset 0
 2005 08a0 7047     		bx	lr
 2006              		.cfi_endproc
 2007              	.LFE90:
 2008              		.size	USART_GetITStatus, .-USART_GetITStatus
 2009              		.align	1
 2010              		.global	USART_ClearITPendingBit
 2011              		.syntax unified
 2012              		.thumb
 2013              		.thumb_func
 2014              		.fpu softvfp
 2015              		.type	USART_ClearITPendingBit, %function
 2016              	USART_ClearITPendingBit:
 2017              	.LFB91:
1003:common/stm32f10x_usart.c **** 
1004:common/stm32f10x_usart.c **** /**
1005:common/stm32f10x_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1006:common/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
1007:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
1008:common/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
1009:common/stm32f10x_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1010:common/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
1011:common/stm32f10x_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1012:common/stm32f10x_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt
1013:common/stm32f10x_usart.c ****   *     @arg USART_IT_TC:   Transmission complete interrupt. 
1014:common/stm32f10x_usart.c ****   *     @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1015:common/stm32f10x_usart.c ****   *   
1016:common/stm32f10x_usart.c ****   * @note
1017:common/stm32f10x_usart.c ****   *   - PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1018:common/stm32f10x_usart.c ****   *     error) and IDLE (Idle line detected) pending bits are cleared by 
1019:common/stm32f10x_usart.c ****   *     software sequence: a read operation to USART_SR register 
1020:common/stm32f10x_usart.c ****   *     (USART_GetITStatus()) followed by a read operation to USART_DR register 
1021:common/stm32f10x_usart.c ****   *     (USART_ReceiveData()).
1022:common/stm32f10x_usart.c ****   *   - RXNE pending bit can be also cleared by a read to the USART_DR register 
1023:common/stm32f10x_usart.c ****   *     (USART_ReceiveData()).
1024:common/stm32f10x_usart.c ****   *   - TC pending bit can be also cleared by software sequence: a read 
1025:common/stm32f10x_usart.c ****   *     operation to USART_SR register (USART_GetITStatus()) followed by a write 
1026:common/stm32f10x_usart.c ****   *     operation to USART_DR register (USART_SendData()).
1027:common/stm32f10x_usart.c ****   *   - TXE pending bit is cleared only by a write to the USART_DR register 
1028:common/stm32f10x_usart.c ****   *     (USART_SendData()).
1029:common/stm32f10x_usart.c ****   * @retval None
1030:common/stm32f10x_usart.c ****   */
1031:common/stm32f10x_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1032:common/stm32f10x_usart.c **** {
 2018              		.loc 1 1032 0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 16
 2021              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/cc27momk.s 			page 55


 2022              		@ link register save eliminated.
 2023 08a2 80B4     		push	{r7}
 2024              		.cfi_def_cfa_offset 4
 2025              		.cfi_offset 7, -4
 2026 08a4 85B0     		sub	sp, sp, #20
 2027              		.cfi_def_cfa_offset 24
 2028 08a6 00AF     		add	r7, sp, #0
 2029              		.cfi_def_cfa_register 7
 2030 08a8 7860     		str	r0, [r7, #4]
 2031 08aa 0B46     		mov	r3, r1
 2032 08ac 7B80     		strh	r3, [r7, #2]	@ movhi
1033:common/stm32f10x_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 2033              		.loc 1 1033 0
 2034 08ae 0023     		movs	r3, #0
 2035 08b0 FB81     		strh	r3, [r7, #14]	@ movhi
 2036 08b2 0023     		movs	r3, #0
 2037 08b4 BB81     		strh	r3, [r7, #12]	@ movhi
1034:common/stm32f10x_usart.c ****   /* Check the parameters */
1035:common/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1036:common/stm32f10x_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT));
1037:common/stm32f10x_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1038:common/stm32f10x_usart.c ****   if (USART_IT == USART_IT_CTS)
1039:common/stm32f10x_usart.c ****   {
1040:common/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
1041:common/stm32f10x_usart.c ****   }   
1042:common/stm32f10x_usart.c ****   
1043:common/stm32f10x_usart.c ****   bitpos = USART_IT >> 0x08;
 2038              		.loc 1 1043 0
 2039 08b6 7B88     		ldrh	r3, [r7, #2]
 2040 08b8 1B0A     		lsrs	r3, r3, #8
 2041 08ba FB81     		strh	r3, [r7, #14]	@ movhi
1044:common/stm32f10x_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 2042              		.loc 1 1044 0
 2043 08bc FB89     		ldrh	r3, [r7, #14]
 2044 08be 0122     		movs	r2, #1
 2045 08c0 02FA03F3 		lsl	r3, r2, r3
 2046 08c4 BB81     		strh	r3, [r7, #12]	@ movhi
1045:common/stm32f10x_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 2047              		.loc 1 1045 0
 2048 08c6 BB89     		ldrh	r3, [r7, #12]	@ movhi
 2049 08c8 DB43     		mvns	r3, r3
 2050 08ca 9AB2     		uxth	r2, r3
 2051 08cc 7B68     		ldr	r3, [r7, #4]
 2052 08ce 1A80     		strh	r2, [r3]	@ movhi
1046:common/stm32f10x_usart.c **** }
 2053              		.loc 1 1046 0
 2054 08d0 00BF     		nop
 2055 08d2 1437     		adds	r7, r7, #20
 2056              		.cfi_def_cfa_offset 4
 2057 08d4 BD46     		mov	sp, r7
 2058              		.cfi_def_cfa_register 13
 2059              		@ sp needed
 2060 08d6 80BC     		pop	{r7}
 2061              		.cfi_restore 7
 2062              		.cfi_def_cfa_offset 0
 2063 08d8 7047     		bx	lr
 2064              		.cfi_endproc
ARM GAS  /tmp/cc27momk.s 			page 56


 2065              	.LFE91:
 2066              		.size	USART_ClearITPendingBit, .-USART_ClearITPendingBit
 2067              	.Letext0:
 2068              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2069              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2070              		.file 4 "include/core_cm3.h"
 2071              		.file 5 "include/system_stm32f10x.h"
 2072              		.file 6 "include/stm32f10x.h"
 2073              		.file 7 "include/stm32f10x_usart.h"
 2074              		.file 8 "include/stm32f10x_rcc.h"
 2075 08da 00BF     		.section	.debug_info,"",%progbits
 2076              	.Ldebug_info0:
 2077 0000 F7090000 		.4byte	0x9f7
 2078 0004 0400     		.2byte	0x4
 2079 0006 00000000 		.4byte	.Ldebug_abbrev0
 2080 000a 04       		.byte	0x4
 2081 000b 01       		.uleb128 0x1
 2082 000c 4F030000 		.4byte	.LASF106
 2083 0010 0C       		.byte	0xc
 2084 0011 FF010000 		.4byte	.LASF107
 2085 0015 7C020000 		.4byte	.LASF108
 2086 0019 00000000 		.4byte	.Ltext0
 2087 001d DA080000 		.4byte	.Letext0-.Ltext0
 2088 0021 00000000 		.4byte	.Ldebug_line0
 2089 0025 02       		.uleb128 0x2
 2090 0026 01       		.byte	0x1
 2091 0027 06       		.byte	0x6
 2092 0028 76010000 		.4byte	.LASF0
 2093 002c 03       		.uleb128 0x3
 2094 002d 39020000 		.4byte	.LASF3
 2095 0031 02       		.byte	0x2
 2096 0032 1D       		.byte	0x1d
 2097 0033 37000000 		.4byte	0x37
 2098 0037 02       		.uleb128 0x2
 2099 0038 01       		.byte	0x1
 2100 0039 08       		.byte	0x8
 2101 003a C4020000 		.4byte	.LASF1
 2102 003e 02       		.uleb128 0x2
 2103 003f 02       		.byte	0x2
 2104 0040 05       		.byte	0x5
 2105 0041 F8000000 		.4byte	.LASF2
 2106 0045 03       		.uleb128 0x3
 2107 0046 D0000000 		.4byte	.LASF4
 2108 004a 02       		.byte	0x2
 2109 004b 2B       		.byte	0x2b
 2110 004c 50000000 		.4byte	0x50
 2111 0050 02       		.uleb128 0x2
 2112 0051 02       		.byte	0x2
 2113 0052 07       		.byte	0x7
 2114 0053 62040000 		.4byte	.LASF5
 2115 0057 03       		.uleb128 0x3
 2116 0058 8D050000 		.4byte	.LASF6
 2117 005c 02       		.byte	0x2
 2118 005d 3F       		.byte	0x3f
 2119 005e 62000000 		.4byte	0x62
 2120 0062 02       		.uleb128 0x2
 2121 0063 04       		.byte	0x4
ARM GAS  /tmp/cc27momk.s 			page 57


 2122 0064 05       		.byte	0x5
 2123 0065 CE010000 		.4byte	.LASF7
 2124 0069 03       		.uleb128 0x3
 2125 006a 5E050000 		.4byte	.LASF8
 2126 006e 02       		.byte	0x2
 2127 006f 41       		.byte	0x41
 2128 0070 74000000 		.4byte	0x74
 2129 0074 02       		.uleb128 0x2
 2130 0075 04       		.byte	0x4
 2131 0076 07       		.byte	0x7
 2132 0077 8D030000 		.4byte	.LASF9
 2133 007b 02       		.uleb128 0x2
 2134 007c 08       		.byte	0x8
 2135 007d 05       		.byte	0x5
 2136 007e B7010000 		.4byte	.LASF10
 2137 0082 02       		.uleb128 0x2
 2138 0083 08       		.byte	0x8
 2139 0084 07       		.byte	0x7
 2140 0085 FE020000 		.4byte	.LASF11
 2141 0089 04       		.uleb128 0x4
 2142 008a 04       		.byte	0x4
 2143 008b 05       		.byte	0x5
 2144 008c 696E7400 		.ascii	"int\000"
 2145 0090 02       		.uleb128 0x2
 2146 0091 04       		.byte	0x4
 2147 0092 07       		.byte	0x7
 2148 0093 39030000 		.4byte	.LASF12
 2149 0097 03       		.uleb128 0x3
 2150 0098 32010000 		.4byte	.LASF13
 2151 009c 03       		.byte	0x3
 2152 009d 18       		.byte	0x18
 2153 009e 2C000000 		.4byte	0x2c
 2154 00a2 03       		.uleb128 0x3
 2155 00a3 46030000 		.4byte	.LASF14
 2156 00a7 03       		.byte	0x3
 2157 00a8 24       		.byte	0x24
 2158 00a9 45000000 		.4byte	0x45
 2159 00ad 05       		.uleb128 0x5
 2160 00ae A2000000 		.4byte	0xa2
 2161 00b2 03       		.uleb128 0x3
 2162 00b3 3C040000 		.4byte	.LASF15
 2163 00b7 03       		.byte	0x3
 2164 00b8 2C       		.byte	0x2c
 2165 00b9 57000000 		.4byte	0x57
 2166 00bd 05       		.uleb128 0x5
 2167 00be B2000000 		.4byte	0xb2
 2168 00c2 03       		.uleb128 0x3
 2169 00c3 0F000000 		.4byte	.LASF16
 2170 00c7 03       		.byte	0x3
 2171 00c8 30       		.byte	0x30
 2172 00c9 69000000 		.4byte	0x69
 2173 00cd 02       		.uleb128 0x2
 2174 00ce 04       		.byte	0x4
 2175 00cf 07       		.byte	0x7
 2176 00d0 7C000000 		.4byte	.LASF17
 2177 00d4 06       		.uleb128 0x6
 2178 00d5 2C060000 		.4byte	.LASF18
ARM GAS  /tmp/cc27momk.s 			page 58


 2179 00d9 04       		.byte	0x4
 2180 00da 9606     		.2byte	0x696
 2181 00dc BD000000 		.4byte	0xbd
 2182 00e0 07       		.uleb128 0x7
 2183 00e1 A5040000 		.4byte	.LASF19
 2184 00e5 05       		.byte	0x5
 2185 00e6 35       		.byte	0x35
 2186 00e7 C2000000 		.4byte	0xc2
 2187 00eb 08       		.uleb128 0x8
 2188 00ec 75313600 		.ascii	"u16\000"
 2189 00f0 06       		.byte	0x6
 2190 00f1 F801     		.2byte	0x1f8
 2191 00f3 A2000000 		.4byte	0xa2
 2192 00f7 09       		.uleb128 0x9
 2193 00f8 01       		.byte	0x1
 2194 00f9 37000000 		.4byte	0x37
 2195 00fd 06       		.byte	0x6
 2196 00fe 0702     		.2byte	0x207
 2197 0100 11010000 		.4byte	0x111
 2198 0104 0A       		.uleb128 0xa
 2199 0105 76020000 		.4byte	.LASF20
 2200 0109 00       		.byte	0
 2201 010a 0B       		.uleb128 0xb
 2202 010b 53455400 		.ascii	"SET\000"
 2203 010f 01       		.byte	0x1
 2204 0110 00       		.byte	0
 2205 0111 0C       		.uleb128 0xc
 2206 0112 C5000000 		.4byte	.LASF21
 2207 0116 06       		.byte	0x6
 2208 0117 0702     		.2byte	0x207
 2209 0119 F7000000 		.4byte	0xf7
 2210 011d 0C       		.uleb128 0xc
 2211 011e C5010000 		.4byte	.LASF22
 2212 0122 06       		.byte	0x6
 2213 0123 0702     		.2byte	0x207
 2214 0125 F7000000 		.4byte	0xf7
 2215 0129 09       		.uleb128 0x9
 2216 012a 01       		.byte	0x1
 2217 012b 37000000 		.4byte	0x37
 2218 012f 06       		.byte	0x6
 2219 0130 0902     		.2byte	0x209
 2220 0132 43010000 		.4byte	0x143
 2221 0136 0A       		.uleb128 0xa
 2222 0137 6E010000 		.4byte	.LASF23
 2223 013b 00       		.byte	0
 2224 013c 0A       		.uleb128 0xa
 2225 013d 5E060000 		.4byte	.LASF24
 2226 0141 01       		.byte	0x1
 2227 0142 00       		.byte	0
 2228 0143 0C       		.uleb128 0xc
 2229 0144 37050000 		.4byte	.LASF25
 2230 0148 06       		.byte	0x6
 2231 0149 0902     		.2byte	0x209
 2232 014b 29010000 		.4byte	0x129
 2233 014f 0D       		.uleb128 0xd
 2234 0150 1C       		.byte	0x1c
 2235 0151 06       		.byte	0x6
ARM GAS  /tmp/cc27momk.s 			page 59


 2236 0152 D204     		.2byte	0x4d2
 2237 0154 0D020000 		.4byte	0x20d
 2238 0158 0E       		.uleb128 0xe
 2239 0159 535200   		.ascii	"SR\000"
 2240 015c 06       		.byte	0x6
 2241 015d D404     		.2byte	0x4d4
 2242 015f AD000000 		.4byte	0xad
 2243 0163 00       		.byte	0
 2244 0164 0F       		.uleb128 0xf
 2245 0165 D1040000 		.4byte	.LASF26
 2246 0169 06       		.byte	0x6
 2247 016a D504     		.2byte	0x4d5
 2248 016c A2000000 		.4byte	0xa2
 2249 0170 02       		.byte	0x2
 2250 0171 0E       		.uleb128 0xe
 2251 0172 445200   		.ascii	"DR\000"
 2252 0175 06       		.byte	0x6
 2253 0176 D604     		.2byte	0x4d6
 2254 0178 AD000000 		.4byte	0xad
 2255 017c 04       		.byte	0x4
 2256 017d 0F       		.uleb128 0xf
 2257 017e DB040000 		.4byte	.LASF27
 2258 0182 06       		.byte	0x6
 2259 0183 D704     		.2byte	0x4d7
 2260 0185 A2000000 		.4byte	0xa2
 2261 0189 06       		.byte	0x6
 2262 018a 0E       		.uleb128 0xe
 2263 018b 42525200 		.ascii	"BRR\000"
 2264 018f 06       		.byte	0x6
 2265 0190 D804     		.2byte	0x4d8
 2266 0192 AD000000 		.4byte	0xad
 2267 0196 08       		.byte	0x8
 2268 0197 0F       		.uleb128 0xf
 2269 0198 E5040000 		.4byte	.LASF28
 2270 019c 06       		.byte	0x6
 2271 019d D904     		.2byte	0x4d9
 2272 019f A2000000 		.4byte	0xa2
 2273 01a3 0A       		.byte	0xa
 2274 01a4 0E       		.uleb128 0xe
 2275 01a5 43523100 		.ascii	"CR1\000"
 2276 01a9 06       		.byte	0x6
 2277 01aa DA04     		.2byte	0x4da
 2278 01ac AD000000 		.4byte	0xad
 2279 01b0 0C       		.byte	0xc
 2280 01b1 0F       		.uleb128 0xf
 2281 01b2 EF040000 		.4byte	.LASF29
 2282 01b6 06       		.byte	0x6
 2283 01b7 DB04     		.2byte	0x4db
 2284 01b9 A2000000 		.4byte	0xa2
 2285 01bd 0E       		.byte	0xe
 2286 01be 0E       		.uleb128 0xe
 2287 01bf 43523200 		.ascii	"CR2\000"
 2288 01c3 06       		.byte	0x6
 2289 01c4 DC04     		.2byte	0x4dc
 2290 01c6 AD000000 		.4byte	0xad
 2291 01ca 10       		.byte	0x10
 2292 01cb 0F       		.uleb128 0xf
ARM GAS  /tmp/cc27momk.s 			page 60


 2293 01cc F9040000 		.4byte	.LASF30
 2294 01d0 06       		.byte	0x6
 2295 01d1 DD04     		.2byte	0x4dd
 2296 01d3 A2000000 		.4byte	0xa2
 2297 01d7 12       		.byte	0x12
 2298 01d8 0E       		.uleb128 0xe
 2299 01d9 43523300 		.ascii	"CR3\000"
 2300 01dd 06       		.byte	0x6
 2301 01de DE04     		.2byte	0x4de
 2302 01e0 AD000000 		.4byte	0xad
 2303 01e4 14       		.byte	0x14
 2304 01e5 0F       		.uleb128 0xf
 2305 01e6 03050000 		.4byte	.LASF31
 2306 01ea 06       		.byte	0x6
 2307 01eb DF04     		.2byte	0x4df
 2308 01ed A2000000 		.4byte	0xa2
 2309 01f1 16       		.byte	0x16
 2310 01f2 0F       		.uleb128 0xf
 2311 01f3 23000000 		.4byte	.LASF32
 2312 01f7 06       		.byte	0x6
 2313 01f8 E004     		.2byte	0x4e0
 2314 01fa AD000000 		.4byte	0xad
 2315 01fe 18       		.byte	0x18
 2316 01ff 0F       		.uleb128 0xf
 2317 0200 0D050000 		.4byte	.LASF33
 2318 0204 06       		.byte	0x6
 2319 0205 E104     		.2byte	0x4e1
 2320 0207 A2000000 		.4byte	0xa2
 2321 020b 1A       		.byte	0x1a
 2322 020c 00       		.byte	0
 2323 020d 0C       		.uleb128 0xc
 2324 020e DB000000 		.4byte	.LASF34
 2325 0212 06       		.byte	0x6
 2326 0213 E204     		.2byte	0x4e2
 2327 0215 4F010000 		.4byte	0x14f
 2328 0219 10       		.uleb128 0x10
 2329 021a 10       		.byte	0x10
 2330 021b 07       		.byte	0x7
 2331 021c 32       		.byte	0x32
 2332 021d 6A020000 		.4byte	0x26a
 2333 0221 11       		.uleb128 0x11
 2334 0222 90010000 		.4byte	.LASF35
 2335 0226 07       		.byte	0x7
 2336 0227 34       		.byte	0x34
 2337 0228 C2000000 		.4byte	0xc2
 2338 022c 00       		.byte	0
 2339 022d 11       		.uleb128 0x11
 2340 022e 47010000 		.4byte	.LASF36
 2341 0232 07       		.byte	0x7
 2342 0233 39       		.byte	0x39
 2343 0234 A2000000 		.4byte	0xa2
 2344 0238 04       		.byte	0x4
 2345 0239 11       		.uleb128 0x11
 2346 023a E9000000 		.4byte	.LASF37
 2347 023e 07       		.byte	0x7
 2348 023f 3C       		.byte	0x3c
 2349 0240 A2000000 		.4byte	0xa2
ARM GAS  /tmp/cc27momk.s 			page 61


 2350 0244 06       		.byte	0x6
 2351 0245 11       		.uleb128 0x11
 2352 0246 A1020000 		.4byte	.LASF38
 2353 024a 07       		.byte	0x7
 2354 024b 3F       		.byte	0x3f
 2355 024c A2000000 		.4byte	0xa2
 2356 0250 08       		.byte	0x8
 2357 0251 11       		.uleb128 0x11
 2358 0252 23040000 		.4byte	.LASF39
 2359 0256 07       		.byte	0x7
 2360 0257 46       		.byte	0x46
 2361 0258 A2000000 		.4byte	0xa2
 2362 025c 0A       		.byte	0xa
 2363 025d 11       		.uleb128 0x11
 2364 025e F6030000 		.4byte	.LASF40
 2365 0262 07       		.byte	0x7
 2366 0263 49       		.byte	0x49
 2367 0264 A2000000 		.4byte	0xa2
 2368 0268 0C       		.byte	0xc
 2369 0269 00       		.byte	0
 2370 026a 03       		.uleb128 0x3
 2371 026b AF030000 		.4byte	.LASF41
 2372 026f 07       		.byte	0x7
 2373 0270 4C       		.byte	0x4c
 2374 0271 19020000 		.4byte	0x219
 2375 0275 10       		.uleb128 0x10
 2376 0276 08       		.byte	0x8
 2377 0277 07       		.byte	0x7
 2378 0278 52       		.byte	0x52
 2379 0279 AE020000 		.4byte	0x2ae
 2380 027d 11       		.uleb128 0x11
 2381 027e C5040000 		.4byte	.LASF42
 2382 0282 07       		.byte	0x7
 2383 0283 55       		.byte	0x55
 2384 0284 A2000000 		.4byte	0xa2
 2385 0288 00       		.byte	0
 2386 0289 11       		.uleb128 0x11
 2387 028a 1A060000 		.4byte	.LASF43
 2388 028e 07       		.byte	0x7
 2389 028f 58       		.byte	0x58
 2390 0290 A2000000 		.4byte	0xa2
 2391 0294 02       		.byte	0x2
 2392 0295 11       		.uleb128 0x11
 2393 0296 18000000 		.4byte	.LASF44
 2394 029a 07       		.byte	0x7
 2395 029b 5B       		.byte	0x5b
 2396 029c A2000000 		.4byte	0xa2
 2397 02a0 04       		.byte	0x4
 2398 02a1 11       		.uleb128 0x11
 2399 02a2 82010000 		.4byte	.LASF45
 2400 02a6 07       		.byte	0x7
 2401 02a7 5E       		.byte	0x5e
 2402 02a8 A2000000 		.4byte	0xa2
 2403 02ac 06       		.byte	0x6
 2404 02ad 00       		.byte	0
 2405 02ae 03       		.uleb128 0x3
 2406 02af 02010000 		.4byte	.LASF46
ARM GAS  /tmp/cc27momk.s 			page 62


 2407 02b3 07       		.byte	0x7
 2408 02b4 61       		.byte	0x61
 2409 02b5 75020000 		.4byte	0x275
 2410 02b9 10       		.uleb128 0x10
 2411 02ba 14       		.byte	0x14
 2412 02bb 08       		.byte	0x8
 2413 02bc 2E       		.byte	0x2e
 2414 02bd FE020000 		.4byte	0x2fe
 2415 02c1 11       		.uleb128 0x11
 2416 02c2 46000000 		.4byte	.LASF47
 2417 02c6 08       		.byte	0x8
 2418 02c7 30       		.byte	0x30
 2419 02c8 C2000000 		.4byte	0xc2
 2420 02cc 00       		.byte	0
 2421 02cd 11       		.uleb128 0x11
 2422 02ce 85000000 		.4byte	.LASF48
 2423 02d2 08       		.byte	0x8
 2424 02d3 31       		.byte	0x31
 2425 02d4 C2000000 		.4byte	0xc2
 2426 02d8 04       		.byte	0x4
 2427 02d9 11       		.uleb128 0x11
 2428 02da 69050000 		.4byte	.LASF49
 2429 02de 08       		.byte	0x8
 2430 02df 32       		.byte	0x32
 2431 02e0 C2000000 		.4byte	0xc2
 2432 02e4 08       		.byte	0x8
 2433 02e5 11       		.uleb128 0x11
 2434 02e6 B5040000 		.4byte	.LASF50
 2435 02ea 08       		.byte	0x8
 2436 02eb 33       		.byte	0x33
 2437 02ec C2000000 		.4byte	0xc2
 2438 02f0 0C       		.byte	0xc
 2439 02f1 11       		.uleb128 0x11
 2440 02f2 15030000 		.4byte	.LASF51
 2441 02f6 08       		.byte	0x8
 2442 02f7 34       		.byte	0x34
 2443 02f8 C2000000 		.4byte	0xc2
 2444 02fc 10       		.byte	0x10
 2445 02fd 00       		.byte	0
 2446 02fe 03       		.uleb128 0x3
 2447 02ff D0030000 		.4byte	.LASF52
 2448 0303 08       		.byte	0x8
 2449 0304 35       		.byte	0x35
 2450 0305 B9020000 		.4byte	0x2b9
 2451 0309 12       		.uleb128 0x12
 2452 030a D7010000 		.4byte	.LASF59
 2453 030e 01       		.byte	0x1
 2454 030f 0704     		.2byte	0x407
 2455 0311 A2080000 		.4byte	.LFB91
 2456 0315 38000000 		.4byte	.LFE91-.LFB91
 2457 0319 01       		.uleb128 0x1
 2458 031a 9C       		.byte	0x9c
 2459 031b 5C030000 		.4byte	0x35c
 2460 031f 13       		.uleb128 0x13
 2461 0320 EF030000 		.4byte	.LASF53
 2462 0324 01       		.byte	0x1
 2463 0325 0704     		.2byte	0x407
ARM GAS  /tmp/cc27momk.s 			page 63


 2464 0327 5C030000 		.4byte	0x35c
 2465 032b 02       		.uleb128 0x2
 2466 032c 91       		.byte	0x91
 2467 032d 6C       		.sleb128 -20
 2468 032e 13       		.uleb128 0x13
 2469 032f 97050000 		.4byte	.LASF54
 2470 0333 01       		.byte	0x1
 2471 0334 0704     		.2byte	0x407
 2472 0336 A2000000 		.4byte	0xa2
 2473 033a 02       		.uleb128 0x2
 2474 033b 91       		.byte	0x91
 2475 033c 6A       		.sleb128 -22
 2476 033d 14       		.uleb128 0x14
 2477 033e 44040000 		.4byte	.LASF55
 2478 0342 01       		.byte	0x1
 2479 0343 0904     		.2byte	0x409
 2480 0345 A2000000 		.4byte	0xa2
 2481 0349 02       		.uleb128 0x2
 2482 034a 91       		.byte	0x91
 2483 034b 76       		.sleb128 -10
 2484 034c 14       		.uleb128 0x14
 2485 034d 25060000 		.4byte	.LASF56
 2486 0351 01       		.byte	0x1
 2487 0352 0904     		.2byte	0x409
 2488 0354 A2000000 		.4byte	0xa2
 2489 0358 02       		.uleb128 0x2
 2490 0359 91       		.byte	0x91
 2491 035a 74       		.sleb128 -12
 2492 035b 00       		.byte	0
 2493 035c 15       		.uleb128 0x15
 2494 035d 04       		.byte	0x4
 2495 035e 0D020000 		.4byte	0x20d
 2496 0362 16       		.uleb128 0x16
 2497 0363 75040000 		.4byte	.LASF62
 2498 0367 01       		.byte	0x1
 2499 0368 BD03     		.2byte	0x3bd
 2500 036a 1D010000 		.4byte	0x11d
 2501 036e EE070000 		.4byte	.LFB90
 2502 0372 B4000000 		.4byte	.LFE90-.LFB90
 2503 0376 01       		.uleb128 0x1
 2504 0377 9C       		.byte	0x9c
 2505 0378 D7030000 		.4byte	0x3d7
 2506 037c 13       		.uleb128 0x13
 2507 037d EF030000 		.4byte	.LASF53
 2508 0381 01       		.byte	0x1
 2509 0382 BD03     		.2byte	0x3bd
 2510 0384 5C030000 		.4byte	0x35c
 2511 0388 02       		.uleb128 0x2
 2512 0389 91       		.byte	0x91
 2513 038a 64       		.sleb128 -28
 2514 038b 13       		.uleb128 0x13
 2515 038c 97050000 		.4byte	.LASF54
 2516 0390 01       		.byte	0x1
 2517 0391 BD03     		.2byte	0x3bd
 2518 0393 A2000000 		.4byte	0xa2
 2519 0397 02       		.uleb128 0x2
 2520 0398 91       		.byte	0x91
ARM GAS  /tmp/cc27momk.s 			page 64


 2521 0399 62       		.sleb128 -30
 2522 039a 14       		.uleb128 0x14
 2523 039b 44040000 		.4byte	.LASF55
 2524 039f 01       		.byte	0x1
 2525 03a0 BF03     		.2byte	0x3bf
 2526 03a2 C2000000 		.4byte	0xc2
 2527 03a6 02       		.uleb128 0x2
 2528 03a7 91       		.byte	0x91
 2529 03a8 6C       		.sleb128 -20
 2530 03a9 14       		.uleb128 0x14
 2531 03aa 25060000 		.4byte	.LASF56
 2532 03ae 01       		.byte	0x1
 2533 03af BF03     		.2byte	0x3bf
 2534 03b1 C2000000 		.4byte	0xc2
 2535 03b5 02       		.uleb128 0x2
 2536 03b6 91       		.byte	0x91
 2537 03b7 74       		.sleb128 -12
 2538 03b8 14       		.uleb128 0x14
 2539 03b9 55060000 		.4byte	.LASF57
 2540 03bd 01       		.byte	0x1
 2541 03be BF03     		.2byte	0x3bf
 2542 03c0 C2000000 		.4byte	0xc2
 2543 03c4 02       		.uleb128 0x2
 2544 03c5 91       		.byte	0x91
 2545 03c6 68       		.sleb128 -24
 2546 03c7 14       		.uleb128 0x14
 2547 03c8 39060000 		.4byte	.LASF58
 2548 03cc 01       		.byte	0x1
 2549 03cd C003     		.2byte	0x3c0
 2550 03cf 1D010000 		.4byte	0x11d
 2551 03d3 02       		.uleb128 0x2
 2552 03d4 91       		.byte	0x91
 2553 03d5 73       		.sleb128 -13
 2554 03d6 00       		.byte	0
 2555 03d7 12       		.uleb128 0x12
 2556 03d8 DD020000 		.4byte	.LASF60
 2557 03dc 01       		.byte	0x1
 2558 03dd 9C03     		.2byte	0x39c
 2559 03df CE070000 		.4byte	.LFB89
 2560 03e3 20000000 		.4byte	.LFE89-.LFB89
 2561 03e7 01       		.uleb128 0x1
 2562 03e8 9C       		.byte	0x9c
 2563 03e9 0C040000 		.4byte	0x40c
 2564 03ed 13       		.uleb128 0x13
 2565 03ee EF030000 		.4byte	.LASF53
 2566 03f2 01       		.byte	0x1
 2567 03f3 9C03     		.2byte	0x39c
 2568 03f5 5C030000 		.4byte	0x35c
 2569 03f9 02       		.uleb128 0x2
 2570 03fa 91       		.byte	0x91
 2571 03fb 74       		.sleb128 -12
 2572 03fc 13       		.uleb128 0x13
 2573 03fd 43020000 		.4byte	.LASF61
 2574 0401 01       		.byte	0x1
 2575 0402 9C03     		.2byte	0x39c
 2576 0404 A2000000 		.4byte	0xa2
 2577 0408 02       		.uleb128 0x2
ARM GAS  /tmp/cc27momk.s 			page 65


 2578 0409 91       		.byte	0x91
 2579 040a 72       		.sleb128 -14
 2580 040b 00       		.byte	0
 2581 040c 16       		.uleb128 0x16
 2582 040d 79050000 		.4byte	.LASF63
 2583 0411 01       		.byte	0x1
 2584 0412 6B03     		.2byte	0x36b
 2585 0414 11010000 		.4byte	0x111
 2586 0418 98070000 		.4byte	.LFB88
 2587 041c 36000000 		.4byte	.LFE88-.LFB88
 2588 0420 01       		.uleb128 0x1
 2589 0421 9C       		.byte	0x9c
 2590 0422 54040000 		.4byte	0x454
 2591 0426 13       		.uleb128 0x13
 2592 0427 EF030000 		.4byte	.LASF53
 2593 042b 01       		.byte	0x1
 2594 042c 6B03     		.2byte	0x36b
 2595 042e 5C030000 		.4byte	0x35c
 2596 0432 02       		.uleb128 0x2
 2597 0433 91       		.byte	0x91
 2598 0434 6C       		.sleb128 -20
 2599 0435 13       		.uleb128 0x13
 2600 0436 43020000 		.4byte	.LASF61
 2601 043a 01       		.byte	0x1
 2602 043b 6B03     		.2byte	0x36b
 2603 043d A2000000 		.4byte	0xa2
 2604 0441 02       		.uleb128 0x2
 2605 0442 91       		.byte	0x91
 2606 0443 6A       		.sleb128 -22
 2607 0444 14       		.uleb128 0x14
 2608 0445 39060000 		.4byte	.LASF58
 2609 0449 01       		.byte	0x1
 2610 044a 6D03     		.2byte	0x36d
 2611 044c 11010000 		.4byte	0x111
 2612 0450 02       		.uleb128 0x2
 2613 0451 91       		.byte	0x91
 2614 0452 77       		.sleb128 -9
 2615 0453 00       		.byte	0
 2616 0454 12       		.uleb128 0x12
 2617 0455 17050000 		.4byte	.LASF64
 2618 0459 01       		.byte	0x1
 2619 045a 4603     		.2byte	0x346
 2620 045c 5A070000 		.4byte	.LFB87
 2621 0460 3E000000 		.4byte	.LFE87-.LFB87
 2622 0464 01       		.uleb128 0x1
 2623 0465 9C       		.byte	0x9c
 2624 0466 89040000 		.4byte	0x489
 2625 046a 13       		.uleb128 0x13
 2626 046b EF030000 		.4byte	.LASF53
 2627 046f 01       		.byte	0x1
 2628 0470 4603     		.2byte	0x346
 2629 0472 5C030000 		.4byte	0x35c
 2630 0476 02       		.uleb128 0x2
 2631 0477 91       		.byte	0x91
 2632 0478 74       		.sleb128 -12
 2633 0479 13       		.uleb128 0x13
 2634 047a 58010000 		.4byte	.LASF65
ARM GAS  /tmp/cc27momk.s 			page 66


 2635 047e 01       		.byte	0x1
 2636 047f 4603     		.2byte	0x346
 2637 0481 43010000 		.4byte	0x143
 2638 0485 02       		.uleb128 0x2
 2639 0486 91       		.byte	0x91
 2640 0487 73       		.sleb128 -13
 2641 0488 00       		.byte	0
 2642 0489 12       		.uleb128 0x12
 2643 048a 94040000 		.4byte	.LASF66
 2644 048e 01       		.byte	0x1
 2645 048f 3303     		.2byte	0x333
 2646 0491 24070000 		.4byte	.LFB86
 2647 0495 36000000 		.4byte	.LFE86-.LFB86
 2648 0499 01       		.uleb128 0x1
 2649 049a 9C       		.byte	0x9c
 2650 049b BE040000 		.4byte	0x4be
 2651 049f 13       		.uleb128 0x13
 2652 04a0 EF030000 		.4byte	.LASF53
 2653 04a4 01       		.byte	0x1
 2654 04a5 3303     		.2byte	0x333
 2655 04a7 5C030000 		.4byte	0x35c
 2656 04ab 02       		.uleb128 0x2
 2657 04ac 91       		.byte	0x91
 2658 04ad 74       		.sleb128 -12
 2659 04ae 13       		.uleb128 0x13
 2660 04af 9F010000 		.4byte	.LASF67
 2661 04b3 01       		.byte	0x1
 2662 04b4 3303     		.2byte	0x333
 2663 04b6 A2000000 		.4byte	0xa2
 2664 04ba 02       		.uleb128 0x2
 2665 04bb 91       		.byte	0x91
 2666 04bc 72       		.sleb128 -14
 2667 04bd 00       		.byte	0
 2668 04be 12       		.uleb128 0x12
 2669 04bf AF000000 		.4byte	.LASF68
 2670 04c3 01       		.byte	0x1
 2671 04c4 1603     		.2byte	0x316
 2672 04c6 E6060000 		.4byte	.LFB85
 2673 04ca 3E000000 		.4byte	.LFE85-.LFB85
 2674 04ce 01       		.uleb128 0x1
 2675 04cf 9C       		.byte	0x9c
 2676 04d0 F3040000 		.4byte	0x4f3
 2677 04d4 13       		.uleb128 0x13
 2678 04d5 EF030000 		.4byte	.LASF53
 2679 04d9 01       		.byte	0x1
 2680 04da 1603     		.2byte	0x316
 2681 04dc 5C030000 		.4byte	0x35c
 2682 04e0 02       		.uleb128 0x2
 2683 04e1 91       		.byte	0x91
 2684 04e2 74       		.sleb128 -12
 2685 04e3 13       		.uleb128 0x13
 2686 04e4 58010000 		.4byte	.LASF65
 2687 04e8 01       		.byte	0x1
 2688 04e9 1603     		.2byte	0x316
 2689 04eb 43010000 		.4byte	0x143
 2690 04ef 02       		.uleb128 0x2
 2691 04f0 91       		.byte	0x91
ARM GAS  /tmp/cc27momk.s 			page 67


 2692 04f1 73       		.sleb128 -13
 2693 04f2 00       		.byte	0
 2694 04f3 12       		.uleb128 0x12
 2695 04f4 4B040000 		.4byte	.LASF69
 2696 04f8 01       		.byte	0x1
 2697 04f9 FB02     		.2byte	0x2fb
 2698 04fb A4060000 		.4byte	.LFB84
 2699 04ff 42000000 		.4byte	.LFE84-.LFB84
 2700 0503 01       		.uleb128 0x1
 2701 0504 9C       		.byte	0x9c
 2702 0505 28050000 		.4byte	0x528
 2703 0509 13       		.uleb128 0x13
 2704 050a EF030000 		.4byte	.LASF53
 2705 050e 01       		.byte	0x1
 2706 050f FB02     		.2byte	0x2fb
 2707 0511 5C030000 		.4byte	0x35c
 2708 0515 02       		.uleb128 0x2
 2709 0516 91       		.byte	0x91
 2710 0517 74       		.sleb128 -12
 2711 0518 13       		.uleb128 0x13
 2712 0519 58010000 		.4byte	.LASF65
 2713 051d 01       		.byte	0x1
 2714 051e FB02     		.2byte	0x2fb
 2715 0520 43010000 		.4byte	0x143
 2716 0524 02       		.uleb128 0x2
 2717 0525 91       		.byte	0x91
 2718 0526 73       		.sleb128 -13
 2719 0527 00       		.byte	0
 2720 0528 12       		.uleb128 0x12
 2721 0529 E5050000 		.4byte	.LASF70
 2722 052d 01       		.byte	0x1
 2723 052e DC02     		.2byte	0x2dc
 2724 0530 66060000 		.4byte	.LFB83
 2725 0534 3E000000 		.4byte	.LFE83-.LFB83
 2726 0538 01       		.uleb128 0x1
 2727 0539 9C       		.byte	0x9c
 2728 053a 5D050000 		.4byte	0x55d
 2729 053e 13       		.uleb128 0x13
 2730 053f EF030000 		.4byte	.LASF53
 2731 0543 01       		.byte	0x1
 2732 0544 DC02     		.2byte	0x2dc
 2733 0546 5C030000 		.4byte	0x35c
 2734 054a 02       		.uleb128 0x2
 2735 054b 91       		.byte	0x91
 2736 054c 74       		.sleb128 -12
 2737 054d 13       		.uleb128 0x13
 2738 054e 58010000 		.4byte	.LASF65
 2739 0552 01       		.byte	0x1
 2740 0553 DC02     		.2byte	0x2dc
 2741 0555 43010000 		.4byte	0x143
 2742 0559 02       		.uleb128 0x2
 2743 055a 91       		.byte	0x91
 2744 055b 73       		.sleb128 -13
 2745 055c 00       		.byte	0
 2746 055d 12       		.uleb128 0x12
 2747 055e 47050000 		.4byte	.LASF71
 2748 0562 01       		.byte	0x1
ARM GAS  /tmp/cc27momk.s 			page 68


 2749 0563 C202     		.2byte	0x2c2
 2750 0565 28060000 		.4byte	.LFB82
 2751 0569 3E000000 		.4byte	.LFE82-.LFB82
 2752 056d 01       		.uleb128 0x1
 2753 056e 9C       		.byte	0x9c
 2754 056f 92050000 		.4byte	0x592
 2755 0573 13       		.uleb128 0x13
 2756 0574 EF030000 		.4byte	.LASF53
 2757 0578 01       		.byte	0x1
 2758 0579 C202     		.2byte	0x2c2
 2759 057b 5C030000 		.4byte	0x35c
 2760 057f 02       		.uleb128 0x2
 2761 0580 91       		.byte	0x91
 2762 0581 74       		.sleb128 -12
 2763 0582 13       		.uleb128 0x13
 2764 0583 58010000 		.4byte	.LASF65
 2765 0587 01       		.byte	0x1
 2766 0588 C202     		.2byte	0x2c2
 2767 058a 43010000 		.4byte	0x143
 2768 058e 02       		.uleb128 0x2
 2769 058f 91       		.byte	0x91
 2770 0590 73       		.sleb128 -13
 2771 0591 00       		.byte	0
 2772 0592 12       		.uleb128 0x12
 2773 0593 10040000 		.4byte	.LASF72
 2774 0597 01       		.byte	0x1
 2775 0598 A902     		.2byte	0x2a9
 2776 059a EA050000 		.4byte	.LFB81
 2777 059e 3E000000 		.4byte	.LFE81-.LFB81
 2778 05a2 01       		.uleb128 0x1
 2779 05a3 9C       		.byte	0x9c
 2780 05a4 C7050000 		.4byte	0x5c7
 2781 05a8 13       		.uleb128 0x13
 2782 05a9 EF030000 		.4byte	.LASF53
 2783 05ad 01       		.byte	0x1
 2784 05ae A902     		.2byte	0x2a9
 2785 05b0 5C030000 		.4byte	0x35c
 2786 05b4 02       		.uleb128 0x2
 2787 05b5 91       		.byte	0x91
 2788 05b6 74       		.sleb128 -12
 2789 05b7 13       		.uleb128 0x13
 2790 05b8 58010000 		.4byte	.LASF65
 2791 05bc 01       		.byte	0x1
 2792 05bd A902     		.2byte	0x2a9
 2793 05bf 43010000 		.4byte	0x143
 2794 05c3 02       		.uleb128 0x2
 2795 05c4 91       		.byte	0x91
 2796 05c5 73       		.sleb128 -13
 2797 05c6 00       		.byte	0
 2798 05c7 12       		.uleb128 0x12
 2799 05c8 57000000 		.4byte	.LASF73
 2800 05cc 01       		.byte	0x1
 2801 05cd 9602     		.2byte	0x296
 2802 05cf B2050000 		.4byte	.LFB80
 2803 05d3 38000000 		.4byte	.LFE80-.LFB80
 2804 05d7 01       		.uleb128 0x1
 2805 05d8 9C       		.byte	0x9c
ARM GAS  /tmp/cc27momk.s 			page 69


 2806 05d9 FC050000 		.4byte	0x5fc
 2807 05dd 13       		.uleb128 0x13
 2808 05de EF030000 		.4byte	.LASF53
 2809 05e2 01       		.byte	0x1
 2810 05e3 9602     		.2byte	0x296
 2811 05e5 5C030000 		.4byte	0x35c
 2812 05e9 02       		.uleb128 0x2
 2813 05ea 91       		.byte	0x91
 2814 05eb 74       		.sleb128 -12
 2815 05ec 13       		.uleb128 0x13
 2816 05ed 0A060000 		.4byte	.LASF74
 2817 05f1 01       		.byte	0x1
 2818 05f2 9602     		.2byte	0x296
 2819 05f4 97000000 		.4byte	0x97
 2820 05f8 02       		.uleb128 0x2
 2821 05f9 91       		.byte	0x91
 2822 05fa 73       		.sleb128 -13
 2823 05fb 00       		.byte	0
 2824 05fc 12       		.uleb128 0x12
 2825 05fd 26030000 		.4byte	.LASF75
 2826 0601 01       		.byte	0x1
 2827 0602 8202     		.2byte	0x282
 2828 0604 78050000 		.4byte	.LFB79
 2829 0608 3A000000 		.4byte	.LFE79-.LFB79
 2830 060c 01       		.uleb128 0x1
 2831 060d 9C       		.byte	0x9c
 2832 060e 31060000 		.4byte	0x631
 2833 0612 13       		.uleb128 0x13
 2834 0613 EF030000 		.4byte	.LASF53
 2835 0617 01       		.byte	0x1
 2836 0618 8202     		.2byte	0x282
 2837 061a 5C030000 		.4byte	0x35c
 2838 061e 02       		.uleb128 0x2
 2839 061f 91       		.byte	0x91
 2840 0620 74       		.sleb128 -12
 2841 0621 13       		.uleb128 0x13
 2842 0622 EF010000 		.4byte	.LASF76
 2843 0626 01       		.byte	0x1
 2844 0627 8202     		.2byte	0x282
 2845 0629 97000000 		.4byte	0x97
 2846 062d 02       		.uleb128 0x2
 2847 062e 91       		.byte	0x91
 2848 062f 73       		.sleb128 -13
 2849 0630 00       		.byte	0
 2850 0631 12       		.uleb128 0x12
 2851 0632 9F030000 		.4byte	.LASF77
 2852 0636 01       		.byte	0x1
 2853 0637 7202     		.2byte	0x272
 2854 0639 56050000 		.4byte	.LFB78
 2855 063d 22000000 		.4byte	.LFE78-.LFB78
 2856 0641 01       		.uleb128 0x1
 2857 0642 9C       		.byte	0x9c
 2858 0643 57060000 		.4byte	0x657
 2859 0647 13       		.uleb128 0x13
 2860 0648 EF030000 		.4byte	.LASF53
 2861 064c 01       		.byte	0x1
 2862 064d 7202     		.2byte	0x272
ARM GAS  /tmp/cc27momk.s 			page 70


 2863 064f 5C030000 		.4byte	0x35c
 2864 0653 02       		.uleb128 0x2
 2865 0654 91       		.byte	0x91
 2866 0655 74       		.sleb128 -12
 2867 0656 00       		.byte	0
 2868 0657 16       		.uleb128 0x16
 2869 0658 43060000 		.4byte	.LASF78
 2870 065c 01       		.byte	0x1
 2871 065d 6202     		.2byte	0x262
 2872 065f A2000000 		.4byte	0xa2
 2873 0663 38050000 		.4byte	.LFB77
 2874 0667 1E000000 		.4byte	.LFE77-.LFB77
 2875 066b 01       		.uleb128 0x1
 2876 066c 9C       		.byte	0x9c
 2877 066d 81060000 		.4byte	0x681
 2878 0671 13       		.uleb128 0x13
 2879 0672 EF030000 		.4byte	.LASF53
 2880 0676 01       		.byte	0x1
 2881 0677 6202     		.2byte	0x262
 2882 0679 5C030000 		.4byte	0x35c
 2883 067d 02       		.uleb128 0x2
 2884 067e 91       		.byte	0x91
 2885 067f 74       		.sleb128 -12
 2886 0680 00       		.byte	0
 2887 0681 12       		.uleb128 0x12
 2888 0682 23010000 		.4byte	.LASF79
 2889 0686 01       		.byte	0x1
 2890 0687 5102     		.2byte	0x251
 2891 0689 16050000 		.4byte	.LFB76
 2892 068d 22000000 		.4byte	.LFE76-.LFB76
 2893 0691 01       		.uleb128 0x1
 2894 0692 9C       		.byte	0x9c
 2895 0693 B6060000 		.4byte	0x6b6
 2896 0697 13       		.uleb128 0x13
 2897 0698 EF030000 		.4byte	.LASF53
 2898 069c 01       		.byte	0x1
 2899 069d 5102     		.2byte	0x251
 2900 069f 5C030000 		.4byte	0x35c
 2901 06a3 02       		.uleb128 0x2
 2902 06a4 91       		.byte	0x91
 2903 06a5 74       		.sleb128 -12
 2904 06a6 13       		.uleb128 0x13
 2905 06a7 71020000 		.4byte	.LASF80
 2906 06ab 01       		.byte	0x1
 2907 06ac 5102     		.2byte	0x251
 2908 06ae A2000000 		.4byte	0xa2
 2909 06b2 02       		.uleb128 0x2
 2910 06b3 91       		.byte	0x91
 2911 06b4 72       		.sleb128 -14
 2912 06b5 00       		.byte	0
 2913 06b6 12       		.uleb128 0x12
 2914 06b7 87040000 		.4byte	.LASF81
 2915 06bb 01       		.byte	0x1
 2916 06bc 3702     		.2byte	0x237
 2917 06be D8040000 		.4byte	.LFB75
 2918 06c2 3E000000 		.4byte	.LFE75-.LFB75
 2919 06c6 01       		.uleb128 0x1
ARM GAS  /tmp/cc27momk.s 			page 71


 2920 06c7 9C       		.byte	0x9c
 2921 06c8 EB060000 		.4byte	0x6eb
 2922 06cc 13       		.uleb128 0x13
 2923 06cd EF030000 		.4byte	.LASF53
 2924 06d1 01       		.byte	0x1
 2925 06d2 3702     		.2byte	0x237
 2926 06d4 5C030000 		.4byte	0x35c
 2927 06d8 02       		.uleb128 0x2
 2928 06d9 91       		.byte	0x91
 2929 06da 74       		.sleb128 -12
 2930 06db 13       		.uleb128 0x13
 2931 06dc 58010000 		.4byte	.LASF65
 2932 06e0 01       		.byte	0x1
 2933 06e1 3702     		.2byte	0x237
 2934 06e3 43010000 		.4byte	0x143
 2935 06e7 02       		.uleb128 0x2
 2936 06e8 91       		.byte	0x91
 2937 06e9 73       		.sleb128 -13
 2938 06ea 00       		.byte	0
 2939 06eb 12       		.uleb128 0x12
 2940 06ec 18020000 		.4byte	.LASF82
 2941 06f0 01       		.byte	0x1
 2942 06f1 2402     		.2byte	0x224
 2943 06f3 A2040000 		.4byte	.LFB74
 2944 06f7 36000000 		.4byte	.LFE74-.LFB74
 2945 06fb 01       		.uleb128 0x1
 2946 06fc 9C       		.byte	0x9c
 2947 06fd 20070000 		.4byte	0x720
 2948 0701 13       		.uleb128 0x13
 2949 0702 EF030000 		.4byte	.LASF53
 2950 0706 01       		.byte	0x1
 2951 0707 2402     		.2byte	0x224
 2952 0709 5C030000 		.4byte	0x35c
 2953 070d 02       		.uleb128 0x2
 2954 070e 91       		.byte	0x91
 2955 070f 74       		.sleb128 -12
 2956 0710 13       		.uleb128 0x13
 2957 0711 94000000 		.4byte	.LASF83
 2958 0715 01       		.byte	0x1
 2959 0716 2402     		.2byte	0x224
 2960 0718 A2000000 		.4byte	0xa2
 2961 071c 02       		.uleb128 0x2
 2962 071d 91       		.byte	0x91
 2963 071e 72       		.sleb128 -14
 2964 071f 00       		.byte	0
 2965 0720 12       		.uleb128 0x12
 2966 0721 2E000000 		.4byte	.LASF84
 2967 0725 01       		.byte	0x1
 2968 0726 0702     		.2byte	0x207
 2969 0728 64040000 		.4byte	.LFB73
 2970 072c 3E000000 		.4byte	.LFE73-.LFB73
 2971 0730 01       		.uleb128 0x1
 2972 0731 9C       		.byte	0x9c
 2973 0732 55070000 		.4byte	0x755
 2974 0736 13       		.uleb128 0x13
 2975 0737 EF030000 		.4byte	.LASF53
 2976 073b 01       		.byte	0x1
ARM GAS  /tmp/cc27momk.s 			page 72


 2977 073c 0702     		.2byte	0x207
 2978 073e 5C030000 		.4byte	0x35c
 2979 0742 02       		.uleb128 0x2
 2980 0743 91       		.byte	0x91
 2981 0744 74       		.sleb128 -12
 2982 0745 13       		.uleb128 0x13
 2983 0746 58010000 		.4byte	.LASF65
 2984 074a 01       		.byte	0x1
 2985 074b 0702     		.2byte	0x207
 2986 074d 43010000 		.4byte	0x143
 2987 0751 02       		.uleb128 0x2
 2988 0752 91       		.byte	0x91
 2989 0753 73       		.sleb128 -13
 2990 0754 00       		.byte	0
 2991 0755 12       		.uleb128 0x12
 2992 0756 D2050000 		.4byte	.LASF85
 2993 075a 01       		.byte	0x1
 2994 075b F401     		.2byte	0x1f4
 2995 075d 2E040000 		.4byte	.LFB72
 2996 0761 36000000 		.4byte	.LFE72-.LFB72
 2997 0765 01       		.uleb128 0x1
 2998 0766 9C       		.byte	0x9c
 2999 0767 8A070000 		.4byte	0x78a
 3000 076b 13       		.uleb128 0x13
 3001 076c EF030000 		.4byte	.LASF53
 3002 0770 01       		.byte	0x1
 3003 0771 F401     		.2byte	0x1f4
 3004 0773 5C030000 		.4byte	0x35c
 3005 0777 02       		.uleb128 0x2
 3006 0778 91       		.byte	0x91
 3007 0779 74       		.sleb128 -12
 3008 077a 13       		.uleb128 0x13
 3009 077b 3A010000 		.4byte	.LASF86
 3010 077f 01       		.byte	0x1
 3011 0780 F401     		.2byte	0x1f4
 3012 0782 A2000000 		.4byte	0xa2
 3013 0786 02       		.uleb128 0x2
 3014 0787 91       		.byte	0x91
 3015 0788 72       		.sleb128 -14
 3016 0789 00       		.byte	0
 3017 078a 12       		.uleb128 0x12
 3018 078b ED020000 		.4byte	.LASF87
 3019 078f 01       		.byte	0x1
 3020 0790 DD01     		.2byte	0x1dd
 3021 0792 F6030000 		.4byte	.LFB71
 3022 0796 38000000 		.4byte	.LFE71-.LFB71
 3023 079a 01       		.uleb128 0x1
 3024 079b 9C       		.byte	0x9c
 3025 079c BF070000 		.4byte	0x7bf
 3026 07a0 13       		.uleb128 0x13
 3027 07a1 EF030000 		.4byte	.LASF53
 3028 07a5 01       		.byte	0x1
 3029 07a6 DD01     		.2byte	0x1dd
 3030 07a8 5C030000 		.4byte	0x35c
 3031 07ac 02       		.uleb128 0x2
 3032 07ad 91       		.byte	0x91
 3033 07ae 74       		.sleb128 -12
ARM GAS  /tmp/cc27momk.s 			page 73


 3034 07af 13       		.uleb128 0x13
 3035 07b0 2E040000 		.4byte	.LASF88
 3036 07b4 01       		.byte	0x1
 3037 07b5 DD01     		.2byte	0x1dd
 3038 07b7 97000000 		.4byte	0x97
 3039 07bb 02       		.uleb128 0x2
 3040 07bc 91       		.byte	0x91
 3041 07bd 73       		.sleb128 -13
 3042 07be 00       		.byte	0
 3043 07bf 12       		.uleb128 0x12
 3044 07c0 61010000 		.4byte	.LASF89
 3045 07c4 01       		.byte	0x1
 3046 07c5 C101     		.2byte	0x1c1
 3047 07c7 B0030000 		.4byte	.LFB70
 3048 07cb 46000000 		.4byte	.LFE70-.LFB70
 3049 07cf 01       		.uleb128 0x1
 3050 07d0 9C       		.byte	0x9c
 3051 07d1 03080000 		.4byte	0x803
 3052 07d5 13       		.uleb128 0x13
 3053 07d6 EF030000 		.4byte	.LASF53
 3054 07da 01       		.byte	0x1
 3055 07db C101     		.2byte	0x1c1
 3056 07dd 5C030000 		.4byte	0x35c
 3057 07e1 02       		.uleb128 0x2
 3058 07e2 91       		.byte	0x91
 3059 07e3 74       		.sleb128 -12
 3060 07e4 13       		.uleb128 0x13
 3061 07e5 E2030000 		.4byte	.LASF90
 3062 07e9 01       		.byte	0x1
 3063 07ea C101     		.2byte	0x1c1
 3064 07ec A2000000 		.4byte	0xa2
 3065 07f0 02       		.uleb128 0x2
 3066 07f1 91       		.byte	0x91
 3067 07f2 72       		.sleb128 -14
 3068 07f3 13       		.uleb128 0x13
 3069 07f4 58010000 		.4byte	.LASF65
 3070 07f8 01       		.byte	0x1
 3071 07f9 C101     		.2byte	0x1c1
 3072 07fb 43010000 		.4byte	0x143
 3073 07ff 02       		.uleb128 0x2
 3074 0800 91       		.byte	0x91
 3075 0801 71       		.sleb128 -15
 3076 0802 00       		.byte	0
 3077 0803 12       		.uleb128 0x12
 3078 0804 C1030000 		.4byte	.LASF91
 3079 0808 01       		.byte	0x1
 3080 0809 8501     		.2byte	0x185
 3081 080b 22030000 		.4byte	.LFB69
 3082 080f 8E000000 		.4byte	.LFE69-.LFB69
 3083 0813 01       		.uleb128 0x1
 3084 0814 9C       		.byte	0x9c
 3085 0815 83080000 		.4byte	0x883
 3086 0819 13       		.uleb128 0x13
 3087 081a EF030000 		.4byte	.LASF53
 3088 081e 01       		.byte	0x1
 3089 081f 8501     		.2byte	0x185
 3090 0821 5C030000 		.4byte	0x35c
ARM GAS  /tmp/cc27momk.s 			page 74


 3091 0825 02       		.uleb128 0x2
 3092 0826 91       		.byte	0x91
 3093 0827 64       		.sleb128 -28
 3094 0828 13       		.uleb128 0x13
 3095 0829 97050000 		.4byte	.LASF54
 3096 082d 01       		.byte	0x1
 3097 082e 8501     		.2byte	0x185
 3098 0830 A2000000 		.4byte	0xa2
 3099 0834 02       		.uleb128 0x2
 3100 0835 91       		.byte	0x91
 3101 0836 62       		.sleb128 -30
 3102 0837 13       		.uleb128 0x13
 3103 0838 58010000 		.4byte	.LASF65
 3104 083c 01       		.byte	0x1
 3105 083d 8501     		.2byte	0x185
 3106 083f 43010000 		.4byte	0x143
 3107 0843 02       		.uleb128 0x2
 3108 0844 91       		.byte	0x91
 3109 0845 61       		.sleb128 -31
 3110 0846 14       		.uleb128 0x14
 3111 0847 55060000 		.4byte	.LASF57
 3112 084b 01       		.byte	0x1
 3113 084c 8701     		.2byte	0x187
 3114 084e C2000000 		.4byte	0xc2
 3115 0852 02       		.uleb128 0x2
 3116 0853 91       		.byte	0x91
 3117 0854 70       		.sleb128 -16
 3118 0855 14       		.uleb128 0x14
 3119 0856 28000000 		.4byte	.LASF92
 3120 085a 01       		.byte	0x1
 3121 085b 8701     		.2byte	0x187
 3122 085d C2000000 		.4byte	0xc2
 3123 0861 02       		.uleb128 0x2
 3124 0862 91       		.byte	0x91
 3125 0863 6C       		.sleb128 -20
 3126 0864 14       		.uleb128 0x14
 3127 0865 25060000 		.4byte	.LASF56
 3128 0869 01       		.byte	0x1
 3129 086a 8701     		.2byte	0x187
 3130 086c C2000000 		.4byte	0xc2
 3131 0870 02       		.uleb128 0x2
 3132 0871 91       		.byte	0x91
 3133 0872 68       		.sleb128 -24
 3134 0873 14       		.uleb128 0x14
 3135 0874 D2020000 		.4byte	.LASF93
 3136 0878 01       		.byte	0x1
 3137 0879 8801     		.2byte	0x188
 3138 087b C2000000 		.4byte	0xc2
 3139 087f 02       		.uleb128 0x2
 3140 0880 91       		.byte	0x91
 3141 0881 74       		.sleb128 -12
 3142 0882 00       		.byte	0
 3143 0883 12       		.uleb128 0x12
 3144 0884 19010000 		.4byte	.LASF94
 3145 0888 01       		.byte	0x1
 3146 0889 6001     		.2byte	0x160
 3147 088b E4020000 		.4byte	.LFB68
ARM GAS  /tmp/cc27momk.s 			page 75


 3148 088f 3E000000 		.4byte	.LFE68-.LFB68
 3149 0893 01       		.uleb128 0x1
 3150 0894 9C       		.byte	0x9c
 3151 0895 B8080000 		.4byte	0x8b8
 3152 0899 13       		.uleb128 0x13
 3153 089a EF030000 		.4byte	.LASF53
 3154 089e 01       		.byte	0x1
 3155 089f 6001     		.2byte	0x160
 3156 08a1 5C030000 		.4byte	0x35c
 3157 08a5 02       		.uleb128 0x2
 3158 08a6 91       		.byte	0x91
 3159 08a7 74       		.sleb128 -12
 3160 08a8 13       		.uleb128 0x13
 3161 08a9 58010000 		.4byte	.LASF65
 3162 08ad 01       		.byte	0x1
 3163 08ae 6001     		.2byte	0x160
 3164 08b0 43010000 		.4byte	0x143
 3165 08b4 02       		.uleb128 0x2
 3166 08b5 91       		.byte	0x91
 3167 08b6 73       		.sleb128 -13
 3168 08b7 00       		.byte	0
 3169 08b8 12       		.uleb128 0x12
 3170 08b9 AE020000 		.4byte	.LASF95
 3171 08bd 01       		.byte	0x1
 3172 08be 4E01     		.2byte	0x14e
 3173 08c0 BA020000 		.4byte	.LFB67
 3174 08c4 2A000000 		.4byte	.LFE67-.LFB67
 3175 08c8 01       		.uleb128 0x1
 3176 08c9 9C       		.byte	0x9c
 3177 08ca DE080000 		.4byte	0x8de
 3178 08ce 13       		.uleb128 0x13
 3179 08cf 5B020000 		.4byte	.LASF96
 3180 08d3 01       		.byte	0x1
 3181 08d4 4E01     		.2byte	0x14e
 3182 08d6 DE080000 		.4byte	0x8de
 3183 08da 02       		.uleb128 0x2
 3184 08db 91       		.byte	0x91
 3185 08dc 74       		.sleb128 -12
 3186 08dd 00       		.byte	0
 3187 08de 15       		.uleb128 0x15
 3188 08df 04       		.byte	0x4
 3189 08e0 AE020000 		.4byte	0x2ae
 3190 08e4 12       		.uleb128 0x12
 3191 08e5 C2050000 		.4byte	.LASF97
 3192 08e9 01       		.byte	0x1
 3193 08ea 2F01     		.2byte	0x12f
 3194 08ec 64020000 		.4byte	.LFB66
 3195 08f0 56000000 		.4byte	.LFE66-.LFB66
 3196 08f4 01       		.uleb128 0x1
 3197 08f5 9C       		.byte	0x9c
 3198 08f6 28090000 		.4byte	0x928
 3199 08fa 13       		.uleb128 0x13
 3200 08fb EF030000 		.4byte	.LASF53
 3201 08ff 01       		.byte	0x1
 3202 0900 2F01     		.2byte	0x12f
 3203 0902 5C030000 		.4byte	0x35c
 3204 0906 02       		.uleb128 0x2
ARM GAS  /tmp/cc27momk.s 			page 76


 3205 0907 91       		.byte	0x91
 3206 0908 6C       		.sleb128 -20
 3207 0909 13       		.uleb128 0x13
 3208 090a 5B020000 		.4byte	.LASF96
 3209 090e 01       		.byte	0x1
 3210 090f 2F01     		.2byte	0x12f
 3211 0911 DE080000 		.4byte	0x8de
 3212 0915 02       		.uleb128 0x2
 3213 0916 91       		.byte	0x91
 3214 0917 68       		.sleb128 -24
 3215 0918 14       		.uleb128 0x14
 3216 0919 6A000000 		.4byte	.LASF98
 3217 091d 01       		.byte	0x1
 3218 091e 3101     		.2byte	0x131
 3219 0920 C2000000 		.4byte	0xc2
 3220 0924 02       		.uleb128 0x2
 3221 0925 91       		.byte	0x91
 3222 0926 74       		.sleb128 -12
 3223 0927 00       		.byte	0
 3224 0928 12       		.uleb128 0x12
 3225 0929 F9050000 		.4byte	.LASF99
 3226 092d 01       		.byte	0x1
 3227 092e 1A01     		.2byte	0x11a
 3228 0930 2C020000 		.4byte	.LFB65
 3229 0934 38000000 		.4byte	.LFE65-.LFB65
 3230 0938 01       		.uleb128 0x1
 3231 0939 9C       		.byte	0x9c
 3232 093a 4E090000 		.4byte	0x94e
 3233 093e 13       		.uleb128 0x13
 3234 093f A0050000 		.4byte	.LASF100
 3235 0943 01       		.byte	0x1
 3236 0944 1A01     		.2byte	0x11a
 3237 0946 4E090000 		.4byte	0x94e
 3238 094a 02       		.uleb128 0x2
 3239 094b 91       		.byte	0x91
 3240 094c 74       		.sleb128 -12
 3241 094d 00       		.byte	0
 3242 094e 15       		.uleb128 0x15
 3243 094f 04       		.byte	0x4
 3244 0950 6A020000 		.4byte	0x26a
 3245 0954 17       		.uleb128 0x17
 3246 0955 71000000 		.4byte	.LASF101
 3247 0959 01       		.byte	0x1
 3248 095a B1       		.byte	0xb1
 3249 095b B8000000 		.4byte	.LFB64
 3250 095f 74010000 		.4byte	.LFE64-.LFB64
 3251 0963 01       		.uleb128 0x1
 3252 0964 9C       		.byte	0x9c
 3253 0965 DA090000 		.4byte	0x9da
 3254 0969 18       		.uleb128 0x18
 3255 096a EF030000 		.4byte	.LASF53
 3256 096e 01       		.byte	0x1
 3257 096f B1       		.byte	0xb1
 3258 0970 5C030000 		.4byte	0x35c
 3259 0974 02       		.uleb128 0x2
 3260 0975 91       		.byte	0x91
 3261 0976 4C       		.sleb128 -52
ARM GAS  /tmp/cc27momk.s 			page 77


 3262 0977 18       		.uleb128 0x18
 3263 0978 A0050000 		.4byte	.LASF100
 3264 097c 01       		.byte	0x1
 3265 097d B1       		.byte	0xb1
 3266 097e 4E090000 		.4byte	0x94e
 3267 0982 02       		.uleb128 0x2
 3268 0983 91       		.byte	0x91
 3269 0984 48       		.sleb128 -56
 3270 0985 19       		.uleb128 0x19
 3271 0986 6A000000 		.4byte	.LASF98
 3272 098a 01       		.byte	0x1
 3273 098b B3       		.byte	0xb3
 3274 098c C2000000 		.4byte	0xc2
 3275 0990 02       		.uleb128 0x2
 3276 0991 91       		.byte	0x91
 3277 0992 74       		.sleb128 -12
 3278 0993 19       		.uleb128 0x19
 3279 0994 AE010000 		.4byte	.LASF102
 3280 0998 01       		.byte	0x1
 3281 0999 B3       		.byte	0xb3
 3282 099a C2000000 		.4byte	0xc2
 3283 099e 02       		.uleb128 0x2
 3284 099f 91       		.byte	0x91
 3285 09a0 70       		.sleb128 -16
 3286 09a1 19       		.uleb128 0x19
 3287 09a2 00000000 		.4byte	.LASF103
 3288 09a6 01       		.byte	0x1
 3289 09a7 B4       		.byte	0xb4
 3290 09a8 C2000000 		.4byte	0xc2
 3291 09ac 02       		.uleb128 0x2
 3292 09ad 91       		.byte	0x91
 3293 09ae 6C       		.sleb128 -20
 3294 09af 19       		.uleb128 0x19
 3295 09b0 25050000 		.4byte	.LASF104
 3296 09b4 01       		.byte	0x1
 3297 09b5 B5       		.byte	0xb5
 3298 09b6 C2000000 		.4byte	0xc2
 3299 09ba 02       		.uleb128 0x2
 3300 09bb 91       		.byte	0x91
 3301 09bc 68       		.sleb128 -24
 3302 09bd 19       		.uleb128 0x19
 3303 09be D2020000 		.4byte	.LASF93
 3304 09c2 01       		.byte	0x1
 3305 09c3 B6       		.byte	0xb6
 3306 09c4 C2000000 		.4byte	0xc2
 3307 09c8 02       		.uleb128 0x2
 3308 09c9 91       		.byte	0x91
 3309 09ca 64       		.sleb128 -28
 3310 09cb 19       		.uleb128 0x19
 3311 09cc B1050000 		.4byte	.LASF105
 3312 09d0 01       		.byte	0x1
 3313 09d1 B7       		.byte	0xb7
 3314 09d2 FE020000 		.4byte	0x2fe
 3315 09d6 02       		.uleb128 0x2
 3316 09d7 91       		.byte	0x91
 3317 09d8 50       		.sleb128 -48
 3318 09d9 00       		.byte	0
ARM GAS  /tmp/cc27momk.s 			page 78


 3319 09da 1A       		.uleb128 0x1a
 3320 09db 4E020000 		.4byte	.LASF109
 3321 09df 01       		.byte	0x1
 3322 09e0 83       		.byte	0x83
 3323 09e1 00000000 		.4byte	.LFB63
 3324 09e5 B8000000 		.4byte	.LFE63-.LFB63
 3325 09e9 01       		.uleb128 0x1
 3326 09ea 9C       		.byte	0x9c
 3327 09eb 18       		.uleb128 0x18
 3328 09ec EF030000 		.4byte	.LASF53
 3329 09f0 01       		.byte	0x1
 3330 09f1 83       		.byte	0x83
 3331 09f2 5C030000 		.4byte	0x35c
 3332 09f6 02       		.uleb128 0x2
 3333 09f7 91       		.byte	0x91
 3334 09f8 74       		.sleb128 -12
 3335 09f9 00       		.byte	0
 3336 09fa 00       		.byte	0
 3337              		.section	.debug_abbrev,"",%progbits
 3338              	.Ldebug_abbrev0:
 3339 0000 01       		.uleb128 0x1
 3340 0001 11       		.uleb128 0x11
 3341 0002 01       		.byte	0x1
 3342 0003 25       		.uleb128 0x25
 3343 0004 0E       		.uleb128 0xe
 3344 0005 13       		.uleb128 0x13
 3345 0006 0B       		.uleb128 0xb
 3346 0007 03       		.uleb128 0x3
 3347 0008 0E       		.uleb128 0xe
 3348 0009 1B       		.uleb128 0x1b
 3349 000a 0E       		.uleb128 0xe
 3350 000b 11       		.uleb128 0x11
 3351 000c 01       		.uleb128 0x1
 3352 000d 12       		.uleb128 0x12
 3353 000e 06       		.uleb128 0x6
 3354 000f 10       		.uleb128 0x10
 3355 0010 17       		.uleb128 0x17
 3356 0011 00       		.byte	0
 3357 0012 00       		.byte	0
 3358 0013 02       		.uleb128 0x2
 3359 0014 24       		.uleb128 0x24
 3360 0015 00       		.byte	0
 3361 0016 0B       		.uleb128 0xb
 3362 0017 0B       		.uleb128 0xb
 3363 0018 3E       		.uleb128 0x3e
 3364 0019 0B       		.uleb128 0xb
 3365 001a 03       		.uleb128 0x3
 3366 001b 0E       		.uleb128 0xe
 3367 001c 00       		.byte	0
 3368 001d 00       		.byte	0
 3369 001e 03       		.uleb128 0x3
 3370 001f 16       		.uleb128 0x16
 3371 0020 00       		.byte	0
 3372 0021 03       		.uleb128 0x3
 3373 0022 0E       		.uleb128 0xe
 3374 0023 3A       		.uleb128 0x3a
 3375 0024 0B       		.uleb128 0xb
ARM GAS  /tmp/cc27momk.s 			page 79


 3376 0025 3B       		.uleb128 0x3b
 3377 0026 0B       		.uleb128 0xb
 3378 0027 49       		.uleb128 0x49
 3379 0028 13       		.uleb128 0x13
 3380 0029 00       		.byte	0
 3381 002a 00       		.byte	0
 3382 002b 04       		.uleb128 0x4
 3383 002c 24       		.uleb128 0x24
 3384 002d 00       		.byte	0
 3385 002e 0B       		.uleb128 0xb
 3386 002f 0B       		.uleb128 0xb
 3387 0030 3E       		.uleb128 0x3e
 3388 0031 0B       		.uleb128 0xb
 3389 0032 03       		.uleb128 0x3
 3390 0033 08       		.uleb128 0x8
 3391 0034 00       		.byte	0
 3392 0035 00       		.byte	0
 3393 0036 05       		.uleb128 0x5
 3394 0037 35       		.uleb128 0x35
 3395 0038 00       		.byte	0
 3396 0039 49       		.uleb128 0x49
 3397 003a 13       		.uleb128 0x13
 3398 003b 00       		.byte	0
 3399 003c 00       		.byte	0
 3400 003d 06       		.uleb128 0x6
 3401 003e 34       		.uleb128 0x34
 3402 003f 00       		.byte	0
 3403 0040 03       		.uleb128 0x3
 3404 0041 0E       		.uleb128 0xe
 3405 0042 3A       		.uleb128 0x3a
 3406 0043 0B       		.uleb128 0xb
 3407 0044 3B       		.uleb128 0x3b
 3408 0045 05       		.uleb128 0x5
 3409 0046 49       		.uleb128 0x49
 3410 0047 13       		.uleb128 0x13
 3411 0048 3F       		.uleb128 0x3f
 3412 0049 19       		.uleb128 0x19
 3413 004a 3C       		.uleb128 0x3c
 3414 004b 19       		.uleb128 0x19
 3415 004c 00       		.byte	0
 3416 004d 00       		.byte	0
 3417 004e 07       		.uleb128 0x7
 3418 004f 34       		.uleb128 0x34
 3419 0050 00       		.byte	0
 3420 0051 03       		.uleb128 0x3
 3421 0052 0E       		.uleb128 0xe
 3422 0053 3A       		.uleb128 0x3a
 3423 0054 0B       		.uleb128 0xb
 3424 0055 3B       		.uleb128 0x3b
 3425 0056 0B       		.uleb128 0xb
 3426 0057 49       		.uleb128 0x49
 3427 0058 13       		.uleb128 0x13
 3428 0059 3F       		.uleb128 0x3f
 3429 005a 19       		.uleb128 0x19
 3430 005b 3C       		.uleb128 0x3c
 3431 005c 19       		.uleb128 0x19
 3432 005d 00       		.byte	0
ARM GAS  /tmp/cc27momk.s 			page 80


 3433 005e 00       		.byte	0
 3434 005f 08       		.uleb128 0x8
 3435 0060 16       		.uleb128 0x16
 3436 0061 00       		.byte	0
 3437 0062 03       		.uleb128 0x3
 3438 0063 08       		.uleb128 0x8
 3439 0064 3A       		.uleb128 0x3a
 3440 0065 0B       		.uleb128 0xb
 3441 0066 3B       		.uleb128 0x3b
 3442 0067 05       		.uleb128 0x5
 3443 0068 49       		.uleb128 0x49
 3444 0069 13       		.uleb128 0x13
 3445 006a 00       		.byte	0
 3446 006b 00       		.byte	0
 3447 006c 09       		.uleb128 0x9
 3448 006d 04       		.uleb128 0x4
 3449 006e 01       		.byte	0x1
 3450 006f 0B       		.uleb128 0xb
 3451 0070 0B       		.uleb128 0xb
 3452 0071 49       		.uleb128 0x49
 3453 0072 13       		.uleb128 0x13
 3454 0073 3A       		.uleb128 0x3a
 3455 0074 0B       		.uleb128 0xb
 3456 0075 3B       		.uleb128 0x3b
 3457 0076 05       		.uleb128 0x5
 3458 0077 01       		.uleb128 0x1
 3459 0078 13       		.uleb128 0x13
 3460 0079 00       		.byte	0
 3461 007a 00       		.byte	0
 3462 007b 0A       		.uleb128 0xa
 3463 007c 28       		.uleb128 0x28
 3464 007d 00       		.byte	0
 3465 007e 03       		.uleb128 0x3
 3466 007f 0E       		.uleb128 0xe
 3467 0080 1C       		.uleb128 0x1c
 3468 0081 0B       		.uleb128 0xb
 3469 0082 00       		.byte	0
 3470 0083 00       		.byte	0
 3471 0084 0B       		.uleb128 0xb
 3472 0085 28       		.uleb128 0x28
 3473 0086 00       		.byte	0
 3474 0087 03       		.uleb128 0x3
 3475 0088 08       		.uleb128 0x8
 3476 0089 1C       		.uleb128 0x1c
 3477 008a 0B       		.uleb128 0xb
 3478 008b 00       		.byte	0
 3479 008c 00       		.byte	0
 3480 008d 0C       		.uleb128 0xc
 3481 008e 16       		.uleb128 0x16
 3482 008f 00       		.byte	0
 3483 0090 03       		.uleb128 0x3
 3484 0091 0E       		.uleb128 0xe
 3485 0092 3A       		.uleb128 0x3a
 3486 0093 0B       		.uleb128 0xb
 3487 0094 3B       		.uleb128 0x3b
 3488 0095 05       		.uleb128 0x5
 3489 0096 49       		.uleb128 0x49
ARM GAS  /tmp/cc27momk.s 			page 81


 3490 0097 13       		.uleb128 0x13
 3491 0098 00       		.byte	0
 3492 0099 00       		.byte	0
 3493 009a 0D       		.uleb128 0xd
 3494 009b 13       		.uleb128 0x13
 3495 009c 01       		.byte	0x1
 3496 009d 0B       		.uleb128 0xb
 3497 009e 0B       		.uleb128 0xb
 3498 009f 3A       		.uleb128 0x3a
 3499 00a0 0B       		.uleb128 0xb
 3500 00a1 3B       		.uleb128 0x3b
 3501 00a2 05       		.uleb128 0x5
 3502 00a3 01       		.uleb128 0x1
 3503 00a4 13       		.uleb128 0x13
 3504 00a5 00       		.byte	0
 3505 00a6 00       		.byte	0
 3506 00a7 0E       		.uleb128 0xe
 3507 00a8 0D       		.uleb128 0xd
 3508 00a9 00       		.byte	0
 3509 00aa 03       		.uleb128 0x3
 3510 00ab 08       		.uleb128 0x8
 3511 00ac 3A       		.uleb128 0x3a
 3512 00ad 0B       		.uleb128 0xb
 3513 00ae 3B       		.uleb128 0x3b
 3514 00af 05       		.uleb128 0x5
 3515 00b0 49       		.uleb128 0x49
 3516 00b1 13       		.uleb128 0x13
 3517 00b2 38       		.uleb128 0x38
 3518 00b3 0B       		.uleb128 0xb
 3519 00b4 00       		.byte	0
 3520 00b5 00       		.byte	0
 3521 00b6 0F       		.uleb128 0xf
 3522 00b7 0D       		.uleb128 0xd
 3523 00b8 00       		.byte	0
 3524 00b9 03       		.uleb128 0x3
 3525 00ba 0E       		.uleb128 0xe
 3526 00bb 3A       		.uleb128 0x3a
 3527 00bc 0B       		.uleb128 0xb
 3528 00bd 3B       		.uleb128 0x3b
 3529 00be 05       		.uleb128 0x5
 3530 00bf 49       		.uleb128 0x49
 3531 00c0 13       		.uleb128 0x13
 3532 00c1 38       		.uleb128 0x38
 3533 00c2 0B       		.uleb128 0xb
 3534 00c3 00       		.byte	0
 3535 00c4 00       		.byte	0
 3536 00c5 10       		.uleb128 0x10
 3537 00c6 13       		.uleb128 0x13
 3538 00c7 01       		.byte	0x1
 3539 00c8 0B       		.uleb128 0xb
 3540 00c9 0B       		.uleb128 0xb
 3541 00ca 3A       		.uleb128 0x3a
 3542 00cb 0B       		.uleb128 0xb
 3543 00cc 3B       		.uleb128 0x3b
 3544 00cd 0B       		.uleb128 0xb
 3545 00ce 01       		.uleb128 0x1
 3546 00cf 13       		.uleb128 0x13
ARM GAS  /tmp/cc27momk.s 			page 82


 3547 00d0 00       		.byte	0
 3548 00d1 00       		.byte	0
 3549 00d2 11       		.uleb128 0x11
 3550 00d3 0D       		.uleb128 0xd
 3551 00d4 00       		.byte	0
 3552 00d5 03       		.uleb128 0x3
 3553 00d6 0E       		.uleb128 0xe
 3554 00d7 3A       		.uleb128 0x3a
 3555 00d8 0B       		.uleb128 0xb
 3556 00d9 3B       		.uleb128 0x3b
 3557 00da 0B       		.uleb128 0xb
 3558 00db 49       		.uleb128 0x49
 3559 00dc 13       		.uleb128 0x13
 3560 00dd 38       		.uleb128 0x38
 3561 00de 0B       		.uleb128 0xb
 3562 00df 00       		.byte	0
 3563 00e0 00       		.byte	0
 3564 00e1 12       		.uleb128 0x12
 3565 00e2 2E       		.uleb128 0x2e
 3566 00e3 01       		.byte	0x1
 3567 00e4 3F       		.uleb128 0x3f
 3568 00e5 19       		.uleb128 0x19
 3569 00e6 03       		.uleb128 0x3
 3570 00e7 0E       		.uleb128 0xe
 3571 00e8 3A       		.uleb128 0x3a
 3572 00e9 0B       		.uleb128 0xb
 3573 00ea 3B       		.uleb128 0x3b
 3574 00eb 05       		.uleb128 0x5
 3575 00ec 27       		.uleb128 0x27
 3576 00ed 19       		.uleb128 0x19
 3577 00ee 11       		.uleb128 0x11
 3578 00ef 01       		.uleb128 0x1
 3579 00f0 12       		.uleb128 0x12
 3580 00f1 06       		.uleb128 0x6
 3581 00f2 40       		.uleb128 0x40
 3582 00f3 18       		.uleb128 0x18
 3583 00f4 9742     		.uleb128 0x2117
 3584 00f6 19       		.uleb128 0x19
 3585 00f7 01       		.uleb128 0x1
 3586 00f8 13       		.uleb128 0x13
 3587 00f9 00       		.byte	0
 3588 00fa 00       		.byte	0
 3589 00fb 13       		.uleb128 0x13
 3590 00fc 05       		.uleb128 0x5
 3591 00fd 00       		.byte	0
 3592 00fe 03       		.uleb128 0x3
 3593 00ff 0E       		.uleb128 0xe
 3594 0100 3A       		.uleb128 0x3a
 3595 0101 0B       		.uleb128 0xb
 3596 0102 3B       		.uleb128 0x3b
 3597 0103 05       		.uleb128 0x5
 3598 0104 49       		.uleb128 0x49
 3599 0105 13       		.uleb128 0x13
 3600 0106 02       		.uleb128 0x2
 3601 0107 18       		.uleb128 0x18
 3602 0108 00       		.byte	0
 3603 0109 00       		.byte	0
ARM GAS  /tmp/cc27momk.s 			page 83


 3604 010a 14       		.uleb128 0x14
 3605 010b 34       		.uleb128 0x34
 3606 010c 00       		.byte	0
 3607 010d 03       		.uleb128 0x3
 3608 010e 0E       		.uleb128 0xe
 3609 010f 3A       		.uleb128 0x3a
 3610 0110 0B       		.uleb128 0xb
 3611 0111 3B       		.uleb128 0x3b
 3612 0112 05       		.uleb128 0x5
 3613 0113 49       		.uleb128 0x49
 3614 0114 13       		.uleb128 0x13
 3615 0115 02       		.uleb128 0x2
 3616 0116 18       		.uleb128 0x18
 3617 0117 00       		.byte	0
 3618 0118 00       		.byte	0
 3619 0119 15       		.uleb128 0x15
 3620 011a 0F       		.uleb128 0xf
 3621 011b 00       		.byte	0
 3622 011c 0B       		.uleb128 0xb
 3623 011d 0B       		.uleb128 0xb
 3624 011e 49       		.uleb128 0x49
 3625 011f 13       		.uleb128 0x13
 3626 0120 00       		.byte	0
 3627 0121 00       		.byte	0
 3628 0122 16       		.uleb128 0x16
 3629 0123 2E       		.uleb128 0x2e
 3630 0124 01       		.byte	0x1
 3631 0125 3F       		.uleb128 0x3f
 3632 0126 19       		.uleb128 0x19
 3633 0127 03       		.uleb128 0x3
 3634 0128 0E       		.uleb128 0xe
 3635 0129 3A       		.uleb128 0x3a
 3636 012a 0B       		.uleb128 0xb
 3637 012b 3B       		.uleb128 0x3b
 3638 012c 05       		.uleb128 0x5
 3639 012d 27       		.uleb128 0x27
 3640 012e 19       		.uleb128 0x19
 3641 012f 49       		.uleb128 0x49
 3642 0130 13       		.uleb128 0x13
 3643 0131 11       		.uleb128 0x11
 3644 0132 01       		.uleb128 0x1
 3645 0133 12       		.uleb128 0x12
 3646 0134 06       		.uleb128 0x6
 3647 0135 40       		.uleb128 0x40
 3648 0136 18       		.uleb128 0x18
 3649 0137 9742     		.uleb128 0x2117
 3650 0139 19       		.uleb128 0x19
 3651 013a 01       		.uleb128 0x1
 3652 013b 13       		.uleb128 0x13
 3653 013c 00       		.byte	0
 3654 013d 00       		.byte	0
 3655 013e 17       		.uleb128 0x17
 3656 013f 2E       		.uleb128 0x2e
 3657 0140 01       		.byte	0x1
 3658 0141 3F       		.uleb128 0x3f
 3659 0142 19       		.uleb128 0x19
 3660 0143 03       		.uleb128 0x3
ARM GAS  /tmp/cc27momk.s 			page 84


 3661 0144 0E       		.uleb128 0xe
 3662 0145 3A       		.uleb128 0x3a
 3663 0146 0B       		.uleb128 0xb
 3664 0147 3B       		.uleb128 0x3b
 3665 0148 0B       		.uleb128 0xb
 3666 0149 27       		.uleb128 0x27
 3667 014a 19       		.uleb128 0x19
 3668 014b 11       		.uleb128 0x11
 3669 014c 01       		.uleb128 0x1
 3670 014d 12       		.uleb128 0x12
 3671 014e 06       		.uleb128 0x6
 3672 014f 40       		.uleb128 0x40
 3673 0150 18       		.uleb128 0x18
 3674 0151 9642     		.uleb128 0x2116
 3675 0153 19       		.uleb128 0x19
 3676 0154 01       		.uleb128 0x1
 3677 0155 13       		.uleb128 0x13
 3678 0156 00       		.byte	0
 3679 0157 00       		.byte	0
 3680 0158 18       		.uleb128 0x18
 3681 0159 05       		.uleb128 0x5
 3682 015a 00       		.byte	0
 3683 015b 03       		.uleb128 0x3
 3684 015c 0E       		.uleb128 0xe
 3685 015d 3A       		.uleb128 0x3a
 3686 015e 0B       		.uleb128 0xb
 3687 015f 3B       		.uleb128 0x3b
 3688 0160 0B       		.uleb128 0xb
 3689 0161 49       		.uleb128 0x49
 3690 0162 13       		.uleb128 0x13
 3691 0163 02       		.uleb128 0x2
 3692 0164 18       		.uleb128 0x18
 3693 0165 00       		.byte	0
 3694 0166 00       		.byte	0
 3695 0167 19       		.uleb128 0x19
 3696 0168 34       		.uleb128 0x34
 3697 0169 00       		.byte	0
 3698 016a 03       		.uleb128 0x3
 3699 016b 0E       		.uleb128 0xe
 3700 016c 3A       		.uleb128 0x3a
 3701 016d 0B       		.uleb128 0xb
 3702 016e 3B       		.uleb128 0x3b
 3703 016f 0B       		.uleb128 0xb
 3704 0170 49       		.uleb128 0x49
 3705 0171 13       		.uleb128 0x13
 3706 0172 02       		.uleb128 0x2
 3707 0173 18       		.uleb128 0x18
 3708 0174 00       		.byte	0
 3709 0175 00       		.byte	0
 3710 0176 1A       		.uleb128 0x1a
 3711 0177 2E       		.uleb128 0x2e
 3712 0178 01       		.byte	0x1
 3713 0179 3F       		.uleb128 0x3f
 3714 017a 19       		.uleb128 0x19
 3715 017b 03       		.uleb128 0x3
 3716 017c 0E       		.uleb128 0xe
 3717 017d 3A       		.uleb128 0x3a
ARM GAS  /tmp/cc27momk.s 			page 85


 3718 017e 0B       		.uleb128 0xb
 3719 017f 3B       		.uleb128 0x3b
 3720 0180 0B       		.uleb128 0xb
 3721 0181 27       		.uleb128 0x27
 3722 0182 19       		.uleb128 0x19
 3723 0183 11       		.uleb128 0x11
 3724 0184 01       		.uleb128 0x1
 3725 0185 12       		.uleb128 0x12
 3726 0186 06       		.uleb128 0x6
 3727 0187 40       		.uleb128 0x40
 3728 0188 18       		.uleb128 0x18
 3729 0189 9642     		.uleb128 0x2116
 3730 018b 19       		.uleb128 0x19
 3731 018c 00       		.byte	0
 3732 018d 00       		.byte	0
 3733 018e 00       		.byte	0
 3734              		.section	.debug_aranges,"",%progbits
 3735 0000 1C000000 		.4byte	0x1c
 3736 0004 0200     		.2byte	0x2
 3737 0006 00000000 		.4byte	.Ldebug_info0
 3738 000a 04       		.byte	0x4
 3739 000b 00       		.byte	0
 3740 000c 0000     		.2byte	0
 3741 000e 0000     		.2byte	0
 3742 0010 00000000 		.4byte	.Ltext0
 3743 0014 DA080000 		.4byte	.Letext0-.Ltext0
 3744 0018 00000000 		.4byte	0
 3745 001c 00000000 		.4byte	0
 3746              		.section	.debug_line,"",%progbits
 3747              	.Ldebug_line0:
 3748 0000 46020000 		.section	.debug_str,"MS",%progbits,1
 3748      0200F500 
 3748      00000201 
 3748      FB0E0D00 
 3748      01010101 
 3749              	.LASF103:
 3750 0000 696E7465 		.ascii	"integerdivider\000"
 3750      67657264 
 3750      69766964 
 3750      657200
 3751              	.LASF16:
 3752 000f 75696E74 		.ascii	"uint32_t\000"
 3752      33325F74 
 3752      00
 3753              	.LASF44:
 3754 0018 55534152 		.ascii	"USART_CPHA\000"
 3754      545F4350 
 3754      484100
 3755              	.LASF32:
 3756 0023 47545052 		.ascii	"GTPR\000"
 3756      00
 3757              	.LASF92:
 3758 0028 6974706F 		.ascii	"itpos\000"
 3758      7300
 3759              	.LASF84:
 3760 002e 55534152 		.ascii	"USART_ReceiverWakeUpCmd\000"
 3760      545F5265 
ARM GAS  /tmp/cc27momk.s 			page 86


 3760      63656976 
 3760      65725761 
 3760      6B655570 
 3761              	.LASF47:
 3762 0046 53595343 		.ascii	"SYSCLK_Frequency\000"
 3762      4C4B5F46 
 3762      72657175 
 3762      656E6379 
 3762      00
 3763              	.LASF73:
 3764 0057 55534152 		.ascii	"USART_SetPrescaler\000"
 3764      545F5365 
 3764      74507265 
 3764      7363616C 
 3764      657200
 3765              	.LASF98:
 3766 006a 746D7072 		.ascii	"tmpreg\000"
 3766      656700
 3767              	.LASF101:
 3768 0071 55534152 		.ascii	"USART_Init\000"
 3768      545F496E 
 3768      697400
 3769              	.LASF17:
 3770 007c 73697A65 		.ascii	"sizetype\000"
 3770      74797065 
 3770      00
 3771              	.LASF48:
 3772 0085 48434C4B 		.ascii	"HCLK_Frequency\000"
 3772      5F467265 
 3772      7175656E 
 3772      637900
 3773              	.LASF83:
 3774 0094 55534152 		.ascii	"USART_LINBreakDetectLength\000"
 3774      545F4C49 
 3774      4E427265 
 3774      616B4465 
 3774      74656374 
 3775              	.LASF68:
 3776 00af 55534152 		.ascii	"USART_OneBitMethodCmd\000"
 3776      545F4F6E 
 3776      65426974 
 3776      4D657468 
 3776      6F64436D 
 3777              	.LASF21:
 3778 00c5 466C6167 		.ascii	"FlagStatus\000"
 3778      53746174 
 3778      757300
 3779              	.LASF4:
 3780 00d0 5F5F7569 		.ascii	"__uint16_t\000"
 3780      6E743136 
 3780      5F7400
 3781              	.LASF34:
 3782 00db 55534152 		.ascii	"USART_TypeDef\000"
 3782      545F5479 
 3782      70654465 
 3782      6600
 3783              	.LASF37:
ARM GAS  /tmp/cc27momk.s 			page 87


 3784 00e9 55534152 		.ascii	"USART_StopBits\000"
 3784      545F5374 
 3784      6F704269 
 3784      747300
 3785              	.LASF2:
 3786 00f8 73686F72 		.ascii	"short int\000"
 3786      7420696E 
 3786      7400
 3787              	.LASF46:
 3788 0102 55534152 		.ascii	"USART_ClockInitTypeDef\000"
 3788      545F436C 
 3788      6F636B49 
 3788      6E697454 
 3788      79706544 
 3789              	.LASF94:
 3790 0119 55534152 		.ascii	"USART_Cmd\000"
 3790      545F436D 
 3790      6400
 3791              	.LASF79:
 3792 0123 55534152 		.ascii	"USART_SendData\000"
 3792      545F5365 
 3792      6E644461 
 3792      746100
 3793              	.LASF13:
 3794 0132 75696E74 		.ascii	"uint8_t\000"
 3794      385F7400 
 3795              	.LASF86:
 3796 013a 55534152 		.ascii	"USART_WakeUp\000"
 3796      545F5761 
 3796      6B655570 
 3796      00
 3797              	.LASF36:
 3798 0147 55534152 		.ascii	"USART_WordLength\000"
 3798      545F576F 
 3798      72644C65 
 3798      6E677468 
 3798      00
 3799              	.LASF65:
 3800 0158 4E657753 		.ascii	"NewState\000"
 3800      74617465 
 3800      00
 3801              	.LASF89:
 3802 0161 55534152 		.ascii	"USART_DMACmd\000"
 3802      545F444D 
 3802      41436D64 
 3802      00
 3803              	.LASF23:
 3804 016e 44495341 		.ascii	"DISABLE\000"
 3804      424C4500 
 3805              	.LASF0:
 3806 0176 7369676E 		.ascii	"signed char\000"
 3806      65642063 
 3806      68617200 
 3807              	.LASF45:
 3808 0182 55534152 		.ascii	"USART_LastBit\000"
 3808      545F4C61 
 3808      73744269 
ARM GAS  /tmp/cc27momk.s 			page 88


 3808      7400
 3809              	.LASF35:
 3810 0190 55534152 		.ascii	"USART_BaudRate\000"
 3810      545F4261 
 3810      75645261 
 3810      746500
 3811              	.LASF67:
 3812 019f 55534152 		.ascii	"USART_IrDAMode\000"
 3812      545F4972 
 3812      44414D6F 
 3812      646500
 3813              	.LASF102:
 3814 01ae 61706263 		.ascii	"apbclock\000"
 3814      6C6F636B 
 3814      00
 3815              	.LASF10:
 3816 01b7 6C6F6E67 		.ascii	"long long int\000"
 3816      206C6F6E 
 3816      6720696E 
 3816      7400
 3817              	.LASF22:
 3818 01c5 49545374 		.ascii	"ITStatus\000"
 3818      61747573 
 3818      00
 3819              	.LASF7:
 3820 01ce 6C6F6E67 		.ascii	"long int\000"
 3820      20696E74 
 3820      00
 3821              	.LASF59:
 3822 01d7 55534152 		.ascii	"USART_ClearITPendingBit\000"
 3822      545F436C 
 3822      65617249 
 3822      5450656E 
 3822      64696E67 
 3823              	.LASF76:
 3824 01ef 55534152 		.ascii	"USART_GuardTime\000"
 3824      545F4775 
 3824      61726454 
 3824      696D6500 
 3825              	.LASF107:
 3826 01ff 636F6D6D 		.ascii	"common/stm32f10x_usart.c\000"
 3826      6F6E2F73 
 3826      746D3332 
 3826      66313078 
 3826      5F757361 
 3827              	.LASF82:
 3828 0218 55534152 		.ascii	"USART_LINBreakDetectLengthConfig\000"
 3828      545F4C49 
 3828      4E427265 
 3828      616B4465 
 3828      74656374 
 3829              	.LASF3:
 3830 0239 5F5F7569 		.ascii	"__uint8_t\000"
 3830      6E74385F 
 3830      7400
 3831              	.LASF61:
 3832 0243 55534152 		.ascii	"USART_FLAG\000"
ARM GAS  /tmp/cc27momk.s 			page 89


 3832      545F464C 
 3832      414700
 3833              	.LASF109:
 3834 024e 55534152 		.ascii	"USART_DeInit\000"
 3834      545F4465 
 3834      496E6974 
 3834      00
 3835              	.LASF96:
 3836 025b 55534152 		.ascii	"USART_ClockInitStruct\000"
 3836      545F436C 
 3836      6F636B49 
 3836      6E697453 
 3836      74727563 
 3837              	.LASF80:
 3838 0271 44617461 		.ascii	"Data\000"
 3838      00
 3839              	.LASF20:
 3840 0276 52455345 		.ascii	"RESET\000"
 3840      5400
 3841              	.LASF108:
 3842 027c 2F686F6D 		.ascii	"/home/enbin/Documents/code/STM/usart\000"
 3842      652F656E 
 3842      62696E2F 
 3842      446F6375 
 3842      6D656E74 
 3843              	.LASF38:
 3844 02a1 55534152 		.ascii	"USART_Parity\000"
 3844      545F5061 
 3844      72697479 
 3844      00
 3845              	.LASF95:
 3846 02ae 55534152 		.ascii	"USART_ClockStructInit\000"
 3846      545F436C 
 3846      6F636B53 
 3846      74727563 
 3846      74496E69 
 3847              	.LASF1:
 3848 02c4 756E7369 		.ascii	"unsigned char\000"
 3848      676E6564 
 3848      20636861 
 3848      7200
 3849              	.LASF93:
 3850 02d2 75736172 		.ascii	"usartxbase\000"
 3850      74786261 
 3850      736500
 3851              	.LASF60:
 3852 02dd 55534152 		.ascii	"USART_ClearFlag\000"
 3852      545F436C 
 3852      65617246 
 3852      6C616700 
 3853              	.LASF87:
 3854 02ed 55534152 		.ascii	"USART_SetAddress\000"
 3854      545F5365 
 3854      74416464 
 3854      72657373 
 3854      00
 3855              	.LASF11:
ARM GAS  /tmp/cc27momk.s 			page 90


 3856 02fe 6C6F6E67 		.ascii	"long long unsigned int\000"
 3856      206C6F6E 
 3856      6720756E 
 3856      7369676E 
 3856      65642069 
 3857              	.LASF51:
 3858 0315 41444343 		.ascii	"ADCCLK_Frequency\000"
 3858      4C4B5F46 
 3858      72657175 
 3858      656E6379 
 3858      00
 3859              	.LASF75:
 3860 0326 55534152 		.ascii	"USART_SetGuardTime\000"
 3860      545F5365 
 3860      74477561 
 3860      72645469 
 3860      6D6500
 3861              	.LASF12:
 3862 0339 756E7369 		.ascii	"unsigned int\000"
 3862      676E6564 
 3862      20696E74 
 3862      00
 3863              	.LASF14:
 3864 0346 75696E74 		.ascii	"uint16_t\000"
 3864      31365F74 
 3864      00
 3865              	.LASF106:
 3866 034f 474E5520 		.ascii	"GNU C11 6.1.1 20160526 -mthumb -mcpu=cortex-m3 -g -"
 3866      43313120 
 3866      362E312E 
 3866      31203230 
 3866      31363035 
 3867 0382 666E6F2D 		.ascii	"fno-common\000"
 3867      636F6D6D 
 3867      6F6E00
 3868              	.LASF9:
 3869 038d 6C6F6E67 		.ascii	"long unsigned int\000"
 3869      20756E73 
 3869      69676E65 
 3869      6420696E 
 3869      7400
 3870              	.LASF77:
 3871 039f 55534152 		.ascii	"USART_SendBreak\000"
 3871      545F5365 
 3871      6E644272 
 3871      65616B00 
 3872              	.LASF41:
 3873 03af 55534152 		.ascii	"USART_InitTypeDef\000"
 3873      545F496E 
 3873      69745479 
 3873      70654465 
 3873      6600
 3874              	.LASF91:
 3875 03c1 55534152 		.ascii	"USART_ITConfig\000"
 3875      545F4954 
 3875      436F6E66 
 3875      696700
ARM GAS  /tmp/cc27momk.s 			page 91


 3876              	.LASF52:
 3877 03d0 5243435F 		.ascii	"RCC_ClocksTypeDef\000"
 3877      436C6F63 
 3877      6B735479 
 3877      70654465 
 3877      6600
 3878              	.LASF90:
 3879 03e2 55534152 		.ascii	"USART_DMAReq\000"
 3879      545F444D 
 3879      41526571 
 3879      00
 3880              	.LASF53:
 3881 03ef 55534152 		.ascii	"USARTx\000"
 3881      547800
 3882              	.LASF40:
 3883 03f6 55534152 		.ascii	"USART_HardwareFlowControl\000"
 3883      545F4861 
 3883      72647761 
 3883      7265466C 
 3883      6F77436F 
 3884              	.LASF72:
 3885 0410 55534152 		.ascii	"USART_SmartCardCmd\000"
 3885      545F536D 
 3885      61727443 
 3885      61726443 
 3885      6D6400
 3886              	.LASF39:
 3887 0423 55534152 		.ascii	"USART_Mode\000"
 3887      545F4D6F 
 3887      646500
 3888              	.LASF88:
 3889 042e 55534152 		.ascii	"USART_Address\000"
 3889      545F4164 
 3889      64726573 
 3889      7300
 3890              	.LASF15:
 3891 043c 696E7433 		.ascii	"int32_t\000"
 3891      325F7400 
 3892              	.LASF55:
 3893 0444 62697470 		.ascii	"bitpos\000"
 3893      6F7300
 3894              	.LASF69:
 3895 044b 55534152 		.ascii	"USART_OverSampling8Cmd\000"
 3895      545F4F76 
 3895      65725361 
 3895      6D706C69 
 3895      6E673843 
 3896              	.LASF5:
 3897 0462 73686F72 		.ascii	"short unsigned int\000"
 3897      7420756E 
 3897      7369676E 
 3897      65642069 
 3897      6E7400
 3898              	.LASF62:
 3899 0475 55534152 		.ascii	"USART_GetITStatus\000"
 3899      545F4765 
 3899      74495453 
ARM GAS  /tmp/cc27momk.s 			page 92


 3899      74617475 
 3899      7300
 3900              	.LASF81:
 3901 0487 55534152 		.ascii	"USART_LINCmd\000"
 3901      545F4C49 
 3901      4E436D64 
 3901      00
 3902              	.LASF66:
 3903 0494 55534152 		.ascii	"USART_IrDAConfig\000"
 3903      545F4972 
 3903      4441436F 
 3903      6E666967 
 3903      00
 3904              	.LASF19:
 3905 04a5 53797374 		.ascii	"SystemCoreClock\000"
 3905      656D436F 
 3905      7265436C 
 3905      6F636B00 
 3906              	.LASF50:
 3907 04b5 50434C4B 		.ascii	"PCLK2_Frequency\000"
 3907      325F4672 
 3907      65717565 
 3907      6E637900 
 3908              	.LASF42:
 3909 04c5 55534152 		.ascii	"USART_Clock\000"
 3909      545F436C 
 3909      6F636B00 
 3910              	.LASF26:
 3911 04d1 52455345 		.ascii	"RESERVED0\000"
 3911      52564544 
 3911      3000
 3912              	.LASF27:
 3913 04db 52455345 		.ascii	"RESERVED1\000"
 3913      52564544 
 3913      3100
 3914              	.LASF28:
 3915 04e5 52455345 		.ascii	"RESERVED2\000"
 3915      52564544 
 3915      3200
 3916              	.LASF29:
 3917 04ef 52455345 		.ascii	"RESERVED3\000"
 3917      52564544 
 3917      3300
 3918              	.LASF30:
 3919 04f9 52455345 		.ascii	"RESERVED4\000"
 3919      52564544 
 3919      3400
 3920              	.LASF31:
 3921 0503 52455345 		.ascii	"RESERVED5\000"
 3921      52564544 
 3921      3500
 3922              	.LASF33:
 3923 050d 52455345 		.ascii	"RESERVED6\000"
 3923      52564544 
 3923      3600
 3924              	.LASF64:
 3925 0517 55534152 		.ascii	"USART_IrDACmd\000"
ARM GAS  /tmp/cc27momk.s 			page 93


 3925      545F4972 
 3925      4441436D 
 3925      6400
 3926              	.LASF104:
 3927 0525 66726163 		.ascii	"fractionaldivider\000"
 3927      74696F6E 
 3927      616C6469 
 3927      76696465 
 3927      7200
 3928              	.LASF25:
 3929 0537 46756E63 		.ascii	"FunctionalState\000"
 3929      74696F6E 
 3929      616C5374 
 3929      61746500 
 3930              	.LASF71:
 3931 0547 55534152 		.ascii	"USART_SmartCardNACKCmd\000"
 3931      545F536D 
 3931      61727443 
 3931      6172644E 
 3931      41434B43 
 3932              	.LASF8:
 3933 055e 5F5F7569 		.ascii	"__uint32_t\000"
 3933      6E743332 
 3933      5F7400
 3934              	.LASF49:
 3935 0569 50434C4B 		.ascii	"PCLK1_Frequency\000"
 3935      315F4672 
 3935      65717565 
 3935      6E637900 
 3936              	.LASF63:
 3937 0579 55534152 		.ascii	"USART_GetFlagStatus\000"
 3937      545F4765 
 3937      74466C61 
 3937      67537461 
 3937      74757300 
 3938              	.LASF6:
 3939 058d 5F5F696E 		.ascii	"__int32_t\000"
 3939      7433325F 
 3939      7400
 3940              	.LASF54:
 3941 0597 55534152 		.ascii	"USART_IT\000"
 3941      545F4954 
 3941      00
 3942              	.LASF100:
 3943 05a0 55534152 		.ascii	"USART_InitStruct\000"
 3943      545F496E 
 3943      69745374 
 3943      72756374 
 3943      00
 3944              	.LASF105:
 3945 05b1 5243435F 		.ascii	"RCC_ClocksStatus\000"
 3945      436C6F63 
 3945      6B735374 
 3945      61747573 
 3945      00
 3946              	.LASF97:
 3947 05c2 55534152 		.ascii	"USART_ClockInit\000"
ARM GAS  /tmp/cc27momk.s 			page 94


 3947      545F436C 
 3947      6F636B49 
 3947      6E697400 
 3948              	.LASF85:
 3949 05d2 55534152 		.ascii	"USART_WakeUpConfig\000"
 3949      545F5761 
 3949      6B655570 
 3949      436F6E66 
 3949      696700
 3950              	.LASF70:
 3951 05e5 55534152 		.ascii	"USART_HalfDuplexCmd\000"
 3951      545F4861 
 3951      6C664475 
 3951      706C6578 
 3951      436D6400 
 3952              	.LASF99:
 3953 05f9 55534152 		.ascii	"USART_StructInit\000"
 3953      545F5374 
 3953      72756374 
 3953      496E6974 
 3953      00
 3954              	.LASF74:
 3955 060a 55534152 		.ascii	"USART_Prescaler\000"
 3955      545F5072 
 3955      65736361 
 3955      6C657200 
 3956              	.LASF43:
 3957 061a 55534152 		.ascii	"USART_CPOL\000"
 3957      545F4350 
 3957      4F4C00
 3958              	.LASF56:
 3959 0625 69746D61 		.ascii	"itmask\000"
 3959      736B00
 3960              	.LASF18:
 3961 062c 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3961      52784275 
 3961      66666572 
 3961      00
 3962              	.LASF58:
 3963 0639 62697473 		.ascii	"bitstatus\000"
 3963      74617475 
 3963      7300
 3964              	.LASF78:
 3965 0643 55534152 		.ascii	"USART_ReceiveData\000"
 3965      545F5265 
 3965      63656976 
 3965      65446174 
 3965      6100
 3966              	.LASF57:
 3967 0655 75736172 		.ascii	"usartreg\000"
 3967      74726567 
 3967      00
 3968              	.LASF24:
 3969 065e 454E4142 		.ascii	"ENABLE\000"
 3969      4C4500
 3970              		.ident	"GCC: (Arch Repository) 6.1.1 20160526"
ARM GAS  /tmp/cc27momk.s 			page 95


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_usart.c
     /tmp/cc27momk.s:15     .text:0000000000000000 $t
     /tmp/cc27momk.s:22     .text:0000000000000000 USART_DeInit
     /tmp/cc27momk.s:127    .text:00000000000000a4 $d
     /tmp/cc27momk.s:135    .text:00000000000000b8 $t
     /tmp/cc27momk.s:142    .text:00000000000000b8 USART_Init
     /tmp/cc27momk.s:366    .text:0000000000000224 $d
     /tmp/cc27momk.s:371    .text:000000000000022c $t
     /tmp/cc27momk.s:378    .text:000000000000022c USART_StructInit
     /tmp/cc27momk.s:438    .text:0000000000000264 USART_ClockInit
     /tmp/cc27momk.s:514    .text:00000000000002ba USART_ClockStructInit
     /tmp/cc27momk.s:566    .text:00000000000002e4 USART_Cmd
     /tmp/cc27momk.s:628    .text:0000000000000322 USART_ITConfig
     /tmp/cc27momk.s:744    .text:00000000000003b0 USART_DMACmd
     /tmp/cc27momk.s:812    .text:00000000000003f6 USART_SetAddress
     /tmp/cc27momk.s:868    .text:000000000000042e USART_WakeUpConfig
     /tmp/cc27momk.s:923    .text:0000000000000464 USART_ReceiverWakeUpCmd
     /tmp/cc27momk.s:985    .text:00000000000004a2 USART_LINBreakDetectLengthConfig
     /tmp/cc27momk.s:1040   .text:00000000000004d8 USART_LINCmd
     /tmp/cc27momk.s:1102   .text:0000000000000516 USART_SendData
     /tmp/cc27momk.s:1146   .text:0000000000000538 USART_ReceiveData
     /tmp/cc27momk.s:1188   .text:0000000000000556 USART_SendBreak
     /tmp/cc27momk.s:1232   .text:0000000000000578 USART_SetGuardTime
     /tmp/cc27momk.s:1290   .text:00000000000005b2 USART_SetPrescaler
     /tmp/cc27momk.s:1346   .text:00000000000005ea USART_SmartCardCmd
     /tmp/cc27momk.s:1408   .text:0000000000000628 USART_SmartCardNACKCmd
     /tmp/cc27momk.s:1470   .text:0000000000000666 USART_HalfDuplexCmd
     /tmp/cc27momk.s:1532   .text:00000000000006a4 USART_OverSampling8Cmd
     /tmp/cc27momk.s:1595   .text:00000000000006e6 USART_OneBitMethodCmd
     /tmp/cc27momk.s:1657   .text:0000000000000724 USART_IrDAConfig
     /tmp/cc27momk.s:1712   .text:000000000000075a USART_IrDACmd
     /tmp/cc27momk.s:1774   .text:0000000000000798 USART_GetFlagStatus
     /tmp/cc27momk.s:1835   .text:00000000000007ce USART_ClearFlag
     /tmp/cc27momk.s:1879   .text:00000000000007ee USART_GetITStatus
     /tmp/cc27momk.s:2016   .text:00000000000008a2 USART_ClearITPendingBit
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
