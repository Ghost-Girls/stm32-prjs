ARM GAS  /tmp/ccohH8g1.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_flash.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	FLASH_SetLatency
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  21              		.type	FLASH_SetLatency, %function
  22              	FLASH_SetLatency:
  23              	.LFB63:
  24              		.file 1 "common/stm32f10x_flash.c"
   1:common/stm32f10x_flash.c **** /**
   2:common/stm32f10x_flash.c ****   ******************************************************************************
   3:common/stm32f10x_flash.c ****   * @file    stm32f10x_flash.c
   4:common/stm32f10x_flash.c ****   * @author  MCD Application Team
   5:common/stm32f10x_flash.c ****   * @version V3.5.0
   6:common/stm32f10x_flash.c ****   * @date    11-March-2011
   7:common/stm32f10x_flash.c ****   * @brief   This file provides all the FLASH firmware functions.
   8:common/stm32f10x_flash.c ****   ******************************************************************************
   9:common/stm32f10x_flash.c ****   * @attention
  10:common/stm32f10x_flash.c ****   *
  11:common/stm32f10x_flash.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:common/stm32f10x_flash.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:common/stm32f10x_flash.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:common/stm32f10x_flash.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:common/stm32f10x_flash.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:common/stm32f10x_flash.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:common/stm32f10x_flash.c ****   *
  18:common/stm32f10x_flash.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:common/stm32f10x_flash.c ****   ******************************************************************************
  20:common/stm32f10x_flash.c ****   */
  21:common/stm32f10x_flash.c **** 
  22:common/stm32f10x_flash.c **** /* Includes ------------------------------------------------------------------*/
  23:common/stm32f10x_flash.c **** #include "../include/STM32/flash.h"
  24:common/stm32f10x_flash.c **** #include "../src/conf.h"
  25:common/stm32f10x_flash.c **** 
  26:common/stm32f10x_flash.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:common/stm32f10x_flash.c ****   * @{
  28:common/stm32f10x_flash.c ****   */
  29:common/stm32f10x_flash.c **** 
  30:common/stm32f10x_flash.c **** /** @defgroup FLASH 
  31:common/stm32f10x_flash.c ****   * @brief FLASH driver modules
  32:common/stm32f10x_flash.c ****   * @{
  33:common/stm32f10x_flash.c ****   */ 
ARM GAS  /tmp/ccohH8g1.s 			page 2


  34:common/stm32f10x_flash.c **** 
  35:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_TypesDefinitions
  36:common/stm32f10x_flash.c ****   * @{
  37:common/stm32f10x_flash.c ****   */
  38:common/stm32f10x_flash.c **** 
  39:common/stm32f10x_flash.c **** /**
  40:common/stm32f10x_flash.c ****   * @}
  41:common/stm32f10x_flash.c ****   */ 
  42:common/stm32f10x_flash.c **** 
  43:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_Defines
  44:common/stm32f10x_flash.c ****   * @{
  45:common/stm32f10x_flash.c ****   */ 
  46:common/stm32f10x_flash.c **** 
  47:common/stm32f10x_flash.c **** /* Flash Access Control Register bits */
  48:common/stm32f10x_flash.c **** #define ACR_LATENCY_Mask         ((uint32_t)0x00000038)
  49:common/stm32f10x_flash.c **** #define ACR_HLFCYA_Mask          ((uint32_t)0xFFFFFFF7)
  50:common/stm32f10x_flash.c **** #define ACR_PRFTBE_Mask          ((uint32_t)0xFFFFFFEF)
  51:common/stm32f10x_flash.c **** 
  52:common/stm32f10x_flash.c **** /* Flash Access Control Register bits */
  53:common/stm32f10x_flash.c **** #define ACR_PRFTBS_Mask          ((uint32_t)0x00000020) 
  54:common/stm32f10x_flash.c **** 
  55:common/stm32f10x_flash.c **** /* Flash Control Register bits */
  56:common/stm32f10x_flash.c **** #define CR_PG_Set                ((uint32_t)0x00000001)
  57:common/stm32f10x_flash.c **** #define CR_PG_Reset              ((uint32_t)0x00001FFE) 
  58:common/stm32f10x_flash.c **** #define CR_PER_Set               ((uint32_t)0x00000002)
  59:common/stm32f10x_flash.c **** #define CR_PER_Reset             ((uint32_t)0x00001FFD)
  60:common/stm32f10x_flash.c **** #define CR_MER_Set               ((uint32_t)0x00000004)
  61:common/stm32f10x_flash.c **** #define CR_MER_Reset             ((uint32_t)0x00001FFB)
  62:common/stm32f10x_flash.c **** #define CR_OPTPG_Set             ((uint32_t)0x00000010)
  63:common/stm32f10x_flash.c **** #define CR_OPTPG_Reset           ((uint32_t)0x00001FEF)
  64:common/stm32f10x_flash.c **** #define CR_OPTER_Set             ((uint32_t)0x00000020)
  65:common/stm32f10x_flash.c **** #define CR_OPTER_Reset           ((uint32_t)0x00001FDF)
  66:common/stm32f10x_flash.c **** #define CR_STRT_Set              ((uint32_t)0x00000040)
  67:common/stm32f10x_flash.c **** #define CR_LOCK_Set              ((uint32_t)0x00000080)
  68:common/stm32f10x_flash.c **** 
  69:common/stm32f10x_flash.c **** /* FLASH Mask */
  70:common/stm32f10x_flash.c **** #define RDPRT_Mask               ((uint32_t)0x00000002)
  71:common/stm32f10x_flash.c **** #define WRP0_Mask                ((uint32_t)0x000000FF)
  72:common/stm32f10x_flash.c **** #define WRP1_Mask                ((uint32_t)0x0000FF00)
  73:common/stm32f10x_flash.c **** #define WRP2_Mask                ((uint32_t)0x00FF0000)
  74:common/stm32f10x_flash.c **** #define WRP3_Mask                ((uint32_t)0xFF000000)
  75:common/stm32f10x_flash.c **** #define OB_USER_BFB2             ((uint16_t)0x0008)
  76:common/stm32f10x_flash.c **** 
  77:common/stm32f10x_flash.c **** /* FLASH Keys */
  78:common/stm32f10x_flash.c **** #define RDP_Key                  ((uint16_t)0x00A5)
  79:common/stm32f10x_flash.c **** #define FLASH_KEY1               ((uint32_t)0x45670123)
  80:common/stm32f10x_flash.c **** #define FLASH_KEY2               ((uint32_t)0xCDEF89AB)
  81:common/stm32f10x_flash.c **** 
  82:common/stm32f10x_flash.c **** /* FLASH BANK address */
  83:common/stm32f10x_flash.c **** #define FLASH_BANK1_END_ADDRESS   ((uint32_t)0x807FFFF)
  84:common/stm32f10x_flash.c **** 
  85:common/stm32f10x_flash.c **** /* Delay definition */   
  86:common/stm32f10x_flash.c **** #define EraseTimeout          ((uint32_t)0x000B0000)
  87:common/stm32f10x_flash.c **** #define ProgramTimeout        ((uint32_t)0x00002000)
  88:common/stm32f10x_flash.c **** /**
  89:common/stm32f10x_flash.c ****   * @}
  90:common/stm32f10x_flash.c ****   */ 
ARM GAS  /tmp/ccohH8g1.s 			page 3


  91:common/stm32f10x_flash.c **** 
  92:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_Macros
  93:common/stm32f10x_flash.c ****   * @{
  94:common/stm32f10x_flash.c ****   */
  95:common/stm32f10x_flash.c **** 
  96:common/stm32f10x_flash.c **** /**
  97:common/stm32f10x_flash.c ****   * @}
  98:common/stm32f10x_flash.c ****   */ 
  99:common/stm32f10x_flash.c **** 
 100:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_Variables
 101:common/stm32f10x_flash.c ****   * @{
 102:common/stm32f10x_flash.c ****   */
 103:common/stm32f10x_flash.c **** 
 104:common/stm32f10x_flash.c **** /**
 105:common/stm32f10x_flash.c ****   * @}
 106:common/stm32f10x_flash.c ****   */ 
 107:common/stm32f10x_flash.c **** 
 108:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_FunctionPrototypes
 109:common/stm32f10x_flash.c ****   * @{
 110:common/stm32f10x_flash.c ****   */
 111:common/stm32f10x_flash.c ****   
 112:common/stm32f10x_flash.c **** /**
 113:common/stm32f10x_flash.c ****   * @}
 114:common/stm32f10x_flash.c ****   */
 115:common/stm32f10x_flash.c **** 
 116:common/stm32f10x_flash.c **** /** @defgroup FLASH_Private_Functions
 117:common/stm32f10x_flash.c ****   * @{
 118:common/stm32f10x_flash.c ****   */
 119:common/stm32f10x_flash.c **** 
 120:common/stm32f10x_flash.c **** /**
 121:common/stm32f10x_flash.c **** @code  
 122:common/stm32f10x_flash.c ****  
 123:common/stm32f10x_flash.c ****  This driver provides functions to configure and program the Flash memory of all STM32F10x devices,
 124:common/stm32f10x_flash.c ****  including the latest STM32F10x_XL density devices. 
 125:common/stm32f10x_flash.c **** 
 126:common/stm32f10x_flash.c ****  STM32F10x_XL devices feature up to 1 Mbyte with dual bank architecture for read-while-write (RWW) 
 127:common/stm32f10x_flash.c ****     - bank1: fixed size of 512 Kbytes (256 pages of 2Kbytes each)
 128:common/stm32f10x_flash.c ****     - bank2: up to 512 Kbytes (up to 256 pages of 2Kbytes each)
 129:common/stm32f10x_flash.c ****  While other STM32F10x devices features only one bank with memory up to 512 Kbytes.
 130:common/stm32f10x_flash.c **** 
 131:common/stm32f10x_flash.c ****  In version V3.3.0, some functions were updated and new ones were added to support
 132:common/stm32f10x_flash.c ****  STM32F10x_XL devices. Thus some functions manages all devices, while other are 
 133:common/stm32f10x_flash.c ****  dedicated for XL devices only.
 134:common/stm32f10x_flash.c ****  
 135:common/stm32f10x_flash.c ****  The table below presents the list of available functions depending on the used STM32F10x devices. 
 136:common/stm32f10x_flash.c ****       
 137:common/stm32f10x_flash.c ****    ***************************************************
 138:common/stm32f10x_flash.c ****    * Legacy functions used for all STM32F10x devices *
 139:common/stm32f10x_flash.c ****    ***************************************************
 140:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 141:common/stm32f10x_flash.c ****    |       Functions prototypes         |STM32F10x_XL|Other STM32F10x|    Comments                 
 142:common/stm32f10x_flash.c ****    |                                    |   devices  |  devices      |                             
 143:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 144:common/stm32f10x_flash.c ****    |FLASH_SetLatency                    |    Yes     |      Yes      | No change                   
 145:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 146:common/stm32f10x_flash.c ****    |FLASH_HalfCycleAccessCmd            |    Yes     |      Yes      | No change                   
 147:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
ARM GAS  /tmp/ccohH8g1.s 			page 4


 148:common/stm32f10x_flash.c ****    |FLASH_PrefetchBufferCmd             |    Yes     |      Yes      | No change                   
 149:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 150:common/stm32f10x_flash.c ****    |FLASH_Unlock                        |    Yes     |      Yes      | - For STM32F10X_XL devices: 
 151:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: unlock 
 152:common/stm32f10x_flash.c ****    |                                    |            |               |   to FLASH_UnlockBank1 funct
 153:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 154:common/stm32f10x_flash.c ****    |FLASH_Lock                          |    Yes     |      Yes      | - For STM32F10X_XL devices: 
 155:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: lock Ba
 156:common/stm32f10x_flash.c ****    |                                    |            |               |   to FLASH_LockBank1 functio
 157:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 158:common/stm32f10x_flash.c ****    |FLASH_ErasePage                     |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 159:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: erase a
 160:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 161:common/stm32f10x_flash.c ****    |FLASH_EraseAllPages                 |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 162:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: erase a
 163:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 164:common/stm32f10x_flash.c ****    |FLASH_EraseOptionBytes              |    Yes     |      Yes      | No change                   
 165:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 166:common/stm32f10x_flash.c ****    |FLASH_ProgramWord                   |    Yes     |      Yes      | Updated to program up to 1MB
 167:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 168:common/stm32f10x_flash.c ****    |FLASH_ProgramHalfWord               |    Yes     |      Yes      | Updated to program up to 1MB
 169:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 170:common/stm32f10x_flash.c ****    |FLASH_ProgramOptionByteData         |    Yes     |      Yes      | No change                   
 171:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 172:common/stm32f10x_flash.c ****    |FLASH_EnableWriteProtection         |    Yes     |      Yes      | No change                   
 173:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 174:common/stm32f10x_flash.c ****    |FLASH_ReadOutProtection             |    Yes     |      Yes      | No change                   
 175:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 176:common/stm32f10x_flash.c ****    |FLASH_UserOptionByteConfig          |    Yes     |      Yes      | No change                   
 177:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 178:common/stm32f10x_flash.c ****    |FLASH_GetUserOptionByte             |    Yes     |      Yes      | No change                   
 179:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 180:common/stm32f10x_flash.c ****    |FLASH_GetWriteProtectionOptionByte  |    Yes     |      Yes      | No change                   
 181:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 182:common/stm32f10x_flash.c ****    |FLASH_GetReadOutProtectionStatus    |    Yes     |      Yes      | No change                   
 183:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 184:common/stm32f10x_flash.c ****    |FLASH_GetPrefetchBufferStatus       |    Yes     |      Yes      | No change                   
 185:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 186:common/stm32f10x_flash.c ****    |FLASH_ITConfig                      |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 187:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: enable 
 188:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 189:common/stm32f10x_flash.c ****    |FLASH_GetFlagStatus                 |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 190:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: return 
 191:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 192:common/stm32f10x_flash.c ****    |FLASH_ClearFlag                     |    Yes     |      Yes      | - For STM32F10x_XL devices: 
 193:common/stm32f10x_flash.c ****    |                                    |            |               | - For other devices: clear B
 194:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 195:common/stm32f10x_flash.c ****    |FLASH_GetStatus                     |    Yes     |      Yes      | - Return the status of Bank1
 196:common/stm32f10x_flash.c ****    |                                    |            |               |   equivalent to FLASH_GetBan
 197:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 198:common/stm32f10x_flash.c ****    |FLASH_WaitForLastOperation          |    Yes     |      Yes      | - Wait for Bank1 last operat
 199:common/stm32f10x_flash.c ****    |                                    |            |               |   equivalent to: FLASH_WaitF
 200:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 201:common/stm32f10x_flash.c **** 
 202:common/stm32f10x_flash.c ****    ************************************************************************************************
 203:common/stm32f10x_flash.c ****    * New functions used for all STM32F10x devices to manage Bank1:                                 
 204:common/stm32f10x_flash.c ****    *   - These functions are mainly useful for STM32F10x_XL density devices, to have separate contr
ARM GAS  /tmp/ccohH8g1.s 			page 5


 205:common/stm32f10x_flash.c ****    *   - For other devices, these functions are optional (covered by functions listed above)       
 206:common/stm32f10x_flash.c ****    ************************************************************************************************
 207:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 208:common/stm32f10x_flash.c ****    |       Functions prototypes         |STM32F10x_XL|Other STM32F10x|    Comments                 
 209:common/stm32f10x_flash.c ****    |                                    |   devices  |  devices      |                             
 210:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 211:common/stm32f10x_flash.c ****    | FLASH_UnlockBank1                  |    Yes     |      Yes      | - Unlock Bank1              
 212:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 213:common/stm32f10x_flash.c ****    |FLASH_LockBank1                     |    Yes     |      Yes      | - Lock Bank1                
 214:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 215:common/stm32f10x_flash.c ****    | FLASH_EraseAllBank1Pages           |    Yes     |      Yes      | - Erase all pages in Bank1  
 216:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 217:common/stm32f10x_flash.c ****    | FLASH_GetBank1Status               |    Yes     |      Yes      | - Return the status of Bank1
 218:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 219:common/stm32f10x_flash.c ****    | FLASH_WaitForLastBank1Operation    |    Yes     |      Yes      | - Wait for Bank1 last operat
 220:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 221:common/stm32f10x_flash.c **** 
 222:common/stm32f10x_flash.c ****    *****************************************************************************
 223:common/stm32f10x_flash.c ****    * New Functions used only with STM32F10x_XL density devices to manage Bank2 *
 224:common/stm32f10x_flash.c ****    *****************************************************************************
 225:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 226:common/stm32f10x_flash.c ****    |       Functions prototypes         |STM32F10x_XL|Other STM32F10x|    Comments                 
 227:common/stm32f10x_flash.c ****    |                                    |   devices  |  devices      |                             
 228:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 229:common/stm32f10x_flash.c ****    | FLASH_UnlockBank2                  |    Yes     |      No       | - Unlock Bank2              
 230:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 231:common/stm32f10x_flash.c ****    |FLASH_LockBank2                     |    Yes     |      No       | - Lock Bank2                
 232:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 233:common/stm32f10x_flash.c ****    | FLASH_EraseAllBank2Pages           |    Yes     |      No       | - Erase all pages in Bank2  
 234:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 235:common/stm32f10x_flash.c ****    | FLASH_GetBank2Status               |    Yes     |      No       | - Return the status of Bank2
 236:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 237:common/stm32f10x_flash.c ****    | FLASH_WaitForLastBank2Operation    |    Yes     |      No       | - Wait for Bank2 last operat
 238:common/stm32f10x_flash.c ****    |-----------------------------------------------------------------------------------------------
 239:common/stm32f10x_flash.c ****    | FLASH_BootConfig                   |    Yes     |      No       | - Configure to boot from Ban
 240:common/stm32f10x_flash.c ****    +-----------------------------------------------------------------------------------------------
 241:common/stm32f10x_flash.c **** @endcode
 242:common/stm32f10x_flash.c **** */
 243:common/stm32f10x_flash.c **** 
 244:common/stm32f10x_flash.c **** 
 245:common/stm32f10x_flash.c **** /**
 246:common/stm32f10x_flash.c ****   * @brief  Sets the code latency value.
 247:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 248:common/stm32f10x_flash.c ****   * @param  FLASH_Latency: specifies the FLASH Latency value.
 249:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
 250:common/stm32f10x_flash.c ****   *     @arg FLASH_Latency_0: FLASH Zero Latency cycle
 251:common/stm32f10x_flash.c ****   *     @arg FLASH_Latency_1: FLASH One Latency cycle
 252:common/stm32f10x_flash.c ****   *     @arg FLASH_Latency_2: FLASH Two Latency cycles
 253:common/stm32f10x_flash.c ****   * @retval None
 254:common/stm32f10x_flash.c ****   */
 255:common/stm32f10x_flash.c **** void FLASH_SetLatency(uint32_t FLASH_Latency)
 256:common/stm32f10x_flash.c **** {
  25              		.loc 1 256 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 16
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29              		@ link register save eliminated.
ARM GAS  /tmp/ccohH8g1.s 			page 6


  30 0000 80B4     		push	{r7}
  31              		.cfi_def_cfa_offset 4
  32              		.cfi_offset 7, -4
  33 0002 85B0     		sub	sp, sp, #20
  34              		.cfi_def_cfa_offset 24
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 7860     		str	r0, [r7, #4]
 257:common/stm32f10x_flash.c ****   uint32_t tmpreg = 0;
  38              		.loc 1 257 0
  39 0008 0023     		movs	r3, #0
  40 000a FB60     		str	r3, [r7, #12]
 258:common/stm32f10x_flash.c ****   
 259:common/stm32f10x_flash.c ****   /* Check the parameters */
 260:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_LATENCY(FLASH_Latency));
 261:common/stm32f10x_flash.c ****   
 262:common/stm32f10x_flash.c ****   /* Read the ACR register */
 263:common/stm32f10x_flash.c ****   tmpreg = FLASH->ACR;  
  41              		.loc 1 263 0
  42 000c 094B     		ldr	r3, .L2
  43 000e 1B68     		ldr	r3, [r3]
  44 0010 FB60     		str	r3, [r7, #12]
 264:common/stm32f10x_flash.c ****   
 265:common/stm32f10x_flash.c ****   /* Sets the Latency value */
 266:common/stm32f10x_flash.c ****   tmpreg &= ACR_LATENCY_Mask;
  45              		.loc 1 266 0
  46 0012 FB68     		ldr	r3, [r7, #12]
  47 0014 03F03803 		and	r3, r3, #56
  48 0018 FB60     		str	r3, [r7, #12]
 267:common/stm32f10x_flash.c ****   tmpreg |= FLASH_Latency;
  49              		.loc 1 267 0
  50 001a FA68     		ldr	r2, [r7, #12]
  51 001c 7B68     		ldr	r3, [r7, #4]
  52 001e 1343     		orrs	r3, r3, r2
  53 0020 FB60     		str	r3, [r7, #12]
 268:common/stm32f10x_flash.c ****   
 269:common/stm32f10x_flash.c ****   /* Write the ACR register */
 270:common/stm32f10x_flash.c ****   FLASH->ACR = tmpreg;
  54              		.loc 1 270 0
  55 0022 044A     		ldr	r2, .L2
  56 0024 FB68     		ldr	r3, [r7, #12]
  57 0026 1360     		str	r3, [r2]
 271:common/stm32f10x_flash.c **** }
  58              		.loc 1 271 0
  59 0028 00BF     		nop
  60 002a 1437     		adds	r7, r7, #20
  61              		.cfi_def_cfa_offset 4
  62 002c BD46     		mov	sp, r7
  63              		.cfi_def_cfa_register 13
  64              		@ sp needed
  65 002e 80BC     		pop	{r7}
  66              		.cfi_restore 7
  67              		.cfi_def_cfa_offset 0
  68 0030 7047     		bx	lr
  69              	.L3:
  70 0032 00BF     		.align	2
  71              	.L2:
ARM GAS  /tmp/ccohH8g1.s 			page 7


  72 0034 00200240 		.word	1073881088
  73              		.cfi_endproc
  74              	.LFE63:
  75              		.size	FLASH_SetLatency, .-FLASH_SetLatency
  76              		.align	1
  77              		.global	FLASH_HalfCycleAccessCmd
  78              		.syntax unified
  79              		.thumb
  80              		.thumb_func
  81              		.fpu softvfp
  82              		.type	FLASH_HalfCycleAccessCmd, %function
  83              	FLASH_HalfCycleAccessCmd:
  84              	.LFB64:
 272:common/stm32f10x_flash.c **** 
 273:common/stm32f10x_flash.c **** /**
 274:common/stm32f10x_flash.c ****   * @brief  Enables or disables the Half cycle flash access.
 275:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 276:common/stm32f10x_flash.c ****   * @param  FLASH_HalfCycleAccess: specifies the FLASH Half cycle Access mode.
 277:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
 278:common/stm32f10x_flash.c ****   *     @arg FLASH_HalfCycleAccess_Enable: FLASH Half Cycle Enable
 279:common/stm32f10x_flash.c ****   *     @arg FLASH_HalfCycleAccess_Disable: FLASH Half Cycle Disable
 280:common/stm32f10x_flash.c ****   * @retval None
 281:common/stm32f10x_flash.c ****   */
 282:common/stm32f10x_flash.c **** void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
 283:common/stm32f10x_flash.c **** {
  85              		.loc 1 283 0
  86              		.cfi_startproc
  87              		@ args = 0, pretend = 0, frame = 8
  88              		@ frame_needed = 1, uses_anonymous_args = 0
  89              		@ link register save eliminated.
  90 0038 80B4     		push	{r7}
  91              		.cfi_def_cfa_offset 4
  92              		.cfi_offset 7, -4
  93 003a 83B0     		sub	sp, sp, #12
  94              		.cfi_def_cfa_offset 16
  95 003c 00AF     		add	r7, sp, #0
  96              		.cfi_def_cfa_register 7
  97 003e 7860     		str	r0, [r7, #4]
 284:common/stm32f10x_flash.c ****   /* Check the parameters */
 285:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
 286:common/stm32f10x_flash.c ****   
 287:common/stm32f10x_flash.c ****   /* Enable or disable the Half cycle access */
 288:common/stm32f10x_flash.c ****   FLASH->ACR &= ACR_HLFCYA_Mask;
  98              		.loc 1 288 0
  99 0040 084A     		ldr	r2, .L5
 100 0042 084B     		ldr	r3, .L5
 101 0044 1B68     		ldr	r3, [r3]
 102 0046 23F00803 		bic	r3, r3, #8
 103 004a 1360     		str	r3, [r2]
 289:common/stm32f10x_flash.c ****   FLASH->ACR |= FLASH_HalfCycleAccess;
 104              		.loc 1 289 0
 105 004c 0549     		ldr	r1, .L5
 106 004e 054B     		ldr	r3, .L5
 107 0050 1A68     		ldr	r2, [r3]
 108 0052 7B68     		ldr	r3, [r7, #4]
 109 0054 1343     		orrs	r3, r3, r2
 110 0056 0B60     		str	r3, [r1]
ARM GAS  /tmp/ccohH8g1.s 			page 8


 290:common/stm32f10x_flash.c **** }
 111              		.loc 1 290 0
 112 0058 00BF     		nop
 113 005a 0C37     		adds	r7, r7, #12
 114              		.cfi_def_cfa_offset 4
 115 005c BD46     		mov	sp, r7
 116              		.cfi_def_cfa_register 13
 117              		@ sp needed
 118 005e 80BC     		pop	{r7}
 119              		.cfi_restore 7
 120              		.cfi_def_cfa_offset 0
 121 0060 7047     		bx	lr
 122              	.L6:
 123 0062 00BF     		.align	2
 124              	.L5:
 125 0064 00200240 		.word	1073881088
 126              		.cfi_endproc
 127              	.LFE64:
 128              		.size	FLASH_HalfCycleAccessCmd, .-FLASH_HalfCycleAccessCmd
 129              		.align	1
 130              		.global	FLASH_PrefetchBufferCmd
 131              		.syntax unified
 132              		.thumb
 133              		.thumb_func
 134              		.fpu softvfp
 135              		.type	FLASH_PrefetchBufferCmd, %function
 136              	FLASH_PrefetchBufferCmd:
 137              	.LFB65:
 291:common/stm32f10x_flash.c **** 
 292:common/stm32f10x_flash.c **** /**
 293:common/stm32f10x_flash.c ****   * @brief  Enables or disables the Prefetch Buffer.
 294:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 295:common/stm32f10x_flash.c ****   * @param  FLASH_PrefetchBuffer: specifies the Prefetch buffer status.
 296:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
 297:common/stm32f10x_flash.c ****   *     @arg FLASH_PrefetchBuffer_Enable: FLASH Prefetch Buffer Enable
 298:common/stm32f10x_flash.c ****   *     @arg FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
 299:common/stm32f10x_flash.c ****   * @retval None
 300:common/stm32f10x_flash.c ****   */
 301:common/stm32f10x_flash.c **** void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
 302:common/stm32f10x_flash.c **** {
 138              		.loc 1 302 0
 139              		.cfi_startproc
 140              		@ args = 0, pretend = 0, frame = 8
 141              		@ frame_needed = 1, uses_anonymous_args = 0
 142              		@ link register save eliminated.
 143 0068 80B4     		push	{r7}
 144              		.cfi_def_cfa_offset 4
 145              		.cfi_offset 7, -4
 146 006a 83B0     		sub	sp, sp, #12
 147              		.cfi_def_cfa_offset 16
 148 006c 00AF     		add	r7, sp, #0
 149              		.cfi_def_cfa_register 7
 150 006e 7860     		str	r0, [r7, #4]
 303:common/stm32f10x_flash.c ****   /* Check the parameters */
 304:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
 305:common/stm32f10x_flash.c ****   
 306:common/stm32f10x_flash.c ****   /* Enable or disable the Prefetch Buffer */
ARM GAS  /tmp/ccohH8g1.s 			page 9


 307:common/stm32f10x_flash.c ****   FLASH->ACR &= ACR_PRFTBE_Mask;
 151              		.loc 1 307 0
 152 0070 084A     		ldr	r2, .L8
 153 0072 084B     		ldr	r3, .L8
 154 0074 1B68     		ldr	r3, [r3]
 155 0076 23F01003 		bic	r3, r3, #16
 156 007a 1360     		str	r3, [r2]
 308:common/stm32f10x_flash.c ****   FLASH->ACR |= FLASH_PrefetchBuffer;
 157              		.loc 1 308 0
 158 007c 0549     		ldr	r1, .L8
 159 007e 054B     		ldr	r3, .L8
 160 0080 1A68     		ldr	r2, [r3]
 161 0082 7B68     		ldr	r3, [r7, #4]
 162 0084 1343     		orrs	r3, r3, r2
 163 0086 0B60     		str	r3, [r1]
 309:common/stm32f10x_flash.c **** }
 164              		.loc 1 309 0
 165 0088 00BF     		nop
 166 008a 0C37     		adds	r7, r7, #12
 167              		.cfi_def_cfa_offset 4
 168 008c BD46     		mov	sp, r7
 169              		.cfi_def_cfa_register 13
 170              		@ sp needed
 171 008e 80BC     		pop	{r7}
 172              		.cfi_restore 7
 173              		.cfi_def_cfa_offset 0
 174 0090 7047     		bx	lr
 175              	.L9:
 176 0092 00BF     		.align	2
 177              	.L8:
 178 0094 00200240 		.word	1073881088
 179              		.cfi_endproc
 180              	.LFE65:
 181              		.size	FLASH_PrefetchBufferCmd, .-FLASH_PrefetchBufferCmd
 182              		.align	1
 183              		.global	FLASH_Unlock
 184              		.syntax unified
 185              		.thumb
 186              		.thumb_func
 187              		.fpu softvfp
 188              		.type	FLASH_Unlock, %function
 189              	FLASH_Unlock:
 190              	.LFB66:
 310:common/stm32f10x_flash.c **** 
 311:common/stm32f10x_flash.c **** /**
 312:common/stm32f10x_flash.c ****   * @brief  Unlocks the FLASH Program Erase Controller.
 313:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 314:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function unlocks Bank1 and Bank2.
 315:common/stm32f10x_flash.c ****   *         - For all other devices it unlocks Bank1 and it is equivalent 
 316:common/stm32f10x_flash.c ****   *           to FLASH_UnlockBank1 function.. 
 317:common/stm32f10x_flash.c ****   * @param  None
 318:common/stm32f10x_flash.c ****   * @retval None
 319:common/stm32f10x_flash.c ****   */
 320:common/stm32f10x_flash.c **** void FLASH_Unlock(void)
 321:common/stm32f10x_flash.c **** {
 191              		.loc 1 321 0
 192              		.cfi_startproc
ARM GAS  /tmp/ccohH8g1.s 			page 10


 193              		@ args = 0, pretend = 0, frame = 0
 194              		@ frame_needed = 1, uses_anonymous_args = 0
 195              		@ link register save eliminated.
 196 0098 80B4     		push	{r7}
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 7, -4
 199 009a 00AF     		add	r7, sp, #0
 200              		.cfi_def_cfa_register 7
 322:common/stm32f10x_flash.c ****   /* Authorize the FPEC of Bank1 Access */
 323:common/stm32f10x_flash.c ****   FLASH->KEYR = FLASH_KEY1;
 201              		.loc 1 323 0
 202 009c 044B     		ldr	r3, .L11
 203 009e 054A     		ldr	r2, .L11+4
 204 00a0 5A60     		str	r2, [r3, #4]
 324:common/stm32f10x_flash.c ****   FLASH->KEYR = FLASH_KEY2;
 205              		.loc 1 324 0
 206 00a2 034B     		ldr	r3, .L11
 207 00a4 044A     		ldr	r2, .L11+8
 208 00a6 5A60     		str	r2, [r3, #4]
 325:common/stm32f10x_flash.c **** 
 326:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 327:common/stm32f10x_flash.c ****   /* Authorize the FPEC of Bank2 Access */
 328:common/stm32f10x_flash.c ****   FLASH->KEYR2 = FLASH_KEY1;
 329:common/stm32f10x_flash.c ****   FLASH->KEYR2 = FLASH_KEY2;
 330:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 331:common/stm32f10x_flash.c **** }
 209              		.loc 1 331 0
 210 00a8 00BF     		nop
 211 00aa BD46     		mov	sp, r7
 212              		.cfi_def_cfa_register 13
 213              		@ sp needed
 214 00ac 80BC     		pop	{r7}
 215              		.cfi_restore 7
 216              		.cfi_def_cfa_offset 0
 217 00ae 7047     		bx	lr
 218              	.L12:
 219              		.align	2
 220              	.L11:
 221 00b0 00200240 		.word	1073881088
 222 00b4 23016745 		.word	1164378403
 223 00b8 AB89EFCD 		.word	-839939669
 224              		.cfi_endproc
 225              	.LFE66:
 226              		.size	FLASH_Unlock, .-FLASH_Unlock
 227              		.align	1
 228              		.global	FLASH_UnlockBank1
 229              		.syntax unified
 230              		.thumb
 231              		.thumb_func
 232              		.fpu softvfp
 233              		.type	FLASH_UnlockBank1, %function
 234              	FLASH_UnlockBank1:
 235              	.LFB67:
 332:common/stm32f10x_flash.c **** /**
 333:common/stm32f10x_flash.c ****   * @brief  Unlocks the FLASH Bank1 Program Erase Controller.
 334:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 335:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function unlocks Bank1.
ARM GAS  /tmp/ccohH8g1.s 			page 11


 336:common/stm32f10x_flash.c ****   *         - For all other devices it unlocks Bank1 and it is 
 337:common/stm32f10x_flash.c ****   *           equivalent to FLASH_Unlock function.
 338:common/stm32f10x_flash.c ****   * @param  None
 339:common/stm32f10x_flash.c ****   * @retval None
 340:common/stm32f10x_flash.c ****   */
 341:common/stm32f10x_flash.c **** void FLASH_UnlockBank1(void)
 342:common/stm32f10x_flash.c **** {
 236              		.loc 1 342 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 241 00bc 80B4     		push	{r7}
 242              		.cfi_def_cfa_offset 4
 243              		.cfi_offset 7, -4
 244 00be 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 343:common/stm32f10x_flash.c ****   /* Authorize the FPEC of Bank1 Access */
 344:common/stm32f10x_flash.c ****   FLASH->KEYR = FLASH_KEY1;
 246              		.loc 1 344 0
 247 00c0 044B     		ldr	r3, .L14
 248 00c2 054A     		ldr	r2, .L14+4
 249 00c4 5A60     		str	r2, [r3, #4]
 345:common/stm32f10x_flash.c ****   FLASH->KEYR = FLASH_KEY2;
 250              		.loc 1 345 0
 251 00c6 034B     		ldr	r3, .L14
 252 00c8 044A     		ldr	r2, .L14+8
 253 00ca 5A60     		str	r2, [r3, #4]
 346:common/stm32f10x_flash.c **** }
 254              		.loc 1 346 0
 255 00cc 00BF     		nop
 256 00ce BD46     		mov	sp, r7
 257              		.cfi_def_cfa_register 13
 258              		@ sp needed
 259 00d0 80BC     		pop	{r7}
 260              		.cfi_restore 7
 261              		.cfi_def_cfa_offset 0
 262 00d2 7047     		bx	lr
 263              	.L15:
 264              		.align	2
 265              	.L14:
 266 00d4 00200240 		.word	1073881088
 267 00d8 23016745 		.word	1164378403
 268 00dc AB89EFCD 		.word	-839939669
 269              		.cfi_endproc
 270              	.LFE67:
 271              		.size	FLASH_UnlockBank1, .-FLASH_UnlockBank1
 272              		.align	1
 273              		.global	FLASH_Lock
 274              		.syntax unified
 275              		.thumb
 276              		.thumb_func
 277              		.fpu softvfp
 278              		.type	FLASH_Lock, %function
 279              	FLASH_Lock:
 280              	.LFB68:
 347:common/stm32f10x_flash.c **** 
ARM GAS  /tmp/ccohH8g1.s 			page 12


 348:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 349:common/stm32f10x_flash.c **** /**
 350:common/stm32f10x_flash.c ****   * @brief  Unlocks the FLASH Bank2 Program Erase Controller.
 351:common/stm32f10x_flash.c ****   * @note   This function can be used only for STM32F10X_XL density devices.
 352:common/stm32f10x_flash.c ****   * @param  None
 353:common/stm32f10x_flash.c ****   * @retval None
 354:common/stm32f10x_flash.c ****   */
 355:common/stm32f10x_flash.c **** void FLASH_UnlockBank2(void)
 356:common/stm32f10x_flash.c **** {
 357:common/stm32f10x_flash.c ****   /* Authorize the FPEC of Bank2 Access */
 358:common/stm32f10x_flash.c ****   FLASH->KEYR2 = FLASH_KEY1;
 359:common/stm32f10x_flash.c ****   FLASH->KEYR2 = FLASH_KEY2;
 360:common/stm32f10x_flash.c **** 
 361:common/stm32f10x_flash.c **** }
 362:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 363:common/stm32f10x_flash.c **** 
 364:common/stm32f10x_flash.c **** /**
 365:common/stm32f10x_flash.c ****   * @brief  Locks the FLASH Program Erase Controller.
 366:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 367:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function Locks Bank1 and Bank2.
 368:common/stm32f10x_flash.c ****   *         - For all other devices it Locks Bank1 and it is equivalent 
 369:common/stm32f10x_flash.c ****   *           to FLASH_LockBank1 function.
 370:common/stm32f10x_flash.c ****   * @param  None
 371:common/stm32f10x_flash.c ****   * @retval None
 372:common/stm32f10x_flash.c ****   */
 373:common/stm32f10x_flash.c **** void FLASH_Lock(void)
 374:common/stm32f10x_flash.c **** {
 281              		.loc 1 374 0
 282              		.cfi_startproc
 283              		@ args = 0, pretend = 0, frame = 0
 284              		@ frame_needed = 1, uses_anonymous_args = 0
 285              		@ link register save eliminated.
 286 00e0 80B4     		push	{r7}
 287              		.cfi_def_cfa_offset 4
 288              		.cfi_offset 7, -4
 289 00e2 00AF     		add	r7, sp, #0
 290              		.cfi_def_cfa_register 7
 375:common/stm32f10x_flash.c ****   /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
 376:common/stm32f10x_flash.c ****   FLASH->CR |= CR_LOCK_Set;
 291              		.loc 1 376 0
 292 00e4 044A     		ldr	r2, .L17
 293 00e6 044B     		ldr	r3, .L17
 294 00e8 1B69     		ldr	r3, [r3, #16]
 295 00ea 43F08003 		orr	r3, r3, #128
 296 00ee 1361     		str	r3, [r2, #16]
 377:common/stm32f10x_flash.c **** 
 378:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 379:common/stm32f10x_flash.c ****   /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
 380:common/stm32f10x_flash.c ****   FLASH->CR2 |= CR_LOCK_Set;
 381:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 382:common/stm32f10x_flash.c **** }
 297              		.loc 1 382 0
 298 00f0 00BF     		nop
 299 00f2 BD46     		mov	sp, r7
 300              		.cfi_def_cfa_register 13
 301              		@ sp needed
 302 00f4 80BC     		pop	{r7}
ARM GAS  /tmp/ccohH8g1.s 			page 13


 303              		.cfi_restore 7
 304              		.cfi_def_cfa_offset 0
 305 00f6 7047     		bx	lr
 306              	.L18:
 307              		.align	2
 308              	.L17:
 309 00f8 00200240 		.word	1073881088
 310              		.cfi_endproc
 311              	.LFE68:
 312              		.size	FLASH_Lock, .-FLASH_Lock
 313              		.align	1
 314              		.global	FLASH_LockBank1
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu softvfp
 319              		.type	FLASH_LockBank1, %function
 320              	FLASH_LockBank1:
 321              	.LFB69:
 383:common/stm32f10x_flash.c **** 
 384:common/stm32f10x_flash.c **** /**
 385:common/stm32f10x_flash.c ****   * @brief  Locks the FLASH Bank1 Program Erase Controller.
 386:common/stm32f10x_flash.c ****   * @note   this function can be used for all STM32F10x devices.
 387:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function Locks Bank1.
 388:common/stm32f10x_flash.c ****   *         - For all other devices it Locks Bank1 and it is equivalent 
 389:common/stm32f10x_flash.c ****   *           to FLASH_Lock function.
 390:common/stm32f10x_flash.c ****   * @param  None
 391:common/stm32f10x_flash.c ****   * @retval None
 392:common/stm32f10x_flash.c ****   */
 393:common/stm32f10x_flash.c **** void FLASH_LockBank1(void)
 394:common/stm32f10x_flash.c **** {
 322              		.loc 1 394 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327 00fc 80B4     		push	{r7}
 328              		.cfi_def_cfa_offset 4
 329              		.cfi_offset 7, -4
 330 00fe 00AF     		add	r7, sp, #0
 331              		.cfi_def_cfa_register 7
 395:common/stm32f10x_flash.c ****   /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
 396:common/stm32f10x_flash.c ****   FLASH->CR |= CR_LOCK_Set;
 332              		.loc 1 396 0
 333 0100 044A     		ldr	r2, .L20
 334 0102 044B     		ldr	r3, .L20
 335 0104 1B69     		ldr	r3, [r3, #16]
 336 0106 43F08003 		orr	r3, r3, #128
 337 010a 1361     		str	r3, [r2, #16]
 397:common/stm32f10x_flash.c **** }
 338              		.loc 1 397 0
 339 010c 00BF     		nop
 340 010e BD46     		mov	sp, r7
 341              		.cfi_def_cfa_register 13
 342              		@ sp needed
 343 0110 80BC     		pop	{r7}
 344              		.cfi_restore 7
ARM GAS  /tmp/ccohH8g1.s 			page 14


 345              		.cfi_def_cfa_offset 0
 346 0112 7047     		bx	lr
 347              	.L21:
 348              		.align	2
 349              	.L20:
 350 0114 00200240 		.word	1073881088
 351              		.cfi_endproc
 352              	.LFE69:
 353              		.size	FLASH_LockBank1, .-FLASH_LockBank1
 354              		.align	1
 355              		.global	FLASH_ErasePage
 356              		.syntax unified
 357              		.thumb
 358              		.thumb_func
 359              		.fpu softvfp
 360              		.type	FLASH_ErasePage, %function
 361              	FLASH_ErasePage:
 362              	.LFB70:
 398:common/stm32f10x_flash.c **** 
 399:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 400:common/stm32f10x_flash.c **** /**
 401:common/stm32f10x_flash.c ****   * @brief  Locks the FLASH Bank2 Program Erase Controller.
 402:common/stm32f10x_flash.c ****   * @note   This function can be used only for STM32F10X_XL density devices.
 403:common/stm32f10x_flash.c ****   * @param  None
 404:common/stm32f10x_flash.c ****   * @retval None
 405:common/stm32f10x_flash.c ****   */
 406:common/stm32f10x_flash.c **** void FLASH_LockBank2(void)
 407:common/stm32f10x_flash.c **** {
 408:common/stm32f10x_flash.c ****   /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
 409:common/stm32f10x_flash.c ****   FLASH->CR2 |= CR_LOCK_Set;
 410:common/stm32f10x_flash.c **** }
 411:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 412:common/stm32f10x_flash.c **** 
 413:common/stm32f10x_flash.c **** /**
 414:common/stm32f10x_flash.c ****   * @brief  Erases a specified FLASH page.
 415:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 416:common/stm32f10x_flash.c ****   * @param  Page_Address: The page address to be erased.
 417:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 418:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 419:common/stm32f10x_flash.c ****   */
 420:common/stm32f10x_flash.c **** FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
 421:common/stm32f10x_flash.c **** {
 363              		.loc 1 421 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 16
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367 0118 80B5     		push	{r7, lr}
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 011a 84B0     		sub	sp, sp, #16
 372              		.cfi_def_cfa_offset 24
 373 011c 00AF     		add	r7, sp, #0
 374              		.cfi_def_cfa_register 7
 375 011e 7860     		str	r0, [r7, #4]
 422:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 376              		.loc 1 422 0
ARM GAS  /tmp/ccohH8g1.s 			page 15


 377 0120 0423     		movs	r3, #4
 378 0122 FB73     		strb	r3, [r7, #15]
 423:common/stm32f10x_flash.c ****   /* Check the parameters */
 424:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_ADDRESS(Page_Address));
 425:common/stm32f10x_flash.c **** 
 426:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 427:common/stm32f10x_flash.c ****   if(Page_Address < FLASH_BANK1_END_ADDRESS)  
 428:common/stm32f10x_flash.c ****   {
 429:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 430:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 431:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 432:common/stm32f10x_flash.c ****     { 
 433:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to erase the page */
 434:common/stm32f10x_flash.c ****       FLASH->CR|= CR_PER_Set;
 435:common/stm32f10x_flash.c ****       FLASH->AR = Page_Address; 
 436:common/stm32f10x_flash.c ****       FLASH->CR|= CR_STRT_Set;
 437:common/stm32f10x_flash.c ****     
 438:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 439:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 440:common/stm32f10x_flash.c **** 
 441:common/stm32f10x_flash.c ****       /* Disable the PER Bit */
 442:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PER_Reset;
 443:common/stm32f10x_flash.c ****     }
 444:common/stm32f10x_flash.c ****   }
 445:common/stm32f10x_flash.c ****   else
 446:common/stm32f10x_flash.c ****   {
 447:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 448:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 449:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 450:common/stm32f10x_flash.c ****     { 
 451:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to erase the page */
 452:common/stm32f10x_flash.c ****       FLASH->CR2|= CR_PER_Set;
 453:common/stm32f10x_flash.c ****       FLASH->AR2 = Page_Address; 
 454:common/stm32f10x_flash.c ****       FLASH->CR2|= CR_STRT_Set;
 455:common/stm32f10x_flash.c ****     
 456:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 457:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 458:common/stm32f10x_flash.c ****       
 459:common/stm32f10x_flash.c ****       /* Disable the PER Bit */
 460:common/stm32f10x_flash.c ****       FLASH->CR2 &= CR_PER_Reset;
 461:common/stm32f10x_flash.c ****     }
 462:common/stm32f10x_flash.c ****   }
 463:common/stm32f10x_flash.c **** #else
 464:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 465:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(EraseTimeout);
 379              		.loc 1 465 0
 380 0124 4FF43020 		mov	r0, #720896
 381 0128 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 382 012c 0346     		mov	r3, r0
 383 012e FB73     		strb	r3, [r7, #15]
 466:common/stm32f10x_flash.c ****   
 467:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 384              		.loc 1 467 0
 385 0130 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 386 0132 042B     		cmp	r3, #4
 387 0134 1BD1     		bne	.L23
 468:common/stm32f10x_flash.c ****   { 
ARM GAS  /tmp/ccohH8g1.s 			page 16


 469:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase the page */
 470:common/stm32f10x_flash.c ****     FLASH->CR|= CR_PER_Set;
 388              		.loc 1 470 0
 389 0136 104A     		ldr	r2, .L25
 390 0138 0F4B     		ldr	r3, .L25
 391 013a 1B69     		ldr	r3, [r3, #16]
 392 013c 43F00203 		orr	r3, r3, #2
 393 0140 1361     		str	r3, [r2, #16]
 471:common/stm32f10x_flash.c ****     FLASH->AR = Page_Address; 
 394              		.loc 1 471 0
 395 0142 0D4A     		ldr	r2, .L25
 396 0144 7B68     		ldr	r3, [r7, #4]
 397 0146 5361     		str	r3, [r2, #20]
 472:common/stm32f10x_flash.c ****     FLASH->CR|= CR_STRT_Set;
 398              		.loc 1 472 0
 399 0148 0B4A     		ldr	r2, .L25
 400 014a 0B4B     		ldr	r3, .L25
 401 014c 1B69     		ldr	r3, [r3, #16]
 402 014e 43F04003 		orr	r3, r3, #64
 403 0152 1361     		str	r3, [r2, #16]
 473:common/stm32f10x_flash.c ****     
 474:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 475:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(EraseTimeout);
 404              		.loc 1 475 0
 405 0154 4FF43020 		mov	r0, #720896
 406 0158 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 407 015c 0346     		mov	r3, r0
 408 015e FB73     		strb	r3, [r7, #15]
 476:common/stm32f10x_flash.c ****     
 477:common/stm32f10x_flash.c ****     /* Disable the PER Bit */
 478:common/stm32f10x_flash.c ****     FLASH->CR &= CR_PER_Reset;
 409              		.loc 1 478 0
 410 0160 0549     		ldr	r1, .L25
 411 0162 054B     		ldr	r3, .L25
 412 0164 1A69     		ldr	r2, [r3, #16]
 413 0166 41F6FD73 		movw	r3, #8189
 414 016a 1340     		ands	r3, r3, r2
 415 016c 0B61     		str	r3, [r1, #16]
 416              	.L23:
 479:common/stm32f10x_flash.c ****   }
 480:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 481:common/stm32f10x_flash.c **** 
 482:common/stm32f10x_flash.c ****   /* Return the Erase Status */
 483:common/stm32f10x_flash.c ****   return status;
 417              		.loc 1 483 0
 418 016e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 484:common/stm32f10x_flash.c **** }
 419              		.loc 1 484 0
 420 0170 1846     		mov	r0, r3
 421 0172 1037     		adds	r7, r7, #16
 422              		.cfi_def_cfa_offset 8
 423 0174 BD46     		mov	sp, r7
 424              		.cfi_def_cfa_register 13
 425              		@ sp needed
 426 0176 80BD     		pop	{r7, pc}
 427              	.L26:
 428              		.align	2
ARM GAS  /tmp/ccohH8g1.s 			page 17


 429              	.L25:
 430 0178 00200240 		.word	1073881088
 431              		.cfi_endproc
 432              	.LFE70:
 433              		.size	FLASH_ErasePage, .-FLASH_ErasePage
 434              		.align	1
 435              		.global	FLASH_EraseAllPages
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
 439              		.fpu softvfp
 440              		.type	FLASH_EraseAllPages, %function
 441              	FLASH_EraseAllPages:
 442              	.LFB71:
 485:common/stm32f10x_flash.c **** 
 486:common/stm32f10x_flash.c **** /**
 487:common/stm32f10x_flash.c ****   * @brief  Erases all FLASH pages.
 488:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 489:common/stm32f10x_flash.c ****   * @param  None
 490:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 491:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 492:common/stm32f10x_flash.c ****   */
 493:common/stm32f10x_flash.c **** FLASH_Status FLASH_EraseAllPages(void)
 494:common/stm32f10x_flash.c **** {
 443              		.loc 1 494 0
 444              		.cfi_startproc
 445              		@ args = 0, pretend = 0, frame = 8
 446              		@ frame_needed = 1, uses_anonymous_args = 0
 447 017c 80B5     		push	{r7, lr}
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 017e 82B0     		sub	sp, sp, #8
 452              		.cfi_def_cfa_offset 16
 453 0180 00AF     		add	r7, sp, #0
 454              		.cfi_def_cfa_register 7
 495:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 455              		.loc 1 495 0
 456 0182 0423     		movs	r3, #4
 457 0184 FB71     		strb	r3, [r7, #7]
 496:common/stm32f10x_flash.c **** 
 497:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 498:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 499:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 500:common/stm32f10x_flash.c ****   
 501:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 502:common/stm32f10x_flash.c ****   {
 503:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 504:common/stm32f10x_flash.c ****      FLASH->CR |= CR_MER_Set;
 505:common/stm32f10x_flash.c ****      FLASH->CR |= CR_STRT_Set;
 506:common/stm32f10x_flash.c ****     
 507:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 508:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 509:common/stm32f10x_flash.c ****     
 510:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 511:common/stm32f10x_flash.c ****     FLASH->CR &= CR_MER_Reset;
 512:common/stm32f10x_flash.c ****   }    
ARM GAS  /tmp/ccohH8g1.s 			page 18


 513:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 514:common/stm32f10x_flash.c ****   {
 515:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 516:common/stm32f10x_flash.c ****      FLASH->CR2 |= CR_MER_Set;
 517:common/stm32f10x_flash.c ****      FLASH->CR2 |= CR_STRT_Set;
 518:common/stm32f10x_flash.c ****     
 519:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 520:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 521:common/stm32f10x_flash.c ****     
 522:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 523:common/stm32f10x_flash.c ****     FLASH->CR2 &= CR_MER_Reset;
 524:common/stm32f10x_flash.c ****   }
 525:common/stm32f10x_flash.c **** #else
 526:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 527:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(EraseTimeout);
 458              		.loc 1 527 0
 459 0186 4FF43020 		mov	r0, #720896
 460 018a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 461 018e 0346     		mov	r3, r0
 462 0190 FB71     		strb	r3, [r7, #7]
 528:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 463              		.loc 1 528 0
 464 0192 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 465 0194 042B     		cmp	r3, #4
 466 0196 18D1     		bne	.L28
 529:common/stm32f10x_flash.c ****   {
 530:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 531:common/stm32f10x_flash.c ****      FLASH->CR |= CR_MER_Set;
 467              		.loc 1 531 0
 468 0198 0E4A     		ldr	r2, .L30
 469 019a 0E4B     		ldr	r3, .L30
 470 019c 1B69     		ldr	r3, [r3, #16]
 471 019e 43F00403 		orr	r3, r3, #4
 472 01a2 1361     		str	r3, [r2, #16]
 532:common/stm32f10x_flash.c ****      FLASH->CR |= CR_STRT_Set;
 473              		.loc 1 532 0
 474 01a4 0B4A     		ldr	r2, .L30
 475 01a6 0B4B     		ldr	r3, .L30
 476 01a8 1B69     		ldr	r3, [r3, #16]
 477 01aa 43F04003 		orr	r3, r3, #64
 478 01ae 1361     		str	r3, [r2, #16]
 533:common/stm32f10x_flash.c ****     
 534:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 535:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(EraseTimeout);
 479              		.loc 1 535 0
 480 01b0 4FF43020 		mov	r0, #720896
 481 01b4 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 482 01b8 0346     		mov	r3, r0
 483 01ba FB71     		strb	r3, [r7, #7]
 536:common/stm32f10x_flash.c **** 
 537:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 538:common/stm32f10x_flash.c ****     FLASH->CR &= CR_MER_Reset;
 484              		.loc 1 538 0
 485 01bc 0549     		ldr	r1, .L30
 486 01be 054B     		ldr	r3, .L30
 487 01c0 1A69     		ldr	r2, [r3, #16]
 488 01c2 41F6FB73 		movw	r3, #8187
ARM GAS  /tmp/ccohH8g1.s 			page 19


 489 01c6 1340     		ands	r3, r3, r2
 490 01c8 0B61     		str	r3, [r1, #16]
 491              	.L28:
 539:common/stm32f10x_flash.c ****   }
 540:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 541:common/stm32f10x_flash.c **** 
 542:common/stm32f10x_flash.c ****   /* Return the Erase Status */
 543:common/stm32f10x_flash.c ****   return status;
 492              		.loc 1 543 0
 493 01ca FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 544:common/stm32f10x_flash.c **** }
 494              		.loc 1 544 0
 495 01cc 1846     		mov	r0, r3
 496 01ce 0837     		adds	r7, r7, #8
 497              		.cfi_def_cfa_offset 8
 498 01d0 BD46     		mov	sp, r7
 499              		.cfi_def_cfa_register 13
 500              		@ sp needed
 501 01d2 80BD     		pop	{r7, pc}
 502              	.L31:
 503              		.align	2
 504              	.L30:
 505 01d4 00200240 		.word	1073881088
 506              		.cfi_endproc
 507              	.LFE71:
 508              		.size	FLASH_EraseAllPages, .-FLASH_EraseAllPages
 509              		.align	1
 510              		.global	FLASH_EraseAllBank1Pages
 511              		.syntax unified
 512              		.thumb
 513              		.thumb_func
 514              		.fpu softvfp
 515              		.type	FLASH_EraseAllBank1Pages, %function
 516              	FLASH_EraseAllBank1Pages:
 517              	.LFB72:
 545:common/stm32f10x_flash.c **** 
 546:common/stm32f10x_flash.c **** /**
 547:common/stm32f10x_flash.c ****   * @brief  Erases all Bank1 FLASH pages.
 548:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 549:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function erases all Bank1 pages.
 550:common/stm32f10x_flash.c ****   *         - For all other devices it erases all Bank1 pages and it is equivalent 
 551:common/stm32f10x_flash.c ****   *           to FLASH_EraseAllPages function.
 552:common/stm32f10x_flash.c ****   * @param  None
 553:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 554:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 555:common/stm32f10x_flash.c ****   */
 556:common/stm32f10x_flash.c **** FLASH_Status FLASH_EraseAllBank1Pages(void)
 557:common/stm32f10x_flash.c **** {
 518              		.loc 1 557 0
 519              		.cfi_startproc
 520              		@ args = 0, pretend = 0, frame = 8
 521              		@ frame_needed = 1, uses_anonymous_args = 0
 522 01d8 80B5     		push	{r7, lr}
 523              		.cfi_def_cfa_offset 8
 524              		.cfi_offset 7, -8
 525              		.cfi_offset 14, -4
 526 01da 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccohH8g1.s 			page 20


 527              		.cfi_def_cfa_offset 16
 528 01dc 00AF     		add	r7, sp, #0
 529              		.cfi_def_cfa_register 7
 558:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 530              		.loc 1 558 0
 531 01de 0423     		movs	r3, #4
 532 01e0 FB71     		strb	r3, [r7, #7]
 559:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 560:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 533              		.loc 1 560 0
 534 01e2 4FF43020 		mov	r0, #720896
 535 01e6 FFF7FEFF 		bl	FLASH_WaitForLastBank1Operation
 536 01ea 0346     		mov	r3, r0
 537 01ec FB71     		strb	r3, [r7, #7]
 561:common/stm32f10x_flash.c ****   
 562:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 538              		.loc 1 562 0
 539 01ee FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 540 01f0 042B     		cmp	r3, #4
 541 01f2 18D1     		bne	.L33
 563:common/stm32f10x_flash.c ****   {
 564:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 565:common/stm32f10x_flash.c ****      FLASH->CR |= CR_MER_Set;
 542              		.loc 1 565 0
 543 01f4 0E4A     		ldr	r2, .L35
 544 01f6 0E4B     		ldr	r3, .L35
 545 01f8 1B69     		ldr	r3, [r3, #16]
 546 01fa 43F00403 		orr	r3, r3, #4
 547 01fe 1361     		str	r3, [r2, #16]
 566:common/stm32f10x_flash.c ****      FLASH->CR |= CR_STRT_Set;
 548              		.loc 1 566 0
 549 0200 0B4A     		ldr	r2, .L35
 550 0202 0B4B     		ldr	r3, .L35
 551 0204 1B69     		ldr	r3, [r3, #16]
 552 0206 43F04003 		orr	r3, r3, #64
 553 020a 1361     		str	r3, [r2, #16]
 567:common/stm32f10x_flash.c ****     
 568:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 569:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(EraseTimeout);
 554              		.loc 1 569 0
 555 020c 4FF43020 		mov	r0, #720896
 556 0210 FFF7FEFF 		bl	FLASH_WaitForLastBank1Operation
 557 0214 0346     		mov	r3, r0
 558 0216 FB71     		strb	r3, [r7, #7]
 570:common/stm32f10x_flash.c ****     
 571:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 572:common/stm32f10x_flash.c ****     FLASH->CR &= CR_MER_Reset;
 559              		.loc 1 572 0
 560 0218 0549     		ldr	r1, .L35
 561 021a 054B     		ldr	r3, .L35
 562 021c 1A69     		ldr	r2, [r3, #16]
 563 021e 41F6FB73 		movw	r3, #8187
 564 0222 1340     		ands	r3, r3, r2
 565 0224 0B61     		str	r3, [r1, #16]
 566              	.L33:
 573:common/stm32f10x_flash.c ****   }    
 574:common/stm32f10x_flash.c ****   /* Return the Erase Status */
ARM GAS  /tmp/ccohH8g1.s 			page 21


 575:common/stm32f10x_flash.c ****   return status;
 567              		.loc 1 575 0
 568 0226 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 576:common/stm32f10x_flash.c **** }
 569              		.loc 1 576 0
 570 0228 1846     		mov	r0, r3
 571 022a 0837     		adds	r7, r7, #8
 572              		.cfi_def_cfa_offset 8
 573 022c BD46     		mov	sp, r7
 574              		.cfi_def_cfa_register 13
 575              		@ sp needed
 576 022e 80BD     		pop	{r7, pc}
 577              	.L36:
 578              		.align	2
 579              	.L35:
 580 0230 00200240 		.word	1073881088
 581              		.cfi_endproc
 582              	.LFE72:
 583              		.size	FLASH_EraseAllBank1Pages, .-FLASH_EraseAllBank1Pages
 584              		.align	1
 585              		.global	FLASH_EraseOptionBytes
 586              		.syntax unified
 587              		.thumb
 588              		.thumb_func
 589              		.fpu softvfp
 590              		.type	FLASH_EraseOptionBytes, %function
 591              	FLASH_EraseOptionBytes:
 592              	.LFB73:
 577:common/stm32f10x_flash.c **** 
 578:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 579:common/stm32f10x_flash.c **** /**
 580:common/stm32f10x_flash.c ****   * @brief  Erases all Bank2 FLASH pages.
 581:common/stm32f10x_flash.c ****   * @note   This function can be used only for STM32F10x_XL density devices.
 582:common/stm32f10x_flash.c ****   * @param  None
 583:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 584:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 585:common/stm32f10x_flash.c ****   */
 586:common/stm32f10x_flash.c **** FLASH_Status FLASH_EraseAllBank2Pages(void)
 587:common/stm32f10x_flash.c **** {
 588:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 589:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 590:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 591:common/stm32f10x_flash.c ****   
 592:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 593:common/stm32f10x_flash.c ****   {
 594:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase all pages */
 595:common/stm32f10x_flash.c ****      FLASH->CR2 |= CR_MER_Set;
 596:common/stm32f10x_flash.c ****      FLASH->CR2 |= CR_STRT_Set;
 597:common/stm32f10x_flash.c ****     
 598:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 599:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(EraseTimeout);
 600:common/stm32f10x_flash.c **** 
 601:common/stm32f10x_flash.c ****     /* Disable the MER Bit */
 602:common/stm32f10x_flash.c ****     FLASH->CR2 &= CR_MER_Reset;
 603:common/stm32f10x_flash.c ****   }    
 604:common/stm32f10x_flash.c ****   /* Return the Erase Status */
 605:common/stm32f10x_flash.c ****   return status;
ARM GAS  /tmp/ccohH8g1.s 			page 22


 606:common/stm32f10x_flash.c **** }
 607:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 608:common/stm32f10x_flash.c **** 
 609:common/stm32f10x_flash.c **** /**
 610:common/stm32f10x_flash.c ****   * @brief  Erases the FLASH option bytes.
 611:common/stm32f10x_flash.c ****   * @note   This functions erases all option bytes except the Read protection (RDP). 
 612:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 613:common/stm32f10x_flash.c ****   * @param  None
 614:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 615:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 616:common/stm32f10x_flash.c ****   */
 617:common/stm32f10x_flash.c **** FLASH_Status FLASH_EraseOptionBytes(void)
 618:common/stm32f10x_flash.c **** {
 593              		.loc 1 618 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 8
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0234 80B5     		push	{r7, lr}
 598              		.cfi_def_cfa_offset 8
 599              		.cfi_offset 7, -8
 600              		.cfi_offset 14, -4
 601 0236 82B0     		sub	sp, sp, #8
 602              		.cfi_def_cfa_offset 16
 603 0238 00AF     		add	r7, sp, #0
 604              		.cfi_def_cfa_register 7
 619:common/stm32f10x_flash.c ****   uint16_t rdptmp = RDP_Key;
 605              		.loc 1 619 0
 606 023a A523     		movs	r3, #165
 607 023c FB80     		strh	r3, [r7, #6]	@ movhi
 620:common/stm32f10x_flash.c **** 
 621:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 608              		.loc 1 621 0
 609 023e 0423     		movs	r3, #4
 610 0240 7B71     		strb	r3, [r7, #5]
 622:common/stm32f10x_flash.c **** 
 623:common/stm32f10x_flash.c ****   /* Get the actual read protection Option Byte value */ 
 624:common/stm32f10x_flash.c ****   if(FLASH_GetReadOutProtectionStatus() != RESET)
 611              		.loc 1 624 0
 612 0242 FFF7FEFF 		bl	FLASH_GetReadOutProtectionStatus
 613 0246 0346     		mov	r3, r0
 614 0248 002B     		cmp	r3, #0
 615 024a 01D0     		beq	.L38
 625:common/stm32f10x_flash.c ****   {
 626:common/stm32f10x_flash.c ****     rdptmp = 0x00;  
 616              		.loc 1 626 0
 617 024c 0023     		movs	r3, #0
 618 024e FB80     		strh	r3, [r7, #6]	@ movhi
 619              	.L38:
 627:common/stm32f10x_flash.c ****   }
 628:common/stm32f10x_flash.c **** 
 629:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 630:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(EraseTimeout);
 620              		.loc 1 630 0
 621 0250 4FF43020 		mov	r0, #720896
 622 0254 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 623 0258 0346     		mov	r3, r0
 624 025a 7B71     		strb	r3, [r7, #5]
ARM GAS  /tmp/ccohH8g1.s 			page 23


 631:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 625              		.loc 1 631 0
 626 025c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 627 025e 042B     		cmp	r3, #4
 628 0260 45D1     		bne	.L39
 632:common/stm32f10x_flash.c ****   {
 633:common/stm32f10x_flash.c ****     /* Authorize the small information block programming */
 634:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY1;
 629              		.loc 1 634 0
 630 0262 254B     		ldr	r3, .L43
 631 0264 254A     		ldr	r2, .L43+4
 632 0266 9A60     		str	r2, [r3, #8]
 635:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY2;
 633              		.loc 1 635 0
 634 0268 234B     		ldr	r3, .L43
 635 026a 254A     		ldr	r2, .L43+8
 636 026c 9A60     		str	r2, [r3, #8]
 636:common/stm32f10x_flash.c ****     
 637:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to erase the option bytes */
 638:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTER_Set;
 637              		.loc 1 638 0
 638 026e 224A     		ldr	r2, .L43
 639 0270 214B     		ldr	r3, .L43
 640 0272 1B69     		ldr	r3, [r3, #16]
 641 0274 43F02003 		orr	r3, r3, #32
 642 0278 1361     		str	r3, [r2, #16]
 639:common/stm32f10x_flash.c ****     FLASH->CR |= CR_STRT_Set;
 643              		.loc 1 639 0
 644 027a 1F4A     		ldr	r2, .L43
 645 027c 1E4B     		ldr	r3, .L43
 646 027e 1B69     		ldr	r3, [r3, #16]
 647 0280 43F04003 		orr	r3, r3, #64
 648 0284 1361     		str	r3, [r2, #16]
 640:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 641:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(EraseTimeout);
 649              		.loc 1 641 0
 650 0286 4FF43020 		mov	r0, #720896
 651 028a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 652 028e 0346     		mov	r3, r0
 653 0290 7B71     		strb	r3, [r7, #5]
 642:common/stm32f10x_flash.c ****     
 643:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 654              		.loc 1 643 0
 655 0292 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 656 0294 042B     		cmp	r3, #4
 657 0296 20D1     		bne	.L40
 644:common/stm32f10x_flash.c ****     {
 645:common/stm32f10x_flash.c ****       /* if the erase operation is completed, disable the OPTER Bit */
 646:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTER_Reset;
 658              		.loc 1 646 0
 659 0298 1749     		ldr	r1, .L43
 660 029a 174B     		ldr	r3, .L43
 661 029c 1A69     		ldr	r2, [r3, #16]
 662 029e 41F6DF73 		movw	r3, #8159
 663 02a2 1340     		ands	r3, r3, r2
 664 02a4 0B61     		str	r3, [r1, #16]
 647:common/stm32f10x_flash.c ****        
ARM GAS  /tmp/ccohH8g1.s 			page 24


 648:common/stm32f10x_flash.c ****       /* Enable the Option Bytes Programming operation */
 649:common/stm32f10x_flash.c ****       FLASH->CR |= CR_OPTPG_Set;
 665              		.loc 1 649 0
 666 02a6 144A     		ldr	r2, .L43
 667 02a8 134B     		ldr	r3, .L43
 668 02aa 1B69     		ldr	r3, [r3, #16]
 669 02ac 43F01003 		orr	r3, r3, #16
 670 02b0 1361     		str	r3, [r2, #16]
 650:common/stm32f10x_flash.c ****       /* Restore the last read protection Option Byte value */
 651:common/stm32f10x_flash.c ****       OB->RDP = (uint16_t)rdptmp; 
 671              		.loc 1 651 0
 672 02b2 144A     		ldr	r2, .L43+12
 673 02b4 FB88     		ldrh	r3, [r7, #6]	@ movhi
 674 02b6 1380     		strh	r3, [r2]	@ movhi
 652:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 653:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 675              		.loc 1 653 0
 676 02b8 4FF40050 		mov	r0, #8192
 677 02bc FFF7FEFF 		bl	FLASH_WaitForLastOperation
 678 02c0 0346     		mov	r3, r0
 679 02c2 7B71     		strb	r3, [r7, #5]
 654:common/stm32f10x_flash.c ****  
 655:common/stm32f10x_flash.c ****       if(status != FLASH_TIMEOUT)
 680              		.loc 1 655 0
 681 02c4 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 682 02c6 052B     		cmp	r3, #5
 683 02c8 11D0     		beq	.L39
 656:common/stm32f10x_flash.c ****       {
 657:common/stm32f10x_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
 658:common/stm32f10x_flash.c ****         FLASH->CR &= CR_OPTPG_Reset;
 684              		.loc 1 658 0
 685 02ca 0B49     		ldr	r1, .L43
 686 02cc 0A4B     		ldr	r3, .L43
 687 02ce 1A69     		ldr	r2, [r3, #16]
 688 02d0 41F6EF73 		movw	r3, #8175
 689 02d4 1340     		ands	r3, r3, r2
 690 02d6 0B61     		str	r3, [r1, #16]
 691 02d8 09E0     		b	.L39
 692              	.L40:
 659:common/stm32f10x_flash.c ****       }
 660:common/stm32f10x_flash.c ****     }
 661:common/stm32f10x_flash.c ****     else
 662:common/stm32f10x_flash.c ****     {
 663:common/stm32f10x_flash.c ****       if (status != FLASH_TIMEOUT)
 693              		.loc 1 663 0
 694 02da 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 695 02dc 052B     		cmp	r3, #5
 696 02de 06D0     		beq	.L39
 664:common/stm32f10x_flash.c ****       {
 665:common/stm32f10x_flash.c ****         /* Disable the OPTPG Bit */
 666:common/stm32f10x_flash.c ****         FLASH->CR &= CR_OPTPG_Reset;
 697              		.loc 1 666 0
 698 02e0 0549     		ldr	r1, .L43
 699 02e2 054B     		ldr	r3, .L43
 700 02e4 1A69     		ldr	r2, [r3, #16]
 701 02e6 41F6EF73 		movw	r3, #8175
 702 02ea 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccohH8g1.s 			page 25


 703 02ec 0B61     		str	r3, [r1, #16]
 704              	.L39:
 667:common/stm32f10x_flash.c ****       }
 668:common/stm32f10x_flash.c ****     }  
 669:common/stm32f10x_flash.c ****   }
 670:common/stm32f10x_flash.c ****   /* Return the erase status */
 671:common/stm32f10x_flash.c ****   return status;
 705              		.loc 1 671 0
 706 02ee 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 672:common/stm32f10x_flash.c **** }
 707              		.loc 1 672 0
 708 02f0 1846     		mov	r0, r3
 709 02f2 0837     		adds	r7, r7, #8
 710              		.cfi_def_cfa_offset 8
 711 02f4 BD46     		mov	sp, r7
 712              		.cfi_def_cfa_register 13
 713              		@ sp needed
 714 02f6 80BD     		pop	{r7, pc}
 715              	.L44:
 716              		.align	2
 717              	.L43:
 718 02f8 00200240 		.word	1073881088
 719 02fc 23016745 		.word	1164378403
 720 0300 AB89EFCD 		.word	-839939669
 721 0304 00F8FF1F 		.word	536868864
 722              		.cfi_endproc
 723              	.LFE73:
 724              		.size	FLASH_EraseOptionBytes, .-FLASH_EraseOptionBytes
 725              		.align	1
 726              		.global	FLASH_ProgramWord
 727              		.syntax unified
 728              		.thumb
 729              		.thumb_func
 730              		.fpu softvfp
 731              		.type	FLASH_ProgramWord, %function
 732              	FLASH_ProgramWord:
 733              	.LFB74:
 673:common/stm32f10x_flash.c **** 
 674:common/stm32f10x_flash.c **** /**
 675:common/stm32f10x_flash.c ****   * @brief  Programs a word at a specified address.
 676:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 677:common/stm32f10x_flash.c ****   * @param  Address: specifies the address to be programmed.
 678:common/stm32f10x_flash.c ****   * @param  Data: specifies the data to be programmed.
 679:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 680:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 681:common/stm32f10x_flash.c ****   */
 682:common/stm32f10x_flash.c **** FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
 683:common/stm32f10x_flash.c **** {
 734              		.loc 1 683 0
 735              		.cfi_startproc
 736              		@ args = 0, pretend = 0, frame = 16
 737              		@ frame_needed = 1, uses_anonymous_args = 0
 738 0308 80B5     		push	{r7, lr}
 739              		.cfi_def_cfa_offset 8
 740              		.cfi_offset 7, -8
 741              		.cfi_offset 14, -4
 742 030a 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccohH8g1.s 			page 26


 743              		.cfi_def_cfa_offset 24
 744 030c 00AF     		add	r7, sp, #0
 745              		.cfi_def_cfa_register 7
 746 030e 7860     		str	r0, [r7, #4]
 747 0310 3960     		str	r1, [r7]
 684:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 748              		.loc 1 684 0
 749 0312 0423     		movs	r3, #4
 750 0314 FB73     		strb	r3, [r7, #15]
 685:common/stm32f10x_flash.c ****   __IO uint32_t tmp = 0;
 751              		.loc 1 685 0
 752 0316 0023     		movs	r3, #0
 753 0318 BB60     		str	r3, [r7, #8]
 686:common/stm32f10x_flash.c **** 
 687:common/stm32f10x_flash.c ****   /* Check the parameters */
 688:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 689:common/stm32f10x_flash.c **** 
 690:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 691:common/stm32f10x_flash.c ****   if(Address < FLASH_BANK1_END_ADDRESS - 2)
 692:common/stm32f10x_flash.c ****   { 
 693:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 694:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(ProgramTimeout); 
 695:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 696:common/stm32f10x_flash.c ****     {
 697:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new first 
 698:common/stm32f10x_flash.c ****         half word */
 699:common/stm32f10x_flash.c ****       FLASH->CR |= CR_PG_Set;
 700:common/stm32f10x_flash.c ****   
 701:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = (uint16_t)Data;
 702:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 703:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 704:common/stm32f10x_flash.c ****  
 705:common/stm32f10x_flash.c ****       if(status == FLASH_COMPLETE)
 706:common/stm32f10x_flash.c ****       {
 707:common/stm32f10x_flash.c ****         /* if the previous operation is completed, proceed to program the new second 
 708:common/stm32f10x_flash.c ****         half word */
 709:common/stm32f10x_flash.c ****         tmp = Address + 2;
 710:common/stm32f10x_flash.c **** 
 711:common/stm32f10x_flash.c ****         *(__IO uint16_t*) tmp = Data >> 16;
 712:common/stm32f10x_flash.c ****     
 713:common/stm32f10x_flash.c ****         /* Wait for last operation to be completed */
 714:common/stm32f10x_flash.c ****         status = FLASH_WaitForLastOperation(ProgramTimeout);
 715:common/stm32f10x_flash.c ****         
 716:common/stm32f10x_flash.c ****         /* Disable the PG Bit */
 717:common/stm32f10x_flash.c ****         FLASH->CR &= CR_PG_Reset;
 718:common/stm32f10x_flash.c ****       }
 719:common/stm32f10x_flash.c ****       else
 720:common/stm32f10x_flash.c ****       {
 721:common/stm32f10x_flash.c ****         /* Disable the PG Bit */
 722:common/stm32f10x_flash.c ****         FLASH->CR &= CR_PG_Reset;
 723:common/stm32f10x_flash.c ****        }
 724:common/stm32f10x_flash.c ****     }
 725:common/stm32f10x_flash.c ****   }
 726:common/stm32f10x_flash.c ****   else if(Address == (FLASH_BANK1_END_ADDRESS - 1))
 727:common/stm32f10x_flash.c ****   {
 728:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 729:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
ARM GAS  /tmp/ccohH8g1.s 			page 27


 730:common/stm32f10x_flash.c **** 
 731:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 732:common/stm32f10x_flash.c ****     {
 733:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new first 
 734:common/stm32f10x_flash.c ****         half word */
 735:common/stm32f10x_flash.c ****       FLASH->CR |= CR_PG_Set;
 736:common/stm32f10x_flash.c ****   
 737:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = (uint16_t)Data;
 738:common/stm32f10x_flash.c **** 
 739:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 740:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 741:common/stm32f10x_flash.c ****       
 742:common/stm32f10x_flash.c **** 	  /* Disable the PG Bit */
 743:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 744:common/stm32f10x_flash.c ****     }
 745:common/stm32f10x_flash.c ****     else
 746:common/stm32f10x_flash.c ****     {
 747:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 748:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 749:common/stm32f10x_flash.c ****     }
 750:common/stm32f10x_flash.c **** 
 751:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 752:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 753:common/stm32f10x_flash.c **** 
 754:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 755:common/stm32f10x_flash.c ****     {
 756:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new second 
 757:common/stm32f10x_flash.c ****       half word */
 758:common/stm32f10x_flash.c ****       FLASH->CR2 |= CR_PG_Set;
 759:common/stm32f10x_flash.c ****       tmp = Address + 2;
 760:common/stm32f10x_flash.c **** 
 761:common/stm32f10x_flash.c ****       *(__IO uint16_t*) tmp = Data >> 16;
 762:common/stm32f10x_flash.c ****     
 763:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 764:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 765:common/stm32f10x_flash.c ****         
 766:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 767:common/stm32f10x_flash.c ****       FLASH->CR2 &= CR_PG_Reset;
 768:common/stm32f10x_flash.c ****     }
 769:common/stm32f10x_flash.c ****     else
 770:common/stm32f10x_flash.c ****     {
 771:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 772:common/stm32f10x_flash.c ****       FLASH->CR2 &= CR_PG_Reset;
 773:common/stm32f10x_flash.c ****     }
 774:common/stm32f10x_flash.c ****   }
 775:common/stm32f10x_flash.c ****   else
 776:common/stm32f10x_flash.c ****   {
 777:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 778:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 779:common/stm32f10x_flash.c **** 
 780:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 781:common/stm32f10x_flash.c ****     {
 782:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new first 
 783:common/stm32f10x_flash.c ****         half word */
 784:common/stm32f10x_flash.c ****       FLASH->CR2 |= CR_PG_Set;
 785:common/stm32f10x_flash.c ****   
 786:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = (uint16_t)Data;
ARM GAS  /tmp/ccohH8g1.s 			page 28


 787:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 788:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 789:common/stm32f10x_flash.c ****  
 790:common/stm32f10x_flash.c ****       if(status == FLASH_COMPLETE)
 791:common/stm32f10x_flash.c ****       {
 792:common/stm32f10x_flash.c ****         /* if the previous operation is completed, proceed to program the new second 
 793:common/stm32f10x_flash.c ****         half word */
 794:common/stm32f10x_flash.c ****         tmp = Address + 2;
 795:common/stm32f10x_flash.c **** 
 796:common/stm32f10x_flash.c ****         *(__IO uint16_t*) tmp = Data >> 16;
 797:common/stm32f10x_flash.c ****     
 798:common/stm32f10x_flash.c ****         /* Wait for last operation to be completed */
 799:common/stm32f10x_flash.c ****         status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 800:common/stm32f10x_flash.c ****         
 801:common/stm32f10x_flash.c ****         /* Disable the PG Bit */
 802:common/stm32f10x_flash.c ****         FLASH->CR2 &= CR_PG_Reset;
 803:common/stm32f10x_flash.c ****       }
 804:common/stm32f10x_flash.c ****       else
 805:common/stm32f10x_flash.c ****       {
 806:common/stm32f10x_flash.c ****         /* Disable the PG Bit */
 807:common/stm32f10x_flash.c ****         FLASH->CR2 &= CR_PG_Reset;
 808:common/stm32f10x_flash.c ****       }
 809:common/stm32f10x_flash.c ****     }
 810:common/stm32f10x_flash.c ****   }
 811:common/stm32f10x_flash.c **** #else
 812:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 813:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 754              		.loc 1 813 0
 755 031a 4FF40050 		mov	r0, #8192
 756 031e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 757 0322 0346     		mov	r3, r0
 758 0324 FB73     		strb	r3, [r7, #15]
 814:common/stm32f10x_flash.c ****   
 815:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 759              		.loc 1 815 0
 760 0326 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 761 0328 042B     		cmp	r3, #4
 762 032a 30D1     		bne	.L46
 816:common/stm32f10x_flash.c ****   {
 817:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to program the new first 
 818:common/stm32f10x_flash.c ****     half word */
 819:common/stm32f10x_flash.c ****     FLASH->CR |= CR_PG_Set;
 763              		.loc 1 819 0
 764 032c 1A4A     		ldr	r2, .L49
 765 032e 1A4B     		ldr	r3, .L49
 766 0330 1B69     		ldr	r3, [r3, #16]
 767 0332 43F00103 		orr	r3, r3, #1
 768 0336 1361     		str	r3, [r2, #16]
 820:common/stm32f10x_flash.c ****   
 821:common/stm32f10x_flash.c ****     *(__IO uint16_t*)Address = (uint16_t)Data;
 769              		.loc 1 821 0
 770 0338 7B68     		ldr	r3, [r7, #4]
 771 033a 3A68     		ldr	r2, [r7]
 772 033c 92B2     		uxth	r2, r2
 773 033e 1A80     		strh	r2, [r3]	@ movhi
 822:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 823:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
ARM GAS  /tmp/ccohH8g1.s 			page 29


 774              		.loc 1 823 0
 775 0340 4FF40050 		mov	r0, #8192
 776 0344 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 777 0348 0346     		mov	r3, r0
 778 034a FB73     		strb	r3, [r7, #15]
 824:common/stm32f10x_flash.c ****  
 825:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 779              		.loc 1 825 0
 780 034c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 781 034e 042B     		cmp	r3, #4
 782 0350 16D1     		bne	.L47
 826:common/stm32f10x_flash.c ****     {
 827:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new second 
 828:common/stm32f10x_flash.c ****       half word */
 829:common/stm32f10x_flash.c ****       tmp = Address + 2;
 783              		.loc 1 829 0
 784 0352 7B68     		ldr	r3, [r7, #4]
 785 0354 0233     		adds	r3, r3, #2
 786 0356 BB60     		str	r3, [r7, #8]
 830:common/stm32f10x_flash.c **** 
 831:common/stm32f10x_flash.c ****       *(__IO uint16_t*) tmp = Data >> 16;
 787              		.loc 1 831 0
 788 0358 BB68     		ldr	r3, [r7, #8]
 789 035a 1A46     		mov	r2, r3
 790 035c 3B68     		ldr	r3, [r7]
 791 035e 1B0C     		lsrs	r3, r3, #16
 792 0360 9BB2     		uxth	r3, r3
 793 0362 1380     		strh	r3, [r2]	@ movhi
 832:common/stm32f10x_flash.c ****     
 833:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 834:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 794              		.loc 1 834 0
 795 0364 4FF40050 		mov	r0, #8192
 796 0368 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 797 036c 0346     		mov	r3, r0
 798 036e FB73     		strb	r3, [r7, #15]
 835:common/stm32f10x_flash.c ****         
 836:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 837:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 799              		.loc 1 837 0
 800 0370 0949     		ldr	r1, .L49
 801 0372 094B     		ldr	r3, .L49
 802 0374 1A69     		ldr	r2, [r3, #16]
 803 0376 41F6FE73 		movw	r3, #8190
 804 037a 1340     		ands	r3, r3, r2
 805 037c 0B61     		str	r3, [r1, #16]
 806 037e 06E0     		b	.L46
 807              	.L47:
 838:common/stm32f10x_flash.c ****     }
 839:common/stm32f10x_flash.c ****     else
 840:common/stm32f10x_flash.c ****     {
 841:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 842:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 808              		.loc 1 842 0
 809 0380 0549     		ldr	r1, .L49
 810 0382 054B     		ldr	r3, .L49
 811 0384 1A69     		ldr	r2, [r3, #16]
ARM GAS  /tmp/ccohH8g1.s 			page 30


 812 0386 41F6FE73 		movw	r3, #8190
 813 038a 1340     		ands	r3, r3, r2
 814 038c 0B61     		str	r3, [r1, #16]
 815              	.L46:
 843:common/stm32f10x_flash.c ****     }
 844:common/stm32f10x_flash.c ****   }         
 845:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
 846:common/stm32f10x_flash.c ****    
 847:common/stm32f10x_flash.c ****   /* Return the Program Status */
 848:common/stm32f10x_flash.c ****   return status;
 816              		.loc 1 848 0
 817 038e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 849:common/stm32f10x_flash.c **** }
 818              		.loc 1 849 0
 819 0390 1846     		mov	r0, r3
 820 0392 1037     		adds	r7, r7, #16
 821              		.cfi_def_cfa_offset 8
 822 0394 BD46     		mov	sp, r7
 823              		.cfi_def_cfa_register 13
 824              		@ sp needed
 825 0396 80BD     		pop	{r7, pc}
 826              	.L50:
 827              		.align	2
 828              	.L49:
 829 0398 00200240 		.word	1073881088
 830              		.cfi_endproc
 831              	.LFE74:
 832              		.size	FLASH_ProgramWord, .-FLASH_ProgramWord
 833              		.align	1
 834              		.global	FLASH_ProgramHalfWord
 835              		.syntax unified
 836              		.thumb
 837              		.thumb_func
 838              		.fpu softvfp
 839              		.type	FLASH_ProgramHalfWord, %function
 840              	FLASH_ProgramHalfWord:
 841              	.LFB75:
 850:common/stm32f10x_flash.c **** 
 851:common/stm32f10x_flash.c **** /**
 852:common/stm32f10x_flash.c ****   * @brief  Programs a half word at a specified address.
 853:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 854:common/stm32f10x_flash.c ****   * @param  Address: specifies the address to be programmed.
 855:common/stm32f10x_flash.c ****   * @param  Data: specifies the data to be programmed.
 856:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 857:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 858:common/stm32f10x_flash.c ****   */
 859:common/stm32f10x_flash.c **** FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
 860:common/stm32f10x_flash.c **** {
 842              		.loc 1 860 0
 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 16
 845              		@ frame_needed = 1, uses_anonymous_args = 0
 846 039c 80B5     		push	{r7, lr}
 847              		.cfi_def_cfa_offset 8
 848              		.cfi_offset 7, -8
 849              		.cfi_offset 14, -4
 850 039e 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccohH8g1.s 			page 31


 851              		.cfi_def_cfa_offset 24
 852 03a0 00AF     		add	r7, sp, #0
 853              		.cfi_def_cfa_register 7
 854 03a2 7860     		str	r0, [r7, #4]
 855 03a4 0B46     		mov	r3, r1
 856 03a6 7B80     		strh	r3, [r7, #2]	@ movhi
 861:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 857              		.loc 1 861 0
 858 03a8 0423     		movs	r3, #4
 859 03aa FB73     		strb	r3, [r7, #15]
 862:common/stm32f10x_flash.c ****   /* Check the parameters */
 863:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_ADDRESS(Address));
 864:common/stm32f10x_flash.c **** 
 865:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
 866:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 867:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 868:common/stm32f10x_flash.c ****   
 869:common/stm32f10x_flash.c ****   if(Address < FLASH_BANK1_END_ADDRESS)
 870:common/stm32f10x_flash.c ****   {
 871:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 872:common/stm32f10x_flash.c ****     {
 873:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new data */
 874:common/stm32f10x_flash.c ****       FLASH->CR |= CR_PG_Set;
 875:common/stm32f10x_flash.c ****   
 876:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = Data;
 877:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 878:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
 879:common/stm32f10x_flash.c **** 
 880:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 881:common/stm32f10x_flash.c ****       FLASH->CR &= CR_PG_Reset;
 882:common/stm32f10x_flash.c ****     }
 883:common/stm32f10x_flash.c ****   }
 884:common/stm32f10x_flash.c ****   else
 885:common/stm32f10x_flash.c ****   {
 886:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 887:common/stm32f10x_flash.c ****     {
 888:common/stm32f10x_flash.c ****       /* if the previous operation is completed, proceed to program the new data */
 889:common/stm32f10x_flash.c ****       FLASH->CR2 |= CR_PG_Set;
 890:common/stm32f10x_flash.c ****   
 891:common/stm32f10x_flash.c ****       *(__IO uint16_t*)Address = Data;
 892:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
 893:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
 894:common/stm32f10x_flash.c **** 
 895:common/stm32f10x_flash.c ****       /* Disable the PG Bit */
 896:common/stm32f10x_flash.c ****       FLASH->CR2 &= CR_PG_Reset;
 897:common/stm32f10x_flash.c ****     }
 898:common/stm32f10x_flash.c ****   }
 899:common/stm32f10x_flash.c **** #else
 900:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 901:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 860              		.loc 1 901 0
 861 03ac 4FF40050 		mov	r0, #8192
 862 03b0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 863 03b4 0346     		mov	r3, r0
 864 03b6 FB73     		strb	r3, [r7, #15]
 902:common/stm32f10x_flash.c ****   
 903:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
ARM GAS  /tmp/ccohH8g1.s 			page 32


 865              		.loc 1 903 0
 866 03b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 867 03ba 042B     		cmp	r3, #4
 868 03bc 15D1     		bne	.L52
 904:common/stm32f10x_flash.c ****   {
 905:common/stm32f10x_flash.c ****     /* if the previous operation is completed, proceed to program the new data */
 906:common/stm32f10x_flash.c ****     FLASH->CR |= CR_PG_Set;
 869              		.loc 1 906 0
 870 03be 0D4A     		ldr	r2, .L54
 871 03c0 0C4B     		ldr	r3, .L54
 872 03c2 1B69     		ldr	r3, [r3, #16]
 873 03c4 43F00103 		orr	r3, r3, #1
 874 03c8 1361     		str	r3, [r2, #16]
 907:common/stm32f10x_flash.c ****   
 908:common/stm32f10x_flash.c ****     *(__IO uint16_t*)Address = Data;
 875              		.loc 1 908 0
 876 03ca 7B68     		ldr	r3, [r7, #4]
 877 03cc 7A88     		ldrh	r2, [r7, #2]	@ movhi
 878 03ce 1A80     		strh	r2, [r3]	@ movhi
 909:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 910:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
 879              		.loc 1 910 0
 880 03d0 4FF40050 		mov	r0, #8192
 881 03d4 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 882 03d8 0346     		mov	r3, r0
 883 03da FB73     		strb	r3, [r7, #15]
 911:common/stm32f10x_flash.c ****     
 912:common/stm32f10x_flash.c ****     /* Disable the PG Bit */
 913:common/stm32f10x_flash.c ****     FLASH->CR &= CR_PG_Reset;
 884              		.loc 1 913 0
 885 03dc 0549     		ldr	r1, .L54
 886 03de 054B     		ldr	r3, .L54
 887 03e0 1A69     		ldr	r2, [r3, #16]
 888 03e2 41F6FE73 		movw	r3, #8190
 889 03e6 1340     		ands	r3, r3, r2
 890 03e8 0B61     		str	r3, [r1, #16]
 891              	.L52:
 914:common/stm32f10x_flash.c ****   } 
 915:common/stm32f10x_flash.c **** #endif  /* STM32F10X_XL */
 916:common/stm32f10x_flash.c ****   
 917:common/stm32f10x_flash.c ****   /* Return the Program Status */
 918:common/stm32f10x_flash.c ****   return status;
 892              		.loc 1 918 0
 893 03ea FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 919:common/stm32f10x_flash.c **** }
 894              		.loc 1 919 0
 895 03ec 1846     		mov	r0, r3
 896 03ee 1037     		adds	r7, r7, #16
 897              		.cfi_def_cfa_offset 8
 898 03f0 BD46     		mov	sp, r7
 899              		.cfi_def_cfa_register 13
 900              		@ sp needed
 901 03f2 80BD     		pop	{r7, pc}
 902              	.L55:
 903              		.align	2
 904              	.L54:
 905 03f4 00200240 		.word	1073881088
ARM GAS  /tmp/ccohH8g1.s 			page 33


 906              		.cfi_endproc
 907              	.LFE75:
 908              		.size	FLASH_ProgramHalfWord, .-FLASH_ProgramHalfWord
 909              		.align	1
 910              		.global	FLASH_ProgramOptionByteData
 911              		.syntax unified
 912              		.thumb
 913              		.thumb_func
 914              		.fpu softvfp
 915              		.type	FLASH_ProgramOptionByteData, %function
 916              	FLASH_ProgramOptionByteData:
 917              	.LFB76:
 920:common/stm32f10x_flash.c **** 
 921:common/stm32f10x_flash.c **** /**
 922:common/stm32f10x_flash.c ****   * @brief  Programs a half word at a specified Option Byte Data address.
 923:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 924:common/stm32f10x_flash.c ****   * @param  Address: specifies the address to be programmed.
 925:common/stm32f10x_flash.c ****   *   This parameter can be 0x1FFFF804 or 0x1FFFF806. 
 926:common/stm32f10x_flash.c ****   * @param  Data: specifies the data to be programmed.
 927:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 928:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT. 
 929:common/stm32f10x_flash.c ****   */
 930:common/stm32f10x_flash.c **** FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
 931:common/stm32f10x_flash.c **** {
 918              		.loc 1 931 0
 919              		.cfi_startproc
 920              		@ args = 0, pretend = 0, frame = 16
 921              		@ frame_needed = 1, uses_anonymous_args = 0
 922 03f8 80B5     		push	{r7, lr}
 923              		.cfi_def_cfa_offset 8
 924              		.cfi_offset 7, -8
 925              		.cfi_offset 14, -4
 926 03fa 84B0     		sub	sp, sp, #16
 927              		.cfi_def_cfa_offset 24
 928 03fc 00AF     		add	r7, sp, #0
 929              		.cfi_def_cfa_register 7
 930 03fe 7860     		str	r0, [r7, #4]
 931 0400 0B46     		mov	r3, r1
 932 0402 FB70     		strb	r3, [r7, #3]
 932:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 933              		.loc 1 932 0
 934 0404 0423     		movs	r3, #4
 935 0406 FB73     		strb	r3, [r7, #15]
 933:common/stm32f10x_flash.c ****   /* Check the parameters */
 934:common/stm32f10x_flash.c ****   assert_param(IS_OB_DATA_ADDRESS(Address));
 935:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 936              		.loc 1 935 0
 937 0408 4FF40050 		mov	r0, #8192
 938 040c FFF7FEFF 		bl	FLASH_WaitForLastOperation
 939 0410 0346     		mov	r3, r0
 940 0412 FB73     		strb	r3, [r7, #15]
 936:common/stm32f10x_flash.c **** 
 937:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 941              		.loc 1 937 0
 942 0414 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 943 0416 042B     		cmp	r3, #4
 944 0418 1FD1     		bne	.L57
ARM GAS  /tmp/ccohH8g1.s 			page 34


 938:common/stm32f10x_flash.c ****   {
 939:common/stm32f10x_flash.c ****     /* Authorize the small information block programming */
 940:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY1;
 945              		.loc 1 940 0
 946 041a 124B     		ldr	r3, .L59
 947 041c 124A     		ldr	r2, .L59+4
 948 041e 9A60     		str	r2, [r3, #8]
 941:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY2;
 949              		.loc 1 941 0
 950 0420 104B     		ldr	r3, .L59
 951 0422 124A     		ldr	r2, .L59+8
 952 0424 9A60     		str	r2, [r3, #8]
 942:common/stm32f10x_flash.c ****     /* Enables the Option Bytes Programming operation */
 943:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTPG_Set; 
 953              		.loc 1 943 0
 954 0426 0F4A     		ldr	r2, .L59
 955 0428 0E4B     		ldr	r3, .L59
 956 042a 1B69     		ldr	r3, [r3, #16]
 957 042c 43F01003 		orr	r3, r3, #16
 958 0430 1361     		str	r3, [r2, #16]
 944:common/stm32f10x_flash.c ****     *(__IO uint16_t*)Address = Data;
 959              		.loc 1 944 0
 960 0432 7B68     		ldr	r3, [r7, #4]
 961 0434 FA78     		ldrb	r2, [r7, #3]	@ zero_extendqisi2
 962 0436 92B2     		uxth	r2, r2
 963 0438 1A80     		strh	r2, [r3]	@ movhi
 945:common/stm32f10x_flash.c ****     
 946:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
 947:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
 964              		.loc 1 947 0
 965 043a 4FF40050 		mov	r0, #8192
 966 043e FFF7FEFF 		bl	FLASH_WaitForLastOperation
 967 0442 0346     		mov	r3, r0
 968 0444 FB73     		strb	r3, [r7, #15]
 948:common/stm32f10x_flash.c ****     if(status != FLASH_TIMEOUT)
 969              		.loc 1 948 0
 970 0446 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 971 0448 052B     		cmp	r3, #5
 972 044a 06D0     		beq	.L57
 949:common/stm32f10x_flash.c ****     {
 950:common/stm32f10x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
 951:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTPG_Reset;
 973              		.loc 1 951 0
 974 044c 0549     		ldr	r1, .L59
 975 044e 054B     		ldr	r3, .L59
 976 0450 1A69     		ldr	r2, [r3, #16]
 977 0452 41F6EF73 		movw	r3, #8175
 978 0456 1340     		ands	r3, r3, r2
 979 0458 0B61     		str	r3, [r1, #16]
 980              	.L57:
 952:common/stm32f10x_flash.c ****     }
 953:common/stm32f10x_flash.c ****   }
 954:common/stm32f10x_flash.c ****   /* Return the Option Byte Data Program Status */
 955:common/stm32f10x_flash.c ****   return status;
 981              		.loc 1 955 0
 982 045a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 956:common/stm32f10x_flash.c **** }
ARM GAS  /tmp/ccohH8g1.s 			page 35


 983              		.loc 1 956 0
 984 045c 1846     		mov	r0, r3
 985 045e 1037     		adds	r7, r7, #16
 986              		.cfi_def_cfa_offset 8
 987 0460 BD46     		mov	sp, r7
 988              		.cfi_def_cfa_register 13
 989              		@ sp needed
 990 0462 80BD     		pop	{r7, pc}
 991              	.L60:
 992              		.align	2
 993              	.L59:
 994 0464 00200240 		.word	1073881088
 995 0468 23016745 		.word	1164378403
 996 046c AB89EFCD 		.word	-839939669
 997              		.cfi_endproc
 998              	.LFE76:
 999              		.size	FLASH_ProgramOptionByteData, .-FLASH_ProgramOptionByteData
 1000              		.align	1
 1001              		.global	FLASH_EnableWriteProtection
 1002              		.syntax unified
 1003              		.thumb
 1004              		.thumb_func
 1005              		.fpu softvfp
 1006              		.type	FLASH_EnableWriteProtection, %function
 1007              	FLASH_EnableWriteProtection:
 1008              	.LFB77:
 957:common/stm32f10x_flash.c **** 
 958:common/stm32f10x_flash.c **** /**
 959:common/stm32f10x_flash.c ****   * @brief  Write protects the desired pages
 960:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
 961:common/stm32f10x_flash.c ****   * @param  FLASH_Pages: specifies the address of the pages to be write protected.
 962:common/stm32f10x_flash.c ****   *   This parameter can be:
 963:common/stm32f10x_flash.c ****   *     @arg For @b STM32_Low-density_devices: value between FLASH_WRProt_Pages0to3 and FLASH_WRPro
 964:common/stm32f10x_flash.c ****   *     @arg For @b STM32_Medium-density_devices: value between FLASH_WRProt_Pages0to3
 965:common/stm32f10x_flash.c ****   *       and FLASH_WRProt_Pages124to127
 966:common/stm32f10x_flash.c ****   *     @arg For @b STM32_High-density_devices: value between FLASH_WRProt_Pages0to1 and
 967:common/stm32f10x_flash.c ****   *       FLASH_WRProt_Pages60to61 or FLASH_WRProt_Pages62to255
 968:common/stm32f10x_flash.c ****   *     @arg For @b STM32_Connectivity_line_devices: value between FLASH_WRProt_Pages0to1 and
 969:common/stm32f10x_flash.c ****   *       FLASH_WRProt_Pages60to61 or FLASH_WRProt_Pages62to127    
 970:common/stm32f10x_flash.c ****   *     @arg For @b STM32_XL-density_devices: value between FLASH_WRProt_Pages0to1 and
 971:common/stm32f10x_flash.c ****   *       FLASH_WRProt_Pages60to61 or FLASH_WRProt_Pages62to511
 972:common/stm32f10x_flash.c ****   *     @arg FLASH_WRProt_AllPages
 973:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
 974:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 975:common/stm32f10x_flash.c ****   */
 976:common/stm32f10x_flash.c **** FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
 977:common/stm32f10x_flash.c **** {
 1009              		.loc 1 977 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 24
 1012              		@ frame_needed = 1, uses_anonymous_args = 0
 1013 0470 80B5     		push	{r7, lr}
 1014              		.cfi_def_cfa_offset 8
 1015              		.cfi_offset 7, -8
 1016              		.cfi_offset 14, -4
 1017 0472 86B0     		sub	sp, sp, #24
 1018              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccohH8g1.s 			page 36


 1019 0474 00AF     		add	r7, sp, #0
 1020              		.cfi_def_cfa_register 7
 1021 0476 7860     		str	r0, [r7, #4]
 978:common/stm32f10x_flash.c ****   uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
 1022              		.loc 1 978 0
 1023 0478 4FF6FF73 		movw	r3, #65535
 1024 047c BB82     		strh	r3, [r7, #20]	@ movhi
 1025 047e 4FF6FF73 		movw	r3, #65535
 1026 0482 7B82     		strh	r3, [r7, #18]	@ movhi
 1027 0484 4FF6FF73 		movw	r3, #65535
 1028 0488 3B82     		strh	r3, [r7, #16]	@ movhi
 1029 048a 4FF6FF73 		movw	r3, #65535
 1030 048e FB81     		strh	r3, [r7, #14]	@ movhi
 979:common/stm32f10x_flash.c ****   
 980:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1031              		.loc 1 980 0
 1032 0490 0423     		movs	r3, #4
 1033 0492 FB75     		strb	r3, [r7, #23]
 981:common/stm32f10x_flash.c ****   
 982:common/stm32f10x_flash.c ****   /* Check the parameters */
 983:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
 984:common/stm32f10x_flash.c ****   
 985:common/stm32f10x_flash.c ****   FLASH_Pages = (uint32_t)(~FLASH_Pages);
 1034              		.loc 1 985 0
 1035 0494 7B68     		ldr	r3, [r7, #4]
 1036 0496 DB43     		mvns	r3, r3
 1037 0498 7B60     		str	r3, [r7, #4]
 986:common/stm32f10x_flash.c ****   WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
 1038              		.loc 1 986 0
 1039 049a 7B68     		ldr	r3, [r7, #4]
 1040 049c 9BB2     		uxth	r3, r3
 1041 049e DBB2     		uxtb	r3, r3
 1042 04a0 BB82     		strh	r3, [r7, #20]	@ movhi
 987:common/stm32f10x_flash.c ****   WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
 1043              		.loc 1 987 0
 1044 04a2 7B68     		ldr	r3, [r7, #4]
 1045 04a4 1B0A     		lsrs	r3, r3, #8
 1046 04a6 9BB2     		uxth	r3, r3
 1047 04a8 DBB2     		uxtb	r3, r3
 1048 04aa 7B82     		strh	r3, [r7, #18]	@ movhi
 988:common/stm32f10x_flash.c ****   WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
 1049              		.loc 1 988 0
 1050 04ac 7B68     		ldr	r3, [r7, #4]
 1051 04ae 1B0C     		lsrs	r3, r3, #16
 1052 04b0 9BB2     		uxth	r3, r3
 1053 04b2 DBB2     		uxtb	r3, r3
 1054 04b4 3B82     		strh	r3, [r7, #16]	@ movhi
 989:common/stm32f10x_flash.c ****   WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
 1055              		.loc 1 989 0
 1056 04b6 7B68     		ldr	r3, [r7, #4]
 1057 04b8 1B0E     		lsrs	r3, r3, #24
 1058 04ba FB81     		strh	r3, [r7, #14]	@ movhi
 990:common/stm32f10x_flash.c ****   
 991:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
 992:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 1059              		.loc 1 992 0
 1060 04bc 4FF40050 		mov	r0, #8192
ARM GAS  /tmp/ccohH8g1.s 			page 37


 1061 04c0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1062 04c4 0346     		mov	r3, r0
 1063 04c6 FB75     		strb	r3, [r7, #23]
 993:common/stm32f10x_flash.c ****   
 994:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 1064              		.loc 1 994 0
 1065 04c8 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1066 04ca 042B     		cmp	r3, #4
 1067 04cc 4ED1     		bne	.L62
 995:common/stm32f10x_flash.c ****   {
 996:common/stm32f10x_flash.c ****     /* Authorizes the small information block programming */
 997:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY1;
 1068              		.loc 1 997 0
 1069 04ce 2A4B     		ldr	r3, .L68
 1070 04d0 2A4A     		ldr	r2, .L68+4
 1071 04d2 9A60     		str	r2, [r3, #8]
 998:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY2;
 1072              		.loc 1 998 0
 1073 04d4 284B     		ldr	r3, .L68
 1074 04d6 2A4A     		ldr	r2, .L68+8
 1075 04d8 9A60     		str	r2, [r3, #8]
 999:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTPG_Set;
 1076              		.loc 1 999 0
 1077 04da 274A     		ldr	r2, .L68
 1078 04dc 264B     		ldr	r3, .L68
 1079 04de 1B69     		ldr	r3, [r3, #16]
 1080 04e0 43F01003 		orr	r3, r3, #16
 1081 04e4 1361     		str	r3, [r2, #16]
1000:common/stm32f10x_flash.c ****     if(WRP0_Data != 0xFF)
 1082              		.loc 1 1000 0
 1083 04e6 BB8A     		ldrh	r3, [r7, #20]
 1084 04e8 FF2B     		cmp	r3, #255
 1085 04ea 08D0     		beq	.L63
1001:common/stm32f10x_flash.c ****     {
1002:common/stm32f10x_flash.c ****       OB->WRP0 = WRP0_Data;
 1086              		.loc 1 1002 0
 1087 04ec 254A     		ldr	r2, .L68+12
 1088 04ee BB8A     		ldrh	r3, [r7, #20]	@ movhi
 1089 04f0 1381     		strh	r3, [r2, #8]	@ movhi
1003:common/stm32f10x_flash.c ****       
1004:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1005:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 1090              		.loc 1 1005 0
 1091 04f2 4FF40050 		mov	r0, #8192
 1092 04f6 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1093 04fa 0346     		mov	r3, r0
 1094 04fc FB75     		strb	r3, [r7, #23]
 1095              	.L63:
1006:common/stm32f10x_flash.c ****     }
1007:common/stm32f10x_flash.c ****     if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
 1096              		.loc 1 1007 0
 1097 04fe FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1098 0500 042B     		cmp	r3, #4
 1099 0502 0BD1     		bne	.L64
 1100              		.loc 1 1007 0 is_stmt 0 discriminator 1
 1101 0504 7B8A     		ldrh	r3, [r7, #18]
 1102 0506 FF2B     		cmp	r3, #255
ARM GAS  /tmp/ccohH8g1.s 			page 38


 1103 0508 08D0     		beq	.L64
1008:common/stm32f10x_flash.c ****     {
1009:common/stm32f10x_flash.c ****       OB->WRP1 = WRP1_Data;
 1104              		.loc 1 1009 0 is_stmt 1
 1105 050a 1E4A     		ldr	r2, .L68+12
 1106 050c 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 1107 050e 5381     		strh	r3, [r2, #10]	@ movhi
1010:common/stm32f10x_flash.c ****       
1011:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1012:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 1108              		.loc 1 1012 0
 1109 0510 4FF40050 		mov	r0, #8192
 1110 0514 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1111 0518 0346     		mov	r3, r0
 1112 051a FB75     		strb	r3, [r7, #23]
 1113              	.L64:
1013:common/stm32f10x_flash.c ****     }
1014:common/stm32f10x_flash.c ****     if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
 1114              		.loc 1 1014 0
 1115 051c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1116 051e 042B     		cmp	r3, #4
 1117 0520 0BD1     		bne	.L65
 1118              		.loc 1 1014 0 is_stmt 0 discriminator 1
 1119 0522 3B8A     		ldrh	r3, [r7, #16]
 1120 0524 FF2B     		cmp	r3, #255
 1121 0526 08D0     		beq	.L65
1015:common/stm32f10x_flash.c ****     {
1016:common/stm32f10x_flash.c ****       OB->WRP2 = WRP2_Data;
 1122              		.loc 1 1016 0 is_stmt 1
 1123 0528 164A     		ldr	r2, .L68+12
 1124 052a 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 1125 052c 9381     		strh	r3, [r2, #12]	@ movhi
1017:common/stm32f10x_flash.c ****       
1018:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1019:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 1126              		.loc 1 1019 0
 1127 052e 4FF40050 		mov	r0, #8192
 1128 0532 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1129 0536 0346     		mov	r3, r0
 1130 0538 FB75     		strb	r3, [r7, #23]
 1131              	.L65:
1020:common/stm32f10x_flash.c ****     }
1021:common/stm32f10x_flash.c ****     
1022:common/stm32f10x_flash.c ****     if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
 1132              		.loc 1 1022 0
 1133 053a FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1134 053c 042B     		cmp	r3, #4
 1135 053e 0BD1     		bne	.L66
 1136              		.loc 1 1022 0 is_stmt 0 discriminator 1
 1137 0540 FB89     		ldrh	r3, [r7, #14]
 1138 0542 FF2B     		cmp	r3, #255
 1139 0544 08D0     		beq	.L66
1023:common/stm32f10x_flash.c ****     {
1024:common/stm32f10x_flash.c ****       OB->WRP3 = WRP3_Data;
 1140              		.loc 1 1024 0 is_stmt 1
 1141 0546 0F4A     		ldr	r2, .L68+12
 1142 0548 FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccohH8g1.s 			page 39


 1143 054a D381     		strh	r3, [r2, #14]	@ movhi
1025:common/stm32f10x_flash.c ****      
1026:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1027:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(ProgramTimeout);
 1144              		.loc 1 1027 0
 1145 054c 4FF40050 		mov	r0, #8192
 1146 0550 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1147 0554 0346     		mov	r3, r0
 1148 0556 FB75     		strb	r3, [r7, #23]
 1149              	.L66:
1028:common/stm32f10x_flash.c ****     }
1029:common/stm32f10x_flash.c ****           
1030:common/stm32f10x_flash.c ****     if(status != FLASH_TIMEOUT)
 1150              		.loc 1 1030 0
 1151 0558 FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1152 055a 052B     		cmp	r3, #5
 1153 055c 06D0     		beq	.L62
1031:common/stm32f10x_flash.c ****     {
1032:common/stm32f10x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
1033:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTPG_Reset;
 1154              		.loc 1 1033 0
 1155 055e 0649     		ldr	r1, .L68
 1156 0560 054B     		ldr	r3, .L68
 1157 0562 1A69     		ldr	r2, [r3, #16]
 1158 0564 41F6EF73 		movw	r3, #8175
 1159 0568 1340     		ands	r3, r3, r2
 1160 056a 0B61     		str	r3, [r1, #16]
 1161              	.L62:
1034:common/stm32f10x_flash.c ****     }
1035:common/stm32f10x_flash.c ****   } 
1036:common/stm32f10x_flash.c ****   /* Return the write protection operation Status */
1037:common/stm32f10x_flash.c ****   return status;       
 1162              		.loc 1 1037 0
 1163 056c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
1038:common/stm32f10x_flash.c **** }
 1164              		.loc 1 1038 0
 1165 056e 1846     		mov	r0, r3
 1166 0570 1837     		adds	r7, r7, #24
 1167              		.cfi_def_cfa_offset 8
 1168 0572 BD46     		mov	sp, r7
 1169              		.cfi_def_cfa_register 13
 1170              		@ sp needed
 1171 0574 80BD     		pop	{r7, pc}
 1172              	.L69:
 1173 0576 00BF     		.align	2
 1174              	.L68:
 1175 0578 00200240 		.word	1073881088
 1176 057c 23016745 		.word	1164378403
 1177 0580 AB89EFCD 		.word	-839939669
 1178 0584 00F8FF1F 		.word	536868864
 1179              		.cfi_endproc
 1180              	.LFE77:
 1181              		.size	FLASH_EnableWriteProtection, .-FLASH_EnableWriteProtection
 1182              		.align	1
 1183              		.global	FLASH_ReadOutProtection
 1184              		.syntax unified
 1185              		.thumb
ARM GAS  /tmp/ccohH8g1.s 			page 40


 1186              		.thumb_func
 1187              		.fpu softvfp
 1188              		.type	FLASH_ReadOutProtection, %function
 1189              	FLASH_ReadOutProtection:
 1190              	.LFB78:
1039:common/stm32f10x_flash.c **** 
1040:common/stm32f10x_flash.c **** /**
1041:common/stm32f10x_flash.c ****   * @brief  Enables or disables the read out protection.
1042:common/stm32f10x_flash.c ****   * @note   If the user has already programmed the other option bytes before calling 
1043:common/stm32f10x_flash.c ****   *   this function, he must re-program them since this function erases all option bytes.
1044:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1045:common/stm32f10x_flash.c ****   * @param  Newstate: new state of the ReadOut Protection.
1046:common/stm32f10x_flash.c ****   *   This parameter can be: ENABLE or DISABLE.
1047:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
1048:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1049:common/stm32f10x_flash.c ****   */
1050:common/stm32f10x_flash.c **** FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
1051:common/stm32f10x_flash.c **** {
 1191              		.loc 1 1051 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 16
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195 0588 80B5     		push	{r7, lr}
 1196              		.cfi_def_cfa_offset 8
 1197              		.cfi_offset 7, -8
 1198              		.cfi_offset 14, -4
 1199 058a 84B0     		sub	sp, sp, #16
 1200              		.cfi_def_cfa_offset 24
 1201 058c 00AF     		add	r7, sp, #0
 1202              		.cfi_def_cfa_register 7
 1203 058e 0346     		mov	r3, r0
 1204 0590 FB71     		strb	r3, [r7, #7]
1052:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1205              		.loc 1 1052 0
 1206 0592 0423     		movs	r3, #4
 1207 0594 FB73     		strb	r3, [r7, #15]
1053:common/stm32f10x_flash.c ****   /* Check the parameters */
1054:common/stm32f10x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1055:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(EraseTimeout);
 1208              		.loc 1 1055 0
 1209 0596 4FF43020 		mov	r0, #720896
 1210 059a FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1211 059e 0346     		mov	r3, r0
 1212 05a0 FB73     		strb	r3, [r7, #15]
1056:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 1213              		.loc 1 1056 0
 1214 05a2 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1215 05a4 042B     		cmp	r3, #4
 1216 05a6 4CD1     		bne	.L71
1057:common/stm32f10x_flash.c ****   {
1058:common/stm32f10x_flash.c ****     /* Authorizes the small information block programming */
1059:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY1;
 1217              		.loc 1 1059 0
 1218 05a8 284B     		ldr	r3, .L77
 1219 05aa 294A     		ldr	r2, .L77+4
 1220 05ac 9A60     		str	r2, [r3, #8]
1060:common/stm32f10x_flash.c ****     FLASH->OPTKEYR = FLASH_KEY2;
ARM GAS  /tmp/ccohH8g1.s 			page 41


 1221              		.loc 1 1060 0
 1222 05ae 274B     		ldr	r3, .L77
 1223 05b0 284A     		ldr	r2, .L77+8
 1224 05b2 9A60     		str	r2, [r3, #8]
1061:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTER_Set;
 1225              		.loc 1 1061 0
 1226 05b4 254A     		ldr	r2, .L77
 1227 05b6 254B     		ldr	r3, .L77
 1228 05b8 1B69     		ldr	r3, [r3, #16]
 1229 05ba 43F02003 		orr	r3, r3, #32
 1230 05be 1361     		str	r3, [r2, #16]
1062:common/stm32f10x_flash.c ****     FLASH->CR |= CR_STRT_Set;
 1231              		.loc 1 1062 0
 1232 05c0 224A     		ldr	r2, .L77
 1233 05c2 224B     		ldr	r3, .L77
 1234 05c4 1B69     		ldr	r3, [r3, #16]
 1235 05c6 43F04003 		orr	r3, r3, #64
 1236 05ca 1361     		str	r3, [r2, #16]
1063:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
1064:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(EraseTimeout);
 1237              		.loc 1 1064 0
 1238 05cc 4FF43020 		mov	r0, #720896
 1239 05d0 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1240 05d4 0346     		mov	r3, r0
 1241 05d6 FB73     		strb	r3, [r7, #15]
1065:common/stm32f10x_flash.c ****     if(status == FLASH_COMPLETE)
 1242              		.loc 1 1065 0
 1243 05d8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1244 05da 042B     		cmp	r3, #4
 1245 05dc 27D1     		bne	.L72
1066:common/stm32f10x_flash.c ****     {
1067:common/stm32f10x_flash.c ****       /* if the erase operation is completed, disable the OPTER Bit */
1068:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTER_Reset;
 1246              		.loc 1 1068 0
 1247 05de 1B49     		ldr	r1, .L77
 1248 05e0 1A4B     		ldr	r3, .L77
 1249 05e2 1A69     		ldr	r2, [r3, #16]
 1250 05e4 41F6DF73 		movw	r3, #8159
 1251 05e8 1340     		ands	r3, r3, r2
 1252 05ea 0B61     		str	r3, [r1, #16]
1069:common/stm32f10x_flash.c ****       /* Enable the Option Bytes Programming operation */
1070:common/stm32f10x_flash.c ****       FLASH->CR |= CR_OPTPG_Set; 
 1253              		.loc 1 1070 0
 1254 05ec 174A     		ldr	r2, .L77
 1255 05ee 174B     		ldr	r3, .L77
 1256 05f0 1B69     		ldr	r3, [r3, #16]
 1257 05f2 43F01003 		orr	r3, r3, #16
 1258 05f6 1361     		str	r3, [r2, #16]
1071:common/stm32f10x_flash.c ****       if(NewState != DISABLE)
 1259              		.loc 1 1071 0
 1260 05f8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1261 05fa 002B     		cmp	r3, #0
 1262 05fc 03D0     		beq	.L73
1072:common/stm32f10x_flash.c ****       {
1073:common/stm32f10x_flash.c ****         OB->RDP = 0x00;
 1263              		.loc 1 1073 0
 1264 05fe 164B     		ldr	r3, .L77+12
ARM GAS  /tmp/ccohH8g1.s 			page 42


 1265 0600 0022     		movs	r2, #0
 1266 0602 1A80     		strh	r2, [r3]	@ movhi
 1267 0604 02E0     		b	.L74
 1268              	.L73:
1074:common/stm32f10x_flash.c ****       }
1075:common/stm32f10x_flash.c ****       else
1076:common/stm32f10x_flash.c ****       {
1077:common/stm32f10x_flash.c ****         OB->RDP = RDP_Key;  
 1269              		.loc 1 1077 0
 1270 0606 144B     		ldr	r3, .L77+12
 1271 0608 A522     		movs	r2, #165
 1272 060a 1A80     		strh	r2, [r3]	@ movhi
 1273              	.L74:
1078:common/stm32f10x_flash.c ****       }
1079:common/stm32f10x_flash.c ****       /* Wait for last operation to be completed */
1080:common/stm32f10x_flash.c ****       status = FLASH_WaitForLastOperation(EraseTimeout); 
 1274              		.loc 1 1080 0
 1275 060c 4FF43020 		mov	r0, #720896
 1276 0610 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1277 0614 0346     		mov	r3, r0
 1278 0616 FB73     		strb	r3, [r7, #15]
1081:common/stm32f10x_flash.c ****     
1082:common/stm32f10x_flash.c ****       if(status != FLASH_TIMEOUT)
 1279              		.loc 1 1082 0
 1280 0618 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1281 061a 052B     		cmp	r3, #5
 1282 061c 11D0     		beq	.L71
1083:common/stm32f10x_flash.c ****       {
1084:common/stm32f10x_flash.c ****         /* if the program operation is completed, disable the OPTPG Bit */
1085:common/stm32f10x_flash.c ****         FLASH->CR &= CR_OPTPG_Reset;
 1283              		.loc 1 1085 0
 1284 061e 0B49     		ldr	r1, .L77
 1285 0620 0A4B     		ldr	r3, .L77
 1286 0622 1A69     		ldr	r2, [r3, #16]
 1287 0624 41F6EF73 		movw	r3, #8175
 1288 0628 1340     		ands	r3, r3, r2
 1289 062a 0B61     		str	r3, [r1, #16]
 1290 062c 09E0     		b	.L71
 1291              	.L72:
1086:common/stm32f10x_flash.c ****       }
1087:common/stm32f10x_flash.c ****     }
1088:common/stm32f10x_flash.c ****     else 
1089:common/stm32f10x_flash.c ****     {
1090:common/stm32f10x_flash.c ****       if(status != FLASH_TIMEOUT)
 1292              		.loc 1 1090 0
 1293 062e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1294 0630 052B     		cmp	r3, #5
 1295 0632 06D0     		beq	.L71
1091:common/stm32f10x_flash.c ****       {
1092:common/stm32f10x_flash.c ****         /* Disable the OPTER Bit */
1093:common/stm32f10x_flash.c ****         FLASH->CR &= CR_OPTER_Reset;
 1296              		.loc 1 1093 0
 1297 0634 0549     		ldr	r1, .L77
 1298 0636 054B     		ldr	r3, .L77
 1299 0638 1A69     		ldr	r2, [r3, #16]
 1300 063a 41F6DF73 		movw	r3, #8159
 1301 063e 1340     		ands	r3, r3, r2
ARM GAS  /tmp/ccohH8g1.s 			page 43


 1302 0640 0B61     		str	r3, [r1, #16]
 1303              	.L71:
1094:common/stm32f10x_flash.c ****       }
1095:common/stm32f10x_flash.c ****     }
1096:common/stm32f10x_flash.c ****   }
1097:common/stm32f10x_flash.c ****   /* Return the protection operation Status */
1098:common/stm32f10x_flash.c ****   return status;       
 1304              		.loc 1 1098 0
 1305 0642 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1099:common/stm32f10x_flash.c **** }
 1306              		.loc 1 1099 0
 1307 0644 1846     		mov	r0, r3
 1308 0646 1037     		adds	r7, r7, #16
 1309              		.cfi_def_cfa_offset 8
 1310 0648 BD46     		mov	sp, r7
 1311              		.cfi_def_cfa_register 13
 1312              		@ sp needed
 1313 064a 80BD     		pop	{r7, pc}
 1314              	.L78:
 1315              		.align	2
 1316              	.L77:
 1317 064c 00200240 		.word	1073881088
 1318 0650 23016745 		.word	1164378403
 1319 0654 AB89EFCD 		.word	-839939669
 1320 0658 00F8FF1F 		.word	536868864
 1321              		.cfi_endproc
 1322              	.LFE78:
 1323              		.size	FLASH_ReadOutProtection, .-FLASH_ReadOutProtection
 1324              		.align	1
 1325              		.global	FLASH_UserOptionByteConfig
 1326              		.syntax unified
 1327              		.thumb
 1328              		.thumb_func
 1329              		.fpu softvfp
 1330              		.type	FLASH_UserOptionByteConfig, %function
 1331              	FLASH_UserOptionByteConfig:
 1332              	.LFB79:
1100:common/stm32f10x_flash.c **** 
1101:common/stm32f10x_flash.c **** /**
1102:common/stm32f10x_flash.c ****   * @brief  Programs the FLASH User Option Byte: IWDG_SW / RST_STOP / RST_STDBY.
1103:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1104:common/stm32f10x_flash.c ****   * @param  OB_IWDG: Selects the IWDG mode
1105:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1106:common/stm32f10x_flash.c ****   *     @arg OB_IWDG_SW: Software IWDG selected
1107:common/stm32f10x_flash.c ****   *     @arg OB_IWDG_HW: Hardware IWDG selected
1108:common/stm32f10x_flash.c ****   * @param  OB_STOP: Reset event when entering STOP mode.
1109:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1110:common/stm32f10x_flash.c ****   *     @arg OB_STOP_NoRST: No reset generated when entering in STOP
1111:common/stm32f10x_flash.c ****   *     @arg OB_STOP_RST: Reset generated when entering in STOP
1112:common/stm32f10x_flash.c ****   * @param  OB_STDBY: Reset event when entering Standby mode.
1113:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1114:common/stm32f10x_flash.c ****   *     @arg OB_STDBY_NoRST: No reset generated when entering in STANDBY
1115:common/stm32f10x_flash.c ****   *     @arg OB_STDBY_RST: Reset generated when entering in STANDBY
1116:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
1117:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1118:common/stm32f10x_flash.c ****   */
1119:common/stm32f10x_flash.c **** FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
ARM GAS  /tmp/ccohH8g1.s 			page 44


1120:common/stm32f10x_flash.c **** {
 1333              		.loc 1 1120 0
 1334              		.cfi_startproc
 1335              		@ args = 0, pretend = 0, frame = 16
 1336              		@ frame_needed = 1, uses_anonymous_args = 0
 1337 065c 80B5     		push	{r7, lr}
 1338              		.cfi_def_cfa_offset 8
 1339              		.cfi_offset 7, -8
 1340              		.cfi_offset 14, -4
 1341 065e 84B0     		sub	sp, sp, #16
 1342              		.cfi_def_cfa_offset 24
 1343 0660 00AF     		add	r7, sp, #0
 1344              		.cfi_def_cfa_register 7
 1345 0662 0346     		mov	r3, r0
 1346 0664 FB80     		strh	r3, [r7, #6]	@ movhi
 1347 0666 0B46     		mov	r3, r1	@ movhi
 1348 0668 BB80     		strh	r3, [r7, #4]	@ movhi
 1349 066a 1346     		mov	r3, r2	@ movhi
 1350 066c 7B80     		strh	r3, [r7, #2]	@ movhi
1121:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
 1351              		.loc 1 1121 0
 1352 066e 0423     		movs	r3, #4
 1353 0670 FB73     		strb	r3, [r7, #15]
1122:common/stm32f10x_flash.c **** 
1123:common/stm32f10x_flash.c ****   /* Check the parameters */
1124:common/stm32f10x_flash.c ****   assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
1125:common/stm32f10x_flash.c ****   assert_param(IS_OB_STOP_SOURCE(OB_STOP));
1126:common/stm32f10x_flash.c ****   assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
1127:common/stm32f10x_flash.c **** 
1128:common/stm32f10x_flash.c ****   /* Authorize the small information block programming */
1129:common/stm32f10x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY1;
 1354              		.loc 1 1129 0
 1355 0672 1B4B     		ldr	r3, .L82
 1356 0674 1B4A     		ldr	r2, .L82+4
 1357 0676 9A60     		str	r2, [r3, #8]
1130:common/stm32f10x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY2;
 1358              		.loc 1 1130 0
 1359 0678 194B     		ldr	r3, .L82
 1360 067a 1B4A     		ldr	r2, .L82+8
 1361 067c 9A60     		str	r2, [r3, #8]
1131:common/stm32f10x_flash.c ****   
1132:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
1133:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
 1362              		.loc 1 1133 0
 1363 067e 4FF40050 		mov	r0, #8192
 1364 0682 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1365 0686 0346     		mov	r3, r0
 1366 0688 FB73     		strb	r3, [r7, #15]
1134:common/stm32f10x_flash.c ****   
1135:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
 1367              		.loc 1 1135 0
 1368 068a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1369 068c 042B     		cmp	r3, #4
 1370 068e 21D1     		bne	.L80
1136:common/stm32f10x_flash.c ****   {  
1137:common/stm32f10x_flash.c ****     /* Enable the Option Bytes Programming operation */
1138:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTPG_Set; 
ARM GAS  /tmp/ccohH8g1.s 			page 45


 1371              		.loc 1 1138 0
 1372 0690 134A     		ldr	r2, .L82
 1373 0692 134B     		ldr	r3, .L82
 1374 0694 1B69     		ldr	r3, [r3, #16]
 1375 0696 43F01003 		orr	r3, r3, #16
 1376 069a 1361     		str	r3, [r2, #16]
1139:common/stm32f10x_flash.c ****            
1140:common/stm32f10x_flash.c ****     OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
 1377              		.loc 1 1140 0
 1378 069c 1349     		ldr	r1, .L82+12
 1379 069e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1380 06a0 BB88     		ldrh	r3, [r7, #4]	@ movhi
 1381 06a2 1343     		orrs	r3, r3, r2
 1382 06a4 9AB2     		uxth	r2, r3
 1383 06a6 FB88     		ldrh	r3, [r7, #6]	@ movhi
 1384 06a8 1343     		orrs	r3, r3, r2
 1385 06aa 9BB2     		uxth	r3, r3
 1386 06ac 43F0F803 		orr	r3, r3, #248
 1387 06b0 9BB2     		uxth	r3, r3
 1388 06b2 4B80     		strh	r3, [r1, #2]	@ movhi
1141:common/stm32f10x_flash.c ****   
1142:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
1143:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
 1389              		.loc 1 1143 0
 1390 06b4 4FF40050 		mov	r0, #8192
 1391 06b8 FFF7FEFF 		bl	FLASH_WaitForLastOperation
 1392 06bc 0346     		mov	r3, r0
 1393 06be FB73     		strb	r3, [r7, #15]
1144:common/stm32f10x_flash.c ****     if(status != FLASH_TIMEOUT)
 1394              		.loc 1 1144 0
 1395 06c0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1396 06c2 052B     		cmp	r3, #5
 1397 06c4 06D0     		beq	.L80
1145:common/stm32f10x_flash.c ****     {
1146:common/stm32f10x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
1147:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTPG_Reset;
 1398              		.loc 1 1147 0
 1399 06c6 0649     		ldr	r1, .L82
 1400 06c8 054B     		ldr	r3, .L82
 1401 06ca 1A69     		ldr	r2, [r3, #16]
 1402 06cc 41F6EF73 		movw	r3, #8175
 1403 06d0 1340     		ands	r3, r3, r2
 1404 06d2 0B61     		str	r3, [r1, #16]
 1405              	.L80:
1148:common/stm32f10x_flash.c ****     }
1149:common/stm32f10x_flash.c ****   }    
1150:common/stm32f10x_flash.c ****   /* Return the Option Byte program Status */
1151:common/stm32f10x_flash.c ****   return status;
 1406              		.loc 1 1151 0
 1407 06d4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1152:common/stm32f10x_flash.c **** }
 1408              		.loc 1 1152 0
 1409 06d6 1846     		mov	r0, r3
 1410 06d8 1037     		adds	r7, r7, #16
 1411              		.cfi_def_cfa_offset 8
 1412 06da BD46     		mov	sp, r7
 1413              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccohH8g1.s 			page 46


 1414              		@ sp needed
 1415 06dc 80BD     		pop	{r7, pc}
 1416              	.L83:
 1417 06de 00BF     		.align	2
 1418              	.L82:
 1419 06e0 00200240 		.word	1073881088
 1420 06e4 23016745 		.word	1164378403
 1421 06e8 AB89EFCD 		.word	-839939669
 1422 06ec 00F8FF1F 		.word	536868864
 1423              		.cfi_endproc
 1424              	.LFE79:
 1425              		.size	FLASH_UserOptionByteConfig, .-FLASH_UserOptionByteConfig
 1426              		.align	1
 1427              		.global	FLASH_GetUserOptionByte
 1428              		.syntax unified
 1429              		.thumb
 1430              		.thumb_func
 1431              		.fpu softvfp
 1432              		.type	FLASH_GetUserOptionByte, %function
 1433              	FLASH_GetUserOptionByte:
 1434              	.LFB80:
1153:common/stm32f10x_flash.c **** 
1154:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1155:common/stm32f10x_flash.c **** /**
1156:common/stm32f10x_flash.c ****   * @brief  Configures to boot from Bank1 or Bank2.  
1157:common/stm32f10x_flash.c ****   * @note   This function can be used only for STM32F10x_XL density devices.
1158:common/stm32f10x_flash.c ****   * @param  FLASH_BOOT: select the FLASH Bank to boot from.
1159:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1160:common/stm32f10x_flash.c ****   *     @arg FLASH_BOOT_Bank1: At startup, if boot pins are set in boot from user Flash
1161:common/stm32f10x_flash.c ****   *        position and this parameter is selected the device will boot from Bank1(Default).
1162:common/stm32f10x_flash.c ****   *     @arg FLASH_BOOT_Bank2: At startup, if boot pins are set in boot from user Flash
1163:common/stm32f10x_flash.c ****   *        position and this parameter is selected the device will boot from Bank2 or Bank1,
1164:common/stm32f10x_flash.c ****   *        depending on the activation of the bank. The active banks are checked in
1165:common/stm32f10x_flash.c ****   *        the following order: Bank2, followed by Bank1.
1166:common/stm32f10x_flash.c ****   *        The active bank is recognized by the value programmed at the base address
1167:common/stm32f10x_flash.c ****   *        of the respective bank (corresponding to the initial stack pointer value
1168:common/stm32f10x_flash.c ****   *        in the interrupt vector table).
1169:common/stm32f10x_flash.c ****   *        For more information, please refer to AN2606 from www.st.com.    
1170:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG, 
1171:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1172:common/stm32f10x_flash.c ****   */
1173:common/stm32f10x_flash.c **** FLASH_Status FLASH_BootConfig(uint16_t FLASH_BOOT)
1174:common/stm32f10x_flash.c **** { 
1175:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE; 
1176:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_BOOT(FLASH_BOOT));
1177:common/stm32f10x_flash.c ****   /* Authorize the small information block programming */
1178:common/stm32f10x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY1;
1179:common/stm32f10x_flash.c ****   FLASH->OPTKEYR = FLASH_KEY2;
1180:common/stm32f10x_flash.c ****   
1181:common/stm32f10x_flash.c ****   /* Wait for last operation to be completed */
1182:common/stm32f10x_flash.c ****   status = FLASH_WaitForLastOperation(ProgramTimeout);
1183:common/stm32f10x_flash.c ****   
1184:common/stm32f10x_flash.c ****   if(status == FLASH_COMPLETE)
1185:common/stm32f10x_flash.c ****   {  
1186:common/stm32f10x_flash.c ****     /* Enable the Option Bytes Programming operation */
1187:common/stm32f10x_flash.c ****     FLASH->CR |= CR_OPTPG_Set; 
1188:common/stm32f10x_flash.c **** 
ARM GAS  /tmp/ccohH8g1.s 			page 47


1189:common/stm32f10x_flash.c ****     if(FLASH_BOOT == FLASH_BOOT_Bank1)
1190:common/stm32f10x_flash.c ****     {
1191:common/stm32f10x_flash.c ****       OB->USER |= OB_USER_BFB2;
1192:common/stm32f10x_flash.c ****     }
1193:common/stm32f10x_flash.c ****     else
1194:common/stm32f10x_flash.c ****     {
1195:common/stm32f10x_flash.c ****       OB->USER &= (uint16_t)(~(uint16_t)(OB_USER_BFB2));
1196:common/stm32f10x_flash.c ****     }
1197:common/stm32f10x_flash.c ****     /* Wait for last operation to be completed */
1198:common/stm32f10x_flash.c ****     status = FLASH_WaitForLastOperation(ProgramTimeout);
1199:common/stm32f10x_flash.c ****     if(status != FLASH_TIMEOUT)
1200:common/stm32f10x_flash.c ****     {
1201:common/stm32f10x_flash.c ****       /* if the program operation is completed, disable the OPTPG Bit */
1202:common/stm32f10x_flash.c ****       FLASH->CR &= CR_OPTPG_Reset;
1203:common/stm32f10x_flash.c ****     }
1204:common/stm32f10x_flash.c ****   }    
1205:common/stm32f10x_flash.c ****   /* Return the Option Byte program Status */
1206:common/stm32f10x_flash.c ****   return status;
1207:common/stm32f10x_flash.c **** }
1208:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1209:common/stm32f10x_flash.c **** 
1210:common/stm32f10x_flash.c **** /**
1211:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH User Option Bytes values.
1212:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1213:common/stm32f10x_flash.c ****   * @param  None
1214:common/stm32f10x_flash.c ****   * @retval The FLASH User Option Bytes values:IWDG_SW(Bit0), RST_STOP(Bit1)
1215:common/stm32f10x_flash.c ****   *         and RST_STDBY(Bit2).
1216:common/stm32f10x_flash.c ****   */
1217:common/stm32f10x_flash.c **** uint32_t FLASH_GetUserOptionByte(void)
1218:common/stm32f10x_flash.c **** {
 1435              		.loc 1 1218 0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 0
 1438              		@ frame_needed = 1, uses_anonymous_args = 0
 1439              		@ link register save eliminated.
 1440 06f0 80B4     		push	{r7}
 1441              		.cfi_def_cfa_offset 4
 1442              		.cfi_offset 7, -4
 1443 06f2 00AF     		add	r7, sp, #0
 1444              		.cfi_def_cfa_register 7
1219:common/stm32f10x_flash.c ****   /* Return the User Option Byte */
1220:common/stm32f10x_flash.c ****   return (uint32_t)(FLASH->OBR >> 2);
 1445              		.loc 1 1220 0
 1446 06f4 034B     		ldr	r3, .L86
 1447 06f6 DB69     		ldr	r3, [r3, #28]
 1448 06f8 9B08     		lsrs	r3, r3, #2
1221:common/stm32f10x_flash.c **** }
 1449              		.loc 1 1221 0
 1450 06fa 1846     		mov	r0, r3
 1451 06fc BD46     		mov	sp, r7
 1452              		.cfi_def_cfa_register 13
 1453              		@ sp needed
 1454 06fe 80BC     		pop	{r7}
 1455              		.cfi_restore 7
 1456              		.cfi_def_cfa_offset 0
 1457 0700 7047     		bx	lr
 1458              	.L87:
ARM GAS  /tmp/ccohH8g1.s 			page 48


 1459 0702 00BF     		.align	2
 1460              	.L86:
 1461 0704 00200240 		.word	1073881088
 1462              		.cfi_endproc
 1463              	.LFE80:
 1464              		.size	FLASH_GetUserOptionByte, .-FLASH_GetUserOptionByte
 1465              		.align	1
 1466              		.global	FLASH_GetWriteProtectionOptionByte
 1467              		.syntax unified
 1468              		.thumb
 1469              		.thumb_func
 1470              		.fpu softvfp
 1471              		.type	FLASH_GetWriteProtectionOptionByte, %function
 1472              	FLASH_GetWriteProtectionOptionByte:
 1473              	.LFB81:
1222:common/stm32f10x_flash.c **** 
1223:common/stm32f10x_flash.c **** /**
1224:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH Write Protection Option Bytes Register value.
1225:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1226:common/stm32f10x_flash.c ****   * @param  None
1227:common/stm32f10x_flash.c ****   * @retval The FLASH Write Protection  Option Bytes Register value
1228:common/stm32f10x_flash.c ****   */
1229:common/stm32f10x_flash.c **** uint32_t FLASH_GetWriteProtectionOptionByte(void)
1230:common/stm32f10x_flash.c **** {
 1474              		.loc 1 1230 0
 1475              		.cfi_startproc
 1476              		@ args = 0, pretend = 0, frame = 0
 1477              		@ frame_needed = 1, uses_anonymous_args = 0
 1478              		@ link register save eliminated.
 1479 0708 80B4     		push	{r7}
 1480              		.cfi_def_cfa_offset 4
 1481              		.cfi_offset 7, -4
 1482 070a 00AF     		add	r7, sp, #0
 1483              		.cfi_def_cfa_register 7
1231:common/stm32f10x_flash.c ****   /* Return the Flash write protection Register value */
1232:common/stm32f10x_flash.c ****   return (uint32_t)(FLASH->WRPR);
 1484              		.loc 1 1232 0
 1485 070c 024B     		ldr	r3, .L90
 1486 070e 1B6A     		ldr	r3, [r3, #32]
1233:common/stm32f10x_flash.c **** }
 1487              		.loc 1 1233 0
 1488 0710 1846     		mov	r0, r3
 1489 0712 BD46     		mov	sp, r7
 1490              		.cfi_def_cfa_register 13
 1491              		@ sp needed
 1492 0714 80BC     		pop	{r7}
 1493              		.cfi_restore 7
 1494              		.cfi_def_cfa_offset 0
 1495 0716 7047     		bx	lr
 1496              	.L91:
 1497              		.align	2
 1498              	.L90:
 1499 0718 00200240 		.word	1073881088
 1500              		.cfi_endproc
 1501              	.LFE81:
 1502              		.size	FLASH_GetWriteProtectionOptionByte, .-FLASH_GetWriteProtectionOptionByte
 1503              		.align	1
ARM GAS  /tmp/ccohH8g1.s 			page 49


 1504              		.global	FLASH_GetReadOutProtectionStatus
 1505              		.syntax unified
 1506              		.thumb
 1507              		.thumb_func
 1508              		.fpu softvfp
 1509              		.type	FLASH_GetReadOutProtectionStatus, %function
 1510              	FLASH_GetReadOutProtectionStatus:
 1511              	.LFB82:
1234:common/stm32f10x_flash.c **** 
1235:common/stm32f10x_flash.c **** /**
1236:common/stm32f10x_flash.c ****   * @brief  Checks whether the FLASH Read Out Protection Status is set or not.
1237:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1238:common/stm32f10x_flash.c ****   * @param  None
1239:common/stm32f10x_flash.c ****   * @retval FLASH ReadOut Protection Status(SET or RESET)
1240:common/stm32f10x_flash.c ****   */
1241:common/stm32f10x_flash.c **** FlagStatus FLASH_GetReadOutProtectionStatus(void)
1242:common/stm32f10x_flash.c **** {
 1512              		.loc 1 1242 0
 1513              		.cfi_startproc
 1514              		@ args = 0, pretend = 0, frame = 8
 1515              		@ frame_needed = 1, uses_anonymous_args = 0
 1516              		@ link register save eliminated.
 1517 071c 80B4     		push	{r7}
 1518              		.cfi_def_cfa_offset 4
 1519              		.cfi_offset 7, -4
 1520 071e 83B0     		sub	sp, sp, #12
 1521              		.cfi_def_cfa_offset 16
 1522 0720 00AF     		add	r7, sp, #0
 1523              		.cfi_def_cfa_register 7
1243:common/stm32f10x_flash.c ****   FlagStatus readoutstatus = RESET;
 1524              		.loc 1 1243 0
 1525 0722 0023     		movs	r3, #0
 1526 0724 FB71     		strb	r3, [r7, #7]
1244:common/stm32f10x_flash.c ****   if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
 1527              		.loc 1 1244 0
 1528 0726 084B     		ldr	r3, .L96
 1529 0728 DB69     		ldr	r3, [r3, #28]
 1530 072a 03F00203 		and	r3, r3, #2
 1531 072e 002B     		cmp	r3, #0
 1532 0730 02D0     		beq	.L93
1245:common/stm32f10x_flash.c ****   {
1246:common/stm32f10x_flash.c ****     readoutstatus = SET;
 1533              		.loc 1 1246 0
 1534 0732 0123     		movs	r3, #1
 1535 0734 FB71     		strb	r3, [r7, #7]
 1536 0736 01E0     		b	.L94
 1537              	.L93:
1247:common/stm32f10x_flash.c ****   }
1248:common/stm32f10x_flash.c ****   else
1249:common/stm32f10x_flash.c ****   {
1250:common/stm32f10x_flash.c ****     readoutstatus = RESET;
 1538              		.loc 1 1250 0
 1539 0738 0023     		movs	r3, #0
 1540 073a FB71     		strb	r3, [r7, #7]
 1541              	.L94:
1251:common/stm32f10x_flash.c ****   }
1252:common/stm32f10x_flash.c ****   return readoutstatus;
ARM GAS  /tmp/ccohH8g1.s 			page 50


 1542              		.loc 1 1252 0
 1543 073c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1253:common/stm32f10x_flash.c **** }
 1544              		.loc 1 1253 0
 1545 073e 1846     		mov	r0, r3
 1546 0740 0C37     		adds	r7, r7, #12
 1547              		.cfi_def_cfa_offset 4
 1548 0742 BD46     		mov	sp, r7
 1549              		.cfi_def_cfa_register 13
 1550              		@ sp needed
 1551 0744 80BC     		pop	{r7}
 1552              		.cfi_restore 7
 1553              		.cfi_def_cfa_offset 0
 1554 0746 7047     		bx	lr
 1555              	.L97:
 1556              		.align	2
 1557              	.L96:
 1558 0748 00200240 		.word	1073881088
 1559              		.cfi_endproc
 1560              	.LFE82:
 1561              		.size	FLASH_GetReadOutProtectionStatus, .-FLASH_GetReadOutProtectionStatus
 1562              		.align	1
 1563              		.global	FLASH_GetPrefetchBufferStatus
 1564              		.syntax unified
 1565              		.thumb
 1566              		.thumb_func
 1567              		.fpu softvfp
 1568              		.type	FLASH_GetPrefetchBufferStatus, %function
 1569              	FLASH_GetPrefetchBufferStatus:
 1570              	.LFB83:
1254:common/stm32f10x_flash.c **** 
1255:common/stm32f10x_flash.c **** /**
1256:common/stm32f10x_flash.c ****   * @brief  Checks whether the FLASH Prefetch Buffer status is set or not.
1257:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1258:common/stm32f10x_flash.c ****   * @param  None
1259:common/stm32f10x_flash.c ****   * @retval FLASH Prefetch Buffer Status (SET or RESET).
1260:common/stm32f10x_flash.c ****   */
1261:common/stm32f10x_flash.c **** FlagStatus FLASH_GetPrefetchBufferStatus(void)
1262:common/stm32f10x_flash.c **** {
 1571              		.loc 1 1262 0
 1572              		.cfi_startproc
 1573              		@ args = 0, pretend = 0, frame = 8
 1574              		@ frame_needed = 1, uses_anonymous_args = 0
 1575              		@ link register save eliminated.
 1576 074c 80B4     		push	{r7}
 1577              		.cfi_def_cfa_offset 4
 1578              		.cfi_offset 7, -4
 1579 074e 83B0     		sub	sp, sp, #12
 1580              		.cfi_def_cfa_offset 16
 1581 0750 00AF     		add	r7, sp, #0
 1582              		.cfi_def_cfa_register 7
1263:common/stm32f10x_flash.c ****   FlagStatus bitstatus = RESET;
 1583              		.loc 1 1263 0
 1584 0752 0023     		movs	r3, #0
 1585 0754 FB71     		strb	r3, [r7, #7]
1264:common/stm32f10x_flash.c ****   
1265:common/stm32f10x_flash.c ****   if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
ARM GAS  /tmp/ccohH8g1.s 			page 51


 1586              		.loc 1 1265 0
 1587 0756 084B     		ldr	r3, .L102
 1588 0758 1B68     		ldr	r3, [r3]
 1589 075a 03F02003 		and	r3, r3, #32
 1590 075e 002B     		cmp	r3, #0
 1591 0760 02D0     		beq	.L99
1266:common/stm32f10x_flash.c ****   {
1267:common/stm32f10x_flash.c ****     bitstatus = SET;
 1592              		.loc 1 1267 0
 1593 0762 0123     		movs	r3, #1
 1594 0764 FB71     		strb	r3, [r7, #7]
 1595 0766 01E0     		b	.L100
 1596              	.L99:
1268:common/stm32f10x_flash.c ****   }
1269:common/stm32f10x_flash.c ****   else
1270:common/stm32f10x_flash.c ****   {
1271:common/stm32f10x_flash.c ****     bitstatus = RESET;
 1597              		.loc 1 1271 0
 1598 0768 0023     		movs	r3, #0
 1599 076a FB71     		strb	r3, [r7, #7]
 1600              	.L100:
1272:common/stm32f10x_flash.c ****   }
1273:common/stm32f10x_flash.c ****   /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
1274:common/stm32f10x_flash.c ****   return bitstatus; 
 1601              		.loc 1 1274 0
 1602 076c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1275:common/stm32f10x_flash.c **** }
 1603              		.loc 1 1275 0
 1604 076e 1846     		mov	r0, r3
 1605 0770 0C37     		adds	r7, r7, #12
 1606              		.cfi_def_cfa_offset 4
 1607 0772 BD46     		mov	sp, r7
 1608              		.cfi_def_cfa_register 13
 1609              		@ sp needed
 1610 0774 80BC     		pop	{r7}
 1611              		.cfi_restore 7
 1612              		.cfi_def_cfa_offset 0
 1613 0776 7047     		bx	lr
 1614              	.L103:
 1615              		.align	2
 1616              	.L102:
 1617 0778 00200240 		.word	1073881088
 1618              		.cfi_endproc
 1619              	.LFE83:
 1620              		.size	FLASH_GetPrefetchBufferStatus, .-FLASH_GetPrefetchBufferStatus
 1621              		.align	1
 1622              		.global	FLASH_ITConfig
 1623              		.syntax unified
 1624              		.thumb
 1625              		.thumb_func
 1626              		.fpu softvfp
 1627              		.type	FLASH_ITConfig, %function
 1628              	FLASH_ITConfig:
 1629              	.LFB84:
1276:common/stm32f10x_flash.c **** 
1277:common/stm32f10x_flash.c **** /**
1278:common/stm32f10x_flash.c ****   * @brief  Enables or disables the specified FLASH interrupts.
ARM GAS  /tmp/ccohH8g1.s 			page 52


1279:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1280:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices, enables or disables the specified FLASH interrupts
1281:common/stm32f10x_flash.c ****               for Bank1 and Bank2.
1282:common/stm32f10x_flash.c ****   *         - For other devices it enables or disables the specified FLASH interrupts for Bank1.
1283:common/stm32f10x_flash.c ****   * @param  FLASH_IT: specifies the FLASH interrupt sources to be enabled or disabled.
1284:common/stm32f10x_flash.c ****   *   This parameter can be any combination of the following values:
1285:common/stm32f10x_flash.c ****   *     @arg FLASH_IT_ERROR: FLASH Error Interrupt
1286:common/stm32f10x_flash.c ****   *     @arg FLASH_IT_EOP: FLASH end of operation Interrupt
1287:common/stm32f10x_flash.c ****   * @param  NewState: new state of the specified Flash interrupts.
1288:common/stm32f10x_flash.c ****   *   This parameter can be: ENABLE or DISABLE.      
1289:common/stm32f10x_flash.c ****   * @retval None 
1290:common/stm32f10x_flash.c ****   */
1291:common/stm32f10x_flash.c **** void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
1292:common/stm32f10x_flash.c **** {
 1630              		.loc 1 1292 0
 1631              		.cfi_startproc
 1632              		@ args = 0, pretend = 0, frame = 8
 1633              		@ frame_needed = 1, uses_anonymous_args = 0
 1634              		@ link register save eliminated.
 1635 077c 80B4     		push	{r7}
 1636              		.cfi_def_cfa_offset 4
 1637              		.cfi_offset 7, -4
 1638 077e 83B0     		sub	sp, sp, #12
 1639              		.cfi_def_cfa_offset 16
 1640 0780 00AF     		add	r7, sp, #0
 1641              		.cfi_def_cfa_register 7
 1642 0782 7860     		str	r0, [r7, #4]
 1643 0784 0B46     		mov	r3, r1
 1644 0786 FB70     		strb	r3, [r7, #3]
1293:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1294:common/stm32f10x_flash.c ****   /* Check the parameters */
1295:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1296:common/stm32f10x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1297:common/stm32f10x_flash.c **** 
1298:common/stm32f10x_flash.c ****   if((FLASH_IT & 0x80000000) != 0x0)
1299:common/stm32f10x_flash.c ****   {
1300:common/stm32f10x_flash.c ****     if(NewState != DISABLE)
1301:common/stm32f10x_flash.c ****     {
1302:common/stm32f10x_flash.c ****       /* Enable the interrupt sources */
1303:common/stm32f10x_flash.c ****       FLASH->CR2 |= (FLASH_IT & 0x7FFFFFFF);
1304:common/stm32f10x_flash.c ****     }
1305:common/stm32f10x_flash.c ****     else
1306:common/stm32f10x_flash.c ****     {
1307:common/stm32f10x_flash.c ****       /* Disable the interrupt sources */
1308:common/stm32f10x_flash.c ****       FLASH->CR2 &= ~(uint32_t)(FLASH_IT & 0x7FFFFFFF);
1309:common/stm32f10x_flash.c ****     }
1310:common/stm32f10x_flash.c ****   }
1311:common/stm32f10x_flash.c ****   else
1312:common/stm32f10x_flash.c ****   {
1313:common/stm32f10x_flash.c ****     if(NewState != DISABLE)
1314:common/stm32f10x_flash.c ****     {
1315:common/stm32f10x_flash.c ****       /* Enable the interrupt sources */
1316:common/stm32f10x_flash.c ****       FLASH->CR |= FLASH_IT;
1317:common/stm32f10x_flash.c ****     }
1318:common/stm32f10x_flash.c ****     else
1319:common/stm32f10x_flash.c ****     {
1320:common/stm32f10x_flash.c ****       /* Disable the interrupt sources */
ARM GAS  /tmp/ccohH8g1.s 			page 53


1321:common/stm32f10x_flash.c ****       FLASH->CR &= ~(uint32_t)FLASH_IT;
1322:common/stm32f10x_flash.c ****     }
1323:common/stm32f10x_flash.c ****   }
1324:common/stm32f10x_flash.c **** #else
1325:common/stm32f10x_flash.c ****   /* Check the parameters */
1326:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_IT(FLASH_IT)); 
1327:common/stm32f10x_flash.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1328:common/stm32f10x_flash.c **** 
1329:common/stm32f10x_flash.c ****   if(NewState != DISABLE)
 1645              		.loc 1 1329 0
 1646 0788 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1647 078a 002B     		cmp	r3, #0
 1648 078c 06D0     		beq	.L105
1330:common/stm32f10x_flash.c ****   {
1331:common/stm32f10x_flash.c ****     /* Enable the interrupt sources */
1332:common/stm32f10x_flash.c ****     FLASH->CR |= FLASH_IT;
 1649              		.loc 1 1332 0
 1650 078e 0949     		ldr	r1, .L108
 1651 0790 084B     		ldr	r3, .L108
 1652 0792 1A69     		ldr	r2, [r3, #16]
 1653 0794 7B68     		ldr	r3, [r7, #4]
 1654 0796 1343     		orrs	r3, r3, r2
 1655 0798 0B61     		str	r3, [r1, #16]
1333:common/stm32f10x_flash.c ****   }
1334:common/stm32f10x_flash.c ****   else
1335:common/stm32f10x_flash.c ****   {
1336:common/stm32f10x_flash.c ****     /* Disable the interrupt sources */
1337:common/stm32f10x_flash.c ****     FLASH->CR &= ~(uint32_t)FLASH_IT;
1338:common/stm32f10x_flash.c ****   }
1339:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1340:common/stm32f10x_flash.c **** }
 1656              		.loc 1 1340 0
 1657 079a 06E0     		b	.L107
 1658              	.L105:
1337:common/stm32f10x_flash.c ****   }
 1659              		.loc 1 1337 0
 1660 079c 0549     		ldr	r1, .L108
 1661 079e 054B     		ldr	r3, .L108
 1662 07a0 1A69     		ldr	r2, [r3, #16]
 1663 07a2 7B68     		ldr	r3, [r7, #4]
 1664 07a4 DB43     		mvns	r3, r3
 1665 07a6 1340     		ands	r3, r3, r2
 1666 07a8 0B61     		str	r3, [r1, #16]
 1667              	.L107:
 1668              		.loc 1 1340 0
 1669 07aa 00BF     		nop
 1670 07ac 0C37     		adds	r7, r7, #12
 1671              		.cfi_def_cfa_offset 4
 1672 07ae BD46     		mov	sp, r7
 1673              		.cfi_def_cfa_register 13
 1674              		@ sp needed
 1675 07b0 80BC     		pop	{r7}
 1676              		.cfi_restore 7
 1677              		.cfi_def_cfa_offset 0
 1678 07b2 7047     		bx	lr
 1679              	.L109:
 1680              		.align	2
ARM GAS  /tmp/ccohH8g1.s 			page 54


 1681              	.L108:
 1682 07b4 00200240 		.word	1073881088
 1683              		.cfi_endproc
 1684              	.LFE84:
 1685              		.size	FLASH_ITConfig, .-FLASH_ITConfig
 1686              		.align	1
 1687              		.global	FLASH_GetFlagStatus
 1688              		.syntax unified
 1689              		.thumb
 1690              		.thumb_func
 1691              		.fpu softvfp
 1692              		.type	FLASH_GetFlagStatus, %function
 1693              	FLASH_GetFlagStatus:
 1694              	.LFB85:
1341:common/stm32f10x_flash.c **** 
1342:common/stm32f10x_flash.c **** /**
1343:common/stm32f10x_flash.c ****   * @brief  Checks whether the specified FLASH flag is set or not.
1344:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1345:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices, this function checks whether the specified 
1346:common/stm32f10x_flash.c ****   *           Bank1 or Bank2 flag is set or not.
1347:common/stm32f10x_flash.c ****   *         - For other devices, it checks whether the specified Bank1 flag is 
1348:common/stm32f10x_flash.c ****   *           set or not.
1349:common/stm32f10x_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flag to check.
1350:common/stm32f10x_flash.c ****   *   This parameter can be one of the following values:
1351:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_BSY: FLASH Busy flag           
1352:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_PGERR: FLASH Program error flag       
1353:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
1354:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
1355:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_OPTERR:  FLASH Option Byte error flag     
1356:common/stm32f10x_flash.c ****   * @retval The new state of FLASH_FLAG (SET or RESET).
1357:common/stm32f10x_flash.c ****   */
1358:common/stm32f10x_flash.c **** FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
1359:common/stm32f10x_flash.c **** {
 1695              		.loc 1 1359 0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 16
 1698              		@ frame_needed = 1, uses_anonymous_args = 0
 1699              		@ link register save eliminated.
 1700 07b8 80B4     		push	{r7}
 1701              		.cfi_def_cfa_offset 4
 1702              		.cfi_offset 7, -4
 1703 07ba 85B0     		sub	sp, sp, #20
 1704              		.cfi_def_cfa_offset 24
 1705 07bc 00AF     		add	r7, sp, #0
 1706              		.cfi_def_cfa_register 7
 1707 07be 7860     		str	r0, [r7, #4]
1360:common/stm32f10x_flash.c ****   FlagStatus bitstatus = RESET;
 1708              		.loc 1 1360 0
 1709 07c0 0023     		movs	r3, #0
 1710 07c2 FB73     		strb	r3, [r7, #15]
1361:common/stm32f10x_flash.c **** 
1362:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1363:common/stm32f10x_flash.c ****   /* Check the parameters */
1364:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
1365:common/stm32f10x_flash.c ****   if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
1366:common/stm32f10x_flash.c ****   {
1367:common/stm32f10x_flash.c ****     if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
ARM GAS  /tmp/ccohH8g1.s 			page 55


1368:common/stm32f10x_flash.c ****     {
1369:common/stm32f10x_flash.c ****       bitstatus = SET;
1370:common/stm32f10x_flash.c ****     }
1371:common/stm32f10x_flash.c ****     else
1372:common/stm32f10x_flash.c ****     {
1373:common/stm32f10x_flash.c ****       bitstatus = RESET;
1374:common/stm32f10x_flash.c ****     }
1375:common/stm32f10x_flash.c ****   }
1376:common/stm32f10x_flash.c ****   else
1377:common/stm32f10x_flash.c ****   {
1378:common/stm32f10x_flash.c ****     if((FLASH_FLAG & 0x80000000) != 0x0)
1379:common/stm32f10x_flash.c ****     {
1380:common/stm32f10x_flash.c ****       if((FLASH->SR2 & FLASH_FLAG) != (uint32_t)RESET)
1381:common/stm32f10x_flash.c ****       {
1382:common/stm32f10x_flash.c ****         bitstatus = SET;
1383:common/stm32f10x_flash.c ****       }
1384:common/stm32f10x_flash.c ****       else
1385:common/stm32f10x_flash.c ****       {
1386:common/stm32f10x_flash.c ****         bitstatus = RESET;
1387:common/stm32f10x_flash.c ****       }
1388:common/stm32f10x_flash.c ****     }
1389:common/stm32f10x_flash.c ****     else
1390:common/stm32f10x_flash.c ****     {
1391:common/stm32f10x_flash.c ****       if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
1392:common/stm32f10x_flash.c ****       {
1393:common/stm32f10x_flash.c ****         bitstatus = SET;
1394:common/stm32f10x_flash.c ****       }
1395:common/stm32f10x_flash.c ****       else
1396:common/stm32f10x_flash.c ****       {
1397:common/stm32f10x_flash.c ****         bitstatus = RESET;
1398:common/stm32f10x_flash.c ****       }
1399:common/stm32f10x_flash.c ****     }
1400:common/stm32f10x_flash.c ****   }
1401:common/stm32f10x_flash.c **** #else
1402:common/stm32f10x_flash.c ****   /* Check the parameters */
1403:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
1404:common/stm32f10x_flash.c ****   if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
 1711              		.loc 1 1404 0
 1712 07c4 7B68     		ldr	r3, [r7, #4]
 1713 07c6 012B     		cmp	r3, #1
 1714 07c8 0BD1     		bne	.L111
1405:common/stm32f10x_flash.c ****   {
1406:common/stm32f10x_flash.c ****     if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
 1715              		.loc 1 1406 0
 1716 07ca 0E4B     		ldr	r3, .L117
 1717 07cc DB69     		ldr	r3, [r3, #28]
 1718 07ce 03F00103 		and	r3, r3, #1
 1719 07d2 002B     		cmp	r3, #0
 1720 07d4 02D0     		beq	.L112
1407:common/stm32f10x_flash.c ****     {
1408:common/stm32f10x_flash.c ****       bitstatus = SET;
 1721              		.loc 1 1408 0
 1722 07d6 0123     		movs	r3, #1
 1723 07d8 FB73     		strb	r3, [r7, #15]
 1724 07da 0DE0     		b	.L114
 1725              	.L112:
1409:common/stm32f10x_flash.c ****     }
ARM GAS  /tmp/ccohH8g1.s 			page 56


1410:common/stm32f10x_flash.c ****     else
1411:common/stm32f10x_flash.c ****     {
1412:common/stm32f10x_flash.c ****       bitstatus = RESET;
 1726              		.loc 1 1412 0
 1727 07dc 0023     		movs	r3, #0
 1728 07de FB73     		strb	r3, [r7, #15]
 1729 07e0 0AE0     		b	.L114
 1730              	.L111:
1413:common/stm32f10x_flash.c ****     }
1414:common/stm32f10x_flash.c ****   }
1415:common/stm32f10x_flash.c ****   else
1416:common/stm32f10x_flash.c ****   {
1417:common/stm32f10x_flash.c ****    if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
 1731              		.loc 1 1417 0
 1732 07e2 084B     		ldr	r3, .L117
 1733 07e4 DA68     		ldr	r2, [r3, #12]
 1734 07e6 7B68     		ldr	r3, [r7, #4]
 1735 07e8 1340     		ands	r3, r3, r2
 1736 07ea 002B     		cmp	r3, #0
 1737 07ec 02D0     		beq	.L115
1418:common/stm32f10x_flash.c ****     {
1419:common/stm32f10x_flash.c ****       bitstatus = SET;
 1738              		.loc 1 1419 0
 1739 07ee 0123     		movs	r3, #1
 1740 07f0 FB73     		strb	r3, [r7, #15]
 1741 07f2 01E0     		b	.L114
 1742              	.L115:
1420:common/stm32f10x_flash.c ****     }
1421:common/stm32f10x_flash.c ****     else
1422:common/stm32f10x_flash.c ****     {
1423:common/stm32f10x_flash.c ****       bitstatus = RESET;
 1743              		.loc 1 1423 0
 1744 07f4 0023     		movs	r3, #0
 1745 07f6 FB73     		strb	r3, [r7, #15]
 1746              	.L114:
1424:common/stm32f10x_flash.c ****     }
1425:common/stm32f10x_flash.c ****   }
1426:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1427:common/stm32f10x_flash.c **** 
1428:common/stm32f10x_flash.c ****   /* Return the new state of FLASH_FLAG (SET or RESET) */
1429:common/stm32f10x_flash.c ****   return bitstatus;
 1747              		.loc 1 1429 0
 1748 07f8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1430:common/stm32f10x_flash.c **** }
 1749              		.loc 1 1430 0
 1750 07fa 1846     		mov	r0, r3
 1751 07fc 1437     		adds	r7, r7, #20
 1752              		.cfi_def_cfa_offset 4
 1753 07fe BD46     		mov	sp, r7
 1754              		.cfi_def_cfa_register 13
 1755              		@ sp needed
 1756 0800 80BC     		pop	{r7}
 1757              		.cfi_restore 7
 1758              		.cfi_def_cfa_offset 0
 1759 0802 7047     		bx	lr
 1760              	.L118:
 1761              		.align	2
ARM GAS  /tmp/ccohH8g1.s 			page 57


 1762              	.L117:
 1763 0804 00200240 		.word	1073881088
 1764              		.cfi_endproc
 1765              	.LFE85:
 1766              		.size	FLASH_GetFlagStatus, .-FLASH_GetFlagStatus
 1767              		.align	1
 1768              		.global	FLASH_ClearFlag
 1769              		.syntax unified
 1770              		.thumb
 1771              		.thumb_func
 1772              		.fpu softvfp
 1773              		.type	FLASH_ClearFlag, %function
 1774              	FLASH_ClearFlag:
 1775              	.LFB86:
1431:common/stm32f10x_flash.c **** 
1432:common/stm32f10x_flash.c **** /**
1433:common/stm32f10x_flash.c ****   * @brief  Clears the FLASH's pending flags.
1434:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices.
1435:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices, this function clears Bank1 or Bank2s pending flags
1436:common/stm32f10x_flash.c ****   *         - For other devices, it clears Bank1s pending flags.
1437:common/stm32f10x_flash.c ****   * @param  FLASH_FLAG: specifies the FLASH flags to clear.
1438:common/stm32f10x_flash.c ****   *   This parameter can be any combination of the following values:         
1439:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_PGERR: FLASH Program error flag       
1440:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_WRPRTERR: FLASH Write protected error flag      
1441:common/stm32f10x_flash.c ****   *     @arg FLASH_FLAG_EOP: FLASH End of Operation flag           
1442:common/stm32f10x_flash.c ****   * @retval None
1443:common/stm32f10x_flash.c ****   */
1444:common/stm32f10x_flash.c **** void FLASH_ClearFlag(uint32_t FLASH_FLAG)
1445:common/stm32f10x_flash.c **** {
 1776              		.loc 1 1445 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 8
 1779              		@ frame_needed = 1, uses_anonymous_args = 0
 1780              		@ link register save eliminated.
 1781 0808 80B4     		push	{r7}
 1782              		.cfi_def_cfa_offset 4
 1783              		.cfi_offset 7, -4
 1784 080a 83B0     		sub	sp, sp, #12
 1785              		.cfi_def_cfa_offset 16
 1786 080c 00AF     		add	r7, sp, #0
 1787              		.cfi_def_cfa_register 7
 1788 080e 7860     		str	r0, [r7, #4]
1446:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1447:common/stm32f10x_flash.c ****   /* Check the parameters */
1448:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
1449:common/stm32f10x_flash.c **** 
1450:common/stm32f10x_flash.c ****   if((FLASH_FLAG & 0x80000000) != 0x0)
1451:common/stm32f10x_flash.c ****   {
1452:common/stm32f10x_flash.c ****     /* Clear the flags */
1453:common/stm32f10x_flash.c ****     FLASH->SR2 = FLASH_FLAG;
1454:common/stm32f10x_flash.c ****   }
1455:common/stm32f10x_flash.c ****   else
1456:common/stm32f10x_flash.c ****   {
1457:common/stm32f10x_flash.c ****     /* Clear the flags */
1458:common/stm32f10x_flash.c ****     FLASH->SR = FLASH_FLAG;
1459:common/stm32f10x_flash.c ****   }  
1460:common/stm32f10x_flash.c **** 
ARM GAS  /tmp/ccohH8g1.s 			page 58


1461:common/stm32f10x_flash.c **** #else
1462:common/stm32f10x_flash.c ****   /* Check the parameters */
1463:common/stm32f10x_flash.c ****   assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
1464:common/stm32f10x_flash.c ****   
1465:common/stm32f10x_flash.c ****   /* Clear the flags */
1466:common/stm32f10x_flash.c ****   FLASH->SR = FLASH_FLAG;
 1789              		.loc 1 1466 0
 1790 0810 034A     		ldr	r2, .L120
 1791 0812 7B68     		ldr	r3, [r7, #4]
 1792 0814 D360     		str	r3, [r2, #12]
1467:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1468:common/stm32f10x_flash.c **** }
 1793              		.loc 1 1468 0
 1794 0816 00BF     		nop
 1795 0818 0C37     		adds	r7, r7, #12
 1796              		.cfi_def_cfa_offset 4
 1797 081a BD46     		mov	sp, r7
 1798              		.cfi_def_cfa_register 13
 1799              		@ sp needed
 1800 081c 80BC     		pop	{r7}
 1801              		.cfi_restore 7
 1802              		.cfi_def_cfa_offset 0
 1803 081e 7047     		bx	lr
 1804              	.L121:
 1805              		.align	2
 1806              	.L120:
 1807 0820 00200240 		.word	1073881088
 1808              		.cfi_endproc
 1809              	.LFE86:
 1810              		.size	FLASH_ClearFlag, .-FLASH_ClearFlag
 1811              		.align	1
 1812              		.global	FLASH_GetStatus
 1813              		.syntax unified
 1814              		.thumb
 1815              		.thumb_func
 1816              		.fpu softvfp
 1817              		.type	FLASH_GetStatus, %function
 1818              	FLASH_GetStatus:
 1819              	.LFB87:
1469:common/stm32f10x_flash.c **** 
1470:common/stm32f10x_flash.c **** /**
1471:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH Status.
1472:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices, it is equivalent
1473:common/stm32f10x_flash.c ****   *         to FLASH_GetBank1Status function.
1474:common/stm32f10x_flash.c ****   * @param  None
1475:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
1476:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP or FLASH_COMPLETE
1477:common/stm32f10x_flash.c ****   */
1478:common/stm32f10x_flash.c **** FLASH_Status FLASH_GetStatus(void)
1479:common/stm32f10x_flash.c **** {
 1820              		.loc 1 1479 0
 1821              		.cfi_startproc
 1822              		@ args = 0, pretend = 0, frame = 8
 1823              		@ frame_needed = 1, uses_anonymous_args = 0
 1824              		@ link register save eliminated.
 1825 0824 80B4     		push	{r7}
 1826              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccohH8g1.s 			page 59


 1827              		.cfi_offset 7, -4
 1828 0826 83B0     		sub	sp, sp, #12
 1829              		.cfi_def_cfa_offset 16
 1830 0828 00AF     		add	r7, sp, #0
 1831              		.cfi_def_cfa_register 7
1480:common/stm32f10x_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
 1832              		.loc 1 1480 0
 1833 082a 0423     		movs	r3, #4
 1834 082c FB71     		strb	r3, [r7, #7]
1481:common/stm32f10x_flash.c ****   
1482:common/stm32f10x_flash.c ****   if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 1835              		.loc 1 1482 0
 1836 082e 114B     		ldr	r3, .L128
 1837 0830 DB68     		ldr	r3, [r3, #12]
 1838 0832 03F00103 		and	r3, r3, #1
 1839 0836 012B     		cmp	r3, #1
 1840 0838 02D1     		bne	.L123
1483:common/stm32f10x_flash.c ****   {
1484:common/stm32f10x_flash.c ****     flashstatus = FLASH_BUSY;
 1841              		.loc 1 1484 0
 1842 083a 0123     		movs	r3, #1
 1843 083c FB71     		strb	r3, [r7, #7]
 1844 083e 13E0     		b	.L124
 1845              	.L123:
1485:common/stm32f10x_flash.c ****   }
1486:common/stm32f10x_flash.c ****   else 
1487:common/stm32f10x_flash.c ****   {  
1488:common/stm32f10x_flash.c ****     if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
 1846              		.loc 1 1488 0
 1847 0840 0C4B     		ldr	r3, .L128
 1848 0842 DB68     		ldr	r3, [r3, #12]
 1849 0844 03F00403 		and	r3, r3, #4
 1850 0848 002B     		cmp	r3, #0
 1851 084a 02D0     		beq	.L125
1489:common/stm32f10x_flash.c ****     { 
1490:common/stm32f10x_flash.c ****       flashstatus = FLASH_ERROR_PG;
 1852              		.loc 1 1490 0
 1853 084c 0223     		movs	r3, #2
 1854 084e FB71     		strb	r3, [r7, #7]
 1855 0850 0AE0     		b	.L124
 1856              	.L125:
1491:common/stm32f10x_flash.c ****     }
1492:common/stm32f10x_flash.c ****     else 
1493:common/stm32f10x_flash.c ****     {
1494:common/stm32f10x_flash.c ****       if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
 1857              		.loc 1 1494 0
 1858 0852 084B     		ldr	r3, .L128
 1859 0854 DB68     		ldr	r3, [r3, #12]
 1860 0856 03F01003 		and	r3, r3, #16
 1861 085a 002B     		cmp	r3, #0
 1862 085c 02D0     		beq	.L126
1495:common/stm32f10x_flash.c ****       {
1496:common/stm32f10x_flash.c ****         flashstatus = FLASH_ERROR_WRP;
 1863              		.loc 1 1496 0
 1864 085e 0323     		movs	r3, #3
 1865 0860 FB71     		strb	r3, [r7, #7]
 1866 0862 01E0     		b	.L124
ARM GAS  /tmp/ccohH8g1.s 			page 60


 1867              	.L126:
1497:common/stm32f10x_flash.c ****       }
1498:common/stm32f10x_flash.c ****       else
1499:common/stm32f10x_flash.c ****       {
1500:common/stm32f10x_flash.c ****         flashstatus = FLASH_COMPLETE;
 1868              		.loc 1 1500 0
 1869 0864 0423     		movs	r3, #4
 1870 0866 FB71     		strb	r3, [r7, #7]
 1871              	.L124:
1501:common/stm32f10x_flash.c ****       }
1502:common/stm32f10x_flash.c ****     }
1503:common/stm32f10x_flash.c ****   }
1504:common/stm32f10x_flash.c ****   /* Return the Flash Status */
1505:common/stm32f10x_flash.c ****   return flashstatus;
 1872              		.loc 1 1505 0
 1873 0868 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1506:common/stm32f10x_flash.c **** }
 1874              		.loc 1 1506 0
 1875 086a 1846     		mov	r0, r3
 1876 086c 0C37     		adds	r7, r7, #12
 1877              		.cfi_def_cfa_offset 4
 1878 086e BD46     		mov	sp, r7
 1879              		.cfi_def_cfa_register 13
 1880              		@ sp needed
 1881 0870 80BC     		pop	{r7}
 1882              		.cfi_restore 7
 1883              		.cfi_def_cfa_offset 0
 1884 0872 7047     		bx	lr
 1885              	.L129:
 1886              		.align	2
 1887              	.L128:
 1888 0874 00200240 		.word	1073881088
 1889              		.cfi_endproc
 1890              	.LFE87:
 1891              		.size	FLASH_GetStatus, .-FLASH_GetStatus
 1892              		.align	1
 1893              		.global	FLASH_GetBank1Status
 1894              		.syntax unified
 1895              		.thumb
 1896              		.thumb_func
 1897              		.fpu softvfp
 1898              		.type	FLASH_GetBank1Status, %function
 1899              	FLASH_GetBank1Status:
 1900              	.LFB88:
1507:common/stm32f10x_flash.c **** 
1508:common/stm32f10x_flash.c **** /**
1509:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH Bank1 Status.
1510:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices, it is equivalent
1511:common/stm32f10x_flash.c ****   *         to FLASH_GetStatus function.
1512:common/stm32f10x_flash.c ****   * @param  None
1513:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
1514:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP or FLASH_COMPLETE
1515:common/stm32f10x_flash.c ****   */
1516:common/stm32f10x_flash.c **** FLASH_Status FLASH_GetBank1Status(void)
1517:common/stm32f10x_flash.c **** {
 1901              		.loc 1 1517 0
 1902              		.cfi_startproc
ARM GAS  /tmp/ccohH8g1.s 			page 61


 1903              		@ args = 0, pretend = 0, frame = 8
 1904              		@ frame_needed = 1, uses_anonymous_args = 0
 1905              		@ link register save eliminated.
 1906 0878 80B4     		push	{r7}
 1907              		.cfi_def_cfa_offset 4
 1908              		.cfi_offset 7, -4
 1909 087a 83B0     		sub	sp, sp, #12
 1910              		.cfi_def_cfa_offset 16
 1911 087c 00AF     		add	r7, sp, #0
 1912              		.cfi_def_cfa_register 7
1518:common/stm32f10x_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
 1913              		.loc 1 1518 0
 1914 087e 0423     		movs	r3, #4
 1915 0880 FB71     		strb	r3, [r7, #7]
1519:common/stm32f10x_flash.c ****   
1520:common/stm32f10x_flash.c ****   if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
 1916              		.loc 1 1520 0
 1917 0882 114B     		ldr	r3, .L136
 1918 0884 DB68     		ldr	r3, [r3, #12]
 1919 0886 03F00103 		and	r3, r3, #1
 1920 088a 012B     		cmp	r3, #1
 1921 088c 02D1     		bne	.L131
1521:common/stm32f10x_flash.c ****   {
1522:common/stm32f10x_flash.c ****     flashstatus = FLASH_BUSY;
 1922              		.loc 1 1522 0
 1923 088e 0123     		movs	r3, #1
 1924 0890 FB71     		strb	r3, [r7, #7]
 1925 0892 13E0     		b	.L132
 1926              	.L131:
1523:common/stm32f10x_flash.c ****   }
1524:common/stm32f10x_flash.c ****   else 
1525:common/stm32f10x_flash.c ****   {  
1526:common/stm32f10x_flash.c ****     if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
 1927              		.loc 1 1526 0
 1928 0894 0C4B     		ldr	r3, .L136
 1929 0896 DB68     		ldr	r3, [r3, #12]
 1930 0898 03F00403 		and	r3, r3, #4
 1931 089c 002B     		cmp	r3, #0
 1932 089e 02D0     		beq	.L133
1527:common/stm32f10x_flash.c ****     { 
1528:common/stm32f10x_flash.c ****       flashstatus = FLASH_ERROR_PG;
 1933              		.loc 1 1528 0
 1934 08a0 0223     		movs	r3, #2
 1935 08a2 FB71     		strb	r3, [r7, #7]
 1936 08a4 0AE0     		b	.L132
 1937              	.L133:
1529:common/stm32f10x_flash.c ****     }
1530:common/stm32f10x_flash.c ****     else 
1531:common/stm32f10x_flash.c ****     {
1532:common/stm32f10x_flash.c ****       if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
 1938              		.loc 1 1532 0
 1939 08a6 084B     		ldr	r3, .L136
 1940 08a8 DB68     		ldr	r3, [r3, #12]
 1941 08aa 03F01003 		and	r3, r3, #16
 1942 08ae 002B     		cmp	r3, #0
 1943 08b0 02D0     		beq	.L134
1533:common/stm32f10x_flash.c ****       {
ARM GAS  /tmp/ccohH8g1.s 			page 62


1534:common/stm32f10x_flash.c ****         flashstatus = FLASH_ERROR_WRP;
 1944              		.loc 1 1534 0
 1945 08b2 0323     		movs	r3, #3
 1946 08b4 FB71     		strb	r3, [r7, #7]
 1947 08b6 01E0     		b	.L132
 1948              	.L134:
1535:common/stm32f10x_flash.c ****       }
1536:common/stm32f10x_flash.c ****       else
1537:common/stm32f10x_flash.c ****       {
1538:common/stm32f10x_flash.c ****         flashstatus = FLASH_COMPLETE;
 1949              		.loc 1 1538 0
 1950 08b8 0423     		movs	r3, #4
 1951 08ba FB71     		strb	r3, [r7, #7]
 1952              	.L132:
1539:common/stm32f10x_flash.c ****       }
1540:common/stm32f10x_flash.c ****     }
1541:common/stm32f10x_flash.c ****   }
1542:common/stm32f10x_flash.c ****   /* Return the Flash Status */
1543:common/stm32f10x_flash.c ****   return flashstatus;
 1953              		.loc 1 1543 0
 1954 08bc FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1544:common/stm32f10x_flash.c **** }
 1955              		.loc 1 1544 0
 1956 08be 1846     		mov	r0, r3
 1957 08c0 0C37     		adds	r7, r7, #12
 1958              		.cfi_def_cfa_offset 4
 1959 08c2 BD46     		mov	sp, r7
 1960              		.cfi_def_cfa_register 13
 1961              		@ sp needed
 1962 08c4 80BC     		pop	{r7}
 1963              		.cfi_restore 7
 1964              		.cfi_def_cfa_offset 0
 1965 08c6 7047     		bx	lr
 1966              	.L137:
 1967              		.align	2
 1968              	.L136:
 1969 08c8 00200240 		.word	1073881088
 1970              		.cfi_endproc
 1971              	.LFE88:
 1972              		.size	FLASH_GetBank1Status, .-FLASH_GetBank1Status
 1973              		.align	1
 1974              		.global	FLASH_WaitForLastOperation
 1975              		.syntax unified
 1976              		.thumb
 1977              		.thumb_func
 1978              		.fpu softvfp
 1979              		.type	FLASH_WaitForLastOperation, %function
 1980              	FLASH_WaitForLastOperation:
 1981              	.LFB89:
1545:common/stm32f10x_flash.c **** 
1546:common/stm32f10x_flash.c **** #ifdef STM32F10X_XL
1547:common/stm32f10x_flash.c **** /**
1548:common/stm32f10x_flash.c ****   * @brief  Returns the FLASH Bank2 Status.
1549:common/stm32f10x_flash.c ****   * @note   This function can be used for STM32F10x_XL density devices.
1550:common/stm32f10x_flash.c ****   * @param  None
1551:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
1552:common/stm32f10x_flash.c ****   *        FLASH_ERROR_WRP or FLASH_COMPLETE
ARM GAS  /tmp/ccohH8g1.s 			page 63


1553:common/stm32f10x_flash.c ****   */
1554:common/stm32f10x_flash.c **** FLASH_Status FLASH_GetBank2Status(void)
1555:common/stm32f10x_flash.c **** {
1556:common/stm32f10x_flash.c ****   FLASH_Status flashstatus = FLASH_COMPLETE;
1557:common/stm32f10x_flash.c ****   
1558:common/stm32f10x_flash.c ****   if((FLASH->SR2 & (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF)) == (FLASH_FLAG_BANK2_BSY & 0x7FFFFFFF)) 
1559:common/stm32f10x_flash.c ****   {
1560:common/stm32f10x_flash.c ****     flashstatus = FLASH_BUSY;
1561:common/stm32f10x_flash.c ****   }
1562:common/stm32f10x_flash.c ****   else 
1563:common/stm32f10x_flash.c ****   {  
1564:common/stm32f10x_flash.c ****     if((FLASH->SR2 & (FLASH_FLAG_BANK2_PGERR & 0x7FFFFFFF)) != 0)
1565:common/stm32f10x_flash.c ****     { 
1566:common/stm32f10x_flash.c ****       flashstatus = FLASH_ERROR_PG;
1567:common/stm32f10x_flash.c ****     }
1568:common/stm32f10x_flash.c ****     else 
1569:common/stm32f10x_flash.c ****     {
1570:common/stm32f10x_flash.c ****       if((FLASH->SR2 & (FLASH_FLAG_BANK2_WRPRTERR & 0x7FFFFFFF)) != 0 )
1571:common/stm32f10x_flash.c ****       {
1572:common/stm32f10x_flash.c ****         flashstatus = FLASH_ERROR_WRP;
1573:common/stm32f10x_flash.c ****       }
1574:common/stm32f10x_flash.c ****       else
1575:common/stm32f10x_flash.c ****       {
1576:common/stm32f10x_flash.c ****         flashstatus = FLASH_COMPLETE;
1577:common/stm32f10x_flash.c ****       }
1578:common/stm32f10x_flash.c ****     }
1579:common/stm32f10x_flash.c ****   }
1580:common/stm32f10x_flash.c ****   /* Return the Flash Status */
1581:common/stm32f10x_flash.c ****   return flashstatus;
1582:common/stm32f10x_flash.c **** }
1583:common/stm32f10x_flash.c **** #endif /* STM32F10X_XL */
1584:common/stm32f10x_flash.c **** /**
1585:common/stm32f10x_flash.c ****   * @brief  Waits for a Flash operation to complete or a TIMEOUT to occur.
1586:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices, 
1587:common/stm32f10x_flash.c ****   *         it is equivalent to FLASH_WaitForLastBank1Operation.
1588:common/stm32f10x_flash.c ****   *         - For STM32F10X_XL devices this function waits for a Bank1 Flash operation
1589:common/stm32f10x_flash.c ****   *           to complete or a TIMEOUT to occur.
1590:common/stm32f10x_flash.c ****   *         - For all other devices it waits for a Flash operation to complete 
1591:common/stm32f10x_flash.c ****   *           or a TIMEOUT to occur.
1592:common/stm32f10x_flash.c ****   * @param  Timeout: FLASH programming Timeout
1593:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
1594:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1595:common/stm32f10x_flash.c ****   */
1596:common/stm32f10x_flash.c **** FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
1597:common/stm32f10x_flash.c **** { 
 1982              		.loc 1 1597 0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 16
 1985              		@ frame_needed = 1, uses_anonymous_args = 0
 1986 08cc 80B5     		push	{r7, lr}
 1987              		.cfi_def_cfa_offset 8
 1988              		.cfi_offset 7, -8
 1989              		.cfi_offset 14, -4
 1990 08ce 84B0     		sub	sp, sp, #16
 1991              		.cfi_def_cfa_offset 24
 1992 08d0 00AF     		add	r7, sp, #0
 1993              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccohH8g1.s 			page 64


 1994 08d2 7860     		str	r0, [r7, #4]
1598:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 1995              		.loc 1 1598 0
 1996 08d4 0423     		movs	r3, #4
 1997 08d6 FB73     		strb	r3, [r7, #15]
1599:common/stm32f10x_flash.c ****    
1600:common/stm32f10x_flash.c ****   /* Check for the Flash Status */
1601:common/stm32f10x_flash.c ****   status = FLASH_GetBank1Status();
 1998              		.loc 1 1601 0
 1999 08d8 FFF7FEFF 		bl	FLASH_GetBank1Status
 2000 08dc 0346     		mov	r3, r0
 2001 08de FB73     		strb	r3, [r7, #15]
1602:common/stm32f10x_flash.c ****   /* Wait for a Flash operation to complete or a TIMEOUT to occur */
1603:common/stm32f10x_flash.c ****   while((status == FLASH_BUSY) && (Timeout != 0x00))
 2002              		.loc 1 1603 0
 2003 08e0 06E0     		b	.L139
 2004              	.L141:
1604:common/stm32f10x_flash.c ****   {
1605:common/stm32f10x_flash.c ****     status = FLASH_GetBank1Status();
 2005              		.loc 1 1605 0
 2006 08e2 FFF7FEFF 		bl	FLASH_GetBank1Status
 2007 08e6 0346     		mov	r3, r0
 2008 08e8 FB73     		strb	r3, [r7, #15]
1606:common/stm32f10x_flash.c ****     Timeout--;
 2009              		.loc 1 1606 0
 2010 08ea 7B68     		ldr	r3, [r7, #4]
 2011 08ec 013B     		subs	r3, r3, #1
 2012 08ee 7B60     		str	r3, [r7, #4]
 2013              	.L139:
1603:common/stm32f10x_flash.c ****   {
 2014              		.loc 1 1603 0
 2015 08f0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2016 08f2 012B     		cmp	r3, #1
 2017 08f4 02D1     		bne	.L140
1603:common/stm32f10x_flash.c ****   {
 2018              		.loc 1 1603 0 is_stmt 0 discriminator 1
 2019 08f6 7B68     		ldr	r3, [r7, #4]
 2020 08f8 002B     		cmp	r3, #0
 2021 08fa F2D1     		bne	.L141
 2022              	.L140:
1607:common/stm32f10x_flash.c ****   }
1608:common/stm32f10x_flash.c ****   if(Timeout == 0x00 )
 2023              		.loc 1 1608 0 is_stmt 1
 2024 08fc 7B68     		ldr	r3, [r7, #4]
 2025 08fe 002B     		cmp	r3, #0
 2026 0900 01D1     		bne	.L142
1609:common/stm32f10x_flash.c ****   {
1610:common/stm32f10x_flash.c ****     status = FLASH_TIMEOUT;
 2027              		.loc 1 1610 0
 2028 0902 0523     		movs	r3, #5
 2029 0904 FB73     		strb	r3, [r7, #15]
 2030              	.L142:
1611:common/stm32f10x_flash.c ****   }
1612:common/stm32f10x_flash.c ****   /* Return the operation status */
1613:common/stm32f10x_flash.c ****   return status;
 2031              		.loc 1 1613 0
 2032 0906 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  /tmp/ccohH8g1.s 			page 65


1614:common/stm32f10x_flash.c **** }
 2033              		.loc 1 1614 0
 2034 0908 1846     		mov	r0, r3
 2035 090a 1037     		adds	r7, r7, #16
 2036              		.cfi_def_cfa_offset 8
 2037 090c BD46     		mov	sp, r7
 2038              		.cfi_def_cfa_register 13
 2039              		@ sp needed
 2040 090e 80BD     		pop	{r7, pc}
 2041              		.cfi_endproc
 2042              	.LFE89:
 2043              		.size	FLASH_WaitForLastOperation, .-FLASH_WaitForLastOperation
 2044              		.align	1
 2045              		.global	FLASH_WaitForLastBank1Operation
 2046              		.syntax unified
 2047              		.thumb
 2048              		.thumb_func
 2049              		.fpu softvfp
 2050              		.type	FLASH_WaitForLastBank1Operation, %function
 2051              	FLASH_WaitForLastBank1Operation:
 2052              	.LFB90:
1615:common/stm32f10x_flash.c **** 
1616:common/stm32f10x_flash.c **** /**
1617:common/stm32f10x_flash.c ****   * @brief  Waits for a Flash operation on Bank1 to complete or a TIMEOUT to occur.
1618:common/stm32f10x_flash.c ****   * @note   This function can be used for all STM32F10x devices, 
1619:common/stm32f10x_flash.c ****   *         it is equivalent to FLASH_WaitForLastOperation.
1620:common/stm32f10x_flash.c ****   * @param  Timeout: FLASH programming Timeout
1621:common/stm32f10x_flash.c ****   * @retval FLASH Status: The returned value can be: FLASH_ERROR_PG,
1622:common/stm32f10x_flash.c ****   *         FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
1623:common/stm32f10x_flash.c ****   */
1624:common/stm32f10x_flash.c **** FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
1625:common/stm32f10x_flash.c **** { 
 2053              		.loc 1 1625 0
 2054              		.cfi_startproc
 2055              		@ args = 0, pretend = 0, frame = 16
 2056              		@ frame_needed = 1, uses_anonymous_args = 0
 2057 0910 80B5     		push	{r7, lr}
 2058              		.cfi_def_cfa_offset 8
 2059              		.cfi_offset 7, -8
 2060              		.cfi_offset 14, -4
 2061 0912 84B0     		sub	sp, sp, #16
 2062              		.cfi_def_cfa_offset 24
 2063 0914 00AF     		add	r7, sp, #0
 2064              		.cfi_def_cfa_register 7
 2065 0916 7860     		str	r0, [r7, #4]
1626:common/stm32f10x_flash.c ****   FLASH_Status status = FLASH_COMPLETE;
 2066              		.loc 1 1626 0
 2067 0918 0423     		movs	r3, #4
 2068 091a FB73     		strb	r3, [r7, #15]
1627:common/stm32f10x_flash.c ****    
1628:common/stm32f10x_flash.c ****   /* Check for the Flash Status */
1629:common/stm32f10x_flash.c ****   status = FLASH_GetBank1Status();
 2069              		.loc 1 1629 0
 2070 091c FFF7FEFF 		bl	FLASH_GetBank1Status
 2071 0920 0346     		mov	r3, r0
 2072 0922 FB73     		strb	r3, [r7, #15]
1630:common/stm32f10x_flash.c ****   /* Wait for a Flash operation to complete or a TIMEOUT to occur */
ARM GAS  /tmp/ccohH8g1.s 			page 66


1631:common/stm32f10x_flash.c ****   while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
 2073              		.loc 1 1631 0
 2074 0924 06E0     		b	.L145
 2075              	.L147:
1632:common/stm32f10x_flash.c ****   {
1633:common/stm32f10x_flash.c ****     status = FLASH_GetBank1Status();
 2076              		.loc 1 1633 0
 2077 0926 FFF7FEFF 		bl	FLASH_GetBank1Status
 2078 092a 0346     		mov	r3, r0
 2079 092c FB73     		strb	r3, [r7, #15]
1634:common/stm32f10x_flash.c ****     Timeout--;
 2080              		.loc 1 1634 0
 2081 092e 7B68     		ldr	r3, [r7, #4]
 2082 0930 013B     		subs	r3, r3, #1
 2083 0932 7B60     		str	r3, [r7, #4]
 2084              	.L145:
1631:common/stm32f10x_flash.c ****   {
 2085              		.loc 1 1631 0
 2086 0934 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2087 0936 012B     		cmp	r3, #1
 2088 0938 02D1     		bne	.L146
1631:common/stm32f10x_flash.c ****   {
 2089              		.loc 1 1631 0 is_stmt 0 discriminator 1
 2090 093a 7B68     		ldr	r3, [r7, #4]
 2091 093c 002B     		cmp	r3, #0
 2092 093e F2D1     		bne	.L147
 2093              	.L146:
1635:common/stm32f10x_flash.c ****   }
1636:common/stm32f10x_flash.c ****   if(Timeout == 0x00 )
 2094              		.loc 1 1636 0 is_stmt 1
 2095 0940 7B68     		ldr	r3, [r7, #4]
 2096 0942 002B     		cmp	r3, #0
 2097 0944 01D1     		bne	.L148
1637:common/stm32f10x_flash.c ****   {
1638:common/stm32f10x_flash.c ****     status = FLASH_TIMEOUT;
 2098              		.loc 1 1638 0
 2099 0946 0523     		movs	r3, #5
 2100 0948 FB73     		strb	r3, [r7, #15]
 2101              	.L148:
1639:common/stm32f10x_flash.c ****   }
1640:common/stm32f10x_flash.c ****   /* Return the operation status */
1641:common/stm32f10x_flash.c ****   return status;
 2102              		.loc 1 1641 0
 2103 094a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1642:common/stm32f10x_flash.c **** }
 2104              		.loc 1 1642 0
 2105 094c 1846     		mov	r0, r3
 2106 094e 1037     		adds	r7, r7, #16
 2107              		.cfi_def_cfa_offset 8
 2108 0950 BD46     		mov	sp, r7
 2109              		.cfi_def_cfa_register 13
 2110              		@ sp needed
 2111 0952 80BD     		pop	{r7, pc}
 2112              		.cfi_endproc
 2113              	.LFE90:
 2114              		.size	FLASH_WaitForLastBank1Operation, .-FLASH_WaitForLastBank1Operation
 2115              	.Letext0:
ARM GAS  /tmp/ccohH8g1.s 			page 67


 2116              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2117              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2118              		.file 4 "common/../include/STM32/../CMSIS/core_cm3.h"
 2119              		.file 5 "common/../include/STM32/system_stm32f10x.h"
 2120              		.file 6 "common/../include/STM32/stm32f10x.h"
 2121              		.file 7 "common/../include/STM32/flash.h"
 2122              		.file 8 "common/../src/../include/MPU6050/mpu6050.h"
 2123              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 2124              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 2125              		.file 11 "/usr/lib/gcc/arm-none-eabi/6.1.1/include/stddef.h"
 2126              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 2127              		.file 13 "/usr/arm-none-eabi/include/math.h"
 2128              		.section	.debug_info,"",%progbits
 2129              	.Ldebug_info0:
 2130 0000 AD100000 		.4byte	0x10ad
 2131 0004 0400     		.2byte	0x4
 2132 0006 00000000 		.4byte	.Ldebug_abbrev0
 2133 000a 04       		.byte	0x4
 2134 000b 01       		.uleb128 0x1
 2135 000c 21080000 		.4byte	.LASF222
 2136 0010 0C       		.byte	0xc
 2137 0011 520A0000 		.4byte	.LASF223
 2138 0015 10020000 		.4byte	.LASF224
 2139 0019 00000000 		.4byte	.Ltext0
 2140 001d 54090000 		.4byte	.Letext0-.Ltext0
 2141 0021 00000000 		.4byte	.Ldebug_line0
 2142 0025 02       		.uleb128 0x2
 2143 0026 01       		.byte	0x1
 2144 0027 06       		.byte	0x6
 2145 0028 76010000 		.4byte	.LASF0
 2146 002c 03       		.uleb128 0x3
 2147 002d 8E000000 		.4byte	.LASF2
 2148 0031 02       		.byte	0x2
 2149 0032 1D       		.byte	0x1d
 2150 0033 37000000 		.4byte	0x37
 2151 0037 02       		.uleb128 0x2
 2152 0038 01       		.byte	0x1
 2153 0039 08       		.byte	0x8
 2154 003a D5050000 		.4byte	.LASF1
 2155 003e 03       		.uleb128 0x3
 2156 003f 0E080000 		.4byte	.LASF3
 2157 0043 02       		.byte	0x2
 2158 0044 29       		.byte	0x29
 2159 0045 49000000 		.4byte	0x49
 2160 0049 02       		.uleb128 0x2
 2161 004a 02       		.byte	0x2
 2162 004b 05       		.byte	0x5
 2163 004c BD070000 		.4byte	.LASF4
 2164 0050 03       		.uleb128 0x3
 2165 0051 B2070000 		.4byte	.LASF5
 2166 0055 02       		.byte	0x2
 2167 0056 2B       		.byte	0x2b
 2168 0057 5B000000 		.4byte	0x5b
 2169 005b 02       		.uleb128 0x2
 2170 005c 02       		.byte	0x2
 2171 005d 07       		.byte	0x7
 2172 005e 5F080000 		.4byte	.LASF6
ARM GAS  /tmp/ccohH8g1.s 			page 68


 2173 0062 03       		.uleb128 0x3
 2174 0063 C7070000 		.4byte	.LASF7
 2175 0067 02       		.byte	0x2
 2176 0068 3F       		.byte	0x3f
 2177 0069 6D000000 		.4byte	0x6d
 2178 006d 02       		.uleb128 0x2
 2179 006e 04       		.byte	0x4
 2180 006f 05       		.byte	0x5
 2181 0070 FE010000 		.4byte	.LASF8
 2182 0074 03       		.uleb128 0x3
 2183 0075 E2020000 		.4byte	.LASF9
 2184 0079 02       		.byte	0x2
 2185 007a 41       		.byte	0x41
 2186 007b 7F000000 		.4byte	0x7f
 2187 007f 02       		.uleb128 0x2
 2188 0080 04       		.byte	0x4
 2189 0081 07       		.byte	0x7
 2190 0082 C2030000 		.4byte	.LASF10
 2191 0086 02       		.uleb128 0x2
 2192 0087 08       		.byte	0x8
 2193 0088 05       		.byte	0x5
 2194 0089 91020000 		.4byte	.LASF11
 2195 008d 02       		.uleb128 0x2
 2196 008e 08       		.byte	0x8
 2197 008f 07       		.byte	0x7
 2198 0090 DA000000 		.4byte	.LASF12
 2199 0094 04       		.uleb128 0x4
 2200 0095 04       		.byte	0x4
 2201 0096 05       		.byte	0x5
 2202 0097 696E7400 		.ascii	"int\000"
 2203 009b 02       		.uleb128 0x2
 2204 009c 04       		.byte	0x4
 2205 009d 07       		.byte	0x7
 2206 009e A5070000 		.4byte	.LASF13
 2207 00a2 03       		.uleb128 0x3
 2208 00a3 4B090000 		.4byte	.LASF14
 2209 00a7 03       		.byte	0x3
 2210 00a8 18       		.byte	0x18
 2211 00a9 2C000000 		.4byte	0x2c
 2212 00ad 03       		.uleb128 0x3
 2213 00ae 60010000 		.4byte	.LASF15
 2214 00b2 03       		.byte	0x3
 2215 00b3 20       		.byte	0x20
 2216 00b4 3E000000 		.4byte	0x3e
 2217 00b8 03       		.uleb128 0x3
 2218 00b9 3E040000 		.4byte	.LASF16
 2219 00bd 03       		.byte	0x3
 2220 00be 24       		.byte	0x24
 2221 00bf 50000000 		.4byte	0x50
 2222 00c3 05       		.uleb128 0x5
 2223 00c4 B8000000 		.4byte	0xb8
 2224 00c8 03       		.uleb128 0x3
 2225 00c9 CD050000 		.4byte	.LASF17
 2226 00cd 03       		.byte	0x3
 2227 00ce 2C       		.byte	0x2c
 2228 00cf 62000000 		.4byte	0x62
 2229 00d3 05       		.uleb128 0x5
ARM GAS  /tmp/ccohH8g1.s 			page 69


 2230 00d4 C8000000 		.4byte	0xc8
 2231 00d8 03       		.uleb128 0x3
 2232 00d9 3F0A0000 		.4byte	.LASF18
 2233 00dd 03       		.byte	0x3
 2234 00de 30       		.byte	0x30
 2235 00df 74000000 		.4byte	0x74
 2236 00e3 05       		.uleb128 0x5
 2237 00e4 D8000000 		.4byte	0xd8
 2238 00e8 02       		.uleb128 0x2
 2239 00e9 04       		.byte	0x4
 2240 00ea 07       		.byte	0x7
 2241 00eb C9040000 		.4byte	.LASF19
 2242 00ef 06       		.uleb128 0x6
 2243 00f0 19010000 		.4byte	.LASF20
 2244 00f4 04       		.byte	0x4
 2245 00f5 9606     		.2byte	0x696
 2246 00f7 D3000000 		.4byte	0xd3
 2247 00fb 07       		.uleb128 0x7
 2248 00fc 9D030000 		.4byte	.LASF21
 2249 0100 05       		.byte	0x5
 2250 0101 35       		.byte	0x35
 2251 0102 D8000000 		.4byte	0xd8
 2252 0106 08       		.uleb128 0x8
 2253 0107 01       		.byte	0x1
 2254 0108 37000000 		.4byte	0x37
 2255 010c 06       		.byte	0x6
 2256 010d 9001     		.2byte	0x190
 2257 010f 20010000 		.4byte	0x120
 2258 0113 09       		.uleb128 0x9
 2259 0114 B3050000 		.4byte	.LASF22
 2260 0118 00       		.byte	0
 2261 0119 0A       		.uleb128 0xa
 2262 011a 53455400 		.ascii	"SET\000"
 2263 011e 01       		.byte	0x1
 2264 011f 00       		.byte	0
 2265 0120 0B       		.uleb128 0xb
 2266 0121 4E000000 		.4byte	.LASF23
 2267 0125 06       		.byte	0x6
 2268 0126 9001     		.2byte	0x190
 2269 0128 06010000 		.4byte	0x106
 2270 012c 08       		.uleb128 0x8
 2271 012d 01       		.byte	0x1
 2272 012e 37000000 		.4byte	0x37
 2273 0132 06       		.byte	0x6
 2274 0133 9201     		.2byte	0x192
 2275 0135 46010000 		.4byte	0x146
 2276 0139 09       		.uleb128 0x9
 2277 013a 8E030000 		.4byte	.LASF24
 2278 013e 00       		.byte	0
 2279 013f 09       		.uleb128 0x9
 2280 0140 6F020000 		.4byte	.LASF25
 2281 0144 01       		.byte	0x1
 2282 0145 00       		.byte	0
 2283 0146 0B       		.uleb128 0xb
 2284 0147 16050000 		.4byte	.LASF26
 2285 014b 06       		.byte	0x6
 2286 014c 9201     		.2byte	0x192
ARM GAS  /tmp/ccohH8g1.s 			page 70


 2287 014e 2C010000 		.4byte	0x12c
 2288 0152 0C       		.uleb128 0xc
 2289 0153 24       		.byte	0x24
 2290 0154 06       		.byte	0x6
 2291 0155 0E03     		.2byte	0x30e
 2292 0157 CE010000 		.4byte	0x1ce
 2293 015b 0D       		.uleb128 0xd
 2294 015c 41435200 		.ascii	"ACR\000"
 2295 0160 06       		.byte	0x6
 2296 0161 1003     		.2byte	0x310
 2297 0163 E3000000 		.4byte	0xe3
 2298 0167 00       		.byte	0
 2299 0168 0E       		.uleb128 0xe
 2300 0169 9C050000 		.4byte	.LASF27
 2301 016d 06       		.byte	0x6
 2302 016e 1103     		.2byte	0x311
 2303 0170 E3000000 		.4byte	0xe3
 2304 0174 04       		.byte	0x4
 2305 0175 0E       		.uleb128 0xe
 2306 0176 9F020000 		.4byte	.LASF28
 2307 017a 06       		.byte	0x6
 2308 017b 1203     		.2byte	0x312
 2309 017d E3000000 		.4byte	0xe3
 2310 0181 08       		.byte	0x8
 2311 0182 0D       		.uleb128 0xd
 2312 0183 535200   		.ascii	"SR\000"
 2313 0186 06       		.byte	0x6
 2314 0187 1303     		.2byte	0x313
 2315 0189 E3000000 		.4byte	0xe3
 2316 018d 0C       		.byte	0xc
 2317 018e 0D       		.uleb128 0xd
 2318 018f 435200   		.ascii	"CR\000"
 2319 0192 06       		.byte	0x6
 2320 0193 1403     		.2byte	0x314
 2321 0195 E3000000 		.4byte	0xe3
 2322 0199 10       		.byte	0x10
 2323 019a 0D       		.uleb128 0xd
 2324 019b 415200   		.ascii	"AR\000"
 2325 019e 06       		.byte	0x6
 2326 019f 1503     		.2byte	0x315
 2327 01a1 E3000000 		.4byte	0xe3
 2328 01a5 14       		.byte	0x14
 2329 01a6 0E       		.uleb128 0xe
 2330 01a7 38060000 		.4byte	.LASF29
 2331 01ab 06       		.byte	0x6
 2332 01ac 1603     		.2byte	0x316
 2333 01ae E3000000 		.4byte	0xe3
 2334 01b2 18       		.byte	0x18
 2335 01b3 0D       		.uleb128 0xd
 2336 01b4 4F425200 		.ascii	"OBR\000"
 2337 01b8 06       		.byte	0x6
 2338 01b9 1703     		.2byte	0x317
 2339 01bb E3000000 		.4byte	0xe3
 2340 01bf 1C       		.byte	0x1c
 2341 01c0 0E       		.uleb128 0xe
 2342 01c1 77070000 		.4byte	.LASF30
 2343 01c5 06       		.byte	0x6
ARM GAS  /tmp/ccohH8g1.s 			page 71


 2344 01c6 1803     		.2byte	0x318
 2345 01c8 E3000000 		.4byte	0xe3
 2346 01cc 20       		.byte	0x20
 2347 01cd 00       		.byte	0
 2348 01ce 0B       		.uleb128 0xb
 2349 01cf 82010000 		.4byte	.LASF31
 2350 01d3 06       		.byte	0x6
 2351 01d4 2103     		.2byte	0x321
 2352 01d6 52010000 		.4byte	0x152
 2353 01da 0C       		.uleb128 0xc
 2354 01db 10       		.byte	0x10
 2355 01dc 06       		.byte	0x6
 2356 01dd 2703     		.2byte	0x327
 2357 01df 4C020000 		.4byte	0x24c
 2358 01e3 0D       		.uleb128 0xd
 2359 01e4 52445000 		.ascii	"RDP\000"
 2360 01e8 06       		.byte	0x6
 2361 01e9 2903     		.2byte	0x329
 2362 01eb C3000000 		.4byte	0xc3
 2363 01ef 00       		.byte	0
 2364 01f0 0E       		.uleb128 0xe
 2365 01f1 BD030000 		.4byte	.LASF32
 2366 01f5 06       		.byte	0x6
 2367 01f6 2A03     		.2byte	0x32a
 2368 01f8 C3000000 		.4byte	0xc3
 2369 01fc 02       		.byte	0x2
 2370 01fd 0E       		.uleb128 0xe
 2371 01fe F2030000 		.4byte	.LASF33
 2372 0202 06       		.byte	0x6
 2373 0203 2B03     		.2byte	0x32b
 2374 0205 C3000000 		.4byte	0xc3
 2375 0209 04       		.byte	0x4
 2376 020a 0E       		.uleb128 0xe
 2377 020b F8030000 		.4byte	.LASF34
 2378 020f 06       		.byte	0x6
 2379 0210 2C03     		.2byte	0x32c
 2380 0212 C3000000 		.4byte	0xc3
 2381 0216 06       		.byte	0x6
 2382 0217 0E       		.uleb128 0xe
 2383 0218 49060000 		.4byte	.LASF35
 2384 021c 06       		.byte	0x6
 2385 021d 2D03     		.2byte	0x32d
 2386 021f C3000000 		.4byte	0xc3
 2387 0223 08       		.byte	0x8
 2388 0224 0E       		.uleb128 0xe
 2389 0225 4E060000 		.4byte	.LASF36
 2390 0229 06       		.byte	0x6
 2391 022a 2E03     		.2byte	0x32e
 2392 022c C3000000 		.4byte	0xc3
 2393 0230 0A       		.byte	0xa
 2394 0231 0E       		.uleb128 0xe
 2395 0232 53060000 		.4byte	.LASF37
 2396 0236 06       		.byte	0x6
 2397 0237 2F03     		.2byte	0x32f
 2398 0239 C3000000 		.4byte	0xc3
 2399 023d 0C       		.byte	0xc
 2400 023e 0E       		.uleb128 0xe
ARM GAS  /tmp/ccohH8g1.s 			page 72


 2401 023f 58060000 		.4byte	.LASF38
 2402 0243 06       		.byte	0x6
 2403 0244 3003     		.2byte	0x330
 2404 0246 C3000000 		.4byte	0xc3
 2405 024a 0E       		.byte	0xe
 2406 024b 00       		.byte	0
 2407 024c 0B       		.uleb128 0xb
 2408 024d FA080000 		.4byte	.LASF39
 2409 0251 06       		.byte	0x6
 2410 0252 3103     		.2byte	0x331
 2411 0254 DA010000 		.4byte	0x1da
 2412 0258 0F       		.uleb128 0xf
 2413 0259 01       		.byte	0x1
 2414 025a 37000000 		.4byte	0x37
 2415 025e 07       		.byte	0x7
 2416 025f 33       		.byte	0x33
 2417 0260 83020000 		.4byte	0x283
 2418 0264 09       		.uleb128 0x9
 2419 0265 AE010000 		.4byte	.LASF40
 2420 0269 01       		.byte	0x1
 2421 026a 09       		.uleb128 0x9
 2422 026b 63050000 		.4byte	.LASF41
 2423 026f 02       		.byte	0x2
 2424 0270 09       		.uleb128 0x9
 2425 0271 F3090000 		.4byte	.LASF42
 2426 0275 03       		.byte	0x3
 2427 0276 09       		.uleb128 0x9
 2428 0277 130A0000 		.4byte	.LASF43
 2429 027b 04       		.byte	0x4
 2430 027c 09       		.uleb128 0x9
 2431 027d 90010000 		.4byte	.LASF44
 2432 0281 05       		.byte	0x5
 2433 0282 00       		.byte	0
 2434 0283 03       		.uleb128 0x3
 2435 0284 C0050000 		.4byte	.LASF45
 2436 0288 07       		.byte	0x7
 2437 0289 39       		.byte	0x39
 2438 028a 58020000 		.4byte	0x258
 2439 028e 10       		.uleb128 0x10
 2440 028f 11       		.uleb128 0x11
 2441 0290 04       		.byte	0x4
 2442 0291 8E020000 		.4byte	0x28e
 2443 0295 12       		.uleb128 0x12
 2444 0296 49000000 		.4byte	0x49
 2445 029a A5020000 		.4byte	0x2a5
 2446 029e 13       		.uleb128 0x13
 2447 029f E8000000 		.4byte	0xe8
 2448 02a3 02       		.byte	0x2
 2449 02a4 00       		.byte	0
 2450 02a5 06       		.uleb128 0x6
 2451 02a6 36010000 		.4byte	.LASF46
 2452 02aa 08       		.byte	0x8
 2453 02ab 6301     		.2byte	0x163
 2454 02ad 95020000 		.4byte	0x295
 2455 02b1 06       		.uleb128 0x6
 2456 02b2 06050000 		.4byte	.LASF47
 2457 02b6 08       		.byte	0x8
ARM GAS  /tmp/ccohH8g1.s 			page 73


 2458 02b7 6301     		.2byte	0x163
 2459 02b9 95020000 		.4byte	0x295
 2460 02bd 06       		.uleb128 0x6
 2461 02be 9E010000 		.4byte	.LASF48
 2462 02c2 08       		.byte	0x8
 2463 02c3 6401     		.2byte	0x164
 2464 02c5 AD000000 		.4byte	0xad
 2465 02c9 06       		.uleb128 0x6
 2466 02ca F5040000 		.4byte	.LASF49
 2467 02ce 08       		.byte	0x8
 2468 02cf 6401     		.2byte	0x164
 2469 02d1 AD000000 		.4byte	0xad
 2470 02d5 06       		.uleb128 0x6
 2471 02d6 0C050000 		.4byte	.LASF50
 2472 02da 08       		.byte	0x8
 2473 02db 6401     		.2byte	0x164
 2474 02dd AD000000 		.4byte	0xad
 2475 02e1 06       		.uleb128 0x6
 2476 02e2 DA010000 		.4byte	.LASF51
 2477 02e6 08       		.byte	0x8
 2478 02e7 6501     		.2byte	0x165
 2479 02e9 ED020000 		.4byte	0x2ed
 2480 02ed 02       		.uleb128 0x2
 2481 02ee 04       		.byte	0x4
 2482 02ef 04       		.byte	0x4
 2483 02f0 5D050000 		.4byte	.LASF52
 2484 02f4 06       		.uleb128 0x6
 2485 02f5 72050000 		.4byte	.LASF53
 2486 02f9 08       		.byte	0x8
 2487 02fa 6601     		.2byte	0x166
 2488 02fc ED020000 		.4byte	0x2ed
 2489 0300 06       		.uleb128 0x6
 2490 0301 E6070000 		.4byte	.LASF54
 2491 0305 08       		.byte	0x8
 2492 0306 6601     		.2byte	0x166
 2493 0308 ED020000 		.4byte	0x2ed
 2494 030c 14       		.uleb128 0x14
 2495 030d 59617700 		.ascii	"Yaw\000"
 2496 0311 08       		.byte	0x8
 2497 0312 6601     		.2byte	0x166
 2498 0314 ED020000 		.4byte	0x2ed
 2499 0318 02       		.uleb128 0x2
 2500 0319 08       		.byte	0x8
 2501 031a 04       		.byte	0x4
 2502 031b 6B070000 		.4byte	.LASF55
 2503 031f 03       		.uleb128 0x3
 2504 0320 A1050000 		.4byte	.LASF56
 2505 0324 09       		.byte	0x9
 2506 0325 07       		.byte	0x7
 2507 0326 94000000 		.4byte	0x94
 2508 032a 03       		.uleb128 0x3
 2509 032b 68010000 		.4byte	.LASF57
 2510 032f 0A       		.byte	0xa
 2511 0330 2C       		.byte	0x2c
 2512 0331 6D000000 		.4byte	0x6d
 2513 0335 03       		.uleb128 0x3
 2514 0336 4B070000 		.4byte	.LASF58
ARM GAS  /tmp/ccohH8g1.s 			page 74


 2515 033a 0A       		.byte	0xa
 2516 033b 72       		.byte	0x72
 2517 033c 6D000000 		.4byte	0x6d
 2518 0340 0B       		.uleb128 0xb
 2519 0341 56050000 		.4byte	.LASF59
 2520 0345 0B       		.byte	0xb
 2521 0346 6501     		.2byte	0x165
 2522 0348 9B000000 		.4byte	0x9b
 2523 034c 15       		.uleb128 0x15
 2524 034d 04       		.byte	0x4
 2525 034e 0A       		.byte	0xa
 2526 034f A6       		.byte	0xa6
 2527 0350 6B030000 		.4byte	0x36b
 2528 0354 16       		.uleb128 0x16
 2529 0355 33040000 		.4byte	.LASF60
 2530 0359 0A       		.byte	0xa
 2531 035a A8       		.byte	0xa8
 2532 035b 40030000 		.4byte	0x340
 2533 035f 16       		.uleb128 0x16
 2534 0360 96030000 		.4byte	.LASF61
 2535 0364 0A       		.byte	0xa
 2536 0365 A9       		.byte	0xa9
 2537 0366 6B030000 		.4byte	0x36b
 2538 036a 00       		.byte	0
 2539 036b 12       		.uleb128 0x12
 2540 036c 37000000 		.4byte	0x37
 2541 0370 7B030000 		.4byte	0x37b
 2542 0374 13       		.uleb128 0x13
 2543 0375 E8000000 		.4byte	0xe8
 2544 0379 03       		.byte	0x3
 2545 037a 00       		.byte	0
 2546 037b 17       		.uleb128 0x17
 2547 037c 08       		.byte	0x8
 2548 037d 0A       		.byte	0xa
 2549 037e A3       		.byte	0xa3
 2550 037f 9C030000 		.4byte	0x39c
 2551 0383 18       		.uleb128 0x18
 2552 0384 F9060000 		.4byte	.LASF62
 2553 0388 0A       		.byte	0xa
 2554 0389 A5       		.byte	0xa5
 2555 038a 94000000 		.4byte	0x94
 2556 038e 00       		.byte	0
 2557 038f 18       		.uleb128 0x18
 2558 0390 01070000 		.4byte	.LASF63
 2559 0394 0A       		.byte	0xa
 2560 0395 AA       		.byte	0xaa
 2561 0396 4C030000 		.4byte	0x34c
 2562 039a 04       		.byte	0x4
 2563 039b 00       		.byte	0
 2564 039c 03       		.uleb128 0x3
 2565 039d 91050000 		.4byte	.LASF64
 2566 03a1 0A       		.byte	0xa
 2567 03a2 AB       		.byte	0xab
 2568 03a3 7B030000 		.4byte	0x37b
 2569 03a7 03       		.uleb128 0x3
 2570 03a8 05060000 		.4byte	.LASF65
 2571 03ac 0A       		.byte	0xa
ARM GAS  /tmp/ccohH8g1.s 			page 75


 2572 03ad AF       		.byte	0xaf
 2573 03ae 1F030000 		.4byte	0x31f
 2574 03b2 19       		.uleb128 0x19
 2575 03b3 04       		.byte	0x4
 2576 03b4 11       		.uleb128 0x11
 2577 03b5 04       		.byte	0x4
 2578 03b6 BA030000 		.4byte	0x3ba
 2579 03ba 02       		.uleb128 0x2
 2580 03bb 01       		.byte	0x1
 2581 03bc 08       		.byte	0x8
 2582 03bd 83070000 		.4byte	.LASF66
 2583 03c1 1A       		.uleb128 0x1a
 2584 03c2 BA030000 		.4byte	0x3ba
 2585 03c6 03       		.uleb128 0x3
 2586 03c7 88080000 		.4byte	.LASF67
 2587 03cb 0C       		.byte	0xc
 2588 03cc 16       		.byte	0x16
 2589 03cd 7F000000 		.4byte	0x7f
 2590 03d1 1B       		.uleb128 0x1b
 2591 03d2 09030000 		.4byte	.LASF72
 2592 03d6 18       		.byte	0x18
 2593 03d7 0C       		.byte	0xc
 2594 03d8 2D       		.byte	0x2d
 2595 03d9 24040000 		.4byte	0x424
 2596 03dd 18       		.uleb128 0x18
 2597 03de FB070000 		.4byte	.LASF68
 2598 03e2 0C       		.byte	0xc
 2599 03e3 2F       		.byte	0x2f
 2600 03e4 24040000 		.4byte	0x424
 2601 03e8 00       		.byte	0
 2602 03e9 1C       		.uleb128 0x1c
 2603 03ea 5F6B00   		.ascii	"_k\000"
 2604 03ed 0C       		.byte	0xc
 2605 03ee 30       		.byte	0x30
 2606 03ef 94000000 		.4byte	0x94
 2607 03f3 04       		.byte	0x4
 2608 03f4 18       		.uleb128 0x18
 2609 03f5 C4060000 		.4byte	.LASF69
 2610 03f9 0C       		.byte	0xc
 2611 03fa 30       		.byte	0x30
 2612 03fb 94000000 		.4byte	0x94
 2613 03ff 08       		.byte	0x8
 2614 0400 18       		.uleb128 0x18
 2615 0401 61030000 		.4byte	.LASF70
 2616 0405 0C       		.byte	0xc
 2617 0406 30       		.byte	0x30
 2618 0407 94000000 		.4byte	0x94
 2619 040b 0C       		.byte	0xc
 2620 040c 18       		.uleb128 0x18
 2621 040d 29090000 		.4byte	.LASF71
 2622 0411 0C       		.byte	0xc
 2623 0412 30       		.byte	0x30
 2624 0413 94000000 		.4byte	0x94
 2625 0417 10       		.byte	0x10
 2626 0418 1C       		.uleb128 0x1c
 2627 0419 5F7800   		.ascii	"_x\000"
 2628 041c 0C       		.byte	0xc
ARM GAS  /tmp/ccohH8g1.s 			page 76


 2629 041d 31       		.byte	0x31
 2630 041e 2A040000 		.4byte	0x42a
 2631 0422 14       		.byte	0x14
 2632 0423 00       		.byte	0
 2633 0424 11       		.uleb128 0x11
 2634 0425 04       		.byte	0x4
 2635 0426 D1030000 		.4byte	0x3d1
 2636 042a 12       		.uleb128 0x12
 2637 042b C6030000 		.4byte	0x3c6
 2638 042f 3A040000 		.4byte	0x43a
 2639 0433 13       		.uleb128 0x13
 2640 0434 E8000000 		.4byte	0xe8
 2641 0438 00       		.byte	0
 2642 0439 00       		.byte	0
 2643 043a 1B       		.uleb128 0x1b
 2644 043b 71030000 		.4byte	.LASF73
 2645 043f 24       		.byte	0x24
 2646 0440 0C       		.byte	0xc
 2647 0441 35       		.byte	0x35
 2648 0442 B3040000 		.4byte	0x4b3
 2649 0446 18       		.uleb128 0x18
 2650 0447 57010000 		.4byte	.LASF74
 2651 044b 0C       		.byte	0xc
 2652 044c 37       		.byte	0x37
 2653 044d 94000000 		.4byte	0x94
 2654 0451 00       		.byte	0
 2655 0452 18       		.uleb128 0x18
 2656 0453 EA090000 		.4byte	.LASF75
 2657 0457 0C       		.byte	0xc
 2658 0458 38       		.byte	0x38
 2659 0459 94000000 		.4byte	0x94
 2660 045d 04       		.byte	0x4
 2661 045e 18       		.uleb128 0x18
 2662 045f 49030000 		.4byte	.LASF76
 2663 0463 0C       		.byte	0xc
 2664 0464 39       		.byte	0x39
 2665 0465 94000000 		.4byte	0x94
 2666 0469 08       		.byte	0x8
 2667 046a 18       		.uleb128 0x18
 2668 046b 480A0000 		.4byte	.LASF77
 2669 046f 0C       		.byte	0xc
 2670 0470 3A       		.byte	0x3a
 2671 0471 94000000 		.4byte	0x94
 2672 0475 0C       		.byte	0xc
 2673 0476 18       		.uleb128 0x18
 2674 0477 EC040000 		.4byte	.LASF78
 2675 047b 0C       		.byte	0xc
 2676 047c 3B       		.byte	0x3b
 2677 047d 94000000 		.4byte	0x94
 2678 0481 10       		.byte	0x10
 2679 0482 18       		.uleb128 0x18
 2680 0483 85040000 		.4byte	.LASF79
 2681 0487 0C       		.byte	0xc
 2682 0488 3C       		.byte	0x3c
 2683 0489 94000000 		.4byte	0x94
 2684 048d 14       		.byte	0x14
 2685 048e 18       		.uleb128 0x18
ARM GAS  /tmp/ccohH8g1.s 			page 77


 2686 048f 37070000 		.4byte	.LASF80
 2687 0493 0C       		.byte	0xc
 2688 0494 3D       		.byte	0x3d
 2689 0495 94000000 		.4byte	0x94
 2690 0499 18       		.byte	0x18
 2691 049a 18       		.uleb128 0x18
 2692 049b 0E060000 		.4byte	.LASF81
 2693 049f 0C       		.byte	0xc
 2694 04a0 3E       		.byte	0x3e
 2695 04a1 94000000 		.4byte	0x94
 2696 04a5 1C       		.byte	0x1c
 2697 04a6 18       		.uleb128 0x18
 2698 04a7 7A000000 		.4byte	.LASF82
 2699 04ab 0C       		.byte	0xc
 2700 04ac 3F       		.byte	0x3f
 2701 04ad 94000000 		.4byte	0x94
 2702 04b1 20       		.byte	0x20
 2703 04b2 00       		.byte	0
 2704 04b3 1D       		.uleb128 0x1d
 2705 04b4 CC010000 		.4byte	.LASF83
 2706 04b8 0801     		.2byte	0x108
 2707 04ba 0C       		.byte	0xc
 2708 04bb 48       		.byte	0x48
 2709 04bc F3040000 		.4byte	0x4f3
 2710 04c0 18       		.uleb128 0x18
 2711 04c1 3E000000 		.4byte	.LASF84
 2712 04c5 0C       		.byte	0xc
 2713 04c6 49       		.byte	0x49
 2714 04c7 F3040000 		.4byte	0x4f3
 2715 04cb 00       		.byte	0
 2716 04cc 18       		.uleb128 0x18
 2717 04cd 00000000 		.4byte	.LASF85
 2718 04d1 0C       		.byte	0xc
 2719 04d2 4A       		.byte	0x4a
 2720 04d3 F3040000 		.4byte	0x4f3
 2721 04d7 80       		.byte	0x80
 2722 04d8 1E       		.uleb128 0x1e
 2723 04d9 18080000 		.4byte	.LASF86
 2724 04dd 0C       		.byte	0xc
 2725 04de 4C       		.byte	0x4c
 2726 04df C6030000 		.4byte	0x3c6
 2727 04e3 0001     		.2byte	0x100
 2728 04e5 1E       		.uleb128 0x1e
 2729 04e6 42020000 		.4byte	.LASF87
 2730 04ea 0C       		.byte	0xc
 2731 04eb 4F       		.byte	0x4f
 2732 04ec C6030000 		.4byte	0x3c6
 2733 04f0 0401     		.2byte	0x104
 2734 04f2 00       		.byte	0
 2735 04f3 12       		.uleb128 0x12
 2736 04f4 B2030000 		.4byte	0x3b2
 2737 04f8 03050000 		.4byte	0x503
 2738 04fc 13       		.uleb128 0x13
 2739 04fd E8000000 		.4byte	0xe8
 2740 0501 1F       		.byte	0x1f
 2741 0502 00       		.byte	0
 2742 0503 1D       		.uleb128 0x1d
ARM GAS  /tmp/ccohH8g1.s 			page 78


 2743 0504 34050000 		.4byte	.LASF88
 2744 0508 9001     		.2byte	0x190
 2745 050a 0C       		.byte	0xc
 2746 050b 5B       		.byte	0x5b
 2747 050c 41050000 		.4byte	0x541
 2748 0510 18       		.uleb128 0x18
 2749 0511 FB070000 		.4byte	.LASF68
 2750 0515 0C       		.byte	0xc
 2751 0516 5C       		.byte	0x5c
 2752 0517 41050000 		.4byte	0x541
 2753 051b 00       		.byte	0
 2754 051c 18       		.uleb128 0x18
 2755 051d 6F060000 		.4byte	.LASF89
 2756 0521 0C       		.byte	0xc
 2757 0522 5D       		.byte	0x5d
 2758 0523 94000000 		.4byte	0x94
 2759 0527 04       		.byte	0x4
 2760 0528 18       		.uleb128 0x18
 2761 0529 DD020000 		.4byte	.LASF90
 2762 052d 0C       		.byte	0xc
 2763 052e 5F       		.byte	0x5f
 2764 052f 47050000 		.4byte	0x547
 2765 0533 08       		.byte	0x8
 2766 0534 18       		.uleb128 0x18
 2767 0535 CC010000 		.4byte	.LASF83
 2768 0539 0C       		.byte	0xc
 2769 053a 60       		.byte	0x60
 2770 053b B3040000 		.4byte	0x4b3
 2771 053f 88       		.byte	0x88
 2772 0540 00       		.byte	0
 2773 0541 11       		.uleb128 0x11
 2774 0542 04       		.byte	0x4
 2775 0543 03050000 		.4byte	0x503
 2776 0547 12       		.uleb128 0x12
 2777 0548 8F020000 		.4byte	0x28f
 2778 054c 57050000 		.4byte	0x557
 2779 0550 13       		.uleb128 0x13
 2780 0551 E8000000 		.4byte	0xe8
 2781 0555 1F       		.byte	0x1f
 2782 0556 00       		.byte	0
 2783 0557 1B       		.uleb128 0x1b
 2784 0558 18060000 		.4byte	.LASF91
 2785 055c 08       		.byte	0x8
 2786 055d 0C       		.byte	0xc
 2787 055e 73       		.byte	0x73
 2788 055f 7C050000 		.4byte	0x57c
 2789 0563 18       		.uleb128 0x18
 2790 0564 A8010000 		.4byte	.LASF92
 2791 0568 0C       		.byte	0xc
 2792 0569 74       		.byte	0x74
 2793 056a 7C050000 		.4byte	0x57c
 2794 056e 00       		.byte	0
 2795 056f 18       		.uleb128 0x18
 2796 0570 9F070000 		.4byte	.LASF93
 2797 0574 0C       		.byte	0xc
 2798 0575 75       		.byte	0x75
 2799 0576 94000000 		.4byte	0x94
ARM GAS  /tmp/ccohH8g1.s 			page 79


 2800 057a 04       		.byte	0x4
 2801 057b 00       		.byte	0
 2802 057c 11       		.uleb128 0x11
 2803 057d 04       		.byte	0x4
 2804 057e 37000000 		.4byte	0x37
 2805 0582 1B       		.uleb128 0x1b
 2806 0583 41060000 		.4byte	.LASF94
 2807 0587 68       		.byte	0x68
 2808 0588 0C       		.byte	0xc
 2809 0589 B3       		.byte	0xb3
 2810 058a AC060000 		.4byte	0x6ac
 2811 058e 1C       		.uleb128 0x1c
 2812 058f 5F7000   		.ascii	"_p\000"
 2813 0592 0C       		.byte	0xc
 2814 0593 B4       		.byte	0xb4
 2815 0594 7C050000 		.4byte	0x57c
 2816 0598 00       		.byte	0
 2817 0599 1C       		.uleb128 0x1c
 2818 059a 5F7200   		.ascii	"_r\000"
 2819 059d 0C       		.byte	0xc
 2820 059e B5       		.byte	0xb5
 2821 059f 94000000 		.4byte	0x94
 2822 05a3 04       		.byte	0x4
 2823 05a4 1C       		.uleb128 0x1c
 2824 05a5 5F7700   		.ascii	"_w\000"
 2825 05a8 0C       		.byte	0xc
 2826 05a9 B6       		.byte	0xb6
 2827 05aa 94000000 		.4byte	0x94
 2828 05ae 08       		.byte	0x8
 2829 05af 18       		.uleb128 0x18
 2830 05b0 44090000 		.4byte	.LASF95
 2831 05b4 0C       		.byte	0xc
 2832 05b5 B7       		.byte	0xb7
 2833 05b6 49000000 		.4byte	0x49
 2834 05ba 0C       		.byte	0xc
 2835 05bb 18       		.uleb128 0x18
 2836 05bc D4030000 		.4byte	.LASF96
 2837 05c0 0C       		.byte	0xc
 2838 05c1 B8       		.byte	0xb8
 2839 05c2 49000000 		.4byte	0x49
 2840 05c6 0E       		.byte	0xe
 2841 05c7 1C       		.uleb128 0x1c
 2842 05c8 5F626600 		.ascii	"_bf\000"
 2843 05cc 0C       		.byte	0xc
 2844 05cd B9       		.byte	0xb9
 2845 05ce 57050000 		.4byte	0x557
 2846 05d2 10       		.byte	0x10
 2847 05d3 18       		.uleb128 0x18
 2848 05d4 00010000 		.4byte	.LASF97
 2849 05d8 0C       		.byte	0xc
 2850 05d9 BA       		.byte	0xba
 2851 05da 94000000 		.4byte	0x94
 2852 05de 18       		.byte	0x18
 2853 05df 18       		.uleb128 0x18
 2854 05e0 EE010000 		.4byte	.LASF98
 2855 05e4 0C       		.byte	0xc
 2856 05e5 C1       		.byte	0xc1
ARM GAS  /tmp/ccohH8g1.s 			page 80


 2857 05e6 B2030000 		.4byte	0x3b2
 2858 05ea 1C       		.byte	0x1c
 2859 05eb 18       		.uleb128 0x18
 2860 05ec 5B030000 		.4byte	.LASF99
 2861 05f0 0C       		.byte	0xc
 2862 05f1 C3       		.byte	0xc3
 2863 05f2 07080000 		.4byte	0x807
 2864 05f6 20       		.byte	0x20
 2865 05f7 18       		.uleb128 0x18
 2866 05f8 B9050000 		.4byte	.LASF100
 2867 05fc 0C       		.byte	0xc
 2868 05fd C5       		.byte	0xc5
 2869 05fe 31080000 		.4byte	0x831
 2870 0602 24       		.byte	0x24
 2871 0603 18       		.uleb128 0x18
 2872 0604 1F070000 		.4byte	.LASF101
 2873 0608 0C       		.byte	0xc
 2874 0609 C8       		.byte	0xc8
 2875 060a 55080000 		.4byte	0x855
 2876 060e 28       		.byte	0x28
 2877 060f 18       		.uleb128 0x18
 2878 0610 6F010000 		.4byte	.LASF102
 2879 0614 0C       		.byte	0xc
 2880 0615 C9       		.byte	0xc9
 2881 0616 6F080000 		.4byte	0x86f
 2882 061a 2C       		.byte	0x2c
 2883 061b 1C       		.uleb128 0x1c
 2884 061c 5F756200 		.ascii	"_ub\000"
 2885 0620 0C       		.byte	0xc
 2886 0621 CC       		.byte	0xcc
 2887 0622 57050000 		.4byte	0x557
 2888 0626 30       		.byte	0x30
 2889 0627 1C       		.uleb128 0x1c
 2890 0628 5F757000 		.ascii	"_up\000"
 2891 062c 0C       		.byte	0xc
 2892 062d CD       		.byte	0xcd
 2893 062e 7C050000 		.4byte	0x57c
 2894 0632 38       		.byte	0x38
 2895 0633 1C       		.uleb128 0x1c
 2896 0634 5F757200 		.ascii	"_ur\000"
 2897 0638 0C       		.byte	0xc
 2898 0639 CE       		.byte	0xce
 2899 063a 94000000 		.4byte	0x94
 2900 063e 3C       		.byte	0x3c
 2901 063f 18       		.uleb128 0x18
 2902 0640 5F020000 		.4byte	.LASF103
 2903 0644 0C       		.byte	0xc
 2904 0645 D1       		.byte	0xd1
 2905 0646 75080000 		.4byte	0x875
 2906 064a 40       		.byte	0x40
 2907 064b 18       		.uleb128 0x18
 2908 064c 94090000 		.4byte	.LASF104
 2909 0650 0C       		.byte	0xc
 2910 0651 D2       		.byte	0xd2
 2911 0652 85080000 		.4byte	0x885
 2912 0656 43       		.byte	0x43
 2913 0657 1C       		.uleb128 0x1c
ARM GAS  /tmp/ccohH8g1.s 			page 81


 2914 0658 5F6C6200 		.ascii	"_lb\000"
 2915 065c 0C       		.byte	0xc
 2916 065d D5       		.byte	0xd5
 2917 065e 57050000 		.4byte	0x557
 2918 0662 44       		.byte	0x44
 2919 0663 18       		.uleb128 0x18
 2920 0664 88070000 		.4byte	.LASF105
 2921 0668 0C       		.byte	0xc
 2922 0669 D8       		.byte	0xd8
 2923 066a 94000000 		.4byte	0x94
 2924 066e 4C       		.byte	0x4c
 2925 066f 18       		.uleb128 0x18
 2926 0670 B6020000 		.4byte	.LASF106
 2927 0674 0C       		.byte	0xc
 2928 0675 D9       		.byte	0xd9
 2929 0676 2A030000 		.4byte	0x32a
 2930 067a 50       		.byte	0x50
 2931 067b 18       		.uleb128 0x18
 2932 067c DA030000 		.4byte	.LASF107
 2933 0680 0C       		.byte	0xc
 2934 0681 DC       		.byte	0xdc
 2935 0682 CA060000 		.4byte	0x6ca
 2936 0686 54       		.byte	0x54
 2937 0687 18       		.uleb128 0x18
 2938 0688 47040000 		.4byte	.LASF108
 2939 068c 0C       		.byte	0xc
 2940 068d E0       		.byte	0xe0
 2941 068e A7030000 		.4byte	0x3a7
 2942 0692 58       		.byte	0x58
 2943 0693 18       		.uleb128 0x18
 2944 0694 85000000 		.4byte	.LASF109
 2945 0698 0C       		.byte	0xc
 2946 0699 E2       		.byte	0xe2
 2947 069a 9C030000 		.4byte	0x39c
 2948 069e 5C       		.byte	0x5c
 2949 069f 18       		.uleb128 0x18
 2950 06a0 1F060000 		.4byte	.LASF110
 2951 06a4 0C       		.byte	0xc
 2952 06a5 E3       		.byte	0xe3
 2953 06a6 94000000 		.4byte	0x94
 2954 06aa 64       		.byte	0x64
 2955 06ab 00       		.byte	0
 2956 06ac 1F       		.uleb128 0x1f
 2957 06ad 94000000 		.4byte	0x94
 2958 06b1 CA060000 		.4byte	0x6ca
 2959 06b5 20       		.uleb128 0x20
 2960 06b6 CA060000 		.4byte	0x6ca
 2961 06ba 20       		.uleb128 0x20
 2962 06bb B2030000 		.4byte	0x3b2
 2963 06bf 20       		.uleb128 0x20
 2964 06c0 B4030000 		.4byte	0x3b4
 2965 06c4 20       		.uleb128 0x20
 2966 06c5 94000000 		.4byte	0x94
 2967 06c9 00       		.byte	0
 2968 06ca 11       		.uleb128 0x11
 2969 06cb 04       		.byte	0x4
 2970 06cc D5060000 		.4byte	0x6d5
ARM GAS  /tmp/ccohH8g1.s 			page 82


 2971 06d0 1A       		.uleb128 0x1a
 2972 06d1 CA060000 		.4byte	0x6ca
 2973 06d5 21       		.uleb128 0x21
 2974 06d6 CC060000 		.4byte	.LASF111
 2975 06da 2804     		.2byte	0x428
 2976 06dc 0C       		.byte	0xc
 2977 06dd 3802     		.2byte	0x238
 2978 06df 07080000 		.4byte	0x807
 2979 06e3 0E       		.uleb128 0xe
 2980 06e4 7C070000 		.4byte	.LASF112
 2981 06e8 0C       		.byte	0xc
 2982 06e9 3A02     		.2byte	0x23a
 2983 06eb 94000000 		.4byte	0x94
 2984 06ef 00       		.byte	0
 2985 06f0 0E       		.uleb128 0xe
 2986 06f1 4A020000 		.4byte	.LASF113
 2987 06f5 0C       		.byte	0xc
 2988 06f6 3F02     		.2byte	0x23f
 2989 06f8 DC080000 		.4byte	0x8dc
 2990 06fc 04       		.byte	0x4
 2991 06fd 0E       		.uleb128 0xe
 2992 06fe AD030000 		.4byte	.LASF114
 2993 0702 0C       		.byte	0xc
 2994 0703 3F02     		.2byte	0x23f
 2995 0705 DC080000 		.4byte	0x8dc
 2996 0709 08       		.byte	0x8
 2997 070a 0E       		.uleb128 0xe
 2998 070b 01030000 		.4byte	.LASF115
 2999 070f 0C       		.byte	0xc
 3000 0710 3F02     		.2byte	0x23f
 3001 0712 DC080000 		.4byte	0x8dc
 3002 0716 0C       		.byte	0xc
 3003 0717 0E       		.uleb128 0xe
 3004 0718 6A060000 		.4byte	.LASF116
 3005 071c 0C       		.byte	0xc
 3006 071d 4102     		.2byte	0x241
 3007 071f 94000000 		.4byte	0x94
 3008 0723 10       		.byte	0x10
 3009 0724 0E       		.uleb128 0xe
 3010 0725 68000000 		.4byte	.LASF117
 3011 0729 0C       		.byte	0xc
 3012 072a 4202     		.2byte	0x242
 3013 072c BE0A0000 		.4byte	0xabe
 3014 0730 14       		.byte	0x14
 3015 0731 0E       		.uleb128 0xe
 3016 0732 DE080000 		.4byte	.LASF118
 3017 0736 0C       		.byte	0xc
 3018 0737 4402     		.2byte	0x244
 3019 0739 94000000 		.4byte	0x94
 3020 073d 30       		.byte	0x30
 3021 073e 0E       		.uleb128 0xe
 3022 073f 74060000 		.4byte	.LASF119
 3023 0743 0C       		.byte	0xc
 3024 0744 4502     		.2byte	0x245
 3025 0746 2B080000 		.4byte	0x82b
 3026 074a 34       		.byte	0x34
 3027 074b 0E       		.uleb128 0xe
ARM GAS  /tmp/ccohH8g1.s 			page 83


 3028 074c 3C050000 		.4byte	.LASF120
 3029 0750 0C       		.byte	0xc
 3030 0751 4702     		.2byte	0x247
 3031 0753 94000000 		.4byte	0x94
 3032 0757 38       		.byte	0x38
 3033 0758 0E       		.uleb128 0xe
 3034 0759 91060000 		.4byte	.LASF121
 3035 075d 0C       		.byte	0xc
 3036 075e 4902     		.2byte	0x249
 3037 0760 D90A0000 		.4byte	0xad9
 3038 0764 3C       		.byte	0x3c
 3039 0765 0E       		.uleb128 0xe
 3040 0766 2B040000 		.4byte	.LASF122
 3041 076a 0C       		.byte	0xc
 3042 076b 4C02     		.2byte	0x24c
 3043 076d 24040000 		.4byte	0x424
 3044 0771 40       		.byte	0x40
 3045 0772 0E       		.uleb128 0xe
 3046 0773 65020000 		.4byte	.LASF123
 3047 0777 0C       		.byte	0xc
 3048 0778 4D02     		.2byte	0x24d
 3049 077a 94000000 		.4byte	0x94
 3050 077e 44       		.byte	0x44
 3051 077f 0E       		.uleb128 0xe
 3052 0780 300A0000 		.4byte	.LASF124
 3053 0784 0C       		.byte	0xc
 3054 0785 4E02     		.2byte	0x24e
 3055 0787 24040000 		.4byte	0x424
 3056 078b 48       		.byte	0x48
 3057 078c 0E       		.uleb128 0xe
 3058 078d 27060000 		.4byte	.LASF125
 3059 0791 0C       		.byte	0xc
 3060 0792 4F02     		.2byte	0x24f
 3061 0794 DF0A0000 		.4byte	0xadf
 3062 0798 4C       		.byte	0x4c
 3063 0799 0E       		.uleb128 0xe
 3064 079a B5030000 		.4byte	.LASF126
 3065 079e 0C       		.byte	0xc
 3066 079f 5202     		.2byte	0x252
 3067 07a1 94000000 		.4byte	0x94
 3068 07a5 50       		.byte	0x50
 3069 07a6 0E       		.uleb128 0xe
 3070 07a7 AE020000 		.4byte	.LASF127
 3071 07ab 0C       		.byte	0xc
 3072 07ac 5302     		.2byte	0x253
 3073 07ae B4030000 		.4byte	0x3b4
 3074 07b2 54       		.byte	0x54
 3075 07b3 0E       		.uleb128 0xe
 3076 07b4 39040000 		.4byte	.LASF128
 3077 07b8 0C       		.byte	0xc
 3078 07b9 7602     		.2byte	0x276
 3079 07bb 9C0A0000 		.4byte	0xa9c
 3080 07bf 58       		.byte	0x58
 3081 07c0 22       		.uleb128 0x22
 3082 07c1 34050000 		.4byte	.LASF88
 3083 07c5 0C       		.byte	0xc
 3084 07c6 7A02     		.2byte	0x27a
ARM GAS  /tmp/ccohH8g1.s 			page 84


 3085 07c8 41050000 		.4byte	0x541
 3086 07cc 4801     		.2byte	0x148
 3087 07ce 22       		.uleb128 0x22
 3088 07cf 98000000 		.4byte	.LASF129
 3089 07d3 0C       		.byte	0xc
 3090 07d4 7B02     		.2byte	0x27b
 3091 07d6 03050000 		.4byte	0x503
 3092 07da 4C01     		.2byte	0x14c
 3093 07dc 22       		.uleb128 0x22
 3094 07dd 62090000 		.4byte	.LASF130
 3095 07e1 0C       		.byte	0xc
 3096 07e2 7F02     		.2byte	0x27f
 3097 07e4 F00A0000 		.4byte	0xaf0
 3098 07e8 DC02     		.2byte	0x2dc
 3099 07ea 22       		.uleb128 0x22
 3100 07eb F6010000 		.4byte	.LASF131
 3101 07ef 0C       		.byte	0xc
 3102 07f0 8402     		.2byte	0x284
 3103 07f2 A1080000 		.4byte	0x8a1
 3104 07f6 E002     		.2byte	0x2e0
 3105 07f8 22       		.uleb128 0x22
 3106 07f9 C7010000 		.4byte	.LASF132
 3107 07fd 0C       		.byte	0xc
 3108 07fe 8502     		.2byte	0x285
 3109 0800 FC0A0000 		.4byte	0xafc
 3110 0804 EC02     		.2byte	0x2ec
 3111 0806 00       		.byte	0
 3112 0807 11       		.uleb128 0x11
 3113 0808 04       		.byte	0x4
 3114 0809 AC060000 		.4byte	0x6ac
 3115 080d 1F       		.uleb128 0x1f
 3116 080e 94000000 		.4byte	0x94
 3117 0812 2B080000 		.4byte	0x82b
 3118 0816 20       		.uleb128 0x20
 3119 0817 CA060000 		.4byte	0x6ca
 3120 081b 20       		.uleb128 0x20
 3121 081c B2030000 		.4byte	0x3b2
 3122 0820 20       		.uleb128 0x20
 3123 0821 2B080000 		.4byte	0x82b
 3124 0825 20       		.uleb128 0x20
 3125 0826 94000000 		.4byte	0x94
 3126 082a 00       		.byte	0
 3127 082b 11       		.uleb128 0x11
 3128 082c 04       		.byte	0x4
 3129 082d C1030000 		.4byte	0x3c1
 3130 0831 11       		.uleb128 0x11
 3131 0832 04       		.byte	0x4
 3132 0833 0D080000 		.4byte	0x80d
 3133 0837 1F       		.uleb128 0x1f
 3134 0838 35030000 		.4byte	0x335
 3135 083c 55080000 		.4byte	0x855
 3136 0840 20       		.uleb128 0x20
 3137 0841 CA060000 		.4byte	0x6ca
 3138 0845 20       		.uleb128 0x20
 3139 0846 B2030000 		.4byte	0x3b2
 3140 084a 20       		.uleb128 0x20
 3141 084b 35030000 		.4byte	0x335
ARM GAS  /tmp/ccohH8g1.s 			page 85


 3142 084f 20       		.uleb128 0x20
 3143 0850 94000000 		.4byte	0x94
 3144 0854 00       		.byte	0
 3145 0855 11       		.uleb128 0x11
 3146 0856 04       		.byte	0x4
 3147 0857 37080000 		.4byte	0x837
 3148 085b 1F       		.uleb128 0x1f
 3149 085c 94000000 		.4byte	0x94
 3150 0860 6F080000 		.4byte	0x86f
 3151 0864 20       		.uleb128 0x20
 3152 0865 CA060000 		.4byte	0x6ca
 3153 0869 20       		.uleb128 0x20
 3154 086a B2030000 		.4byte	0x3b2
 3155 086e 00       		.byte	0
 3156 086f 11       		.uleb128 0x11
 3157 0870 04       		.byte	0x4
 3158 0871 5B080000 		.4byte	0x85b
 3159 0875 12       		.uleb128 0x12
 3160 0876 37000000 		.4byte	0x37
 3161 087a 85080000 		.4byte	0x885
 3162 087e 13       		.uleb128 0x13
 3163 087f E8000000 		.4byte	0xe8
 3164 0883 02       		.byte	0x2
 3165 0884 00       		.byte	0
 3166 0885 12       		.uleb128 0x12
 3167 0886 37000000 		.4byte	0x37
 3168 088a 95080000 		.4byte	0x895
 3169 088e 13       		.uleb128 0x13
 3170 088f E8000000 		.4byte	0xe8
 3171 0893 00       		.byte	0
 3172 0894 00       		.byte	0
 3173 0895 0B       		.uleb128 0xb
 3174 0896 31060000 		.4byte	.LASF133
 3175 089a 0C       		.byte	0xc
 3176 089b 1D01     		.2byte	0x11d
 3177 089d 82050000 		.4byte	0x582
 3178 08a1 23       		.uleb128 0x23
 3179 08a2 2E090000 		.4byte	.LASF134
 3180 08a6 0C       		.byte	0xc
 3181 08a7 0C       		.byte	0xc
 3182 08a8 2101     		.2byte	0x121
 3183 08aa D6080000 		.4byte	0x8d6
 3184 08ae 0E       		.uleb128 0xe
 3185 08af FB070000 		.4byte	.LASF68
 3186 08b3 0C       		.byte	0xc
 3187 08b4 2301     		.2byte	0x123
 3188 08b6 D6080000 		.4byte	0x8d6
 3189 08ba 00       		.byte	0
 3190 08bb 0E       		.uleb128 0xe
 3191 08bc E0030000 		.4byte	.LASF135
 3192 08c0 0C       		.byte	0xc
 3193 08c1 2401     		.2byte	0x124
 3194 08c3 94000000 		.4byte	0x94
 3195 08c7 04       		.byte	0x4
 3196 08c8 0E       		.uleb128 0xe
 3197 08c9 E3050000 		.4byte	.LASF136
 3198 08cd 0C       		.byte	0xc
ARM GAS  /tmp/ccohH8g1.s 			page 86


 3199 08ce 2501     		.2byte	0x125
 3200 08d0 DC080000 		.4byte	0x8dc
 3201 08d4 08       		.byte	0x8
 3202 08d5 00       		.byte	0
 3203 08d6 11       		.uleb128 0x11
 3204 08d7 04       		.byte	0x4
 3205 08d8 A1080000 		.4byte	0x8a1
 3206 08dc 11       		.uleb128 0x11
 3207 08dd 04       		.byte	0x4
 3208 08de 95080000 		.4byte	0x895
 3209 08e2 23       		.uleb128 0x23
 3210 08e3 46000000 		.4byte	.LASF137
 3211 08e7 0E       		.byte	0xe
 3212 08e8 0C       		.byte	0xc
 3213 08e9 3D01     		.2byte	0x13d
 3214 08eb 17090000 		.4byte	0x917
 3215 08ef 0E       		.uleb128 0xe
 3216 08f0 D3060000 		.4byte	.LASF138
 3217 08f4 0C       		.byte	0xc
 3218 08f5 3E01     		.2byte	0x13e
 3219 08f7 17090000 		.4byte	0x917
 3220 08fb 00       		.byte	0
 3221 08fc 0E       		.uleb128 0xe
 3222 08fd 55040000 		.4byte	.LASF139
 3223 0901 0C       		.byte	0xc
 3224 0902 3F01     		.2byte	0x13f
 3225 0904 17090000 		.4byte	0x917
 3226 0908 06       		.byte	0x6
 3227 0909 0E       		.uleb128 0xe
 3228 090a 83080000 		.4byte	.LASF140
 3229 090e 0C       		.byte	0xc
 3230 090f 4001     		.2byte	0x140
 3231 0911 5B000000 		.4byte	0x5b
 3232 0915 0C       		.byte	0xc
 3233 0916 00       		.byte	0
 3234 0917 12       		.uleb128 0x12
 3235 0918 5B000000 		.4byte	0x5b
 3236 091c 27090000 		.4byte	0x927
 3237 0920 13       		.uleb128 0x13
 3238 0921 E8000000 		.4byte	0xe8
 3239 0925 02       		.byte	0x2
 3240 0926 00       		.byte	0
 3241 0927 0C       		.uleb128 0xc
 3242 0928 D0       		.byte	0xd0
 3243 0929 0C       		.byte	0xc
 3244 092a 5702     		.2byte	0x257
 3245 092c 280A0000 		.4byte	0xa28
 3246 0930 0E       		.uleb128 0xe
 3247 0931 05090000 		.4byte	.LASF141
 3248 0935 0C       		.byte	0xc
 3249 0936 5902     		.2byte	0x259
 3250 0938 9B000000 		.4byte	0x9b
 3251 093c 00       		.byte	0
 3252 093d 0E       		.uleb128 0xe
 3253 093e 01080000 		.4byte	.LASF142
 3254 0942 0C       		.byte	0xc
 3255 0943 5A02     		.2byte	0x25a
ARM GAS  /tmp/ccohH8g1.s 			page 87


 3256 0945 B4030000 		.4byte	0x3b4
 3257 0949 04       		.byte	0x4
 3258 094a 0E       		.uleb128 0xe
 3259 094b 16040000 		.4byte	.LASF143
 3260 094f 0C       		.byte	0xc
 3261 0950 5B02     		.2byte	0x25b
 3262 0952 280A0000 		.4byte	0xa28
 3263 0956 08       		.byte	0x8
 3264 0957 0E       		.uleb128 0xe
 3265 0958 DB090000 		.4byte	.LASF144
 3266 095c 0C       		.byte	0xc
 3267 095d 5C02     		.2byte	0x25c
 3268 095f 3A040000 		.4byte	0x43a
 3269 0963 24       		.byte	0x24
 3270 0964 0E       		.uleb128 0xe
 3271 0965 47050000 		.4byte	.LASF145
 3272 0969 0C       		.byte	0xc
 3273 096a 5D02     		.2byte	0x25d
 3274 096c 94000000 		.4byte	0x94
 3275 0970 48       		.byte	0x48
 3276 0971 0E       		.uleb128 0xe
 3277 0972 E7030000 		.4byte	.LASF146
 3278 0976 0C       		.byte	0xc
 3279 0977 5E02     		.2byte	0x25e
 3280 0979 8D000000 		.4byte	0x8d
 3281 097d 50       		.byte	0x50
 3282 097e 0E       		.uleb128 0xe
 3283 097f 030A0000 		.4byte	.LASF147
 3284 0983 0C       		.byte	0xc
 3285 0984 5F02     		.2byte	0x25f
 3286 0986 E2080000 		.4byte	0x8e2
 3287 098a 58       		.byte	0x58
 3288 098b 0E       		.uleb128 0xe
 3289 098c 5D060000 		.4byte	.LASF148
 3290 0990 0C       		.byte	0xc
 3291 0991 6002     		.2byte	0x260
 3292 0993 9C030000 		.4byte	0x39c
 3293 0997 68       		.byte	0x68
 3294 0998 0E       		.uleb128 0xe
 3295 0999 220A0000 		.4byte	.LASF149
 3296 099d 0C       		.byte	0xc
 3297 099e 6102     		.2byte	0x261
 3298 09a0 9C030000 		.4byte	0x39c
 3299 09a4 70       		.byte	0x70
 3300 09a5 0E       		.uleb128 0xe
 3301 09a6 B9010000 		.4byte	.LASF150
 3302 09aa 0C       		.byte	0xc
 3303 09ab 6202     		.2byte	0x262
 3304 09ad 9C030000 		.4byte	0x39c
 3305 09b1 78       		.byte	0x78
 3306 09b2 0E       		.uleb128 0xe
 3307 09b3 53090000 		.4byte	.LASF151
 3308 09b7 0C       		.byte	0xc
 3309 09b8 6302     		.2byte	0x263
 3310 09ba 380A0000 		.4byte	0xa38
 3311 09be 80       		.byte	0x80
 3312 09bf 0E       		.uleb128 0xe
ARM GAS  /tmp/ccohH8g1.s 			page 88


 3313 09c0 0A040000 		.4byte	.LASF152
 3314 09c4 0C       		.byte	0xc
 3315 09c5 6402     		.2byte	0x264
 3316 09c7 480A0000 		.4byte	0xa48
 3317 09cb 88       		.byte	0x88
 3318 09cc 0E       		.uleb128 0xe
 3319 09cd 90080000 		.4byte	.LASF153
 3320 09d1 0C       		.byte	0xc
 3321 09d2 6502     		.2byte	0x265
 3322 09d4 94000000 		.4byte	0x94
 3323 09d8 A0       		.byte	0xa0
 3324 09d9 0E       		.uleb128 0xe
 3325 09da CF020000 		.4byte	.LASF154
 3326 09de 0C       		.byte	0xc
 3327 09df 6602     		.2byte	0x266
 3328 09e1 9C030000 		.4byte	0x39c
 3329 09e5 A4       		.byte	0xa4
 3330 09e6 0E       		.uleb128 0xe
 3331 09e7 3B010000 		.4byte	.LASF155
 3332 09eb 0C       		.byte	0xc
 3333 09ec 6702     		.2byte	0x267
 3334 09ee 9C030000 		.4byte	0x39c
 3335 09f2 AC       		.byte	0xac
 3336 09f3 0E       		.uleb128 0xe
 3337 09f4 BE020000 		.4byte	.LASF156
 3338 09f8 0C       		.byte	0xc
 3339 09f9 6802     		.2byte	0x268
 3340 09fb 9C030000 		.4byte	0x39c
 3341 09ff B4       		.byte	0xb4
 3342 0a00 0E       		.uleb128 0xe
 3343 0a01 BA000000 		.4byte	.LASF157
 3344 0a05 0C       		.byte	0xc
 3345 0a06 6902     		.2byte	0x269
 3346 0a08 9C030000 		.4byte	0x39c
 3347 0a0c BC       		.byte	0xbc
 3348 0a0d 0E       		.uleb128 0xe
 3349 0a0e C9000000 		.4byte	.LASF158
 3350 0a12 0C       		.byte	0xc
 3351 0a13 6A02     		.2byte	0x26a
 3352 0a15 9C030000 		.4byte	0x39c
 3353 0a19 C4       		.byte	0xc4
 3354 0a1a 0E       		.uleb128 0xe
 3355 0a1b 2E070000 		.4byte	.LASF159
 3356 0a1f 0C       		.byte	0xc
 3357 0a20 6B02     		.2byte	0x26b
 3358 0a22 94000000 		.4byte	0x94
 3359 0a26 CC       		.byte	0xcc
 3360 0a27 00       		.byte	0
 3361 0a28 12       		.uleb128 0x12
 3362 0a29 BA030000 		.4byte	0x3ba
 3363 0a2d 380A0000 		.4byte	0xa38
 3364 0a31 13       		.uleb128 0x13
 3365 0a32 E8000000 		.4byte	0xe8
 3366 0a36 19       		.byte	0x19
 3367 0a37 00       		.byte	0
 3368 0a38 12       		.uleb128 0x12
 3369 0a39 BA030000 		.4byte	0x3ba
ARM GAS  /tmp/ccohH8g1.s 			page 89


 3370 0a3d 480A0000 		.4byte	0xa48
 3371 0a41 13       		.uleb128 0x13
 3372 0a42 E8000000 		.4byte	0xe8
 3373 0a46 07       		.byte	0x7
 3374 0a47 00       		.byte	0
 3375 0a48 12       		.uleb128 0x12
 3376 0a49 BA030000 		.4byte	0x3ba
 3377 0a4d 580A0000 		.4byte	0xa58
 3378 0a51 13       		.uleb128 0x13
 3379 0a52 E8000000 		.4byte	0xe8
 3380 0a56 17       		.byte	0x17
 3381 0a57 00       		.byte	0
 3382 0a58 0C       		.uleb128 0xc
 3383 0a59 F0       		.byte	0xf0
 3384 0a5a 0C       		.byte	0xc
 3385 0a5b 7002     		.2byte	0x270
 3386 0a5d 7C0A0000 		.4byte	0xa7c
 3387 0a61 0E       		.uleb128 0xe
 3388 0a62 FF040000 		.4byte	.LASF160
 3389 0a66 0C       		.byte	0xc
 3390 0a67 7302     		.2byte	0x273
 3391 0a69 7C0A0000 		.4byte	0xa7c
 3392 0a6d 00       		.byte	0
 3393 0a6e 0E       		.uleb128 0xe
 3394 0a6f A3040000 		.4byte	.LASF161
 3395 0a73 0C       		.byte	0xc
 3396 0a74 7402     		.2byte	0x274
 3397 0a76 8C0A0000 		.4byte	0xa8c
 3398 0a7a 78       		.byte	0x78
 3399 0a7b 00       		.byte	0
 3400 0a7c 12       		.uleb128 0x12
 3401 0a7d 7C050000 		.4byte	0x57c
 3402 0a81 8C0A0000 		.4byte	0xa8c
 3403 0a85 13       		.uleb128 0x13
 3404 0a86 E8000000 		.4byte	0xe8
 3405 0a8a 1D       		.byte	0x1d
 3406 0a8b 00       		.byte	0
 3407 0a8c 12       		.uleb128 0x12
 3408 0a8d 9B000000 		.4byte	0x9b
 3409 0a91 9C0A0000 		.4byte	0xa9c
 3410 0a95 13       		.uleb128 0x13
 3411 0a96 E8000000 		.4byte	0xe8
 3412 0a9a 1D       		.byte	0x1d
 3413 0a9b 00       		.byte	0
 3414 0a9c 24       		.uleb128 0x24
 3415 0a9d F0       		.byte	0xf0
 3416 0a9e 0C       		.byte	0xc
 3417 0a9f 5502     		.2byte	0x255
 3418 0aa1 BE0A0000 		.4byte	0xabe
 3419 0aa5 25       		.uleb128 0x25
 3420 0aa6 CC060000 		.4byte	.LASF111
 3421 0aaa 0C       		.byte	0xc
 3422 0aab 6C02     		.2byte	0x26c
 3423 0aad 27090000 		.4byte	0x927
 3424 0ab1 25       		.uleb128 0x25
 3425 0ab2 9A090000 		.4byte	.LASF162
 3426 0ab6 0C       		.byte	0xc
ARM GAS  /tmp/ccohH8g1.s 			page 90


 3427 0ab7 7502     		.2byte	0x275
 3428 0ab9 580A0000 		.4byte	0xa58
 3429 0abd 00       		.byte	0
 3430 0abe 12       		.uleb128 0x12
 3431 0abf BA030000 		.4byte	0x3ba
 3432 0ac3 CE0A0000 		.4byte	0xace
 3433 0ac7 13       		.uleb128 0x13
 3434 0ac8 E8000000 		.4byte	0xe8
 3435 0acc 18       		.byte	0x18
 3436 0acd 00       		.byte	0
 3437 0ace 26       		.uleb128 0x26
 3438 0acf D90A0000 		.4byte	0xad9
 3439 0ad3 20       		.uleb128 0x20
 3440 0ad4 CA060000 		.4byte	0x6ca
 3441 0ad8 00       		.byte	0
 3442 0ad9 11       		.uleb128 0x11
 3443 0ada 04       		.byte	0x4
 3444 0adb CE0A0000 		.4byte	0xace
 3445 0adf 11       		.uleb128 0x11
 3446 0ae0 04       		.byte	0x4
 3447 0ae1 24040000 		.4byte	0x424
 3448 0ae5 26       		.uleb128 0x26
 3449 0ae6 F00A0000 		.4byte	0xaf0
 3450 0aea 20       		.uleb128 0x20
 3451 0aeb 94000000 		.4byte	0x94
 3452 0aef 00       		.byte	0
 3453 0af0 11       		.uleb128 0x11
 3454 0af1 04       		.byte	0x4
 3455 0af2 F60A0000 		.4byte	0xaf6
 3456 0af6 11       		.uleb128 0x11
 3457 0af7 04       		.byte	0x4
 3458 0af8 E50A0000 		.4byte	0xae5
 3459 0afc 12       		.uleb128 0x12
 3460 0afd 95080000 		.4byte	0x895
 3461 0b01 0C0B0000 		.4byte	0xb0c
 3462 0b05 13       		.uleb128 0x13
 3463 0b06 E8000000 		.4byte	0xe8
 3464 0b0a 02       		.byte	0x2
 3465 0b0b 00       		.byte	0
 3466 0b0c 06       		.uleb128 0x6
 3467 0b0d F5020000 		.4byte	.LASF163
 3468 0b11 0C       		.byte	0xc
 3469 0b12 FD02     		.2byte	0x2fd
 3470 0b14 CA060000 		.4byte	0x6ca
 3471 0b18 06       		.uleb128 0x6
 3472 0b19 CB080000 		.4byte	.LASF164
 3473 0b1d 0C       		.byte	0xc
 3474 0b1e FE02     		.2byte	0x2fe
 3475 0b20 D0060000 		.4byte	0x6d0
 3476 0b24 02       		.uleb128 0x2
 3477 0b25 08       		.byte	0x8
 3478 0b26 04       		.byte	0x4
 3479 0b27 A7020000 		.4byte	.LASF165
 3480 0b2b 27       		.uleb128 0x27
 3481 0b2c B8040000 		.4byte	.LASF225
 3482 0b30 01       		.byte	0x1
 3483 0b31 25000000 		.4byte	0x25
ARM GAS  /tmp/ccohH8g1.s 			page 91


 3484 0b35 0D       		.byte	0xd
 3485 0b36 9902     		.2byte	0x299
 3486 0b38 550B0000 		.4byte	0xb55
 3487 0b3c 28       		.uleb128 0x28
 3488 0b3d 91070000 		.4byte	.LASF166
 3489 0b41 7F       		.sleb128 -1
 3490 0b42 09       		.uleb128 0x9
 3491 0b43 51020000 		.4byte	.LASF167
 3492 0b47 00       		.byte	0
 3493 0b48 09       		.uleb128 0x9
 3494 0b49 59000000 		.4byte	.LASF168
 3495 0b4d 01       		.byte	0x1
 3496 0b4e 09       		.uleb128 0x9
 3497 0b4f F1000000 		.4byte	.LASF169
 3498 0b53 02       		.byte	0x2
 3499 0b54 00       		.byte	0
 3500 0b55 06       		.uleb128 0x6
 3501 0b56 26010000 		.4byte	.LASF170
 3502 0b5a 0D       		.byte	0xd
 3503 0b5b A402     		.2byte	0x2a4
 3504 0b5d 2B0B0000 		.4byte	0xb2b
 3505 0b61 29       		.uleb128 0x29
 3506 0b62 D9060000 		.4byte	.LASF171
 3507 0b66 01       		.byte	0x1
 3508 0b67 5806     		.2byte	0x658
 3509 0b69 83020000 		.4byte	0x283
 3510 0b6d 10090000 		.4byte	.LFB90
 3511 0b71 44000000 		.4byte	.LFE90-.LFB90
 3512 0b75 01       		.uleb128 0x1
 3513 0b76 9C       		.byte	0x9c
 3514 0b77 9A0B0000 		.4byte	0xb9a
 3515 0b7b 2A       		.uleb128 0x2a
 3516 0b7c ED020000 		.4byte	.LASF173
 3517 0b80 01       		.byte	0x1
 3518 0b81 5806     		.2byte	0x658
 3519 0b83 D8000000 		.4byte	0xd8
 3520 0b87 02       		.uleb128 0x2
 3521 0b88 91       		.byte	0x91
 3522 0b89 6C       		.sleb128 -20
 3523 0b8a 2B       		.uleb128 0x2b
 3524 0b8b 22090000 		.4byte	.LASF174
 3525 0b8f 01       		.byte	0x1
 3526 0b90 5A06     		.2byte	0x65a
 3527 0b92 83020000 		.4byte	0x283
 3528 0b96 02       		.uleb128 0x2
 3529 0b97 91       		.byte	0x91
 3530 0b98 77       		.sleb128 -9
 3531 0b99 00       		.byte	0
 3532 0b9a 29       		.uleb128 0x29
 3533 0b9b 23000000 		.4byte	.LASF172
 3534 0b9f 01       		.byte	0x1
 3535 0ba0 3C06     		.2byte	0x63c
 3536 0ba2 83020000 		.4byte	0x283
 3537 0ba6 CC080000 		.4byte	.LFB89
 3538 0baa 44000000 		.4byte	.LFE89-.LFB89
 3539 0bae 01       		.uleb128 0x1
 3540 0baf 9C       		.byte	0x9c
ARM GAS  /tmp/ccohH8g1.s 			page 92


 3541 0bb0 D30B0000 		.4byte	0xbd3
 3542 0bb4 2A       		.uleb128 0x2a
 3543 0bb5 ED020000 		.4byte	.LASF173
 3544 0bb9 01       		.byte	0x1
 3545 0bba 3C06     		.2byte	0x63c
 3546 0bbc D8000000 		.4byte	0xd8
 3547 0bc0 02       		.uleb128 0x2
 3548 0bc1 91       		.byte	0x91
 3549 0bc2 6C       		.sleb128 -20
 3550 0bc3 2B       		.uleb128 0x2b
 3551 0bc4 22090000 		.4byte	.LASF174
 3552 0bc8 01       		.byte	0x1
 3553 0bc9 3E06     		.2byte	0x63e
 3554 0bcb 83020000 		.4byte	0x283
 3555 0bcf 02       		.uleb128 0x2
 3556 0bd0 91       		.byte	0x91
 3557 0bd1 77       		.sleb128 -9
 3558 0bd2 00       		.byte	0
 3559 0bd3 2C       		.uleb128 0x2c
 3560 0bd4 9B060000 		.4byte	.LASF175
 3561 0bd8 01       		.byte	0x1
 3562 0bd9 EC05     		.2byte	0x5ec
 3563 0bdb 83020000 		.4byte	0x283
 3564 0bdf 78080000 		.4byte	.LFB88
 3565 0be3 54000000 		.4byte	.LFE88-.LFB88
 3566 0be7 01       		.uleb128 0x1
 3567 0be8 9C       		.byte	0x9c
 3568 0be9 FD0B0000 		.4byte	0xbfd
 3569 0bed 2B       		.uleb128 0x2b
 3570 0bee FE030000 		.4byte	.LASF176
 3571 0bf2 01       		.byte	0x1
 3572 0bf3 EE05     		.2byte	0x5ee
 3573 0bf5 83020000 		.4byte	0x283
 3574 0bf9 02       		.uleb128 0x2
 3575 0bfa 91       		.byte	0x91
 3576 0bfb 77       		.sleb128 -9
 3577 0bfc 00       		.byte	0
 3578 0bfd 2C       		.uleb128 0x2c
 3579 0bfe 34090000 		.4byte	.LASF177
 3580 0c02 01       		.byte	0x1
 3581 0c03 C605     		.2byte	0x5c6
 3582 0c05 83020000 		.4byte	0x283
 3583 0c09 24080000 		.4byte	.LFB87
 3584 0c0d 54000000 		.4byte	.LFE87-.LFB87
 3585 0c11 01       		.uleb128 0x1
 3586 0c12 9C       		.byte	0x9c
 3587 0c13 270C0000 		.4byte	0xc27
 3588 0c17 2B       		.uleb128 0x2b
 3589 0c18 FE030000 		.4byte	.LASF176
 3590 0c1c 01       		.byte	0x1
 3591 0c1d C805     		.2byte	0x5c8
 3592 0c1f 83020000 		.4byte	0x283
 3593 0c23 02       		.uleb128 0x2
 3594 0c24 91       		.byte	0x91
 3595 0c25 77       		.sleb128 -9
 3596 0c26 00       		.byte	0
 3597 0c27 2D       		.uleb128 0x2d
ARM GAS  /tmp/ccohH8g1.s 			page 93


 3598 0c28 12090000 		.4byte	.LASF181
 3599 0c2c 01       		.byte	0x1
 3600 0c2d A405     		.2byte	0x5a4
 3601 0c2f 08080000 		.4byte	.LFB86
 3602 0c33 1C000000 		.4byte	.LFE86-.LFB86
 3603 0c37 01       		.uleb128 0x1
 3604 0c38 9C       		.byte	0x9c
 3605 0c39 4D0C0000 		.4byte	0xc4d
 3606 0c3d 2A       		.uleb128 0x2a
 3607 0c3e 080A0000 		.4byte	.LASF178
 3608 0c42 01       		.byte	0x1
 3609 0c43 A405     		.2byte	0x5a4
 3610 0c45 D8000000 		.4byte	0xd8
 3611 0c49 02       		.uleb128 0x2
 3612 0c4a 91       		.byte	0x91
 3613 0c4b 74       		.sleb128 -12
 3614 0c4c 00       		.byte	0
 3615 0c4d 2C       		.uleb128 0x2c
 3616 0c4e 8F040000 		.4byte	.LASF179
 3617 0c52 01       		.byte	0x1
 3618 0c53 4E05     		.2byte	0x54e
 3619 0c55 20010000 		.4byte	0x120
 3620 0c59 B8070000 		.4byte	.LFB85
 3621 0c5d 50000000 		.4byte	.LFE85-.LFB85
 3622 0c61 01       		.uleb128 0x1
 3623 0c62 9C       		.byte	0x9c
 3624 0c63 860C0000 		.4byte	0xc86
 3625 0c67 2A       		.uleb128 0x2a
 3626 0c68 080A0000 		.4byte	.LASF178
 3627 0c6c 01       		.byte	0x1
 3628 0c6d 4E05     		.2byte	0x54e
 3629 0c6f D8000000 		.4byte	0xd8
 3630 0c73 02       		.uleb128 0x2
 3631 0c74 91       		.byte	0x91
 3632 0c75 6C       		.sleb128 -20
 3633 0c76 2B       		.uleb128 0x2b
 3634 0c77 8A090000 		.4byte	.LASF180
 3635 0c7b 01       		.byte	0x1
 3636 0c7c 5005     		.2byte	0x550
 3637 0c7e 20010000 		.4byte	0x120
 3638 0c82 02       		.uleb128 0x2
 3639 0c83 91       		.byte	0x91
 3640 0c84 77       		.sleb128 -9
 3641 0c85 00       		.byte	0
 3642 0c86 2D       		.uleb128 0x2d
 3643 0c87 D2040000 		.4byte	.LASF182
 3644 0c8b 01       		.byte	0x1
 3645 0c8c 0B05     		.2byte	0x50b
 3646 0c8e 7C070000 		.4byte	.LFB84
 3647 0c92 3C000000 		.4byte	.LFE84-.LFB84
 3648 0c96 01       		.uleb128 0x1
 3649 0c97 9C       		.byte	0x9c
 3650 0c98 BB0C0000 		.4byte	0xcbb
 3651 0c9c 2A       		.uleb128 0x2a
 3652 0c9d 25070000 		.4byte	.LASF183
 3653 0ca1 01       		.byte	0x1
 3654 0ca2 0B05     		.2byte	0x50b
ARM GAS  /tmp/ccohH8g1.s 			page 94


 3655 0ca4 D8000000 		.4byte	0xd8
 3656 0ca8 02       		.uleb128 0x2
 3657 0ca9 91       		.byte	0x91
 3658 0caa 74       		.sleb128 -12
 3659 0cab 2A       		.uleb128 0x2a
 3660 0cac 1A000000 		.4byte	.LASF184
 3661 0cb0 01       		.byte	0x1
 3662 0cb1 0B05     		.2byte	0x50b
 3663 0cb3 46010000 		.4byte	0x146
 3664 0cb7 02       		.uleb128 0x2
 3665 0cb8 91       		.byte	0x91
 3666 0cb9 73       		.sleb128 -13
 3667 0cba 00       		.byte	0
 3668 0cbb 2C       		.uleb128 0x2c
 3669 0cbc 6C090000 		.4byte	.LASF185
 3670 0cc0 01       		.byte	0x1
 3671 0cc1 ED04     		.2byte	0x4ed
 3672 0cc3 20010000 		.4byte	0x120
 3673 0cc7 4C070000 		.4byte	.LFB83
 3674 0ccb 30000000 		.4byte	.LFE83-.LFB83
 3675 0ccf 01       		.uleb128 0x1
 3676 0cd0 9C       		.byte	0x9c
 3677 0cd1 E50C0000 		.4byte	0xce5
 3678 0cd5 2B       		.uleb128 0x2b
 3679 0cd6 8A090000 		.4byte	.LASF180
 3680 0cda 01       		.byte	0x1
 3681 0cdb EF04     		.2byte	0x4ef
 3682 0cdd 20010000 		.4byte	0x120
 3683 0ce1 02       		.uleb128 0x2
 3684 0ce2 91       		.byte	0x91
 3685 0ce3 77       		.sleb128 -9
 3686 0ce4 00       		.byte	0
 3687 0ce5 2C       		.uleb128 0x2c
 3688 0ce6 11030000 		.4byte	.LASF186
 3689 0cea 01       		.byte	0x1
 3690 0ceb D904     		.2byte	0x4d9
 3691 0ced 20010000 		.4byte	0x120
 3692 0cf1 1C070000 		.4byte	.LFB82
 3693 0cf5 30000000 		.4byte	.LFE82-.LFB82
 3694 0cf9 01       		.uleb128 0x1
 3695 0cfa 9C       		.byte	0x9c
 3696 0cfb 0F0D0000 		.4byte	0xd0f
 3697 0cff 2B       		.uleb128 0x2b
 3698 0d00 26050000 		.4byte	.LASF187
 3699 0d04 01       		.byte	0x1
 3700 0d05 DB04     		.2byte	0x4db
 3701 0d07 20010000 		.4byte	0x120
 3702 0d0b 02       		.uleb128 0x2
 3703 0d0c 91       		.byte	0x91
 3704 0d0d 77       		.sleb128 -9
 3705 0d0e 00       		.byte	0
 3706 0d0f 2E       		.uleb128 0x2e
 3707 0d10 B8090000 		.4byte	.LASF188
 3708 0d14 01       		.byte	0x1
 3709 0d15 CD04     		.2byte	0x4cd
 3710 0d17 D8000000 		.4byte	0xd8
 3711 0d1b 08070000 		.4byte	.LFB81
ARM GAS  /tmp/ccohH8g1.s 			page 95


 3712 0d1f 14000000 		.4byte	.LFE81-.LFB81
 3713 0d23 01       		.uleb128 0x1
 3714 0d24 9C       		.byte	0x9c
 3715 0d25 2E       		.uleb128 0x2e
 3716 0d26 53070000 		.4byte	.LASF189
 3717 0d2a 01       		.byte	0x1
 3718 0d2b C104     		.2byte	0x4c1
 3719 0d2d D8000000 		.4byte	0xd8
 3720 0d31 F0060000 		.4byte	.LFB80
 3721 0d35 18000000 		.4byte	.LFE80-.LFB80
 3722 0d39 01       		.uleb128 0x1
 3723 0d3a 9C       		.byte	0x9c
 3724 0d3b 29       		.uleb128 0x29
 3725 0d3c 76020000 		.4byte	.LASF190
 3726 0d40 01       		.byte	0x1
 3727 0d41 5F04     		.2byte	0x45f
 3728 0d43 83020000 		.4byte	0x283
 3729 0d47 5C060000 		.4byte	.LFB79
 3730 0d4b 94000000 		.4byte	.LFE79-.LFB79
 3731 0d4f 01       		.uleb128 0x1
 3732 0d50 9C       		.byte	0x9c
 3733 0d51 920D0000 		.4byte	0xd92
 3734 0d55 2A       		.uleb128 0x2a
 3735 0d56 23040000 		.4byte	.LASF191
 3736 0d5a 01       		.byte	0x1
 3737 0d5b 5F04     		.2byte	0x45f
 3738 0d5d B8000000 		.4byte	0xb8
 3739 0d61 02       		.uleb128 0x2
 3740 0d62 91       		.byte	0x91
 3741 0d63 6E       		.sleb128 -18
 3742 0d64 2A       		.uleb128 0x2a
 3743 0d65 53030000 		.4byte	.LASF192
 3744 0d69 01       		.byte	0x1
 3745 0d6a 5F04     		.2byte	0x45f
 3746 0d6c B8000000 		.4byte	0xb8
 3747 0d70 02       		.uleb128 0x2
 3748 0d71 91       		.byte	0x91
 3749 0d72 6C       		.sleb128 -20
 3750 0d73 2A       		.uleb128 0x2a
 3751 0d74 07020000 		.4byte	.LASF193
 3752 0d78 01       		.byte	0x1
 3753 0d79 5F04     		.2byte	0x45f
 3754 0d7b B8000000 		.4byte	0xb8
 3755 0d7f 02       		.uleb128 0x2
 3756 0d80 91       		.byte	0x91
 3757 0d81 6A       		.sleb128 -22
 3758 0d82 2B       		.uleb128 0x2b
 3759 0d83 22090000 		.4byte	.LASF174
 3760 0d87 01       		.byte	0x1
 3761 0d88 6104     		.2byte	0x461
 3762 0d8a 83020000 		.4byte	0x283
 3763 0d8e 02       		.uleb128 0x2
 3764 0d8f 91       		.byte	0x91
 3765 0d90 77       		.sleb128 -9
 3766 0d91 00       		.byte	0
 3767 0d92 29       		.uleb128 0x29
 3768 0d93 76030000 		.4byte	.LASF194
ARM GAS  /tmp/ccohH8g1.s 			page 96


 3769 0d97 01       		.byte	0x1
 3770 0d98 1A04     		.2byte	0x41a
 3771 0d9a 83020000 		.4byte	0x283
 3772 0d9e 88050000 		.4byte	.LFB78
 3773 0da2 D4000000 		.4byte	.LFE78-.LFB78
 3774 0da6 01       		.uleb128 0x1
 3775 0da7 9C       		.byte	0x9c
 3776 0da8 CB0D0000 		.4byte	0xdcb
 3777 0dac 2A       		.uleb128 0x2a
 3778 0dad 1A000000 		.4byte	.LASF184
 3779 0db1 01       		.byte	0x1
 3780 0db2 1A04     		.2byte	0x41a
 3781 0db4 46010000 		.4byte	0x146
 3782 0db8 02       		.uleb128 0x2
 3783 0db9 91       		.byte	0x91
 3784 0dba 6F       		.sleb128 -17
 3785 0dbb 2B       		.uleb128 0x2b
 3786 0dbc 22090000 		.4byte	.LASF174
 3787 0dc0 01       		.byte	0x1
 3788 0dc1 1C04     		.2byte	0x41c
 3789 0dc3 83020000 		.4byte	0x283
 3790 0dc7 02       		.uleb128 0x2
 3791 0dc8 91       		.byte	0x91
 3792 0dc9 77       		.sleb128 -9
 3793 0dca 00       		.byte	0
 3794 0dcb 29       		.uleb128 0x29
 3795 0dcc E9050000 		.4byte	.LASF195
 3796 0dd0 01       		.byte	0x1
 3797 0dd1 D003     		.2byte	0x3d0
 3798 0dd3 83020000 		.4byte	0x283
 3799 0dd7 70040000 		.4byte	.LFB77
 3800 0ddb 18010000 		.4byte	.LFE77-.LFB77
 3801 0ddf 01       		.uleb128 0x1
 3802 0de0 9C       		.byte	0x9c
 3803 0de1 400E0000 		.4byte	0xe40
 3804 0de5 2A       		.uleb128 0x2a
 3805 0de6 AC040000 		.4byte	.LASF196
 3806 0dea 01       		.byte	0x1
 3807 0deb D003     		.2byte	0x3d0
 3808 0ded D8000000 		.4byte	0xd8
 3809 0df1 02       		.uleb128 0x2
 3810 0df2 91       		.byte	0x91
 3811 0df3 64       		.sleb128 -28
 3812 0df4 2B       		.uleb128 0x2b
 3813 0df5 67030000 		.4byte	.LASF197
 3814 0df9 01       		.byte	0x1
 3815 0dfa D203     		.2byte	0x3d2
 3816 0dfc B8000000 		.4byte	0xb8
 3817 0e00 02       		.uleb128 0x2
 3818 0e01 91       		.byte	0x91
 3819 0e02 74       		.sleb128 -12
 3820 0e03 2B       		.uleb128 0x2b
 3821 0e04 41070000 		.4byte	.LASF198
 3822 0e08 01       		.byte	0x1
 3823 0e09 D203     		.2byte	0x3d2
 3824 0e0b B8000000 		.4byte	0xb8
 3825 0e0f 02       		.uleb128 0x2
ARM GAS  /tmp/ccohH8g1.s 			page 97


 3826 0e10 91       		.byte	0x91
 3827 0e11 72       		.sleb128 -14
 3828 0e12 2B       		.uleb128 0x2b
 3829 0e13 F0080000 		.4byte	.LASF199
 3830 0e17 01       		.byte	0x1
 3831 0e18 D203     		.2byte	0x3d2
 3832 0e1a B8000000 		.4byte	0xb8
 3833 0e1e 02       		.uleb128 0x2
 3834 0e1f 91       		.byte	0x91
 3835 0e20 70       		.sleb128 -16
 3836 0e21 2B       		.uleb128 0x2b
 3837 0e22 350A0000 		.4byte	.LASF200
 3838 0e26 01       		.byte	0x1
 3839 0e27 D203     		.2byte	0x3d2
 3840 0e29 B8000000 		.4byte	0xb8
 3841 0e2d 02       		.uleb128 0x2
 3842 0e2e 91       		.byte	0x91
 3843 0e2f 6E       		.sleb128 -18
 3844 0e30 2B       		.uleb128 0x2b
 3845 0e31 22090000 		.4byte	.LASF174
 3846 0e35 01       		.byte	0x1
 3847 0e36 D403     		.2byte	0x3d4
 3848 0e38 83020000 		.4byte	0x283
 3849 0e3c 02       		.uleb128 0x2
 3850 0e3d 91       		.byte	0x91
 3851 0e3e 77       		.sleb128 -9
 3852 0e3f 00       		.byte	0
 3853 0e40 29       		.uleb128 0x29
 3854 0e41 AF080000 		.4byte	.LASF201
 3855 0e45 01       		.byte	0x1
 3856 0e46 A203     		.2byte	0x3a2
 3857 0e48 83020000 		.4byte	0x283
 3858 0e4c F8030000 		.4byte	.LFB76
 3859 0e50 78000000 		.4byte	.LFE76-.LFB76
 3860 0e54 01       		.uleb128 0x1
 3861 0e55 9C       		.byte	0x9c
 3862 0e56 880E0000 		.4byte	0xe88
 3863 0e5a 2A       		.uleb128 0x2a
 3864 0e5b 4D040000 		.4byte	.LASF202
 3865 0e5f 01       		.byte	0x1
 3866 0e60 A203     		.2byte	0x3a2
 3867 0e62 D8000000 		.4byte	0xd8
 3868 0e66 02       		.uleb128 0x2
 3869 0e67 91       		.byte	0x91
 3870 0e68 6C       		.sleb128 -20
 3871 0e69 2A       		.uleb128 0x2a
 3872 0e6a 5D090000 		.4byte	.LASF203
 3873 0e6e 01       		.byte	0x1
 3874 0e6f A203     		.2byte	0x3a2
 3875 0e71 A2000000 		.4byte	0xa2
 3876 0e75 02       		.uleb128 0x2
 3877 0e76 91       		.byte	0x91
 3878 0e77 6B       		.sleb128 -21
 3879 0e78 2B       		.uleb128 0x2b
 3880 0e79 22090000 		.4byte	.LASF174
 3881 0e7d 01       		.byte	0x1
 3882 0e7e A403     		.2byte	0x3a4
ARM GAS  /tmp/ccohH8g1.s 			page 98


 3883 0e80 83020000 		.4byte	0x283
 3884 0e84 02       		.uleb128 0x2
 3885 0e85 91       		.byte	0x91
 3886 0e86 77       		.sleb128 -9
 3887 0e87 00       		.byte	0
 3888 0e88 29       		.uleb128 0x29
 3889 0e89 A2090000 		.4byte	.LASF204
 3890 0e8d 01       		.byte	0x1
 3891 0e8e 5B03     		.2byte	0x35b
 3892 0e90 83020000 		.4byte	0x283
 3893 0e94 9C030000 		.4byte	.LFB75
 3894 0e98 5C000000 		.4byte	.LFE75-.LFB75
 3895 0e9c 01       		.uleb128 0x1
 3896 0e9d 9C       		.byte	0x9c
 3897 0e9e D00E0000 		.4byte	0xed0
 3898 0ea2 2A       		.uleb128 0x2a
 3899 0ea3 4D040000 		.4byte	.LASF202
 3900 0ea7 01       		.byte	0x1
 3901 0ea8 5B03     		.2byte	0x35b
 3902 0eaa D8000000 		.4byte	0xd8
 3903 0eae 02       		.uleb128 0x2
 3904 0eaf 91       		.byte	0x91
 3905 0eb0 6C       		.sleb128 -20
 3906 0eb1 2A       		.uleb128 0x2a
 3907 0eb2 5D090000 		.4byte	.LASF203
 3908 0eb6 01       		.byte	0x1
 3909 0eb7 5B03     		.2byte	0x35b
 3910 0eb9 B8000000 		.4byte	0xb8
 3911 0ebd 02       		.uleb128 0x2
 3912 0ebe 91       		.byte	0x91
 3913 0ebf 6A       		.sleb128 -22
 3914 0ec0 2B       		.uleb128 0x2b
 3915 0ec1 22090000 		.4byte	.LASF174
 3916 0ec5 01       		.byte	0x1
 3917 0ec6 5D03     		.2byte	0x35d
 3918 0ec8 83020000 		.4byte	0x283
 3919 0ecc 02       		.uleb128 0x2
 3920 0ecd 91       		.byte	0x91
 3921 0ece 77       		.sleb128 -9
 3922 0ecf 00       		.byte	0
 3923 0ed0 29       		.uleb128 0x29
 3924 0ed1 5B040000 		.4byte	.LASF205
 3925 0ed5 01       		.byte	0x1
 3926 0ed6 AA02     		.2byte	0x2aa
 3927 0ed8 83020000 		.4byte	0x283
 3928 0edc 08030000 		.4byte	.LFB74
 3929 0ee0 94000000 		.4byte	.LFE74-.LFB74
 3930 0ee4 01       		.uleb128 0x1
 3931 0ee5 9C       		.byte	0x9c
 3932 0ee6 270F0000 		.4byte	0xf27
 3933 0eea 2A       		.uleb128 0x2a
 3934 0eeb 4D040000 		.4byte	.LASF202
 3935 0eef 01       		.byte	0x1
 3936 0ef0 AA02     		.2byte	0x2aa
 3937 0ef2 D8000000 		.4byte	0xd8
 3938 0ef6 02       		.uleb128 0x2
 3939 0ef7 91       		.byte	0x91
ARM GAS  /tmp/ccohH8g1.s 			page 99


 3940 0ef8 6C       		.sleb128 -20
 3941 0ef9 2A       		.uleb128 0x2a
 3942 0efa 5D090000 		.4byte	.LASF203
 3943 0efe 01       		.byte	0x1
 3944 0eff AA02     		.2byte	0x2aa
 3945 0f01 D8000000 		.4byte	0xd8
 3946 0f05 02       		.uleb128 0x2
 3947 0f06 91       		.byte	0x91
 3948 0f07 68       		.sleb128 -24
 3949 0f08 2B       		.uleb128 0x2b
 3950 0f09 22090000 		.4byte	.LASF174
 3951 0f0d 01       		.byte	0x1
 3952 0f0e AC02     		.2byte	0x2ac
 3953 0f10 83020000 		.4byte	0x283
 3954 0f14 02       		.uleb128 0x2
 3955 0f15 91       		.byte	0x91
 3956 0f16 77       		.sleb128 -9
 3957 0f17 2F       		.uleb128 0x2f
 3958 0f18 746D7000 		.ascii	"tmp\000"
 3959 0f1c 01       		.byte	0x1
 3960 0f1d AD02     		.2byte	0x2ad
 3961 0f1f E3000000 		.4byte	0xe3
 3962 0f23 02       		.uleb128 0x2
 3963 0f24 91       		.byte	0x91
 3964 0f25 70       		.sleb128 -16
 3965 0f26 00       		.byte	0
 3966 0f27 29       		.uleb128 0x29
 3967 0f28 32030000 		.4byte	.LASF206
 3968 0f2c 01       		.byte	0x1
 3969 0f2d 6902     		.2byte	0x269
 3970 0f2f 83020000 		.4byte	0x283
 3971 0f33 34020000 		.4byte	.LFB73
 3972 0f37 D4000000 		.4byte	.LFE73-.LFB73
 3973 0f3b 01       		.uleb128 0x1
 3974 0f3c 9C       		.byte	0x9c
 3975 0f3d 600F0000 		.4byte	0xf60
 3976 0f41 2B       		.uleb128 0x2b
 3977 0f42 73000000 		.4byte	.LASF207
 3978 0f46 01       		.byte	0x1
 3979 0f47 6B02     		.2byte	0x26b
 3980 0f49 B8000000 		.4byte	0xb8
 3981 0f4d 02       		.uleb128 0x2
 3982 0f4e 91       		.byte	0x91
 3983 0f4f 76       		.sleb128 -10
 3984 0f50 2B       		.uleb128 0x2b
 3985 0f51 22090000 		.4byte	.LASF174
 3986 0f55 01       		.byte	0x1
 3987 0f56 6D02     		.2byte	0x26d
 3988 0f58 83020000 		.4byte	0x283
 3989 0f5c 02       		.uleb128 0x2
 3990 0f5d 91       		.byte	0x91
 3991 0f5e 75       		.sleb128 -11
 3992 0f5f 00       		.byte	0
 3993 0f60 29       		.uleb128 0x29
 3994 0f61 78050000 		.4byte	.LASF208
 3995 0f65 01       		.byte	0x1
 3996 0f66 2C02     		.2byte	0x22c
ARM GAS  /tmp/ccohH8g1.s 			page 100


 3997 0f68 83020000 		.4byte	0x283
 3998 0f6c D8010000 		.4byte	.LFB72
 3999 0f70 5C000000 		.4byte	.LFE72-.LFB72
 4000 0f74 01       		.uleb128 0x1
 4001 0f75 9C       		.byte	0x9c
 4002 0f76 8A0F0000 		.4byte	0xf8a
 4003 0f7a 2B       		.uleb128 0x2b
 4004 0f7b 22090000 		.4byte	.LASF174
 4005 0f7f 01       		.byte	0x1
 4006 0f80 2E02     		.2byte	0x22e
 4007 0f82 83020000 		.4byte	0x283
 4008 0f86 02       		.uleb128 0x2
 4009 0f87 91       		.byte	0x91
 4010 0f88 77       		.sleb128 -9
 4011 0f89 00       		.byte	0
 4012 0f8a 29       		.uleb128 0x29
 4013 0f8b B0060000 		.4byte	.LASF209
 4014 0f8f 01       		.byte	0x1
 4015 0f90 ED01     		.2byte	0x1ed
 4016 0f92 83020000 		.4byte	0x283
 4017 0f96 7C010000 		.4byte	.LFB71
 4018 0f9a 5C000000 		.4byte	.LFE71-.LFB71
 4019 0f9e 01       		.uleb128 0x1
 4020 0f9f 9C       		.byte	0x9c
 4021 0fa0 B40F0000 		.4byte	0xfb4
 4022 0fa4 2B       		.uleb128 0x2b
 4023 0fa5 22090000 		.4byte	.LASF174
 4024 0fa9 01       		.byte	0x1
 4025 0faa EF01     		.2byte	0x1ef
 4026 0fac 83020000 		.4byte	0x283
 4027 0fb0 02       		.uleb128 0x2
 4028 0fb1 91       		.byte	0x91
 4029 0fb2 77       		.sleb128 -9
 4030 0fb3 00       		.byte	0
 4031 0fb4 29       		.uleb128 0x29
 4032 0fb5 EB070000 		.4byte	.LASF210
 4033 0fb9 01       		.byte	0x1
 4034 0fba A401     		.2byte	0x1a4
 4035 0fbc 83020000 		.4byte	0x283
 4036 0fc0 18010000 		.4byte	.LFB70
 4037 0fc4 64000000 		.4byte	.LFE70-.LFB70
 4038 0fc8 01       		.uleb128 0x1
 4039 0fc9 9C       		.byte	0x9c
 4040 0fca ED0F0000 		.4byte	0xfed
 4041 0fce 2A       		.uleb128 0x2a
 4042 0fcf 4A010000 		.4byte	.LASF211
 4043 0fd3 01       		.byte	0x1
 4044 0fd4 A401     		.2byte	0x1a4
 4045 0fd6 D8000000 		.4byte	0xd8
 4046 0fda 02       		.uleb128 0x2
 4047 0fdb 91       		.byte	0x91
 4048 0fdc 6C       		.sleb128 -20
 4049 0fdd 2B       		.uleb128 0x2b
 4050 0fde 22090000 		.4byte	.LASF174
 4051 0fe2 01       		.byte	0x1
 4052 0fe3 A601     		.2byte	0x1a6
 4053 0fe5 83020000 		.4byte	0x283
ARM GAS  /tmp/ccohH8g1.s 			page 101


 4054 0fe9 02       		.uleb128 0x2
 4055 0fea 91       		.byte	0x91
 4056 0feb 77       		.sleb128 -9
 4057 0fec 00       		.byte	0
 4058 0fed 30       		.uleb128 0x30
 4059 0fee 09010000 		.4byte	.LASF212
 4060 0ff2 01       		.byte	0x1
 4061 0ff3 8901     		.2byte	0x189
 4062 0ff5 FC000000 		.4byte	.LFB69
 4063 0ff9 1C000000 		.4byte	.LFE69-.LFB69
 4064 0ffd 01       		.uleb128 0x1
 4065 0ffe 9C       		.byte	0x9c
 4066 0fff 30       		.uleb128 0x30
 4067 1000 E1040000 		.4byte	.LASF213
 4068 1004 01       		.byte	0x1
 4069 1005 7501     		.2byte	0x175
 4070 1007 E0000000 		.4byte	.LFB68
 4071 100b 1C000000 		.4byte	.LFE68-.LFB68
 4072 100f 01       		.uleb128 0x1
 4073 1010 9C       		.byte	0x9c
 4074 1011 30       		.uleb128 0x30
 4075 1012 9D080000 		.4byte	.LASF214
 4076 1016 01       		.byte	0x1
 4077 1017 5501     		.2byte	0x155
 4078 1019 BC000000 		.4byte	.LFB67
 4079 101d 24000000 		.4byte	.LFE67-.LFB67
 4080 1021 01       		.uleb128 0x1
 4081 1022 9C       		.byte	0x9c
 4082 1023 30       		.uleb128 0x30
 4083 1024 84060000 		.4byte	.LASF215
 4084 1028 01       		.byte	0x1
 4085 1029 4001     		.2byte	0x140
 4086 102b 98000000 		.4byte	.LFB66
 4087 102f 24000000 		.4byte	.LFE66-.LFB66
 4088 1033 01       		.uleb128 0x1
 4089 1034 9C       		.byte	0x9c
 4090 1035 2D       		.uleb128 0x2d
 4091 1036 6D040000 		.4byte	.LASF216
 4092 103a 01       		.byte	0x1
 4093 103b 2D01     		.2byte	0x12d
 4094 103d 68000000 		.4byte	.LFB65
 4095 1041 30000000 		.4byte	.LFE65-.LFB65
 4096 1045 01       		.uleb128 0x1
 4097 1046 9C       		.byte	0x9c
 4098 1047 5B100000 		.4byte	0x105b
 4099 104b 2A       		.uleb128 0x2a
 4100 104c D1070000 		.4byte	.LASF217
 4101 1050 01       		.byte	0x1
 4102 1051 2D01     		.2byte	0x12d
 4103 1053 D8000000 		.4byte	0xd8
 4104 1057 02       		.uleb128 0x2
 4105 1058 91       		.byte	0x91
 4106 1059 74       		.sleb128 -12
 4107 105a 00       		.byte	0
 4108 105b 2D       		.uleb128 0x2d
 4109 105c A1000000 		.4byte	.LASF218
 4110 1060 01       		.byte	0x1
ARM GAS  /tmp/ccohH8g1.s 			page 102


 4111 1061 1A01     		.2byte	0x11a
 4112 1063 38000000 		.4byte	.LFB64
 4113 1067 30000000 		.4byte	.LFE64-.LFB64
 4114 106b 01       		.uleb128 0x1
 4115 106c 9C       		.byte	0x9c
 4116 106d 81100000 		.4byte	0x1081
 4117 1071 2A       		.uleb128 0x2a
 4118 1072 09070000 		.4byte	.LASF219
 4119 1076 01       		.byte	0x1
 4120 1077 1A01     		.2byte	0x11a
 4121 1079 D8000000 		.4byte	0xd8
 4122 107d 02       		.uleb128 0x2
 4123 107e 91       		.byte	0x91
 4124 107f 74       		.sleb128 -12
 4125 1080 00       		.byte	0
 4126 1081 31       		.uleb128 0x31
 4127 1082 72080000 		.4byte	.LASF226
 4128 1086 01       		.byte	0x1
 4129 1087 FF       		.byte	0xff
 4130 1088 00000000 		.4byte	.LFB63
 4131 108c 38000000 		.4byte	.LFE63-.LFB63
 4132 1090 01       		.uleb128 0x1
 4133 1091 9C       		.byte	0x9c
 4134 1092 32       		.uleb128 0x32
 4135 1093 0C000000 		.4byte	.LASF220
 4136 1097 01       		.byte	0x1
 4137 1098 FF       		.byte	0xff
 4138 1099 D8000000 		.4byte	0xd8
 4139 109d 02       		.uleb128 0x2
 4140 109e 91       		.byte	0x91
 4141 109f 6C       		.sleb128 -20
 4142 10a0 2B       		.uleb128 0x2b
 4143 10a1 E7010000 		.4byte	.LASF221
 4144 10a5 01       		.byte	0x1
 4145 10a6 0101     		.2byte	0x101
 4146 10a8 D8000000 		.4byte	0xd8
 4147 10ac 02       		.uleb128 0x2
 4148 10ad 91       		.byte	0x91
 4149 10ae 74       		.sleb128 -12
 4150 10af 00       		.byte	0
 4151 10b0 00       		.byte	0
 4152              		.section	.debug_abbrev,"",%progbits
 4153              	.Ldebug_abbrev0:
 4154 0000 01       		.uleb128 0x1
 4155 0001 11       		.uleb128 0x11
 4156 0002 01       		.byte	0x1
 4157 0003 25       		.uleb128 0x25
 4158 0004 0E       		.uleb128 0xe
 4159 0005 13       		.uleb128 0x13
 4160 0006 0B       		.uleb128 0xb
 4161 0007 03       		.uleb128 0x3
 4162 0008 0E       		.uleb128 0xe
 4163 0009 1B       		.uleb128 0x1b
 4164 000a 0E       		.uleb128 0xe
 4165 000b 11       		.uleb128 0x11
 4166 000c 01       		.uleb128 0x1
 4167 000d 12       		.uleb128 0x12
ARM GAS  /tmp/ccohH8g1.s 			page 103


 4168 000e 06       		.uleb128 0x6
 4169 000f 10       		.uleb128 0x10
 4170 0010 17       		.uleb128 0x17
 4171 0011 00       		.byte	0
 4172 0012 00       		.byte	0
 4173 0013 02       		.uleb128 0x2
 4174 0014 24       		.uleb128 0x24
 4175 0015 00       		.byte	0
 4176 0016 0B       		.uleb128 0xb
 4177 0017 0B       		.uleb128 0xb
 4178 0018 3E       		.uleb128 0x3e
 4179 0019 0B       		.uleb128 0xb
 4180 001a 03       		.uleb128 0x3
 4181 001b 0E       		.uleb128 0xe
 4182 001c 00       		.byte	0
 4183 001d 00       		.byte	0
 4184 001e 03       		.uleb128 0x3
 4185 001f 16       		.uleb128 0x16
 4186 0020 00       		.byte	0
 4187 0021 03       		.uleb128 0x3
 4188 0022 0E       		.uleb128 0xe
 4189 0023 3A       		.uleb128 0x3a
 4190 0024 0B       		.uleb128 0xb
 4191 0025 3B       		.uleb128 0x3b
 4192 0026 0B       		.uleb128 0xb
 4193 0027 49       		.uleb128 0x49
 4194 0028 13       		.uleb128 0x13
 4195 0029 00       		.byte	0
 4196 002a 00       		.byte	0
 4197 002b 04       		.uleb128 0x4
 4198 002c 24       		.uleb128 0x24
 4199 002d 00       		.byte	0
 4200 002e 0B       		.uleb128 0xb
 4201 002f 0B       		.uleb128 0xb
 4202 0030 3E       		.uleb128 0x3e
 4203 0031 0B       		.uleb128 0xb
 4204 0032 03       		.uleb128 0x3
 4205 0033 08       		.uleb128 0x8
 4206 0034 00       		.byte	0
 4207 0035 00       		.byte	0
 4208 0036 05       		.uleb128 0x5
 4209 0037 35       		.uleb128 0x35
 4210 0038 00       		.byte	0
 4211 0039 49       		.uleb128 0x49
 4212 003a 13       		.uleb128 0x13
 4213 003b 00       		.byte	0
 4214 003c 00       		.byte	0
 4215 003d 06       		.uleb128 0x6
 4216 003e 34       		.uleb128 0x34
 4217 003f 00       		.byte	0
 4218 0040 03       		.uleb128 0x3
 4219 0041 0E       		.uleb128 0xe
 4220 0042 3A       		.uleb128 0x3a
 4221 0043 0B       		.uleb128 0xb
 4222 0044 3B       		.uleb128 0x3b
 4223 0045 05       		.uleb128 0x5
 4224 0046 49       		.uleb128 0x49
ARM GAS  /tmp/ccohH8g1.s 			page 104


 4225 0047 13       		.uleb128 0x13
 4226 0048 3F       		.uleb128 0x3f
 4227 0049 19       		.uleb128 0x19
 4228 004a 3C       		.uleb128 0x3c
 4229 004b 19       		.uleb128 0x19
 4230 004c 00       		.byte	0
 4231 004d 00       		.byte	0
 4232 004e 07       		.uleb128 0x7
 4233 004f 34       		.uleb128 0x34
 4234 0050 00       		.byte	0
 4235 0051 03       		.uleb128 0x3
 4236 0052 0E       		.uleb128 0xe
 4237 0053 3A       		.uleb128 0x3a
 4238 0054 0B       		.uleb128 0xb
 4239 0055 3B       		.uleb128 0x3b
 4240 0056 0B       		.uleb128 0xb
 4241 0057 49       		.uleb128 0x49
 4242 0058 13       		.uleb128 0x13
 4243 0059 3F       		.uleb128 0x3f
 4244 005a 19       		.uleb128 0x19
 4245 005b 3C       		.uleb128 0x3c
 4246 005c 19       		.uleb128 0x19
 4247 005d 00       		.byte	0
 4248 005e 00       		.byte	0
 4249 005f 08       		.uleb128 0x8
 4250 0060 04       		.uleb128 0x4
 4251 0061 01       		.byte	0x1
 4252 0062 0B       		.uleb128 0xb
 4253 0063 0B       		.uleb128 0xb
 4254 0064 49       		.uleb128 0x49
 4255 0065 13       		.uleb128 0x13
 4256 0066 3A       		.uleb128 0x3a
 4257 0067 0B       		.uleb128 0xb
 4258 0068 3B       		.uleb128 0x3b
 4259 0069 05       		.uleb128 0x5
 4260 006a 01       		.uleb128 0x1
 4261 006b 13       		.uleb128 0x13
 4262 006c 00       		.byte	0
 4263 006d 00       		.byte	0
 4264 006e 09       		.uleb128 0x9
 4265 006f 28       		.uleb128 0x28
 4266 0070 00       		.byte	0
 4267 0071 03       		.uleb128 0x3
 4268 0072 0E       		.uleb128 0xe
 4269 0073 1C       		.uleb128 0x1c
 4270 0074 0B       		.uleb128 0xb
 4271 0075 00       		.byte	0
 4272 0076 00       		.byte	0
 4273 0077 0A       		.uleb128 0xa
 4274 0078 28       		.uleb128 0x28
 4275 0079 00       		.byte	0
 4276 007a 03       		.uleb128 0x3
 4277 007b 08       		.uleb128 0x8
 4278 007c 1C       		.uleb128 0x1c
 4279 007d 0B       		.uleb128 0xb
 4280 007e 00       		.byte	0
 4281 007f 00       		.byte	0
ARM GAS  /tmp/ccohH8g1.s 			page 105


 4282 0080 0B       		.uleb128 0xb
 4283 0081 16       		.uleb128 0x16
 4284 0082 00       		.byte	0
 4285 0083 03       		.uleb128 0x3
 4286 0084 0E       		.uleb128 0xe
 4287 0085 3A       		.uleb128 0x3a
 4288 0086 0B       		.uleb128 0xb
 4289 0087 3B       		.uleb128 0x3b
 4290 0088 05       		.uleb128 0x5
 4291 0089 49       		.uleb128 0x49
 4292 008a 13       		.uleb128 0x13
 4293 008b 00       		.byte	0
 4294 008c 00       		.byte	0
 4295 008d 0C       		.uleb128 0xc
 4296 008e 13       		.uleb128 0x13
 4297 008f 01       		.byte	0x1
 4298 0090 0B       		.uleb128 0xb
 4299 0091 0B       		.uleb128 0xb
 4300 0092 3A       		.uleb128 0x3a
 4301 0093 0B       		.uleb128 0xb
 4302 0094 3B       		.uleb128 0x3b
 4303 0095 05       		.uleb128 0x5
 4304 0096 01       		.uleb128 0x1
 4305 0097 13       		.uleb128 0x13
 4306 0098 00       		.byte	0
 4307 0099 00       		.byte	0
 4308 009a 0D       		.uleb128 0xd
 4309 009b 0D       		.uleb128 0xd
 4310 009c 00       		.byte	0
 4311 009d 03       		.uleb128 0x3
 4312 009e 08       		.uleb128 0x8
 4313 009f 3A       		.uleb128 0x3a
 4314 00a0 0B       		.uleb128 0xb
 4315 00a1 3B       		.uleb128 0x3b
 4316 00a2 05       		.uleb128 0x5
 4317 00a3 49       		.uleb128 0x49
 4318 00a4 13       		.uleb128 0x13
 4319 00a5 38       		.uleb128 0x38
 4320 00a6 0B       		.uleb128 0xb
 4321 00a7 00       		.byte	0
 4322 00a8 00       		.byte	0
 4323 00a9 0E       		.uleb128 0xe
 4324 00aa 0D       		.uleb128 0xd
 4325 00ab 00       		.byte	0
 4326 00ac 03       		.uleb128 0x3
 4327 00ad 0E       		.uleb128 0xe
 4328 00ae 3A       		.uleb128 0x3a
 4329 00af 0B       		.uleb128 0xb
 4330 00b0 3B       		.uleb128 0x3b
 4331 00b1 05       		.uleb128 0x5
 4332 00b2 49       		.uleb128 0x49
 4333 00b3 13       		.uleb128 0x13
 4334 00b4 38       		.uleb128 0x38
 4335 00b5 0B       		.uleb128 0xb
 4336 00b6 00       		.byte	0
 4337 00b7 00       		.byte	0
 4338 00b8 0F       		.uleb128 0xf
ARM GAS  /tmp/ccohH8g1.s 			page 106


 4339 00b9 04       		.uleb128 0x4
 4340 00ba 01       		.byte	0x1
 4341 00bb 0B       		.uleb128 0xb
 4342 00bc 0B       		.uleb128 0xb
 4343 00bd 49       		.uleb128 0x49
 4344 00be 13       		.uleb128 0x13
 4345 00bf 3A       		.uleb128 0x3a
 4346 00c0 0B       		.uleb128 0xb
 4347 00c1 3B       		.uleb128 0x3b
 4348 00c2 0B       		.uleb128 0xb
 4349 00c3 01       		.uleb128 0x1
 4350 00c4 13       		.uleb128 0x13
 4351 00c5 00       		.byte	0
 4352 00c6 00       		.byte	0
 4353 00c7 10       		.uleb128 0x10
 4354 00c8 15       		.uleb128 0x15
 4355 00c9 00       		.byte	0
 4356 00ca 27       		.uleb128 0x27
 4357 00cb 19       		.uleb128 0x19
 4358 00cc 00       		.byte	0
 4359 00cd 00       		.byte	0
 4360 00ce 11       		.uleb128 0x11
 4361 00cf 0F       		.uleb128 0xf
 4362 00d0 00       		.byte	0
 4363 00d1 0B       		.uleb128 0xb
 4364 00d2 0B       		.uleb128 0xb
 4365 00d3 49       		.uleb128 0x49
 4366 00d4 13       		.uleb128 0x13
 4367 00d5 00       		.byte	0
 4368 00d6 00       		.byte	0
 4369 00d7 12       		.uleb128 0x12
 4370 00d8 01       		.uleb128 0x1
 4371 00d9 01       		.byte	0x1
 4372 00da 49       		.uleb128 0x49
 4373 00db 13       		.uleb128 0x13
 4374 00dc 01       		.uleb128 0x1
 4375 00dd 13       		.uleb128 0x13
 4376 00de 00       		.byte	0
 4377 00df 00       		.byte	0
 4378 00e0 13       		.uleb128 0x13
 4379 00e1 21       		.uleb128 0x21
 4380 00e2 00       		.byte	0
 4381 00e3 49       		.uleb128 0x49
 4382 00e4 13       		.uleb128 0x13
 4383 00e5 2F       		.uleb128 0x2f
 4384 00e6 0B       		.uleb128 0xb
 4385 00e7 00       		.byte	0
 4386 00e8 00       		.byte	0
 4387 00e9 14       		.uleb128 0x14
 4388 00ea 34       		.uleb128 0x34
 4389 00eb 00       		.byte	0
 4390 00ec 03       		.uleb128 0x3
 4391 00ed 08       		.uleb128 0x8
 4392 00ee 3A       		.uleb128 0x3a
 4393 00ef 0B       		.uleb128 0xb
 4394 00f0 3B       		.uleb128 0x3b
 4395 00f1 05       		.uleb128 0x5
ARM GAS  /tmp/ccohH8g1.s 			page 107


 4396 00f2 49       		.uleb128 0x49
 4397 00f3 13       		.uleb128 0x13
 4398 00f4 3F       		.uleb128 0x3f
 4399 00f5 19       		.uleb128 0x19
 4400 00f6 3C       		.uleb128 0x3c
 4401 00f7 19       		.uleb128 0x19
 4402 00f8 00       		.byte	0
 4403 00f9 00       		.byte	0
 4404 00fa 15       		.uleb128 0x15
 4405 00fb 17       		.uleb128 0x17
 4406 00fc 01       		.byte	0x1
 4407 00fd 0B       		.uleb128 0xb
 4408 00fe 0B       		.uleb128 0xb
 4409 00ff 3A       		.uleb128 0x3a
 4410 0100 0B       		.uleb128 0xb
 4411 0101 3B       		.uleb128 0x3b
 4412 0102 0B       		.uleb128 0xb
 4413 0103 01       		.uleb128 0x1
 4414 0104 13       		.uleb128 0x13
 4415 0105 00       		.byte	0
 4416 0106 00       		.byte	0
 4417 0107 16       		.uleb128 0x16
 4418 0108 0D       		.uleb128 0xd
 4419 0109 00       		.byte	0
 4420 010a 03       		.uleb128 0x3
 4421 010b 0E       		.uleb128 0xe
 4422 010c 3A       		.uleb128 0x3a
 4423 010d 0B       		.uleb128 0xb
 4424 010e 3B       		.uleb128 0x3b
 4425 010f 0B       		.uleb128 0xb
 4426 0110 49       		.uleb128 0x49
 4427 0111 13       		.uleb128 0x13
 4428 0112 00       		.byte	0
 4429 0113 00       		.byte	0
 4430 0114 17       		.uleb128 0x17
 4431 0115 13       		.uleb128 0x13
 4432 0116 01       		.byte	0x1
 4433 0117 0B       		.uleb128 0xb
 4434 0118 0B       		.uleb128 0xb
 4435 0119 3A       		.uleb128 0x3a
 4436 011a 0B       		.uleb128 0xb
 4437 011b 3B       		.uleb128 0x3b
 4438 011c 0B       		.uleb128 0xb
 4439 011d 01       		.uleb128 0x1
 4440 011e 13       		.uleb128 0x13
 4441 011f 00       		.byte	0
 4442 0120 00       		.byte	0
 4443 0121 18       		.uleb128 0x18
 4444 0122 0D       		.uleb128 0xd
 4445 0123 00       		.byte	0
 4446 0124 03       		.uleb128 0x3
 4447 0125 0E       		.uleb128 0xe
 4448 0126 3A       		.uleb128 0x3a
 4449 0127 0B       		.uleb128 0xb
 4450 0128 3B       		.uleb128 0x3b
 4451 0129 0B       		.uleb128 0xb
 4452 012a 49       		.uleb128 0x49
ARM GAS  /tmp/ccohH8g1.s 			page 108


 4453 012b 13       		.uleb128 0x13
 4454 012c 38       		.uleb128 0x38
 4455 012d 0B       		.uleb128 0xb
 4456 012e 00       		.byte	0
 4457 012f 00       		.byte	0
 4458 0130 19       		.uleb128 0x19
 4459 0131 0F       		.uleb128 0xf
 4460 0132 00       		.byte	0
 4461 0133 0B       		.uleb128 0xb
 4462 0134 0B       		.uleb128 0xb
 4463 0135 00       		.byte	0
 4464 0136 00       		.byte	0
 4465 0137 1A       		.uleb128 0x1a
 4466 0138 26       		.uleb128 0x26
 4467 0139 00       		.byte	0
 4468 013a 49       		.uleb128 0x49
 4469 013b 13       		.uleb128 0x13
 4470 013c 00       		.byte	0
 4471 013d 00       		.byte	0
 4472 013e 1B       		.uleb128 0x1b
 4473 013f 13       		.uleb128 0x13
 4474 0140 01       		.byte	0x1
 4475 0141 03       		.uleb128 0x3
 4476 0142 0E       		.uleb128 0xe
 4477 0143 0B       		.uleb128 0xb
 4478 0144 0B       		.uleb128 0xb
 4479 0145 3A       		.uleb128 0x3a
 4480 0146 0B       		.uleb128 0xb
 4481 0147 3B       		.uleb128 0x3b
 4482 0148 0B       		.uleb128 0xb
 4483 0149 01       		.uleb128 0x1
 4484 014a 13       		.uleb128 0x13
 4485 014b 00       		.byte	0
 4486 014c 00       		.byte	0
 4487 014d 1C       		.uleb128 0x1c
 4488 014e 0D       		.uleb128 0xd
 4489 014f 00       		.byte	0
 4490 0150 03       		.uleb128 0x3
 4491 0151 08       		.uleb128 0x8
 4492 0152 3A       		.uleb128 0x3a
 4493 0153 0B       		.uleb128 0xb
 4494 0154 3B       		.uleb128 0x3b
 4495 0155 0B       		.uleb128 0xb
 4496 0156 49       		.uleb128 0x49
 4497 0157 13       		.uleb128 0x13
 4498 0158 38       		.uleb128 0x38
 4499 0159 0B       		.uleb128 0xb
 4500 015a 00       		.byte	0
 4501 015b 00       		.byte	0
 4502 015c 1D       		.uleb128 0x1d
 4503 015d 13       		.uleb128 0x13
 4504 015e 01       		.byte	0x1
 4505 015f 03       		.uleb128 0x3
 4506 0160 0E       		.uleb128 0xe
 4507 0161 0B       		.uleb128 0xb
 4508 0162 05       		.uleb128 0x5
 4509 0163 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccohH8g1.s 			page 109


 4510 0164 0B       		.uleb128 0xb
 4511 0165 3B       		.uleb128 0x3b
 4512 0166 0B       		.uleb128 0xb
 4513 0167 01       		.uleb128 0x1
 4514 0168 13       		.uleb128 0x13
 4515 0169 00       		.byte	0
 4516 016a 00       		.byte	0
 4517 016b 1E       		.uleb128 0x1e
 4518 016c 0D       		.uleb128 0xd
 4519 016d 00       		.byte	0
 4520 016e 03       		.uleb128 0x3
 4521 016f 0E       		.uleb128 0xe
 4522 0170 3A       		.uleb128 0x3a
 4523 0171 0B       		.uleb128 0xb
 4524 0172 3B       		.uleb128 0x3b
 4525 0173 0B       		.uleb128 0xb
 4526 0174 49       		.uleb128 0x49
 4527 0175 13       		.uleb128 0x13
 4528 0176 38       		.uleb128 0x38
 4529 0177 05       		.uleb128 0x5
 4530 0178 00       		.byte	0
 4531 0179 00       		.byte	0
 4532 017a 1F       		.uleb128 0x1f
 4533 017b 15       		.uleb128 0x15
 4534 017c 01       		.byte	0x1
 4535 017d 27       		.uleb128 0x27
 4536 017e 19       		.uleb128 0x19
 4537 017f 49       		.uleb128 0x49
 4538 0180 13       		.uleb128 0x13
 4539 0181 01       		.uleb128 0x1
 4540 0182 13       		.uleb128 0x13
 4541 0183 00       		.byte	0
 4542 0184 00       		.byte	0
 4543 0185 20       		.uleb128 0x20
 4544 0186 05       		.uleb128 0x5
 4545 0187 00       		.byte	0
 4546 0188 49       		.uleb128 0x49
 4547 0189 13       		.uleb128 0x13
 4548 018a 00       		.byte	0
 4549 018b 00       		.byte	0
 4550 018c 21       		.uleb128 0x21
 4551 018d 13       		.uleb128 0x13
 4552 018e 01       		.byte	0x1
 4553 018f 03       		.uleb128 0x3
 4554 0190 0E       		.uleb128 0xe
 4555 0191 0B       		.uleb128 0xb
 4556 0192 05       		.uleb128 0x5
 4557 0193 3A       		.uleb128 0x3a
 4558 0194 0B       		.uleb128 0xb
 4559 0195 3B       		.uleb128 0x3b
 4560 0196 05       		.uleb128 0x5
 4561 0197 01       		.uleb128 0x1
 4562 0198 13       		.uleb128 0x13
 4563 0199 00       		.byte	0
 4564 019a 00       		.byte	0
 4565 019b 22       		.uleb128 0x22
 4566 019c 0D       		.uleb128 0xd
ARM GAS  /tmp/ccohH8g1.s 			page 110


 4567 019d 00       		.byte	0
 4568 019e 03       		.uleb128 0x3
 4569 019f 0E       		.uleb128 0xe
 4570 01a0 3A       		.uleb128 0x3a
 4571 01a1 0B       		.uleb128 0xb
 4572 01a2 3B       		.uleb128 0x3b
 4573 01a3 05       		.uleb128 0x5
 4574 01a4 49       		.uleb128 0x49
 4575 01a5 13       		.uleb128 0x13
 4576 01a6 38       		.uleb128 0x38
 4577 01a7 05       		.uleb128 0x5
 4578 01a8 00       		.byte	0
 4579 01a9 00       		.byte	0
 4580 01aa 23       		.uleb128 0x23
 4581 01ab 13       		.uleb128 0x13
 4582 01ac 01       		.byte	0x1
 4583 01ad 03       		.uleb128 0x3
 4584 01ae 0E       		.uleb128 0xe
 4585 01af 0B       		.uleb128 0xb
 4586 01b0 0B       		.uleb128 0xb
 4587 01b1 3A       		.uleb128 0x3a
 4588 01b2 0B       		.uleb128 0xb
 4589 01b3 3B       		.uleb128 0x3b
 4590 01b4 05       		.uleb128 0x5
 4591 01b5 01       		.uleb128 0x1
 4592 01b6 13       		.uleb128 0x13
 4593 01b7 00       		.byte	0
 4594 01b8 00       		.byte	0
 4595 01b9 24       		.uleb128 0x24
 4596 01ba 17       		.uleb128 0x17
 4597 01bb 01       		.byte	0x1
 4598 01bc 0B       		.uleb128 0xb
 4599 01bd 0B       		.uleb128 0xb
 4600 01be 3A       		.uleb128 0x3a
 4601 01bf 0B       		.uleb128 0xb
 4602 01c0 3B       		.uleb128 0x3b
 4603 01c1 05       		.uleb128 0x5
 4604 01c2 01       		.uleb128 0x1
 4605 01c3 13       		.uleb128 0x13
 4606 01c4 00       		.byte	0
 4607 01c5 00       		.byte	0
 4608 01c6 25       		.uleb128 0x25
 4609 01c7 0D       		.uleb128 0xd
 4610 01c8 00       		.byte	0
 4611 01c9 03       		.uleb128 0x3
 4612 01ca 0E       		.uleb128 0xe
 4613 01cb 3A       		.uleb128 0x3a
 4614 01cc 0B       		.uleb128 0xb
 4615 01cd 3B       		.uleb128 0x3b
 4616 01ce 05       		.uleb128 0x5
 4617 01cf 49       		.uleb128 0x49
 4618 01d0 13       		.uleb128 0x13
 4619 01d1 00       		.byte	0
 4620 01d2 00       		.byte	0
 4621 01d3 26       		.uleb128 0x26
 4622 01d4 15       		.uleb128 0x15
 4623 01d5 01       		.byte	0x1
ARM GAS  /tmp/ccohH8g1.s 			page 111


 4624 01d6 27       		.uleb128 0x27
 4625 01d7 19       		.uleb128 0x19
 4626 01d8 01       		.uleb128 0x1
 4627 01d9 13       		.uleb128 0x13
 4628 01da 00       		.byte	0
 4629 01db 00       		.byte	0
 4630 01dc 27       		.uleb128 0x27
 4631 01dd 04       		.uleb128 0x4
 4632 01de 01       		.byte	0x1
 4633 01df 03       		.uleb128 0x3
 4634 01e0 0E       		.uleb128 0xe
 4635 01e1 0B       		.uleb128 0xb
 4636 01e2 0B       		.uleb128 0xb
 4637 01e3 49       		.uleb128 0x49
 4638 01e4 13       		.uleb128 0x13
 4639 01e5 3A       		.uleb128 0x3a
 4640 01e6 0B       		.uleb128 0xb
 4641 01e7 3B       		.uleb128 0x3b
 4642 01e8 05       		.uleb128 0x5
 4643 01e9 01       		.uleb128 0x1
 4644 01ea 13       		.uleb128 0x13
 4645 01eb 00       		.byte	0
 4646 01ec 00       		.byte	0
 4647 01ed 28       		.uleb128 0x28
 4648 01ee 28       		.uleb128 0x28
 4649 01ef 00       		.byte	0
 4650 01f0 03       		.uleb128 0x3
 4651 01f1 0E       		.uleb128 0xe
 4652 01f2 1C       		.uleb128 0x1c
 4653 01f3 0D       		.uleb128 0xd
 4654 01f4 00       		.byte	0
 4655 01f5 00       		.byte	0
 4656 01f6 29       		.uleb128 0x29
 4657 01f7 2E       		.uleb128 0x2e
 4658 01f8 01       		.byte	0x1
 4659 01f9 3F       		.uleb128 0x3f
 4660 01fa 19       		.uleb128 0x19
 4661 01fb 03       		.uleb128 0x3
 4662 01fc 0E       		.uleb128 0xe
 4663 01fd 3A       		.uleb128 0x3a
 4664 01fe 0B       		.uleb128 0xb
 4665 01ff 3B       		.uleb128 0x3b
 4666 0200 05       		.uleb128 0x5
 4667 0201 27       		.uleb128 0x27
 4668 0202 19       		.uleb128 0x19
 4669 0203 49       		.uleb128 0x49
 4670 0204 13       		.uleb128 0x13
 4671 0205 11       		.uleb128 0x11
 4672 0206 01       		.uleb128 0x1
 4673 0207 12       		.uleb128 0x12
 4674 0208 06       		.uleb128 0x6
 4675 0209 40       		.uleb128 0x40
 4676 020a 18       		.uleb128 0x18
 4677 020b 9642     		.uleb128 0x2116
 4678 020d 19       		.uleb128 0x19
 4679 020e 01       		.uleb128 0x1
 4680 020f 13       		.uleb128 0x13
ARM GAS  /tmp/ccohH8g1.s 			page 112


 4681 0210 00       		.byte	0
 4682 0211 00       		.byte	0
 4683 0212 2A       		.uleb128 0x2a
 4684 0213 05       		.uleb128 0x5
 4685 0214 00       		.byte	0
 4686 0215 03       		.uleb128 0x3
 4687 0216 0E       		.uleb128 0xe
 4688 0217 3A       		.uleb128 0x3a
 4689 0218 0B       		.uleb128 0xb
 4690 0219 3B       		.uleb128 0x3b
 4691 021a 05       		.uleb128 0x5
 4692 021b 49       		.uleb128 0x49
 4693 021c 13       		.uleb128 0x13
 4694 021d 02       		.uleb128 0x2
 4695 021e 18       		.uleb128 0x18
 4696 021f 00       		.byte	0
 4697 0220 00       		.byte	0
 4698 0221 2B       		.uleb128 0x2b
 4699 0222 34       		.uleb128 0x34
 4700 0223 00       		.byte	0
 4701 0224 03       		.uleb128 0x3
 4702 0225 0E       		.uleb128 0xe
 4703 0226 3A       		.uleb128 0x3a
 4704 0227 0B       		.uleb128 0xb
 4705 0228 3B       		.uleb128 0x3b
 4706 0229 05       		.uleb128 0x5
 4707 022a 49       		.uleb128 0x49
 4708 022b 13       		.uleb128 0x13
 4709 022c 02       		.uleb128 0x2
 4710 022d 18       		.uleb128 0x18
 4711 022e 00       		.byte	0
 4712 022f 00       		.byte	0
 4713 0230 2C       		.uleb128 0x2c
 4714 0231 2E       		.uleb128 0x2e
 4715 0232 01       		.byte	0x1
 4716 0233 3F       		.uleb128 0x3f
 4717 0234 19       		.uleb128 0x19
 4718 0235 03       		.uleb128 0x3
 4719 0236 0E       		.uleb128 0xe
 4720 0237 3A       		.uleb128 0x3a
 4721 0238 0B       		.uleb128 0xb
 4722 0239 3B       		.uleb128 0x3b
 4723 023a 05       		.uleb128 0x5
 4724 023b 27       		.uleb128 0x27
 4725 023c 19       		.uleb128 0x19
 4726 023d 49       		.uleb128 0x49
 4727 023e 13       		.uleb128 0x13
 4728 023f 11       		.uleb128 0x11
 4729 0240 01       		.uleb128 0x1
 4730 0241 12       		.uleb128 0x12
 4731 0242 06       		.uleb128 0x6
 4732 0243 40       		.uleb128 0x40
 4733 0244 18       		.uleb128 0x18
 4734 0245 9742     		.uleb128 0x2117
 4735 0247 19       		.uleb128 0x19
 4736 0248 01       		.uleb128 0x1
 4737 0249 13       		.uleb128 0x13
ARM GAS  /tmp/ccohH8g1.s 			page 113


 4738 024a 00       		.byte	0
 4739 024b 00       		.byte	0
 4740 024c 2D       		.uleb128 0x2d
 4741 024d 2E       		.uleb128 0x2e
 4742 024e 01       		.byte	0x1
 4743 024f 3F       		.uleb128 0x3f
 4744 0250 19       		.uleb128 0x19
 4745 0251 03       		.uleb128 0x3
 4746 0252 0E       		.uleb128 0xe
 4747 0253 3A       		.uleb128 0x3a
 4748 0254 0B       		.uleb128 0xb
 4749 0255 3B       		.uleb128 0x3b
 4750 0256 05       		.uleb128 0x5
 4751 0257 27       		.uleb128 0x27
 4752 0258 19       		.uleb128 0x19
 4753 0259 11       		.uleb128 0x11
 4754 025a 01       		.uleb128 0x1
 4755 025b 12       		.uleb128 0x12
 4756 025c 06       		.uleb128 0x6
 4757 025d 40       		.uleb128 0x40
 4758 025e 18       		.uleb128 0x18
 4759 025f 9742     		.uleb128 0x2117
 4760 0261 19       		.uleb128 0x19
 4761 0262 01       		.uleb128 0x1
 4762 0263 13       		.uleb128 0x13
 4763 0264 00       		.byte	0
 4764 0265 00       		.byte	0
 4765 0266 2E       		.uleb128 0x2e
 4766 0267 2E       		.uleb128 0x2e
 4767 0268 00       		.byte	0
 4768 0269 3F       		.uleb128 0x3f
 4769 026a 19       		.uleb128 0x19
 4770 026b 03       		.uleb128 0x3
 4771 026c 0E       		.uleb128 0xe
 4772 026d 3A       		.uleb128 0x3a
 4773 026e 0B       		.uleb128 0xb
 4774 026f 3B       		.uleb128 0x3b
 4775 0270 05       		.uleb128 0x5
 4776 0271 27       		.uleb128 0x27
 4777 0272 19       		.uleb128 0x19
 4778 0273 49       		.uleb128 0x49
 4779 0274 13       		.uleb128 0x13
 4780 0275 11       		.uleb128 0x11
 4781 0276 01       		.uleb128 0x1
 4782 0277 12       		.uleb128 0x12
 4783 0278 06       		.uleb128 0x6
 4784 0279 40       		.uleb128 0x40
 4785 027a 18       		.uleb128 0x18
 4786 027b 9742     		.uleb128 0x2117
 4787 027d 19       		.uleb128 0x19
 4788 027e 00       		.byte	0
 4789 027f 00       		.byte	0
 4790 0280 2F       		.uleb128 0x2f
 4791 0281 34       		.uleb128 0x34
 4792 0282 00       		.byte	0
 4793 0283 03       		.uleb128 0x3
 4794 0284 08       		.uleb128 0x8
ARM GAS  /tmp/ccohH8g1.s 			page 114


 4795 0285 3A       		.uleb128 0x3a
 4796 0286 0B       		.uleb128 0xb
 4797 0287 3B       		.uleb128 0x3b
 4798 0288 05       		.uleb128 0x5
 4799 0289 49       		.uleb128 0x49
 4800 028a 13       		.uleb128 0x13
 4801 028b 02       		.uleb128 0x2
 4802 028c 18       		.uleb128 0x18
 4803 028d 00       		.byte	0
 4804 028e 00       		.byte	0
 4805 028f 30       		.uleb128 0x30
 4806 0290 2E       		.uleb128 0x2e
 4807 0291 00       		.byte	0
 4808 0292 3F       		.uleb128 0x3f
 4809 0293 19       		.uleb128 0x19
 4810 0294 03       		.uleb128 0x3
 4811 0295 0E       		.uleb128 0xe
 4812 0296 3A       		.uleb128 0x3a
 4813 0297 0B       		.uleb128 0xb
 4814 0298 3B       		.uleb128 0x3b
 4815 0299 05       		.uleb128 0x5
 4816 029a 27       		.uleb128 0x27
 4817 029b 19       		.uleb128 0x19
 4818 029c 11       		.uleb128 0x11
 4819 029d 01       		.uleb128 0x1
 4820 029e 12       		.uleb128 0x12
 4821 029f 06       		.uleb128 0x6
 4822 02a0 40       		.uleb128 0x40
 4823 02a1 18       		.uleb128 0x18
 4824 02a2 9742     		.uleb128 0x2117
 4825 02a4 19       		.uleb128 0x19
 4826 02a5 00       		.byte	0
 4827 02a6 00       		.byte	0
 4828 02a7 31       		.uleb128 0x31
 4829 02a8 2E       		.uleb128 0x2e
 4830 02a9 01       		.byte	0x1
 4831 02aa 3F       		.uleb128 0x3f
 4832 02ab 19       		.uleb128 0x19
 4833 02ac 03       		.uleb128 0x3
 4834 02ad 0E       		.uleb128 0xe
 4835 02ae 3A       		.uleb128 0x3a
 4836 02af 0B       		.uleb128 0xb
 4837 02b0 3B       		.uleb128 0x3b
 4838 02b1 0B       		.uleb128 0xb
 4839 02b2 27       		.uleb128 0x27
 4840 02b3 19       		.uleb128 0x19
 4841 02b4 11       		.uleb128 0x11
 4842 02b5 01       		.uleb128 0x1
 4843 02b6 12       		.uleb128 0x12
 4844 02b7 06       		.uleb128 0x6
 4845 02b8 40       		.uleb128 0x40
 4846 02b9 18       		.uleb128 0x18
 4847 02ba 9742     		.uleb128 0x2117
 4848 02bc 19       		.uleb128 0x19
 4849 02bd 00       		.byte	0
 4850 02be 00       		.byte	0
 4851 02bf 32       		.uleb128 0x32
ARM GAS  /tmp/ccohH8g1.s 			page 115


 4852 02c0 05       		.uleb128 0x5
 4853 02c1 00       		.byte	0
 4854 02c2 03       		.uleb128 0x3
 4855 02c3 0E       		.uleb128 0xe
 4856 02c4 3A       		.uleb128 0x3a
 4857 02c5 0B       		.uleb128 0xb
 4858 02c6 3B       		.uleb128 0x3b
 4859 02c7 0B       		.uleb128 0xb
 4860 02c8 49       		.uleb128 0x49
 4861 02c9 13       		.uleb128 0x13
 4862 02ca 02       		.uleb128 0x2
 4863 02cb 18       		.uleb128 0x18
 4864 02cc 00       		.byte	0
 4865 02cd 00       		.byte	0
 4866 02ce 00       		.byte	0
 4867              		.section	.debug_aranges,"",%progbits
 4868 0000 1C000000 		.4byte	0x1c
 4869 0004 0200     		.2byte	0x2
 4870 0006 00000000 		.4byte	.Ldebug_info0
 4871 000a 04       		.byte	0x4
 4872 000b 00       		.byte	0
 4873 000c 0000     		.2byte	0
 4874 000e 0000     		.2byte	0
 4875 0010 00000000 		.4byte	.Ltext0
 4876 0014 54090000 		.4byte	.Letext0-.Ltext0
 4877 0018 00000000 		.4byte	0
 4878 001c 00000000 		.4byte	0
 4879              		.section	.debug_line,"",%progbits
 4880              	.Ldebug_line0:
 4881 0000 3E030000 		.section	.debug_str,"MS",%progbits,1
 4881      0200B201 
 4881      00000201 
 4881      FB0E0D00 
 4881      01010101 
 4882              	.LASF85:
 4883 0000 5F64736F 		.ascii	"_dso_handle\000"
 4883      5F68616E 
 4883      646C6500 
 4884              	.LASF220:
 4885 000c 464C4153 		.ascii	"FLASH_Latency\000"
 4885      485F4C61 
 4885      74656E63 
 4885      7900
 4886              	.LASF184:
 4887 001a 4E657753 		.ascii	"NewState\000"
 4887      74617465 
 4887      00
 4888              	.LASF172:
 4889 0023 464C4153 		.ascii	"FLASH_WaitForLastOperation\000"
 4889      485F5761 
 4889      6974466F 
 4889      724C6173 
 4889      744F7065 
 4890              	.LASF84:
 4891 003e 5F666E61 		.ascii	"_fnargs\000"
 4891      72677300 
 4892              	.LASF137:
ARM GAS  /tmp/ccohH8g1.s 			page 116


 4893 0046 5F72616E 		.ascii	"_rand48\000"
 4893      64343800 
 4894              	.LASF23:
 4895 004e 466C6167 		.ascii	"FlagStatus\000"
 4895      53746174 
 4895      757300
 4896              	.LASF168:
 4897 0059 5F5F6664 		.ascii	"__fdlibm_xopen\000"
 4897      6C69626D 
 4897      5F786F70 
 4897      656E00
 4898              	.LASF117:
 4899 0068 5F656D65 		.ascii	"_emergency\000"
 4899      7267656E 
 4899      637900
 4900              	.LASF207:
 4901 0073 72647074 		.ascii	"rdptmp\000"
 4901      6D7000
 4902              	.LASF82:
 4903 007a 5F5F746D 		.ascii	"__tm_isdst\000"
 4903      5F697364 
 4903      737400
 4904              	.LASF109:
 4905 0085 5F6D6273 		.ascii	"_mbstate\000"
 4905      74617465 
 4905      00
 4906              	.LASF2:
 4907 008e 5F5F7569 		.ascii	"__uint8_t\000"
 4907      6E74385F 
 4907      7400
 4908              	.LASF129:
 4909 0098 5F617465 		.ascii	"_atexit0\000"
 4909      78697430 
 4909      00
 4910              	.LASF218:
 4911 00a1 464C4153 		.ascii	"FLASH_HalfCycleAccessCmd\000"
 4911      485F4861 
 4911      6C664379 
 4911      636C6541 
 4911      63636573 
 4912              	.LASF157:
 4913 00ba 5F776372 		.ascii	"_wcrtomb_state\000"
 4913      746F6D62 
 4913      5F737461 
 4913      746500
 4914              	.LASF158:
 4915 00c9 5F776373 		.ascii	"_wcsrtombs_state\000"
 4915      72746F6D 
 4915      62735F73 
 4915      74617465 
 4915      00
 4916              	.LASF12:
 4917 00da 6C6F6E67 		.ascii	"long long unsigned int\000"
 4917      206C6F6E 
 4917      6720756E 
 4917      7369676E 
 4917      65642069 
ARM GAS  /tmp/ccohH8g1.s 			page 117


 4918              	.LASF169:
 4919 00f1 5F5F6664 		.ascii	"__fdlibm_posix\000"
 4919      6C69626D 
 4919      5F706F73 
 4919      697800
 4920              	.LASF97:
 4921 0100 5F6C6266 		.ascii	"_lbfsize\000"
 4921      73697A65 
 4921      00
 4922              	.LASF212:
 4923 0109 464C4153 		.ascii	"FLASH_LockBank1\000"
 4923      485F4C6F 
 4923      636B4261 
 4923      6E6B3100 
 4924              	.LASF20:
 4925 0119 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4925      52784275 
 4925      66666572 
 4925      00
 4926              	.LASF170:
 4927 0126 5F5F6664 		.ascii	"__fdlib_version\000"
 4927      6C69625F 
 4927      76657273 
 4927      696F6E00 
 4928              	.LASF46:
 4929 0136 6779726F 		.ascii	"gyro\000"
 4929      00
 4930              	.LASF155:
 4931 013b 5F6D6272 		.ascii	"_mbrtowc_state\000"
 4931      746F7763 
 4931      5F737461 
 4931      746500
 4932              	.LASF211:
 4933 014a 50616765 		.ascii	"Page_Address\000"
 4933      5F416464 
 4933      72657373 
 4933      00
 4934              	.LASF74:
 4935 0157 5F5F746D 		.ascii	"__tm_sec\000"
 4935      5F736563 
 4935      00
 4936              	.LASF15:
 4937 0160 696E7431 		.ascii	"int16_t\000"
 4937      365F7400 
 4938              	.LASF57:
 4939 0168 5F6F6666 		.ascii	"_off_t\000"
 4939      5F7400
 4940              	.LASF102:
 4941 016f 5F636C6F 		.ascii	"_close\000"
 4941      736500
 4942              	.LASF0:
 4943 0176 7369676E 		.ascii	"signed char\000"
 4943      65642063 
 4943      68617200 
 4944              	.LASF31:
 4945 0182 464C4153 		.ascii	"FLASH_TypeDef\000"
 4945      485F5479 
ARM GAS  /tmp/ccohH8g1.s 			page 118


 4945      70654465 
 4945      6600
 4946              	.LASF44:
 4947 0190 464C4153 		.ascii	"FLASH_TIMEOUT\000"
 4947      485F5449 
 4947      4D454F55 
 4947      5400
 4948              	.LASF48:
 4949 019e 47785F6F 		.ascii	"Gx_offset\000"
 4949      66667365 
 4949      7400
 4950              	.LASF92:
 4951 01a8 5F626173 		.ascii	"_base\000"
 4951      6500
 4952              	.LASF40:
 4953 01ae 464C4153 		.ascii	"FLASH_BUSY\000"
 4953      485F4255 
 4953      535900
 4954              	.LASF150:
 4955 01b9 5F776374 		.ascii	"_wctomb_state\000"
 4955      6F6D625F 
 4955      73746174 
 4955      6500
 4956              	.LASF132:
 4957 01c7 5F5F7366 		.ascii	"__sf\000"
 4957      00
 4958              	.LASF83:
 4959 01cc 5F6F6E5F 		.ascii	"_on_exit_args\000"
 4959      65786974 
 4959      5F617267 
 4959      7300
 4960              	.LASF51:
 4961 01da 41636331 		.ascii	"Acc1G_Values\000"
 4961      475F5661 
 4961      6C756573 
 4961      00
 4962              	.LASF221:
 4963 01e7 746D7072 		.ascii	"tmpreg\000"
 4963      656700
 4964              	.LASF98:
 4965 01ee 5F636F6F 		.ascii	"_cookie\000"
 4965      6B696500 
 4966              	.LASF131:
 4967 01f6 5F5F7367 		.ascii	"__sglue\000"
 4967      6C756500 
 4968              	.LASF8:
 4969 01fe 6C6F6E67 		.ascii	"long int\000"
 4969      20696E74 
 4969      00
 4970              	.LASF193:
 4971 0207 4F425F53 		.ascii	"OB_STDBY\000"
 4971      54444259 
 4971      00
 4972              	.LASF224:
 4973 0210 2F686F6D 		.ascii	"/home/enbin/Documents/code/STM/stm32-quadrocopter\000"
 4973      652F656E 
 4973      62696E2F 
ARM GAS  /tmp/ccohH8g1.s 			page 119


 4973      446F6375 
 4973      6D656E74 
 4974              	.LASF87:
 4975 0242 5F69735F 		.ascii	"_is_cxa\000"
 4975      63786100 
 4976              	.LASF113:
 4977 024a 5F737464 		.ascii	"_stdin\000"
 4977      696E00
 4978              	.LASF167:
 4979 0251 5F5F6664 		.ascii	"__fdlibm_svid\000"
 4979      6C69626D 
 4979      5F737669 
 4979      6400
 4980              	.LASF103:
 4981 025f 5F756275 		.ascii	"_ubuf\000"
 4981      6600
 4982              	.LASF123:
 4983 0265 5F726573 		.ascii	"_result_k\000"
 4983      756C745F 
 4983      6B00
 4984              	.LASF25:
 4985 026f 454E4142 		.ascii	"ENABLE\000"
 4985      4C4500
 4986              	.LASF190:
 4987 0276 464C4153 		.ascii	"FLASH_UserOptionByteConfig\000"
 4987      485F5573 
 4987      65724F70 
 4987      74696F6E 
 4987      42797465 
 4988              	.LASF11:
 4989 0291 6C6F6E67 		.ascii	"long long int\000"
 4989      206C6F6E 
 4989      6720696E 
 4989      7400
 4990              	.LASF28:
 4991 029f 4F50544B 		.ascii	"OPTKEYR\000"
 4991      45595200 
 4992              	.LASF165:
 4993 02a7 646F7562 		.ascii	"double\000"
 4993      6C6500
 4994              	.LASF127:
 4995 02ae 5F637674 		.ascii	"_cvtbuf\000"
 4995      62756600 
 4996              	.LASF106:
 4997 02b6 5F6F6666 		.ascii	"_offset\000"
 4997      73657400 
 4998              	.LASF156:
 4999 02be 5F6D6273 		.ascii	"_mbsrtowcs_state\000"
 4999      72746F77 
 4999      63735F73 
 4999      74617465 
 4999      00
 5000              	.LASF154:
 5001 02cf 5F6D6272 		.ascii	"_mbrlen_state\000"
 5001      6C656E5F 
 5001      73746174 
 5001      6500
ARM GAS  /tmp/ccohH8g1.s 			page 120


 5002              	.LASF90:
 5003 02dd 5F666E73 		.ascii	"_fns\000"
 5003      00
 5004              	.LASF9:
 5005 02e2 5F5F7569 		.ascii	"__uint32_t\000"
 5005      6E743332 
 5005      5F7400
 5006              	.LASF173:
 5007 02ed 54696D65 		.ascii	"Timeout\000"
 5007      6F757400 
 5008              	.LASF163:
 5009 02f5 5F696D70 		.ascii	"_impure_ptr\000"
 5009      7572655F 
 5009      70747200 
 5010              	.LASF115:
 5011 0301 5F737464 		.ascii	"_stderr\000"
 5011      65727200 
 5012              	.LASF72:
 5013 0309 5F426967 		.ascii	"_Bigint\000"
 5013      696E7400 
 5014              	.LASF186:
 5015 0311 464C4153 		.ascii	"FLASH_GetReadOutProtectionStatus\000"
 5015      485F4765 
 5015      74526561 
 5015      644F7574 
 5015      50726F74 
 5016              	.LASF206:
 5017 0332 464C4153 		.ascii	"FLASH_EraseOptionBytes\000"
 5017      485F4572 
 5017      6173654F 
 5017      7074696F 
 5017      6E427974 
 5018              	.LASF76:
 5019 0349 5F5F746D 		.ascii	"__tm_hour\000"
 5019      5F686F75 
 5019      7200
 5020              	.LASF192:
 5021 0353 4F425F53 		.ascii	"OB_STOP\000"
 5021      544F5000 
 5022              	.LASF99:
 5023 035b 5F726561 		.ascii	"_read\000"
 5023      6400
 5024              	.LASF70:
 5025 0361 5F736967 		.ascii	"_sign\000"
 5025      6E00
 5026              	.LASF197:
 5027 0367 57525030 		.ascii	"WRP0_Data\000"
 5027      5F446174 
 5027      6100
 5028              	.LASF73:
 5029 0371 5F5F746D 		.ascii	"__tm\000"
 5029      00
 5030              	.LASF194:
 5031 0376 464C4153 		.ascii	"FLASH_ReadOutProtection\000"
 5031      485F5265 
 5031      61644F75 
 5031      7450726F 
ARM GAS  /tmp/ccohH8g1.s 			page 121


 5031      74656374 
 5032              	.LASF24:
 5033 038e 44495341 		.ascii	"DISABLE\000"
 5033      424C4500 
 5034              	.LASF61:
 5035 0396 5F5F7763 		.ascii	"__wchb\000"
 5035      686200
 5036              	.LASF21:
 5037 039d 53797374 		.ascii	"SystemCoreClock\000"
 5037      656D436F 
 5037      7265436C 
 5037      6F636B00 
 5038              	.LASF114:
 5039 03ad 5F737464 		.ascii	"_stdout\000"
 5039      6F757400 
 5040              	.LASF126:
 5041 03b5 5F637674 		.ascii	"_cvtlen\000"
 5041      6C656E00 
 5042              	.LASF32:
 5043 03bd 55534552 		.ascii	"USER\000"
 5043      00
 5044              	.LASF10:
 5045 03c2 6C6F6E67 		.ascii	"long unsigned int\000"
 5045      20756E73 
 5045      69676E65 
 5045      6420696E 
 5045      7400
 5046              	.LASF96:
 5047 03d4 5F66696C 		.ascii	"_file\000"
 5047      6500
 5048              	.LASF107:
 5049 03da 5F646174 		.ascii	"_data\000"
 5049      6100
 5050              	.LASF135:
 5051 03e0 5F6E696F 		.ascii	"_niobs\000"
 5051      627300
 5052              	.LASF146:
 5053 03e7 5F72616E 		.ascii	"_rand_next\000"
 5053      645F6E65 
 5053      787400
 5054              	.LASF33:
 5055 03f2 44617461 		.ascii	"Data0\000"
 5055      3000
 5056              	.LASF34:
 5057 03f8 44617461 		.ascii	"Data1\000"
 5057      3100
 5058              	.LASF176:
 5059 03fe 666C6173 		.ascii	"flashstatus\000"
 5059      68737461 
 5059      74757300 
 5060              	.LASF152:
 5061 040a 5F736967 		.ascii	"_signal_buf\000"
 5061      6E616C5F 
 5061      62756600 
 5062              	.LASF143:
 5063 0416 5F617363 		.ascii	"_asctime_buf\000"
 5063      74696D65 
ARM GAS  /tmp/ccohH8g1.s 			page 122


 5063      5F627566 
 5063      00
 5064              	.LASF191:
 5065 0423 4F425F49 		.ascii	"OB_IWDG\000"
 5065      57444700 
 5066              	.LASF122:
 5067 042b 5F726573 		.ascii	"_result\000"
 5067      756C7400 
 5068              	.LASF60:
 5069 0433 5F5F7763 		.ascii	"__wch\000"
 5069      6800
 5070              	.LASF128:
 5071 0439 5F6E6577 		.ascii	"_new\000"
 5071      00
 5072              	.LASF16:
 5073 043e 75696E74 		.ascii	"uint16_t\000"
 5073      31365F74 
 5073      00
 5074              	.LASF108:
 5075 0447 5F6C6F63 		.ascii	"_lock\000"
 5075      6B00
 5076              	.LASF202:
 5077 044d 41646472 		.ascii	"Address\000"
 5077      65737300 
 5078              	.LASF139:
 5079 0455 5F6D756C 		.ascii	"_mult\000"
 5079      7400
 5080              	.LASF205:
 5081 045b 464C4153 		.ascii	"FLASH_ProgramWord\000"
 5081      485F5072 
 5081      6F677261 
 5081      6D576F72 
 5081      6400
 5082              	.LASF216:
 5083 046d 464C4153 		.ascii	"FLASH_PrefetchBufferCmd\000"
 5083      485F5072 
 5083      65666574 
 5083      63684275 
 5083      66666572 
 5084              	.LASF79:
 5085 0485 5F5F746D 		.ascii	"__tm_year\000"
 5085      5F796561 
 5085      7200
 5086              	.LASF179:
 5087 048f 464C4153 		.ascii	"FLASH_GetFlagStatus\000"
 5087      485F4765 
 5087      74466C61 
 5087      67537461 
 5087      74757300 
 5088              	.LASF161:
 5089 04a3 5F6E6D61 		.ascii	"_nmalloc\000"
 5089      6C6C6F63 
 5089      00
 5090              	.LASF196:
 5091 04ac 464C4153 		.ascii	"FLASH_Pages\000"
 5091      485F5061 
 5091      67657300 
ARM GAS  /tmp/ccohH8g1.s 			page 123


 5092              	.LASF225:
 5093 04b8 5F5F6664 		.ascii	"__fdlibm_version\000"
 5093      6C69626D 
 5093      5F766572 
 5093      73696F6E 
 5093      00
 5094              	.LASF19:
 5095 04c9 73697A65 		.ascii	"sizetype\000"
 5095      74797065 
 5095      00
 5096              	.LASF182:
 5097 04d2 464C4153 		.ascii	"FLASH_ITConfig\000"
 5097      485F4954 
 5097      436F6E66 
 5097      696700
 5098              	.LASF213:
 5099 04e1 464C4153 		.ascii	"FLASH_Lock\000"
 5099      485F4C6F 
 5099      636B00
 5100              	.LASF78:
 5101 04ec 5F5F746D 		.ascii	"__tm_mon\000"
 5101      5F6D6F6E 
 5101      00
 5102              	.LASF49:
 5103 04f5 47795F6F 		.ascii	"Gy_offset\000"
 5103      66667365 
 5103      7400
 5104              	.LASF160:
 5105 04ff 5F6E6578 		.ascii	"_nextf\000"
 5105      746600
 5106              	.LASF47:
 5107 0506 61636365 		.ascii	"accel\000"
 5107      6C00
 5108              	.LASF50:
 5109 050c 477A5F6F 		.ascii	"Gz_offset\000"
 5109      66667365 
 5109      7400
 5110              	.LASF26:
 5111 0516 46756E63 		.ascii	"FunctionalState\000"
 5111      74696F6E 
 5111      616C5374 
 5111      61746500 
 5112              	.LASF187:
 5113 0526 72656164 		.ascii	"readoutstatus\000"
 5113      6F757473 
 5113      74617475 
 5113      7300
 5114              	.LASF88:
 5115 0534 5F617465 		.ascii	"_atexit\000"
 5115      78697400 
 5116              	.LASF120:
 5117 053c 5F5F7364 		.ascii	"__sdidinit\000"
 5117      6964696E 
 5117      697400
 5118              	.LASF145:
 5119 0547 5F67616D 		.ascii	"_gamma_signgam\000"
 5119      6D615F73 
ARM GAS  /tmp/ccohH8g1.s 			page 124


 5119      69676E67 
 5119      616D00
 5120              	.LASF59:
 5121 0556 77696E74 		.ascii	"wint_t\000"
 5121      5F7400
 5122              	.LASF52:
 5123 055d 666C6F61 		.ascii	"float\000"
 5123      7400
 5124              	.LASF41:
 5125 0563 464C4153 		.ascii	"FLASH_ERROR_PG\000"
 5125      485F4552 
 5125      524F525F 
 5125      504700
 5126              	.LASF53:
 5127 0572 50697463 		.ascii	"Pitch\000"
 5127      6800
 5128              	.LASF208:
 5129 0578 464C4153 		.ascii	"FLASH_EraseAllBank1Pages\000"
 5129      485F4572 
 5129      61736541 
 5129      6C6C4261 
 5129      6E6B3150 
 5130              	.LASF64:
 5131 0591 5F6D6273 		.ascii	"_mbstate_t\000"
 5131      74617465 
 5131      5F7400
 5132              	.LASF27:
 5133 059c 4B455952 		.ascii	"KEYR\000"
 5133      00
 5134              	.LASF56:
 5135 05a1 5F4C4F43 		.ascii	"_LOCK_RECURSIVE_T\000"
 5135      4B5F5245 
 5135      43555253 
 5135      4956455F 
 5135      5400
 5136              	.LASF22:
 5137 05b3 52455345 		.ascii	"RESET\000"
 5137      5400
 5138              	.LASF100:
 5139 05b9 5F777269 		.ascii	"_write\000"
 5139      746500
 5140              	.LASF45:
 5141 05c0 464C4153 		.ascii	"FLASH_Status\000"
 5141      485F5374 
 5141      61747573 
 5141      00
 5142              	.LASF17:
 5143 05cd 696E7433 		.ascii	"int32_t\000"
 5143      325F7400 
 5144              	.LASF1:
 5145 05d5 756E7369 		.ascii	"unsigned char\000"
 5145      676E6564 
 5145      20636861 
 5145      7200
 5146              	.LASF136:
 5147 05e3 5F696F62 		.ascii	"_iobs\000"
 5147      7300
ARM GAS  /tmp/ccohH8g1.s 			page 125


 5148              	.LASF195:
 5149 05e9 464C4153 		.ascii	"FLASH_EnableWriteProtection\000"
 5149      485F456E 
 5149      61626C65 
 5149      57726974 
 5149      6550726F 
 5150              	.LASF65:
 5151 0605 5F666C6F 		.ascii	"_flock_t\000"
 5151      636B5F74 
 5151      00
 5152              	.LASF81:
 5153 060e 5F5F746D 		.ascii	"__tm_yday\000"
 5153      5F796461 
 5153      7900
 5154              	.LASF91:
 5155 0618 5F5F7362 		.ascii	"__sbuf\000"
 5155      756600
 5156              	.LASF110:
 5157 061f 5F666C61 		.ascii	"_flags2\000"
 5157      67733200 
 5158              	.LASF125:
 5159 0627 5F667265 		.ascii	"_freelist\000"
 5159      656C6973 
 5159      7400
 5160              	.LASF133:
 5161 0631 5F5F4649 		.ascii	"__FILE\000"
 5161      4C4500
 5162              	.LASF29:
 5163 0638 52455345 		.ascii	"RESERVED\000"
 5163      52564544 
 5163      00
 5164              	.LASF94:
 5165 0641 5F5F7346 		.ascii	"__sFILE\000"
 5165      494C4500 
 5166              	.LASF35:
 5167 0649 57525030 		.ascii	"WRP0\000"
 5167      00
 5168              	.LASF36:
 5169 064e 57525031 		.ascii	"WRP1\000"
 5169      00
 5170              	.LASF37:
 5171 0653 57525032 		.ascii	"WRP2\000"
 5171      00
 5172              	.LASF38:
 5173 0658 57525033 		.ascii	"WRP3\000"
 5173      00
 5174              	.LASF148:
 5175 065d 5F6D626C 		.ascii	"_mblen_state\000"
 5175      656E5F73 
 5175      74617465 
 5175      00
 5176              	.LASF116:
 5177 066a 5F696E63 		.ascii	"_inc\000"
 5177      00
 5178              	.LASF89:
 5179 066f 5F696E64 		.ascii	"_ind\000"
 5179      00
ARM GAS  /tmp/ccohH8g1.s 			page 126


 5180              	.LASF119:
 5181 0674 5F637572 		.ascii	"_current_locale\000"
 5181      72656E74 
 5181      5F6C6F63 
 5181      616C6500 
 5182              	.LASF215:
 5183 0684 464C4153 		.ascii	"FLASH_Unlock\000"
 5183      485F556E 
 5183      6C6F636B 
 5183      00
 5184              	.LASF121:
 5185 0691 5F5F636C 		.ascii	"__cleanup\000"
 5185      65616E75 
 5185      7000
 5186              	.LASF175:
 5187 069b 464C4153 		.ascii	"FLASH_GetBank1Status\000"
 5187      485F4765 
 5187      7442616E 
 5187      6B315374 
 5187      61747573 
 5188              	.LASF209:
 5189 06b0 464C4153 		.ascii	"FLASH_EraseAllPages\000"
 5189      485F4572 
 5189      61736541 
 5189      6C6C5061 
 5189      67657300 
 5190              	.LASF69:
 5191 06c4 5F6D6178 		.ascii	"_maxwds\000"
 5191      77647300 
 5192              	.LASF111:
 5193 06cc 5F726565 		.ascii	"_reent\000"
 5193      6E7400
 5194              	.LASF138:
 5195 06d3 5F736565 		.ascii	"_seed\000"
 5195      6400
 5196              	.LASF171:
 5197 06d9 464C4153 		.ascii	"FLASH_WaitForLastBank1Operation\000"
 5197      485F5761 
 5197      6974466F 
 5197      724C6173 
 5197      7442616E 
 5198              	.LASF62:
 5199 06f9 5F5F636F 		.ascii	"__count\000"
 5199      756E7400 
 5200              	.LASF63:
 5201 0701 5F5F7661 		.ascii	"__value\000"
 5201      6C756500 
 5202              	.LASF219:
 5203 0709 464C4153 		.ascii	"FLASH_HalfCycleAccess\000"
 5203      485F4861 
 5203      6C664379 
 5203      636C6541 
 5203      63636573 
 5204              	.LASF101:
 5205 071f 5F736565 		.ascii	"_seek\000"
 5205      6B00
 5206              	.LASF183:
ARM GAS  /tmp/ccohH8g1.s 			page 127


 5207 0725 464C4153 		.ascii	"FLASH_IT\000"
 5207      485F4954 
 5207      00
 5208              	.LASF159:
 5209 072e 5F685F65 		.ascii	"_h_errno\000"
 5209      72726E6F 
 5209      00
 5210              	.LASF80:
 5211 0737 5F5F746D 		.ascii	"__tm_wday\000"
 5211      5F776461 
 5211      7900
 5212              	.LASF198:
 5213 0741 57525031 		.ascii	"WRP1_Data\000"
 5213      5F446174 
 5213      6100
 5214              	.LASF58:
 5215 074b 5F66706F 		.ascii	"_fpos_t\000"
 5215      735F7400 
 5216              	.LASF189:
 5217 0753 464C4153 		.ascii	"FLASH_GetUserOptionByte\000"
 5217      485F4765 
 5217      74557365 
 5217      724F7074 
 5217      696F6E42 
 5218              	.LASF55:
 5219 076b 6C6F6E67 		.ascii	"long double\000"
 5219      20646F75 
 5219      626C6500 
 5220              	.LASF30:
 5221 0777 57525052 		.ascii	"WRPR\000"
 5221      00
 5222              	.LASF112:
 5223 077c 5F657272 		.ascii	"_errno\000"
 5223      6E6F00
 5224              	.LASF66:
 5225 0783 63686172 		.ascii	"char\000"
 5225      00
 5226              	.LASF105:
 5227 0788 5F626C6B 		.ascii	"_blksize\000"
 5227      73697A65 
 5227      00
 5228              	.LASF166:
 5229 0791 5F5F6664 		.ascii	"__fdlibm_ieee\000"
 5229      6C69626D 
 5229      5F696565 
 5229      6500
 5230              	.LASF93:
 5231 079f 5F73697A 		.ascii	"_size\000"
 5231      6500
 5232              	.LASF13:
 5233 07a5 756E7369 		.ascii	"unsigned int\000"
 5233      676E6564 
 5233      20696E74 
 5233      00
 5234              	.LASF5:
 5235 07b2 5F5F7569 		.ascii	"__uint16_t\000"
 5235      6E743136 
ARM GAS  /tmp/ccohH8g1.s 			page 128


 5235      5F7400
 5236              	.LASF4:
 5237 07bd 73686F72 		.ascii	"short int\000"
 5237      7420696E 
 5237      7400
 5238              	.LASF7:
 5239 07c7 5F5F696E 		.ascii	"__int32_t\000"
 5239      7433325F 
 5239      7400
 5240              	.LASF217:
 5241 07d1 464C4153 		.ascii	"FLASH_PrefetchBuffer\000"
 5241      485F5072 
 5241      65666574 
 5241      63684275 
 5241      66666572 
 5242              	.LASF54:
 5243 07e6 526F6C6C 		.ascii	"Roll\000"
 5243      00
 5244              	.LASF210:
 5245 07eb 464C4153 		.ascii	"FLASH_ErasePage\000"
 5245      485F4572 
 5245      61736550 
 5245      61676500 
 5246              	.LASF68:
 5247 07fb 5F6E6578 		.ascii	"_next\000"
 5247      7400
 5248              	.LASF142:
 5249 0801 5F737472 		.ascii	"_strtok_last\000"
 5249      746F6B5F 
 5249      6C617374 
 5249      00
 5250              	.LASF3:
 5251 080e 5F5F696E 		.ascii	"__int16_t\000"
 5251      7431365F 
 5251      7400
 5252              	.LASF86:
 5253 0818 5F666E74 		.ascii	"_fntypes\000"
 5253      79706573 
 5253      00
 5254              	.LASF222:
 5255 0821 474E5520 		.ascii	"GNU C11 6.1.1 20160526 -mcpu=cortex-m3 -mthumb -g -"
 5255      43313120 
 5255      362E312E 
 5255      31203230 
 5255      31363035 
 5256 0854 666E6F2D 		.ascii	"fno-common\000"
 5256      636F6D6D 
 5256      6F6E00
 5257              	.LASF6:
 5258 085f 73686F72 		.ascii	"short unsigned int\000"
 5258      7420756E 
 5258      7369676E 
 5258      65642069 
 5258      6E7400
 5259              	.LASF226:
 5260 0872 464C4153 		.ascii	"FLASH_SetLatency\000"
 5260      485F5365 
ARM GAS  /tmp/ccohH8g1.s 			page 129


 5260      744C6174 
 5260      656E6379 
 5260      00
 5261              	.LASF140:
 5262 0883 5F616464 		.ascii	"_add\000"
 5262      00
 5263              	.LASF67:
 5264 0888 5F5F554C 		.ascii	"__ULong\000"
 5264      6F6E6700 
 5265              	.LASF153:
 5266 0890 5F676574 		.ascii	"_getdate_err\000"
 5266      64617465 
 5266      5F657272 
 5266      00
 5267              	.LASF214:
 5268 089d 464C4153 		.ascii	"FLASH_UnlockBank1\000"
 5268      485F556E 
 5268      6C6F636B 
 5268      42616E6B 
 5268      3100
 5269              	.LASF201:
 5270 08af 464C4153 		.ascii	"FLASH_ProgramOptionByteData\000"
 5270      485F5072 
 5270      6F677261 
 5270      6D4F7074 
 5270      696F6E42 
 5271              	.LASF164:
 5272 08cb 5F676C6F 		.ascii	"_global_impure_ptr\000"
 5272      62616C5F 
 5272      696D7075 
 5272      72655F70 
 5272      747200
 5273              	.LASF118:
 5274 08de 5F637572 		.ascii	"_current_category\000"
 5274      72656E74 
 5274      5F636174 
 5274      65676F72 
 5274      7900
 5275              	.LASF199:
 5276 08f0 57525032 		.ascii	"WRP2_Data\000"
 5276      5F446174 
 5276      6100
 5277              	.LASF39:
 5278 08fa 4F425F54 		.ascii	"OB_TypeDef\000"
 5278      79706544 
 5278      656600
 5279              	.LASF141:
 5280 0905 5F756E75 		.ascii	"_unused_rand\000"
 5280      7365645F 
 5280      72616E64 
 5280      00
 5281              	.LASF181:
 5282 0912 464C4153 		.ascii	"FLASH_ClearFlag\000"
 5282      485F436C 
 5282      65617246 
 5282      6C616700 
 5283              	.LASF174:
ARM GAS  /tmp/ccohH8g1.s 			page 130


 5284 0922 73746174 		.ascii	"status\000"
 5284      757300
 5285              	.LASF71:
 5286 0929 5F776473 		.ascii	"_wds\000"
 5286      00
 5287              	.LASF134:
 5288 092e 5F676C75 		.ascii	"_glue\000"
 5288      6500
 5289              	.LASF177:
 5290 0934 464C4153 		.ascii	"FLASH_GetStatus\000"
 5290      485F4765 
 5290      74537461 
 5290      74757300 
 5291              	.LASF95:
 5292 0944 5F666C61 		.ascii	"_flags\000"
 5292      677300
 5293              	.LASF14:
 5294 094b 75696E74 		.ascii	"uint8_t\000"
 5294      385F7400 
 5295              	.LASF151:
 5296 0953 5F6C3634 		.ascii	"_l64a_buf\000"
 5296      615F6275 
 5296      6600
 5297              	.LASF203:
 5298 095d 44617461 		.ascii	"Data\000"
 5298      00
 5299              	.LASF130:
 5300 0962 5F736967 		.ascii	"_sig_func\000"
 5300      5F66756E 
 5300      6300
 5301              	.LASF185:
 5302 096c 464C4153 		.ascii	"FLASH_GetPrefetchBufferStatus\000"
 5302      485F4765 
 5302      74507265 
 5302      66657463 
 5302      68427566 
 5303              	.LASF180:
 5304 098a 62697473 		.ascii	"bitstatus\000"
 5304      74617475 
 5304      7300
 5305              	.LASF104:
 5306 0994 5F6E6275 		.ascii	"_nbuf\000"
 5306      6600
 5307              	.LASF162:
 5308 099a 5F756E75 		.ascii	"_unused\000"
 5308      73656400 
 5309              	.LASF204:
 5310 09a2 464C4153 		.ascii	"FLASH_ProgramHalfWord\000"
 5310      485F5072 
 5310      6F677261 
 5310      6D48616C 
 5310      66576F72 
 5311              	.LASF188:
 5312 09b8 464C4153 		.ascii	"FLASH_GetWriteProtectionOptionByte\000"
 5312      485F4765 
 5312      74577269 
 5312      74655072 
ARM GAS  /tmp/ccohH8g1.s 			page 131


 5312      6F746563 
 5313              	.LASF144:
 5314 09db 5F6C6F63 		.ascii	"_localtime_buf\000"
 5314      616C7469 
 5314      6D655F62 
 5314      756600
 5315              	.LASF75:
 5316 09ea 5F5F746D 		.ascii	"__tm_min\000"
 5316      5F6D696E 
 5316      00
 5317              	.LASF42:
 5318 09f3 464C4153 		.ascii	"FLASH_ERROR_WRP\000"
 5318      485F4552 
 5318      524F525F 
 5318      57525000 
 5319              	.LASF147:
 5320 0a03 5F723438 		.ascii	"_r48\000"
 5320      00
 5321              	.LASF178:
 5322 0a08 464C4153 		.ascii	"FLASH_FLAG\000"
 5322      485F464C 
 5322      414700
 5323              	.LASF43:
 5324 0a13 464C4153 		.ascii	"FLASH_COMPLETE\000"
 5324      485F434F 
 5324      4D504C45 
 5324      544500
 5325              	.LASF149:
 5326 0a22 5F6D6274 		.ascii	"_mbtowc_state\000"
 5326      6F77635F 
 5326      73746174 
 5326      6500
 5327              	.LASF124:
 5328 0a30 5F703573 		.ascii	"_p5s\000"
 5328      00
 5329              	.LASF200:
 5330 0a35 57525033 		.ascii	"WRP3_Data\000"
 5330      5F446174 
 5330      6100
 5331              	.LASF18:
 5332 0a3f 75696E74 		.ascii	"uint32_t\000"
 5332      33325F74 
 5332      00
 5333              	.LASF77:
 5334 0a48 5F5F746D 		.ascii	"__tm_mday\000"
 5334      5F6D6461 
 5334      7900
 5335              	.LASF223:
 5336 0a52 636F6D6D 		.ascii	"common/stm32f10x_flash.c\000"
 5336      6F6E2F73 
 5336      746D3332 
 5336      66313078 
 5336      5F666C61 
 5337              		.ident	"GCC: (Arch Repository) 6.1.1 20160526"
ARM GAS  /tmp/ccohH8g1.s 			page 132


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_flash.c
     /tmp/ccohH8g1.s:15     .text:0000000000000000 $t
     /tmp/ccohH8g1.s:22     .text:0000000000000000 FLASH_SetLatency
     /tmp/ccohH8g1.s:72     .text:0000000000000034 $d
     /tmp/ccohH8g1.s:76     .text:0000000000000038 $t
     /tmp/ccohH8g1.s:83     .text:0000000000000038 FLASH_HalfCycleAccessCmd
     /tmp/ccohH8g1.s:125    .text:0000000000000064 $d
     /tmp/ccohH8g1.s:129    .text:0000000000000068 $t
     /tmp/ccohH8g1.s:136    .text:0000000000000068 FLASH_PrefetchBufferCmd
     /tmp/ccohH8g1.s:178    .text:0000000000000094 $d
     /tmp/ccohH8g1.s:182    .text:0000000000000098 $t
     /tmp/ccohH8g1.s:189    .text:0000000000000098 FLASH_Unlock
     /tmp/ccohH8g1.s:221    .text:00000000000000b0 $d
     /tmp/ccohH8g1.s:227    .text:00000000000000bc $t
     /tmp/ccohH8g1.s:234    .text:00000000000000bc FLASH_UnlockBank1
     /tmp/ccohH8g1.s:266    .text:00000000000000d4 $d
     /tmp/ccohH8g1.s:272    .text:00000000000000e0 $t
     /tmp/ccohH8g1.s:279    .text:00000000000000e0 FLASH_Lock
     /tmp/ccohH8g1.s:309    .text:00000000000000f8 $d
     /tmp/ccohH8g1.s:313    .text:00000000000000fc $t
     /tmp/ccohH8g1.s:320    .text:00000000000000fc FLASH_LockBank1
     /tmp/ccohH8g1.s:350    .text:0000000000000114 $d
     /tmp/ccohH8g1.s:354    .text:0000000000000118 $t
     /tmp/ccohH8g1.s:361    .text:0000000000000118 FLASH_ErasePage
     /tmp/ccohH8g1.s:1980   .text:00000000000008cc FLASH_WaitForLastOperation
     /tmp/ccohH8g1.s:430    .text:0000000000000178 $d
     /tmp/ccohH8g1.s:434    .text:000000000000017c $t
     /tmp/ccohH8g1.s:441    .text:000000000000017c FLASH_EraseAllPages
     /tmp/ccohH8g1.s:505    .text:00000000000001d4 $d
     /tmp/ccohH8g1.s:509    .text:00000000000001d8 $t
     /tmp/ccohH8g1.s:516    .text:00000000000001d8 FLASH_EraseAllBank1Pages
     /tmp/ccohH8g1.s:2051   .text:0000000000000910 FLASH_WaitForLastBank1Operation
     /tmp/ccohH8g1.s:580    .text:0000000000000230 $d
     /tmp/ccohH8g1.s:584    .text:0000000000000234 $t
     /tmp/ccohH8g1.s:591    .text:0000000000000234 FLASH_EraseOptionBytes
     /tmp/ccohH8g1.s:1510   .text:000000000000071c FLASH_GetReadOutProtectionStatus
     /tmp/ccohH8g1.s:718    .text:00000000000002f8 $d
     /tmp/ccohH8g1.s:725    .text:0000000000000308 $t
     /tmp/ccohH8g1.s:732    .text:0000000000000308 FLASH_ProgramWord
     /tmp/ccohH8g1.s:829    .text:0000000000000398 $d
     /tmp/ccohH8g1.s:833    .text:000000000000039c $t
     /tmp/ccohH8g1.s:840    .text:000000000000039c FLASH_ProgramHalfWord
     /tmp/ccohH8g1.s:905    .text:00000000000003f4 $d
     /tmp/ccohH8g1.s:909    .text:00000000000003f8 $t
     /tmp/ccohH8g1.s:916    .text:00000000000003f8 FLASH_ProgramOptionByteData
     /tmp/ccohH8g1.s:994    .text:0000000000000464 $d
     /tmp/ccohH8g1.s:1000   .text:0000000000000470 $t
     /tmp/ccohH8g1.s:1007   .text:0000000000000470 FLASH_EnableWriteProtection
     /tmp/ccohH8g1.s:1175   .text:0000000000000578 $d
     /tmp/ccohH8g1.s:1182   .text:0000000000000588 $t
     /tmp/ccohH8g1.s:1189   .text:0000000000000588 FLASH_ReadOutProtection
     /tmp/ccohH8g1.s:1317   .text:000000000000064c $d
     /tmp/ccohH8g1.s:1324   .text:000000000000065c $t
     /tmp/ccohH8g1.s:1331   .text:000000000000065c FLASH_UserOptionByteConfig
     /tmp/ccohH8g1.s:1419   .text:00000000000006e0 $d
     /tmp/ccohH8g1.s:1426   .text:00000000000006f0 $t
ARM GAS  /tmp/ccohH8g1.s 			page 133


     /tmp/ccohH8g1.s:1433   .text:00000000000006f0 FLASH_GetUserOptionByte
     /tmp/ccohH8g1.s:1461   .text:0000000000000704 $d
     /tmp/ccohH8g1.s:1465   .text:0000000000000708 $t
     /tmp/ccohH8g1.s:1472   .text:0000000000000708 FLASH_GetWriteProtectionOptionByte
     /tmp/ccohH8g1.s:1499   .text:0000000000000718 $d
     /tmp/ccohH8g1.s:1503   .text:000000000000071c $t
     /tmp/ccohH8g1.s:1558   .text:0000000000000748 $d
     /tmp/ccohH8g1.s:1562   .text:000000000000074c $t
     /tmp/ccohH8g1.s:1569   .text:000000000000074c FLASH_GetPrefetchBufferStatus
     /tmp/ccohH8g1.s:1617   .text:0000000000000778 $d
     /tmp/ccohH8g1.s:1621   .text:000000000000077c $t
     /tmp/ccohH8g1.s:1628   .text:000000000000077c FLASH_ITConfig
     /tmp/ccohH8g1.s:1682   .text:00000000000007b4 $d
     /tmp/ccohH8g1.s:1686   .text:00000000000007b8 $t
     /tmp/ccohH8g1.s:1693   .text:00000000000007b8 FLASH_GetFlagStatus
     /tmp/ccohH8g1.s:1763   .text:0000000000000804 $d
     /tmp/ccohH8g1.s:1767   .text:0000000000000808 $t
     /tmp/ccohH8g1.s:1774   .text:0000000000000808 FLASH_ClearFlag
     /tmp/ccohH8g1.s:1807   .text:0000000000000820 $d
     /tmp/ccohH8g1.s:1811   .text:0000000000000824 $t
     /tmp/ccohH8g1.s:1818   .text:0000000000000824 FLASH_GetStatus
     /tmp/ccohH8g1.s:1888   .text:0000000000000874 $d
     /tmp/ccohH8g1.s:1892   .text:0000000000000878 $t
     /tmp/ccohH8g1.s:1899   .text:0000000000000878 FLASH_GetBank1Status
     /tmp/ccohH8g1.s:1969   .text:00000000000008c8 $d
     /tmp/ccohH8g1.s:1973   .text:00000000000008cc $t
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
