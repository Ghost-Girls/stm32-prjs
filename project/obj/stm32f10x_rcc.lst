ARM GAS  /tmp/cccmMgvS.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_rcc.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.data
  16              		.align	2
  17              		.type	APBAHBPrescTable, %object
  18              		.size	APBAHBPrescTable, 16
  19              	APBAHBPrescTable:
  20 0000 00       		.byte	0
  21 0001 00       		.byte	0
  22 0002 00       		.byte	0
  23 0003 00       		.byte	0
  24 0004 01       		.byte	1
  25 0005 02       		.byte	2
  26 0006 03       		.byte	3
  27 0007 04       		.byte	4
  28 0008 01       		.byte	1
  29 0009 02       		.byte	2
  30 000a 03       		.byte	3
  31 000b 04       		.byte	4
  32 000c 06       		.byte	6
  33 000d 07       		.byte	7
  34 000e 08       		.byte	8
  35 000f 09       		.byte	9
  36              		.align	2
  37              		.type	ADCPrescTable, %object
  38              		.size	ADCPrescTable, 4
  39              	ADCPrescTable:
  40 0010 02       		.byte	2
  41 0011 04       		.byte	4
  42 0012 06       		.byte	6
  43 0013 08       		.byte	8
  44              		.text
  45              		.align	1
  46              		.global	RCC_DeInit
  47              		.syntax unified
  48              		.thumb
  49              		.thumb_func
  50              		.fpu softvfp
  51              		.type	RCC_DeInit, %function
  52              	RCC_DeInit:
  53              	.LFB63:
  54              		.file 1 "common/stm32f10x_rcc.c"
   1:common/stm32f10x_rcc.c **** /**
   2:common/stm32f10x_rcc.c ****   ******************************************************************************
   3:common/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
ARM GAS  /tmp/cccmMgvS.s 			page 2


   4:common/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:common/stm32f10x_rcc.c ****   * @version V3.5.0
   6:common/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:common/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:common/stm32f10x_rcc.c ****   ******************************************************************************
   9:common/stm32f10x_rcc.c ****   * @attention
  10:common/stm32f10x_rcc.c ****   *
  11:common/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:common/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:common/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:common/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:common/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:common/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:common/stm32f10x_rcc.c ****   *
  18:common/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:common/stm32f10x_rcc.c ****   ******************************************************************************
  20:common/stm32f10x_rcc.c ****   */
  21:common/stm32f10x_rcc.c **** 
  22:common/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:common/stm32f10x_rcc.c **** #include "../include/STM32/rcc.h"
  24:common/stm32f10x_rcc.c **** #include "../src/conf.h"
  25:common/stm32f10x_rcc.c **** 
  26:common/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:common/stm32f10x_rcc.c ****   * @{
  28:common/stm32f10x_rcc.c ****   */
  29:common/stm32f10x_rcc.c **** 
  30:common/stm32f10x_rcc.c **** /** @defgroup RCC 
  31:common/stm32f10x_rcc.c ****   * @brief RCC driver modules
  32:common/stm32f10x_rcc.c ****   * @{
  33:common/stm32f10x_rcc.c ****   */ 
  34:common/stm32f10x_rcc.c **** 
  35:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  36:common/stm32f10x_rcc.c ****   * @{
  37:common/stm32f10x_rcc.c ****   */
  38:common/stm32f10x_rcc.c **** 
  39:common/stm32f10x_rcc.c **** /**
  40:common/stm32f10x_rcc.c ****   * @}
  41:common/stm32f10x_rcc.c ****   */
  42:common/stm32f10x_rcc.c **** 
  43:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  44:common/stm32f10x_rcc.c ****   * @{
  45:common/stm32f10x_rcc.c ****   */
  46:common/stm32f10x_rcc.c **** 
  47:common/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  48:common/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  49:common/stm32f10x_rcc.c **** 
  50:common/stm32f10x_rcc.c **** /* --- CR Register ---*/
  51:common/stm32f10x_rcc.c **** 
  52:common/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  53:common/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  54:common/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  55:common/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  56:common/stm32f10x_rcc.c **** 
  57:common/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  58:common/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  59:common/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  60:common/stm32f10x_rcc.c **** 
ARM GAS  /tmp/cccmMgvS.s 			page 3


  61:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  62:common/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  63:common/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  64:common/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  65:common/stm32f10x_rcc.c **** 
  66:common/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  67:common/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  68:common/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  69:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  70:common/stm32f10x_rcc.c **** 
  71:common/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  72:common/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  73:common/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  74:common/stm32f10x_rcc.c **** 
  75:common/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  76:common/stm32f10x_rcc.c **** 
  77:common/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  78:common/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  79:common/stm32f10x_rcc.c **** 
  80:common/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  81:common/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  82:common/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  83:common/stm32f10x_rcc.c **** #else
  84:common/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  85:common/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  86:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  87:common/stm32f10x_rcc.c **** 
  88:common/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  89:common/stm32f10x_rcc.c **** 
  90:common/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  91:common/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  92:common/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  93:common/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  94:common/stm32f10x_rcc.c **** 
  95:common/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  96:common/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  97:common/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  98:common/stm32f10x_rcc.c **** 
  99:common/stm32f10x_rcc.c **** /* --- CSR Register ---*/
 100:common/stm32f10x_rcc.c **** 
 101:common/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 102:common/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 103:common/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 104:common/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 105:common/stm32f10x_rcc.c **** 
 106:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 107:common/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 108:common/stm32f10x_rcc.c **** 
 109:common/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 110:common/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 111:common/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 112:common/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 113:common/stm32f10x_rcc.c **** 
 114:common/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 115:common/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 116:common/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 117:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
ARM GAS  /tmp/cccmMgvS.s 			page 4


 118:common/stm32f10x_rcc.c **** 
 119:common/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 120:common/stm32f10x_rcc.c **** 
 121:common/stm32f10x_rcc.c **** /* CR register bit mask */
 122:common/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 123:common/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 124:common/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 125:common/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 126:common/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 127:common/stm32f10x_rcc.c **** 
 128:common/stm32f10x_rcc.c **** /* CFGR register bit mask */
 129:common/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 130:common/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 131:common/stm32f10x_rcc.c **** #else
 132:common/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 133:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 134:common/stm32f10x_rcc.c **** 
 135:common/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 136:common/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 137:common/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 138:common/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 139:common/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 140:common/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 141:common/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 142:common/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 143:common/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 144:common/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 145:common/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 146:common/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 147:common/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 148:common/stm32f10x_rcc.c **** 
 149:common/stm32f10x_rcc.c **** /* CSR register bit mask */
 150:common/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 151:common/stm32f10x_rcc.c **** 
 152:common/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 153:common/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 154:common/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 155:common/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 156:common/stm32f10x_rcc.c **** #endif
 157:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 158:common/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 159:common/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 160:common/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 161:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 162:common/stm32f10x_rcc.c **** 
 163:common/stm32f10x_rcc.c **** /* RCC Flag Mask */
 164:common/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 165:common/stm32f10x_rcc.c **** 
 166:common/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 167:common/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 168:common/stm32f10x_rcc.c **** 
 169:common/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 170:common/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 171:common/stm32f10x_rcc.c **** 
 172:common/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 173:common/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 174:common/stm32f10x_rcc.c **** 
ARM GAS  /tmp/cccmMgvS.s 			page 5


 175:common/stm32f10x_rcc.c **** /* BDCR register base address */
 176:common/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 177:common/stm32f10x_rcc.c **** 
 178:common/stm32f10x_rcc.c **** /**
 179:common/stm32f10x_rcc.c ****   * @}
 180:common/stm32f10x_rcc.c ****   */ 
 181:common/stm32f10x_rcc.c **** 
 182:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 183:common/stm32f10x_rcc.c ****   * @{
 184:common/stm32f10x_rcc.c ****   */ 
 185:common/stm32f10x_rcc.c **** 
 186:common/stm32f10x_rcc.c **** /**
 187:common/stm32f10x_rcc.c ****   * @}
 188:common/stm32f10x_rcc.c ****   */ 
 189:common/stm32f10x_rcc.c **** 
 190:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 191:common/stm32f10x_rcc.c ****   * @{
 192:common/stm32f10x_rcc.c ****   */ 
 193:common/stm32f10x_rcc.c **** 
 194:common/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 195:common/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 196:common/stm32f10x_rcc.c **** 
 197:common/stm32f10x_rcc.c **** /**
 198:common/stm32f10x_rcc.c ****   * @}
 199:common/stm32f10x_rcc.c ****   */
 200:common/stm32f10x_rcc.c **** 
 201:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 202:common/stm32f10x_rcc.c ****   * @{
 203:common/stm32f10x_rcc.c ****   */
 204:common/stm32f10x_rcc.c **** 
 205:common/stm32f10x_rcc.c **** /**
 206:common/stm32f10x_rcc.c ****   * @}
 207:common/stm32f10x_rcc.c ****   */
 208:common/stm32f10x_rcc.c **** 
 209:common/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 210:common/stm32f10x_rcc.c ****   * @{
 211:common/stm32f10x_rcc.c ****   */
 212:common/stm32f10x_rcc.c **** 
 213:common/stm32f10x_rcc.c **** /**
 214:common/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 215:common/stm32f10x_rcc.c ****   * @param  None
 216:common/stm32f10x_rcc.c ****   * @retval None
 217:common/stm32f10x_rcc.c ****   */
 218:common/stm32f10x_rcc.c **** void RCC_DeInit(void)
 219:common/stm32f10x_rcc.c **** {
  55              		.loc 1 219 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 1, uses_anonymous_args = 0
  59              		@ link register save eliminated.
  60 0000 80B4     		push	{r7}
  61              		.cfi_def_cfa_offset 4
  62              		.cfi_offset 7, -4
  63 0002 00AF     		add	r7, sp, #0
  64              		.cfi_def_cfa_register 7
 220:common/stm32f10x_rcc.c ****   /* Set HSION bit */
 221:common/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
ARM GAS  /tmp/cccmMgvS.s 			page 6


  65              		.loc 1 221 0
  66 0004 134A     		ldr	r2, .L2
  67 0006 134B     		ldr	r3, .L2
  68 0008 1B68     		ldr	r3, [r3]
  69 000a 43F00103 		orr	r3, r3, #1
  70 000e 1360     		str	r3, [r2]
 222:common/stm32f10x_rcc.c **** 
 223:common/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 224:common/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 225:common/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
  71              		.loc 1 225 0
  72 0010 1049     		ldr	r1, .L2
  73 0012 104B     		ldr	r3, .L2
  74 0014 5A68     		ldr	r2, [r3, #4]
  75 0016 104B     		ldr	r3, .L2+4
  76 0018 1340     		ands	r3, r3, r2
  77 001a 4B60     		str	r3, [r1, #4]
 226:common/stm32f10x_rcc.c **** #else
 227:common/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
 228:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 229:common/stm32f10x_rcc.c ****   
 230:common/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 231:common/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  78              		.loc 1 231 0
  79 001c 0D4A     		ldr	r2, .L2
  80 001e 0D4B     		ldr	r3, .L2
  81 0020 1B68     		ldr	r3, [r3]
  82 0022 23F08473 		bic	r3, r3, #17301504
  83 0026 23F48033 		bic	r3, r3, #65536
  84 002a 1360     		str	r3, [r2]
 232:common/stm32f10x_rcc.c **** 
 233:common/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 234:common/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  85              		.loc 1 234 0
  86 002c 094A     		ldr	r2, .L2
  87 002e 094B     		ldr	r3, .L2
  88 0030 1B68     		ldr	r3, [r3]
  89 0032 23F48023 		bic	r3, r3, #262144
  90 0036 1360     		str	r3, [r2]
 235:common/stm32f10x_rcc.c **** 
 236:common/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 237:common/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  91              		.loc 1 237 0
  92 0038 064A     		ldr	r2, .L2
  93 003a 064B     		ldr	r3, .L2
  94 003c 5B68     		ldr	r3, [r3, #4]
  95 003e 23F4FE03 		bic	r3, r3, #8323072
  96 0042 5360     		str	r3, [r2, #4]
 238:common/stm32f10x_rcc.c **** 
 239:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 240:common/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 241:common/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
 242:common/stm32f10x_rcc.c **** 
 243:common/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 244:common/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 245:common/stm32f10x_rcc.c **** 
 246:common/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
ARM GAS  /tmp/cccmMgvS.s 			page 7


 247:common/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 248:common/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 249:common/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 250:common/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 251:common/stm32f10x_rcc.c **** 
 252:common/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 253:common/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 254:common/stm32f10x_rcc.c **** #else
 255:common/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 256:common/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
  97              		.loc 1 256 0
  98 0044 034B     		ldr	r3, .L2
  99 0046 4FF41F02 		mov	r2, #10420224
 100 004a 9A60     		str	r2, [r3, #8]
 257:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 258:common/stm32f10x_rcc.c **** 
 259:common/stm32f10x_rcc.c **** }
 101              		.loc 1 259 0
 102 004c 00BF     		nop
 103 004e BD46     		mov	sp, r7
 104              		.cfi_def_cfa_register 13
 105              		@ sp needed
 106 0050 80BC     		pop	{r7}
 107              		.cfi_restore 7
 108              		.cfi_def_cfa_offset 0
 109 0052 7047     		bx	lr
 110              	.L3:
 111              		.align	2
 112              	.L2:
 113 0054 00100240 		.word	1073876992
 114 0058 0000FFF8 		.word	-117506048
 115              		.cfi_endproc
 116              	.LFE63:
 117              		.size	RCC_DeInit, .-RCC_DeInit
 118              		.align	1
 119              		.global	RCC_HSEConfig
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu softvfp
 124              		.type	RCC_HSEConfig, %function
 125              	RCC_HSEConfig:
 126              	.LFB64:
 260:common/stm32f10x_rcc.c **** 
 261:common/stm32f10x_rcc.c **** /**
 262:common/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 263:common/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 264:common/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 265:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 266:common/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 267:common/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 268:common/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 269:common/stm32f10x_rcc.c ****   * @retval None
 270:common/stm32f10x_rcc.c ****   */
 271:common/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 272:common/stm32f10x_rcc.c **** {
 127              		.loc 1 272 0
ARM GAS  /tmp/cccmMgvS.s 			page 8


 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 8
 130              		@ frame_needed = 1, uses_anonymous_args = 0
 131              		@ link register save eliminated.
 132 005c 80B4     		push	{r7}
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 005e 83B0     		sub	sp, sp, #12
 136              		.cfi_def_cfa_offset 16
 137 0060 00AF     		add	r7, sp, #0
 138              		.cfi_def_cfa_register 7
 139 0062 7860     		str	r0, [r7, #4]
 273:common/stm32f10x_rcc.c ****   /* Check the parameters */
 274:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 275:common/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 276:common/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 277:common/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 140              		.loc 1 277 0
 141 0064 134A     		ldr	r2, .L9
 142 0066 134B     		ldr	r3, .L9
 143 0068 1B68     		ldr	r3, [r3]
 144 006a 23F48033 		bic	r3, r3, #65536
 145 006e 1360     		str	r3, [r2]
 278:common/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 279:common/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 146              		.loc 1 279 0
 147 0070 104A     		ldr	r2, .L9
 148 0072 104B     		ldr	r3, .L9
 149 0074 1B68     		ldr	r3, [r3]
 150 0076 23F48023 		bic	r3, r3, #262144
 151 007a 1360     		str	r3, [r2]
 280:common/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 281:common/stm32f10x_rcc.c ****   switch(RCC_HSE)
 152              		.loc 1 281 0
 153 007c 7B68     		ldr	r3, [r7, #4]
 154 007e B3F5803F 		cmp	r3, #65536
 155 0082 03D0     		beq	.L6
 156 0084 B3F5802F 		cmp	r3, #262144
 157 0088 07D0     		beq	.L7
 282:common/stm32f10x_rcc.c ****   {
 283:common/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 284:common/stm32f10x_rcc.c ****       /* Set HSEON bit */
 285:common/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 286:common/stm32f10x_rcc.c ****       break;
 287:common/stm32f10x_rcc.c ****       
 288:common/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 289:common/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 290:common/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 291:common/stm32f10x_rcc.c ****       break;
 292:common/stm32f10x_rcc.c ****       
 293:common/stm32f10x_rcc.c ****     default:
 294:common/stm32f10x_rcc.c ****       break;
 158              		.loc 1 294 0
 159 008a 0DE0     		b	.L8
 160              	.L6:
 285:common/stm32f10x_rcc.c ****       break;
 161              		.loc 1 285 0
ARM GAS  /tmp/cccmMgvS.s 			page 9


 162 008c 094A     		ldr	r2, .L9
 163 008e 094B     		ldr	r3, .L9
 164 0090 1B68     		ldr	r3, [r3]
 165 0092 43F48033 		orr	r3, r3, #65536
 166 0096 1360     		str	r3, [r2]
 286:common/stm32f10x_rcc.c ****       
 167              		.loc 1 286 0
 168 0098 06E0     		b	.L8
 169              	.L7:
 290:common/stm32f10x_rcc.c ****       break;
 170              		.loc 1 290 0
 171 009a 064A     		ldr	r2, .L9
 172 009c 054B     		ldr	r3, .L9
 173 009e 1B68     		ldr	r3, [r3]
 174 00a0 43F4A023 		orr	r3, r3, #327680
 175 00a4 1360     		str	r3, [r2]
 291:common/stm32f10x_rcc.c ****       
 176              		.loc 1 291 0
 177 00a6 00BF     		nop
 178              	.L8:
 295:common/stm32f10x_rcc.c ****   }
 296:common/stm32f10x_rcc.c **** }
 179              		.loc 1 296 0
 180 00a8 00BF     		nop
 181 00aa 0C37     		adds	r7, r7, #12
 182              		.cfi_def_cfa_offset 4
 183 00ac BD46     		mov	sp, r7
 184              		.cfi_def_cfa_register 13
 185              		@ sp needed
 186 00ae 80BC     		pop	{r7}
 187              		.cfi_restore 7
 188              		.cfi_def_cfa_offset 0
 189 00b0 7047     		bx	lr
 190              	.L10:
 191 00b2 00BF     		.align	2
 192              	.L9:
 193 00b4 00100240 		.word	1073876992
 194              		.cfi_endproc
 195              	.LFE64:
 196              		.size	RCC_HSEConfig, .-RCC_HSEConfig
 197              		.align	1
 198              		.global	RCC_WaitForHSEStartUp
 199              		.syntax unified
 200              		.thumb
 201              		.thumb_func
 202              		.fpu softvfp
 203              		.type	RCC_WaitForHSEStartUp, %function
 204              	RCC_WaitForHSEStartUp:
 205              	.LFB65:
 297:common/stm32f10x_rcc.c **** 
 298:common/stm32f10x_rcc.c **** /**
 299:common/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 300:common/stm32f10x_rcc.c ****   * @param  None
 301:common/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 302:common/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 303:common/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 304:common/stm32f10x_rcc.c ****   */
ARM GAS  /tmp/cccmMgvS.s 			page 10


 305:common/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 306:common/stm32f10x_rcc.c **** {
 206              		.loc 1 306 0
 207              		.cfi_startproc
 208              		@ args = 0, pretend = 0, frame = 8
 209              		@ frame_needed = 1, uses_anonymous_args = 0
 210 00b8 80B5     		push	{r7, lr}
 211              		.cfi_def_cfa_offset 8
 212              		.cfi_offset 7, -8
 213              		.cfi_offset 14, -4
 214 00ba 82B0     		sub	sp, sp, #8
 215              		.cfi_def_cfa_offset 16
 216 00bc 00AF     		add	r7, sp, #0
 217              		.cfi_def_cfa_register 7
 307:common/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 218              		.loc 1 307 0
 219 00be 0023     		movs	r3, #0
 220 00c0 3B60     		str	r3, [r7]
 308:common/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 221              		.loc 1 308 0
 222 00c2 0023     		movs	r3, #0
 223 00c4 FB71     		strb	r3, [r7, #7]
 309:common/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 224              		.loc 1 309 0
 225 00c6 0023     		movs	r3, #0
 226 00c8 BB71     		strb	r3, [r7, #6]
 227              	.L13:
 310:common/stm32f10x_rcc.c ****   
 311:common/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 312:common/stm32f10x_rcc.c ****   do
 313:common/stm32f10x_rcc.c ****   {
 314:common/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 228              		.loc 1 314 0 discriminator 2
 229 00ca 3120     		movs	r0, #49
 230 00cc FFF7FEFF 		bl	RCC_GetFlagStatus
 231 00d0 0346     		mov	r3, r0
 232 00d2 BB71     		strb	r3, [r7, #6]
 315:common/stm32f10x_rcc.c ****     StartUpCounter++;  
 233              		.loc 1 315 0 discriminator 2
 234 00d4 3B68     		ldr	r3, [r7]
 235 00d6 0133     		adds	r3, r3, #1
 236 00d8 3B60     		str	r3, [r7]
 316:common/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 237              		.loc 1 316 0 discriminator 2
 238 00da 3B68     		ldr	r3, [r7]
 239 00dc B3F5A06F 		cmp	r3, #1280
 240 00e0 02D0     		beq	.L12
 241              		.loc 1 316 0 is_stmt 0 discriminator 1
 242 00e2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 243 00e4 002B     		cmp	r3, #0
 244 00e6 F0D0     		beq	.L13
 245              	.L12:
 317:common/stm32f10x_rcc.c ****   
 318:common/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 246              		.loc 1 318 0 is_stmt 1
 247 00e8 3120     		movs	r0, #49
 248 00ea FFF7FEFF 		bl	RCC_GetFlagStatus
ARM GAS  /tmp/cccmMgvS.s 			page 11


 249 00ee 0346     		mov	r3, r0
 250 00f0 002B     		cmp	r3, #0
 251 00f2 02D0     		beq	.L14
 319:common/stm32f10x_rcc.c ****   {
 320:common/stm32f10x_rcc.c ****     status = SUCCESS;
 252              		.loc 1 320 0
 253 00f4 0123     		movs	r3, #1
 254 00f6 FB71     		strb	r3, [r7, #7]
 255 00f8 01E0     		b	.L15
 256              	.L14:
 321:common/stm32f10x_rcc.c ****   }
 322:common/stm32f10x_rcc.c ****   else
 323:common/stm32f10x_rcc.c ****   {
 324:common/stm32f10x_rcc.c ****     status = ERROR;
 257              		.loc 1 324 0
 258 00fa 0023     		movs	r3, #0
 259 00fc FB71     		strb	r3, [r7, #7]
 260              	.L15:
 325:common/stm32f10x_rcc.c ****   }  
 326:common/stm32f10x_rcc.c ****   return (status);
 261              		.loc 1 326 0
 262 00fe FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 327:common/stm32f10x_rcc.c **** }
 263              		.loc 1 327 0
 264 0100 1846     		mov	r0, r3
 265 0102 0837     		adds	r7, r7, #8
 266              		.cfi_def_cfa_offset 8
 267 0104 BD46     		mov	sp, r7
 268              		.cfi_def_cfa_register 13
 269              		@ sp needed
 270 0106 80BD     		pop	{r7, pc}
 271              		.cfi_endproc
 272              	.LFE65:
 273              		.size	RCC_WaitForHSEStartUp, .-RCC_WaitForHSEStartUp
 274              		.align	1
 275              		.global	RCC_AdjustHSICalibrationValue
 276              		.syntax unified
 277              		.thumb
 278              		.thumb_func
 279              		.fpu softvfp
 280              		.type	RCC_AdjustHSICalibrationValue, %function
 281              	RCC_AdjustHSICalibrationValue:
 282              	.LFB66:
 328:common/stm32f10x_rcc.c **** 
 329:common/stm32f10x_rcc.c **** /**
 330:common/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 331:common/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 332:common/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 333:common/stm32f10x_rcc.c ****   * @retval None
 334:common/stm32f10x_rcc.c ****   */
 335:common/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 336:common/stm32f10x_rcc.c **** {
 283              		.loc 1 336 0
 284              		.cfi_startproc
 285              		@ args = 0, pretend = 0, frame = 16
 286              		@ frame_needed = 1, uses_anonymous_args = 0
 287              		@ link register save eliminated.
ARM GAS  /tmp/cccmMgvS.s 			page 12


 288 0108 80B4     		push	{r7}
 289              		.cfi_def_cfa_offset 4
 290              		.cfi_offset 7, -4
 291 010a 85B0     		sub	sp, sp, #20
 292              		.cfi_def_cfa_offset 24
 293 010c 00AF     		add	r7, sp, #0
 294              		.cfi_def_cfa_register 7
 295 010e 0346     		mov	r3, r0
 296 0110 FB71     		strb	r3, [r7, #7]
 337:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 297              		.loc 1 337 0
 298 0112 0023     		movs	r3, #0
 299 0114 FB60     		str	r3, [r7, #12]
 338:common/stm32f10x_rcc.c ****   /* Check the parameters */
 339:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 340:common/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 300              		.loc 1 340 0
 301 0116 0A4B     		ldr	r3, .L18
 302 0118 1B68     		ldr	r3, [r3]
 303 011a FB60     		str	r3, [r7, #12]
 341:common/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 342:common/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 304              		.loc 1 342 0
 305 011c FB68     		ldr	r3, [r7, #12]
 306 011e 23F0F803 		bic	r3, r3, #248
 307 0122 FB60     		str	r3, [r7, #12]
 343:common/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 344:common/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 308              		.loc 1 344 0
 309 0124 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 310 0126 DB00     		lsls	r3, r3, #3
 311 0128 FA68     		ldr	r2, [r7, #12]
 312 012a 1343     		orrs	r3, r3, r2
 313 012c FB60     		str	r3, [r7, #12]
 345:common/stm32f10x_rcc.c ****   /* Store the new value */
 346:common/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 314              		.loc 1 346 0
 315 012e 044A     		ldr	r2, .L18
 316 0130 FB68     		ldr	r3, [r7, #12]
 317 0132 1360     		str	r3, [r2]
 347:common/stm32f10x_rcc.c **** }
 318              		.loc 1 347 0
 319 0134 00BF     		nop
 320 0136 1437     		adds	r7, r7, #20
 321              		.cfi_def_cfa_offset 4
 322 0138 BD46     		mov	sp, r7
 323              		.cfi_def_cfa_register 13
 324              		@ sp needed
 325 013a 80BC     		pop	{r7}
 326              		.cfi_restore 7
 327              		.cfi_def_cfa_offset 0
 328 013c 7047     		bx	lr
 329              	.L19:
 330 013e 00BF     		.align	2
 331              	.L18:
 332 0140 00100240 		.word	1073876992
 333              		.cfi_endproc
ARM GAS  /tmp/cccmMgvS.s 			page 13


 334              	.LFE66:
 335              		.size	RCC_AdjustHSICalibrationValue, .-RCC_AdjustHSICalibrationValue
 336              		.align	1
 337              		.global	RCC_HSICmd
 338              		.syntax unified
 339              		.thumb
 340              		.thumb_func
 341              		.fpu softvfp
 342              		.type	RCC_HSICmd, %function
 343              	RCC_HSICmd:
 344              	.LFB67:
 348:common/stm32f10x_rcc.c **** 
 349:common/stm32f10x_rcc.c **** /**
 350:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 351:common/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 352:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 353:common/stm32f10x_rcc.c ****   * @retval None
 354:common/stm32f10x_rcc.c ****   */
 355:common/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 356:common/stm32f10x_rcc.c **** {
 345              		.loc 1 356 0
 346              		.cfi_startproc
 347              		@ args = 0, pretend = 0, frame = 8
 348              		@ frame_needed = 1, uses_anonymous_args = 0
 349              		@ link register save eliminated.
 350 0144 80B4     		push	{r7}
 351              		.cfi_def_cfa_offset 4
 352              		.cfi_offset 7, -4
 353 0146 83B0     		sub	sp, sp, #12
 354              		.cfi_def_cfa_offset 16
 355 0148 00AF     		add	r7, sp, #0
 356              		.cfi_def_cfa_register 7
 357 014a 0346     		mov	r3, r0
 358 014c FB71     		strb	r3, [r7, #7]
 357:common/stm32f10x_rcc.c ****   /* Check the parameters */
 358:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 359:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 359              		.loc 1 359 0
 360 014e 044A     		ldr	r2, .L21
 361 0150 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 362 0152 1360     		str	r3, [r2]
 360:common/stm32f10x_rcc.c **** }
 363              		.loc 1 360 0
 364 0154 00BF     		nop
 365 0156 0C37     		adds	r7, r7, #12
 366              		.cfi_def_cfa_offset 4
 367 0158 BD46     		mov	sp, r7
 368              		.cfi_def_cfa_register 13
 369              		@ sp needed
 370 015a 80BC     		pop	{r7}
 371              		.cfi_restore 7
 372              		.cfi_def_cfa_offset 0
 373 015c 7047     		bx	lr
 374              	.L22:
 375 015e 00BF     		.align	2
 376              	.L21:
 377 0160 00004242 		.word	1111621632
ARM GAS  /tmp/cccmMgvS.s 			page 14


 378              		.cfi_endproc
 379              	.LFE67:
 380              		.size	RCC_HSICmd, .-RCC_HSICmd
 381              		.align	1
 382              		.global	RCC_PLLConfig
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu softvfp
 387              		.type	RCC_PLLConfig, %function
 388              	RCC_PLLConfig:
 389              	.LFB68:
 361:common/stm32f10x_rcc.c **** 
 362:common/stm32f10x_rcc.c **** /**
 363:common/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 364:common/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 365:common/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 366:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 367:common/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 368:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 369:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 370:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 371:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 372:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 373:common/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 374:common/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 375:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 376:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 377:common/stm32f10x_rcc.c ****   * @retval None
 378:common/stm32f10x_rcc.c ****   */
 379:common/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 380:common/stm32f10x_rcc.c **** {
 390              		.loc 1 380 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 16
 393              		@ frame_needed = 1, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 395 0164 80B4     		push	{r7}
 396              		.cfi_def_cfa_offset 4
 397              		.cfi_offset 7, -4
 398 0166 85B0     		sub	sp, sp, #20
 399              		.cfi_def_cfa_offset 24
 400 0168 00AF     		add	r7, sp, #0
 401              		.cfi_def_cfa_register 7
 402 016a 7860     		str	r0, [r7, #4]
 403 016c 3960     		str	r1, [r7]
 381:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 404              		.loc 1 381 0
 405 016e 0023     		movs	r3, #0
 406 0170 FB60     		str	r3, [r7, #12]
 382:common/stm32f10x_rcc.c **** 
 383:common/stm32f10x_rcc.c ****   /* Check the parameters */
 384:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 385:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 386:common/stm32f10x_rcc.c **** 
 387:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 407              		.loc 1 387 0
ARM GAS  /tmp/cccmMgvS.s 			page 15


 408 0172 0A4B     		ldr	r3, .L24
 409 0174 5B68     		ldr	r3, [r3, #4]
 410 0176 FB60     		str	r3, [r7, #12]
 388:common/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 389:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 411              		.loc 1 389 0
 412 0178 FB68     		ldr	r3, [r7, #12]
 413 017a 23F47C13 		bic	r3, r3, #4128768
 414 017e FB60     		str	r3, [r7, #12]
 390:common/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 391:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 415              		.loc 1 391 0
 416 0180 7A68     		ldr	r2, [r7, #4]
 417 0182 3B68     		ldr	r3, [r7]
 418 0184 1343     		orrs	r3, r3, r2
 419 0186 FA68     		ldr	r2, [r7, #12]
 420 0188 1343     		orrs	r3, r3, r2
 421 018a FB60     		str	r3, [r7, #12]
 392:common/stm32f10x_rcc.c ****   /* Store the new value */
 393:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 422              		.loc 1 393 0
 423 018c 034A     		ldr	r2, .L24
 424 018e FB68     		ldr	r3, [r7, #12]
 425 0190 5360     		str	r3, [r2, #4]
 394:common/stm32f10x_rcc.c **** }
 426              		.loc 1 394 0
 427 0192 00BF     		nop
 428 0194 1437     		adds	r7, r7, #20
 429              		.cfi_def_cfa_offset 4
 430 0196 BD46     		mov	sp, r7
 431              		.cfi_def_cfa_register 13
 432              		@ sp needed
 433 0198 80BC     		pop	{r7}
 434              		.cfi_restore 7
 435              		.cfi_def_cfa_offset 0
 436 019a 7047     		bx	lr
 437              	.L25:
 438              		.align	2
 439              	.L24:
 440 019c 00100240 		.word	1073876992
 441              		.cfi_endproc
 442              	.LFE68:
 443              		.size	RCC_PLLConfig, .-RCC_PLLConfig
 444              		.align	1
 445              		.global	RCC_PLLCmd
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu softvfp
 450              		.type	RCC_PLLCmd, %function
 451              	RCC_PLLCmd:
 452              	.LFB69:
 395:common/stm32f10x_rcc.c **** 
 396:common/stm32f10x_rcc.c **** /**
 397:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 398:common/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 399:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
ARM GAS  /tmp/cccmMgvS.s 			page 16


 400:common/stm32f10x_rcc.c ****   * @retval None
 401:common/stm32f10x_rcc.c ****   */
 402:common/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 403:common/stm32f10x_rcc.c **** {
 453              		.loc 1 403 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 8
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458 01a0 80B4     		push	{r7}
 459              		.cfi_def_cfa_offset 4
 460              		.cfi_offset 7, -4
 461 01a2 83B0     		sub	sp, sp, #12
 462              		.cfi_def_cfa_offset 16
 463 01a4 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 465 01a6 0346     		mov	r3, r0
 466 01a8 FB71     		strb	r3, [r7, #7]
 404:common/stm32f10x_rcc.c ****   /* Check the parameters */
 405:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 406:common/stm32f10x_rcc.c **** 
 407:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 467              		.loc 1 407 0
 468 01aa 044A     		ldr	r2, .L27
 469 01ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 470 01ae 1360     		str	r3, [r2]
 408:common/stm32f10x_rcc.c **** }
 471              		.loc 1 408 0
 472 01b0 00BF     		nop
 473 01b2 0C37     		adds	r7, r7, #12
 474              		.cfi_def_cfa_offset 4
 475 01b4 BD46     		mov	sp, r7
 476              		.cfi_def_cfa_register 13
 477              		@ sp needed
 478 01b6 80BC     		pop	{r7}
 479              		.cfi_restore 7
 480              		.cfi_def_cfa_offset 0
 481 01b8 7047     		bx	lr
 482              	.L28:
 483 01ba 00BF     		.align	2
 484              	.L27:
 485 01bc 60004242 		.word	1111621728
 486              		.cfi_endproc
 487              	.LFE69:
 488              		.size	RCC_PLLCmd, .-RCC_PLLCmd
 489              		.align	1
 490              		.global	RCC_SYSCLKConfig
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 494              		.fpu softvfp
 495              		.type	RCC_SYSCLKConfig, %function
 496              	RCC_SYSCLKConfig:
 497              	.LFB70:
 409:common/stm32f10x_rcc.c **** 
 410:common/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 411:common/stm32f10x_rcc.c **** /**
ARM GAS  /tmp/cccmMgvS.s 			page 17


 412:common/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 413:common/stm32f10x_rcc.c ****   * @note 
 414:common/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 415:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 416:common/stm32f10x_rcc.c ****   *     devices.
 417:common/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 418:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 419:common/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 420:common/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 421:common/stm32f10x_rcc.c ****   * @note 
 422:common/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 423:common/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 424:common/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 425:common/stm32f10x_rcc.c ****   * @retval None
 426:common/stm32f10x_rcc.c ****   */
 427:common/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 428:common/stm32f10x_rcc.c **** {
 429:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 430:common/stm32f10x_rcc.c ****   
 431:common/stm32f10x_rcc.c ****   /* Check the parameters */
 432:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 433:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 434:common/stm32f10x_rcc.c **** 
 435:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 436:common/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 437:common/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 438:common/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 439:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 440:common/stm32f10x_rcc.c ****   /* Store the new value */
 441:common/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 442:common/stm32f10x_rcc.c **** }
 443:common/stm32f10x_rcc.c **** #endif
 444:common/stm32f10x_rcc.c **** 
 445:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 446:common/stm32f10x_rcc.c **** /**
 447:common/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 448:common/stm32f10x_rcc.c ****   * @note 
 449:common/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 450:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 451:common/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 452:common/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 453:common/stm32f10x_rcc.c ****   * @retval None
 454:common/stm32f10x_rcc.c ****   */
 455:common/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 456:common/stm32f10x_rcc.c **** {
 457:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 458:common/stm32f10x_rcc.c **** 
 459:common/stm32f10x_rcc.c ****   /* Check the parameters */
 460:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 461:common/stm32f10x_rcc.c **** 
 462:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 463:common/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 464:common/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 465:common/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 466:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 467:common/stm32f10x_rcc.c ****   /* Store the new value */
 468:common/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
ARM GAS  /tmp/cccmMgvS.s 			page 18


 469:common/stm32f10x_rcc.c **** }
 470:common/stm32f10x_rcc.c **** 
 471:common/stm32f10x_rcc.c **** /**
 472:common/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 473:common/stm32f10x_rcc.c ****   * @note
 474:common/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 475:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 476:common/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 477:common/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 478:common/stm32f10x_rcc.c ****   * @retval None
 479:common/stm32f10x_rcc.c ****   */
 480:common/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 481:common/stm32f10x_rcc.c **** {
 482:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 483:common/stm32f10x_rcc.c **** 
 484:common/stm32f10x_rcc.c ****   /* Check the parameters */
 485:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 486:common/stm32f10x_rcc.c **** 
 487:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 488:common/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 489:common/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 490:common/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 491:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 492:common/stm32f10x_rcc.c ****   /* Store the new value */
 493:common/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 494:common/stm32f10x_rcc.c **** }
 495:common/stm32f10x_rcc.c **** 
 496:common/stm32f10x_rcc.c **** 
 497:common/stm32f10x_rcc.c **** /**
 498:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 499:common/stm32f10x_rcc.c ****   * @note 
 500:common/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 501:common/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 502:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 503:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 504:common/stm32f10x_rcc.c ****   * @retval None
 505:common/stm32f10x_rcc.c ****   */
 506:common/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 507:common/stm32f10x_rcc.c **** {
 508:common/stm32f10x_rcc.c ****   /* Check the parameters */
 509:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 510:common/stm32f10x_rcc.c **** 
 511:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 512:common/stm32f10x_rcc.c **** }
 513:common/stm32f10x_rcc.c **** 
 514:common/stm32f10x_rcc.c **** 
 515:common/stm32f10x_rcc.c **** /**
 516:common/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 517:common/stm32f10x_rcc.c ****   * @note 
 518:common/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 519:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 520:common/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 521:common/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 522:common/stm32f10x_rcc.c ****   * @retval None
 523:common/stm32f10x_rcc.c ****   */
 524:common/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 525:common/stm32f10x_rcc.c **** {
ARM GAS  /tmp/cccmMgvS.s 			page 19


 526:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 527:common/stm32f10x_rcc.c **** 
 528:common/stm32f10x_rcc.c ****   /* Check the parameters */
 529:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 530:common/stm32f10x_rcc.c **** 
 531:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 532:common/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 533:common/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 534:common/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 535:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 536:common/stm32f10x_rcc.c ****   /* Store the new value */
 537:common/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 538:common/stm32f10x_rcc.c **** }
 539:common/stm32f10x_rcc.c **** 
 540:common/stm32f10x_rcc.c **** 
 541:common/stm32f10x_rcc.c **** /**
 542:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 543:common/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 544:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 545:common/stm32f10x_rcc.c ****   * @retval None
 546:common/stm32f10x_rcc.c ****   */
 547:common/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 548:common/stm32f10x_rcc.c **** {
 549:common/stm32f10x_rcc.c ****   /* Check the parameters */
 550:common/stm32f10x_rcc.c **** 
 551:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 552:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 553:common/stm32f10x_rcc.c **** }
 554:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 555:common/stm32f10x_rcc.c **** 
 556:common/stm32f10x_rcc.c **** /**
 557:common/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 558:common/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 559:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 560:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 561:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 562:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 563:common/stm32f10x_rcc.c ****   * @retval None
 564:common/stm32f10x_rcc.c ****   */
 565:common/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 566:common/stm32f10x_rcc.c **** {
 498              		.loc 1 566 0
 499              		.cfi_startproc
 500              		@ args = 0, pretend = 0, frame = 16
 501              		@ frame_needed = 1, uses_anonymous_args = 0
 502              		@ link register save eliminated.
 503 01c0 80B4     		push	{r7}
 504              		.cfi_def_cfa_offset 4
 505              		.cfi_offset 7, -4
 506 01c2 85B0     		sub	sp, sp, #20
 507              		.cfi_def_cfa_offset 24
 508 01c4 00AF     		add	r7, sp, #0
 509              		.cfi_def_cfa_register 7
 510 01c6 7860     		str	r0, [r7, #4]
 567:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 511              		.loc 1 567 0
 512 01c8 0023     		movs	r3, #0
ARM GAS  /tmp/cccmMgvS.s 			page 20


 513 01ca FB60     		str	r3, [r7, #12]
 568:common/stm32f10x_rcc.c ****   /* Check the parameters */
 569:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 570:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 514              		.loc 1 570 0
 515 01cc 094B     		ldr	r3, .L30
 516 01ce 5B68     		ldr	r3, [r3, #4]
 517 01d0 FB60     		str	r3, [r7, #12]
 571:common/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 572:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 518              		.loc 1 572 0
 519 01d2 FB68     		ldr	r3, [r7, #12]
 520 01d4 23F00303 		bic	r3, r3, #3
 521 01d8 FB60     		str	r3, [r7, #12]
 573:common/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 574:common/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 522              		.loc 1 574 0
 523 01da FA68     		ldr	r2, [r7, #12]
 524 01dc 7B68     		ldr	r3, [r7, #4]
 525 01de 1343     		orrs	r3, r3, r2
 526 01e0 FB60     		str	r3, [r7, #12]
 575:common/stm32f10x_rcc.c ****   /* Store the new value */
 576:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 527              		.loc 1 576 0
 528 01e2 044A     		ldr	r2, .L30
 529 01e4 FB68     		ldr	r3, [r7, #12]
 530 01e6 5360     		str	r3, [r2, #4]
 577:common/stm32f10x_rcc.c **** }
 531              		.loc 1 577 0
 532 01e8 00BF     		nop
 533 01ea 1437     		adds	r7, r7, #20
 534              		.cfi_def_cfa_offset 4
 535 01ec BD46     		mov	sp, r7
 536              		.cfi_def_cfa_register 13
 537              		@ sp needed
 538 01ee 80BC     		pop	{r7}
 539              		.cfi_restore 7
 540              		.cfi_def_cfa_offset 0
 541 01f0 7047     		bx	lr
 542              	.L31:
 543 01f2 00BF     		.align	2
 544              	.L30:
 545 01f4 00100240 		.word	1073876992
 546              		.cfi_endproc
 547              	.LFE70:
 548              		.size	RCC_SYSCLKConfig, .-RCC_SYSCLKConfig
 549              		.align	1
 550              		.global	RCC_GetSYSCLKSource
 551              		.syntax unified
 552              		.thumb
 553              		.thumb_func
 554              		.fpu softvfp
 555              		.type	RCC_GetSYSCLKSource, %function
 556              	RCC_GetSYSCLKSource:
 557              	.LFB71:
 578:common/stm32f10x_rcc.c **** 
 579:common/stm32f10x_rcc.c **** /**
ARM GAS  /tmp/cccmMgvS.s 			page 21


 580:common/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 581:common/stm32f10x_rcc.c ****   * @param  None
 582:common/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 583:common/stm32f10x_rcc.c ****   *   be one of the following:
 584:common/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 585:common/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 586:common/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 587:common/stm32f10x_rcc.c ****   */
 588:common/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 589:common/stm32f10x_rcc.c **** {
 558              		.loc 1 589 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 0
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 563 01f8 80B4     		push	{r7}
 564              		.cfi_def_cfa_offset 4
 565              		.cfi_offset 7, -4
 566 01fa 00AF     		add	r7, sp, #0
 567              		.cfi_def_cfa_register 7
 590:common/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 568              		.loc 1 590 0
 569 01fc 044B     		ldr	r3, .L34
 570 01fe 5B68     		ldr	r3, [r3, #4]
 571 0200 DBB2     		uxtb	r3, r3
 572 0202 03F00C03 		and	r3, r3, #12
 573 0206 DBB2     		uxtb	r3, r3
 591:common/stm32f10x_rcc.c **** }
 574              		.loc 1 591 0
 575 0208 1846     		mov	r0, r3
 576 020a BD46     		mov	sp, r7
 577              		.cfi_def_cfa_register 13
 578              		@ sp needed
 579 020c 80BC     		pop	{r7}
 580              		.cfi_restore 7
 581              		.cfi_def_cfa_offset 0
 582 020e 7047     		bx	lr
 583              	.L35:
 584              		.align	2
 585              	.L34:
 586 0210 00100240 		.word	1073876992
 587              		.cfi_endproc
 588              	.LFE71:
 589              		.size	RCC_GetSYSCLKSource, .-RCC_GetSYSCLKSource
 590              		.align	1
 591              		.global	RCC_HCLKConfig
 592              		.syntax unified
 593              		.thumb
 594              		.thumb_func
 595              		.fpu softvfp
 596              		.type	RCC_HCLKConfig, %function
 597              	RCC_HCLKConfig:
 598              	.LFB72:
 592:common/stm32f10x_rcc.c **** 
 593:common/stm32f10x_rcc.c **** /**
 594:common/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 595:common/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
ARM GAS  /tmp/cccmMgvS.s 			page 22


 596:common/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 597:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 598:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 599:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 600:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 601:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 602:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 603:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 604:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 605:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 606:common/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 607:common/stm32f10x_rcc.c ****   * @retval None
 608:common/stm32f10x_rcc.c ****   */
 609:common/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 610:common/stm32f10x_rcc.c **** {
 599              		.loc 1 610 0
 600              		.cfi_startproc
 601              		@ args = 0, pretend = 0, frame = 16
 602              		@ frame_needed = 1, uses_anonymous_args = 0
 603              		@ link register save eliminated.
 604 0214 80B4     		push	{r7}
 605              		.cfi_def_cfa_offset 4
 606              		.cfi_offset 7, -4
 607 0216 85B0     		sub	sp, sp, #20
 608              		.cfi_def_cfa_offset 24
 609 0218 00AF     		add	r7, sp, #0
 610              		.cfi_def_cfa_register 7
 611 021a 7860     		str	r0, [r7, #4]
 611:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 612              		.loc 1 611 0
 613 021c 0023     		movs	r3, #0
 614 021e FB60     		str	r3, [r7, #12]
 612:common/stm32f10x_rcc.c ****   /* Check the parameters */
 613:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 614:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 615              		.loc 1 614 0
 616 0220 094B     		ldr	r3, .L37
 617 0222 5B68     		ldr	r3, [r3, #4]
 618 0224 FB60     		str	r3, [r7, #12]
 615:common/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 616:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 619              		.loc 1 616 0
 620 0226 FB68     		ldr	r3, [r7, #12]
 621 0228 23F0F003 		bic	r3, r3, #240
 622 022c FB60     		str	r3, [r7, #12]
 617:common/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 618:common/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 623              		.loc 1 618 0
 624 022e FA68     		ldr	r2, [r7, #12]
 625 0230 7B68     		ldr	r3, [r7, #4]
 626 0232 1343     		orrs	r3, r3, r2
 627 0234 FB60     		str	r3, [r7, #12]
 619:common/stm32f10x_rcc.c ****   /* Store the new value */
 620:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 628              		.loc 1 620 0
 629 0236 044A     		ldr	r2, .L37
 630 0238 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cccmMgvS.s 			page 23


 631 023a 5360     		str	r3, [r2, #4]
 621:common/stm32f10x_rcc.c **** }
 632              		.loc 1 621 0
 633 023c 00BF     		nop
 634 023e 1437     		adds	r7, r7, #20
 635              		.cfi_def_cfa_offset 4
 636 0240 BD46     		mov	sp, r7
 637              		.cfi_def_cfa_register 13
 638              		@ sp needed
 639 0242 80BC     		pop	{r7}
 640              		.cfi_restore 7
 641              		.cfi_def_cfa_offset 0
 642 0244 7047     		bx	lr
 643              	.L38:
 644 0246 00BF     		.align	2
 645              	.L37:
 646 0248 00100240 		.word	1073876992
 647              		.cfi_endproc
 648              	.LFE72:
 649              		.size	RCC_HCLKConfig, .-RCC_HCLKConfig
 650              		.align	1
 651              		.global	RCC_PCLK1Config
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 655              		.fpu softvfp
 656              		.type	RCC_PCLK1Config, %function
 657              	RCC_PCLK1Config:
 658              	.LFB73:
 622:common/stm32f10x_rcc.c **** 
 623:common/stm32f10x_rcc.c **** /**
 624:common/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 625:common/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 626:common/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 627:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 628:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 629:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 630:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 631:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 632:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 633:common/stm32f10x_rcc.c ****   * @retval None
 634:common/stm32f10x_rcc.c ****   */
 635:common/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 636:common/stm32f10x_rcc.c **** {
 659              		.loc 1 636 0
 660              		.cfi_startproc
 661              		@ args = 0, pretend = 0, frame = 16
 662              		@ frame_needed = 1, uses_anonymous_args = 0
 663              		@ link register save eliminated.
 664 024c 80B4     		push	{r7}
 665              		.cfi_def_cfa_offset 4
 666              		.cfi_offset 7, -4
 667 024e 85B0     		sub	sp, sp, #20
 668              		.cfi_def_cfa_offset 24
 669 0250 00AF     		add	r7, sp, #0
 670              		.cfi_def_cfa_register 7
 671 0252 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/cccmMgvS.s 			page 24


 637:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 672              		.loc 1 637 0
 673 0254 0023     		movs	r3, #0
 674 0256 FB60     		str	r3, [r7, #12]
 638:common/stm32f10x_rcc.c ****   /* Check the parameters */
 639:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 640:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 675              		.loc 1 640 0
 676 0258 094B     		ldr	r3, .L40
 677 025a 5B68     		ldr	r3, [r3, #4]
 678 025c FB60     		str	r3, [r7, #12]
 641:common/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 642:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 679              		.loc 1 642 0
 680 025e FB68     		ldr	r3, [r7, #12]
 681 0260 23F4E063 		bic	r3, r3, #1792
 682 0264 FB60     		str	r3, [r7, #12]
 643:common/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 644:common/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 683              		.loc 1 644 0
 684 0266 FA68     		ldr	r2, [r7, #12]
 685 0268 7B68     		ldr	r3, [r7, #4]
 686 026a 1343     		orrs	r3, r3, r2
 687 026c FB60     		str	r3, [r7, #12]
 645:common/stm32f10x_rcc.c ****   /* Store the new value */
 646:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 688              		.loc 1 646 0
 689 026e 044A     		ldr	r2, .L40
 690 0270 FB68     		ldr	r3, [r7, #12]
 691 0272 5360     		str	r3, [r2, #4]
 647:common/stm32f10x_rcc.c **** }
 692              		.loc 1 647 0
 693 0274 00BF     		nop
 694 0276 1437     		adds	r7, r7, #20
 695              		.cfi_def_cfa_offset 4
 696 0278 BD46     		mov	sp, r7
 697              		.cfi_def_cfa_register 13
 698              		@ sp needed
 699 027a 80BC     		pop	{r7}
 700              		.cfi_restore 7
 701              		.cfi_def_cfa_offset 0
 702 027c 7047     		bx	lr
 703              	.L41:
 704 027e 00BF     		.align	2
 705              	.L40:
 706 0280 00100240 		.word	1073876992
 707              		.cfi_endproc
 708              	.LFE73:
 709              		.size	RCC_PCLK1Config, .-RCC_PCLK1Config
 710              		.align	1
 711              		.global	RCC_PCLK2Config
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu softvfp
 716              		.type	RCC_PCLK2Config, %function
 717              	RCC_PCLK2Config:
ARM GAS  /tmp/cccmMgvS.s 			page 25


 718              	.LFB74:
 648:common/stm32f10x_rcc.c **** 
 649:common/stm32f10x_rcc.c **** /**
 650:common/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 651:common/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 652:common/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 653:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 654:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 655:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 656:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 657:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 658:common/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 659:common/stm32f10x_rcc.c ****   * @retval None
 660:common/stm32f10x_rcc.c ****   */
 661:common/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 662:common/stm32f10x_rcc.c **** {
 719              		.loc 1 662 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 16
 722              		@ frame_needed = 1, uses_anonymous_args = 0
 723              		@ link register save eliminated.
 724 0284 80B4     		push	{r7}
 725              		.cfi_def_cfa_offset 4
 726              		.cfi_offset 7, -4
 727 0286 85B0     		sub	sp, sp, #20
 728              		.cfi_def_cfa_offset 24
 729 0288 00AF     		add	r7, sp, #0
 730              		.cfi_def_cfa_register 7
 731 028a 7860     		str	r0, [r7, #4]
 663:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 732              		.loc 1 663 0
 733 028c 0023     		movs	r3, #0
 734 028e FB60     		str	r3, [r7, #12]
 664:common/stm32f10x_rcc.c ****   /* Check the parameters */
 665:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 666:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 735              		.loc 1 666 0
 736 0290 094B     		ldr	r3, .L43
 737 0292 5B68     		ldr	r3, [r3, #4]
 738 0294 FB60     		str	r3, [r7, #12]
 667:common/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 668:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 739              		.loc 1 668 0
 740 0296 FB68     		ldr	r3, [r7, #12]
 741 0298 23F46053 		bic	r3, r3, #14336
 742 029c FB60     		str	r3, [r7, #12]
 669:common/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 670:common/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 743              		.loc 1 670 0
 744 029e 7B68     		ldr	r3, [r7, #4]
 745 02a0 DB00     		lsls	r3, r3, #3
 746 02a2 FA68     		ldr	r2, [r7, #12]
 747 02a4 1343     		orrs	r3, r3, r2
 748 02a6 FB60     		str	r3, [r7, #12]
 671:common/stm32f10x_rcc.c ****   /* Store the new value */
 672:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 749              		.loc 1 672 0
ARM GAS  /tmp/cccmMgvS.s 			page 26


 750 02a8 034A     		ldr	r2, .L43
 751 02aa FB68     		ldr	r3, [r7, #12]
 752 02ac 5360     		str	r3, [r2, #4]
 673:common/stm32f10x_rcc.c **** }
 753              		.loc 1 673 0
 754 02ae 00BF     		nop
 755 02b0 1437     		adds	r7, r7, #20
 756              		.cfi_def_cfa_offset 4
 757 02b2 BD46     		mov	sp, r7
 758              		.cfi_def_cfa_register 13
 759              		@ sp needed
 760 02b4 80BC     		pop	{r7}
 761              		.cfi_restore 7
 762              		.cfi_def_cfa_offset 0
 763 02b6 7047     		bx	lr
 764              	.L44:
 765              		.align	2
 766              	.L43:
 767 02b8 00100240 		.word	1073876992
 768              		.cfi_endproc
 769              	.LFE74:
 770              		.size	RCC_PCLK2Config, .-RCC_PCLK2Config
 771              		.align	1
 772              		.global	RCC_ITConfig
 773              		.syntax unified
 774              		.thumb
 775              		.thumb_func
 776              		.fpu softvfp
 777              		.type	RCC_ITConfig, %function
 778              	RCC_ITConfig:
 779              	.LFB75:
 674:common/stm32f10x_rcc.c **** 
 675:common/stm32f10x_rcc.c **** /**
 676:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 677:common/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 678:common/stm32f10x_rcc.c ****   * 
 679:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 680:common/stm32f10x_rcc.c ****   *   of the following values        
 681:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 682:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 683:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 684:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 685:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 686:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 687:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 688:common/stm32f10x_rcc.c ****   * 
 689:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 690:common/stm32f10x_rcc.c ****   *   following values        
 691:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 692:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 693:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 694:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 695:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 696:common/stm32f10x_rcc.c ****   *       
 697:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 698:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 699:common/stm32f10x_rcc.c ****   * @retval None
ARM GAS  /tmp/cccmMgvS.s 			page 27


 700:common/stm32f10x_rcc.c ****   */
 701:common/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 702:common/stm32f10x_rcc.c **** {
 780              		.loc 1 702 0
 781              		.cfi_startproc
 782              		@ args = 0, pretend = 0, frame = 8
 783              		@ frame_needed = 1, uses_anonymous_args = 0
 784              		@ link register save eliminated.
 785 02bc 80B4     		push	{r7}
 786              		.cfi_def_cfa_offset 4
 787              		.cfi_offset 7, -4
 788 02be 83B0     		sub	sp, sp, #12
 789              		.cfi_def_cfa_offset 16
 790 02c0 00AF     		add	r7, sp, #0
 791              		.cfi_def_cfa_register 7
 792 02c2 0346     		mov	r3, r0
 793 02c4 0A46     		mov	r2, r1
 794 02c6 FB71     		strb	r3, [r7, #7]
 795 02c8 1346     		mov	r3, r2
 796 02ca BB71     		strb	r3, [r7, #6]
 703:common/stm32f10x_rcc.c ****   /* Check the parameters */
 704:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 705:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 706:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 797              		.loc 1 706 0
 798 02cc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 799 02ce 002B     		cmp	r3, #0
 800 02d0 08D0     		beq	.L46
 707:common/stm32f10x_rcc.c ****   {
 708:common/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 709:common/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 801              		.loc 1 709 0
 802 02d2 0C49     		ldr	r1, .L49
 803 02d4 0B4B     		ldr	r3, .L49
 804 02d6 1B78     		ldrb	r3, [r3]
 805 02d8 DAB2     		uxtb	r2, r3
 806 02da FB79     		ldrb	r3, [r7, #7]
 807 02dc 1343     		orrs	r3, r3, r2
 808 02de DBB2     		uxtb	r3, r3
 809 02e0 0B70     		strb	r3, [r1]
 710:common/stm32f10x_rcc.c ****   }
 711:common/stm32f10x_rcc.c ****   else
 712:common/stm32f10x_rcc.c ****   {
 713:common/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 714:common/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 715:common/stm32f10x_rcc.c ****   }
 716:common/stm32f10x_rcc.c **** }
 810              		.loc 1 716 0
 811 02e2 09E0     		b	.L48
 812              	.L46:
 714:common/stm32f10x_rcc.c ****   }
 813              		.loc 1 714 0
 814 02e4 0749     		ldr	r1, .L49
 815 02e6 074B     		ldr	r3, .L49
 816 02e8 1B78     		ldrb	r3, [r3]
 817 02ea DAB2     		uxtb	r2, r3
 818 02ec FB79     		ldrb	r3, [r7, #7]
ARM GAS  /tmp/cccmMgvS.s 			page 28


 819 02ee DB43     		mvns	r3, r3
 820 02f0 DBB2     		uxtb	r3, r3
 821 02f2 1340     		ands	r3, r3, r2
 822 02f4 DBB2     		uxtb	r3, r3
 823 02f6 0B70     		strb	r3, [r1]
 824              	.L48:
 825              		.loc 1 716 0
 826 02f8 00BF     		nop
 827 02fa 0C37     		adds	r7, r7, #12
 828              		.cfi_def_cfa_offset 4
 829 02fc BD46     		mov	sp, r7
 830              		.cfi_def_cfa_register 13
 831              		@ sp needed
 832 02fe 80BC     		pop	{r7}
 833              		.cfi_restore 7
 834              		.cfi_def_cfa_offset 0
 835 0300 7047     		bx	lr
 836              	.L50:
 837 0302 00BF     		.align	2
 838              	.L49:
 839 0304 09100240 		.word	1073877001
 840              		.cfi_endproc
 841              	.LFE75:
 842              		.size	RCC_ITConfig, .-RCC_ITConfig
 843              		.align	1
 844              		.global	RCC_USBCLKConfig
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu softvfp
 849              		.type	RCC_USBCLKConfig, %function
 850              	RCC_USBCLKConfig:
 851              	.LFB76:
 717:common/stm32f10x_rcc.c **** 
 718:common/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 719:common/stm32f10x_rcc.c **** /**
 720:common/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 721:common/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 722:common/stm32f10x_rcc.c ****   *   derived from the PLL output.
 723:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 724:common/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 725:common/stm32f10x_rcc.c ****   *                                     clock source
 726:common/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 727:common/stm32f10x_rcc.c ****   * @retval None
 728:common/stm32f10x_rcc.c ****   */
 729:common/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 730:common/stm32f10x_rcc.c **** {
 852              		.loc 1 730 0
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 8
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856              		@ link register save eliminated.
 857 0308 80B4     		push	{r7}
 858              		.cfi_def_cfa_offset 4
 859              		.cfi_offset 7, -4
 860 030a 83B0     		sub	sp, sp, #12
 861              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cccmMgvS.s 			page 29


 862 030c 00AF     		add	r7, sp, #0
 863              		.cfi_def_cfa_register 7
 864 030e 7860     		str	r0, [r7, #4]
 731:common/stm32f10x_rcc.c ****   /* Check the parameters */
 732:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 733:common/stm32f10x_rcc.c **** 
 734:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 865              		.loc 1 734 0
 866 0310 034A     		ldr	r2, .L52
 867 0312 7B68     		ldr	r3, [r7, #4]
 868 0314 1360     		str	r3, [r2]
 735:common/stm32f10x_rcc.c **** }
 869              		.loc 1 735 0
 870 0316 00BF     		nop
 871 0318 0C37     		adds	r7, r7, #12
 872              		.cfi_def_cfa_offset 4
 873 031a BD46     		mov	sp, r7
 874              		.cfi_def_cfa_register 13
 875              		@ sp needed
 876 031c 80BC     		pop	{r7}
 877              		.cfi_restore 7
 878              		.cfi_def_cfa_offset 0
 879 031e 7047     		bx	lr
 880              	.L53:
 881              		.align	2
 882              	.L52:
 883 0320 D8004242 		.word	1111621848
 884              		.cfi_endproc
 885              	.LFE76:
 886              		.size	RCC_USBCLKConfig, .-RCC_USBCLKConfig
 887              		.align	1
 888              		.global	RCC_ADCCLKConfig
 889              		.syntax unified
 890              		.thumb
 891              		.thumb_func
 892              		.fpu softvfp
 893              		.type	RCC_ADCCLKConfig, %function
 894              	RCC_ADCCLKConfig:
 895              	.LFB77:
 736:common/stm32f10x_rcc.c **** #else
 737:common/stm32f10x_rcc.c **** /**
 738:common/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 739:common/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 740:common/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 741:common/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 742:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 743:common/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:common/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 745:common/stm32f10x_rcc.c ****   * @retval None
 746:common/stm32f10x_rcc.c ****   */
 747:common/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 748:common/stm32f10x_rcc.c **** {
 749:common/stm32f10x_rcc.c ****   /* Check the parameters */
 750:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 751:common/stm32f10x_rcc.c **** 
 752:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 753:common/stm32f10x_rcc.c **** }
ARM GAS  /tmp/cccmMgvS.s 			page 30


 754:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 755:common/stm32f10x_rcc.c **** 
 756:common/stm32f10x_rcc.c **** /**
 757:common/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 758:common/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 759:common/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 760:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 761:common/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 762:common/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 763:common/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 764:common/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 765:common/stm32f10x_rcc.c ****   * @retval None
 766:common/stm32f10x_rcc.c ****   */
 767:common/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 768:common/stm32f10x_rcc.c **** {
 896              		.loc 1 768 0
 897              		.cfi_startproc
 898              		@ args = 0, pretend = 0, frame = 16
 899              		@ frame_needed = 1, uses_anonymous_args = 0
 900              		@ link register save eliminated.
 901 0324 80B4     		push	{r7}
 902              		.cfi_def_cfa_offset 4
 903              		.cfi_offset 7, -4
 904 0326 85B0     		sub	sp, sp, #20
 905              		.cfi_def_cfa_offset 24
 906 0328 00AF     		add	r7, sp, #0
 907              		.cfi_def_cfa_register 7
 908 032a 7860     		str	r0, [r7, #4]
 769:common/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 909              		.loc 1 769 0
 910 032c 0023     		movs	r3, #0
 911 032e FB60     		str	r3, [r7, #12]
 770:common/stm32f10x_rcc.c ****   /* Check the parameters */
 771:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 772:common/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 912              		.loc 1 772 0
 913 0330 094B     		ldr	r3, .L55
 914 0332 5B68     		ldr	r3, [r3, #4]
 915 0334 FB60     		str	r3, [r7, #12]
 773:common/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 774:common/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 916              		.loc 1 774 0
 917 0336 FB68     		ldr	r3, [r7, #12]
 918 0338 23F44043 		bic	r3, r3, #49152
 919 033c FB60     		str	r3, [r7, #12]
 775:common/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 776:common/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 920              		.loc 1 776 0
 921 033e FA68     		ldr	r2, [r7, #12]
 922 0340 7B68     		ldr	r3, [r7, #4]
 923 0342 1343     		orrs	r3, r3, r2
 924 0344 FB60     		str	r3, [r7, #12]
 777:common/stm32f10x_rcc.c ****   /* Store the new value */
 778:common/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 925              		.loc 1 778 0
 926 0346 044A     		ldr	r2, .L55
 927 0348 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/cccmMgvS.s 			page 31


 928 034a 5360     		str	r3, [r2, #4]
 779:common/stm32f10x_rcc.c **** }
 929              		.loc 1 779 0
 930 034c 00BF     		nop
 931 034e 1437     		adds	r7, r7, #20
 932              		.cfi_def_cfa_offset 4
 933 0350 BD46     		mov	sp, r7
 934              		.cfi_def_cfa_register 13
 935              		@ sp needed
 936 0352 80BC     		pop	{r7}
 937              		.cfi_restore 7
 938              		.cfi_def_cfa_offset 0
 939 0354 7047     		bx	lr
 940              	.L56:
 941 0356 00BF     		.align	2
 942              	.L55:
 943 0358 00100240 		.word	1073876992
 944              		.cfi_endproc
 945              	.LFE77:
 946              		.size	RCC_ADCCLKConfig, .-RCC_ADCCLKConfig
 947              		.align	1
 948              		.global	RCC_LSEConfig
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 952              		.fpu softvfp
 953              		.type	RCC_LSEConfig, %function
 954              	RCC_LSEConfig:
 955              	.LFB78:
 780:common/stm32f10x_rcc.c **** 
 781:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 782:common/stm32f10x_rcc.c **** /**
 783:common/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 784:common/stm32f10x_rcc.c ****   * @note
 785:common/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 786:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 787:common/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 788:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 789:common/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 790:common/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 791:common/stm32f10x_rcc.c ****   * @retval None
 792:common/stm32f10x_rcc.c ****   */
 793:common/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 794:common/stm32f10x_rcc.c **** {
 795:common/stm32f10x_rcc.c ****   /* Check the parameters */
 796:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 797:common/stm32f10x_rcc.c **** 
 798:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 799:common/stm32f10x_rcc.c **** }
 800:common/stm32f10x_rcc.c **** 
 801:common/stm32f10x_rcc.c **** /**
 802:common/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 803:common/stm32f10x_rcc.c ****   * @note
 804:common/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 805:common/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 806:common/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 807:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
ARM GAS  /tmp/cccmMgvS.s 			page 32


 808:common/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 809:common/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 810:common/stm32f10x_rcc.c ****   * @retval None
 811:common/stm32f10x_rcc.c ****   */
 812:common/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 813:common/stm32f10x_rcc.c **** {
 814:common/stm32f10x_rcc.c ****   /* Check the parameters */
 815:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 816:common/stm32f10x_rcc.c **** 
 817:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 818:common/stm32f10x_rcc.c **** }
 819:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 820:common/stm32f10x_rcc.c **** 
 821:common/stm32f10x_rcc.c **** /**
 822:common/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 823:common/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 824:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 825:common/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 826:common/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 827:common/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 828:common/stm32f10x_rcc.c ****   * @retval None
 829:common/stm32f10x_rcc.c ****   */
 830:common/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 831:common/stm32f10x_rcc.c **** {
 956              		.loc 1 831 0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 8
 959              		@ frame_needed = 1, uses_anonymous_args = 0
 960              		@ link register save eliminated.
 961 035c 80B4     		push	{r7}
 962              		.cfi_def_cfa_offset 4
 963              		.cfi_offset 7, -4
 964 035e 83B0     		sub	sp, sp, #12
 965              		.cfi_def_cfa_offset 16
 966 0360 00AF     		add	r7, sp, #0
 967              		.cfi_def_cfa_register 7
 968 0362 0346     		mov	r3, r0
 969 0364 FB71     		strb	r3, [r7, #7]
 832:common/stm32f10x_rcc.c ****   /* Check the parameters */
 833:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 834:common/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 835:common/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 836:common/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 970              		.loc 1 836 0
 971 0366 0C4B     		ldr	r3, .L62
 972 0368 0022     		movs	r2, #0
 973 036a 1A70     		strb	r2, [r3]
 837:common/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 838:common/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 974              		.loc 1 838 0
 975 036c 0A4B     		ldr	r3, .L62
 976 036e 0022     		movs	r2, #0
 977 0370 1A70     		strb	r2, [r3]
 839:common/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 840:common/stm32f10x_rcc.c ****   switch(RCC_LSE)
 978              		.loc 1 840 0
 979 0372 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  /tmp/cccmMgvS.s 			page 33


 980 0374 012B     		cmp	r3, #1
 981 0376 02D0     		beq	.L59
 982 0378 042B     		cmp	r3, #4
 983 037a 04D0     		beq	.L60
 841:common/stm32f10x_rcc.c ****   {
 842:common/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 843:common/stm32f10x_rcc.c ****       /* Set LSEON bit */
 844:common/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 845:common/stm32f10x_rcc.c ****       break;
 846:common/stm32f10x_rcc.c ****       
 847:common/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 848:common/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 849:common/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 850:common/stm32f10x_rcc.c ****       break;            
 851:common/stm32f10x_rcc.c ****       
 852:common/stm32f10x_rcc.c ****     default:
 853:common/stm32f10x_rcc.c ****       break;      
 984              		.loc 1 853 0
 985 037c 07E0     		b	.L61
 986              	.L59:
 844:common/stm32f10x_rcc.c ****       break;
 987              		.loc 1 844 0
 988 037e 064B     		ldr	r3, .L62
 989 0380 0122     		movs	r2, #1
 990 0382 1A70     		strb	r2, [r3]
 845:common/stm32f10x_rcc.c ****       
 991              		.loc 1 845 0
 992 0384 03E0     		b	.L61
 993              	.L60:
 849:common/stm32f10x_rcc.c ****       break;            
 994              		.loc 1 849 0
 995 0386 044B     		ldr	r3, .L62
 996 0388 0522     		movs	r2, #5
 997 038a 1A70     		strb	r2, [r3]
 850:common/stm32f10x_rcc.c ****       
 998              		.loc 1 850 0
 999 038c 00BF     		nop
 1000              	.L61:
 854:common/stm32f10x_rcc.c ****   }
 855:common/stm32f10x_rcc.c **** }
 1001              		.loc 1 855 0
 1002 038e 00BF     		nop
 1003 0390 0C37     		adds	r7, r7, #12
 1004              		.cfi_def_cfa_offset 4
 1005 0392 BD46     		mov	sp, r7
 1006              		.cfi_def_cfa_register 13
 1007              		@ sp needed
 1008 0394 80BC     		pop	{r7}
 1009              		.cfi_restore 7
 1010              		.cfi_def_cfa_offset 0
 1011 0396 7047     		bx	lr
 1012              	.L63:
 1013              		.align	2
 1014              	.L62:
 1015 0398 20100240 		.word	1073877024
 1016              		.cfi_endproc
 1017              	.LFE78:
ARM GAS  /tmp/cccmMgvS.s 			page 34


 1018              		.size	RCC_LSEConfig, .-RCC_LSEConfig
 1019              		.align	1
 1020              		.global	RCC_LSICmd
 1021              		.syntax unified
 1022              		.thumb
 1023              		.thumb_func
 1024              		.fpu softvfp
 1025              		.type	RCC_LSICmd, %function
 1026              	RCC_LSICmd:
 1027              	.LFB79:
 856:common/stm32f10x_rcc.c **** 
 857:common/stm32f10x_rcc.c **** /**
 858:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 859:common/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 860:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 861:common/stm32f10x_rcc.c ****   * @retval None
 862:common/stm32f10x_rcc.c ****   */
 863:common/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 864:common/stm32f10x_rcc.c **** {
 1028              		.loc 1 864 0
 1029              		.cfi_startproc
 1030              		@ args = 0, pretend = 0, frame = 8
 1031              		@ frame_needed = 1, uses_anonymous_args = 0
 1032              		@ link register save eliminated.
 1033 039c 80B4     		push	{r7}
 1034              		.cfi_def_cfa_offset 4
 1035              		.cfi_offset 7, -4
 1036 039e 83B0     		sub	sp, sp, #12
 1037              		.cfi_def_cfa_offset 16
 1038 03a0 00AF     		add	r7, sp, #0
 1039              		.cfi_def_cfa_register 7
 1040 03a2 0346     		mov	r3, r0
 1041 03a4 FB71     		strb	r3, [r7, #7]
 865:common/stm32f10x_rcc.c ****   /* Check the parameters */
 866:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 867:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 1042              		.loc 1 867 0
 1043 03a6 044A     		ldr	r2, .L65
 1044 03a8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1045 03aa 1360     		str	r3, [r2]
 868:common/stm32f10x_rcc.c **** }
 1046              		.loc 1 868 0
 1047 03ac 00BF     		nop
 1048 03ae 0C37     		adds	r7, r7, #12
 1049              		.cfi_def_cfa_offset 4
 1050 03b0 BD46     		mov	sp, r7
 1051              		.cfi_def_cfa_register 13
 1052              		@ sp needed
 1053 03b2 80BC     		pop	{r7}
 1054              		.cfi_restore 7
 1055              		.cfi_def_cfa_offset 0
 1056 03b4 7047     		bx	lr
 1057              	.L66:
 1058 03b6 00BF     		.align	2
 1059              	.L65:
 1060 03b8 80044242 		.word	1111622784
 1061              		.cfi_endproc
ARM GAS  /tmp/cccmMgvS.s 			page 35


 1062              	.LFE79:
 1063              		.size	RCC_LSICmd, .-RCC_LSICmd
 1064              		.align	1
 1065              		.global	RCC_RTCCLKConfig
 1066              		.syntax unified
 1067              		.thumb
 1068              		.thumb_func
 1069              		.fpu softvfp
 1070              		.type	RCC_RTCCLKConfig, %function
 1071              	RCC_RTCCLKConfig:
 1072              	.LFB80:
 869:common/stm32f10x_rcc.c **** 
 870:common/stm32f10x_rcc.c **** /**
 871:common/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 872:common/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 873:common/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 874:common/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 875:common/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 876:common/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 877:common/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 878:common/stm32f10x_rcc.c ****   * @retval None
 879:common/stm32f10x_rcc.c ****   */
 880:common/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 881:common/stm32f10x_rcc.c **** {
 1073              		.loc 1 881 0
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 8
 1076              		@ frame_needed = 1, uses_anonymous_args = 0
 1077              		@ link register save eliminated.
 1078 03bc 80B4     		push	{r7}
 1079              		.cfi_def_cfa_offset 4
 1080              		.cfi_offset 7, -4
 1081 03be 83B0     		sub	sp, sp, #12
 1082              		.cfi_def_cfa_offset 16
 1083 03c0 00AF     		add	r7, sp, #0
 1084              		.cfi_def_cfa_register 7
 1085 03c2 7860     		str	r0, [r7, #4]
 882:common/stm32f10x_rcc.c ****   /* Check the parameters */
 883:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 884:common/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 885:common/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1086              		.loc 1 885 0
 1087 03c4 0549     		ldr	r1, .L68
 1088 03c6 054B     		ldr	r3, .L68
 1089 03c8 1A6A     		ldr	r2, [r3, #32]
 1090 03ca 7B68     		ldr	r3, [r7, #4]
 1091 03cc 1343     		orrs	r3, r3, r2
 1092 03ce 0B62     		str	r3, [r1, #32]
 886:common/stm32f10x_rcc.c **** }
 1093              		.loc 1 886 0
 1094 03d0 00BF     		nop
 1095 03d2 0C37     		adds	r7, r7, #12
 1096              		.cfi_def_cfa_offset 4
 1097 03d4 BD46     		mov	sp, r7
 1098              		.cfi_def_cfa_register 13
 1099              		@ sp needed
 1100 03d6 80BC     		pop	{r7}
ARM GAS  /tmp/cccmMgvS.s 			page 36


 1101              		.cfi_restore 7
 1102              		.cfi_def_cfa_offset 0
 1103 03d8 7047     		bx	lr
 1104              	.L69:
 1105 03da 00BF     		.align	2
 1106              	.L68:
 1107 03dc 00100240 		.word	1073876992
 1108              		.cfi_endproc
 1109              	.LFE80:
 1110              		.size	RCC_RTCCLKConfig, .-RCC_RTCCLKConfig
 1111              		.align	1
 1112              		.global	RCC_RTCCLKCmd
 1113              		.syntax unified
 1114              		.thumb
 1115              		.thumb_func
 1116              		.fpu softvfp
 1117              		.type	RCC_RTCCLKCmd, %function
 1118              	RCC_RTCCLKCmd:
 1119              	.LFB81:
 887:common/stm32f10x_rcc.c **** 
 888:common/stm32f10x_rcc.c **** /**
 889:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 890:common/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 891:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 892:common/stm32f10x_rcc.c ****   * @retval None
 893:common/stm32f10x_rcc.c ****   */
 894:common/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 895:common/stm32f10x_rcc.c **** {
 1120              		.loc 1 895 0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 8
 1123              		@ frame_needed = 1, uses_anonymous_args = 0
 1124              		@ link register save eliminated.
 1125 03e0 80B4     		push	{r7}
 1126              		.cfi_def_cfa_offset 4
 1127              		.cfi_offset 7, -4
 1128 03e2 83B0     		sub	sp, sp, #12
 1129              		.cfi_def_cfa_offset 16
 1130 03e4 00AF     		add	r7, sp, #0
 1131              		.cfi_def_cfa_register 7
 1132 03e6 0346     		mov	r3, r0
 1133 03e8 FB71     		strb	r3, [r7, #7]
 896:common/stm32f10x_rcc.c ****   /* Check the parameters */
 897:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 898:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1134              		.loc 1 898 0
 1135 03ea 044A     		ldr	r2, .L71
 1136 03ec FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1137 03ee 1360     		str	r3, [r2]
 899:common/stm32f10x_rcc.c **** }
 1138              		.loc 1 899 0
 1139 03f0 00BF     		nop
 1140 03f2 0C37     		adds	r7, r7, #12
 1141              		.cfi_def_cfa_offset 4
 1142 03f4 BD46     		mov	sp, r7
 1143              		.cfi_def_cfa_register 13
 1144              		@ sp needed
ARM GAS  /tmp/cccmMgvS.s 			page 37


 1145 03f6 80BC     		pop	{r7}
 1146              		.cfi_restore 7
 1147              		.cfi_def_cfa_offset 0
 1148 03f8 7047     		bx	lr
 1149              	.L72:
 1150 03fa 00BF     		.align	2
 1151              	.L71:
 1152 03fc 3C044242 		.word	1111622716
 1153              		.cfi_endproc
 1154              	.LFE81:
 1155              		.size	RCC_RTCCLKCmd, .-RCC_RTCCLKCmd
 1156              		.align	1
 1157              		.global	RCC_GetClocksFreq
 1158              		.syntax unified
 1159              		.thumb
 1160              		.thumb_func
 1161              		.fpu softvfp
 1162              		.type	RCC_GetClocksFreq, %function
 1163              	RCC_GetClocksFreq:
 1164              	.LFB82:
 900:common/stm32f10x_rcc.c **** 
 901:common/stm32f10x_rcc.c **** /**
 902:common/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 903:common/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 904:common/stm32f10x_rcc.c ****   *         the clocks frequencies.
 905:common/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 906:common/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 907:common/stm32f10x_rcc.c ****   * @retval None
 908:common/stm32f10x_rcc.c ****   */
 909:common/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 910:common/stm32f10x_rcc.c **** {
 1165              		.loc 1 910 0
 1166              		.cfi_startproc
 1167              		@ args = 0, pretend = 0, frame = 24
 1168              		@ frame_needed = 1, uses_anonymous_args = 0
 1169              		@ link register save eliminated.
 1170 0400 80B4     		push	{r7}
 1171              		.cfi_def_cfa_offset 4
 1172              		.cfi_offset 7, -4
 1173 0402 87B0     		sub	sp, sp, #28
 1174              		.cfi_def_cfa_offset 32
 1175 0404 00AF     		add	r7, sp, #0
 1176              		.cfi_def_cfa_register 7
 1177 0406 7860     		str	r0, [r7, #4]
 911:common/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 1178              		.loc 1 911 0
 1179 0408 0023     		movs	r3, #0
 1180 040a 7B61     		str	r3, [r7, #20]
 1181 040c 0023     		movs	r3, #0
 1182 040e 3B61     		str	r3, [r7, #16]
 1183 0410 0023     		movs	r3, #0
 1184 0412 FB60     		str	r3, [r7, #12]
 1185 0414 0023     		movs	r3, #0
 1186 0416 BB60     		str	r3, [r7, #8]
 912:common/stm32f10x_rcc.c **** 
 913:common/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 914:common/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
ARM GAS  /tmp/cccmMgvS.s 			page 38


 915:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 916:common/stm32f10x_rcc.c **** 
 917:common/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 918:common/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 919:common/stm32f10x_rcc.c **** #endif
 920:common/stm32f10x_rcc.c ****     
 921:common/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 922:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 1187              		.loc 1 922 0
 1188 0418 4C4B     		ldr	r3, .L83
 1189 041a 5B68     		ldr	r3, [r3, #4]
 1190 041c 03F00C03 		and	r3, r3, #12
 1191 0420 7B61     		str	r3, [r7, #20]
 923:common/stm32f10x_rcc.c ****   
 924:common/stm32f10x_rcc.c ****   switch (tmp)
 1192              		.loc 1 924 0
 1193 0422 7B69     		ldr	r3, [r7, #20]
 1194 0424 042B     		cmp	r3, #4
 1195 0426 07D0     		beq	.L75
 1196 0428 082B     		cmp	r3, #8
 1197 042a 09D0     		beq	.L76
 1198 042c 002B     		cmp	r3, #0
 1199 042e 33D1     		bne	.L82
 925:common/stm32f10x_rcc.c ****   {
 926:common/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 927:common/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1200              		.loc 1 927 0
 1201 0430 7B68     		ldr	r3, [r7, #4]
 1202 0432 474A     		ldr	r2, .L83+4
 1203 0434 1A60     		str	r2, [r3]
 928:common/stm32f10x_rcc.c ****       break;
 1204              		.loc 1 928 0
 1205 0436 33E0     		b	.L78
 1206              	.L75:
 929:common/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 930:common/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1207              		.loc 1 930 0
 1208 0438 7B68     		ldr	r3, [r7, #4]
 1209 043a 454A     		ldr	r2, .L83+4
 1210 043c 1A60     		str	r2, [r3]
 931:common/stm32f10x_rcc.c ****       break;
 1211              		.loc 1 931 0
 1212 043e 2FE0     		b	.L78
 1213              	.L76:
 932:common/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 933:common/stm32f10x_rcc.c **** 
 934:common/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 935:common/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 1214              		.loc 1 935 0
 1215 0440 424B     		ldr	r3, .L83
 1216 0442 5B68     		ldr	r3, [r3, #4]
 1217 0444 03F47013 		and	r3, r3, #3932160
 1218 0448 3B61     		str	r3, [r7, #16]
 936:common/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 1219              		.loc 1 936 0
 1220 044a 404B     		ldr	r3, .L83
 1221 044c 5B68     		ldr	r3, [r3, #4]
ARM GAS  /tmp/cccmMgvS.s 			page 39


 1222 044e 03F48033 		and	r3, r3, #65536
 1223 0452 FB60     		str	r3, [r7, #12]
 937:common/stm32f10x_rcc.c ****       
 938:common/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 939:common/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 1224              		.loc 1 939 0
 1225 0454 3B69     		ldr	r3, [r7, #16]
 1226 0456 9B0C     		lsrs	r3, r3, #18
 1227 0458 0233     		adds	r3, r3, #2
 1228 045a 3B61     		str	r3, [r7, #16]
 940:common/stm32f10x_rcc.c ****       
 941:common/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 1229              		.loc 1 941 0
 1230 045c FB68     		ldr	r3, [r7, #12]
 1231 045e 002B     		cmp	r3, #0
 1232 0460 06D1     		bne	.L79
 942:common/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 943:common/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 1233              		.loc 1 943 0
 1234 0462 3B69     		ldr	r3, [r7, #16]
 1235 0464 3B4A     		ldr	r2, .L83+8
 1236 0466 02FB03F2 		mul	r2, r2, r3
 1237 046a 7B68     		ldr	r3, [r7, #4]
 1238 046c 1A60     		str	r2, [r3]
 944:common/stm32f10x_rcc.c ****       }
 945:common/stm32f10x_rcc.c ****       else
 946:common/stm32f10x_rcc.c ****       {
 947:common/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 948:common/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 949:common/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 950:common/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 951:common/stm32f10x_rcc.c ****  #else
 952:common/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 953:common/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 954:common/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 955:common/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 956:common/stm32f10x_rcc.c ****         }
 957:common/stm32f10x_rcc.c ****         else
 958:common/stm32f10x_rcc.c ****         {
 959:common/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 960:common/stm32f10x_rcc.c ****         }
 961:common/stm32f10x_rcc.c ****  #endif
 962:common/stm32f10x_rcc.c ****       }
 963:common/stm32f10x_rcc.c **** #else
 964:common/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 965:common/stm32f10x_rcc.c ****       
 966:common/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 967:common/stm32f10x_rcc.c ****       {
 968:common/stm32f10x_rcc.c ****          pllmull += 2;
 969:common/stm32f10x_rcc.c ****       }
 970:common/stm32f10x_rcc.c ****       else
 971:common/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 972:common/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 973:common/stm32f10x_rcc.c ****       }
 974:common/stm32f10x_rcc.c ****             
 975:common/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 976:common/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
ARM GAS  /tmp/cccmMgvS.s 			page 40


 977:common/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 978:common/stm32f10x_rcc.c ****       }
 979:common/stm32f10x_rcc.c ****       else
 980:common/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 981:common/stm32f10x_rcc.c ****         
 982:common/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 983:common/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 984:common/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 985:common/stm32f10x_rcc.c ****         
 986:common/stm32f10x_rcc.c ****         if (prediv1source == 0)
 987:common/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 988:common/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 989:common/stm32f10x_rcc.c ****         }
 990:common/stm32f10x_rcc.c ****         else
 991:common/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 992:common/stm32f10x_rcc.c ****           
 993:common/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 994:common/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 995:common/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 996:common/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 997:common/stm32f10x_rcc.c ****         }
 998:common/stm32f10x_rcc.c ****       }
 999:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1000:common/stm32f10x_rcc.c ****       break;
 1239              		.loc 1 1000 0
 1240 046e 17E0     		b	.L78
 1241              	.L79:
 953:common/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 1242              		.loc 1 953 0
 1243 0470 364B     		ldr	r3, .L83
 1244 0472 5B68     		ldr	r3, [r3, #4]
 1245 0474 03F40033 		and	r3, r3, #131072
 1246 0478 002B     		cmp	r3, #0
 1247 047a 06D0     		beq	.L81
 955:common/stm32f10x_rcc.c ****         }
 1248              		.loc 1 955 0
 1249 047c 3B69     		ldr	r3, [r7, #16]
 1250 047e 354A     		ldr	r2, .L83+8
 1251 0480 02FB03F2 		mul	r2, r2, r3
 1252 0484 7B68     		ldr	r3, [r7, #4]
 1253 0486 1A60     		str	r2, [r3]
 1254              		.loc 1 1000 0
 1255 0488 0AE0     		b	.L78
 1256              	.L81:
 959:common/stm32f10x_rcc.c ****         }
 1257              		.loc 1 959 0
 1258 048a 3B69     		ldr	r3, [r7, #16]
 1259 048c 304A     		ldr	r2, .L83+4
 1260 048e 02FB03F2 		mul	r2, r2, r3
 1261 0492 7B68     		ldr	r3, [r7, #4]
 1262 0494 1A60     		str	r2, [r3]
 1263              		.loc 1 1000 0
 1264 0496 03E0     		b	.L78
 1265              	.L82:
1001:common/stm32f10x_rcc.c **** 
1002:common/stm32f10x_rcc.c ****     default:
1003:common/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
ARM GAS  /tmp/cccmMgvS.s 			page 41


 1266              		.loc 1 1003 0
 1267 0498 7B68     		ldr	r3, [r7, #4]
 1268 049a 2D4A     		ldr	r2, .L83+4
 1269 049c 1A60     		str	r2, [r3]
1004:common/stm32f10x_rcc.c ****       break;
 1270              		.loc 1 1004 0
 1271 049e 00BF     		nop
 1272              	.L78:
1005:common/stm32f10x_rcc.c ****   }
1006:common/stm32f10x_rcc.c **** 
1007:common/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1008:common/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1009:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 1273              		.loc 1 1009 0
 1274 04a0 2A4B     		ldr	r3, .L83
 1275 04a2 5B68     		ldr	r3, [r3, #4]
 1276 04a4 03F0F003 		and	r3, r3, #240
 1277 04a8 7B61     		str	r3, [r7, #20]
1010:common/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 1278              		.loc 1 1010 0
 1279 04aa 7B69     		ldr	r3, [r7, #20]
 1280 04ac 1B09     		lsrs	r3, r3, #4
 1281 04ae 7B61     		str	r3, [r7, #20]
1011:common/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1282              		.loc 1 1011 0
 1283 04b0 294A     		ldr	r2, .L83+12
 1284 04b2 7B69     		ldr	r3, [r7, #20]
 1285 04b4 1344     		add	r3, r3, r2
 1286 04b6 1B78     		ldrb	r3, [r3]
 1287 04b8 DBB2     		uxtb	r3, r3
 1288 04ba BB60     		str	r3, [r7, #8]
1012:common/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1013:common/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1289              		.loc 1 1013 0
 1290 04bc 7B68     		ldr	r3, [r7, #4]
 1291 04be 1A68     		ldr	r2, [r3]
 1292 04c0 BB68     		ldr	r3, [r7, #8]
 1293 04c2 DA40     		lsrs	r2, r2, r3
 1294 04c4 7B68     		ldr	r3, [r7, #4]
 1295 04c6 5A60     		str	r2, [r3, #4]
1014:common/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1015:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 1296              		.loc 1 1015 0
 1297 04c8 204B     		ldr	r3, .L83
 1298 04ca 5B68     		ldr	r3, [r3, #4]
 1299 04cc 03F4E063 		and	r3, r3, #1792
 1300 04d0 7B61     		str	r3, [r7, #20]
1016:common/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 1301              		.loc 1 1016 0
 1302 04d2 7B69     		ldr	r3, [r7, #20]
 1303 04d4 1B0A     		lsrs	r3, r3, #8
 1304 04d6 7B61     		str	r3, [r7, #20]
1017:common/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1305              		.loc 1 1017 0
 1306 04d8 1F4A     		ldr	r2, .L83+12
 1307 04da 7B69     		ldr	r3, [r7, #20]
 1308 04dc 1344     		add	r3, r3, r2
ARM GAS  /tmp/cccmMgvS.s 			page 42


 1309 04de 1B78     		ldrb	r3, [r3]
 1310 04e0 DBB2     		uxtb	r3, r3
 1311 04e2 BB60     		str	r3, [r7, #8]
1018:common/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1019:common/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1312              		.loc 1 1019 0
 1313 04e4 7B68     		ldr	r3, [r7, #4]
 1314 04e6 5A68     		ldr	r2, [r3, #4]
 1315 04e8 BB68     		ldr	r3, [r7, #8]
 1316 04ea DA40     		lsrs	r2, r2, r3
 1317 04ec 7B68     		ldr	r3, [r7, #4]
 1318 04ee 9A60     		str	r2, [r3, #8]
1020:common/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1021:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 1319              		.loc 1 1021 0
 1320 04f0 164B     		ldr	r3, .L83
 1321 04f2 5B68     		ldr	r3, [r3, #4]
 1322 04f4 03F46053 		and	r3, r3, #14336
 1323 04f8 7B61     		str	r3, [r7, #20]
1022:common/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 1324              		.loc 1 1022 0
 1325 04fa 7B69     		ldr	r3, [r7, #20]
 1326 04fc DB0A     		lsrs	r3, r3, #11
 1327 04fe 7B61     		str	r3, [r7, #20]
1023:common/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1328              		.loc 1 1023 0
 1329 0500 154A     		ldr	r2, .L83+12
 1330 0502 7B69     		ldr	r3, [r7, #20]
 1331 0504 1344     		add	r3, r3, r2
 1332 0506 1B78     		ldrb	r3, [r3]
 1333 0508 DBB2     		uxtb	r3, r3
 1334 050a BB60     		str	r3, [r7, #8]
1024:common/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1025:common/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1335              		.loc 1 1025 0
 1336 050c 7B68     		ldr	r3, [r7, #4]
 1337 050e 5A68     		ldr	r2, [r3, #4]
 1338 0510 BB68     		ldr	r3, [r7, #8]
 1339 0512 DA40     		lsrs	r2, r2, r3
 1340 0514 7B68     		ldr	r3, [r7, #4]
 1341 0516 DA60     		str	r2, [r3, #12]
1026:common/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1027:common/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 1342              		.loc 1 1027 0
 1343 0518 0C4B     		ldr	r3, .L83
 1344 051a 5B68     		ldr	r3, [r3, #4]
 1345 051c 03F44043 		and	r3, r3, #49152
 1346 0520 7B61     		str	r3, [r7, #20]
1028:common/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 1347              		.loc 1 1028 0
 1348 0522 7B69     		ldr	r3, [r7, #20]
 1349 0524 9B0B     		lsrs	r3, r3, #14
 1350 0526 7B61     		str	r3, [r7, #20]
1029:common/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 1351              		.loc 1 1029 0
 1352 0528 0C4A     		ldr	r2, .L83+16
 1353 052a 7B69     		ldr	r3, [r7, #20]
ARM GAS  /tmp/cccmMgvS.s 			page 43


 1354 052c 1344     		add	r3, r3, r2
 1355 052e 1B78     		ldrb	r3, [r3]
 1356 0530 DBB2     		uxtb	r3, r3
 1357 0532 BB60     		str	r3, [r7, #8]
1030:common/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1031:common/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 1358              		.loc 1 1031 0
 1359 0534 7B68     		ldr	r3, [r7, #4]
 1360 0536 DA68     		ldr	r2, [r3, #12]
 1361 0538 BB68     		ldr	r3, [r7, #8]
 1362 053a B2FBF3F2 		udiv	r2, r2, r3
 1363 053e 7B68     		ldr	r3, [r7, #4]
 1364 0540 1A61     		str	r2, [r3, #16]
1032:common/stm32f10x_rcc.c **** }
 1365              		.loc 1 1032 0
 1366 0542 00BF     		nop
 1367 0544 1C37     		adds	r7, r7, #28
 1368              		.cfi_def_cfa_offset 4
 1369 0546 BD46     		mov	sp, r7
 1370              		.cfi_def_cfa_register 13
 1371              		@ sp needed
 1372 0548 80BC     		pop	{r7}
 1373              		.cfi_restore 7
 1374              		.cfi_def_cfa_offset 0
 1375 054a 7047     		bx	lr
 1376              	.L84:
 1377              		.align	2
 1378              	.L83:
 1379 054c 00100240 		.word	1073876992
 1380 0550 00127A00 		.word	8000000
 1381 0554 00093D00 		.word	4000000
 1382 0558 00000000 		.word	APBAHBPrescTable
 1383 055c 10000000 		.word	ADCPrescTable
 1384              		.cfi_endproc
 1385              	.LFE82:
 1386              		.size	RCC_GetClocksFreq, .-RCC_GetClocksFreq
 1387              		.align	1
 1388              		.global	RCC_AHBPeriphClockCmd
 1389              		.syntax unified
 1390              		.thumb
 1391              		.thumb_func
 1392              		.fpu softvfp
 1393              		.type	RCC_AHBPeriphClockCmd, %function
 1394              	RCC_AHBPeriphClockCmd:
 1395              	.LFB83:
1033:common/stm32f10x_rcc.c **** 
1034:common/stm32f10x_rcc.c **** /**
1035:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1036:common/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1037:common/stm32f10x_rcc.c ****   *   
1038:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1039:common/stm32f10x_rcc.c ****   *   of the following values:        
1040:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1041:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1042:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1043:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1044:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
ARM GAS  /tmp/cccmMgvS.s 			page 44


1045:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1046:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1047:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1048:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1049:common/stm32f10x_rcc.c ****   * 
1050:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1051:common/stm32f10x_rcc.c ****   *   following values:        
1052:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1053:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1054:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1055:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1056:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1057:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1058:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1059:common/stm32f10x_rcc.c ****   *   
1060:common/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1061:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1062:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1063:common/stm32f10x_rcc.c ****   * @retval None
1064:common/stm32f10x_rcc.c ****   */
1065:common/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1066:common/stm32f10x_rcc.c **** {
 1396              		.loc 1 1066 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 8
 1399              		@ frame_needed = 1, uses_anonymous_args = 0
 1400              		@ link register save eliminated.
 1401 0560 80B4     		push	{r7}
 1402              		.cfi_def_cfa_offset 4
 1403              		.cfi_offset 7, -4
 1404 0562 83B0     		sub	sp, sp, #12
 1405              		.cfi_def_cfa_offset 16
 1406 0564 00AF     		add	r7, sp, #0
 1407              		.cfi_def_cfa_register 7
 1408 0566 7860     		str	r0, [r7, #4]
 1409 0568 0B46     		mov	r3, r1
 1410 056a FB70     		strb	r3, [r7, #3]
1067:common/stm32f10x_rcc.c ****   /* Check the parameters */
1068:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1069:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1070:common/stm32f10x_rcc.c **** 
1071:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1411              		.loc 1 1071 0
 1412 056c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1413 056e 002B     		cmp	r3, #0
 1414 0570 06D0     		beq	.L86
1072:common/stm32f10x_rcc.c ****   {
1073:common/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1415              		.loc 1 1073 0
 1416 0572 0949     		ldr	r1, .L89
 1417 0574 084B     		ldr	r3, .L89
 1418 0576 5A69     		ldr	r2, [r3, #20]
 1419 0578 7B68     		ldr	r3, [r7, #4]
 1420 057a 1343     		orrs	r3, r3, r2
 1421 057c 4B61     		str	r3, [r1, #20]
1074:common/stm32f10x_rcc.c ****   }
1075:common/stm32f10x_rcc.c ****   else
ARM GAS  /tmp/cccmMgvS.s 			page 45


1076:common/stm32f10x_rcc.c ****   {
1077:common/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
1078:common/stm32f10x_rcc.c ****   }
1079:common/stm32f10x_rcc.c **** }
 1422              		.loc 1 1079 0
 1423 057e 06E0     		b	.L88
 1424              	.L86:
1077:common/stm32f10x_rcc.c ****   }
 1425              		.loc 1 1077 0
 1426 0580 0549     		ldr	r1, .L89
 1427 0582 054B     		ldr	r3, .L89
 1428 0584 5A69     		ldr	r2, [r3, #20]
 1429 0586 7B68     		ldr	r3, [r7, #4]
 1430 0588 DB43     		mvns	r3, r3
 1431 058a 1340     		ands	r3, r3, r2
 1432 058c 4B61     		str	r3, [r1, #20]
 1433              	.L88:
 1434              		.loc 1 1079 0
 1435 058e 00BF     		nop
 1436 0590 0C37     		adds	r7, r7, #12
 1437              		.cfi_def_cfa_offset 4
 1438 0592 BD46     		mov	sp, r7
 1439              		.cfi_def_cfa_register 13
 1440              		@ sp needed
 1441 0594 80BC     		pop	{r7}
 1442              		.cfi_restore 7
 1443              		.cfi_def_cfa_offset 0
 1444 0596 7047     		bx	lr
 1445              	.L90:
 1446              		.align	2
 1447              	.L89:
 1448 0598 00100240 		.word	1073876992
 1449              		.cfi_endproc
 1450              	.LFE83:
 1451              		.size	RCC_AHBPeriphClockCmd, .-RCC_AHBPeriphClockCmd
 1452              		.align	1
 1453              		.global	RCC_APB2PeriphClockCmd
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1457              		.fpu softvfp
 1458              		.type	RCC_APB2PeriphClockCmd, %function
 1459              	RCC_APB2PeriphClockCmd:
 1460              	.LFB84:
1080:common/stm32f10x_rcc.c **** 
1081:common/stm32f10x_rcc.c **** /**
1082:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1083:common/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1084:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1085:common/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1086:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1087:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1088:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1089:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1090:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1091:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1092:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
ARM GAS  /tmp/cccmMgvS.s 			page 46


1093:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1094:common/stm32f10x_rcc.c ****   * @retval None
1095:common/stm32f10x_rcc.c ****   */
1096:common/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1097:common/stm32f10x_rcc.c **** {
 1461              		.loc 1 1097 0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 8
 1464              		@ frame_needed = 1, uses_anonymous_args = 0
 1465              		@ link register save eliminated.
 1466 059c 80B4     		push	{r7}
 1467              		.cfi_def_cfa_offset 4
 1468              		.cfi_offset 7, -4
 1469 059e 83B0     		sub	sp, sp, #12
 1470              		.cfi_def_cfa_offset 16
 1471 05a0 00AF     		add	r7, sp, #0
 1472              		.cfi_def_cfa_register 7
 1473 05a2 7860     		str	r0, [r7, #4]
 1474 05a4 0B46     		mov	r3, r1
 1475 05a6 FB70     		strb	r3, [r7, #3]
1098:common/stm32f10x_rcc.c ****   /* Check the parameters */
1099:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1100:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1101:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1476              		.loc 1 1101 0
 1477 05a8 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1478 05aa 002B     		cmp	r3, #0
 1479 05ac 06D0     		beq	.L92
1102:common/stm32f10x_rcc.c ****   {
1103:common/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1480              		.loc 1 1103 0
 1481 05ae 0949     		ldr	r1, .L95
 1482 05b0 084B     		ldr	r3, .L95
 1483 05b2 9A69     		ldr	r2, [r3, #24]
 1484 05b4 7B68     		ldr	r3, [r7, #4]
 1485 05b6 1343     		orrs	r3, r3, r2
 1486 05b8 8B61     		str	r3, [r1, #24]
1104:common/stm32f10x_rcc.c ****   }
1105:common/stm32f10x_rcc.c ****   else
1106:common/stm32f10x_rcc.c ****   {
1107:common/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
1108:common/stm32f10x_rcc.c ****   }
1109:common/stm32f10x_rcc.c **** }
 1487              		.loc 1 1109 0
 1488 05ba 06E0     		b	.L94
 1489              	.L92:
1107:common/stm32f10x_rcc.c ****   }
 1490              		.loc 1 1107 0
 1491 05bc 0549     		ldr	r1, .L95
 1492 05be 054B     		ldr	r3, .L95
 1493 05c0 9A69     		ldr	r2, [r3, #24]
 1494 05c2 7B68     		ldr	r3, [r7, #4]
 1495 05c4 DB43     		mvns	r3, r3
 1496 05c6 1340     		ands	r3, r3, r2
 1497 05c8 8B61     		str	r3, [r1, #24]
 1498              	.L94:
 1499              		.loc 1 1109 0
ARM GAS  /tmp/cccmMgvS.s 			page 47


 1500 05ca 00BF     		nop
 1501 05cc 0C37     		adds	r7, r7, #12
 1502              		.cfi_def_cfa_offset 4
 1503 05ce BD46     		mov	sp, r7
 1504              		.cfi_def_cfa_register 13
 1505              		@ sp needed
 1506 05d0 80BC     		pop	{r7}
 1507              		.cfi_restore 7
 1508              		.cfi_def_cfa_offset 0
 1509 05d2 7047     		bx	lr
 1510              	.L96:
 1511              		.align	2
 1512              	.L95:
 1513 05d4 00100240 		.word	1073876992
 1514              		.cfi_endproc
 1515              	.LFE84:
 1516              		.size	RCC_APB2PeriphClockCmd, .-RCC_APB2PeriphClockCmd
 1517              		.align	1
 1518              		.global	RCC_APB1PeriphClockCmd
 1519              		.syntax unified
 1520              		.thumb
 1521              		.thumb_func
 1522              		.fpu softvfp
 1523              		.type	RCC_APB1PeriphClockCmd, %function
 1524              	RCC_APB1PeriphClockCmd:
 1525              	.LFB85:
1110:common/stm32f10x_rcc.c **** 
1111:common/stm32f10x_rcc.c **** /**
1112:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1113:common/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1114:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1115:common/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1116:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1117:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1118:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1119:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1120:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1121:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1122:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1123:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1124:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1125:common/stm32f10x_rcc.c ****   * @retval None
1126:common/stm32f10x_rcc.c ****   */
1127:common/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1128:common/stm32f10x_rcc.c **** {
 1526              		.loc 1 1128 0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 8
 1529              		@ frame_needed = 1, uses_anonymous_args = 0
 1530              		@ link register save eliminated.
 1531 05d8 80B4     		push	{r7}
 1532              		.cfi_def_cfa_offset 4
 1533              		.cfi_offset 7, -4
 1534 05da 83B0     		sub	sp, sp, #12
 1535              		.cfi_def_cfa_offset 16
 1536 05dc 00AF     		add	r7, sp, #0
 1537              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cccmMgvS.s 			page 48


 1538 05de 7860     		str	r0, [r7, #4]
 1539 05e0 0B46     		mov	r3, r1
 1540 05e2 FB70     		strb	r3, [r7, #3]
1129:common/stm32f10x_rcc.c ****   /* Check the parameters */
1130:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1131:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1132:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1541              		.loc 1 1132 0
 1542 05e4 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1543 05e6 002B     		cmp	r3, #0
 1544 05e8 06D0     		beq	.L98
1133:common/stm32f10x_rcc.c ****   {
1134:common/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1545              		.loc 1 1134 0
 1546 05ea 0949     		ldr	r1, .L101
 1547 05ec 084B     		ldr	r3, .L101
 1548 05ee DA69     		ldr	r2, [r3, #28]
 1549 05f0 7B68     		ldr	r3, [r7, #4]
 1550 05f2 1343     		orrs	r3, r3, r2
 1551 05f4 CB61     		str	r3, [r1, #28]
1135:common/stm32f10x_rcc.c ****   }
1136:common/stm32f10x_rcc.c ****   else
1137:common/stm32f10x_rcc.c ****   {
1138:common/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
1139:common/stm32f10x_rcc.c ****   }
1140:common/stm32f10x_rcc.c **** }
 1552              		.loc 1 1140 0
 1553 05f6 06E0     		b	.L100
 1554              	.L98:
1138:common/stm32f10x_rcc.c ****   }
 1555              		.loc 1 1138 0
 1556 05f8 0549     		ldr	r1, .L101
 1557 05fa 054B     		ldr	r3, .L101
 1558 05fc DA69     		ldr	r2, [r3, #28]
 1559 05fe 7B68     		ldr	r3, [r7, #4]
 1560 0600 DB43     		mvns	r3, r3
 1561 0602 1340     		ands	r3, r3, r2
 1562 0604 CB61     		str	r3, [r1, #28]
 1563              	.L100:
 1564              		.loc 1 1140 0
 1565 0606 00BF     		nop
 1566 0608 0C37     		adds	r7, r7, #12
 1567              		.cfi_def_cfa_offset 4
 1568 060a BD46     		mov	sp, r7
 1569              		.cfi_def_cfa_register 13
 1570              		@ sp needed
 1571 060c 80BC     		pop	{r7}
 1572              		.cfi_restore 7
 1573              		.cfi_def_cfa_offset 0
 1574 060e 7047     		bx	lr
 1575              	.L102:
 1576              		.align	2
 1577              	.L101:
 1578 0610 00100240 		.word	1073876992
 1579              		.cfi_endproc
 1580              	.LFE85:
 1581              		.size	RCC_APB1PeriphClockCmd, .-RCC_APB1PeriphClockCmd
ARM GAS  /tmp/cccmMgvS.s 			page 49


 1582              		.align	1
 1583              		.global	RCC_APB2PeriphResetCmd
 1584              		.syntax unified
 1585              		.thumb
 1586              		.thumb_func
 1587              		.fpu softvfp
 1588              		.type	RCC_APB2PeriphResetCmd, %function
 1589              	RCC_APB2PeriphResetCmd:
 1590              	.LFB86:
1141:common/stm32f10x_rcc.c **** 
1142:common/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1143:common/stm32f10x_rcc.c **** /**
1144:common/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1145:common/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1146:common/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1147:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1148:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1149:common/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1150:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1151:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1152:common/stm32f10x_rcc.c ****   * @retval None
1153:common/stm32f10x_rcc.c ****   */
1154:common/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1155:common/stm32f10x_rcc.c **** {
1156:common/stm32f10x_rcc.c ****   /* Check the parameters */
1157:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1158:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1159:common/stm32f10x_rcc.c **** 
1160:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
1161:common/stm32f10x_rcc.c ****   {
1162:common/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
1163:common/stm32f10x_rcc.c ****   }
1164:common/stm32f10x_rcc.c ****   else
1165:common/stm32f10x_rcc.c ****   {
1166:common/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
1167:common/stm32f10x_rcc.c ****   }
1168:common/stm32f10x_rcc.c **** }
1169:common/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1170:common/stm32f10x_rcc.c **** 
1171:common/stm32f10x_rcc.c **** /**
1172:common/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1173:common/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1174:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1175:common/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1176:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1177:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1178:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1179:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1180:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1181:common/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1182:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1183:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1184:common/stm32f10x_rcc.c ****   * @retval None
1185:common/stm32f10x_rcc.c ****   */
1186:common/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1187:common/stm32f10x_rcc.c **** {
 1591              		.loc 1 1187 0
ARM GAS  /tmp/cccmMgvS.s 			page 50


 1592              		.cfi_startproc
 1593              		@ args = 0, pretend = 0, frame = 8
 1594              		@ frame_needed = 1, uses_anonymous_args = 0
 1595              		@ link register save eliminated.
 1596 0614 80B4     		push	{r7}
 1597              		.cfi_def_cfa_offset 4
 1598              		.cfi_offset 7, -4
 1599 0616 83B0     		sub	sp, sp, #12
 1600              		.cfi_def_cfa_offset 16
 1601 0618 00AF     		add	r7, sp, #0
 1602              		.cfi_def_cfa_register 7
 1603 061a 7860     		str	r0, [r7, #4]
 1604 061c 0B46     		mov	r3, r1
 1605 061e FB70     		strb	r3, [r7, #3]
1188:common/stm32f10x_rcc.c ****   /* Check the parameters */
1189:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1190:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1191:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1606              		.loc 1 1191 0
 1607 0620 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1608 0622 002B     		cmp	r3, #0
 1609 0624 06D0     		beq	.L104
1192:common/stm32f10x_rcc.c ****   {
1193:common/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 1610              		.loc 1 1193 0
 1611 0626 0949     		ldr	r1, .L107
 1612 0628 084B     		ldr	r3, .L107
 1613 062a DA68     		ldr	r2, [r3, #12]
 1614 062c 7B68     		ldr	r3, [r7, #4]
 1615 062e 1343     		orrs	r3, r3, r2
 1616 0630 CB60     		str	r3, [r1, #12]
1194:common/stm32f10x_rcc.c ****   }
1195:common/stm32f10x_rcc.c ****   else
1196:common/stm32f10x_rcc.c ****   {
1197:common/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
1198:common/stm32f10x_rcc.c ****   }
1199:common/stm32f10x_rcc.c **** }
 1617              		.loc 1 1199 0
 1618 0632 06E0     		b	.L106
 1619              	.L104:
1197:common/stm32f10x_rcc.c ****   }
 1620              		.loc 1 1197 0
 1621 0634 0549     		ldr	r1, .L107
 1622 0636 054B     		ldr	r3, .L107
 1623 0638 DA68     		ldr	r2, [r3, #12]
 1624 063a 7B68     		ldr	r3, [r7, #4]
 1625 063c DB43     		mvns	r3, r3
 1626 063e 1340     		ands	r3, r3, r2
 1627 0640 CB60     		str	r3, [r1, #12]
 1628              	.L106:
 1629              		.loc 1 1199 0
 1630 0642 00BF     		nop
 1631 0644 0C37     		adds	r7, r7, #12
 1632              		.cfi_def_cfa_offset 4
 1633 0646 BD46     		mov	sp, r7
 1634              		.cfi_def_cfa_register 13
 1635              		@ sp needed
ARM GAS  /tmp/cccmMgvS.s 			page 51


 1636 0648 80BC     		pop	{r7}
 1637              		.cfi_restore 7
 1638              		.cfi_def_cfa_offset 0
 1639 064a 7047     		bx	lr
 1640              	.L108:
 1641              		.align	2
 1642              	.L107:
 1643 064c 00100240 		.word	1073876992
 1644              		.cfi_endproc
 1645              	.LFE86:
 1646              		.size	RCC_APB2PeriphResetCmd, .-RCC_APB2PeriphResetCmd
 1647              		.align	1
 1648              		.global	RCC_APB1PeriphResetCmd
 1649              		.syntax unified
 1650              		.thumb
 1651              		.thumb_func
 1652              		.fpu softvfp
 1653              		.type	RCC_APB1PeriphResetCmd, %function
 1654              	RCC_APB1PeriphResetCmd:
 1655              	.LFB87:
1200:common/stm32f10x_rcc.c **** 
1201:common/stm32f10x_rcc.c **** /**
1202:common/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1203:common/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1204:common/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1205:common/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1206:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1207:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1208:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1209:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1210:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1211:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1212:common/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1213:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1214:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1215:common/stm32f10x_rcc.c ****   * @retval None
1216:common/stm32f10x_rcc.c ****   */
1217:common/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1218:common/stm32f10x_rcc.c **** {
 1656              		.loc 1 1218 0
 1657              		.cfi_startproc
 1658              		@ args = 0, pretend = 0, frame = 8
 1659              		@ frame_needed = 1, uses_anonymous_args = 0
 1660              		@ link register save eliminated.
 1661 0650 80B4     		push	{r7}
 1662              		.cfi_def_cfa_offset 4
 1663              		.cfi_offset 7, -4
 1664 0652 83B0     		sub	sp, sp, #12
 1665              		.cfi_def_cfa_offset 16
 1666 0654 00AF     		add	r7, sp, #0
 1667              		.cfi_def_cfa_register 7
 1668 0656 7860     		str	r0, [r7, #4]
 1669 0658 0B46     		mov	r3, r1
 1670 065a FB70     		strb	r3, [r7, #3]
1219:common/stm32f10x_rcc.c ****   /* Check the parameters */
1220:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1221:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
ARM GAS  /tmp/cccmMgvS.s 			page 52


1222:common/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1671              		.loc 1 1222 0
 1672 065c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1673 065e 002B     		cmp	r3, #0
 1674 0660 06D0     		beq	.L110
1223:common/stm32f10x_rcc.c ****   {
1224:common/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 1675              		.loc 1 1224 0
 1676 0662 0949     		ldr	r1, .L113
 1677 0664 084B     		ldr	r3, .L113
 1678 0666 1A69     		ldr	r2, [r3, #16]
 1679 0668 7B68     		ldr	r3, [r7, #4]
 1680 066a 1343     		orrs	r3, r3, r2
 1681 066c 0B61     		str	r3, [r1, #16]
1225:common/stm32f10x_rcc.c ****   }
1226:common/stm32f10x_rcc.c ****   else
1227:common/stm32f10x_rcc.c ****   {
1228:common/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
1229:common/stm32f10x_rcc.c ****   }
1230:common/stm32f10x_rcc.c **** }
 1682              		.loc 1 1230 0
 1683 066e 06E0     		b	.L112
 1684              	.L110:
1228:common/stm32f10x_rcc.c ****   }
 1685              		.loc 1 1228 0
 1686 0670 0549     		ldr	r1, .L113
 1687 0672 054B     		ldr	r3, .L113
 1688 0674 1A69     		ldr	r2, [r3, #16]
 1689 0676 7B68     		ldr	r3, [r7, #4]
 1690 0678 DB43     		mvns	r3, r3
 1691 067a 1340     		ands	r3, r3, r2
 1692 067c 0B61     		str	r3, [r1, #16]
 1693              	.L112:
 1694              		.loc 1 1230 0
 1695 067e 00BF     		nop
 1696 0680 0C37     		adds	r7, r7, #12
 1697              		.cfi_def_cfa_offset 4
 1698 0682 BD46     		mov	sp, r7
 1699              		.cfi_def_cfa_register 13
 1700              		@ sp needed
 1701 0684 80BC     		pop	{r7}
 1702              		.cfi_restore 7
 1703              		.cfi_def_cfa_offset 0
 1704 0686 7047     		bx	lr
 1705              	.L114:
 1706              		.align	2
 1707              	.L113:
 1708 0688 00100240 		.word	1073876992
 1709              		.cfi_endproc
 1710              	.LFE87:
 1711              		.size	RCC_APB1PeriphResetCmd, .-RCC_APB1PeriphResetCmd
 1712              		.align	1
 1713              		.global	RCC_BackupResetCmd
 1714              		.syntax unified
 1715              		.thumb
 1716              		.thumb_func
 1717              		.fpu softvfp
ARM GAS  /tmp/cccmMgvS.s 			page 53


 1718              		.type	RCC_BackupResetCmd, %function
 1719              	RCC_BackupResetCmd:
 1720              	.LFB88:
1231:common/stm32f10x_rcc.c **** 
1232:common/stm32f10x_rcc.c **** /**
1233:common/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1234:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1235:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1236:common/stm32f10x_rcc.c ****   * @retval None
1237:common/stm32f10x_rcc.c ****   */
1238:common/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1239:common/stm32f10x_rcc.c **** {
 1721              		.loc 1 1239 0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 8
 1724              		@ frame_needed = 1, uses_anonymous_args = 0
 1725              		@ link register save eliminated.
 1726 068c 80B4     		push	{r7}
 1727              		.cfi_def_cfa_offset 4
 1728              		.cfi_offset 7, -4
 1729 068e 83B0     		sub	sp, sp, #12
 1730              		.cfi_def_cfa_offset 16
 1731 0690 00AF     		add	r7, sp, #0
 1732              		.cfi_def_cfa_register 7
 1733 0692 0346     		mov	r3, r0
 1734 0694 FB71     		strb	r3, [r7, #7]
1240:common/stm32f10x_rcc.c ****   /* Check the parameters */
1241:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1242:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 1735              		.loc 1 1242 0
 1736 0696 044A     		ldr	r2, .L116
 1737 0698 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1738 069a 1360     		str	r3, [r2]
1243:common/stm32f10x_rcc.c **** }
 1739              		.loc 1 1243 0
 1740 069c 00BF     		nop
 1741 069e 0C37     		adds	r7, r7, #12
 1742              		.cfi_def_cfa_offset 4
 1743 06a0 BD46     		mov	sp, r7
 1744              		.cfi_def_cfa_register 13
 1745              		@ sp needed
 1746 06a2 80BC     		pop	{r7}
 1747              		.cfi_restore 7
 1748              		.cfi_def_cfa_offset 0
 1749 06a4 7047     		bx	lr
 1750              	.L117:
 1751 06a6 00BF     		.align	2
 1752              	.L116:
 1753 06a8 40044242 		.word	1111622720
 1754              		.cfi_endproc
 1755              	.LFE88:
 1756              		.size	RCC_BackupResetCmd, .-RCC_BackupResetCmd
 1757              		.align	1
 1758              		.global	RCC_ClockSecuritySystemCmd
 1759              		.syntax unified
 1760              		.thumb
 1761              		.thumb_func
ARM GAS  /tmp/cccmMgvS.s 			page 54


 1762              		.fpu softvfp
 1763              		.type	RCC_ClockSecuritySystemCmd, %function
 1764              	RCC_ClockSecuritySystemCmd:
 1765              	.LFB89:
1244:common/stm32f10x_rcc.c **** 
1245:common/stm32f10x_rcc.c **** /**
1246:common/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1247:common/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1248:common/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1249:common/stm32f10x_rcc.c ****   * @retval None
1250:common/stm32f10x_rcc.c ****   */
1251:common/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1252:common/stm32f10x_rcc.c **** {
 1766              		.loc 1 1252 0
 1767              		.cfi_startproc
 1768              		@ args = 0, pretend = 0, frame = 8
 1769              		@ frame_needed = 1, uses_anonymous_args = 0
 1770              		@ link register save eliminated.
 1771 06ac 80B4     		push	{r7}
 1772              		.cfi_def_cfa_offset 4
 1773              		.cfi_offset 7, -4
 1774 06ae 83B0     		sub	sp, sp, #12
 1775              		.cfi_def_cfa_offset 16
 1776 06b0 00AF     		add	r7, sp, #0
 1777              		.cfi_def_cfa_register 7
 1778 06b2 0346     		mov	r3, r0
 1779 06b4 FB71     		strb	r3, [r7, #7]
1253:common/stm32f10x_rcc.c ****   /* Check the parameters */
1254:common/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1255:common/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 1780              		.loc 1 1255 0
 1781 06b6 044A     		ldr	r2, .L119
 1782 06b8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1783 06ba 1360     		str	r3, [r2]
1256:common/stm32f10x_rcc.c **** }
 1784              		.loc 1 1256 0
 1785 06bc 00BF     		nop
 1786 06be 0C37     		adds	r7, r7, #12
 1787              		.cfi_def_cfa_offset 4
 1788 06c0 BD46     		mov	sp, r7
 1789              		.cfi_def_cfa_register 13
 1790              		@ sp needed
 1791 06c2 80BC     		pop	{r7}
 1792              		.cfi_restore 7
 1793              		.cfi_def_cfa_offset 0
 1794 06c4 7047     		bx	lr
 1795              	.L120:
 1796 06c6 00BF     		.align	2
 1797              	.L119:
 1798 06c8 4C004242 		.word	1111621708
 1799              		.cfi_endproc
 1800              	.LFE89:
 1801              		.size	RCC_ClockSecuritySystemCmd, .-RCC_ClockSecuritySystemCmd
 1802              		.align	1
 1803              		.global	RCC_MCOConfig
 1804              		.syntax unified
 1805              		.thumb
ARM GAS  /tmp/cccmMgvS.s 			page 55


 1806              		.thumb_func
 1807              		.fpu softvfp
 1808              		.type	RCC_MCOConfig, %function
 1809              	RCC_MCOConfig:
 1810              	.LFB90:
1257:common/stm32f10x_rcc.c **** 
1258:common/stm32f10x_rcc.c **** /**
1259:common/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1260:common/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1261:common/stm32f10x_rcc.c ****   *   
1262:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1263:common/stm32f10x_rcc.c ****   *   following values:       
1264:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1265:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1266:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1267:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1268:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1269:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1270:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1271:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1272:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1273:common/stm32f10x_rcc.c ****   * 
1274:common/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1275:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1276:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1277:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1278:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1279:common/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1280:common/stm32f10x_rcc.c ****   *   
1281:common/stm32f10x_rcc.c ****   * @retval None
1282:common/stm32f10x_rcc.c ****   */
1283:common/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1284:common/stm32f10x_rcc.c **** {
 1811              		.loc 1 1284 0
 1812              		.cfi_startproc
 1813              		@ args = 0, pretend = 0, frame = 8
 1814              		@ frame_needed = 1, uses_anonymous_args = 0
 1815              		@ link register save eliminated.
 1816 06cc 80B4     		push	{r7}
 1817              		.cfi_def_cfa_offset 4
 1818              		.cfi_offset 7, -4
 1819 06ce 83B0     		sub	sp, sp, #12
 1820              		.cfi_def_cfa_offset 16
 1821 06d0 00AF     		add	r7, sp, #0
 1822              		.cfi_def_cfa_register 7
 1823 06d2 0346     		mov	r3, r0
 1824 06d4 FB71     		strb	r3, [r7, #7]
1285:common/stm32f10x_rcc.c ****   /* Check the parameters */
1286:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1287:common/stm32f10x_rcc.c **** 
1288:common/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1289:common/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 1825              		.loc 1 1289 0
 1826 06d6 044A     		ldr	r2, .L122
 1827 06d8 FB79     		ldrb	r3, [r7, #7]
 1828 06da 1370     		strb	r3, [r2]
1290:common/stm32f10x_rcc.c **** }
ARM GAS  /tmp/cccmMgvS.s 			page 56


 1829              		.loc 1 1290 0
 1830 06dc 00BF     		nop
 1831 06de 0C37     		adds	r7, r7, #12
 1832              		.cfi_def_cfa_offset 4
 1833 06e0 BD46     		mov	sp, r7
 1834              		.cfi_def_cfa_register 13
 1835              		@ sp needed
 1836 06e2 80BC     		pop	{r7}
 1837              		.cfi_restore 7
 1838              		.cfi_def_cfa_offset 0
 1839 06e4 7047     		bx	lr
 1840              	.L123:
 1841 06e6 00BF     		.align	2
 1842              	.L122:
 1843 06e8 07100240 		.word	1073876999
 1844              		.cfi_endproc
 1845              	.LFE90:
 1846              		.size	RCC_MCOConfig, .-RCC_MCOConfig
 1847              		.align	1
 1848              		.global	RCC_GetFlagStatus
 1849              		.syntax unified
 1850              		.thumb
 1851              		.thumb_func
 1852              		.fpu softvfp
 1853              		.type	RCC_GetFlagStatus, %function
 1854              	RCC_GetFlagStatus:
 1855              	.LFB91:
1291:common/stm32f10x_rcc.c **** 
1292:common/stm32f10x_rcc.c **** /**
1293:common/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1294:common/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1295:common/stm32f10x_rcc.c ****   *   
1296:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1297:common/stm32f10x_rcc.c ****   *   following values:
1298:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1299:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1300:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1301:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1302:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1303:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1304:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1305:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1306:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1307:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1308:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1309:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1310:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1311:common/stm32f10x_rcc.c ****   * 
1312:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1313:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1314:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1315:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1316:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1317:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1318:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1319:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1320:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
ARM GAS  /tmp/cccmMgvS.s 			page 57


1321:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1322:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1323:common/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1324:common/stm32f10x_rcc.c ****   *   
1325:common/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1326:common/stm32f10x_rcc.c ****   */
1327:common/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1328:common/stm32f10x_rcc.c **** {
 1856              		.loc 1 1328 0
 1857              		.cfi_startproc
 1858              		@ args = 0, pretend = 0, frame = 24
 1859              		@ frame_needed = 1, uses_anonymous_args = 0
 1860              		@ link register save eliminated.
 1861 06ec 80B4     		push	{r7}
 1862              		.cfi_def_cfa_offset 4
 1863              		.cfi_offset 7, -4
 1864 06ee 87B0     		sub	sp, sp, #28
 1865              		.cfi_def_cfa_offset 32
 1866 06f0 00AF     		add	r7, sp, #0
 1867              		.cfi_def_cfa_register 7
 1868 06f2 0346     		mov	r3, r0
 1869 06f4 FB71     		strb	r3, [r7, #7]
1329:common/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 1870              		.loc 1 1329 0
 1871 06f6 0023     		movs	r3, #0
 1872 06f8 FB60     		str	r3, [r7, #12]
1330:common/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 1873              		.loc 1 1330 0
 1874 06fa 0023     		movs	r3, #0
 1875 06fc 7B61     		str	r3, [r7, #20]
1331:common/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 1876              		.loc 1 1331 0
 1877 06fe 0023     		movs	r3, #0
 1878 0700 FB74     		strb	r3, [r7, #19]
1332:common/stm32f10x_rcc.c ****   /* Check the parameters */
1333:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1334:common/stm32f10x_rcc.c **** 
1335:common/stm32f10x_rcc.c ****   /* Get the RCC register index */
1336:common/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 1879              		.loc 1 1336 0
 1880 0702 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1881 0704 5B09     		lsrs	r3, r3, #5
 1882 0706 DBB2     		uxtb	r3, r3
 1883 0708 FB60     		str	r3, [r7, #12]
1337:common/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 1884              		.loc 1 1337 0
 1885 070a FB68     		ldr	r3, [r7, #12]
 1886 070c 012B     		cmp	r3, #1
 1887 070e 03D1     		bne	.L125
1338:common/stm32f10x_rcc.c ****   {
1339:common/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 1888              		.loc 1 1339 0
 1889 0710 124B     		ldr	r3, .L131
 1890 0712 1B68     		ldr	r3, [r3]
 1891 0714 7B61     		str	r3, [r7, #20]
 1892 0716 09E0     		b	.L126
 1893              	.L125:
ARM GAS  /tmp/cccmMgvS.s 			page 58


1340:common/stm32f10x_rcc.c ****   }
1341:common/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 1894              		.loc 1 1341 0
 1895 0718 FB68     		ldr	r3, [r7, #12]
 1896 071a 022B     		cmp	r3, #2
 1897 071c 03D1     		bne	.L127
1342:common/stm32f10x_rcc.c ****   {
1343:common/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 1898              		.loc 1 1343 0
 1899 071e 0F4B     		ldr	r3, .L131
 1900 0720 1B6A     		ldr	r3, [r3, #32]
 1901 0722 7B61     		str	r3, [r7, #20]
 1902 0724 02E0     		b	.L126
 1903              	.L127:
1344:common/stm32f10x_rcc.c ****   }
1345:common/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1346:common/stm32f10x_rcc.c ****   {
1347:common/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 1904              		.loc 1 1347 0
 1905 0726 0D4B     		ldr	r3, .L131
 1906 0728 5B6A     		ldr	r3, [r3, #36]
 1907 072a 7B61     		str	r3, [r7, #20]
 1908              	.L126:
1348:common/stm32f10x_rcc.c ****   }
1349:common/stm32f10x_rcc.c **** 
1350:common/stm32f10x_rcc.c ****   /* Get the flag position */
1351:common/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 1909              		.loc 1 1351 0
 1910 072c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1911 072e 03F01F03 		and	r3, r3, #31
 1912 0732 FB60     		str	r3, [r7, #12]
1352:common/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 1913              		.loc 1 1352 0
 1914 0734 7A69     		ldr	r2, [r7, #20]
 1915 0736 FB68     		ldr	r3, [r7, #12]
 1916 0738 22FA03F3 		lsr	r3, r2, r3
 1917 073c 03F00103 		and	r3, r3, #1
 1918 0740 002B     		cmp	r3, #0
 1919 0742 02D0     		beq	.L128
1353:common/stm32f10x_rcc.c ****   {
1354:common/stm32f10x_rcc.c ****     bitstatus = SET;
 1920              		.loc 1 1354 0
 1921 0744 0123     		movs	r3, #1
 1922 0746 FB74     		strb	r3, [r7, #19]
 1923 0748 01E0     		b	.L129
 1924              	.L128:
1355:common/stm32f10x_rcc.c ****   }
1356:common/stm32f10x_rcc.c ****   else
1357:common/stm32f10x_rcc.c ****   {
1358:common/stm32f10x_rcc.c ****     bitstatus = RESET;
 1925              		.loc 1 1358 0
 1926 074a 0023     		movs	r3, #0
 1927 074c FB74     		strb	r3, [r7, #19]
 1928              	.L129:
1359:common/stm32f10x_rcc.c ****   }
1360:common/stm32f10x_rcc.c **** 
1361:common/stm32f10x_rcc.c ****   /* Return the flag status */
ARM GAS  /tmp/cccmMgvS.s 			page 59


1362:common/stm32f10x_rcc.c ****   return bitstatus;
 1929              		.loc 1 1362 0
 1930 074e FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1363:common/stm32f10x_rcc.c **** }
 1931              		.loc 1 1363 0
 1932 0750 1846     		mov	r0, r3
 1933 0752 1C37     		adds	r7, r7, #28
 1934              		.cfi_def_cfa_offset 4
 1935 0754 BD46     		mov	sp, r7
 1936              		.cfi_def_cfa_register 13
 1937              		@ sp needed
 1938 0756 80BC     		pop	{r7}
 1939              		.cfi_restore 7
 1940              		.cfi_def_cfa_offset 0
 1941 0758 7047     		bx	lr
 1942              	.L132:
 1943 075a 00BF     		.align	2
 1944              	.L131:
 1945 075c 00100240 		.word	1073876992
 1946              		.cfi_endproc
 1947              	.LFE91:
 1948              		.size	RCC_GetFlagStatus, .-RCC_GetFlagStatus
 1949              		.align	1
 1950              		.global	RCC_ClearFlag
 1951              		.syntax unified
 1952              		.thumb
 1953              		.thumb_func
 1954              		.fpu softvfp
 1955              		.type	RCC_ClearFlag, %function
 1956              	RCC_ClearFlag:
 1957              	.LFB92:
1364:common/stm32f10x_rcc.c **** 
1365:common/stm32f10x_rcc.c **** /**
1366:common/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1367:common/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1368:common/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1369:common/stm32f10x_rcc.c ****   * @param  None
1370:common/stm32f10x_rcc.c ****   * @retval None
1371:common/stm32f10x_rcc.c ****   */
1372:common/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1373:common/stm32f10x_rcc.c **** {
 1958              		.loc 1 1373 0
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 0
 1961              		@ frame_needed = 1, uses_anonymous_args = 0
 1962              		@ link register save eliminated.
 1963 0760 80B4     		push	{r7}
 1964              		.cfi_def_cfa_offset 4
 1965              		.cfi_offset 7, -4
 1966 0762 00AF     		add	r7, sp, #0
 1967              		.cfi_def_cfa_register 7
1374:common/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1375:common/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 1968              		.loc 1 1375 0
 1969 0764 044A     		ldr	r2, .L134
 1970 0766 044B     		ldr	r3, .L134
 1971 0768 5B6A     		ldr	r3, [r3, #36]
ARM GAS  /tmp/cccmMgvS.s 			page 60


 1972 076a 43F08073 		orr	r3, r3, #16777216
 1973 076e 5362     		str	r3, [r2, #36]
1376:common/stm32f10x_rcc.c **** }
 1974              		.loc 1 1376 0
 1975 0770 00BF     		nop
 1976 0772 BD46     		mov	sp, r7
 1977              		.cfi_def_cfa_register 13
 1978              		@ sp needed
 1979 0774 80BC     		pop	{r7}
 1980              		.cfi_restore 7
 1981              		.cfi_def_cfa_offset 0
 1982 0776 7047     		bx	lr
 1983              	.L135:
 1984              		.align	2
 1985              	.L134:
 1986 0778 00100240 		.word	1073876992
 1987              		.cfi_endproc
 1988              	.LFE92:
 1989              		.size	RCC_ClearFlag, .-RCC_ClearFlag
 1990              		.align	1
 1991              		.global	RCC_GetITStatus
 1992              		.syntax unified
 1993              		.thumb
 1994              		.thumb_func
 1995              		.fpu softvfp
 1996              		.type	RCC_GetITStatus, %function
 1997              	RCC_GetITStatus:
 1998              	.LFB93:
1377:common/stm32f10x_rcc.c **** 
1378:common/stm32f10x_rcc.c **** /**
1379:common/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1380:common/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1381:common/stm32f10x_rcc.c ****   *   
1382:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1383:common/stm32f10x_rcc.c ****   *   following values:
1384:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1385:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1386:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1387:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1388:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1389:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1390:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1391:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1392:common/stm32f10x_rcc.c ****   * 
1393:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1394:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1395:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1396:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1397:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1398:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1399:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1400:common/stm32f10x_rcc.c ****   *   
1401:common/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1402:common/stm32f10x_rcc.c ****   */
1403:common/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1404:common/stm32f10x_rcc.c **** {
 1999              		.loc 1 1404 0
ARM GAS  /tmp/cccmMgvS.s 			page 61


 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 16
 2002              		@ frame_needed = 1, uses_anonymous_args = 0
 2003              		@ link register save eliminated.
 2004 077c 80B4     		push	{r7}
 2005              		.cfi_def_cfa_offset 4
 2006              		.cfi_offset 7, -4
 2007 077e 85B0     		sub	sp, sp, #20
 2008              		.cfi_def_cfa_offset 24
 2009 0780 00AF     		add	r7, sp, #0
 2010              		.cfi_def_cfa_register 7
 2011 0782 0346     		mov	r3, r0
 2012 0784 FB71     		strb	r3, [r7, #7]
1405:common/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 2013              		.loc 1 1405 0
 2014 0786 0023     		movs	r3, #0
 2015 0788 FB73     		strb	r3, [r7, #15]
1406:common/stm32f10x_rcc.c ****   /* Check the parameters */
1407:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1408:common/stm32f10x_rcc.c **** 
1409:common/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1410:common/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2016              		.loc 1 1410 0
 2017 078a 084B     		ldr	r3, .L140
 2018 078c 9A68     		ldr	r2, [r3, #8]
 2019 078e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2020 0790 1340     		ands	r3, r3, r2
 2021 0792 002B     		cmp	r3, #0
 2022 0794 02D0     		beq	.L137
1411:common/stm32f10x_rcc.c ****   {
1412:common/stm32f10x_rcc.c ****     bitstatus = SET;
 2023              		.loc 1 1412 0
 2024 0796 0123     		movs	r3, #1
 2025 0798 FB73     		strb	r3, [r7, #15]
 2026 079a 01E0     		b	.L138
 2027              	.L137:
1413:common/stm32f10x_rcc.c ****   }
1414:common/stm32f10x_rcc.c ****   else
1415:common/stm32f10x_rcc.c ****   {
1416:common/stm32f10x_rcc.c ****     bitstatus = RESET;
 2028              		.loc 1 1416 0
 2029 079c 0023     		movs	r3, #0
 2030 079e FB73     		strb	r3, [r7, #15]
 2031              	.L138:
1417:common/stm32f10x_rcc.c ****   }
1418:common/stm32f10x_rcc.c **** 
1419:common/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1420:common/stm32f10x_rcc.c ****   return  bitstatus;
 2032              		.loc 1 1420 0
 2033 07a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1421:common/stm32f10x_rcc.c **** }
 2034              		.loc 1 1421 0
 2035 07a2 1846     		mov	r0, r3
 2036 07a4 1437     		adds	r7, r7, #20
 2037              		.cfi_def_cfa_offset 4
 2038 07a6 BD46     		mov	sp, r7
 2039              		.cfi_def_cfa_register 13
ARM GAS  /tmp/cccmMgvS.s 			page 62


 2040              		@ sp needed
 2041 07a8 80BC     		pop	{r7}
 2042              		.cfi_restore 7
 2043              		.cfi_def_cfa_offset 0
 2044 07aa 7047     		bx	lr
 2045              	.L141:
 2046              		.align	2
 2047              	.L140:
 2048 07ac 00100240 		.word	1073876992
 2049              		.cfi_endproc
 2050              	.LFE93:
 2051              		.size	RCC_GetITStatus, .-RCC_GetITStatus
 2052              		.align	1
 2053              		.global	RCC_ClearITPendingBit
 2054              		.syntax unified
 2055              		.thumb
 2056              		.thumb_func
 2057              		.fpu softvfp
 2058              		.type	RCC_ClearITPendingBit, %function
 2059              	RCC_ClearITPendingBit:
 2060              	.LFB94:
1422:common/stm32f10x_rcc.c **** 
1423:common/stm32f10x_rcc.c **** /**
1424:common/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1425:common/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1426:common/stm32f10x_rcc.c ****   *   
1427:common/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1428:common/stm32f10x_rcc.c ****   *   of the following values:
1429:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1430:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1431:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1432:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1433:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1434:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1435:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1436:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1437:common/stm32f10x_rcc.c ****   * 
1438:common/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1439:common/stm32f10x_rcc.c ****   *   following values:        
1440:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1441:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1442:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1443:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1444:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1445:common/stm32f10x_rcc.c ****   *   
1446:common/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1447:common/stm32f10x_rcc.c ****   * @retval None
1448:common/stm32f10x_rcc.c ****   */
1449:common/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1450:common/stm32f10x_rcc.c **** {
 2061              		.loc 1 1450 0
 2062              		.cfi_startproc
 2063              		@ args = 0, pretend = 0, frame = 8
 2064              		@ frame_needed = 1, uses_anonymous_args = 0
 2065              		@ link register save eliminated.
 2066 07b0 80B4     		push	{r7}
 2067              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cccmMgvS.s 			page 63


 2068              		.cfi_offset 7, -4
 2069 07b2 83B0     		sub	sp, sp, #12
 2070              		.cfi_def_cfa_offset 16
 2071 07b4 00AF     		add	r7, sp, #0
 2072              		.cfi_def_cfa_register 7
 2073 07b6 0346     		mov	r3, r0
 2074 07b8 FB71     		strb	r3, [r7, #7]
1451:common/stm32f10x_rcc.c ****   /* Check the parameters */
1452:common/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1453:common/stm32f10x_rcc.c **** 
1454:common/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1455:common/stm32f10x_rcc.c ****      pending bits */
1456:common/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2075              		.loc 1 1456 0
 2076 07ba 044A     		ldr	r2, .L143
 2077 07bc FB79     		ldrb	r3, [r7, #7]
 2078 07be 1370     		strb	r3, [r2]
1457:common/stm32f10x_rcc.c **** }
 2079              		.loc 1 1457 0
 2080 07c0 00BF     		nop
 2081 07c2 0C37     		adds	r7, r7, #12
 2082              		.cfi_def_cfa_offset 4
 2083 07c4 BD46     		mov	sp, r7
 2084              		.cfi_def_cfa_register 13
 2085              		@ sp needed
 2086 07c6 80BC     		pop	{r7}
 2087              		.cfi_restore 7
 2088              		.cfi_def_cfa_offset 0
 2089 07c8 7047     		bx	lr
 2090              	.L144:
 2091 07ca 00BF     		.align	2
 2092              	.L143:
 2093 07cc 0A100240 		.word	1073877002
 2094              		.cfi_endproc
 2095              	.LFE94:
 2096              		.size	RCC_ClearITPendingBit, .-RCC_ClearITPendingBit
 2097              	.Letext0:
 2098              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 2099              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 2100              		.file 4 "common/../include/STM32/../CMSIS/core_cm3.h"
 2101              		.file 5 "common/../include/STM32/system_stm32f10x.h"
 2102              		.file 6 "common/../include/STM32/stm32f10x.h"
 2103              		.file 7 "common/../include/STM32/rcc.h"
 2104              		.file 8 "common/../src/../include/MPU6050/mpu6050.h"
 2105              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 2106              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 2107              		.file 11 "/usr/lib/gcc/arm-none-eabi/6.1.1/include/stddef.h"
 2108              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 2109              		.file 13 "/usr/arm-none-eabi/include/math.h"
 2110              		.section	.debug_info,"",%progbits
 2111              	.Ldebug_info0:
 2112 0000 97110000 		.4byte	0x1197
 2113 0004 0400     		.2byte	0x4
 2114 0006 00000000 		.4byte	.Ldebug_abbrev0
 2115 000a 04       		.byte	0x4
 2116 000b 01       		.uleb128 0x1
 2117 000c 27090000 		.4byte	.LASF231
ARM GAS  /tmp/cccmMgvS.s 			page 64


 2118 0010 0C       		.byte	0xc
 2119 0011 88040000 		.4byte	.LASF232
 2120 0015 4C020000 		.4byte	.LASF233
 2121 0019 00000000 		.4byte	.Ltext0
 2122 001d D0070000 		.4byte	.Letext0-.Ltext0
 2123 0021 00000000 		.4byte	.Ldebug_line0
 2124 0025 02       		.uleb128 0x2
 2125 0026 01       		.byte	0x1
 2126 0027 06       		.byte	0x6
 2127 0028 AB010000 		.4byte	.LASF0
 2128 002c 03       		.uleb128 0x3
 2129 002d 8F000000 		.4byte	.LASF2
 2130 0031 02       		.byte	0x2
 2131 0032 1D       		.byte	0x1d
 2132 0033 37000000 		.4byte	0x37
 2133 0037 02       		.uleb128 0x2
 2134 0038 01       		.byte	0x1
 2135 0039 08       		.byte	0x8
 2136 003a 4E060000 		.4byte	.LASF1
 2137 003e 03       		.uleb128 0x3
 2138 003f CE090000 		.4byte	.LASF3
 2139 0043 02       		.byte	0x2
 2140 0044 29       		.byte	0x29
 2141 0045 49000000 		.4byte	0x49
 2142 0049 02       		.uleb128 0x2
 2143 004a 02       		.byte	0x2
 2144 004b 05       		.byte	0x5
 2145 004c 27080000 		.4byte	.LASF4
 2146 0050 03       		.uleb128 0x3
 2147 0051 11080000 		.4byte	.LASF5
 2148 0055 02       		.byte	0x2
 2149 0056 2B       		.byte	0x2b
 2150 0057 5B000000 		.4byte	0x5b
 2151 005b 02       		.uleb128 0x2
 2152 005c 02       		.byte	0x2
 2153 005d 07       		.byte	0x7
 2154 005e 85080000 		.4byte	.LASF6
 2155 0062 03       		.uleb128 0x3
 2156 0063 31080000 		.4byte	.LASF7
 2157 0067 02       		.byte	0x2
 2158 0068 3F       		.byte	0x3f
 2159 0069 6D000000 		.4byte	0x6d
 2160 006d 02       		.uleb128 0x2
 2161 006e 04       		.byte	0x4
 2162 006f 05       		.byte	0x5
 2163 0070 33020000 		.4byte	.LASF8
 2164 0074 03       		.uleb128 0x3
 2165 0075 68030000 		.4byte	.LASF9
 2166 0079 02       		.byte	0x2
 2167 007a 41       		.byte	0x41
 2168 007b 7F000000 		.4byte	0x7f
 2169 007f 02       		.uleb128 0x2
 2170 0080 04       		.byte	0x4
 2171 0081 07       		.byte	0x7
 2172 0082 24040000 		.4byte	.LASF10
 2173 0086 02       		.uleb128 0x2
 2174 0087 08       		.byte	0x8
ARM GAS  /tmp/cccmMgvS.s 			page 65


 2175 0088 05       		.byte	0x5
 2176 0089 BD020000 		.4byte	.LASF11
 2177 008d 02       		.uleb128 0x2
 2178 008e 08       		.byte	0x8
 2179 008f 07       		.byte	0x7
 2180 0090 0A010000 		.4byte	.LASF12
 2181 0094 04       		.uleb128 0x4
 2182 0095 04       		.byte	0x4
 2183 0096 05       		.byte	0x5
 2184 0097 696E7400 		.ascii	"int\000"
 2185 009b 02       		.uleb128 0x2
 2186 009c 04       		.byte	0x4
 2187 009d 07       		.byte	0x7
 2188 009e 04080000 		.4byte	.LASF13
 2189 00a2 03       		.uleb128 0x3
 2190 00a3 9C090000 		.4byte	.LASF14
 2191 00a7 03       		.byte	0x3
 2192 00a8 18       		.byte	0x18
 2193 00a9 2C000000 		.4byte	0x2c
 2194 00ad 05       		.uleb128 0x5
 2195 00ae A2000000 		.4byte	0xa2
 2196 00b2 06       		.uleb128 0x6
 2197 00b3 AD000000 		.4byte	0xad
 2198 00b7 03       		.uleb128 0x3
 2199 00b8 95010000 		.4byte	.LASF15
 2200 00bc 03       		.byte	0x3
 2201 00bd 20       		.byte	0x20
 2202 00be 3E000000 		.4byte	0x3e
 2203 00c2 03       		.uleb128 0x3
 2204 00c3 D8040000 		.4byte	.LASF16
 2205 00c7 03       		.byte	0x3
 2206 00c8 24       		.byte	0x24
 2207 00c9 50000000 		.4byte	0x50
 2208 00cd 03       		.uleb128 0x3
 2209 00ce 46060000 		.4byte	.LASF17
 2210 00d2 03       		.byte	0x3
 2211 00d3 2C       		.byte	0x2c
 2212 00d4 62000000 		.4byte	0x62
 2213 00d8 06       		.uleb128 0x6
 2214 00d9 CD000000 		.4byte	0xcd
 2215 00dd 03       		.uleb128 0x3
 2216 00de 39010000 		.4byte	.LASF18
 2217 00e2 03       		.byte	0x3
 2218 00e3 30       		.byte	0x30
 2219 00e4 74000000 		.4byte	0x74
 2220 00e8 06       		.uleb128 0x6
 2221 00e9 DD000000 		.4byte	0xdd
 2222 00ed 02       		.uleb128 0x2
 2223 00ee 04       		.byte	0x4
 2224 00ef 07       		.byte	0x7
 2225 00f0 33050000 		.4byte	.LASF19
 2226 00f4 07       		.uleb128 0x7
 2227 00f5 42010000 		.4byte	.LASF20
 2228 00f9 04       		.byte	0x4
 2229 00fa 9606     		.2byte	0x696
 2230 00fc D8000000 		.4byte	0xd8
 2231 0100 08       		.uleb128 0x8
ARM GAS  /tmp/cccmMgvS.s 			page 66


 2232 0101 F5050000 		.4byte	.LASF21
 2233 0105 05       		.byte	0x5
 2234 0106 35       		.byte	0x35
 2235 0107 DD000000 		.4byte	0xdd
 2236 010b 09       		.uleb128 0x9
 2237 010c 01       		.byte	0x1
 2238 010d 37000000 		.4byte	0x37
 2239 0111 06       		.byte	0x6
 2240 0112 9001     		.2byte	0x190
 2241 0114 25010000 		.4byte	0x125
 2242 0118 0A       		.uleb128 0xa
 2243 0119 32060000 		.4byte	.LASF22
 2244 011d 00       		.byte	0
 2245 011e 0B       		.uleb128 0xb
 2246 011f 53455400 		.ascii	"SET\000"
 2247 0123 01       		.byte	0x1
 2248 0124 00       		.byte	0
 2249 0125 0C       		.uleb128 0xc
 2250 0126 62000000 		.4byte	.LASF23
 2251 012a 06       		.byte	0x6
 2252 012b 9001     		.2byte	0x190
 2253 012d 0B010000 		.4byte	0x10b
 2254 0131 0C       		.uleb128 0xc
 2255 0132 F2030000 		.4byte	.LASF24
 2256 0136 06       		.byte	0x6
 2257 0137 9001     		.2byte	0x190
 2258 0139 0B010000 		.4byte	0x10b
 2259 013d 09       		.uleb128 0x9
 2260 013e 01       		.byte	0x1
 2261 013f 37000000 		.4byte	0x37
 2262 0143 06       		.byte	0x6
 2263 0144 9201     		.2byte	0x192
 2264 0146 57010000 		.4byte	0x157
 2265 014a 0A       		.uleb128 0xa
 2266 014b 00040000 		.4byte	.LASF25
 2267 014f 00       		.byte	0
 2268 0150 0A       		.uleb128 0xa
 2269 0151 3C020000 		.4byte	.LASF26
 2270 0155 01       		.byte	0x1
 2271 0156 00       		.byte	0
 2272 0157 0C       		.uleb128 0xc
 2273 0158 8A050000 		.4byte	.LASF27
 2274 015c 06       		.byte	0x6
 2275 015d 9201     		.2byte	0x192
 2276 015f 3D010000 		.4byte	0x13d
 2277 0163 09       		.uleb128 0x9
 2278 0164 01       		.byte	0x1
 2279 0165 37000000 		.4byte	0x37
 2280 0169 06       		.byte	0x6
 2281 016a 9501     		.2byte	0x195
 2282 016c 7D010000 		.4byte	0x17d
 2283 0170 0A       		.uleb128 0xa
 2284 0171 3C050000 		.4byte	.LASF28
 2285 0175 00       		.byte	0
 2286 0176 0A       		.uleb128 0xa
 2287 0177 AE090000 		.4byte	.LASF29
 2288 017b 01       		.byte	0x1
ARM GAS  /tmp/cccmMgvS.s 			page 67


 2289 017c 00       		.byte	0
 2290 017d 0C       		.uleb128 0xc
 2291 017e 73030000 		.4byte	.LASF30
 2292 0182 06       		.byte	0x6
 2293 0183 9501     		.2byte	0x195
 2294 0185 63010000 		.4byte	0x163
 2295 0189 0D       		.uleb128 0xd
 2296 018a 28       		.byte	0x28
 2297 018b 06       		.byte	0x6
 2298 018c BD03     		.2byte	0x3bd
 2299 018e 14020000 		.4byte	0x214
 2300 0192 0E       		.uleb128 0xe
 2301 0193 435200   		.ascii	"CR\000"
 2302 0196 06       		.byte	0x6
 2303 0197 BF03     		.2byte	0x3bf
 2304 0199 E8000000 		.4byte	0xe8
 2305 019d 00       		.byte	0
 2306 019e 0F       		.uleb128 0xf
 2307 019f 0F040000 		.4byte	.LASF31
 2308 01a3 06       		.byte	0x6
 2309 01a4 C003     		.2byte	0x3c0
 2310 01a6 E8000000 		.4byte	0xe8
 2311 01aa 04       		.byte	0x4
 2312 01ab 0E       		.uleb128 0xe
 2313 01ac 43495200 		.ascii	"CIR\000"
 2314 01b0 06       		.byte	0x6
 2315 01b1 C103     		.2byte	0x3c1
 2316 01b3 E8000000 		.4byte	0xe8
 2317 01b7 08       		.byte	0x8
 2318 01b8 0F       		.uleb128 0xf
 2319 01b9 43020000 		.4byte	.LASF32
 2320 01bd 06       		.byte	0x6
 2321 01be C203     		.2byte	0x3c2
 2322 01c0 E8000000 		.4byte	0xe8
 2323 01c4 0C       		.byte	0xc
 2324 01c5 0F       		.uleb128 0xf
 2325 01c6 E3010000 		.4byte	.LASF33
 2326 01ca 06       		.byte	0x6
 2327 01cb C303     		.2byte	0x3c3
 2328 01cd E8000000 		.4byte	0xe8
 2329 01d1 10       		.byte	0x10
 2330 01d2 0F       		.uleb128 0xf
 2331 01d3 960A0000 		.4byte	.LASF34
 2332 01d7 06       		.byte	0x6
 2333 01d8 C403     		.2byte	0x3c4
 2334 01da E8000000 		.4byte	0xe8
 2335 01de 14       		.byte	0x14
 2336 01df 0F       		.uleb128 0xf
 2337 01e0 F4060000 		.4byte	.LASF35
 2338 01e4 06       		.byte	0x6
 2339 01e5 C503     		.2byte	0x3c5
 2340 01e7 E8000000 		.4byte	0xe8
 2341 01eb 18       		.byte	0x18
 2342 01ec 0F       		.uleb128 0xf
 2343 01ed 62080000 		.4byte	.LASF36
 2344 01f1 06       		.byte	0x6
 2345 01f2 C603     		.2byte	0x3c6
ARM GAS  /tmp/cccmMgvS.s 			page 68


 2346 01f4 E8000000 		.4byte	0xe8
 2347 01f8 1C       		.byte	0x1c
 2348 01f9 0F       		.uleb128 0xf
 2349 01fa 65090000 		.4byte	.LASF37
 2350 01fe 06       		.byte	0x6
 2351 01ff C703     		.2byte	0x3c7
 2352 0201 E8000000 		.4byte	0xe8
 2353 0205 20       		.byte	0x20
 2354 0206 0E       		.uleb128 0xe
 2355 0207 43535200 		.ascii	"CSR\000"
 2356 020b 06       		.byte	0x6
 2357 020c C803     		.2byte	0x3c8
 2358 020e E8000000 		.4byte	0xe8
 2359 0212 24       		.byte	0x24
 2360 0213 00       		.byte	0
 2361 0214 0C       		.uleb128 0xc
 2362 0215 58040000 		.4byte	.LASF38
 2363 0219 06       		.byte	0x6
 2364 021a D303     		.2byte	0x3d3
 2365 021c 89010000 		.4byte	0x189
 2366 0220 10       		.uleb128 0x10
 2367 0221 14       		.byte	0x14
 2368 0222 07       		.byte	0x7
 2369 0223 2E       		.byte	0x2e
 2370 0224 65020000 		.4byte	0x265
 2371 0228 11       		.uleb128 0x11
 2372 0229 47040000 		.4byte	.LASF39
 2373 022d 07       		.byte	0x7
 2374 022e 30       		.byte	0x30
 2375 022f DD000000 		.4byte	0xdd
 2376 0233 00       		.byte	0
 2377 0234 11       		.uleb128 0x11
 2378 0235 DD030000 		.4byte	.LASF40
 2379 0239 07       		.byte	0x7
 2380 023a 31       		.byte	0x31
 2381 023b DD000000 		.4byte	0xdd
 2382 023f 04       		.byte	0x4
 2383 0240 11       		.uleb128 0x11
 2384 0241 80070000 		.4byte	.LASF41
 2385 0245 07       		.byte	0x7
 2386 0246 32       		.byte	0x32
 2387 0247 DD000000 		.4byte	0xdd
 2388 024b 08       		.byte	0x8
 2389 024c 11       		.uleb128 0x11
 2390 024d 1B020000 		.4byte	.LASF42
 2391 0251 07       		.byte	0x7
 2392 0252 33       		.byte	0x33
 2393 0253 DD000000 		.4byte	0xdd
 2394 0257 0C       		.byte	0xc
 2395 0258 11       		.uleb128 0x11
 2396 0259 52030000 		.4byte	.LASF43
 2397 025d 07       		.byte	0x7
 2398 025e 34       		.byte	0x34
 2399 025f DD000000 		.4byte	0xdd
 2400 0263 10       		.byte	0x10
 2401 0264 00       		.byte	0
 2402 0265 03       		.uleb128 0x3
ARM GAS  /tmp/cccmMgvS.s 			page 69


 2403 0266 E3050000 		.4byte	.LASF44
 2404 026a 07       		.byte	0x7
 2405 026b 35       		.byte	0x35
 2406 026c 20020000 		.4byte	0x220
 2407 0270 12       		.uleb128 0x12
 2408 0271 13       		.uleb128 0x13
 2409 0272 04       		.byte	0x4
 2410 0273 70020000 		.4byte	0x270
 2411 0277 14       		.uleb128 0x14
 2412 0278 49000000 		.4byte	0x49
 2413 027c 87020000 		.4byte	0x287
 2414 0280 15       		.uleb128 0x15
 2415 0281 ED000000 		.4byte	0xed
 2416 0285 02       		.byte	0x2
 2417 0286 00       		.byte	0
 2418 0287 07       		.uleb128 0x7
 2419 0288 5F010000 		.4byte	.LASF45
 2420 028c 08       		.byte	0x8
 2421 028d 6301     		.2byte	0x163
 2422 028f 77020000 		.4byte	0x277
 2423 0293 07       		.uleb128 0x7
 2424 0294 7A050000 		.4byte	.LASF46
 2425 0298 08       		.byte	0x8
 2426 0299 6301     		.2byte	0x163
 2427 029b 77020000 		.4byte	0x277
 2428 029f 07       		.uleb128 0x7
 2429 02a0 C4010000 		.4byte	.LASF47
 2430 02a4 08       		.byte	0x8
 2431 02a5 6401     		.2byte	0x164
 2432 02a7 B7000000 		.4byte	0xb7
 2433 02ab 07       		.uleb128 0x7
 2434 02ac 6B050000 		.4byte	.LASF48
 2435 02b0 08       		.byte	0x8
 2436 02b1 6401     		.2byte	0x164
 2437 02b3 B7000000 		.4byte	0xb7
 2438 02b7 07       		.uleb128 0x7
 2439 02b8 80050000 		.4byte	.LASF49
 2440 02bc 08       		.byte	0x8
 2441 02bd 6401     		.2byte	0x164
 2442 02bf B7000000 		.4byte	0xb7
 2443 02c3 07       		.uleb128 0x7
 2444 02c4 FF010000 		.4byte	.LASF50
 2445 02c8 08       		.byte	0x8
 2446 02c9 6501     		.2byte	0x165
 2447 02cb CF020000 		.4byte	0x2cf
 2448 02cf 02       		.uleb128 0x2
 2449 02d0 04       		.byte	0x4
 2450 02d1 04       		.byte	0x4
 2451 02d2 D1070000 		.4byte	.LASF51
 2452 02d6 07       		.uleb128 0x7
 2453 02d7 0F060000 		.4byte	.LASF52
 2454 02db 08       		.byte	0x8
 2455 02dc 6601     		.2byte	0x166
 2456 02de CF020000 		.4byte	0x2cf
 2457 02e2 07       		.uleb128 0x7
 2458 02e3 41080000 		.4byte	.LASF53
 2459 02e7 08       		.byte	0x8
ARM GAS  /tmp/cccmMgvS.s 			page 70


 2460 02e8 6601     		.2byte	0x166
 2461 02ea CF020000 		.4byte	0x2cf
 2462 02ee 16       		.uleb128 0x16
 2463 02ef 59617700 		.ascii	"Yaw\000"
 2464 02f3 08       		.byte	0x8
 2465 02f4 6601     		.2byte	0x166
 2466 02f6 CF020000 		.4byte	0x2cf
 2467 02fa 02       		.uleb128 0x2
 2468 02fb 08       		.byte	0x8
 2469 02fc 04       		.byte	0x4
 2470 02fd 35000000 		.4byte	.LASF54
 2471 0301 03       		.uleb128 0x3
 2472 0302 15060000 		.4byte	.LASF55
 2473 0306 09       		.byte	0x9
 2474 0307 07       		.byte	0x7
 2475 0308 94000000 		.4byte	0x94
 2476 030c 03       		.uleb128 0x3
 2477 030d 9D010000 		.4byte	.LASF56
 2478 0311 0A       		.byte	0xa
 2479 0312 2C       		.byte	0x2c
 2480 0313 6D000000 		.4byte	0x6d
 2481 0317 03       		.uleb128 0x3
 2482 0318 15000000 		.4byte	.LASF57
 2483 031c 0A       		.byte	0xa
 2484 031d 72       		.byte	0x72
 2485 031e 6D000000 		.4byte	0x6d
 2486 0322 0C       		.uleb128 0xc
 2487 0323 DC050000 		.4byte	.LASF58
 2488 0327 0B       		.byte	0xb
 2489 0328 6501     		.2byte	0x165
 2490 032a 9B000000 		.4byte	0x9b
 2491 032e 17       		.uleb128 0x17
 2492 032f 04       		.byte	0x4
 2493 0330 0A       		.byte	0xa
 2494 0331 A6       		.byte	0xa6
 2495 0332 4D030000 		.4byte	0x34d
 2496 0336 18       		.uleb128 0x18
 2497 0337 C6040000 		.4byte	.LASF59
 2498 033b 0A       		.byte	0xa
 2499 033c A8       		.byte	0xa8
 2500 033d 22030000 		.4byte	0x322
 2501 0341 18       		.uleb128 0x18
 2502 0342 08040000 		.4byte	.LASF60
 2503 0346 0A       		.byte	0xa
 2504 0347 A9       		.byte	0xa9
 2505 0348 4D030000 		.4byte	0x34d
 2506 034c 00       		.byte	0
 2507 034d 14       		.uleb128 0x14
 2508 034e 37000000 		.4byte	0x37
 2509 0352 5D030000 		.4byte	0x35d
 2510 0356 15       		.uleb128 0x15
 2511 0357 ED000000 		.4byte	0xed
 2512 035b 03       		.byte	0x3
 2513 035c 00       		.byte	0
 2514 035d 10       		.uleb128 0x10
 2515 035e 08       		.byte	0x8
 2516 035f 0A       		.byte	0xa
ARM GAS  /tmp/cccmMgvS.s 			page 71


 2517 0360 A3       		.byte	0xa3
 2518 0361 7E030000 		.4byte	0x37e
 2519 0365 11       		.uleb128 0x11
 2520 0366 0C050000 		.4byte	.LASF61
 2521 036a 0A       		.byte	0xa
 2522 036b A5       		.byte	0xa5
 2523 036c 94000000 		.4byte	0x94
 2524 0370 00       		.byte	0
 2525 0371 11       		.uleb128 0x11
 2526 0372 6E070000 		.4byte	.LASF62
 2527 0376 0A       		.byte	0xa
 2528 0377 AA       		.byte	0xaa
 2529 0378 2E030000 		.4byte	0x32e
 2530 037c 04       		.byte	0x4
 2531 037d 00       		.byte	0
 2532 037e 03       		.uleb128 0x3
 2533 037f AF060000 		.4byte	.LASF63
 2534 0383 0A       		.byte	0xa
 2535 0384 AB       		.byte	0xab
 2536 0385 5D030000 		.4byte	0x35d
 2537 0389 03       		.uleb128 0x3
 2538 038a 80060000 		.4byte	.LASF64
 2539 038e 0A       		.byte	0xa
 2540 038f AF       		.byte	0xaf
 2541 0390 01030000 		.4byte	0x301
 2542 0394 19       		.uleb128 0x19
 2543 0395 04       		.byte	0x4
 2544 0396 13       		.uleb128 0x13
 2545 0397 04       		.byte	0x4
 2546 0398 9C030000 		.4byte	0x39c
 2547 039c 02       		.uleb128 0x2
 2548 039d 01       		.byte	0x1
 2549 039e 08       		.byte	0x8
 2550 039f F0070000 		.4byte	.LASF65
 2551 03a3 05       		.uleb128 0x5
 2552 03a4 9C030000 		.4byte	0x39c
 2553 03a8 03       		.uleb128 0x3
 2554 03a9 C1080000 		.4byte	.LASF66
 2555 03ad 0C       		.byte	0xc
 2556 03ae 16       		.byte	0x16
 2557 03af 7F000000 		.4byte	0x7f
 2558 03b3 1A       		.uleb128 0x1a
 2559 03b4 B5030000 		.4byte	.LASF71
 2560 03b8 18       		.byte	0x18
 2561 03b9 0C       		.byte	0xc
 2562 03ba 2D       		.byte	0x2d
 2563 03bb 06040000 		.4byte	0x406
 2564 03bf 11       		.uleb128 0x11
 2565 03c0 56080000 		.4byte	.LASF67
 2566 03c4 0C       		.byte	0xc
 2567 03c5 2F       		.byte	0x2f
 2568 03c6 06040000 		.4byte	0x406
 2569 03ca 00       		.byte	0
 2570 03cb 1B       		.uleb128 0x1b
 2571 03cc 5F6B00   		.ascii	"_k\000"
 2572 03cf 0C       		.byte	0xc
 2573 03d0 30       		.byte	0x30
ARM GAS  /tmp/cccmMgvS.s 			page 72


 2574 03d1 94000000 		.4byte	0x94
 2575 03d5 04       		.byte	0x4
 2576 03d6 11       		.uleb128 0x11
 2577 03d7 36070000 		.4byte	.LASF68
 2578 03db 0C       		.byte	0xc
 2579 03dc 30       		.byte	0x30
 2580 03dd 94000000 		.4byte	0x94
 2581 03e1 08       		.byte	0x8
 2582 03e2 11       		.uleb128 0x11
 2583 03e3 3B080000 		.4byte	.LASF69
 2584 03e7 0C       		.byte	0xc
 2585 03e8 30       		.byte	0x30
 2586 03e9 94000000 		.4byte	0x94
 2587 03ed 0C       		.byte	0xc
 2588 03ee 11       		.uleb128 0x11
 2589 03ef 75050000 		.4byte	.LASF70
 2590 03f3 0C       		.byte	0xc
 2591 03f4 30       		.byte	0x30
 2592 03f5 94000000 		.4byte	0x94
 2593 03f9 10       		.byte	0x10
 2594 03fa 1B       		.uleb128 0x1b
 2595 03fb 5F7800   		.ascii	"_x\000"
 2596 03fe 0C       		.byte	0xc
 2597 03ff 31       		.byte	0x31
 2598 0400 0C040000 		.4byte	0x40c
 2599 0404 14       		.byte	0x14
 2600 0405 00       		.byte	0
 2601 0406 13       		.uleb128 0x13
 2602 0407 04       		.byte	0x4
 2603 0408 B3030000 		.4byte	0x3b3
 2604 040c 14       		.uleb128 0x14
 2605 040d A8030000 		.4byte	0x3a8
 2606 0411 1C040000 		.4byte	0x41c
 2607 0415 15       		.uleb128 0x15
 2608 0416 ED000000 		.4byte	0xed
 2609 041a 00       		.byte	0
 2610 041b 00       		.byte	0
 2611 041c 1A       		.uleb128 0x1a
 2612 041d FB030000 		.4byte	.LASF72
 2613 0421 24       		.byte	0x24
 2614 0422 0C       		.byte	0xc
 2615 0423 35       		.byte	0x35
 2616 0424 95040000 		.4byte	0x495
 2617 0428 11       		.uleb128 0x11
 2618 0429 8C010000 		.4byte	.LASF73
 2619 042d 0C       		.byte	0xc
 2620 042e 37       		.byte	0x37
 2621 042f 94000000 		.4byte	0x94
 2622 0433 00       		.byte	0
 2623 0434 11       		.uleb128 0x11
 2624 0435 0B0A0000 		.4byte	.LASF74
 2625 0439 0C       		.byte	0xc
 2626 043a 38       		.byte	0x38
 2627 043b 94000000 		.4byte	0x94
 2628 043f 04       		.byte	0x4
 2629 0440 11       		.uleb128 0x11
 2630 0441 76070000 		.4byte	.LASF75
ARM GAS  /tmp/cccmMgvS.s 			page 73


 2631 0445 0C       		.byte	0xc
 2632 0446 39       		.byte	0x39
 2633 0447 94000000 		.4byte	0x94
 2634 044b 08       		.byte	0x8
 2635 044c 11       		.uleb128 0x11
 2636 044d 8C0A0000 		.4byte	.LASF76
 2637 0451 0C       		.byte	0xc
 2638 0452 3A       		.byte	0x3a
 2639 0453 94000000 		.4byte	0x94
 2640 0457 0C       		.byte	0xc
 2641 0458 11       		.uleb128 0x11
 2642 0459 9A050000 		.4byte	.LASF77
 2643 045d 0C       		.byte	0xc
 2644 045e 3B       		.byte	0x3b
 2645 045f 94000000 		.4byte	0x94
 2646 0463 10       		.byte	0x10
 2647 0464 11       		.uleb128 0x11
 2648 0465 02050000 		.4byte	.LASF78
 2649 0469 0C       		.byte	0xc
 2650 046a 3C       		.byte	0x3c
 2651 046b 94000000 		.4byte	0x94
 2652 046f 14       		.byte	0x14
 2653 0470 11       		.uleb128 0x11
 2654 0471 98070000 		.4byte	.LASF79
 2655 0475 0C       		.byte	0xc
 2656 0476 3D       		.byte	0x3d
 2657 0477 94000000 		.4byte	0x94
 2658 047b 18       		.byte	0x18
 2659 047c 11       		.uleb128 0x11
 2660 047d 89060000 		.4byte	.LASF80
 2661 0481 0C       		.byte	0xc
 2662 0482 3E       		.byte	0x3e
 2663 0483 94000000 		.4byte	0x94
 2664 0487 1C       		.byte	0x1c
 2665 0488 11       		.uleb128 0x11
 2666 0489 F1090000 		.4byte	.LASF81
 2667 048d 0C       		.byte	0xc
 2668 048e 3F       		.byte	0x3f
 2669 048f 94000000 		.4byte	0x94
 2670 0493 20       		.byte	0x20
 2671 0494 00       		.byte	0
 2672 0495 1C       		.uleb128 0x1c
 2673 0496 F1010000 		.4byte	.LASF82
 2674 049a 0801     		.2byte	0x108
 2675 049c 0C       		.byte	0xc
 2676 049d 48       		.byte	0x48
 2677 049e D5040000 		.4byte	0x4d5
 2678 04a2 11       		.uleb128 0x11
 2679 04a3 2D000000 		.4byte	.LASF83
 2680 04a7 0C       		.byte	0xc
 2681 04a8 49       		.byte	0x49
 2682 04a9 D5040000 		.4byte	0x4d5
 2683 04ad 00       		.byte	0
 2684 04ae 11       		.uleb128 0x11
 2685 04af 00000000 		.4byte	.LASF84
 2686 04b3 0C       		.byte	0xc
 2687 04b4 4A       		.byte	0x4a
ARM GAS  /tmp/cccmMgvS.s 			page 74


 2688 04b5 D5040000 		.4byte	0x4d5
 2689 04b9 80       		.byte	0x80
 2690 04ba 1D       		.uleb128 0x1d
 2691 04bb 6A080000 		.4byte	.LASF85
 2692 04bf 0C       		.byte	0xc
 2693 04c0 4C       		.byte	0x4c
 2694 04c1 A8030000 		.4byte	0x3a8
 2695 04c5 0001     		.2byte	0x100
 2696 04c7 1D       		.uleb128 0x1d
 2697 04c8 7E020000 		.4byte	.LASF86
 2698 04cc 0C       		.byte	0xc
 2699 04cd 4F       		.byte	0x4f
 2700 04ce A8030000 		.4byte	0x3a8
 2701 04d2 0401     		.2byte	0x104
 2702 04d4 00       		.byte	0
 2703 04d5 14       		.uleb128 0x14
 2704 04d6 94030000 		.4byte	0x394
 2705 04da E5040000 		.4byte	0x4e5
 2706 04de 15       		.uleb128 0x15
 2707 04df ED000000 		.4byte	0xed
 2708 04e3 1F       		.byte	0x1f
 2709 04e4 00       		.byte	0
 2710 04e5 1C       		.uleb128 0x1c
 2711 04e6 A3050000 		.4byte	.LASF87
 2712 04ea 9001     		.2byte	0x190
 2713 04ec 0C       		.byte	0xc
 2714 04ed 5B       		.byte	0x5b
 2715 04ee 23050000 		.4byte	0x523
 2716 04f2 11       		.uleb128 0x11
 2717 04f3 56080000 		.4byte	.LASF67
 2718 04f7 0C       		.byte	0xc
 2719 04f8 5C       		.byte	0x5c
 2720 04f9 23050000 		.4byte	0x523
 2721 04fd 00       		.byte	0
 2722 04fe 11       		.uleb128 0x11
 2723 04ff EF060000 		.4byte	.LASF88
 2724 0503 0C       		.byte	0xc
 2725 0504 5D       		.byte	0x5d
 2726 0505 94000000 		.4byte	0x94
 2727 0509 04       		.byte	0x4
 2728 050a 11       		.uleb128 0x11
 2729 050b 63030000 		.4byte	.LASF89
 2730 050f 0C       		.byte	0xc
 2731 0510 5F       		.byte	0x5f
 2732 0511 29050000 		.4byte	0x529
 2733 0515 08       		.byte	0x8
 2734 0516 11       		.uleb128 0x11
 2735 0517 F1010000 		.4byte	.LASF82
 2736 051b 0C       		.byte	0xc
 2737 051c 60       		.byte	0x60
 2738 051d 95040000 		.4byte	0x495
 2739 0521 88       		.byte	0x88
 2740 0522 00       		.byte	0
 2741 0523 13       		.uleb128 0x13
 2742 0524 04       		.byte	0x4
 2743 0525 E5040000 		.4byte	0x4e5
 2744 0529 14       		.uleb128 0x14
ARM GAS  /tmp/cccmMgvS.s 			page 75


 2745 052a 71020000 		.4byte	0x271
 2746 052e 39050000 		.4byte	0x539
 2747 0532 15       		.uleb128 0x15
 2748 0533 ED000000 		.4byte	0xed
 2749 0537 1F       		.byte	0x1f
 2750 0538 00       		.byte	0
 2751 0539 1A       		.uleb128 0x1a
 2752 053a 93060000 		.4byte	.LASF90
 2753 053e 08       		.byte	0x8
 2754 053f 0C       		.byte	0xc
 2755 0540 73       		.byte	0x73
 2756 0541 5E050000 		.4byte	0x55e
 2757 0545 11       		.uleb128 0x11
 2758 0546 DD010000 		.4byte	.LASF91
 2759 054a 0C       		.byte	0xc
 2760 054b 74       		.byte	0x74
 2761 054c 5E050000 		.4byte	0x55e
 2762 0550 00       		.byte	0
 2763 0551 11       		.uleb128 0x11
 2764 0552 FE070000 		.4byte	.LASF92
 2765 0556 0C       		.byte	0xc
 2766 0557 75       		.byte	0x75
 2767 0558 94000000 		.4byte	0x94
 2768 055c 04       		.byte	0x4
 2769 055d 00       		.byte	0
 2770 055e 13       		.uleb128 0x13
 2771 055f 04       		.byte	0x4
 2772 0560 37000000 		.4byte	0x37
 2773 0564 1A       		.uleb128 0x1a
 2774 0565 25000000 		.4byte	.LASF93
 2775 0569 68       		.byte	0x68
 2776 056a 0C       		.byte	0xc
 2777 056b B3       		.byte	0xb3
 2778 056c 8E060000 		.4byte	0x68e
 2779 0570 1B       		.uleb128 0x1b
 2780 0571 5F7000   		.ascii	"_p\000"
 2781 0574 0C       		.byte	0xc
 2782 0575 B4       		.byte	0xb4
 2783 0576 5E050000 		.4byte	0x55e
 2784 057a 00       		.byte	0
 2785 057b 1B       		.uleb128 0x1b
 2786 057c 5F7200   		.ascii	"_r\000"
 2787 057f 0C       		.byte	0xc
 2788 0580 B5       		.byte	0xb5
 2789 0581 94000000 		.4byte	0x94
 2790 0585 04       		.byte	0x4
 2791 0586 1B       		.uleb128 0x1b
 2792 0587 5F7700   		.ascii	"_w\000"
 2793 058a 0C       		.byte	0xc
 2794 058b B6       		.byte	0xb6
 2795 058c 94000000 		.4byte	0x94
 2796 0590 08       		.byte	0x8
 2797 0591 11       		.uleb128 0x11
 2798 0592 95090000 		.4byte	.LASF94
 2799 0596 0C       		.byte	0xc
 2800 0597 B7       		.byte	0xb7
 2801 0598 49000000 		.4byte	0x49
ARM GAS  /tmp/cccmMgvS.s 			page 76


 2802 059c 0C       		.byte	0xc
 2803 059d 11       		.uleb128 0x11
 2804 059e 41040000 		.4byte	.LASF95
 2805 05a2 0C       		.byte	0xc
 2806 05a3 B8       		.byte	0xb8
 2807 05a4 49000000 		.4byte	0x49
 2808 05a8 0E       		.byte	0xe
 2809 05a9 1B       		.uleb128 0x1b
 2810 05aa 5F626600 		.ascii	"_bf\000"
 2811 05ae 0C       		.byte	0xc
 2812 05af B9       		.byte	0xb9
 2813 05b0 39050000 		.4byte	0x539
 2814 05b4 10       		.byte	0x10
 2815 05b5 11       		.uleb128 0x11
 2816 05b6 30010000 		.4byte	.LASF96
 2817 05ba 0C       		.byte	0xc
 2818 05bb BA       		.byte	0xba
 2819 05bc 94000000 		.4byte	0x94
 2820 05c0 18       		.byte	0x18
 2821 05c1 11       		.uleb128 0x11
 2822 05c2 13020000 		.4byte	.LASF97
 2823 05c6 0C       		.byte	0xc
 2824 05c7 C1       		.byte	0xc1
 2825 05c8 94030000 		.4byte	0x394
 2826 05cc 1C       		.byte	0x1c
 2827 05cd 11       		.uleb128 0x11
 2828 05ce EC030000 		.4byte	.LASF98
 2829 05d2 0C       		.byte	0xc
 2830 05d3 C3       		.byte	0xc3
 2831 05d4 E9070000 		.4byte	0x7e9
 2832 05d8 20       		.byte	0x20
 2833 05d9 11       		.uleb128 0x11
 2834 05da FB040000 		.4byte	.LASF99
 2835 05de 0C       		.byte	0xc
 2836 05df C5       		.byte	0xc5
 2837 05e0 13080000 		.4byte	0x813
 2838 05e4 24       		.byte	0x24
 2839 05e5 11       		.uleb128 0x11
 2840 05e6 5C080000 		.4byte	.LASF100
 2841 05ea 0C       		.byte	0xc
 2842 05eb C8       		.byte	0xc8
 2843 05ec 37080000 		.4byte	0x837
 2844 05f0 28       		.byte	0x28
 2845 05f1 11       		.uleb128 0x11
 2846 05f2 A4010000 		.4byte	.LASF101
 2847 05f6 0C       		.byte	0xc
 2848 05f7 C9       		.byte	0xc9
 2849 05f8 51080000 		.4byte	0x851
 2850 05fc 2C       		.byte	0x2c
 2851 05fd 1B       		.uleb128 0x1b
 2852 05fe 5F756200 		.ascii	"_ub\000"
 2853 0602 0C       		.byte	0xc
 2854 0603 CC       		.byte	0xcc
 2855 0604 39050000 		.4byte	0x539
 2856 0608 30       		.byte	0x30
 2857 0609 1B       		.uleb128 0x1b
 2858 060a 5F757000 		.ascii	"_up\000"
ARM GAS  /tmp/cccmMgvS.s 			page 77


 2859 060e 0C       		.byte	0xc
 2860 060f CD       		.byte	0xcd
 2861 0610 5E050000 		.4byte	0x55e
 2862 0614 38       		.byte	0x38
 2863 0615 1B       		.uleb128 0x1b
 2864 0616 5F757200 		.ascii	"_ur\000"
 2865 061a 0C       		.byte	0xc
 2866 061b CE       		.byte	0xce
 2867 061c 94000000 		.4byte	0x94
 2868 0620 3C       		.byte	0x3c
 2869 0621 11       		.uleb128 0x11
 2870 0622 BE010000 		.4byte	.LASF102
 2871 0626 0C       		.byte	0xc
 2872 0627 D1       		.byte	0xd1
 2873 0628 57080000 		.4byte	0x857
 2874 062c 40       		.byte	0x40
 2875 062d 11       		.uleb128 0x11
 2876 062e D8090000 		.4byte	.LASF103
 2877 0632 0C       		.byte	0xc
 2878 0633 D2       		.byte	0xd2
 2879 0634 67080000 		.4byte	0x867
 2880 0638 43       		.byte	0x43
 2881 0639 1B       		.uleb128 0x1b
 2882 063a 5F6C6200 		.ascii	"_lb\000"
 2883 063e 0C       		.byte	0xc
 2884 063f D5       		.byte	0xd5
 2885 0640 39050000 		.4byte	0x539
 2886 0644 44       		.byte	0x44
 2887 0645 11       		.uleb128 0x11
 2888 0646 F5070000 		.4byte	.LASF104
 2889 064a 0C       		.byte	0xc
 2890 064b D8       		.byte	0xd8
 2891 064c 94000000 		.4byte	0x94
 2892 0650 4C       		.byte	0x4c
 2893 0651 11       		.uleb128 0x11
 2894 0652 02030000 		.4byte	.LASF105
 2895 0656 0C       		.byte	0xc
 2896 0657 D9       		.byte	0xd9
 2897 0658 0C030000 		.4byte	0x30c
 2898 065c 50       		.byte	0x50
 2899 065d 11       		.uleb128 0x11
 2900 065e 7B040000 		.4byte	.LASF106
 2901 0662 0C       		.byte	0xc
 2902 0663 DC       		.byte	0xdc
 2903 0664 AC060000 		.4byte	0x6ac
 2904 0668 54       		.byte	0x54
 2905 0669 11       		.uleb128 0x11
 2906 066a E1040000 		.4byte	.LASF107
 2907 066e 0C       		.byte	0xc
 2908 066f E0       		.byte	0xe0
 2909 0670 89030000 		.4byte	0x389
 2910 0674 58       		.byte	0x58
 2911 0675 11       		.uleb128 0x11
 2912 0676 BA060000 		.4byte	.LASF108
 2913 067a 0C       		.byte	0xc
 2914 067b E2       		.byte	0xe2
 2915 067c 7E030000 		.4byte	0x37e
ARM GAS  /tmp/cccmMgvS.s 			page 78


 2916 0680 5C       		.byte	0x5c
 2917 0681 11       		.uleb128 0x11
 2918 0682 9A060000 		.4byte	.LASF109
 2919 0686 0C       		.byte	0xc
 2920 0687 E3       		.byte	0xe3
 2921 0688 94000000 		.4byte	0x94
 2922 068c 64       		.byte	0x64
 2923 068d 00       		.byte	0
 2924 068e 1E       		.uleb128 0x1e
 2925 068f 94000000 		.4byte	0x94
 2926 0693 AC060000 		.4byte	0x6ac
 2927 0697 1F       		.uleb128 0x1f
 2928 0698 AC060000 		.4byte	0x6ac
 2929 069c 1F       		.uleb128 0x1f
 2930 069d 94030000 		.4byte	0x394
 2931 06a1 1F       		.uleb128 0x1f
 2932 06a2 96030000 		.4byte	0x396
 2933 06a6 1F       		.uleb128 0x1f
 2934 06a7 94000000 		.4byte	0x94
 2935 06ab 00       		.byte	0
 2936 06ac 13       		.uleb128 0x13
 2937 06ad 04       		.byte	0x4
 2938 06ae B7060000 		.4byte	0x6b7
 2939 06b2 05       		.uleb128 0x5
 2940 06b3 AC060000 		.4byte	0x6ac
 2941 06b7 20       		.uleb128 0x20
 2942 06b8 3E070000 		.4byte	.LASF110
 2943 06bc 2804     		.2byte	0x428
 2944 06be 0C       		.byte	0xc
 2945 06bf 3802     		.2byte	0x238
 2946 06c1 E9070000 		.4byte	0x7e9
 2947 06c5 0F       		.uleb128 0xf
 2948 06c6 E9070000 		.4byte	.LASF111
 2949 06ca 0C       		.byte	0xc
 2950 06cb 3A02     		.2byte	0x23a
 2951 06cd 94000000 		.4byte	0x94
 2952 06d1 00       		.byte	0
 2953 06d2 0F       		.uleb128 0xf
 2954 06d3 8E090000 		.4byte	.LASF112
 2955 06d7 0C       		.byte	0xc
 2956 06d8 3F02     		.2byte	0x23f
 2957 06da BE080000 		.4byte	0x8be
 2958 06de 04       		.byte	0x4
 2959 06df 0F       		.uleb128 0xf
 2960 06e0 14040000 		.4byte	.LASF113
 2961 06e4 0C       		.byte	0xc
 2962 06e5 3F02     		.2byte	0x23f
 2963 06e7 BE080000 		.4byte	0x8be
 2964 06eb 08       		.byte	0x8
 2965 06ec 0F       		.uleb128 0xf
 2966 06ed AD030000 		.4byte	.LASF114
 2967 06f1 0C       		.byte	0xc
 2968 06f2 3F02     		.2byte	0x23f
 2969 06f4 BE080000 		.4byte	0x8be
 2970 06f8 0C       		.byte	0xc
 2971 06f9 0F       		.uleb128 0xf
 2972 06fa EA060000 		.4byte	.LASF115
ARM GAS  /tmp/cccmMgvS.s 			page 79


 2973 06fe 0C       		.byte	0xc
 2974 06ff 4102     		.2byte	0x241
 2975 0701 94000000 		.4byte	0x94
 2976 0705 10       		.byte	0x10
 2977 0706 0F       		.uleb128 0xf
 2978 0707 6D000000 		.4byte	.LASF116
 2979 070b 0C       		.byte	0xc
 2980 070c 4202     		.2byte	0x242
 2981 070e A00A0000 		.4byte	0xaa0
 2982 0712 14       		.byte	0x14
 2983 0713 0F       		.uleb128 0xf
 2984 0714 F3080000 		.4byte	.LASF117
 2985 0718 0C       		.byte	0xc
 2986 0719 4402     		.2byte	0x244
 2987 071b 94000000 		.4byte	0x94
 2988 071f 30       		.byte	0x30
 2989 0720 0F       		.uleb128 0xf
 2990 0721 2A0A0000 		.4byte	.LASF118
 2991 0725 0C       		.byte	0xc
 2992 0726 4502     		.2byte	0x245
 2993 0728 0D080000 		.4byte	0x80d
 2994 072c 34       		.byte	0x34
 2995 072d 0F       		.uleb128 0xf
 2996 072e AB050000 		.4byte	.LASF119
 2997 0732 0C       		.byte	0xc
 2998 0733 4702     		.2byte	0x247
 2999 0735 94000000 		.4byte	0x94
 3000 0739 38       		.byte	0x38
 3001 073a 0F       		.uleb128 0xf
 3002 073b 2C070000 		.4byte	.LASF120
 3003 073f 0C       		.byte	0xc
 3004 0740 4902     		.2byte	0x249
 3005 0742 BB0A0000 		.4byte	0xabb
 3006 0746 3C       		.byte	0x3c
 3007 0747 0F       		.uleb128 0xf
 3008 0748 BE040000 		.4byte	.LASF121
 3009 074c 0C       		.byte	0xc
 3010 074d 4C02     		.2byte	0x24c
 3011 074f 06040000 		.4byte	0x406
 3012 0753 40       		.byte	0x40
 3013 0754 0F       		.uleb128 0xf
 3014 0755 A4020000 		.4byte	.LASF122
 3015 0759 0C       		.byte	0xc
 3016 075a 4D02     		.2byte	0x24d
 3017 075c 94000000 		.4byte	0x94
 3018 0760 44       		.byte	0x44
 3019 0761 0F       		.uleb128 0xf
 3020 0762 480A0000 		.4byte	.LASF123
 3021 0766 0C       		.byte	0xc
 3022 0767 4E02     		.2byte	0x24e
 3023 0769 06040000 		.4byte	0x406
 3024 076d 48       		.byte	0x48
 3025 076e 0F       		.uleb128 0xf
 3026 076f 05060000 		.4byte	.LASF124
 3027 0773 0C       		.byte	0xc
 3028 0774 4F02     		.2byte	0x24f
 3029 0776 C10A0000 		.4byte	0xac1
ARM GAS  /tmp/cccmMgvS.s 			page 80


 3030 077a 4C       		.byte	0x4c
 3031 077b 0F       		.uleb128 0xf
 3032 077c 1C040000 		.4byte	.LASF125
 3033 0780 0C       		.byte	0xc
 3034 0781 5202     		.2byte	0x252
 3035 0783 94000000 		.4byte	0x94
 3036 0787 50       		.byte	0x50
 3037 0788 0F       		.uleb128 0xf
 3038 0789 FA020000 		.4byte	.LASF126
 3039 078d 0C       		.byte	0xc
 3040 078e 5302     		.2byte	0x253
 3041 0790 96030000 		.4byte	0x396
 3042 0794 54       		.byte	0x54
 3043 0795 0F       		.uleb128 0xf
 3044 0796 D3040000 		.4byte	.LASF127
 3045 079a 0C       		.byte	0xc
 3046 079b 7602     		.2byte	0x276
 3047 079d 7E0A0000 		.4byte	0xa7e
 3048 07a1 58       		.byte	0x58
 3049 07a2 21       		.uleb128 0x21
 3050 07a3 A3050000 		.4byte	.LASF87
 3051 07a7 0C       		.byte	0xc
 3052 07a8 7A02     		.2byte	0x27a
 3053 07aa 23050000 		.4byte	0x523
 3054 07ae 4801     		.2byte	0x148
 3055 07b0 21       		.uleb128 0x21
 3056 07b1 A6000000 		.4byte	.LASF128
 3057 07b5 0C       		.byte	0xc
 3058 07b6 7B02     		.2byte	0x27b
 3059 07b8 E5040000 		.4byte	0x4e5
 3060 07bc 4C01     		.2byte	0x14c
 3061 07be 21       		.uleb128 0x21
 3062 07bf B6090000 		.4byte	.LASF129
 3063 07c3 0C       		.byte	0xc
 3064 07c4 7F02     		.2byte	0x27f
 3065 07c6 D20A0000 		.4byte	0xad2
 3066 07ca DC02     		.2byte	0x2dc
 3067 07cc 21       		.uleb128 0x21
 3068 07cd 2B020000 		.4byte	.LASF130
 3069 07d1 0C       		.byte	0xc
 3070 07d2 8402     		.2byte	0x284
 3071 07d4 83080000 		.4byte	0x883
 3072 07d8 E002     		.2byte	0x2e0
 3073 07da 21       		.uleb128 0x21
 3074 07db EC010000 		.4byte	.LASF131
 3075 07df 0C       		.byte	0xc
 3076 07e0 8502     		.2byte	0x285
 3077 07e2 DE0A0000 		.4byte	0xade
 3078 07e6 EC02     		.2byte	0x2ec
 3079 07e8 00       		.byte	0
 3080 07e9 13       		.uleb128 0x13
 3081 07ea 04       		.byte	0x4
 3082 07eb 8E060000 		.4byte	0x68e
 3083 07ef 1E       		.uleb128 0x1e
 3084 07f0 94000000 		.4byte	0x94
 3085 07f4 0D080000 		.4byte	0x80d
 3086 07f8 1F       		.uleb128 0x1f
ARM GAS  /tmp/cccmMgvS.s 			page 81


 3087 07f9 AC060000 		.4byte	0x6ac
 3088 07fd 1F       		.uleb128 0x1f
 3089 07fe 94030000 		.4byte	0x394
 3090 0802 1F       		.uleb128 0x1f
 3091 0803 0D080000 		.4byte	0x80d
 3092 0807 1F       		.uleb128 0x1f
 3093 0808 94000000 		.4byte	0x94
 3094 080c 00       		.byte	0
 3095 080d 13       		.uleb128 0x13
 3096 080e 04       		.byte	0x4
 3097 080f A3030000 		.4byte	0x3a3
 3098 0813 13       		.uleb128 0x13
 3099 0814 04       		.byte	0x4
 3100 0815 EF070000 		.4byte	0x7ef
 3101 0819 1E       		.uleb128 0x1e
 3102 081a 17030000 		.4byte	0x317
 3103 081e 37080000 		.4byte	0x837
 3104 0822 1F       		.uleb128 0x1f
 3105 0823 AC060000 		.4byte	0x6ac
 3106 0827 1F       		.uleb128 0x1f
 3107 0828 94030000 		.4byte	0x394
 3108 082c 1F       		.uleb128 0x1f
 3109 082d 17030000 		.4byte	0x317
 3110 0831 1F       		.uleb128 0x1f
 3111 0832 94000000 		.4byte	0x94
 3112 0836 00       		.byte	0
 3113 0837 13       		.uleb128 0x13
 3114 0838 04       		.byte	0x4
 3115 0839 19080000 		.4byte	0x819
 3116 083d 1E       		.uleb128 0x1e
 3117 083e 94000000 		.4byte	0x94
 3118 0842 51080000 		.4byte	0x851
 3119 0846 1F       		.uleb128 0x1f
 3120 0847 AC060000 		.4byte	0x6ac
 3121 084b 1F       		.uleb128 0x1f
 3122 084c 94030000 		.4byte	0x394
 3123 0850 00       		.byte	0
 3124 0851 13       		.uleb128 0x13
 3125 0852 04       		.byte	0x4
 3126 0853 3D080000 		.4byte	0x83d
 3127 0857 14       		.uleb128 0x14
 3128 0858 37000000 		.4byte	0x37
 3129 085c 67080000 		.4byte	0x867
 3130 0860 15       		.uleb128 0x15
 3131 0861 ED000000 		.4byte	0xed
 3132 0865 02       		.byte	0x2
 3133 0866 00       		.byte	0
 3134 0867 14       		.uleb128 0x14
 3135 0868 37000000 		.4byte	0x37
 3136 086c 77080000 		.4byte	0x877
 3137 0870 15       		.uleb128 0x15
 3138 0871 ED000000 		.4byte	0xed
 3139 0875 00       		.byte	0
 3140 0876 00       		.byte	0
 3141 0877 0C       		.uleb128 0xc
 3142 0878 A8060000 		.4byte	.LASF132
 3143 087c 0C       		.byte	0xc
ARM GAS  /tmp/cccmMgvS.s 			page 82


 3144 087d 1D01     		.2byte	0x11d
 3145 087f 64050000 		.4byte	0x564
 3146 0883 22       		.uleb128 0x22
 3147 0884 9F040000 		.4byte	.LASF133
 3148 0888 0C       		.byte	0xc
 3149 0889 0C       		.byte	0xc
 3150 088a 2101     		.2byte	0x121
 3151 088c B8080000 		.4byte	0x8b8
 3152 0890 0F       		.uleb128 0xf
 3153 0891 56080000 		.4byte	.LASF67
 3154 0895 0C       		.byte	0xc
 3155 0896 2301     		.2byte	0x123
 3156 0898 B8080000 		.4byte	0x8b8
 3157 089c 00       		.byte	0
 3158 089d 0F       		.uleb128 0xf
 3159 089e 81040000 		.4byte	.LASF134
 3160 08a2 0C       		.byte	0xc
 3161 08a3 2401     		.2byte	0x124
 3162 08a5 94000000 		.4byte	0x94
 3163 08a9 04       		.byte	0x4
 3164 08aa 0F       		.uleb128 0xf
 3165 08ab A2060000 		.4byte	.LASF135
 3166 08af 0C       		.byte	0xc
 3167 08b0 2501     		.2byte	0x125
 3168 08b2 BE080000 		.4byte	0x8be
 3169 08b6 08       		.byte	0x8
 3170 08b7 00       		.byte	0
 3171 08b8 13       		.uleb128 0x13
 3172 08b9 04       		.byte	0x4
 3173 08ba 83080000 		.4byte	0x883
 3174 08be 13       		.uleb128 0x13
 3175 08bf 04       		.byte	0x4
 3176 08c0 77080000 		.4byte	0x877
 3177 08c4 22       		.uleb128 0x22
 3178 08c5 41000000 		.4byte	.LASF136
 3179 08c9 0E       		.byte	0xe
 3180 08ca 0C       		.byte	0xc
 3181 08cb 3D01     		.2byte	0x13d
 3182 08cd F9080000 		.4byte	0x8f9
 3183 08d1 0F       		.uleb128 0xf
 3184 08d2 C9080000 		.4byte	.LASF137
 3185 08d6 0C       		.byte	0xc
 3186 08d7 3E01     		.2byte	0x13e
 3187 08d9 F9080000 		.4byte	0x8f9
 3188 08dd 00       		.byte	0
 3189 08de 0F       		.uleb128 0xf
 3190 08df E7040000 		.4byte	.LASF138
 3191 08e3 0C       		.byte	0xc
 3192 08e4 3F01     		.2byte	0x13f
 3193 08e6 F9080000 		.4byte	0x8f9
 3194 08ea 06       		.byte	0x6
 3195 08eb 0F       		.uleb128 0xf
 3196 08ec BC080000 		.4byte	.LASF139
 3197 08f0 0C       		.byte	0xc
 3198 08f1 4001     		.2byte	0x140
 3199 08f3 5B000000 		.4byte	0x5b
 3200 08f7 0C       		.byte	0xc
ARM GAS  /tmp/cccmMgvS.s 			page 83


 3201 08f8 00       		.byte	0
 3202 08f9 14       		.uleb128 0x14
 3203 08fa 5B000000 		.4byte	0x5b
 3204 08fe 09090000 		.4byte	0x909
 3205 0902 15       		.uleb128 0x15
 3206 0903 ED000000 		.4byte	0xed
 3207 0907 02       		.byte	0x2
 3208 0908 00       		.byte	0
 3209 0909 0D       		.uleb128 0xd
 3210 090a D0       		.byte	0xd0
 3211 090b 0C       		.byte	0xc
 3212 090c 5702     		.2byte	0x257
 3213 090e 0A0A0000 		.4byte	0xa0a
 3214 0912 0F       		.uleb128 0xf
 3215 0913 13090000 		.4byte	.LASF140
 3216 0917 0C       		.byte	0xc
 3217 0918 5902     		.2byte	0x259
 3218 091a 9B000000 		.4byte	0x9b
 3219 091e 00       		.byte	0
 3220 091f 0F       		.uleb128 0xf
 3221 0920 26030000 		.4byte	.LASF141
 3222 0924 0C       		.byte	0xc
 3223 0925 5A02     		.2byte	0x25a
 3224 0927 96030000 		.4byte	0x396
 3225 092b 04       		.byte	0x4
 3226 092c 0F       		.uleb128 0xf
 3227 092d B1040000 		.4byte	.LASF142
 3228 0931 0C       		.byte	0xc
 3229 0932 5B02     		.2byte	0x25b
 3230 0934 0A0A0000 		.4byte	0xa0a
 3231 0938 08       		.byte	0x8
 3232 0939 0F       		.uleb128 0xf
 3233 093a FC090000 		.4byte	.LASF143
 3234 093e 0C       		.byte	0xc
 3235 093f 5C02     		.2byte	0x25c
 3236 0941 1C040000 		.4byte	0x41c
 3237 0945 24       		.byte	0x24
 3238 0946 0F       		.uleb128 0xf
 3239 0947 B6050000 		.4byte	.LASF144
 3240 094b 0C       		.byte	0xc
 3241 094c 5D02     		.2byte	0x25d
 3242 094e 94000000 		.4byte	0x94
 3243 0952 48       		.byte	0x48
 3244 0953 0F       		.uleb128 0xf
 3245 0954 C3060000 		.4byte	.LASF145
 3246 0958 0C       		.byte	0xc
 3247 0959 5E02     		.2byte	0x25e
 3248 095b 8D000000 		.4byte	0x8d
 3249 095f 50       		.byte	0x50
 3250 0960 0F       		.uleb128 0xf
 3251 0961 140A0000 		.4byte	.LASF146
 3252 0965 0C       		.byte	0xc
 3253 0966 5F02     		.2byte	0x25f
 3254 0968 C4080000 		.4byte	0x8c4
 3255 096c 58       		.byte	0x58
 3256 096d 0F       		.uleb128 0xf
 3257 096e DD060000 		.4byte	.LASF147
ARM GAS  /tmp/cccmMgvS.s 			page 84


 3258 0972 0C       		.byte	0xc
 3259 0973 6002     		.2byte	0x260
 3260 0975 7E030000 		.4byte	0x37e
 3261 0979 68       		.byte	0x68
 3262 097a 0F       		.uleb128 0xf
 3263 097b 3A0A0000 		.4byte	.LASF148
 3264 097f 0C       		.byte	0xc
 3265 0980 6102     		.2byte	0x261
 3266 0982 7E030000 		.4byte	0x37e
 3267 0986 70       		.byte	0x70
 3268 0987 0F       		.uleb128 0xf
 3269 0988 7E010000 		.4byte	.LASF149
 3270 098c 0C       		.byte	0xc
 3271 098d 6202     		.2byte	0x262
 3272 098f 7E030000 		.4byte	0x37e
 3273 0993 78       		.byte	0x78
 3274 0994 0F       		.uleb128 0xf
 3275 0995 A4090000 		.4byte	.LASF150
 3276 0999 0C       		.byte	0xc
 3277 099a 6302     		.2byte	0x263
 3278 099c 1A0A0000 		.4byte	0xa1a
 3279 09a0 80       		.byte	0x80
 3280 09a1 0F       		.uleb128 0xf
 3281 09a2 A5040000 		.4byte	.LASF151
 3282 09a6 0C       		.byte	0xc
 3283 09a7 6402     		.2byte	0x264
 3284 09a9 2A0A0000 		.4byte	0xa2a
 3285 09ad 88       		.byte	0x88
 3286 09ae 0F       		.uleb128 0xf
 3287 09af 99000000 		.4byte	.LASF152
 3288 09b3 0C       		.byte	0xc
 3289 09b4 6502     		.2byte	0x265
 3290 09b6 94000000 		.4byte	0x94
 3291 09ba A0       		.byte	0xa0
 3292 09bb 0F       		.uleb128 0xf
 3293 09bc 33030000 		.4byte	.LASF153
 3294 09c0 0C       		.byte	0xc
 3295 09c1 6602     		.2byte	0x266
 3296 09c3 7E030000 		.4byte	0x37e
 3297 09c7 A4       		.byte	0xa4
 3298 09c8 0F       		.uleb128 0xf
 3299 09c9 64010000 		.4byte	.LASF154
 3300 09cd 0C       		.byte	0xc
 3301 09ce 6702     		.2byte	0x267
 3302 09d0 7E030000 		.4byte	0x37e
 3303 09d4 AC       		.byte	0xac
 3304 09d5 0F       		.uleb128 0xf
 3305 09d6 41030000 		.4byte	.LASF155
 3306 09da 0C       		.byte	0xc
 3307 09db 6802     		.2byte	0x268
 3308 09dd 7E030000 		.4byte	0x37e
 3309 09e1 B4       		.byte	0xb4
 3310 09e2 0F       		.uleb128 0xf
 3311 09e3 D4000000 		.4byte	.LASF156
 3312 09e7 0C       		.byte	0xc
 3313 09e8 6902     		.2byte	0x269
 3314 09ea 7E030000 		.4byte	0x37e
ARM GAS  /tmp/cccmMgvS.s 			page 85


 3315 09ee BC       		.byte	0xbc
 3316 09ef 0F       		.uleb128 0xf
 3317 09f0 E3000000 		.4byte	.LASF157
 3318 09f4 0C       		.byte	0xc
 3319 09f5 6A02     		.2byte	0x26a
 3320 09f7 7E030000 		.4byte	0x37e
 3321 09fb C4       		.byte	0xc4
 3322 09fc 0F       		.uleb128 0xf
 3323 09fd 77060000 		.4byte	.LASF158
 3324 0a01 0C       		.byte	0xc
 3325 0a02 6B02     		.2byte	0x26b
 3326 0a04 94000000 		.4byte	0x94
 3327 0a08 CC       		.byte	0xcc
 3328 0a09 00       		.byte	0
 3329 0a0a 14       		.uleb128 0x14
 3330 0a0b 9C030000 		.4byte	0x39c
 3331 0a0f 1A0A0000 		.4byte	0xa1a
 3332 0a13 15       		.uleb128 0x15
 3333 0a14 ED000000 		.4byte	0xed
 3334 0a18 19       		.byte	0x19
 3335 0a19 00       		.byte	0
 3336 0a1a 14       		.uleb128 0x14
 3337 0a1b 9C030000 		.4byte	0x39c
 3338 0a1f 2A0A0000 		.4byte	0xa2a
 3339 0a23 15       		.uleb128 0x15
 3340 0a24 ED000000 		.4byte	0xed
 3341 0a28 07       		.byte	0x7
 3342 0a29 00       		.byte	0
 3343 0a2a 14       		.uleb128 0x14
 3344 0a2b 9C030000 		.4byte	0x39c
 3345 0a2f 3A0A0000 		.4byte	0xa3a
 3346 0a33 15       		.uleb128 0x15
 3347 0a34 ED000000 		.4byte	0xed
 3348 0a38 17       		.byte	0x17
 3349 0a39 00       		.byte	0
 3350 0a3a 0D       		.uleb128 0xd
 3351 0a3b F0       		.byte	0xf0
 3352 0a3c 0C       		.byte	0xc
 3353 0a3d 7002     		.2byte	0x270
 3354 0a3f 5E0A0000 		.4byte	0xa5e
 3355 0a43 0F       		.uleb128 0xf
 3356 0a44 CC040000 		.4byte	.LASF159
 3357 0a48 0C       		.byte	0xc
 3358 0a49 7302     		.2byte	0x273
 3359 0a4b 5E0A0000 		.4byte	0xa5e
 3360 0a4f 00       		.byte	0
 3361 0a50 0F       		.uleb128 0xf
 3362 0a51 1C050000 		.4byte	.LASF160
 3363 0a55 0C       		.byte	0xc
 3364 0a56 7402     		.2byte	0x274
 3365 0a58 6E0A0000 		.4byte	0xa6e
 3366 0a5c 78       		.byte	0x78
 3367 0a5d 00       		.byte	0
 3368 0a5e 14       		.uleb128 0x14
 3369 0a5f 5E050000 		.4byte	0x55e
 3370 0a63 6E0A0000 		.4byte	0xa6e
 3371 0a67 15       		.uleb128 0x15
ARM GAS  /tmp/cccmMgvS.s 			page 86


 3372 0a68 ED000000 		.4byte	0xed
 3373 0a6c 1D       		.byte	0x1d
 3374 0a6d 00       		.byte	0
 3375 0a6e 14       		.uleb128 0x14
 3376 0a6f 9B000000 		.4byte	0x9b
 3377 0a73 7E0A0000 		.4byte	0xa7e
 3378 0a77 15       		.uleb128 0x15
 3379 0a78 ED000000 		.4byte	0xed
 3380 0a7c 1D       		.byte	0x1d
 3381 0a7d 00       		.byte	0
 3382 0a7e 23       		.uleb128 0x23
 3383 0a7f F0       		.byte	0xf0
 3384 0a80 0C       		.byte	0xc
 3385 0a81 5502     		.2byte	0x255
 3386 0a83 A00A0000 		.4byte	0xaa0
 3387 0a87 24       		.uleb128 0x24
 3388 0a88 3E070000 		.4byte	.LASF110
 3389 0a8c 0C       		.byte	0xc
 3390 0a8d 6C02     		.2byte	0x26c
 3391 0a8f 09090000 		.4byte	0x909
 3392 0a93 24       		.uleb128 0x24
 3393 0a94 DE090000 		.4byte	.LASF161
 3394 0a98 0C       		.byte	0xc
 3395 0a99 7502     		.2byte	0x275
 3396 0a9b 3A0A0000 		.4byte	0xa3a
 3397 0a9f 00       		.byte	0
 3398 0aa0 14       		.uleb128 0x14
 3399 0aa1 9C030000 		.4byte	0x39c
 3400 0aa5 B00A0000 		.4byte	0xab0
 3401 0aa9 15       		.uleb128 0x15
 3402 0aaa ED000000 		.4byte	0xed
 3403 0aae 18       		.byte	0x18
 3404 0aaf 00       		.byte	0
 3405 0ab0 25       		.uleb128 0x25
 3406 0ab1 BB0A0000 		.4byte	0xabb
 3407 0ab5 1F       		.uleb128 0x1f
 3408 0ab6 AC060000 		.4byte	0x6ac
 3409 0aba 00       		.byte	0
 3410 0abb 13       		.uleb128 0x13
 3411 0abc 04       		.byte	0x4
 3412 0abd B00A0000 		.4byte	0xab0
 3413 0ac1 13       		.uleb128 0x13
 3414 0ac2 04       		.byte	0x4
 3415 0ac3 06040000 		.4byte	0x406
 3416 0ac7 25       		.uleb128 0x25
 3417 0ac8 D20A0000 		.4byte	0xad2
 3418 0acc 1F       		.uleb128 0x1f
 3419 0acd 94000000 		.4byte	0x94
 3420 0ad1 00       		.byte	0
 3421 0ad2 13       		.uleb128 0x13
 3422 0ad3 04       		.byte	0x4
 3423 0ad4 D80A0000 		.4byte	0xad8
 3424 0ad8 13       		.uleb128 0x13
 3425 0ad9 04       		.byte	0x4
 3426 0ada C70A0000 		.4byte	0xac7
 3427 0ade 14       		.uleb128 0x14
 3428 0adf 77080000 		.4byte	0x877
ARM GAS  /tmp/cccmMgvS.s 			page 87


 3429 0ae3 EE0A0000 		.4byte	0xaee
 3430 0ae7 15       		.uleb128 0x15
 3431 0ae8 ED000000 		.4byte	0xed
 3432 0aec 02       		.byte	0x2
 3433 0aed 00       		.byte	0
 3434 0aee 07       		.uleb128 0x7
 3435 0aef A1030000 		.4byte	.LASF162
 3436 0af3 0C       		.byte	0xc
 3437 0af4 FD02     		.2byte	0x2fd
 3438 0af6 AC060000 		.4byte	0x6ac
 3439 0afa 07       		.uleb128 0x7
 3440 0afb E0080000 		.4byte	.LASF163
 3441 0aff 0C       		.byte	0xc
 3442 0b00 FE02     		.2byte	0x2fe
 3443 0b02 B2060000 		.4byte	0x6b2
 3444 0b06 02       		.uleb128 0x2
 3445 0b07 08       		.byte	0x8
 3446 0b08 04       		.byte	0x4
 3447 0b09 DC020000 		.4byte	.LASF164
 3448 0b0d 26       		.uleb128 0x26
 3449 0b0e CF080000 		.4byte	.LASF234
 3450 0b12 01       		.byte	0x1
 3451 0b13 25000000 		.4byte	0x25
 3452 0b17 0D       		.byte	0xd
 3453 0b18 9902     		.2byte	0x299
 3454 0b1a 370B0000 		.4byte	0xb37
 3455 0b1e 27       		.uleb128 0x27
 3456 0b1f 05090000 		.4byte	.LASF165
 3457 0b23 7F       		.sleb128 -1
 3458 0b24 0A       		.uleb128 0xa
 3459 0b25 96020000 		.4byte	.LASF166
 3460 0b29 00       		.byte	0
 3461 0b2a 0A       		.uleb128 0xa
 3462 0b2b 53000000 		.4byte	.LASF167
 3463 0b2f 01       		.byte	0x1
 3464 0b30 0A       		.uleb128 0xa
 3465 0b31 21010000 		.4byte	.LASF168
 3466 0b35 02       		.byte	0x2
 3467 0b36 00       		.byte	0
 3468 0b37 07       		.uleb128 0x7
 3469 0b38 4F010000 		.4byte	.LASF169
 3470 0b3c 0D       		.byte	0xd
 3471 0b3d A402     		.2byte	0x2a4
 3472 0b3f 0D0B0000 		.4byte	0xb0d
 3473 0b43 14       		.uleb128 0x14
 3474 0b44 B2000000 		.4byte	0xb2
 3475 0b48 530B0000 		.4byte	0xb53
 3476 0b4c 15       		.uleb128 0x15
 3477 0b4d ED000000 		.4byte	0xed
 3478 0b51 0F       		.byte	0xf
 3479 0b52 00       		.byte	0
 3480 0b53 05       		.uleb128 0x5
 3481 0b54 430B0000 		.4byte	0xb43
 3482 0b58 06       		.uleb128 0x6
 3483 0b59 530B0000 		.4byte	0xb53
 3484 0b5d 28       		.uleb128 0x28
 3485 0b5e A2070000 		.4byte	.LASF170
ARM GAS  /tmp/cccmMgvS.s 			page 88


 3486 0b62 01       		.byte	0x1
 3487 0b63 C2       		.byte	0xc2
 3488 0b64 580B0000 		.4byte	0xb58
 3489 0b68 05       		.uleb128 0x5
 3490 0b69 03       		.byte	0x3
 3491 0b6a 00000000 		.4byte	APBAHBPrescTable
 3492 0b6e 14       		.uleb128 0x14
 3493 0b6f B2000000 		.4byte	0xb2
 3494 0b73 7E0B0000 		.4byte	0xb7e
 3495 0b77 15       		.uleb128 0x15
 3496 0b78 ED000000 		.4byte	0xed
 3497 0b7c 03       		.byte	0x3
 3498 0b7d 00       		.byte	0
 3499 0b7e 05       		.uleb128 0x5
 3500 0b7f 6E0B0000 		.4byte	0xb6e
 3501 0b83 06       		.uleb128 0x6
 3502 0b84 7E0B0000 		.4byte	0xb7e
 3503 0b88 28       		.uleb128 0x28
 3504 0b89 ED040000 		.4byte	.LASF171
 3505 0b8d 01       		.byte	0x1
 3506 0b8e C3       		.byte	0xc3
 3507 0b8f 830B0000 		.4byte	0xb83
 3508 0b93 05       		.uleb128 0x5
 3509 0b94 03       		.byte	0x3
 3510 0b95 10000000 		.4byte	ADCPrescTable
 3511 0b99 29       		.uleb128 0x29
 3512 0b9a F4000000 		.4byte	.LASF178
 3513 0b9e 01       		.byte	0x1
 3514 0b9f A905     		.2byte	0x5a9
 3515 0ba1 B0070000 		.4byte	.LFB94
 3516 0ba5 20000000 		.4byte	.LFE94-.LFB94
 3517 0ba9 01       		.uleb128 0x1
 3518 0baa 9C       		.byte	0x9c
 3519 0bab BF0B0000 		.4byte	0xbbf
 3520 0baf 2A       		.uleb128 0x2a
 3521 0bb0 B7010000 		.4byte	.LASF172
 3522 0bb4 01       		.byte	0x1
 3523 0bb5 A905     		.2byte	0x5a9
 3524 0bb7 A2000000 		.4byte	0xa2
 3525 0bbb 02       		.uleb128 0x2
 3526 0bbc 91       		.byte	0x91
 3527 0bbd 77       		.sleb128 -9
 3528 0bbe 00       		.byte	0
 3529 0bbf 2B       		.uleb128 0x2b
 3530 0bc0 46080000 		.4byte	.LASF174
 3531 0bc4 01       		.byte	0x1
 3532 0bc5 7B05     		.2byte	0x57b
 3533 0bc7 31010000 		.4byte	0x131
 3534 0bcb 7C070000 		.4byte	.LFB93
 3535 0bcf 34000000 		.4byte	.LFE93-.LFB93
 3536 0bd3 01       		.uleb128 0x1
 3537 0bd4 9C       		.byte	0x9c
 3538 0bd5 F80B0000 		.4byte	0xbf8
 3539 0bd9 2A       		.uleb128 0x2a
 3540 0bda B7010000 		.4byte	.LASF172
 3541 0bde 01       		.byte	0x1
 3542 0bdf 7B05     		.2byte	0x57b
ARM GAS  /tmp/cccmMgvS.s 			page 89


 3543 0be1 A2000000 		.4byte	0xa2
 3544 0be5 02       		.uleb128 0x2
 3545 0be6 91       		.byte	0x91
 3546 0be7 6F       		.sleb128 -17
 3547 0be8 2C       		.uleb128 0x2c
 3548 0be9 D3030000 		.4byte	.LASF173
 3549 0bed 01       		.byte	0x1
 3550 0bee 7D05     		.2byte	0x57d
 3551 0bf0 31010000 		.4byte	0x131
 3552 0bf4 02       		.uleb128 0x2
 3553 0bf5 91       		.byte	0x91
 3554 0bf6 77       		.sleb128 -9
 3555 0bf7 00       		.byte	0
 3556 0bf8 2D       		.uleb128 0x2d
 3557 0bf9 630A0000 		.4byte	.LASF229
 3558 0bfd 01       		.byte	0x1
 3559 0bfe 5C05     		.2byte	0x55c
 3560 0c00 60070000 		.4byte	.LFB92
 3561 0c04 1C000000 		.4byte	.LFE92-.LFB92
 3562 0c08 01       		.uleb128 0x1
 3563 0c09 9C       		.byte	0x9c
 3564 0c0a 2B       		.uleb128 0x2b
 3565 0c0b 73080000 		.4byte	.LASF175
 3566 0c0f 01       		.byte	0x1
 3567 0c10 2F05     		.2byte	0x52f
 3568 0c12 25010000 		.4byte	0x125
 3569 0c16 EC060000 		.4byte	.LFB91
 3570 0c1a 74000000 		.4byte	.LFE91-.LFB91
 3571 0c1e 01       		.uleb128 0x1
 3572 0c1f 9C       		.byte	0x9c
 3573 0c20 610C0000 		.4byte	0xc61
 3574 0c24 2A       		.uleb128 0x2a
 3575 0c25 F1020000 		.4byte	.LASF176
 3576 0c29 01       		.byte	0x1
 3577 0c2a 2F05     		.2byte	0x52f
 3578 0c2c A2000000 		.4byte	0xa2
 3579 0c30 02       		.uleb128 0x2
 3580 0c31 91       		.byte	0x91
 3581 0c32 67       		.sleb128 -25
 3582 0c33 2E       		.uleb128 0x2e
 3583 0c34 746D7000 		.ascii	"tmp\000"
 3584 0c38 01       		.byte	0x1
 3585 0c39 3105     		.2byte	0x531
 3586 0c3b DD000000 		.4byte	0xdd
 3587 0c3f 02       		.uleb128 0x2
 3588 0c40 91       		.byte	0x91
 3589 0c41 6C       		.sleb128 -20
 3590 0c42 2C       		.uleb128 0x2c
 3591 0c43 49000000 		.4byte	.LASF177
 3592 0c47 01       		.byte	0x1
 3593 0c48 3205     		.2byte	0x532
 3594 0c4a DD000000 		.4byte	0xdd
 3595 0c4e 02       		.uleb128 0x2
 3596 0c4f 91       		.byte	0x91
 3597 0c50 74       		.sleb128 -12
 3598 0c51 2C       		.uleb128 0x2c
 3599 0c52 D3030000 		.4byte	.LASF173
ARM GAS  /tmp/cccmMgvS.s 			page 90


 3600 0c56 01       		.byte	0x1
 3601 0c57 3305     		.2byte	0x533
 3602 0c59 25010000 		.4byte	0x125
 3603 0c5d 02       		.uleb128 0x2
 3604 0c5e 91       		.byte	0x91
 3605 0c5f 73       		.sleb128 -13
 3606 0c60 00       		.byte	0
 3607 0c61 29       		.uleb128 0x29
 3608 0c62 AF000000 		.4byte	.LASF179
 3609 0c66 01       		.byte	0x1
 3610 0c67 0305     		.2byte	0x503
 3611 0c69 CC060000 		.4byte	.LFB90
 3612 0c6d 20000000 		.4byte	.LFE90-.LFB90
 3613 0c71 01       		.uleb128 0x1
 3614 0c72 9C       		.byte	0x9c
 3615 0c73 870C0000 		.4byte	0xc87
 3616 0c77 2A       		.uleb128 0x2a
 3617 0c78 90070000 		.4byte	.LASF180
 3618 0c7c 01       		.byte	0x1
 3619 0c7d 0305     		.2byte	0x503
 3620 0c7f A2000000 		.4byte	0xa2
 3621 0c83 02       		.uleb128 0x2
 3622 0c84 91       		.byte	0x91
 3623 0c85 77       		.sleb128 -9
 3624 0c86 00       		.byte	0
 3625 0c87 29       		.uleb128 0x29
 3626 0c88 42050000 		.4byte	.LASF181
 3627 0c8c 01       		.byte	0x1
 3628 0c8d E304     		.2byte	0x4e3
 3629 0c8f AC060000 		.4byte	.LFB89
 3630 0c93 20000000 		.4byte	.LFE89-.LFB89
 3631 0c97 01       		.uleb128 0x1
 3632 0c98 9C       		.byte	0x9c
 3633 0c99 AD0C0000 		.4byte	0xcad
 3634 0c9d 2A       		.uleb128 0x2a
 3635 0c9e 0A030000 		.4byte	.LASF182
 3636 0ca2 01       		.byte	0x1
 3637 0ca3 E304     		.2byte	0x4e3
 3638 0ca5 57010000 		.4byte	0x157
 3639 0ca9 02       		.uleb128 0x2
 3640 0caa 91       		.byte	0x91
 3641 0cab 77       		.sleb128 -9
 3642 0cac 00       		.byte	0
 3643 0cad 29       		.uleb128 0x29
 3644 0cae 13030000 		.4byte	.LASF183
 3645 0cb2 01       		.byte	0x1
 3646 0cb3 D604     		.2byte	0x4d6
 3647 0cb5 8C060000 		.4byte	.LFB88
 3648 0cb9 20000000 		.4byte	.LFE88-.LFB88
 3649 0cbd 01       		.uleb128 0x1
 3650 0cbe 9C       		.byte	0x9c
 3651 0cbf D30C0000 		.4byte	0xcd3
 3652 0cc3 2A       		.uleb128 0x2a
 3653 0cc4 0A030000 		.4byte	.LASF182
 3654 0cc8 01       		.byte	0x1
 3655 0cc9 D604     		.2byte	0x4d6
 3656 0ccb 57010000 		.4byte	0x157
ARM GAS  /tmp/cccmMgvS.s 			page 91


 3657 0ccf 02       		.uleb128 0x2
 3658 0cd0 91       		.byte	0x91
 3659 0cd1 77       		.sleb128 -9
 3660 0cd2 00       		.byte	0
 3661 0cd3 29       		.uleb128 0x29
 3662 0cd4 BD000000 		.4byte	.LASF184
 3663 0cd8 01       		.byte	0x1
 3664 0cd9 C104     		.2byte	0x4c1
 3665 0cdb 50060000 		.4byte	.LFB87
 3666 0cdf 3C000000 		.4byte	.LFE87-.LFB87
 3667 0ce3 01       		.uleb128 0x1
 3668 0ce4 9C       		.byte	0x9c
 3669 0ce5 080D0000 		.4byte	0xd08
 3670 0ce9 2A       		.uleb128 0x2a
 3671 0cea CE010000 		.4byte	.LASF185
 3672 0cee 01       		.byte	0x1
 3673 0cef C104     		.2byte	0x4c1
 3674 0cf1 DD000000 		.4byte	0xdd
 3675 0cf5 02       		.uleb128 0x2
 3676 0cf6 91       		.byte	0x91
 3677 0cf7 74       		.sleb128 -12
 3678 0cf8 2A       		.uleb128 0x2a
 3679 0cf9 0A030000 		.4byte	.LASF182
 3680 0cfd 01       		.byte	0x1
 3681 0cfe C104     		.2byte	0x4c1
 3682 0d00 57010000 		.4byte	0x157
 3683 0d04 02       		.uleb128 0x2
 3684 0d05 91       		.byte	0x91
 3685 0d06 73       		.sleb128 -13
 3686 0d07 00       		.byte	0
 3687 0d08 29       		.uleb128 0x29
 3688 0d09 C5050000 		.4byte	.LASF186
 3689 0d0d 01       		.byte	0x1
 3690 0d0e A204     		.2byte	0x4a2
 3691 0d10 14060000 		.4byte	.LFB86
 3692 0d14 3C000000 		.4byte	.LFE86-.LFB86
 3693 0d18 01       		.uleb128 0x1
 3694 0d19 9C       		.byte	0x9c
 3695 0d1a 3D0D0000 		.4byte	0xd3d
 3696 0d1e 2A       		.uleb128 0x2a
 3697 0d1f AD080000 		.4byte	.LASF187
 3698 0d23 01       		.byte	0x1
 3699 0d24 A204     		.2byte	0x4a2
 3700 0d26 DD000000 		.4byte	0xdd
 3701 0d2a 02       		.uleb128 0x2
 3702 0d2b 91       		.byte	0x91
 3703 0d2c 74       		.sleb128 -12
 3704 0d2d 2A       		.uleb128 0x2a
 3705 0d2e 0A030000 		.4byte	.LASF182
 3706 0d32 01       		.byte	0x1
 3707 0d33 A204     		.2byte	0x4a2
 3708 0d35 57010000 		.4byte	0x157
 3709 0d39 02       		.uleb128 0x2
 3710 0d3a 91       		.byte	0x91
 3711 0d3b 73       		.sleb128 -13
 3712 0d3c 00       		.byte	0
 3713 0d3d 29       		.uleb128 0x29
ARM GAS  /tmp/cccmMgvS.s 			page 92


 3714 0d3e 6A090000 		.4byte	.LASF188
 3715 0d42 01       		.byte	0x1
 3716 0d43 6704     		.2byte	0x467
 3717 0d45 D8050000 		.4byte	.LFB85
 3718 0d49 3C000000 		.4byte	.LFE85-.LFB85
 3719 0d4d 01       		.uleb128 0x1
 3720 0d4e 9C       		.byte	0x9c
 3721 0d4f 720D0000 		.4byte	0xd72
 3722 0d53 2A       		.uleb128 0x2a
 3723 0d54 CE010000 		.4byte	.LASF185
 3724 0d58 01       		.byte	0x1
 3725 0d59 6704     		.2byte	0x467
 3726 0d5b DD000000 		.4byte	0xdd
 3727 0d5f 02       		.uleb128 0x2
 3728 0d60 91       		.byte	0x91
 3729 0d61 74       		.sleb128 -12
 3730 0d62 2A       		.uleb128 0x2a
 3731 0d63 0A030000 		.4byte	.LASF182
 3732 0d67 01       		.byte	0x1
 3733 0d68 6704     		.2byte	0x467
 3734 0d6a 57010000 		.4byte	0x157
 3735 0d6e 02       		.uleb128 0x2
 3736 0d6f 91       		.byte	0x91
 3737 0d70 73       		.sleb128 -13
 3738 0d71 00       		.byte	0
 3739 0d72 29       		.uleb128 0x29
 3740 0d73 78000000 		.4byte	.LASF189
 3741 0d77 01       		.byte	0x1
 3742 0d78 4804     		.2byte	0x448
 3743 0d7a 9C050000 		.4byte	.LFB84
 3744 0d7e 3C000000 		.4byte	.LFE84-.LFB84
 3745 0d82 01       		.uleb128 0x1
 3746 0d83 9C       		.byte	0x9c
 3747 0d84 A70D0000 		.4byte	0xda7
 3748 0d88 2A       		.uleb128 0x2a
 3749 0d89 AD080000 		.4byte	.LASF187
 3750 0d8d 01       		.byte	0x1
 3751 0d8e 4804     		.2byte	0x448
 3752 0d90 DD000000 		.4byte	0xdd
 3753 0d94 02       		.uleb128 0x2
 3754 0d95 91       		.byte	0x91
 3755 0d96 74       		.sleb128 -12
 3756 0d97 2A       		.uleb128 0x2a
 3757 0d98 0A030000 		.4byte	.LASF182
 3758 0d9c 01       		.byte	0x1
 3759 0d9d 4804     		.2byte	0x448
 3760 0d9f 57010000 		.4byte	0x157
 3761 0da3 02       		.uleb128 0x2
 3762 0da4 91       		.byte	0x91
 3763 0da5 73       		.sleb128 -13
 3764 0da6 00       		.byte	0
 3765 0da7 29       		.uleb128 0x29
 3766 0da8 4D0A0000 		.4byte	.LASF190
 3767 0dac 01       		.byte	0x1
 3768 0dad 2904     		.2byte	0x429
 3769 0daf 60050000 		.4byte	.LFB83
 3770 0db3 3C000000 		.4byte	.LFE83-.LFB83
ARM GAS  /tmp/cccmMgvS.s 			page 93


 3771 0db7 01       		.uleb128 0x1
 3772 0db8 9C       		.byte	0x9c
 3773 0db9 DC0D0000 		.4byte	0xddc
 3774 0dbd 2A       		.uleb128 0x2a
 3775 0dbe 5D050000 		.4byte	.LASF191
 3776 0dc2 01       		.byte	0x1
 3777 0dc3 2904     		.2byte	0x429
 3778 0dc5 DD000000 		.4byte	0xdd
 3779 0dc9 02       		.uleb128 0x2
 3780 0dca 91       		.byte	0x91
 3781 0dcb 74       		.sleb128 -12
 3782 0dcc 2A       		.uleb128 0x2a
 3783 0dcd 0A030000 		.4byte	.LASF182
 3784 0dd1 01       		.byte	0x1
 3785 0dd2 2904     		.2byte	0x429
 3786 0dd4 57010000 		.4byte	0x157
 3787 0dd8 02       		.uleb128 0x2
 3788 0dd9 91       		.byte	0x91
 3789 0dda 73       		.sleb128 -13
 3790 0ddb 00       		.byte	0
 3791 0ddc 29       		.uleb128 0x29
 3792 0ddd D7070000 		.4byte	.LASF192
 3793 0de1 01       		.byte	0x1
 3794 0de2 8D03     		.2byte	0x38d
 3795 0de4 00040000 		.4byte	.LFB82
 3796 0de8 60010000 		.4byte	.LFE82-.LFB82
 3797 0dec 01       		.uleb128 0x1
 3798 0ded 9C       		.byte	0x9c
 3799 0dee 3E0E0000 		.4byte	0xe3e
 3800 0df2 2A       		.uleb128 0x2a
 3801 0df3 73010000 		.4byte	.LASF193
 3802 0df7 01       		.byte	0x1
 3803 0df8 8D03     		.2byte	0x38d
 3804 0dfa 3E0E0000 		.4byte	0xe3e
 3805 0dfe 02       		.uleb128 0x2
 3806 0dff 91       		.byte	0x91
 3807 0e00 64       		.sleb128 -28
 3808 0e01 2E       		.uleb128 0x2e
 3809 0e02 746D7000 		.ascii	"tmp\000"
 3810 0e06 01       		.byte	0x1
 3811 0e07 8F03     		.2byte	0x38f
 3812 0e09 DD000000 		.4byte	0xdd
 3813 0e0d 02       		.uleb128 0x2
 3814 0e0e 91       		.byte	0x91
 3815 0e0f 74       		.sleb128 -12
 3816 0e10 2C       		.uleb128 0x2c
 3817 0e11 14050000 		.4byte	.LASF194
 3818 0e15 01       		.byte	0x1
 3819 0e16 8F03     		.2byte	0x38f
 3820 0e18 DD000000 		.4byte	0xdd
 3821 0e1c 02       		.uleb128 0x2
 3822 0e1d 91       		.byte	0x91
 3823 0e1e 70       		.sleb128 -16
 3824 0e1f 2C       		.uleb128 0x2c
 3825 0e20 820A0000 		.4byte	.LASF195
 3826 0e24 01       		.byte	0x1
 3827 0e25 8F03     		.2byte	0x38f
ARM GAS  /tmp/cccmMgvS.s 			page 94


 3828 0e27 DD000000 		.4byte	0xdd
 3829 0e2b 02       		.uleb128 0x2
 3830 0e2c 91       		.byte	0x91
 3831 0e2d 6C       		.sleb128 -20
 3832 0e2e 2C       		.uleb128 0x2c
 3833 0e2f 64040000 		.4byte	.LASF196
 3834 0e33 01       		.byte	0x1
 3835 0e34 8F03     		.2byte	0x38f
 3836 0e36 DD000000 		.4byte	0xdd
 3837 0e3a 02       		.uleb128 0x2
 3838 0e3b 91       		.byte	0x91
 3839 0e3c 68       		.sleb128 -24
 3840 0e3d 00       		.byte	0
 3841 0e3e 13       		.uleb128 0x13
 3842 0e3f 04       		.byte	0x4
 3843 0e40 65020000 		.4byte	0x265
 3844 0e44 29       		.uleb128 0x29
 3845 0e45 25050000 		.4byte	.LASF197
 3846 0e49 01       		.byte	0x1
 3847 0e4a 7E03     		.2byte	0x37e
 3848 0e4c E0030000 		.4byte	.LFB81
 3849 0e50 20000000 		.4byte	.LFE81-.LFB81
 3850 0e54 01       		.uleb128 0x1
 3851 0e55 9C       		.byte	0x9c
 3852 0e56 6A0E0000 		.4byte	0xe6a
 3853 0e5a 2A       		.uleb128 0x2a
 3854 0e5b 0A030000 		.4byte	.LASF182
 3855 0e5f 01       		.byte	0x1
 3856 0e60 7E03     		.2byte	0x37e
 3857 0e62 57010000 		.4byte	0x157
 3858 0e66 02       		.uleb128 0x2
 3859 0e67 91       		.byte	0x91
 3860 0e68 77       		.sleb128 -9
 3861 0e69 00       		.byte	0
 3862 0e6a 29       		.uleb128 0x29
 3863 0e6b 190A0000 		.4byte	.LASF198
 3864 0e6f 01       		.byte	0x1
 3865 0e70 7003     		.2byte	0x370
 3866 0e72 BC030000 		.4byte	.LFB80
 3867 0e76 24000000 		.4byte	.LFE80-.LFB80
 3868 0e7a 01       		.uleb128 0x1
 3869 0e7b 9C       		.byte	0x9c
 3870 0e7c 900E0000 		.4byte	0xe90
 3871 0e80 2A       		.uleb128 0x2a
 3872 0e81 6A040000 		.4byte	.LASF199
 3873 0e85 01       		.byte	0x1
 3874 0e86 7003     		.2byte	0x370
 3875 0e88 DD000000 		.4byte	0xdd
 3876 0e8c 02       		.uleb128 0x2
 3877 0e8d 91       		.byte	0x91
 3878 0e8e 74       		.sleb128 -12
 3879 0e8f 00       		.byte	0
 3880 0e90 29       		.uleb128 0x29
 3881 0e91 27060000 		.4byte	.LASF200
 3882 0e95 01       		.byte	0x1
 3883 0e96 5F03     		.2byte	0x35f
 3884 0e98 9C030000 		.4byte	.LFB79
ARM GAS  /tmp/cccmMgvS.s 			page 95


 3885 0e9c 20000000 		.4byte	.LFE79-.LFB79
 3886 0ea0 01       		.uleb128 0x1
 3887 0ea1 9C       		.byte	0x9c
 3888 0ea2 B60E0000 		.4byte	0xeb6
 3889 0ea6 2A       		.uleb128 0x2a
 3890 0ea7 0A030000 		.4byte	.LASF182
 3891 0eab 01       		.byte	0x1
 3892 0eac 5F03     		.2byte	0x35f
 3893 0eae 57010000 		.4byte	0x157
 3894 0eb2 02       		.uleb128 0x2
 3895 0eb3 91       		.byte	0x91
 3896 0eb4 77       		.sleb128 -9
 3897 0eb5 00       		.byte	0
 3898 0eb6 29       		.uleb128 0x29
 3899 0eb7 E3020000 		.4byte	.LASF201
 3900 0ebb 01       		.byte	0x1
 3901 0ebc 3E03     		.2byte	0x33e
 3902 0ebe 5C030000 		.4byte	.LFB78
 3903 0ec2 40000000 		.4byte	.LFE78-.LFB78
 3904 0ec6 01       		.uleb128 0x1
 3905 0ec7 9C       		.byte	0x9c
 3906 0ec8 DC0E0000 		.4byte	0xedc
 3907 0ecc 2A       		.uleb128 0x2a
 3908 0ecd 1D000000 		.4byte	.LASF202
 3909 0ed1 01       		.byte	0x1
 3910 0ed2 3E03     		.2byte	0x33e
 3911 0ed4 A2000000 		.4byte	0xa2
 3912 0ed8 02       		.uleb128 0x2
 3913 0ed9 91       		.byte	0x91
 3914 0eda 77       		.sleb128 -9
 3915 0edb 00       		.byte	0
 3916 0edc 29       		.uleb128 0x29
 3917 0edd 5C060000 		.4byte	.LASF203
 3918 0ee1 01       		.byte	0x1
 3919 0ee2 FF02     		.2byte	0x2ff
 3920 0ee4 24030000 		.4byte	.LFB77
 3921 0ee8 38000000 		.4byte	.LFE77-.LFB77
 3922 0eec 01       		.uleb128 0x1
 3923 0eed 9C       		.byte	0x9c
 3924 0eee 110F0000 		.4byte	0xf11
 3925 0ef2 2A       		.uleb128 0x2a
 3926 0ef3 6D060000 		.4byte	.LASF204
 3927 0ef7 01       		.byte	0x1
 3928 0ef8 FF02     		.2byte	0x2ff
 3929 0efa DD000000 		.4byte	0xdd
 3930 0efe 02       		.uleb128 0x2
 3931 0eff 91       		.byte	0x91
 3932 0f00 6C       		.sleb128 -20
 3933 0f01 2C       		.uleb128 0x2c
 3934 0f02 0C020000 		.4byte	.LASF205
 3935 0f06 01       		.byte	0x1
 3936 0f07 0103     		.2byte	0x301
 3937 0f09 DD000000 		.4byte	0xdd
 3938 0f0d 02       		.uleb128 0x2
 3939 0f0e 91       		.byte	0x91
 3940 0f0f 74       		.sleb128 -12
 3941 0f10 00       		.byte	0
ARM GAS  /tmp/cccmMgvS.s 			page 96


 3942 0f11 29       		.uleb128 0x29
 3943 0f12 710A0000 		.4byte	.LASF206
 3944 0f16 01       		.byte	0x1
 3945 0f17 D902     		.2byte	0x2d9
 3946 0f19 08030000 		.4byte	.LFB76
 3947 0f1d 1C000000 		.4byte	.LFE76-.LFB76
 3948 0f21 01       		.uleb128 0x1
 3949 0f22 9C       		.byte	0x9c
 3950 0f23 370F0000 		.4byte	0xf37
 3951 0f27 2A       		.uleb128 0x2a
 3952 0f28 FC060000 		.4byte	.LASF207
 3953 0f2c 01       		.byte	0x1
 3954 0f2d D902     		.2byte	0x2d9
 3955 0f2f DD000000 		.4byte	0xdd
 3956 0f33 02       		.uleb128 0x2
 3957 0f34 91       		.byte	0x91
 3958 0f35 74       		.sleb128 -12
 3959 0f36 00       		.byte	0
 3960 0f37 29       		.uleb128 0x29
 3961 0f38 81090000 		.4byte	.LASF208
 3962 0f3c 01       		.byte	0x1
 3963 0f3d BD02     		.2byte	0x2bd
 3964 0f3f BC020000 		.4byte	.LFB75
 3965 0f43 4C000000 		.4byte	.LFE75-.LFB75
 3966 0f47 01       		.uleb128 0x1
 3967 0f48 9C       		.byte	0x9c
 3968 0f49 6C0F0000 		.4byte	0xf6c
 3969 0f4d 2A       		.uleb128 0x2a
 3970 0f4e B7010000 		.4byte	.LASF172
 3971 0f52 01       		.byte	0x1
 3972 0f53 BD02     		.2byte	0x2bd
 3973 0f55 A2000000 		.4byte	0xa2
 3974 0f59 02       		.uleb128 0x2
 3975 0f5a 91       		.byte	0x91
 3976 0f5b 77       		.sleb128 -9
 3977 0f5c 2A       		.uleb128 0x2a
 3978 0f5d 0A030000 		.4byte	.LASF182
 3979 0f61 01       		.byte	0x1
 3980 0f62 BD02     		.2byte	0x2bd
 3981 0f64 57010000 		.4byte	0x157
 3982 0f68 02       		.uleb128 0x2
 3983 0f69 91       		.byte	0x91
 3984 0f6a 76       		.sleb128 -10
 3985 0f6b 00       		.byte	0
 3986 0f6c 29       		.uleb128 0x29
 3987 0f6d 45070000 		.4byte	.LASF209
 3988 0f71 01       		.byte	0x1
 3989 0f72 9502     		.2byte	0x295
 3990 0f74 84020000 		.4byte	.LFB74
 3991 0f78 38000000 		.4byte	.LFE74-.LFB74
 3992 0f7c 01       		.uleb128 0x1
 3993 0f7d 9C       		.byte	0x9c
 3994 0f7e A10F0000 		.4byte	0xfa1
 3995 0f82 2A       		.uleb128 0x2a
 3996 0f83 0C000000 		.4byte	.LASF210
 3997 0f87 01       		.byte	0x1
 3998 0f88 9502     		.2byte	0x295
ARM GAS  /tmp/cccmMgvS.s 			page 97


 3999 0f8a DD000000 		.4byte	0xdd
 4000 0f8e 02       		.uleb128 0x2
 4001 0f8f 91       		.byte	0x91
 4002 0f90 6C       		.sleb128 -20
 4003 0f91 2C       		.uleb128 0x2c
 4004 0f92 0C020000 		.4byte	.LASF205
 4005 0f96 01       		.byte	0x1
 4006 0f97 9702     		.2byte	0x297
 4007 0f99 DD000000 		.4byte	0xdd
 4008 0f9d 02       		.uleb128 0x2
 4009 0f9e 91       		.byte	0x91
 4010 0f9f 74       		.sleb128 -12
 4011 0fa0 00       		.byte	0
 4012 0fa1 29       		.uleb128 0x29
 4013 0fa2 86020000 		.4byte	.LASF211
 4014 0fa6 01       		.byte	0x1
 4015 0fa7 7B02     		.2byte	0x27b
 4016 0fa9 4C020000 		.4byte	.LFB73
 4017 0fad 38000000 		.4byte	.LFE73-.LFB73
 4018 0fb1 01       		.uleb128 0x1
 4019 0fb2 9C       		.byte	0x9c
 4020 0fb3 D60F0000 		.4byte	0xfd6
 4021 0fb7 2A       		.uleb128 0x2a
 4022 0fb8 0C000000 		.4byte	.LASF210
 4023 0fbc 01       		.byte	0x1
 4024 0fbd 7B02     		.2byte	0x27b
 4025 0fbf DD000000 		.4byte	0xdd
 4026 0fc3 02       		.uleb128 0x2
 4027 0fc4 91       		.byte	0x91
 4028 0fc5 6C       		.sleb128 -20
 4029 0fc6 2C       		.uleb128 0x2c
 4030 0fc7 0C020000 		.4byte	.LASF205
 4031 0fcb 01       		.byte	0x1
 4032 0fcc 7D02     		.2byte	0x27d
 4033 0fce DD000000 		.4byte	0xdd
 4034 0fd2 02       		.uleb128 0x2
 4035 0fd3 91       		.byte	0x91
 4036 0fd4 74       		.sleb128 -12
 4037 0fd5 00       		.byte	0
 4038 0fd6 29       		.uleb128 0x29
 4039 0fd7 AE020000 		.4byte	.LASF212
 4040 0fdb 01       		.byte	0x1
 4041 0fdc 6102     		.2byte	0x261
 4042 0fde 14020000 		.4byte	.LFB72
 4043 0fe2 38000000 		.4byte	.LFE72-.LFB72
 4044 0fe6 01       		.uleb128 0x1
 4045 0fe7 9C       		.byte	0x9c
 4046 0fe8 0B100000 		.4byte	0x100b
 4047 0fec 2A       		.uleb128 0x2a
 4048 0fed 36040000 		.4byte	.LASF213
 4049 0ff1 01       		.byte	0x1
 4050 0ff2 6102     		.2byte	0x261
 4051 0ff4 DD000000 		.4byte	0xdd
 4052 0ff8 02       		.uleb128 0x2
 4053 0ff9 91       		.byte	0x91
 4054 0ffa 6C       		.sleb128 -20
 4055 0ffb 2C       		.uleb128 0x2c
ARM GAS  /tmp/cccmMgvS.s 			page 98


 4056 0ffc 0C020000 		.4byte	.LASF205
 4057 1000 01       		.byte	0x1
 4058 1001 6302     		.2byte	0x263
 4059 1003 DD000000 		.4byte	0xdd
 4060 1007 02       		.uleb128 0x2
 4061 1008 91       		.byte	0x91
 4062 1009 74       		.sleb128 -12
 4063 100a 00       		.byte	0
 4064 100b 2F       		.uleb128 0x2f
 4065 100c 8D030000 		.4byte	.LASF235
 4066 1010 01       		.byte	0x1
 4067 1011 4C02     		.2byte	0x24c
 4068 1013 A2000000 		.4byte	0xa2
 4069 1017 F8010000 		.4byte	.LFB71
 4070 101b 1C000000 		.4byte	.LFE71-.LFB71
 4071 101f 01       		.uleb128 0x1
 4072 1020 9C       		.byte	0x9c
 4073 1021 29       		.uleb128 0x29
 4074 1022 CB020000 		.4byte	.LASF214
 4075 1026 01       		.byte	0x1
 4076 1027 3502     		.2byte	0x235
 4077 1029 C0010000 		.4byte	.LFB70
 4078 102d 38000000 		.4byte	.LFE70-.LFB70
 4079 1031 01       		.uleb128 0x1
 4080 1032 9C       		.byte	0x9c
 4081 1033 56100000 		.4byte	0x1056
 4082 1037 2A       		.uleb128 0x2a
 4083 1038 55070000 		.4byte	.LASF215
 4084 103c 01       		.byte	0x1
 4085 103d 3502     		.2byte	0x235
 4086 103f DD000000 		.4byte	0xdd
 4087 1043 02       		.uleb128 0x2
 4088 1044 91       		.byte	0x91
 4089 1045 6C       		.sleb128 -20
 4090 1046 2C       		.uleb128 0x2c
 4091 1047 0C020000 		.4byte	.LASF205
 4092 104b 01       		.byte	0x1
 4093 104c 3702     		.2byte	0x237
 4094 104e DD000000 		.4byte	0xdd
 4095 1052 02       		.uleb128 0x2
 4096 1053 91       		.byte	0x91
 4097 1054 74       		.sleb128 -12
 4098 1055 00       		.byte	0
 4099 1056 29       		.uleb128 0x29
 4100 1057 21070000 		.4byte	.LASF216
 4101 105b 01       		.byte	0x1
 4102 105c 9201     		.2byte	0x192
 4103 105e A0010000 		.4byte	.LFB69
 4104 1062 20000000 		.4byte	.LFE69-.LFB69
 4105 1066 01       		.uleb128 0x1
 4106 1067 9C       		.byte	0x9c
 4107 1068 7C100000 		.4byte	0x107c
 4108 106c 2A       		.uleb128 0x2a
 4109 106d 0A030000 		.4byte	.LASF182
 4110 1071 01       		.byte	0x1
 4111 1072 9201     		.2byte	0x192
 4112 1074 57010000 		.4byte	0x157
ARM GAS  /tmp/cccmMgvS.s 			page 99


 4113 1078 02       		.uleb128 0x2
 4114 1079 91       		.byte	0x91
 4115 107a 77       		.sleb128 -9
 4116 107b 00       		.byte	0
 4117 107c 29       		.uleb128 0x29
 4118 107d C0090000 		.4byte	.LASF217
 4119 1081 01       		.byte	0x1
 4120 1082 7B01     		.2byte	0x17b
 4121 1084 64010000 		.4byte	.LFB68
 4122 1088 3C000000 		.4byte	.LFE68-.LFB68
 4123 108c 01       		.uleb128 0x1
 4124 108d 9C       		.byte	0x9c
 4125 108e C0100000 		.4byte	0x10c0
 4126 1092 2A       		.uleb128 0x2a
 4127 1093 7F030000 		.4byte	.LASF218
 4128 1097 01       		.byte	0x1
 4129 1098 7B01     		.2byte	0x17b
 4130 109a DD000000 		.4byte	0xdd
 4131 109e 02       		.uleb128 0x2
 4132 109f 91       		.byte	0x91
 4133 10a0 6C       		.sleb128 -20
 4134 10a1 2A       		.uleb128 0x2a
 4135 10a2 E6090000 		.4byte	.LASF219
 4136 10a6 01       		.byte	0x1
 4137 10a7 7B01     		.2byte	0x17b
 4138 10a9 DD000000 		.4byte	0xdd
 4139 10ad 02       		.uleb128 0x2
 4140 10ae 91       		.byte	0x91
 4141 10af 68       		.sleb128 -24
 4142 10b0 2C       		.uleb128 0x2c
 4143 10b1 0C020000 		.4byte	.LASF205
 4144 10b5 01       		.byte	0x1
 4145 10b6 7D01     		.2byte	0x17d
 4146 10b8 DD000000 		.4byte	0xdd
 4147 10bc 02       		.uleb128 0x2
 4148 10bd 91       		.byte	0x91
 4149 10be 74       		.sleb128 -12
 4150 10bf 00       		.byte	0
 4151 10c0 29       		.uleb128 0x29
 4152 10c1 98080000 		.4byte	.LASF220
 4153 10c5 01       		.byte	0x1
 4154 10c6 6301     		.2byte	0x163
 4155 10c8 44010000 		.4byte	.LFB67
 4156 10cc 20000000 		.4byte	.LFE67-.LFB67
 4157 10d0 01       		.uleb128 0x1
 4158 10d1 9C       		.byte	0x9c
 4159 10d2 E6100000 		.4byte	0x10e6
 4160 10d6 2A       		.uleb128 0x2a
 4161 10d7 0A030000 		.4byte	.LASF182
 4162 10db 01       		.byte	0x1
 4163 10dc 6301     		.2byte	0x163
 4164 10de 57010000 		.4byte	0x157
 4165 10e2 02       		.uleb128 0x2
 4166 10e3 91       		.byte	0x91
 4167 10e4 77       		.sleb128 -9
 4168 10e5 00       		.byte	0
 4169 10e6 29       		.uleb128 0x29
ARM GAS  /tmp/cccmMgvS.s 			page 100


 4170 10e7 B3070000 		.4byte	.LASF221
 4171 10eb 01       		.byte	0x1
 4172 10ec 4F01     		.2byte	0x14f
 4173 10ee 08010000 		.4byte	.LFB66
 4174 10f2 3C000000 		.4byte	.LFE66-.LFB66
 4175 10f6 01       		.uleb128 0x1
 4176 10f7 9C       		.byte	0x9c
 4177 10f8 1B110000 		.4byte	0x111b
 4178 10fc 2A       		.uleb128 0x2a
 4179 10fd 0D070000 		.4byte	.LASF222
 4180 1101 01       		.byte	0x1
 4181 1102 4F01     		.2byte	0x14f
 4182 1104 A2000000 		.4byte	0xa2
 4183 1108 02       		.uleb128 0x2
 4184 1109 91       		.byte	0x91
 4185 110a 6F       		.sleb128 -17
 4186 110b 2C       		.uleb128 0x2c
 4187 110c 0C020000 		.4byte	.LASF205
 4188 1110 01       		.byte	0x1
 4189 1111 5101     		.2byte	0x151
 4190 1113 DD000000 		.4byte	0xdd
 4191 1117 02       		.uleb128 0x2
 4192 1118 91       		.byte	0x91
 4193 1119 74       		.sleb128 -12
 4194 111a 00       		.byte	0
 4195 111b 30       		.uleb128 0x30
 4196 111c BD030000 		.4byte	.LASF223
 4197 1120 01       		.byte	0x1
 4198 1121 3101     		.2byte	0x131
 4199 1123 7D010000 		.4byte	0x17d
 4200 1127 B8000000 		.4byte	.LFB65
 4201 112b 50000000 		.4byte	.LFE65-.LFB65
 4202 112f 01       		.uleb128 0x1
 4203 1130 9C       		.byte	0x9c
 4204 1131 63110000 		.4byte	0x1163
 4205 1135 2C       		.uleb128 0x2c
 4206 1136 CE060000 		.4byte	.LASF224
 4207 113a 01       		.byte	0x1
 4208 113b 3301     		.2byte	0x133
 4209 113d E8000000 		.4byte	0xe8
 4210 1141 02       		.uleb128 0x2
 4211 1142 91       		.byte	0x91
 4212 1143 70       		.sleb128 -16
 4213 1144 2C       		.uleb128 0x2c
 4214 1145 20090000 		.4byte	.LASF225
 4215 1149 01       		.byte	0x1
 4216 114a 3401     		.2byte	0x134
 4217 114c 7D010000 		.4byte	0x17d
 4218 1150 02       		.uleb128 0x2
 4219 1151 91       		.byte	0x91
 4220 1152 77       		.sleb128 -9
 4221 1153 2C       		.uleb128 0x2c
 4222 1154 A3080000 		.4byte	.LASF226
 4223 1158 01       		.byte	0x1
 4224 1159 3501     		.2byte	0x135
 4225 115b 25010000 		.4byte	0x125
 4226 115f 02       		.uleb128 0x2
ARM GAS  /tmp/cccmMgvS.s 			page 101


 4227 1160 91       		.byte	0x91
 4228 1161 76       		.sleb128 -10
 4229 1162 00       		.byte	0
 4230 1163 29       		.uleb128 0x29
 4231 1164 38060000 		.4byte	.LASF227
 4232 1168 01       		.byte	0x1
 4233 1169 0F01     		.2byte	0x10f
 4234 116b 5C000000 		.4byte	.LFB64
 4235 116f 5C000000 		.4byte	.LFE64-.LFB64
 4236 1173 01       		.uleb128 0x1
 4237 1174 9C       		.byte	0x9c
 4238 1175 89110000 		.4byte	0x1189
 4239 1179 2A       		.uleb128 0x2a
 4240 117a 66070000 		.4byte	.LASF228
 4241 117e 01       		.byte	0x1
 4242 117f 0F01     		.2byte	0x10f
 4243 1181 DD000000 		.4byte	0xdd
 4244 1185 02       		.uleb128 0x2
 4245 1186 91       		.byte	0x91
 4246 1187 74       		.sleb128 -12
 4247 1188 00       		.byte	0
 4248 1189 31       		.uleb128 0x31
 4249 118a 1C080000 		.4byte	.LASF230
 4250 118e 01       		.byte	0x1
 4251 118f DA       		.byte	0xda
 4252 1190 00000000 		.4byte	.LFB63
 4253 1194 5C000000 		.4byte	.LFE63-.LFB63
 4254 1198 01       		.uleb128 0x1
 4255 1199 9C       		.byte	0x9c
 4256 119a 00       		.byte	0
 4257              		.section	.debug_abbrev,"",%progbits
 4258              	.Ldebug_abbrev0:
 4259 0000 01       		.uleb128 0x1
 4260 0001 11       		.uleb128 0x11
 4261 0002 01       		.byte	0x1
 4262 0003 25       		.uleb128 0x25
 4263 0004 0E       		.uleb128 0xe
 4264 0005 13       		.uleb128 0x13
 4265 0006 0B       		.uleb128 0xb
 4266 0007 03       		.uleb128 0x3
 4267 0008 0E       		.uleb128 0xe
 4268 0009 1B       		.uleb128 0x1b
 4269 000a 0E       		.uleb128 0xe
 4270 000b 11       		.uleb128 0x11
 4271 000c 01       		.uleb128 0x1
 4272 000d 12       		.uleb128 0x12
 4273 000e 06       		.uleb128 0x6
 4274 000f 10       		.uleb128 0x10
 4275 0010 17       		.uleb128 0x17
 4276 0011 00       		.byte	0
 4277 0012 00       		.byte	0
 4278 0013 02       		.uleb128 0x2
 4279 0014 24       		.uleb128 0x24
 4280 0015 00       		.byte	0
 4281 0016 0B       		.uleb128 0xb
 4282 0017 0B       		.uleb128 0xb
 4283 0018 3E       		.uleb128 0x3e
ARM GAS  /tmp/cccmMgvS.s 			page 102


 4284 0019 0B       		.uleb128 0xb
 4285 001a 03       		.uleb128 0x3
 4286 001b 0E       		.uleb128 0xe
 4287 001c 00       		.byte	0
 4288 001d 00       		.byte	0
 4289 001e 03       		.uleb128 0x3
 4290 001f 16       		.uleb128 0x16
 4291 0020 00       		.byte	0
 4292 0021 03       		.uleb128 0x3
 4293 0022 0E       		.uleb128 0xe
 4294 0023 3A       		.uleb128 0x3a
 4295 0024 0B       		.uleb128 0xb
 4296 0025 3B       		.uleb128 0x3b
 4297 0026 0B       		.uleb128 0xb
 4298 0027 49       		.uleb128 0x49
 4299 0028 13       		.uleb128 0x13
 4300 0029 00       		.byte	0
 4301 002a 00       		.byte	0
 4302 002b 04       		.uleb128 0x4
 4303 002c 24       		.uleb128 0x24
 4304 002d 00       		.byte	0
 4305 002e 0B       		.uleb128 0xb
 4306 002f 0B       		.uleb128 0xb
 4307 0030 3E       		.uleb128 0x3e
 4308 0031 0B       		.uleb128 0xb
 4309 0032 03       		.uleb128 0x3
 4310 0033 08       		.uleb128 0x8
 4311 0034 00       		.byte	0
 4312 0035 00       		.byte	0
 4313 0036 05       		.uleb128 0x5
 4314 0037 26       		.uleb128 0x26
 4315 0038 00       		.byte	0
 4316 0039 49       		.uleb128 0x49
 4317 003a 13       		.uleb128 0x13
 4318 003b 00       		.byte	0
 4319 003c 00       		.byte	0
 4320 003d 06       		.uleb128 0x6
 4321 003e 35       		.uleb128 0x35
 4322 003f 00       		.byte	0
 4323 0040 49       		.uleb128 0x49
 4324 0041 13       		.uleb128 0x13
 4325 0042 00       		.byte	0
 4326 0043 00       		.byte	0
 4327 0044 07       		.uleb128 0x7
 4328 0045 34       		.uleb128 0x34
 4329 0046 00       		.byte	0
 4330 0047 03       		.uleb128 0x3
 4331 0048 0E       		.uleb128 0xe
 4332 0049 3A       		.uleb128 0x3a
 4333 004a 0B       		.uleb128 0xb
 4334 004b 3B       		.uleb128 0x3b
 4335 004c 05       		.uleb128 0x5
 4336 004d 49       		.uleb128 0x49
 4337 004e 13       		.uleb128 0x13
 4338 004f 3F       		.uleb128 0x3f
 4339 0050 19       		.uleb128 0x19
 4340 0051 3C       		.uleb128 0x3c
ARM GAS  /tmp/cccmMgvS.s 			page 103


 4341 0052 19       		.uleb128 0x19
 4342 0053 00       		.byte	0
 4343 0054 00       		.byte	0
 4344 0055 08       		.uleb128 0x8
 4345 0056 34       		.uleb128 0x34
 4346 0057 00       		.byte	0
 4347 0058 03       		.uleb128 0x3
 4348 0059 0E       		.uleb128 0xe
 4349 005a 3A       		.uleb128 0x3a
 4350 005b 0B       		.uleb128 0xb
 4351 005c 3B       		.uleb128 0x3b
 4352 005d 0B       		.uleb128 0xb
 4353 005e 49       		.uleb128 0x49
 4354 005f 13       		.uleb128 0x13
 4355 0060 3F       		.uleb128 0x3f
 4356 0061 19       		.uleb128 0x19
 4357 0062 3C       		.uleb128 0x3c
 4358 0063 19       		.uleb128 0x19
 4359 0064 00       		.byte	0
 4360 0065 00       		.byte	0
 4361 0066 09       		.uleb128 0x9
 4362 0067 04       		.uleb128 0x4
 4363 0068 01       		.byte	0x1
 4364 0069 0B       		.uleb128 0xb
 4365 006a 0B       		.uleb128 0xb
 4366 006b 49       		.uleb128 0x49
 4367 006c 13       		.uleb128 0x13
 4368 006d 3A       		.uleb128 0x3a
 4369 006e 0B       		.uleb128 0xb
 4370 006f 3B       		.uleb128 0x3b
 4371 0070 05       		.uleb128 0x5
 4372 0071 01       		.uleb128 0x1
 4373 0072 13       		.uleb128 0x13
 4374 0073 00       		.byte	0
 4375 0074 00       		.byte	0
 4376 0075 0A       		.uleb128 0xa
 4377 0076 28       		.uleb128 0x28
 4378 0077 00       		.byte	0
 4379 0078 03       		.uleb128 0x3
 4380 0079 0E       		.uleb128 0xe
 4381 007a 1C       		.uleb128 0x1c
 4382 007b 0B       		.uleb128 0xb
 4383 007c 00       		.byte	0
 4384 007d 00       		.byte	0
 4385 007e 0B       		.uleb128 0xb
 4386 007f 28       		.uleb128 0x28
 4387 0080 00       		.byte	0
 4388 0081 03       		.uleb128 0x3
 4389 0082 08       		.uleb128 0x8
 4390 0083 1C       		.uleb128 0x1c
 4391 0084 0B       		.uleb128 0xb
 4392 0085 00       		.byte	0
 4393 0086 00       		.byte	0
 4394 0087 0C       		.uleb128 0xc
 4395 0088 16       		.uleb128 0x16
 4396 0089 00       		.byte	0
 4397 008a 03       		.uleb128 0x3
ARM GAS  /tmp/cccmMgvS.s 			page 104


 4398 008b 0E       		.uleb128 0xe
 4399 008c 3A       		.uleb128 0x3a
 4400 008d 0B       		.uleb128 0xb
 4401 008e 3B       		.uleb128 0x3b
 4402 008f 05       		.uleb128 0x5
 4403 0090 49       		.uleb128 0x49
 4404 0091 13       		.uleb128 0x13
 4405 0092 00       		.byte	0
 4406 0093 00       		.byte	0
 4407 0094 0D       		.uleb128 0xd
 4408 0095 13       		.uleb128 0x13
 4409 0096 01       		.byte	0x1
 4410 0097 0B       		.uleb128 0xb
 4411 0098 0B       		.uleb128 0xb
 4412 0099 3A       		.uleb128 0x3a
 4413 009a 0B       		.uleb128 0xb
 4414 009b 3B       		.uleb128 0x3b
 4415 009c 05       		.uleb128 0x5
 4416 009d 01       		.uleb128 0x1
 4417 009e 13       		.uleb128 0x13
 4418 009f 00       		.byte	0
 4419 00a0 00       		.byte	0
 4420 00a1 0E       		.uleb128 0xe
 4421 00a2 0D       		.uleb128 0xd
 4422 00a3 00       		.byte	0
 4423 00a4 03       		.uleb128 0x3
 4424 00a5 08       		.uleb128 0x8
 4425 00a6 3A       		.uleb128 0x3a
 4426 00a7 0B       		.uleb128 0xb
 4427 00a8 3B       		.uleb128 0x3b
 4428 00a9 05       		.uleb128 0x5
 4429 00aa 49       		.uleb128 0x49
 4430 00ab 13       		.uleb128 0x13
 4431 00ac 38       		.uleb128 0x38
 4432 00ad 0B       		.uleb128 0xb
 4433 00ae 00       		.byte	0
 4434 00af 00       		.byte	0
 4435 00b0 0F       		.uleb128 0xf
 4436 00b1 0D       		.uleb128 0xd
 4437 00b2 00       		.byte	0
 4438 00b3 03       		.uleb128 0x3
 4439 00b4 0E       		.uleb128 0xe
 4440 00b5 3A       		.uleb128 0x3a
 4441 00b6 0B       		.uleb128 0xb
 4442 00b7 3B       		.uleb128 0x3b
 4443 00b8 05       		.uleb128 0x5
 4444 00b9 49       		.uleb128 0x49
 4445 00ba 13       		.uleb128 0x13
 4446 00bb 38       		.uleb128 0x38
 4447 00bc 0B       		.uleb128 0xb
 4448 00bd 00       		.byte	0
 4449 00be 00       		.byte	0
 4450 00bf 10       		.uleb128 0x10
 4451 00c0 13       		.uleb128 0x13
 4452 00c1 01       		.byte	0x1
 4453 00c2 0B       		.uleb128 0xb
 4454 00c3 0B       		.uleb128 0xb
ARM GAS  /tmp/cccmMgvS.s 			page 105


 4455 00c4 3A       		.uleb128 0x3a
 4456 00c5 0B       		.uleb128 0xb
 4457 00c6 3B       		.uleb128 0x3b
 4458 00c7 0B       		.uleb128 0xb
 4459 00c8 01       		.uleb128 0x1
 4460 00c9 13       		.uleb128 0x13
 4461 00ca 00       		.byte	0
 4462 00cb 00       		.byte	0
 4463 00cc 11       		.uleb128 0x11
 4464 00cd 0D       		.uleb128 0xd
 4465 00ce 00       		.byte	0
 4466 00cf 03       		.uleb128 0x3
 4467 00d0 0E       		.uleb128 0xe
 4468 00d1 3A       		.uleb128 0x3a
 4469 00d2 0B       		.uleb128 0xb
 4470 00d3 3B       		.uleb128 0x3b
 4471 00d4 0B       		.uleb128 0xb
 4472 00d5 49       		.uleb128 0x49
 4473 00d6 13       		.uleb128 0x13
 4474 00d7 38       		.uleb128 0x38
 4475 00d8 0B       		.uleb128 0xb
 4476 00d9 00       		.byte	0
 4477 00da 00       		.byte	0
 4478 00db 12       		.uleb128 0x12
 4479 00dc 15       		.uleb128 0x15
 4480 00dd 00       		.byte	0
 4481 00de 27       		.uleb128 0x27
 4482 00df 19       		.uleb128 0x19
 4483 00e0 00       		.byte	0
 4484 00e1 00       		.byte	0
 4485 00e2 13       		.uleb128 0x13
 4486 00e3 0F       		.uleb128 0xf
 4487 00e4 00       		.byte	0
 4488 00e5 0B       		.uleb128 0xb
 4489 00e6 0B       		.uleb128 0xb
 4490 00e7 49       		.uleb128 0x49
 4491 00e8 13       		.uleb128 0x13
 4492 00e9 00       		.byte	0
 4493 00ea 00       		.byte	0
 4494 00eb 14       		.uleb128 0x14
 4495 00ec 01       		.uleb128 0x1
 4496 00ed 01       		.byte	0x1
 4497 00ee 49       		.uleb128 0x49
 4498 00ef 13       		.uleb128 0x13
 4499 00f0 01       		.uleb128 0x1
 4500 00f1 13       		.uleb128 0x13
 4501 00f2 00       		.byte	0
 4502 00f3 00       		.byte	0
 4503 00f4 15       		.uleb128 0x15
 4504 00f5 21       		.uleb128 0x21
 4505 00f6 00       		.byte	0
 4506 00f7 49       		.uleb128 0x49
 4507 00f8 13       		.uleb128 0x13
 4508 00f9 2F       		.uleb128 0x2f
 4509 00fa 0B       		.uleb128 0xb
 4510 00fb 00       		.byte	0
 4511 00fc 00       		.byte	0
ARM GAS  /tmp/cccmMgvS.s 			page 106


 4512 00fd 16       		.uleb128 0x16
 4513 00fe 34       		.uleb128 0x34
 4514 00ff 00       		.byte	0
 4515 0100 03       		.uleb128 0x3
 4516 0101 08       		.uleb128 0x8
 4517 0102 3A       		.uleb128 0x3a
 4518 0103 0B       		.uleb128 0xb
 4519 0104 3B       		.uleb128 0x3b
 4520 0105 05       		.uleb128 0x5
 4521 0106 49       		.uleb128 0x49
 4522 0107 13       		.uleb128 0x13
 4523 0108 3F       		.uleb128 0x3f
 4524 0109 19       		.uleb128 0x19
 4525 010a 3C       		.uleb128 0x3c
 4526 010b 19       		.uleb128 0x19
 4527 010c 00       		.byte	0
 4528 010d 00       		.byte	0
 4529 010e 17       		.uleb128 0x17
 4530 010f 17       		.uleb128 0x17
 4531 0110 01       		.byte	0x1
 4532 0111 0B       		.uleb128 0xb
 4533 0112 0B       		.uleb128 0xb
 4534 0113 3A       		.uleb128 0x3a
 4535 0114 0B       		.uleb128 0xb
 4536 0115 3B       		.uleb128 0x3b
 4537 0116 0B       		.uleb128 0xb
 4538 0117 01       		.uleb128 0x1
 4539 0118 13       		.uleb128 0x13
 4540 0119 00       		.byte	0
 4541 011a 00       		.byte	0
 4542 011b 18       		.uleb128 0x18
 4543 011c 0D       		.uleb128 0xd
 4544 011d 00       		.byte	0
 4545 011e 03       		.uleb128 0x3
 4546 011f 0E       		.uleb128 0xe
 4547 0120 3A       		.uleb128 0x3a
 4548 0121 0B       		.uleb128 0xb
 4549 0122 3B       		.uleb128 0x3b
 4550 0123 0B       		.uleb128 0xb
 4551 0124 49       		.uleb128 0x49
 4552 0125 13       		.uleb128 0x13
 4553 0126 00       		.byte	0
 4554 0127 00       		.byte	0
 4555 0128 19       		.uleb128 0x19
 4556 0129 0F       		.uleb128 0xf
 4557 012a 00       		.byte	0
 4558 012b 0B       		.uleb128 0xb
 4559 012c 0B       		.uleb128 0xb
 4560 012d 00       		.byte	0
 4561 012e 00       		.byte	0
 4562 012f 1A       		.uleb128 0x1a
 4563 0130 13       		.uleb128 0x13
 4564 0131 01       		.byte	0x1
 4565 0132 03       		.uleb128 0x3
 4566 0133 0E       		.uleb128 0xe
 4567 0134 0B       		.uleb128 0xb
 4568 0135 0B       		.uleb128 0xb
ARM GAS  /tmp/cccmMgvS.s 			page 107


 4569 0136 3A       		.uleb128 0x3a
 4570 0137 0B       		.uleb128 0xb
 4571 0138 3B       		.uleb128 0x3b
 4572 0139 0B       		.uleb128 0xb
 4573 013a 01       		.uleb128 0x1
 4574 013b 13       		.uleb128 0x13
 4575 013c 00       		.byte	0
 4576 013d 00       		.byte	0
 4577 013e 1B       		.uleb128 0x1b
 4578 013f 0D       		.uleb128 0xd
 4579 0140 00       		.byte	0
 4580 0141 03       		.uleb128 0x3
 4581 0142 08       		.uleb128 0x8
 4582 0143 3A       		.uleb128 0x3a
 4583 0144 0B       		.uleb128 0xb
 4584 0145 3B       		.uleb128 0x3b
 4585 0146 0B       		.uleb128 0xb
 4586 0147 49       		.uleb128 0x49
 4587 0148 13       		.uleb128 0x13
 4588 0149 38       		.uleb128 0x38
 4589 014a 0B       		.uleb128 0xb
 4590 014b 00       		.byte	0
 4591 014c 00       		.byte	0
 4592 014d 1C       		.uleb128 0x1c
 4593 014e 13       		.uleb128 0x13
 4594 014f 01       		.byte	0x1
 4595 0150 03       		.uleb128 0x3
 4596 0151 0E       		.uleb128 0xe
 4597 0152 0B       		.uleb128 0xb
 4598 0153 05       		.uleb128 0x5
 4599 0154 3A       		.uleb128 0x3a
 4600 0155 0B       		.uleb128 0xb
 4601 0156 3B       		.uleb128 0x3b
 4602 0157 0B       		.uleb128 0xb
 4603 0158 01       		.uleb128 0x1
 4604 0159 13       		.uleb128 0x13
 4605 015a 00       		.byte	0
 4606 015b 00       		.byte	0
 4607 015c 1D       		.uleb128 0x1d
 4608 015d 0D       		.uleb128 0xd
 4609 015e 00       		.byte	0
 4610 015f 03       		.uleb128 0x3
 4611 0160 0E       		.uleb128 0xe
 4612 0161 3A       		.uleb128 0x3a
 4613 0162 0B       		.uleb128 0xb
 4614 0163 3B       		.uleb128 0x3b
 4615 0164 0B       		.uleb128 0xb
 4616 0165 49       		.uleb128 0x49
 4617 0166 13       		.uleb128 0x13
 4618 0167 38       		.uleb128 0x38
 4619 0168 05       		.uleb128 0x5
 4620 0169 00       		.byte	0
 4621 016a 00       		.byte	0
 4622 016b 1E       		.uleb128 0x1e
 4623 016c 15       		.uleb128 0x15
 4624 016d 01       		.byte	0x1
 4625 016e 27       		.uleb128 0x27
ARM GAS  /tmp/cccmMgvS.s 			page 108


 4626 016f 19       		.uleb128 0x19
 4627 0170 49       		.uleb128 0x49
 4628 0171 13       		.uleb128 0x13
 4629 0172 01       		.uleb128 0x1
 4630 0173 13       		.uleb128 0x13
 4631 0174 00       		.byte	0
 4632 0175 00       		.byte	0
 4633 0176 1F       		.uleb128 0x1f
 4634 0177 05       		.uleb128 0x5
 4635 0178 00       		.byte	0
 4636 0179 49       		.uleb128 0x49
 4637 017a 13       		.uleb128 0x13
 4638 017b 00       		.byte	0
 4639 017c 00       		.byte	0
 4640 017d 20       		.uleb128 0x20
 4641 017e 13       		.uleb128 0x13
 4642 017f 01       		.byte	0x1
 4643 0180 03       		.uleb128 0x3
 4644 0181 0E       		.uleb128 0xe
 4645 0182 0B       		.uleb128 0xb
 4646 0183 05       		.uleb128 0x5
 4647 0184 3A       		.uleb128 0x3a
 4648 0185 0B       		.uleb128 0xb
 4649 0186 3B       		.uleb128 0x3b
 4650 0187 05       		.uleb128 0x5
 4651 0188 01       		.uleb128 0x1
 4652 0189 13       		.uleb128 0x13
 4653 018a 00       		.byte	0
 4654 018b 00       		.byte	0
 4655 018c 21       		.uleb128 0x21
 4656 018d 0D       		.uleb128 0xd
 4657 018e 00       		.byte	0
 4658 018f 03       		.uleb128 0x3
 4659 0190 0E       		.uleb128 0xe
 4660 0191 3A       		.uleb128 0x3a
 4661 0192 0B       		.uleb128 0xb
 4662 0193 3B       		.uleb128 0x3b
 4663 0194 05       		.uleb128 0x5
 4664 0195 49       		.uleb128 0x49
 4665 0196 13       		.uleb128 0x13
 4666 0197 38       		.uleb128 0x38
 4667 0198 05       		.uleb128 0x5
 4668 0199 00       		.byte	0
 4669 019a 00       		.byte	0
 4670 019b 22       		.uleb128 0x22
 4671 019c 13       		.uleb128 0x13
 4672 019d 01       		.byte	0x1
 4673 019e 03       		.uleb128 0x3
 4674 019f 0E       		.uleb128 0xe
 4675 01a0 0B       		.uleb128 0xb
 4676 01a1 0B       		.uleb128 0xb
 4677 01a2 3A       		.uleb128 0x3a
 4678 01a3 0B       		.uleb128 0xb
 4679 01a4 3B       		.uleb128 0x3b
 4680 01a5 05       		.uleb128 0x5
 4681 01a6 01       		.uleb128 0x1
 4682 01a7 13       		.uleb128 0x13
ARM GAS  /tmp/cccmMgvS.s 			page 109


 4683 01a8 00       		.byte	0
 4684 01a9 00       		.byte	0
 4685 01aa 23       		.uleb128 0x23
 4686 01ab 17       		.uleb128 0x17
 4687 01ac 01       		.byte	0x1
 4688 01ad 0B       		.uleb128 0xb
 4689 01ae 0B       		.uleb128 0xb
 4690 01af 3A       		.uleb128 0x3a
 4691 01b0 0B       		.uleb128 0xb
 4692 01b1 3B       		.uleb128 0x3b
 4693 01b2 05       		.uleb128 0x5
 4694 01b3 01       		.uleb128 0x1
 4695 01b4 13       		.uleb128 0x13
 4696 01b5 00       		.byte	0
 4697 01b6 00       		.byte	0
 4698 01b7 24       		.uleb128 0x24
 4699 01b8 0D       		.uleb128 0xd
 4700 01b9 00       		.byte	0
 4701 01ba 03       		.uleb128 0x3
 4702 01bb 0E       		.uleb128 0xe
 4703 01bc 3A       		.uleb128 0x3a
 4704 01bd 0B       		.uleb128 0xb
 4705 01be 3B       		.uleb128 0x3b
 4706 01bf 05       		.uleb128 0x5
 4707 01c0 49       		.uleb128 0x49
 4708 01c1 13       		.uleb128 0x13
 4709 01c2 00       		.byte	0
 4710 01c3 00       		.byte	0
 4711 01c4 25       		.uleb128 0x25
 4712 01c5 15       		.uleb128 0x15
 4713 01c6 01       		.byte	0x1
 4714 01c7 27       		.uleb128 0x27
 4715 01c8 19       		.uleb128 0x19
 4716 01c9 01       		.uleb128 0x1
 4717 01ca 13       		.uleb128 0x13
 4718 01cb 00       		.byte	0
 4719 01cc 00       		.byte	0
 4720 01cd 26       		.uleb128 0x26
 4721 01ce 04       		.uleb128 0x4
 4722 01cf 01       		.byte	0x1
 4723 01d0 03       		.uleb128 0x3
 4724 01d1 0E       		.uleb128 0xe
 4725 01d2 0B       		.uleb128 0xb
 4726 01d3 0B       		.uleb128 0xb
 4727 01d4 49       		.uleb128 0x49
 4728 01d5 13       		.uleb128 0x13
 4729 01d6 3A       		.uleb128 0x3a
 4730 01d7 0B       		.uleb128 0xb
 4731 01d8 3B       		.uleb128 0x3b
 4732 01d9 05       		.uleb128 0x5
 4733 01da 01       		.uleb128 0x1
 4734 01db 13       		.uleb128 0x13
 4735 01dc 00       		.byte	0
 4736 01dd 00       		.byte	0
 4737 01de 27       		.uleb128 0x27
 4738 01df 28       		.uleb128 0x28
 4739 01e0 00       		.byte	0
ARM GAS  /tmp/cccmMgvS.s 			page 110


 4740 01e1 03       		.uleb128 0x3
 4741 01e2 0E       		.uleb128 0xe
 4742 01e3 1C       		.uleb128 0x1c
 4743 01e4 0D       		.uleb128 0xd
 4744 01e5 00       		.byte	0
 4745 01e6 00       		.byte	0
 4746 01e7 28       		.uleb128 0x28
 4747 01e8 34       		.uleb128 0x34
 4748 01e9 00       		.byte	0
 4749 01ea 03       		.uleb128 0x3
 4750 01eb 0E       		.uleb128 0xe
 4751 01ec 3A       		.uleb128 0x3a
 4752 01ed 0B       		.uleb128 0xb
 4753 01ee 3B       		.uleb128 0x3b
 4754 01ef 0B       		.uleb128 0xb
 4755 01f0 49       		.uleb128 0x49
 4756 01f1 13       		.uleb128 0x13
 4757 01f2 02       		.uleb128 0x2
 4758 01f3 18       		.uleb128 0x18
 4759 01f4 00       		.byte	0
 4760 01f5 00       		.byte	0
 4761 01f6 29       		.uleb128 0x29
 4762 01f7 2E       		.uleb128 0x2e
 4763 01f8 01       		.byte	0x1
 4764 01f9 3F       		.uleb128 0x3f
 4765 01fa 19       		.uleb128 0x19
 4766 01fb 03       		.uleb128 0x3
 4767 01fc 0E       		.uleb128 0xe
 4768 01fd 3A       		.uleb128 0x3a
 4769 01fe 0B       		.uleb128 0xb
 4770 01ff 3B       		.uleb128 0x3b
 4771 0200 05       		.uleb128 0x5
 4772 0201 27       		.uleb128 0x27
 4773 0202 19       		.uleb128 0x19
 4774 0203 11       		.uleb128 0x11
 4775 0204 01       		.uleb128 0x1
 4776 0205 12       		.uleb128 0x12
 4777 0206 06       		.uleb128 0x6
 4778 0207 40       		.uleb128 0x40
 4779 0208 18       		.uleb128 0x18
 4780 0209 9742     		.uleb128 0x2117
 4781 020b 19       		.uleb128 0x19
 4782 020c 01       		.uleb128 0x1
 4783 020d 13       		.uleb128 0x13
 4784 020e 00       		.byte	0
 4785 020f 00       		.byte	0
 4786 0210 2A       		.uleb128 0x2a
 4787 0211 05       		.uleb128 0x5
 4788 0212 00       		.byte	0
 4789 0213 03       		.uleb128 0x3
 4790 0214 0E       		.uleb128 0xe
 4791 0215 3A       		.uleb128 0x3a
 4792 0216 0B       		.uleb128 0xb
 4793 0217 3B       		.uleb128 0x3b
 4794 0218 05       		.uleb128 0x5
 4795 0219 49       		.uleb128 0x49
 4796 021a 13       		.uleb128 0x13
ARM GAS  /tmp/cccmMgvS.s 			page 111


 4797 021b 02       		.uleb128 0x2
 4798 021c 18       		.uleb128 0x18
 4799 021d 00       		.byte	0
 4800 021e 00       		.byte	0
 4801 021f 2B       		.uleb128 0x2b
 4802 0220 2E       		.uleb128 0x2e
 4803 0221 01       		.byte	0x1
 4804 0222 3F       		.uleb128 0x3f
 4805 0223 19       		.uleb128 0x19
 4806 0224 03       		.uleb128 0x3
 4807 0225 0E       		.uleb128 0xe
 4808 0226 3A       		.uleb128 0x3a
 4809 0227 0B       		.uleb128 0xb
 4810 0228 3B       		.uleb128 0x3b
 4811 0229 05       		.uleb128 0x5
 4812 022a 27       		.uleb128 0x27
 4813 022b 19       		.uleb128 0x19
 4814 022c 49       		.uleb128 0x49
 4815 022d 13       		.uleb128 0x13
 4816 022e 11       		.uleb128 0x11
 4817 022f 01       		.uleb128 0x1
 4818 0230 12       		.uleb128 0x12
 4819 0231 06       		.uleb128 0x6
 4820 0232 40       		.uleb128 0x40
 4821 0233 18       		.uleb128 0x18
 4822 0234 9742     		.uleb128 0x2117
 4823 0236 19       		.uleb128 0x19
 4824 0237 01       		.uleb128 0x1
 4825 0238 13       		.uleb128 0x13
 4826 0239 00       		.byte	0
 4827 023a 00       		.byte	0
 4828 023b 2C       		.uleb128 0x2c
 4829 023c 34       		.uleb128 0x34
 4830 023d 00       		.byte	0
 4831 023e 03       		.uleb128 0x3
 4832 023f 0E       		.uleb128 0xe
 4833 0240 3A       		.uleb128 0x3a
 4834 0241 0B       		.uleb128 0xb
 4835 0242 3B       		.uleb128 0x3b
 4836 0243 05       		.uleb128 0x5
 4837 0244 49       		.uleb128 0x49
 4838 0245 13       		.uleb128 0x13
 4839 0246 02       		.uleb128 0x2
 4840 0247 18       		.uleb128 0x18
 4841 0248 00       		.byte	0
 4842 0249 00       		.byte	0
 4843 024a 2D       		.uleb128 0x2d
 4844 024b 2E       		.uleb128 0x2e
 4845 024c 00       		.byte	0
 4846 024d 3F       		.uleb128 0x3f
 4847 024e 19       		.uleb128 0x19
 4848 024f 03       		.uleb128 0x3
 4849 0250 0E       		.uleb128 0xe
 4850 0251 3A       		.uleb128 0x3a
 4851 0252 0B       		.uleb128 0xb
 4852 0253 3B       		.uleb128 0x3b
 4853 0254 05       		.uleb128 0x5
ARM GAS  /tmp/cccmMgvS.s 			page 112


 4854 0255 27       		.uleb128 0x27
 4855 0256 19       		.uleb128 0x19
 4856 0257 11       		.uleb128 0x11
 4857 0258 01       		.uleb128 0x1
 4858 0259 12       		.uleb128 0x12
 4859 025a 06       		.uleb128 0x6
 4860 025b 40       		.uleb128 0x40
 4861 025c 18       		.uleb128 0x18
 4862 025d 9742     		.uleb128 0x2117
 4863 025f 19       		.uleb128 0x19
 4864 0260 00       		.byte	0
 4865 0261 00       		.byte	0
 4866 0262 2E       		.uleb128 0x2e
 4867 0263 34       		.uleb128 0x34
 4868 0264 00       		.byte	0
 4869 0265 03       		.uleb128 0x3
 4870 0266 08       		.uleb128 0x8
 4871 0267 3A       		.uleb128 0x3a
 4872 0268 0B       		.uleb128 0xb
 4873 0269 3B       		.uleb128 0x3b
 4874 026a 05       		.uleb128 0x5
 4875 026b 49       		.uleb128 0x49
 4876 026c 13       		.uleb128 0x13
 4877 026d 02       		.uleb128 0x2
 4878 026e 18       		.uleb128 0x18
 4879 026f 00       		.byte	0
 4880 0270 00       		.byte	0
 4881 0271 2F       		.uleb128 0x2f
 4882 0272 2E       		.uleb128 0x2e
 4883 0273 00       		.byte	0
 4884 0274 3F       		.uleb128 0x3f
 4885 0275 19       		.uleb128 0x19
 4886 0276 03       		.uleb128 0x3
 4887 0277 0E       		.uleb128 0xe
 4888 0278 3A       		.uleb128 0x3a
 4889 0279 0B       		.uleb128 0xb
 4890 027a 3B       		.uleb128 0x3b
 4891 027b 05       		.uleb128 0x5
 4892 027c 27       		.uleb128 0x27
 4893 027d 19       		.uleb128 0x19
 4894 027e 49       		.uleb128 0x49
 4895 027f 13       		.uleb128 0x13
 4896 0280 11       		.uleb128 0x11
 4897 0281 01       		.uleb128 0x1
 4898 0282 12       		.uleb128 0x12
 4899 0283 06       		.uleb128 0x6
 4900 0284 40       		.uleb128 0x40
 4901 0285 18       		.uleb128 0x18
 4902 0286 9742     		.uleb128 0x2117
 4903 0288 19       		.uleb128 0x19
 4904 0289 00       		.byte	0
 4905 028a 00       		.byte	0
 4906 028b 30       		.uleb128 0x30
 4907 028c 2E       		.uleb128 0x2e
 4908 028d 01       		.byte	0x1
 4909 028e 3F       		.uleb128 0x3f
 4910 028f 19       		.uleb128 0x19
ARM GAS  /tmp/cccmMgvS.s 			page 113


 4911 0290 03       		.uleb128 0x3
 4912 0291 0E       		.uleb128 0xe
 4913 0292 3A       		.uleb128 0x3a
 4914 0293 0B       		.uleb128 0xb
 4915 0294 3B       		.uleb128 0x3b
 4916 0295 05       		.uleb128 0x5
 4917 0296 27       		.uleb128 0x27
 4918 0297 19       		.uleb128 0x19
 4919 0298 49       		.uleb128 0x49
 4920 0299 13       		.uleb128 0x13
 4921 029a 11       		.uleb128 0x11
 4922 029b 01       		.uleb128 0x1
 4923 029c 12       		.uleb128 0x12
 4924 029d 06       		.uleb128 0x6
 4925 029e 40       		.uleb128 0x40
 4926 029f 18       		.uleb128 0x18
 4927 02a0 9642     		.uleb128 0x2116
 4928 02a2 19       		.uleb128 0x19
 4929 02a3 01       		.uleb128 0x1
 4930 02a4 13       		.uleb128 0x13
 4931 02a5 00       		.byte	0
 4932 02a6 00       		.byte	0
 4933 02a7 31       		.uleb128 0x31
 4934 02a8 2E       		.uleb128 0x2e
 4935 02a9 00       		.byte	0
 4936 02aa 3F       		.uleb128 0x3f
 4937 02ab 19       		.uleb128 0x19
 4938 02ac 03       		.uleb128 0x3
 4939 02ad 0E       		.uleb128 0xe
 4940 02ae 3A       		.uleb128 0x3a
 4941 02af 0B       		.uleb128 0xb
 4942 02b0 3B       		.uleb128 0x3b
 4943 02b1 0B       		.uleb128 0xb
 4944 02b2 27       		.uleb128 0x27
 4945 02b3 19       		.uleb128 0x19
 4946 02b4 11       		.uleb128 0x11
 4947 02b5 01       		.uleb128 0x1
 4948 02b6 12       		.uleb128 0x12
 4949 02b7 06       		.uleb128 0x6
 4950 02b8 40       		.uleb128 0x40
 4951 02b9 18       		.uleb128 0x18
 4952 02ba 9742     		.uleb128 0x2117
 4953 02bc 19       		.uleb128 0x19
 4954 02bd 00       		.byte	0
 4955 02be 00       		.byte	0
 4956 02bf 00       		.byte	0
 4957              		.section	.debug_aranges,"",%progbits
 4958 0000 1C000000 		.4byte	0x1c
 4959 0004 0200     		.2byte	0x2
 4960 0006 00000000 		.4byte	.Ldebug_info0
 4961 000a 04       		.byte	0x4
 4962 000b 00       		.byte	0
 4963 000c 0000     		.2byte	0
 4964 000e 0000     		.2byte	0
 4965 0010 00000000 		.4byte	.Ltext0
 4966 0014 D0070000 		.4byte	.Letext0-.Ltext0
 4967 0018 00000000 		.4byte	0
ARM GAS  /tmp/cccmMgvS.s 			page 114


 4968 001c 00000000 		.4byte	0
 4969              		.section	.debug_line,"",%progbits
 4970              	.Ldebug_line0:
 4971 0000 09030000 		.section	.debug_str,"MS",%progbits,1
 4971      0200AE01 
 4971      00000201 
 4971      FB0E0D00 
 4971      01010101 
 4972              	.LASF84:
 4973 0000 5F64736F 		.ascii	"_dso_handle\000"
 4973      5F68616E 
 4973      646C6500 
 4974              	.LASF210:
 4975 000c 5243435F 		.ascii	"RCC_HCLK\000"
 4975      48434C4B 
 4975      00
 4976              	.LASF57:
 4977 0015 5F66706F 		.ascii	"_fpos_t\000"
 4977      735F7400 
 4978              	.LASF202:
 4979 001d 5243435F 		.ascii	"RCC_LSE\000"
 4979      4C534500 
 4980              	.LASF93:
 4981 0025 5F5F7346 		.ascii	"__sFILE\000"
 4981      494C4500 
 4982              	.LASF83:
 4983 002d 5F666E61 		.ascii	"_fnargs\000"
 4983      72677300 
 4984              	.LASF54:
 4985 0035 6C6F6E67 		.ascii	"long double\000"
 4985      20646F75 
 4985      626C6500 
 4986              	.LASF136:
 4987 0041 5F72616E 		.ascii	"_rand48\000"
 4987      64343800 
 4988              	.LASF177:
 4989 0049 73746174 		.ascii	"statusreg\000"
 4989      75737265 
 4989      6700
 4990              	.LASF167:
 4991 0053 5F5F6664 		.ascii	"__fdlibm_xopen\000"
 4991      6C69626D 
 4991      5F786F70 
 4991      656E00
 4992              	.LASF23:
 4993 0062 466C6167 		.ascii	"FlagStatus\000"
 4993      53746174 
 4993      757300
 4994              	.LASF116:
 4995 006d 5F656D65 		.ascii	"_emergency\000"
 4995      7267656E 
 4995      637900
 4996              	.LASF189:
 4997 0078 5243435F 		.ascii	"RCC_APB2PeriphClockCmd\000"
 4997      41504232 
 4997      50657269 
 4997      7068436C 
ARM GAS  /tmp/cccmMgvS.s 			page 115


 4997      6F636B43 
 4998              	.LASF2:
 4999 008f 5F5F7569 		.ascii	"__uint8_t\000"
 4999      6E74385F 
 4999      7400
 5000              	.LASF152:
 5001 0099 5F676574 		.ascii	"_getdate_err\000"
 5001      64617465 
 5001      5F657272 
 5001      00
 5002              	.LASF128:
 5003 00a6 5F617465 		.ascii	"_atexit0\000"
 5003      78697430 
 5003      00
 5004              	.LASF179:
 5005 00af 5243435F 		.ascii	"RCC_MCOConfig\000"
 5005      4D434F43 
 5005      6F6E6669 
 5005      6700
 5006              	.LASF184:
 5007 00bd 5243435F 		.ascii	"RCC_APB1PeriphResetCmd\000"
 5007      41504231 
 5007      50657269 
 5007      70685265 
 5007      73657443 
 5008              	.LASF156:
 5009 00d4 5F776372 		.ascii	"_wcrtomb_state\000"
 5009      746F6D62 
 5009      5F737461 
 5009      746500
 5010              	.LASF157:
 5011 00e3 5F776373 		.ascii	"_wcsrtombs_state\000"
 5011      72746F6D 
 5011      62735F73 
 5011      74617465 
 5011      00
 5012              	.LASF178:
 5013 00f4 5243435F 		.ascii	"RCC_ClearITPendingBit\000"
 5013      436C6561 
 5013      72495450 
 5013      656E6469 
 5013      6E674269 
 5014              	.LASF12:
 5015 010a 6C6F6E67 		.ascii	"long long unsigned int\000"
 5015      206C6F6E 
 5015      6720756E 
 5015      7369676E 
 5015      65642069 
 5016              	.LASF168:
 5017 0121 5F5F6664 		.ascii	"__fdlibm_posix\000"
 5017      6C69626D 
 5017      5F706F73 
 5017      697800
 5018              	.LASF96:
 5019 0130 5F6C6266 		.ascii	"_lbfsize\000"
 5019      73697A65 
 5019      00
ARM GAS  /tmp/cccmMgvS.s 			page 116


 5020              	.LASF18:
 5021 0139 75696E74 		.ascii	"uint32_t\000"
 5021      33325F74 
 5021      00
 5022              	.LASF20:
 5023 0142 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5023      52784275 
 5023      66666572 
 5023      00
 5024              	.LASF169:
 5025 014f 5F5F6664 		.ascii	"__fdlib_version\000"
 5025      6C69625F 
 5025      76657273 
 5025      696F6E00 
 5026              	.LASF45:
 5027 015f 6779726F 		.ascii	"gyro\000"
 5027      00
 5028              	.LASF154:
 5029 0164 5F6D6272 		.ascii	"_mbrtowc_state\000"
 5029      746F7763 
 5029      5F737461 
 5029      746500
 5030              	.LASF193:
 5031 0173 5243435F 		.ascii	"RCC_Clocks\000"
 5031      436C6F63 
 5031      6B7300
 5032              	.LASF149:
 5033 017e 5F776374 		.ascii	"_wctomb_state\000"
 5033      6F6D625F 
 5033      73746174 
 5033      6500
 5034              	.LASF73:
 5035 018c 5F5F746D 		.ascii	"__tm_sec\000"
 5035      5F736563 
 5035      00
 5036              	.LASF15:
 5037 0195 696E7431 		.ascii	"int16_t\000"
 5037      365F7400 
 5038              	.LASF56:
 5039 019d 5F6F6666 		.ascii	"_off_t\000"
 5039      5F7400
 5040              	.LASF101:
 5041 01a4 5F636C6F 		.ascii	"_close\000"
 5041      736500
 5042              	.LASF0:
 5043 01ab 7369676E 		.ascii	"signed char\000"
 5043      65642063 
 5043      68617200 
 5044              	.LASF172:
 5045 01b7 5243435F 		.ascii	"RCC_IT\000"
 5045      495400
 5046              	.LASF102:
 5047 01be 5F756275 		.ascii	"_ubuf\000"
 5047      6600
 5048              	.LASF47:
 5049 01c4 47785F6F 		.ascii	"Gx_offset\000"
 5049      66667365 
ARM GAS  /tmp/cccmMgvS.s 			page 117


 5049      7400
 5050              	.LASF185:
 5051 01ce 5243435F 		.ascii	"RCC_APB1Periph\000"
 5051      41504231 
 5051      50657269 
 5051      706800
 5052              	.LASF91:
 5053 01dd 5F626173 		.ascii	"_base\000"
 5053      6500
 5054              	.LASF33:
 5055 01e3 41504231 		.ascii	"APB1RSTR\000"
 5055      52535452 
 5055      00
 5056              	.LASF131:
 5057 01ec 5F5F7366 		.ascii	"__sf\000"
 5057      00
 5058              	.LASF82:
 5059 01f1 5F6F6E5F 		.ascii	"_on_exit_args\000"
 5059      65786974 
 5059      5F617267 
 5059      7300
 5060              	.LASF50:
 5061 01ff 41636331 		.ascii	"Acc1G_Values\000"
 5061      475F5661 
 5061      6C756573 
 5061      00
 5062              	.LASF205:
 5063 020c 746D7072 		.ascii	"tmpreg\000"
 5063      656700
 5064              	.LASF97:
 5065 0213 5F636F6F 		.ascii	"_cookie\000"
 5065      6B696500 
 5066              	.LASF42:
 5067 021b 50434C4B 		.ascii	"PCLK2_Frequency\000"
 5067      325F4672 
 5067      65717565 
 5067      6E637900 
 5068              	.LASF130:
 5069 022b 5F5F7367 		.ascii	"__sglue\000"
 5069      6C756500 
 5070              	.LASF8:
 5071 0233 6C6F6E67 		.ascii	"long int\000"
 5071      20696E74 
 5071      00
 5072              	.LASF26:
 5073 023c 454E4142 		.ascii	"ENABLE\000"
 5073      4C4500
 5074              	.LASF32:
 5075 0243 41504232 		.ascii	"APB2RSTR\000"
 5075      52535452 
 5075      00
 5076              	.LASF233:
 5077 024c 2F686F6D 		.ascii	"/home/enbin/Documents/code/STM/stm32-quadrocopter\000"
 5077      652F656E 
 5077      62696E2F 
 5077      446F6375 
 5077      6D656E74 
ARM GAS  /tmp/cccmMgvS.s 			page 118


 5078              	.LASF86:
 5079 027e 5F69735F 		.ascii	"_is_cxa\000"
 5079      63786100 
 5080              	.LASF211:
 5081 0286 5243435F 		.ascii	"RCC_PCLK1Config\000"
 5081      50434C4B 
 5081      31436F6E 
 5081      66696700 
 5082              	.LASF166:
 5083 0296 5F5F6664 		.ascii	"__fdlibm_svid\000"
 5083      6C69626D 
 5083      5F737669 
 5083      6400
 5084              	.LASF122:
 5085 02a4 5F726573 		.ascii	"_result_k\000"
 5085      756C745F 
 5085      6B00
 5086              	.LASF212:
 5087 02ae 5243435F 		.ascii	"RCC_HCLKConfig\000"
 5087      48434C4B 
 5087      436F6E66 
 5087      696700
 5088              	.LASF11:
 5089 02bd 6C6F6E67 		.ascii	"long long int\000"
 5089      206C6F6E 
 5089      6720696E 
 5089      7400
 5090              	.LASF214:
 5091 02cb 5243435F 		.ascii	"RCC_SYSCLKConfig\000"
 5091      53595343 
 5091      4C4B436F 
 5091      6E666967 
 5091      00
 5092              	.LASF164:
 5093 02dc 646F7562 		.ascii	"double\000"
 5093      6C6500
 5094              	.LASF201:
 5095 02e3 5243435F 		.ascii	"RCC_LSEConfig\000"
 5095      4C534543 
 5095      6F6E6669 
 5095      6700
 5096              	.LASF176:
 5097 02f1 5243435F 		.ascii	"RCC_FLAG\000"
 5097      464C4147 
 5097      00
 5098              	.LASF126:
 5099 02fa 5F637674 		.ascii	"_cvtbuf\000"
 5099      62756600 
 5100              	.LASF105:
 5101 0302 5F6F6666 		.ascii	"_offset\000"
 5101      73657400 
 5102              	.LASF182:
 5103 030a 4E657753 		.ascii	"NewState\000"
 5103      74617465 
 5103      00
 5104              	.LASF183:
 5105 0313 5243435F 		.ascii	"RCC_BackupResetCmd\000"
ARM GAS  /tmp/cccmMgvS.s 			page 119


 5105      4261636B 
 5105      75705265 
 5105      73657443 
 5105      6D6400
 5106              	.LASF141:
 5107 0326 5F737472 		.ascii	"_strtok_last\000"
 5107      746F6B5F 
 5107      6C617374 
 5107      00
 5108              	.LASF153:
 5109 0333 5F6D6272 		.ascii	"_mbrlen_state\000"
 5109      6C656E5F 
 5109      73746174 
 5109      6500
 5110              	.LASF155:
 5111 0341 5F6D6273 		.ascii	"_mbsrtowcs_state\000"
 5111      72746F77 
 5111      63735F73 
 5111      74617465 
 5111      00
 5112              	.LASF43:
 5113 0352 41444343 		.ascii	"ADCCLK_Frequency\000"
 5113      4C4B5F46 
 5113      72657175 
 5113      656E6379 
 5113      00
 5114              	.LASF89:
 5115 0363 5F666E73 		.ascii	"_fns\000"
 5115      00
 5116              	.LASF9:
 5117 0368 5F5F7569 		.ascii	"__uint32_t\000"
 5117      6E743332 
 5117      5F7400
 5118              	.LASF30:
 5119 0373 4572726F 		.ascii	"ErrorStatus\000"
 5119      72537461 
 5119      74757300 
 5120              	.LASF218:
 5121 037f 5243435F 		.ascii	"RCC_PLLSource\000"
 5121      504C4C53 
 5121      6F757263 
 5121      6500
 5122              	.LASF235:
 5123 038d 5243435F 		.ascii	"RCC_GetSYSCLKSource\000"
 5123      47657453 
 5123      5953434C 
 5123      4B536F75 
 5123      72636500 
 5124              	.LASF162:
 5125 03a1 5F696D70 		.ascii	"_impure_ptr\000"
 5125      7572655F 
 5125      70747200 
 5126              	.LASF114:
 5127 03ad 5F737464 		.ascii	"_stderr\000"
 5127      65727200 
 5128              	.LASF71:
 5129 03b5 5F426967 		.ascii	"_Bigint\000"
ARM GAS  /tmp/cccmMgvS.s 			page 120


 5129      696E7400 
 5130              	.LASF223:
 5131 03bd 5243435F 		.ascii	"RCC_WaitForHSEStartUp\000"
 5131      57616974 
 5131      466F7248 
 5131      53455374 
 5131      61727455 
 5132              	.LASF173:
 5133 03d3 62697473 		.ascii	"bitstatus\000"
 5133      74617475 
 5133      7300
 5134              	.LASF40:
 5135 03dd 48434C4B 		.ascii	"HCLK_Frequency\000"
 5135      5F467265 
 5135      7175656E 
 5135      637900
 5136              	.LASF98:
 5137 03ec 5F726561 		.ascii	"_read\000"
 5137      6400
 5138              	.LASF24:
 5139 03f2 49545374 		.ascii	"ITStatus\000"
 5139      61747573 
 5139      00
 5140              	.LASF72:
 5141 03fb 5F5F746D 		.ascii	"__tm\000"
 5141      00
 5142              	.LASF25:
 5143 0400 44495341 		.ascii	"DISABLE\000"
 5143      424C4500 
 5144              	.LASF60:
 5145 0408 5F5F7763 		.ascii	"__wchb\000"
 5145      686200
 5146              	.LASF31:
 5147 040f 43464752 		.ascii	"CFGR\000"
 5147      00
 5148              	.LASF113:
 5149 0414 5F737464 		.ascii	"_stdout\000"
 5149      6F757400 
 5150              	.LASF125:
 5151 041c 5F637674 		.ascii	"_cvtlen\000"
 5151      6C656E00 
 5152              	.LASF10:
 5153 0424 6C6F6E67 		.ascii	"long unsigned int\000"
 5153      20756E73 
 5153      69676E65 
 5153      6420696E 
 5153      7400
 5154              	.LASF213:
 5155 0436 5243435F 		.ascii	"RCC_SYSCLK\000"
 5155      53595343 
 5155      4C4B00
 5156              	.LASF95:
 5157 0441 5F66696C 		.ascii	"_file\000"
 5157      6500
 5158              	.LASF39:
 5159 0447 53595343 		.ascii	"SYSCLK_Frequency\000"
 5159      4C4B5F46 
ARM GAS  /tmp/cccmMgvS.s 			page 121


 5159      72657175 
 5159      656E6379 
 5159      00
 5160              	.LASF38:
 5161 0458 5243435F 		.ascii	"RCC_TypeDef\000"
 5161      54797065 
 5161      44656600 
 5162              	.LASF196:
 5163 0464 70726573 		.ascii	"presc\000"
 5163      6300
 5164              	.LASF199:
 5165 046a 5243435F 		.ascii	"RCC_RTCCLKSource\000"
 5165      52544343 
 5165      4C4B536F 
 5165      75726365 
 5165      00
 5166              	.LASF106:
 5167 047b 5F646174 		.ascii	"_data\000"
 5167      6100
 5168              	.LASF134:
 5169 0481 5F6E696F 		.ascii	"_niobs\000"
 5169      627300
 5170              	.LASF232:
 5171 0488 636F6D6D 		.ascii	"common/stm32f10x_rcc.c\000"
 5171      6F6E2F73 
 5171      746D3332 
 5171      66313078 
 5171      5F726363 
 5172              	.LASF133:
 5173 049f 5F676C75 		.ascii	"_glue\000"
 5173      6500
 5174              	.LASF151:
 5175 04a5 5F736967 		.ascii	"_signal_buf\000"
 5175      6E616C5F 
 5175      62756600 
 5176              	.LASF142:
 5177 04b1 5F617363 		.ascii	"_asctime_buf\000"
 5177      74696D65 
 5177      5F627566 
 5177      00
 5178              	.LASF121:
 5179 04be 5F726573 		.ascii	"_result\000"
 5179      756C7400 
 5180              	.LASF59:
 5181 04c6 5F5F7763 		.ascii	"__wch\000"
 5181      6800
 5182              	.LASF159:
 5183 04cc 5F6E6578 		.ascii	"_nextf\000"
 5183      746600
 5184              	.LASF127:
 5185 04d3 5F6E6577 		.ascii	"_new\000"
 5185      00
 5186              	.LASF16:
 5187 04d8 75696E74 		.ascii	"uint16_t\000"
 5187      31365F74 
 5187      00
 5188              	.LASF107:
ARM GAS  /tmp/cccmMgvS.s 			page 122


 5189 04e1 5F6C6F63 		.ascii	"_lock\000"
 5189      6B00
 5190              	.LASF138:
 5191 04e7 5F6D756C 		.ascii	"_mult\000"
 5191      7400
 5192              	.LASF171:
 5193 04ed 41444350 		.ascii	"ADCPrescTable\000"
 5193      72657363 
 5193      5461626C 
 5193      6500
 5194              	.LASF99:
 5195 04fb 5F777269 		.ascii	"_write\000"
 5195      746500
 5196              	.LASF78:
 5197 0502 5F5F746D 		.ascii	"__tm_year\000"
 5197      5F796561 
 5197      7200
 5198              	.LASF61:
 5199 050c 5F5F636F 		.ascii	"__count\000"
 5199      756E7400 
 5200              	.LASF194:
 5201 0514 706C6C6D 		.ascii	"pllmull\000"
 5201      756C6C00 
 5202              	.LASF160:
 5203 051c 5F6E6D61 		.ascii	"_nmalloc\000"
 5203      6C6C6F63 
 5203      00
 5204              	.LASF197:
 5205 0525 5243435F 		.ascii	"RCC_RTCCLKCmd\000"
 5205      52544343 
 5205      4C4B436D 
 5205      6400
 5206              	.LASF19:
 5207 0533 73697A65 		.ascii	"sizetype\000"
 5207      74797065 
 5207      00
 5208              	.LASF28:
 5209 053c 4552524F 		.ascii	"ERROR\000"
 5209      5200
 5210              	.LASF181:
 5211 0542 5243435F 		.ascii	"RCC_ClockSecuritySystemCmd\000"
 5211      436C6F63 
 5211      6B536563 
 5211      75726974 
 5211      79537973 
 5212              	.LASF191:
 5213 055d 5243435F 		.ascii	"RCC_AHBPeriph\000"
 5213      41484250 
 5213      65726970 
 5213      6800
 5214              	.LASF48:
 5215 056b 47795F6F 		.ascii	"Gy_offset\000"
 5215      66667365 
 5215      7400
 5216              	.LASF70:
 5217 0575 5F776473 		.ascii	"_wds\000"
 5217      00
ARM GAS  /tmp/cccmMgvS.s 			page 123


 5218              	.LASF46:
 5219 057a 61636365 		.ascii	"accel\000"
 5219      6C00
 5220              	.LASF49:
 5221 0580 477A5F6F 		.ascii	"Gz_offset\000"
 5221      66667365 
 5221      7400
 5222              	.LASF27:
 5223 058a 46756E63 		.ascii	"FunctionalState\000"
 5223      74696F6E 
 5223      616C5374 
 5223      61746500 
 5224              	.LASF77:
 5225 059a 5F5F746D 		.ascii	"__tm_mon\000"
 5225      5F6D6F6E 
 5225      00
 5226              	.LASF87:
 5227 05a3 5F617465 		.ascii	"_atexit\000"
 5227      78697400 
 5228              	.LASF119:
 5229 05ab 5F5F7364 		.ascii	"__sdidinit\000"
 5229      6964696E 
 5229      697400
 5230              	.LASF144:
 5231 05b6 5F67616D 		.ascii	"_gamma_signgam\000"
 5231      6D615F73 
 5231      69676E67 
 5231      616D00
 5232              	.LASF186:
 5233 05c5 5243435F 		.ascii	"RCC_APB2PeriphResetCmd\000"
 5233      41504232 
 5233      50657269 
 5233      70685265 
 5233      73657443 
 5234              	.LASF58:
 5235 05dc 77696E74 		.ascii	"wint_t\000"
 5235      5F7400
 5236              	.LASF44:
 5237 05e3 5243435F 		.ascii	"RCC_ClocksTypeDef\000"
 5237      436C6F63 
 5237      6B735479 
 5237      70654465 
 5237      6600
 5238              	.LASF21:
 5239 05f5 53797374 		.ascii	"SystemCoreClock\000"
 5239      656D436F 
 5239      7265436C 
 5239      6F636B00 
 5240              	.LASF124:
 5241 0605 5F667265 		.ascii	"_freelist\000"
 5241      656C6973 
 5241      7400
 5242              	.LASF52:
 5243 060f 50697463 		.ascii	"Pitch\000"
 5243      6800
 5244              	.LASF55:
 5245 0615 5F4C4F43 		.ascii	"_LOCK_RECURSIVE_T\000"
ARM GAS  /tmp/cccmMgvS.s 			page 124


 5245      4B5F5245 
 5245      43555253 
 5245      4956455F 
 5245      5400
 5246              	.LASF200:
 5247 0627 5243435F 		.ascii	"RCC_LSICmd\000"
 5247      4C534943 
 5247      6D6400
 5248              	.LASF22:
 5249 0632 52455345 		.ascii	"RESET\000"
 5249      5400
 5250              	.LASF227:
 5251 0638 5243435F 		.ascii	"RCC_HSEConfig\000"
 5251      48534543 
 5251      6F6E6669 
 5251      6700
 5252              	.LASF17:
 5253 0646 696E7433 		.ascii	"int32_t\000"
 5253      325F7400 
 5254              	.LASF1:
 5255 064e 756E7369 		.ascii	"unsigned char\000"
 5255      676E6564 
 5255      20636861 
 5255      7200
 5256              	.LASF203:
 5257 065c 5243435F 		.ascii	"RCC_ADCCLKConfig\000"
 5257      41444343 
 5257      4C4B436F 
 5257      6E666967 
 5257      00
 5258              	.LASF204:
 5259 066d 5243435F 		.ascii	"RCC_PCLK2\000"
 5259      50434C4B 
 5259      3200
 5260              	.LASF158:
 5261 0677 5F685F65 		.ascii	"_h_errno\000"
 5261      72726E6F 
 5261      00
 5262              	.LASF64:
 5263 0680 5F666C6F 		.ascii	"_flock_t\000"
 5263      636B5F74 
 5263      00
 5264              	.LASF80:
 5265 0689 5F5F746D 		.ascii	"__tm_yday\000"
 5265      5F796461 
 5265      7900
 5266              	.LASF90:
 5267 0693 5F5F7362 		.ascii	"__sbuf\000"
 5267      756600
 5268              	.LASF109:
 5269 069a 5F666C61 		.ascii	"_flags2\000"
 5269      67733200 
 5270              	.LASF135:
 5271 06a2 5F696F62 		.ascii	"_iobs\000"
 5271      7300
 5272              	.LASF132:
 5273 06a8 5F5F4649 		.ascii	"__FILE\000"
ARM GAS  /tmp/cccmMgvS.s 			page 125


 5273      4C4500
 5274              	.LASF63:
 5275 06af 5F6D6273 		.ascii	"_mbstate_t\000"
 5275      74617465 
 5275      5F7400
 5276              	.LASF108:
 5277 06ba 5F6D6273 		.ascii	"_mbstate\000"
 5277      74617465 
 5277      00
 5278              	.LASF145:
 5279 06c3 5F72616E 		.ascii	"_rand_next\000"
 5279      645F6E65 
 5279      787400
 5280              	.LASF224:
 5281 06ce 53746172 		.ascii	"StartUpCounter\000"
 5281      74557043 
 5281      6F756E74 
 5281      657200
 5282              	.LASF147:
 5283 06dd 5F6D626C 		.ascii	"_mblen_state\000"
 5283      656E5F73 
 5283      74617465 
 5283      00
 5284              	.LASF115:
 5285 06ea 5F696E63 		.ascii	"_inc\000"
 5285      00
 5286              	.LASF88:
 5287 06ef 5F696E64 		.ascii	"_ind\000"
 5287      00
 5288              	.LASF35:
 5289 06f4 41504232 		.ascii	"APB2ENR\000"
 5289      454E5200 
 5290              	.LASF207:
 5291 06fc 5243435F 		.ascii	"RCC_USBCLKSource\000"
 5291      55534243 
 5291      4C4B536F 
 5291      75726365 
 5291      00
 5292              	.LASF222:
 5293 070d 48534943 		.ascii	"HSICalibrationValue\000"
 5293      616C6962 
 5293      72617469 
 5293      6F6E5661 
 5293      6C756500 
 5294              	.LASF216:
 5295 0721 5243435F 		.ascii	"RCC_PLLCmd\000"
 5295      504C4C43 
 5295      6D6400
 5296              	.LASF120:
 5297 072c 5F5F636C 		.ascii	"__cleanup\000"
 5297      65616E75 
 5297      7000
 5298              	.LASF68:
 5299 0736 5F6D6178 		.ascii	"_maxwds\000"
 5299      77647300 
 5300              	.LASF110:
 5301 073e 5F726565 		.ascii	"_reent\000"
ARM GAS  /tmp/cccmMgvS.s 			page 126


 5301      6E7400
 5302              	.LASF209:
 5303 0745 5243435F 		.ascii	"RCC_PCLK2Config\000"
 5303      50434C4B 
 5303      32436F6E 
 5303      66696700 
 5304              	.LASF215:
 5305 0755 5243435F 		.ascii	"RCC_SYSCLKSource\000"
 5305      53595343 
 5305      4C4B536F 
 5305      75726365 
 5305      00
 5306              	.LASF228:
 5307 0766 5243435F 		.ascii	"RCC_HSE\000"
 5307      48534500 
 5308              	.LASF62:
 5309 076e 5F5F7661 		.ascii	"__value\000"
 5309      6C756500 
 5310              	.LASF75:
 5311 0776 5F5F746D 		.ascii	"__tm_hour\000"
 5311      5F686F75 
 5311      7200
 5312              	.LASF41:
 5313 0780 50434C4B 		.ascii	"PCLK1_Frequency\000"
 5313      315F4672 
 5313      65717565 
 5313      6E637900 
 5314              	.LASF180:
 5315 0790 5243435F 		.ascii	"RCC_MCO\000"
 5315      4D434F00 
 5316              	.LASF79:
 5317 0798 5F5F746D 		.ascii	"__tm_wday\000"
 5317      5F776461 
 5317      7900
 5318              	.LASF170:
 5319 07a2 41504241 		.ascii	"APBAHBPrescTable\000"
 5319      48425072 
 5319      65736354 
 5319      61626C65 
 5319      00
 5320              	.LASF221:
 5321 07b3 5243435F 		.ascii	"RCC_AdjustHSICalibrationValue\000"
 5321      41646A75 
 5321      73744853 
 5321      4943616C 
 5321      69627261 
 5322              	.LASF51:
 5323 07d1 666C6F61 		.ascii	"float\000"
 5323      7400
 5324              	.LASF192:
 5325 07d7 5243435F 		.ascii	"RCC_GetClocksFreq\000"
 5325      47657443 
 5325      6C6F636B 
 5325      73467265 
 5325      7100
 5326              	.LASF111:
 5327 07e9 5F657272 		.ascii	"_errno\000"
ARM GAS  /tmp/cccmMgvS.s 			page 127


 5327      6E6F00
 5328              	.LASF65:
 5329 07f0 63686172 		.ascii	"char\000"
 5329      00
 5330              	.LASF104:
 5331 07f5 5F626C6B 		.ascii	"_blksize\000"
 5331      73697A65 
 5331      00
 5332              	.LASF92:
 5333 07fe 5F73697A 		.ascii	"_size\000"
 5333      6500
 5334              	.LASF13:
 5335 0804 756E7369 		.ascii	"unsigned int\000"
 5335      676E6564 
 5335      20696E74 
 5335      00
 5336              	.LASF5:
 5337 0811 5F5F7569 		.ascii	"__uint16_t\000"
 5337      6E743136 
 5337      5F7400
 5338              	.LASF230:
 5339 081c 5243435F 		.ascii	"RCC_DeInit\000"
 5339      4465496E 
 5339      697400
 5340              	.LASF4:
 5341 0827 73686F72 		.ascii	"short int\000"
 5341      7420696E 
 5341      7400
 5342              	.LASF7:
 5343 0831 5F5F696E 		.ascii	"__int32_t\000"
 5343      7433325F 
 5343      7400
 5344              	.LASF69:
 5345 083b 5F736967 		.ascii	"_sign\000"
 5345      6E00
 5346              	.LASF53:
 5347 0841 526F6C6C 		.ascii	"Roll\000"
 5347      00
 5348              	.LASF174:
 5349 0846 5243435F 		.ascii	"RCC_GetITStatus\000"
 5349      47657449 
 5349      54537461 
 5349      74757300 
 5350              	.LASF67:
 5351 0856 5F6E6578 		.ascii	"_next\000"
 5351      7400
 5352              	.LASF100:
 5353 085c 5F736565 		.ascii	"_seek\000"
 5353      6B00
 5354              	.LASF36:
 5355 0862 41504231 		.ascii	"APB1ENR\000"
 5355      454E5200 
 5356              	.LASF85:
 5357 086a 5F666E74 		.ascii	"_fntypes\000"
 5357      79706573 
 5357      00
 5358              	.LASF175:
ARM GAS  /tmp/cccmMgvS.s 			page 128


 5359 0873 5243435F 		.ascii	"RCC_GetFlagStatus\000"
 5359      47657446 
 5359      6C616753 
 5359      74617475 
 5359      7300
 5360              	.LASF6:
 5361 0885 73686F72 		.ascii	"short unsigned int\000"
 5361      7420756E 
 5361      7369676E 
 5361      65642069 
 5361      6E7400
 5362              	.LASF220:
 5363 0898 5243435F 		.ascii	"RCC_HSICmd\000"
 5363      48534943 
 5363      6D6400
 5364              	.LASF226:
 5365 08a3 48534553 		.ascii	"HSEStatus\000"
 5365      74617475 
 5365      7300
 5366              	.LASF187:
 5367 08ad 5243435F 		.ascii	"RCC_APB2Periph\000"
 5367      41504232 
 5367      50657269 
 5367      706800
 5368              	.LASF139:
 5369 08bc 5F616464 		.ascii	"_add\000"
 5369      00
 5370              	.LASF66:
 5371 08c1 5F5F554C 		.ascii	"__ULong\000"
 5371      6F6E6700 
 5372              	.LASF137:
 5373 08c9 5F736565 		.ascii	"_seed\000"
 5373      6400
 5374              	.LASF234:
 5375 08cf 5F5F6664 		.ascii	"__fdlibm_version\000"
 5375      6C69626D 
 5375      5F766572 
 5375      73696F6E 
 5375      00
 5376              	.LASF163:
 5377 08e0 5F676C6F 		.ascii	"_global_impure_ptr\000"
 5377      62616C5F 
 5377      696D7075 
 5377      72655F70 
 5377      747200
 5378              	.LASF117:
 5379 08f3 5F637572 		.ascii	"_current_category\000"
 5379      72656E74 
 5379      5F636174 
 5379      65676F72 
 5379      7900
 5380              	.LASF165:
 5381 0905 5F5F6664 		.ascii	"__fdlibm_ieee\000"
 5381      6C69626D 
 5381      5F696565 
 5381      6500
 5382              	.LASF140:
ARM GAS  /tmp/cccmMgvS.s 			page 129


 5383 0913 5F756E75 		.ascii	"_unused_rand\000"
 5383      7365645F 
 5383      72616E64 
 5383      00
 5384              	.LASF225:
 5385 0920 73746174 		.ascii	"status\000"
 5385      757300
 5386              	.LASF231:
 5387 0927 474E5520 		.ascii	"GNU C11 6.1.1 20160526 -mcpu=cortex-m3 -mthumb -g -"
 5387      43313120 
 5387      362E312E 
 5387      31203230 
 5387      31363035 
 5388 095a 666E6F2D 		.ascii	"fno-common\000"
 5388      636F6D6D 
 5388      6F6E00
 5389              	.LASF37:
 5390 0965 42444352 		.ascii	"BDCR\000"
 5390      00
 5391              	.LASF188:
 5392 096a 5243435F 		.ascii	"RCC_APB1PeriphClockCmd\000"
 5392      41504231 
 5392      50657269 
 5392      7068436C 
 5392      6F636B43 
 5393              	.LASF208:
 5394 0981 5243435F 		.ascii	"RCC_ITConfig\000"
 5394      4954436F 
 5394      6E666967 
 5394      00
 5395              	.LASF112:
 5396 098e 5F737464 		.ascii	"_stdin\000"
 5396      696E00
 5397              	.LASF94:
 5398 0995 5F666C61 		.ascii	"_flags\000"
 5398      677300
 5399              	.LASF14:
 5400 099c 75696E74 		.ascii	"uint8_t\000"
 5400      385F7400 
 5401              	.LASF150:
 5402 09a4 5F6C3634 		.ascii	"_l64a_buf\000"
 5402      615F6275 
 5402      6600
 5403              	.LASF29:
 5404 09ae 53554343 		.ascii	"SUCCESS\000"
 5404      45535300 
 5405              	.LASF129:
 5406 09b6 5F736967 		.ascii	"_sig_func\000"
 5406      5F66756E 
 5406      6300
 5407              	.LASF217:
 5408 09c0 5243435F 		.ascii	"RCC_PLLConfig\000"
 5408      504C4C43 
 5408      6F6E6669 
 5408      6700
 5409              	.LASF3:
 5410 09ce 5F5F696E 		.ascii	"__int16_t\000"
ARM GAS  /tmp/cccmMgvS.s 			page 130


 5410      7431365F 
 5410      7400
 5411              	.LASF103:
 5412 09d8 5F6E6275 		.ascii	"_nbuf\000"
 5412      6600
 5413              	.LASF161:
 5414 09de 5F756E75 		.ascii	"_unused\000"
 5414      73656400 
 5415              	.LASF219:
 5416 09e6 5243435F 		.ascii	"RCC_PLLMul\000"
 5416      504C4C4D 
 5416      756C00
 5417              	.LASF81:
 5418 09f1 5F5F746D 		.ascii	"__tm_isdst\000"
 5418      5F697364 
 5418      737400
 5419              	.LASF143:
 5420 09fc 5F6C6F63 		.ascii	"_localtime_buf\000"
 5420      616C7469 
 5420      6D655F62 
 5420      756600
 5421              	.LASF74:
 5422 0a0b 5F5F746D 		.ascii	"__tm_min\000"
 5422      5F6D696E 
 5422      00
 5423              	.LASF146:
 5424 0a14 5F723438 		.ascii	"_r48\000"
 5424      00
 5425              	.LASF198:
 5426 0a19 5243435F 		.ascii	"RCC_RTCCLKConfig\000"
 5426      52544343 
 5426      4C4B436F 
 5426      6E666967 
 5426      00
 5427              	.LASF118:
 5428 0a2a 5F637572 		.ascii	"_current_locale\000"
 5428      72656E74 
 5428      5F6C6F63 
 5428      616C6500 
 5429              	.LASF148:
 5430 0a3a 5F6D6274 		.ascii	"_mbtowc_state\000"
 5430      6F77635F 
 5430      73746174 
 5430      6500
 5431              	.LASF123:
 5432 0a48 5F703573 		.ascii	"_p5s\000"
 5432      00
 5433              	.LASF190:
 5434 0a4d 5243435F 		.ascii	"RCC_AHBPeriphClockCmd\000"
 5434      41484250 
 5434      65726970 
 5434      68436C6F 
 5434      636B436D 
 5435              	.LASF229:
 5436 0a63 5243435F 		.ascii	"RCC_ClearFlag\000"
 5436      436C6561 
 5436      72466C61 
ARM GAS  /tmp/cccmMgvS.s 			page 131


 5436      6700
 5437              	.LASF206:
 5438 0a71 5243435F 		.ascii	"RCC_USBCLKConfig\000"
 5438      55534243 
 5438      4C4B436F 
 5438      6E666967 
 5438      00
 5439              	.LASF195:
 5440 0a82 706C6C73 		.ascii	"pllsource\000"
 5440      6F757263 
 5440      6500
 5441              	.LASF76:
 5442 0a8c 5F5F746D 		.ascii	"__tm_mday\000"
 5442      5F6D6461 
 5442      7900
 5443              	.LASF34:
 5444 0a96 41484245 		.ascii	"AHBENR\000"
 5444      4E5200
 5445              		.ident	"GCC: (Arch Repository) 6.1.1 20160526"
ARM GAS  /tmp/cccmMgvS.s 			page 132


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_rcc.c
     /tmp/cccmMgvS.s:16     .data:0000000000000000 $d
     /tmp/cccmMgvS.s:19     .data:0000000000000000 APBAHBPrescTable
     /tmp/cccmMgvS.s:39     .data:0000000000000010 ADCPrescTable
     /tmp/cccmMgvS.s:45     .text:0000000000000000 $t
     /tmp/cccmMgvS.s:52     .text:0000000000000000 RCC_DeInit
     /tmp/cccmMgvS.s:113    .text:0000000000000054 $d
     /tmp/cccmMgvS.s:118    .text:000000000000005c $t
     /tmp/cccmMgvS.s:125    .text:000000000000005c RCC_HSEConfig
     /tmp/cccmMgvS.s:193    .text:00000000000000b4 $d
     /tmp/cccmMgvS.s:197    .text:00000000000000b8 $t
     /tmp/cccmMgvS.s:204    .text:00000000000000b8 RCC_WaitForHSEStartUp
     /tmp/cccmMgvS.s:1854   .text:00000000000006ec RCC_GetFlagStatus
     /tmp/cccmMgvS.s:281    .text:0000000000000108 RCC_AdjustHSICalibrationValue
     /tmp/cccmMgvS.s:332    .text:0000000000000140 $d
     /tmp/cccmMgvS.s:336    .text:0000000000000144 $t
     /tmp/cccmMgvS.s:343    .text:0000000000000144 RCC_HSICmd
     /tmp/cccmMgvS.s:377    .text:0000000000000160 $d
     /tmp/cccmMgvS.s:381    .text:0000000000000164 $t
     /tmp/cccmMgvS.s:388    .text:0000000000000164 RCC_PLLConfig
     /tmp/cccmMgvS.s:440    .text:000000000000019c $d
     /tmp/cccmMgvS.s:444    .text:00000000000001a0 $t
     /tmp/cccmMgvS.s:451    .text:00000000000001a0 RCC_PLLCmd
     /tmp/cccmMgvS.s:485    .text:00000000000001bc $d
     /tmp/cccmMgvS.s:489    .text:00000000000001c0 $t
     /tmp/cccmMgvS.s:496    .text:00000000000001c0 RCC_SYSCLKConfig
     /tmp/cccmMgvS.s:545    .text:00000000000001f4 $d
     /tmp/cccmMgvS.s:549    .text:00000000000001f8 $t
     /tmp/cccmMgvS.s:556    .text:00000000000001f8 RCC_GetSYSCLKSource
     /tmp/cccmMgvS.s:586    .text:0000000000000210 $d
     /tmp/cccmMgvS.s:590    .text:0000000000000214 $t
     /tmp/cccmMgvS.s:597    .text:0000000000000214 RCC_HCLKConfig
     /tmp/cccmMgvS.s:646    .text:0000000000000248 $d
     /tmp/cccmMgvS.s:650    .text:000000000000024c $t
     /tmp/cccmMgvS.s:657    .text:000000000000024c RCC_PCLK1Config
     /tmp/cccmMgvS.s:706    .text:0000000000000280 $d
     /tmp/cccmMgvS.s:710    .text:0000000000000284 $t
     /tmp/cccmMgvS.s:717    .text:0000000000000284 RCC_PCLK2Config
     /tmp/cccmMgvS.s:767    .text:00000000000002b8 $d
     /tmp/cccmMgvS.s:771    .text:00000000000002bc $t
     /tmp/cccmMgvS.s:778    .text:00000000000002bc RCC_ITConfig
     /tmp/cccmMgvS.s:839    .text:0000000000000304 $d
     /tmp/cccmMgvS.s:843    .text:0000000000000308 $t
     /tmp/cccmMgvS.s:850    .text:0000000000000308 RCC_USBCLKConfig
     /tmp/cccmMgvS.s:883    .text:0000000000000320 $d
     /tmp/cccmMgvS.s:887    .text:0000000000000324 $t
     /tmp/cccmMgvS.s:894    .text:0000000000000324 RCC_ADCCLKConfig
     /tmp/cccmMgvS.s:943    .text:0000000000000358 $d
     /tmp/cccmMgvS.s:947    .text:000000000000035c $t
     /tmp/cccmMgvS.s:954    .text:000000000000035c RCC_LSEConfig
     /tmp/cccmMgvS.s:1015   .text:0000000000000398 $d
     /tmp/cccmMgvS.s:1019   .text:000000000000039c $t
     /tmp/cccmMgvS.s:1026   .text:000000000000039c RCC_LSICmd
     /tmp/cccmMgvS.s:1060   .text:00000000000003b8 $d
     /tmp/cccmMgvS.s:1064   .text:00000000000003bc $t
     /tmp/cccmMgvS.s:1071   .text:00000000000003bc RCC_RTCCLKConfig
ARM GAS  /tmp/cccmMgvS.s 			page 133


     /tmp/cccmMgvS.s:1107   .text:00000000000003dc $d
     /tmp/cccmMgvS.s:1111   .text:00000000000003e0 $t
     /tmp/cccmMgvS.s:1118   .text:00000000000003e0 RCC_RTCCLKCmd
     /tmp/cccmMgvS.s:1152   .text:00000000000003fc $d
     /tmp/cccmMgvS.s:1156   .text:0000000000000400 $t
     /tmp/cccmMgvS.s:1163   .text:0000000000000400 RCC_GetClocksFreq
     /tmp/cccmMgvS.s:1379   .text:000000000000054c $d
     /tmp/cccmMgvS.s:1387   .text:0000000000000560 $t
     /tmp/cccmMgvS.s:1394   .text:0000000000000560 RCC_AHBPeriphClockCmd
     /tmp/cccmMgvS.s:1448   .text:0000000000000598 $d
     /tmp/cccmMgvS.s:1452   .text:000000000000059c $t
     /tmp/cccmMgvS.s:1459   .text:000000000000059c RCC_APB2PeriphClockCmd
     /tmp/cccmMgvS.s:1513   .text:00000000000005d4 $d
     /tmp/cccmMgvS.s:1517   .text:00000000000005d8 $t
     /tmp/cccmMgvS.s:1524   .text:00000000000005d8 RCC_APB1PeriphClockCmd
     /tmp/cccmMgvS.s:1578   .text:0000000000000610 $d
     /tmp/cccmMgvS.s:1582   .text:0000000000000614 $t
     /tmp/cccmMgvS.s:1589   .text:0000000000000614 RCC_APB2PeriphResetCmd
     /tmp/cccmMgvS.s:1643   .text:000000000000064c $d
     /tmp/cccmMgvS.s:1647   .text:0000000000000650 $t
     /tmp/cccmMgvS.s:1654   .text:0000000000000650 RCC_APB1PeriphResetCmd
     /tmp/cccmMgvS.s:1708   .text:0000000000000688 $d
     /tmp/cccmMgvS.s:1712   .text:000000000000068c $t
     /tmp/cccmMgvS.s:1719   .text:000000000000068c RCC_BackupResetCmd
     /tmp/cccmMgvS.s:1753   .text:00000000000006a8 $d
     /tmp/cccmMgvS.s:1757   .text:00000000000006ac $t
     /tmp/cccmMgvS.s:1764   .text:00000000000006ac RCC_ClockSecuritySystemCmd
     /tmp/cccmMgvS.s:1798   .text:00000000000006c8 $d
     /tmp/cccmMgvS.s:1802   .text:00000000000006cc $t
     /tmp/cccmMgvS.s:1809   .text:00000000000006cc RCC_MCOConfig
     /tmp/cccmMgvS.s:1843   .text:00000000000006e8 $d
     /tmp/cccmMgvS.s:1847   .text:00000000000006ec $t
     /tmp/cccmMgvS.s:1945   .text:000000000000075c $d
     /tmp/cccmMgvS.s:1949   .text:0000000000000760 $t
     /tmp/cccmMgvS.s:1956   .text:0000000000000760 RCC_ClearFlag
     /tmp/cccmMgvS.s:1986   .text:0000000000000778 $d
     /tmp/cccmMgvS.s:1990   .text:000000000000077c $t
     /tmp/cccmMgvS.s:1997   .text:000000000000077c RCC_GetITStatus
     /tmp/cccmMgvS.s:2048   .text:00000000000007ac $d
     /tmp/cccmMgvS.s:2052   .text:00000000000007b0 $t
     /tmp/cccmMgvS.s:2059   .text:00000000000007b0 RCC_ClearITPendingBit
     /tmp/cccmMgvS.s:2093   .text:00000000000007cc $d
                     .debug_frame:0000000000000010 $d

NO UNDEFINED SYMBOLS
