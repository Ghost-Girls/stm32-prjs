ARM GAS  /tmp/ccNus05k.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_tim.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.align	1
  16              		.global	TIM_DeInit
  17              		.syntax unified
  18              		.thumb
  19              		.thumb_func
  20              		.fpu softvfp
  21              		.type	TIM_DeInit, %function
  22              	TIM_DeInit:
  23              	.LFB64:
  24              		.file 1 "lib/src/stm32f10x_tim.c"
   1:lib/src/stm32f10x_tim.c **** /**
   2:lib/src/stm32f10x_tim.c ****   ******************************************************************************
   3:lib/src/stm32f10x_tim.c ****   * @file    stm32f10x_tim.c
   4:lib/src/stm32f10x_tim.c ****   * @author  MCD Application Team
   5:lib/src/stm32f10x_tim.c ****   * @version V3.5.0
   6:lib/src/stm32f10x_tim.c ****   * @date    11-March-2011
   7:lib/src/stm32f10x_tim.c ****   * @brief   This file provides all the TIM firmware functions.
   8:lib/src/stm32f10x_tim.c ****   ******************************************************************************
   9:lib/src/stm32f10x_tim.c ****   * @attention
  10:lib/src/stm32f10x_tim.c ****   *
  11:lib/src/stm32f10x_tim.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:lib/src/stm32f10x_tim.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:lib/src/stm32f10x_tim.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:lib/src/stm32f10x_tim.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:lib/src/stm32f10x_tim.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:lib/src/stm32f10x_tim.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:lib/src/stm32f10x_tim.c ****   *
  18:lib/src/stm32f10x_tim.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:lib/src/stm32f10x_tim.c ****   ******************************************************************************
  20:lib/src/stm32f10x_tim.c ****   */
  21:lib/src/stm32f10x_tim.c **** 
  22:lib/src/stm32f10x_tim.c **** /* Includes ------------------------------------------------------------------*/
  23:lib/src/stm32f10x_tim.c **** #include "stm32f10x_tim.h"
  24:lib/src/stm32f10x_tim.c **** #include "stm32f10x_rcc.h"
  25:lib/src/stm32f10x_tim.c **** #include "conf.h"
  26:lib/src/stm32f10x_tim.c **** 
  27:lib/src/stm32f10x_tim.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  28:lib/src/stm32f10x_tim.c ****   * @{
  29:lib/src/stm32f10x_tim.c ****   */
  30:lib/src/stm32f10x_tim.c **** 
  31:lib/src/stm32f10x_tim.c **** /** @defgroup TIM 
  32:lib/src/stm32f10x_tim.c ****   * @brief TIM driver modules
  33:lib/src/stm32f10x_tim.c ****   * @{
ARM GAS  /tmp/ccNus05k.s 			page 2


  34:lib/src/stm32f10x_tim.c ****   */
  35:lib/src/stm32f10x_tim.c **** 
  36:lib/src/stm32f10x_tim.c **** /** @defgroup TIM_Private_TypesDefinitions
  37:lib/src/stm32f10x_tim.c ****   * @{
  38:lib/src/stm32f10x_tim.c ****   */
  39:lib/src/stm32f10x_tim.c **** 
  40:lib/src/stm32f10x_tim.c **** /**
  41:lib/src/stm32f10x_tim.c ****   * @}
  42:lib/src/stm32f10x_tim.c ****   */
  43:lib/src/stm32f10x_tim.c **** 
  44:lib/src/stm32f10x_tim.c **** /** @defgroup TIM_Private_Defines
  45:lib/src/stm32f10x_tim.c ****   * @{
  46:lib/src/stm32f10x_tim.c ****   */
  47:lib/src/stm32f10x_tim.c **** 
  48:lib/src/stm32f10x_tim.c **** /* ---------------------- TIM registers bit mask ------------------------ */
  49:lib/src/stm32f10x_tim.c **** #define SMCR_ETR_Mask               ((uint16_t)0x00FF) 
  50:lib/src/stm32f10x_tim.c **** #define CCMR_Offset                 ((uint16_t)0x0018)
  51:lib/src/stm32f10x_tim.c **** #define CCER_CCE_Set                ((uint16_t)0x0001)  
  52:lib/src/stm32f10x_tim.c **** #define	CCER_CCNE_Set               ((uint16_t)0x0004) 
  53:lib/src/stm32f10x_tim.c **** 
  54:lib/src/stm32f10x_tim.c **** /**
  55:lib/src/stm32f10x_tim.c ****   * @}
  56:lib/src/stm32f10x_tim.c ****   */
  57:lib/src/stm32f10x_tim.c **** 
  58:lib/src/stm32f10x_tim.c **** /** @defgroup TIM_Private_Macros
  59:lib/src/stm32f10x_tim.c ****   * @{
  60:lib/src/stm32f10x_tim.c ****   */
  61:lib/src/stm32f10x_tim.c **** 
  62:lib/src/stm32f10x_tim.c **** /**
  63:lib/src/stm32f10x_tim.c ****   * @}
  64:lib/src/stm32f10x_tim.c ****   */
  65:lib/src/stm32f10x_tim.c **** 
  66:lib/src/stm32f10x_tim.c **** /** @defgroup TIM_Private_Variables
  67:lib/src/stm32f10x_tim.c ****   * @{
  68:lib/src/stm32f10x_tim.c ****   */
  69:lib/src/stm32f10x_tim.c **** 
  70:lib/src/stm32f10x_tim.c **** /**
  71:lib/src/stm32f10x_tim.c ****   * @}
  72:lib/src/stm32f10x_tim.c ****   */
  73:lib/src/stm32f10x_tim.c **** 
  74:lib/src/stm32f10x_tim.c **** /** @defgroup TIM_Private_FunctionPrototypes
  75:lib/src/stm32f10x_tim.c ****   * @{
  76:lib/src/stm32f10x_tim.c ****   */
  77:lib/src/stm32f10x_tim.c **** 
  78:lib/src/stm32f10x_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
  79:lib/src/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter);
  80:lib/src/stm32f10x_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
  81:lib/src/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter);
  82:lib/src/stm32f10x_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
  83:lib/src/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter);
  84:lib/src/stm32f10x_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
  85:lib/src/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter);
  86:lib/src/stm32f10x_tim.c **** /**
  87:lib/src/stm32f10x_tim.c ****   * @}
  88:lib/src/stm32f10x_tim.c ****   */
  89:lib/src/stm32f10x_tim.c **** 
  90:lib/src/stm32f10x_tim.c **** /** @defgroup TIM_Private_Macros
ARM GAS  /tmp/ccNus05k.s 			page 3


  91:lib/src/stm32f10x_tim.c ****   * @{
  92:lib/src/stm32f10x_tim.c ****   */
  93:lib/src/stm32f10x_tim.c **** 
  94:lib/src/stm32f10x_tim.c **** /**
  95:lib/src/stm32f10x_tim.c ****   * @}
  96:lib/src/stm32f10x_tim.c ****   */
  97:lib/src/stm32f10x_tim.c **** 
  98:lib/src/stm32f10x_tim.c **** /** @defgroup TIM_Private_Variables
  99:lib/src/stm32f10x_tim.c ****   * @{
 100:lib/src/stm32f10x_tim.c ****   */
 101:lib/src/stm32f10x_tim.c **** 
 102:lib/src/stm32f10x_tim.c **** /**
 103:lib/src/stm32f10x_tim.c ****   * @}
 104:lib/src/stm32f10x_tim.c ****   */
 105:lib/src/stm32f10x_tim.c **** 
 106:lib/src/stm32f10x_tim.c **** /** @defgroup TIM_Private_FunctionPrototypes
 107:lib/src/stm32f10x_tim.c ****   * @{
 108:lib/src/stm32f10x_tim.c ****   */
 109:lib/src/stm32f10x_tim.c **** 
 110:lib/src/stm32f10x_tim.c **** /**
 111:lib/src/stm32f10x_tim.c ****   * @}
 112:lib/src/stm32f10x_tim.c ****   */
 113:lib/src/stm32f10x_tim.c **** 
 114:lib/src/stm32f10x_tim.c **** /** @defgroup TIM_Private_Functions
 115:lib/src/stm32f10x_tim.c ****   * @{
 116:lib/src/stm32f10x_tim.c ****   */
 117:lib/src/stm32f10x_tim.c **** 
 118:lib/src/stm32f10x_tim.c **** /**
 119:lib/src/stm32f10x_tim.c ****   * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
 120:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
 121:lib/src/stm32f10x_tim.c ****   * @retval None
 122:lib/src/stm32f10x_tim.c ****   */
 123:lib/src/stm32f10x_tim.c **** void TIM_DeInit(TIM_TypeDef* TIMx)
 124:lib/src/stm32f10x_tim.c **** {
  25              		.loc 1 124 0
  26              		.cfi_startproc
  27              		@ args = 0, pretend = 0, frame = 8
  28              		@ frame_needed = 1, uses_anonymous_args = 0
  29 0000 80B5     		push	{r7, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 82B0     		sub	sp, sp, #8
  34              		.cfi_def_cfa_offset 16
  35 0004 00AF     		add	r7, sp, #0
  36              		.cfi_def_cfa_register 7
  37 0006 7860     		str	r0, [r7, #4]
 125:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 126:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 127:lib/src/stm32f10x_tim.c ****  
 128:lib/src/stm32f10x_tim.c ****   if (TIMx == TIM1)
  38              		.loc 1 128 0
  39 0008 7B68     		ldr	r3, [r7, #4]
  40 000a 784A     		ldr	r2, .L20
  41 000c 9342     		cmp	r3, r2
  42 000e 0AD1     		bne	.L2
 129:lib/src/stm32f10x_tim.c ****   {
ARM GAS  /tmp/ccNus05k.s 			page 4


 130:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
  43              		.loc 1 130 0
  44 0010 0121     		movs	r1, #1
  45 0012 4FF40060 		mov	r0, #2048
  46 0016 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 131:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  47              		.loc 1 131 0
  48 001a 0021     		movs	r1, #0
  49 001c 4FF40060 		mov	r0, #2048
  50 0020 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 132:lib/src/stm32f10x_tim.c ****   }     
 133:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM2)
 134:lib/src/stm32f10x_tim.c ****   {
 135:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 136:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 137:lib/src/stm32f10x_tim.c ****   }
 138:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM3)
 139:lib/src/stm32f10x_tim.c ****   {
 140:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 141:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 142:lib/src/stm32f10x_tim.c ****   }
 143:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM4)
 144:lib/src/stm32f10x_tim.c ****   {
 145:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
 146:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
 147:lib/src/stm32f10x_tim.c ****   } 
 148:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM5)
 149:lib/src/stm32f10x_tim.c ****   {
 150:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
 151:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 152:lib/src/stm32f10x_tim.c ****   } 
 153:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM6)
 154:lib/src/stm32f10x_tim.c ****   {
 155:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 156:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 157:lib/src/stm32f10x_tim.c ****   } 
 158:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM7)
 159:lib/src/stm32f10x_tim.c ****   {
 160:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
 161:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 162:lib/src/stm32f10x_tim.c ****   } 
 163:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM8)
 164:lib/src/stm32f10x_tim.c ****   {
 165:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
 166:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 167:lib/src/stm32f10x_tim.c ****   }
 168:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM9)
 169:lib/src/stm32f10x_tim.c ****   {      
 170:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
 171:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 172:lib/src/stm32f10x_tim.c ****    }  
 173:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM10)
 174:lib/src/stm32f10x_tim.c ****   {      
 175:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
 176:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 177:lib/src/stm32f10x_tim.c ****   }  
 178:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM11) 
ARM GAS  /tmp/ccNus05k.s 			page 5


 179:lib/src/stm32f10x_tim.c ****   {     
 180:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
 181:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 182:lib/src/stm32f10x_tim.c ****   }  
 183:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM12)
 184:lib/src/stm32f10x_tim.c ****   {      
 185:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
 186:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 187:lib/src/stm32f10x_tim.c ****   }  
 188:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM13) 
 189:lib/src/stm32f10x_tim.c ****   {       
 190:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
 191:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 192:lib/src/stm32f10x_tim.c ****   }
 193:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM14) 
 194:lib/src/stm32f10x_tim.c ****   {       
 195:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 196:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 197:lib/src/stm32f10x_tim.c ****   }        
 198:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM15)
 199:lib/src/stm32f10x_tim.c ****   {
 200:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 201:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 202:lib/src/stm32f10x_tim.c ****   } 
 203:lib/src/stm32f10x_tim.c ****   else if (TIMx == TIM16)
 204:lib/src/stm32f10x_tim.c ****   {
 205:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 206:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 207:lib/src/stm32f10x_tim.c ****   } 
 208:lib/src/stm32f10x_tim.c ****   else
 209:lib/src/stm32f10x_tim.c ****   {
 210:lib/src/stm32f10x_tim.c ****     if (TIMx == TIM17)
 211:lib/src/stm32f10x_tim.c ****     {
 212:lib/src/stm32f10x_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 213:lib/src/stm32f10x_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 214:lib/src/stm32f10x_tim.c ****     }  
 215:lib/src/stm32f10x_tim.c ****   }
 216:lib/src/stm32f10x_tim.c **** }
  51              		.loc 1 216 0
  52 0024 DEE0     		b	.L19
  53              	.L2:
 133:lib/src/stm32f10x_tim.c ****   {
  54              		.loc 1 133 0
  55 0026 7B68     		ldr	r3, [r7, #4]
  56 0028 B3F1804F 		cmp	r3, #1073741824
  57 002c 08D1     		bne	.L4
 135:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  58              		.loc 1 135 0
  59 002e 0121     		movs	r1, #1
  60 0030 0120     		movs	r0, #1
  61 0032 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 136:lib/src/stm32f10x_tim.c ****   }
  62              		.loc 1 136 0
  63 0036 0021     		movs	r1, #0
  64 0038 0120     		movs	r0, #1
  65 003a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  66              		.loc 1 216 0
ARM GAS  /tmp/ccNus05k.s 			page 6


  67 003e D1E0     		b	.L19
  68              	.L4:
 138:lib/src/stm32f10x_tim.c ****   {
  69              		.loc 1 138 0
  70 0040 7B68     		ldr	r3, [r7, #4]
  71 0042 6B4A     		ldr	r2, .L20+4
  72 0044 9342     		cmp	r3, r2
  73 0046 08D1     		bne	.L5
 140:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  74              		.loc 1 140 0
  75 0048 0121     		movs	r1, #1
  76 004a 0220     		movs	r0, #2
  77 004c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 141:lib/src/stm32f10x_tim.c ****   }
  78              		.loc 1 141 0
  79 0050 0021     		movs	r1, #0
  80 0052 0220     		movs	r0, #2
  81 0054 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  82              		.loc 1 216 0
  83 0058 C4E0     		b	.L19
  84              	.L5:
 143:lib/src/stm32f10x_tim.c ****   {
  85              		.loc 1 143 0
  86 005a 7B68     		ldr	r3, [r7, #4]
  87 005c 654A     		ldr	r2, .L20+8
  88 005e 9342     		cmp	r3, r2
  89 0060 08D1     		bne	.L6
 145:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
  90              		.loc 1 145 0
  91 0062 0121     		movs	r1, #1
  92 0064 0420     		movs	r0, #4
  93 0066 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 146:lib/src/stm32f10x_tim.c ****   } 
  94              		.loc 1 146 0
  95 006a 0021     		movs	r1, #0
  96 006c 0420     		movs	r0, #4
  97 006e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  98              		.loc 1 216 0
  99 0072 B7E0     		b	.L19
 100              	.L6:
 148:lib/src/stm32f10x_tim.c ****   {
 101              		.loc 1 148 0
 102 0074 7B68     		ldr	r3, [r7, #4]
 103 0076 604A     		ldr	r2, .L20+12
 104 0078 9342     		cmp	r3, r2
 105 007a 08D1     		bne	.L7
 150:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
 106              		.loc 1 150 0
 107 007c 0121     		movs	r1, #1
 108 007e 0820     		movs	r0, #8
 109 0080 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 151:lib/src/stm32f10x_tim.c ****   } 
 110              		.loc 1 151 0
 111 0084 0021     		movs	r1, #0
 112 0086 0820     		movs	r0, #8
 113 0088 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 114              		.loc 1 216 0
ARM GAS  /tmp/ccNus05k.s 			page 7


 115 008c AAE0     		b	.L19
 116              	.L7:
 153:lib/src/stm32f10x_tim.c ****   {
 117              		.loc 1 153 0
 118 008e 7B68     		ldr	r3, [r7, #4]
 119 0090 5A4A     		ldr	r2, .L20+16
 120 0092 9342     		cmp	r3, r2
 121 0094 08D1     		bne	.L8
 155:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 122              		.loc 1 155 0
 123 0096 0121     		movs	r1, #1
 124 0098 1020     		movs	r0, #16
 125 009a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 156:lib/src/stm32f10x_tim.c ****   } 
 126              		.loc 1 156 0
 127 009e 0021     		movs	r1, #0
 128 00a0 1020     		movs	r0, #16
 129 00a2 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 130              		.loc 1 216 0
 131 00a6 9DE0     		b	.L19
 132              	.L8:
 158:lib/src/stm32f10x_tim.c ****   {
 133              		.loc 1 158 0
 134 00a8 7B68     		ldr	r3, [r7, #4]
 135 00aa 554A     		ldr	r2, .L20+20
 136 00ac 9342     		cmp	r3, r2
 137 00ae 08D1     		bne	.L9
 160:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
 138              		.loc 1 160 0
 139 00b0 0121     		movs	r1, #1
 140 00b2 2020     		movs	r0, #32
 141 00b4 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 161:lib/src/stm32f10x_tim.c ****   } 
 142              		.loc 1 161 0
 143 00b8 0021     		movs	r1, #0
 144 00ba 2020     		movs	r0, #32
 145 00bc FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 146              		.loc 1 216 0
 147 00c0 90E0     		b	.L19
 148              	.L9:
 163:lib/src/stm32f10x_tim.c ****   {
 149              		.loc 1 163 0
 150 00c2 7B68     		ldr	r3, [r7, #4]
 151 00c4 4F4A     		ldr	r2, .L20+24
 152 00c6 9342     		cmp	r3, r2
 153 00c8 0AD1     		bne	.L10
 165:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
 154              		.loc 1 165 0
 155 00ca 0121     		movs	r1, #1
 156 00cc 4FF40050 		mov	r0, #8192
 157 00d0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 166:lib/src/stm32f10x_tim.c ****   }
 158              		.loc 1 166 0
 159 00d4 0021     		movs	r1, #0
 160 00d6 4FF40050 		mov	r0, #8192
 161 00da FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 162              		.loc 1 216 0
ARM GAS  /tmp/ccNus05k.s 			page 8


 163 00de 81E0     		b	.L19
 164              	.L10:
 168:lib/src/stm32f10x_tim.c ****   {      
 165              		.loc 1 168 0
 166 00e0 7B68     		ldr	r3, [r7, #4]
 167 00e2 494A     		ldr	r2, .L20+28
 168 00e4 9342     		cmp	r3, r2
 169 00e6 0AD1     		bne	.L11
 170:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
 170              		.loc 1 170 0
 171 00e8 0121     		movs	r1, #1
 172 00ea 4FF40020 		mov	r0, #524288
 173 00ee FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 171:lib/src/stm32f10x_tim.c ****    }  
 174              		.loc 1 171 0
 175 00f2 0021     		movs	r1, #0
 176 00f4 4FF40020 		mov	r0, #524288
 177 00f8 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 178              		.loc 1 216 0
 179 00fc 72E0     		b	.L19
 180              	.L11:
 173:lib/src/stm32f10x_tim.c ****   {      
 181              		.loc 1 173 0
 182 00fe 7B68     		ldr	r3, [r7, #4]
 183 0100 424A     		ldr	r2, .L20+32
 184 0102 9342     		cmp	r3, r2
 185 0104 0AD1     		bne	.L12
 175:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
 186              		.loc 1 175 0
 187 0106 0121     		movs	r1, #1
 188 0108 4FF48010 		mov	r0, #1048576
 189 010c FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 176:lib/src/stm32f10x_tim.c ****   }  
 190              		.loc 1 176 0
 191 0110 0021     		movs	r1, #0
 192 0112 4FF48010 		mov	r0, #1048576
 193 0116 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 194              		.loc 1 216 0
 195 011a 63E0     		b	.L19
 196              	.L12:
 178:lib/src/stm32f10x_tim.c ****   {     
 197              		.loc 1 178 0
 198 011c 7B68     		ldr	r3, [r7, #4]
 199 011e 3C4A     		ldr	r2, .L20+36
 200 0120 9342     		cmp	r3, r2
 201 0122 0AD1     		bne	.L13
 180:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
 202              		.loc 1 180 0
 203 0124 0121     		movs	r1, #1
 204 0126 4FF40010 		mov	r0, #2097152
 205 012a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 181:lib/src/stm32f10x_tim.c ****   }  
 206              		.loc 1 181 0
 207 012e 0021     		movs	r1, #0
 208 0130 4FF40010 		mov	r0, #2097152
 209 0134 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 210              		.loc 1 216 0
ARM GAS  /tmp/ccNus05k.s 			page 9


 211 0138 54E0     		b	.L19
 212              	.L13:
 183:lib/src/stm32f10x_tim.c ****   {      
 213              		.loc 1 183 0
 214 013a 7B68     		ldr	r3, [r7, #4]
 215 013c 354A     		ldr	r2, .L20+40
 216 013e 9342     		cmp	r3, r2
 217 0140 08D1     		bne	.L14
 185:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
 218              		.loc 1 185 0
 219 0142 0121     		movs	r1, #1
 220 0144 4020     		movs	r0, #64
 221 0146 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 186:lib/src/stm32f10x_tim.c ****   }  
 222              		.loc 1 186 0
 223 014a 0021     		movs	r1, #0
 224 014c 4020     		movs	r0, #64
 225 014e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 226              		.loc 1 216 0
 227 0152 47E0     		b	.L19
 228              	.L14:
 188:lib/src/stm32f10x_tim.c ****   {       
 229              		.loc 1 188 0
 230 0154 7B68     		ldr	r3, [r7, #4]
 231 0156 304A     		ldr	r2, .L20+44
 232 0158 9342     		cmp	r3, r2
 233 015a 08D1     		bne	.L15
 190:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
 234              		.loc 1 190 0
 235 015c 0121     		movs	r1, #1
 236 015e 8020     		movs	r0, #128
 237 0160 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 191:lib/src/stm32f10x_tim.c ****   }
 238              		.loc 1 191 0
 239 0164 0021     		movs	r1, #0
 240 0166 8020     		movs	r0, #128
 241 0168 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 242              		.loc 1 216 0
 243 016c 3AE0     		b	.L19
 244              	.L15:
 193:lib/src/stm32f10x_tim.c ****   {       
 245              		.loc 1 193 0
 246 016e 7B68     		ldr	r3, [r7, #4]
 247 0170 2A4A     		ldr	r2, .L20+48
 248 0172 9342     		cmp	r3, r2
 249 0174 0AD1     		bne	.L16
 195:lib/src/stm32f10x_tim.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 250              		.loc 1 195 0
 251 0176 0121     		movs	r1, #1
 252 0178 4FF48070 		mov	r0, #256
 253 017c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 196:lib/src/stm32f10x_tim.c ****   }        
 254              		.loc 1 196 0
 255 0180 0021     		movs	r1, #0
 256 0182 4FF48070 		mov	r0, #256
 257 0186 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 258              		.loc 1 216 0
ARM GAS  /tmp/ccNus05k.s 			page 10


 259 018a 2BE0     		b	.L19
 260              	.L16:
 198:lib/src/stm32f10x_tim.c ****   {
 261              		.loc 1 198 0
 262 018c 7B68     		ldr	r3, [r7, #4]
 263 018e 244A     		ldr	r2, .L20+52
 264 0190 9342     		cmp	r3, r2
 265 0192 0AD1     		bne	.L17
 200:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 266              		.loc 1 200 0
 267 0194 0121     		movs	r1, #1
 268 0196 4FF48030 		mov	r0, #65536
 269 019a FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 201:lib/src/stm32f10x_tim.c ****   } 
 270              		.loc 1 201 0
 271 019e 0021     		movs	r1, #0
 272 01a0 4FF48030 		mov	r0, #65536
 273 01a4 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 274              		.loc 1 216 0
 275 01a8 1CE0     		b	.L19
 276              	.L17:
 203:lib/src/stm32f10x_tim.c ****   {
 277              		.loc 1 203 0
 278 01aa 7B68     		ldr	r3, [r7, #4]
 279 01ac 1D4A     		ldr	r2, .L20+56
 280 01ae 9342     		cmp	r3, r2
 281 01b0 0AD1     		bne	.L18
 205:lib/src/stm32f10x_tim.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 282              		.loc 1 205 0
 283 01b2 0121     		movs	r1, #1
 284 01b4 4FF40030 		mov	r0, #131072
 285 01b8 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 206:lib/src/stm32f10x_tim.c ****   } 
 286              		.loc 1 206 0
 287 01bc 0021     		movs	r1, #0
 288 01be 4FF40030 		mov	r0, #131072
 289 01c2 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 290              		.loc 1 216 0
 291 01c6 0DE0     		b	.L19
 292              	.L18:
 210:lib/src/stm32f10x_tim.c ****     {
 293              		.loc 1 210 0
 294 01c8 7B68     		ldr	r3, [r7, #4]
 295 01ca 174A     		ldr	r2, .L20+60
 296 01cc 9342     		cmp	r3, r2
 297 01ce 09D1     		bne	.L19
 212:lib/src/stm32f10x_tim.c ****       RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 298              		.loc 1 212 0
 299 01d0 0121     		movs	r1, #1
 300 01d2 4FF48020 		mov	r0, #262144
 301 01d6 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 213:lib/src/stm32f10x_tim.c ****     }  
 302              		.loc 1 213 0
 303 01da 0021     		movs	r1, #0
 304 01dc 4FF48020 		mov	r0, #262144
 305 01e0 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 306              	.L19:
ARM GAS  /tmp/ccNus05k.s 			page 11


 307              		.loc 1 216 0
 308 01e4 00BF     		nop
 309 01e6 0837     		adds	r7, r7, #8
 310              		.cfi_def_cfa_offset 8
 311 01e8 BD46     		mov	sp, r7
 312              		.cfi_def_cfa_register 13
 313              		@ sp needed
 314 01ea 80BD     		pop	{r7, pc}
 315              	.L21:
 316              		.align	2
 317              	.L20:
 318 01ec 002C0140 		.word	1073818624
 319 01f0 00040040 		.word	1073742848
 320 01f4 00080040 		.word	1073743872
 321 01f8 000C0040 		.word	1073744896
 322 01fc 00100040 		.word	1073745920
 323 0200 00140040 		.word	1073746944
 324 0204 00340140 		.word	1073820672
 325 0208 004C0140 		.word	1073826816
 326 020c 00500140 		.word	1073827840
 327 0210 00540140 		.word	1073828864
 328 0214 00180040 		.word	1073747968
 329 0218 001C0040 		.word	1073748992
 330 021c 00200040 		.word	1073750016
 331 0220 00400140 		.word	1073823744
 332 0224 00440140 		.word	1073824768
 333 0228 00480140 		.word	1073825792
 334              		.cfi_endproc
 335              	.LFE64:
 336              		.size	TIM_DeInit, .-TIM_DeInit
 337              		.align	1
 338              		.global	TIM_TimeBaseInit
 339              		.syntax unified
 340              		.thumb
 341              		.thumb_func
 342              		.fpu softvfp
 343              		.type	TIM_TimeBaseInit, %function
 344              	TIM_TimeBaseInit:
 345              	.LFB65:
 217:lib/src/stm32f10x_tim.c **** 
 218:lib/src/stm32f10x_tim.c **** /**
 219:lib/src/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Time Base Unit peripheral according to 
 220:lib/src/stm32f10x_tim.c ****   *         the specified parameters in the TIM_TimeBaseInitStruct.
 221:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
 222:lib/src/stm32f10x_tim.c ****   * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef
 223:lib/src/stm32f10x_tim.c ****   *         structure that contains the configuration information for the 
 224:lib/src/stm32f10x_tim.c ****   *         specified TIM peripheral.
 225:lib/src/stm32f10x_tim.c ****   * @retval None
 226:lib/src/stm32f10x_tim.c ****   */
 227:lib/src/stm32f10x_tim.c **** void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 228:lib/src/stm32f10x_tim.c **** {
 346              		.loc 1 228 0
 347              		.cfi_startproc
 348              		@ args = 0, pretend = 0, frame = 16
 349              		@ frame_needed = 1, uses_anonymous_args = 0
 350              		@ link register save eliminated.
 351 022c 80B4     		push	{r7}
ARM GAS  /tmp/ccNus05k.s 			page 12


 352              		.cfi_def_cfa_offset 4
 353              		.cfi_offset 7, -4
 354 022e 85B0     		sub	sp, sp, #20
 355              		.cfi_def_cfa_offset 24
 356 0230 00AF     		add	r7, sp, #0
 357              		.cfi_def_cfa_register 7
 358 0232 7860     		str	r0, [r7, #4]
 359 0234 3960     		str	r1, [r7]
 229:lib/src/stm32f10x_tim.c ****   uint16_t tmpcr1 = 0;
 360              		.loc 1 229 0
 361 0236 0023     		movs	r3, #0
 362 0238 FB81     		strh	r3, [r7, #14]	@ movhi
 230:lib/src/stm32f10x_tim.c **** 
 231:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 232:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 233:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
 234:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));
 235:lib/src/stm32f10x_tim.c **** 
 236:lib/src/stm32f10x_tim.c ****   tmpcr1 = TIMx->CR1;  
 363              		.loc 1 236 0
 364 023a 7B68     		ldr	r3, [r7, #4]
 365 023c 1B88     		ldrh	r3, [r3]	@ movhi
 366 023e FB81     		strh	r3, [r7, #14]	@ movhi
 237:lib/src/stm32f10x_tim.c **** 
 238:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 367              		.loc 1 238 0
 368 0240 7B68     		ldr	r3, [r7, #4]
 369 0242 2E4A     		ldr	r2, .L28
 370 0244 9342     		cmp	r3, r2
 371 0246 13D0     		beq	.L23
 372              		.loc 1 238 0 is_stmt 0 discriminator 1
 373 0248 7B68     		ldr	r3, [r7, #4]
 374 024a 2D4A     		ldr	r2, .L28+4
 375 024c 9342     		cmp	r3, r2
 376 024e 0FD0     		beq	.L23
 377              		.loc 1 238 0 discriminator 2
 378 0250 7B68     		ldr	r3, [r7, #4]
 379 0252 B3F1804F 		cmp	r3, #1073741824
 380 0256 0BD0     		beq	.L23
 381              		.loc 1 238 0 discriminator 3
 382 0258 7B68     		ldr	r3, [r7, #4]
 383 025a 2A4A     		ldr	r2, .L28+8
 384 025c 9342     		cmp	r3, r2
 385 025e 07D0     		beq	.L23
 386              		.loc 1 238 0 discriminator 4
 387 0260 7B68     		ldr	r3, [r7, #4]
 388 0262 294A     		ldr	r2, .L28+12
 389 0264 9342     		cmp	r3, r2
 390 0266 03D0     		beq	.L23
 239:lib/src/stm32f10x_tim.c ****      (TIMx == TIM4) || (TIMx == TIM5)) 
 391              		.loc 1 239 0 is_stmt 1
 392 0268 7B68     		ldr	r3, [r7, #4]
 393 026a 284A     		ldr	r2, .L28+16
 394 026c 9342     		cmp	r3, r2
 395 026e 08D1     		bne	.L24
 396              	.L23:
 240:lib/src/stm32f10x_tim.c ****   {
ARM GAS  /tmp/ccNus05k.s 			page 13


 241:lib/src/stm32f10x_tim.c ****     /* Select the Counter Mode */
 242:lib/src/stm32f10x_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 397              		.loc 1 242 0
 398 0270 FB89     		ldrh	r3, [r7, #14]	@ movhi
 399 0272 23F07003 		bic	r3, r3, #112
 400 0276 FB81     		strh	r3, [r7, #14]	@ movhi
 243:lib/src/stm32f10x_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 401              		.loc 1 243 0
 402 0278 3B68     		ldr	r3, [r7]
 403 027a 5A88     		ldrh	r2, [r3, #2]
 404 027c FB89     		ldrh	r3, [r7, #14]	@ movhi
 405 027e 1343     		orrs	r3, r3, r2
 406 0280 FB81     		strh	r3, [r7, #14]	@ movhi
 407              	.L24:
 244:lib/src/stm32f10x_tim.c ****   }
 245:lib/src/stm32f10x_tim.c ****  
 246:lib/src/stm32f10x_tim.c ****   if((TIMx != TIM6) && (TIMx != TIM7))
 408              		.loc 1 246 0
 409 0282 7B68     		ldr	r3, [r7, #4]
 410 0284 224A     		ldr	r2, .L28+20
 411 0286 9342     		cmp	r3, r2
 412 0288 0CD0     		beq	.L25
 413              		.loc 1 246 0 is_stmt 0 discriminator 1
 414 028a 7B68     		ldr	r3, [r7, #4]
 415 028c 214A     		ldr	r2, .L28+24
 416 028e 9342     		cmp	r3, r2
 417 0290 08D0     		beq	.L25
 247:lib/src/stm32f10x_tim.c ****   {
 248:lib/src/stm32f10x_tim.c ****     /* Set the clock division */
 249:lib/src/stm32f10x_tim.c ****     tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 418              		.loc 1 249 0 is_stmt 1
 419 0292 FB89     		ldrh	r3, [r7, #14]	@ movhi
 420 0294 23F44073 		bic	r3, r3, #768
 421 0298 FB81     		strh	r3, [r7, #14]	@ movhi
 250:lib/src/stm32f10x_tim.c ****     tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 422              		.loc 1 250 0
 423 029a 3B68     		ldr	r3, [r7]
 424 029c DA88     		ldrh	r2, [r3, #6]
 425 029e FB89     		ldrh	r3, [r7, #14]	@ movhi
 426 02a0 1343     		orrs	r3, r3, r2
 427 02a2 FB81     		strh	r3, [r7, #14]	@ movhi
 428              	.L25:
 251:lib/src/stm32f10x_tim.c ****   }
 252:lib/src/stm32f10x_tim.c **** 
 253:lib/src/stm32f10x_tim.c ****   TIMx->CR1 = tmpcr1;
 429              		.loc 1 253 0
 430 02a4 7B68     		ldr	r3, [r7, #4]
 431 02a6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 432 02a8 1A80     		strh	r2, [r3]	@ movhi
 254:lib/src/stm32f10x_tim.c **** 
 255:lib/src/stm32f10x_tim.c ****   /* Set the Autoreload value */
 256:lib/src/stm32f10x_tim.c ****   TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 433              		.loc 1 256 0
 434 02aa 3B68     		ldr	r3, [r7]
 435 02ac 9A88     		ldrh	r2, [r3, #4]
 436 02ae 7B68     		ldr	r3, [r7, #4]
 437 02b0 9A85     		strh	r2, [r3, #44]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 14


 257:lib/src/stm32f10x_tim.c ****  
 258:lib/src/stm32f10x_tim.c ****   /* Set the Prescaler value */
 259:lib/src/stm32f10x_tim.c ****   TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 438              		.loc 1 259 0
 439 02b2 3B68     		ldr	r3, [r7]
 440 02b4 1A88     		ldrh	r2, [r3]
 441 02b6 7B68     		ldr	r3, [r7, #4]
 442 02b8 1A85     		strh	r2, [r3, #40]	@ movhi
 260:lib/src/stm32f10x_tim.c ****     
 261:lib/src/stm32f10x_tim.c ****   if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 443              		.loc 1 261 0
 444 02ba 7B68     		ldr	r3, [r7, #4]
 445 02bc 0F4A     		ldr	r2, .L28
 446 02be 9342     		cmp	r3, r2
 447 02c0 0FD0     		beq	.L26
 448              		.loc 1 261 0 is_stmt 0 discriminator 1
 449 02c2 7B68     		ldr	r3, [r7, #4]
 450 02c4 0E4A     		ldr	r2, .L28+4
 451 02c6 9342     		cmp	r3, r2
 452 02c8 0BD0     		beq	.L26
 453              		.loc 1 261 0 discriminator 2
 454 02ca 7B68     		ldr	r3, [r7, #4]
 455 02cc 124A     		ldr	r2, .L28+28
 456 02ce 9342     		cmp	r3, r2
 457 02d0 07D0     		beq	.L26
 458              		.loc 1 261 0 discriminator 3
 459 02d2 7B68     		ldr	r3, [r7, #4]
 460 02d4 114A     		ldr	r2, .L28+32
 461 02d6 9342     		cmp	r3, r2
 462 02d8 03D0     		beq	.L26
 463              		.loc 1 261 0 discriminator 4
 464 02da 7B68     		ldr	r3, [r7, #4]
 465 02dc 104A     		ldr	r2, .L28+36
 466 02de 9342     		cmp	r3, r2
 467 02e0 04D1     		bne	.L27
 468              	.L26:
 262:lib/src/stm32f10x_tim.c ****   {
 263:lib/src/stm32f10x_tim.c ****     /* Set the Repetition Counter value */
 264:lib/src/stm32f10x_tim.c ****     TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 469              		.loc 1 264 0 is_stmt 1
 470 02e2 3B68     		ldr	r3, [r7]
 471 02e4 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 472 02e6 9AB2     		uxth	r2, r3
 473 02e8 7B68     		ldr	r3, [r7, #4]
 474 02ea 1A86     		strh	r2, [r3, #48]	@ movhi
 475              	.L27:
 265:lib/src/stm32f10x_tim.c ****   }
 266:lib/src/stm32f10x_tim.c **** 
 267:lib/src/stm32f10x_tim.c ****   /* Generate an update event to reload the Prescaler and the Repetition counter
 268:lib/src/stm32f10x_tim.c ****      values immediately */
 269:lib/src/stm32f10x_tim.c ****   TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 476              		.loc 1 269 0
 477 02ec 7B68     		ldr	r3, [r7, #4]
 478 02ee 0122     		movs	r2, #1
 479 02f0 9A82     		strh	r2, [r3, #20]	@ movhi
 270:lib/src/stm32f10x_tim.c **** }
 480              		.loc 1 270 0
ARM GAS  /tmp/ccNus05k.s 			page 15


 481 02f2 00BF     		nop
 482 02f4 1437     		adds	r7, r7, #20
 483              		.cfi_def_cfa_offset 4
 484 02f6 BD46     		mov	sp, r7
 485              		.cfi_def_cfa_register 13
 486              		@ sp needed
 487 02f8 80BC     		pop	{r7}
 488              		.cfi_restore 7
 489              		.cfi_def_cfa_offset 0
 490 02fa 7047     		bx	lr
 491              	.L29:
 492              		.align	2
 493              	.L28:
 494 02fc 002C0140 		.word	1073818624
 495 0300 00340140 		.word	1073820672
 496 0304 00040040 		.word	1073742848
 497 0308 00080040 		.word	1073743872
 498 030c 000C0040 		.word	1073744896
 499 0310 00100040 		.word	1073745920
 500 0314 00140040 		.word	1073746944
 501 0318 00400140 		.word	1073823744
 502 031c 00440140 		.word	1073824768
 503 0320 00480140 		.word	1073825792
 504              		.cfi_endproc
 505              	.LFE65:
 506              		.size	TIM_TimeBaseInit, .-TIM_TimeBaseInit
 507              		.align	1
 508              		.global	TIM_OC1Init
 509              		.syntax unified
 510              		.thumb
 511              		.thumb_func
 512              		.fpu softvfp
 513              		.type	TIM_OC1Init, %function
 514              	TIM_OC1Init:
 515              	.LFB66:
 271:lib/src/stm32f10x_tim.c **** 
 272:lib/src/stm32f10x_tim.c **** /**
 273:lib/src/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Channel1 according to the specified
 274:lib/src/stm32f10x_tim.c ****   *         parameters in the TIM_OCInitStruct.
 275:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
 276:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 277:lib/src/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 278:lib/src/stm32f10x_tim.c ****   * @retval None
 279:lib/src/stm32f10x_tim.c ****   */
 280:lib/src/stm32f10x_tim.c **** void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 281:lib/src/stm32f10x_tim.c **** {
 516              		.loc 1 281 0
 517              		.cfi_startproc
 518              		@ args = 0, pretend = 0, frame = 16
 519              		@ frame_needed = 1, uses_anonymous_args = 0
 520              		@ link register save eliminated.
 521 0324 80B4     		push	{r7}
 522              		.cfi_def_cfa_offset 4
 523              		.cfi_offset 7, -4
 524 0326 85B0     		sub	sp, sp, #20
 525              		.cfi_def_cfa_offset 24
 526 0328 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccNus05k.s 			page 16


 527              		.cfi_def_cfa_register 7
 528 032a 7860     		str	r0, [r7, #4]
 529 032c 3960     		str	r1, [r7]
 282:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 530              		.loc 1 282 0
 531 032e 0023     		movs	r3, #0
 532 0330 7B81     		strh	r3, [r7, #10]	@ movhi
 533 0332 0023     		movs	r3, #0
 534 0334 FB81     		strh	r3, [r7, #14]	@ movhi
 535 0336 0023     		movs	r3, #0
 536 0338 BB81     		strh	r3, [r7, #12]	@ movhi
 283:lib/src/stm32f10x_tim.c ****    
 284:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 285:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
 286:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 287:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 288:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 289:lib/src/stm32f10x_tim.c ****  /* Disable the Channel 1: Reset the CC1E Bit */
 290:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 537              		.loc 1 290 0
 538 033a 7B68     		ldr	r3, [r7, #4]
 539 033c 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 540 033e 9BB2     		uxth	r3, r3
 541 0340 23F00103 		bic	r3, r3, #1
 542 0344 9AB2     		uxth	r2, r3
 543 0346 7B68     		ldr	r3, [r7, #4]
 544 0348 1A84     		strh	r2, [r3, #32]	@ movhi
 291:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */
 292:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 545              		.loc 1 292 0
 546 034a 7B68     		ldr	r3, [r7, #4]
 547 034c 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 548 034e FB81     		strh	r3, [r7, #14]	@ movhi
 293:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CR2 register value */
 294:lib/src/stm32f10x_tim.c ****   tmpcr2 =  TIMx->CR2;
 549              		.loc 1 294 0
 550 0350 7B68     		ldr	r3, [r7, #4]
 551 0352 9B88     		ldrh	r3, [r3, #4]	@ movhi
 552 0354 BB81     		strh	r3, [r7, #12]	@ movhi
 295:lib/src/stm32f10x_tim.c ****   
 296:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
 297:lib/src/stm32f10x_tim.c ****   tmpccmrx = TIMx->CCMR1;
 553              		.loc 1 297 0
 554 0356 7B68     		ldr	r3, [r7, #4]
 555 0358 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 556 035a 7B81     		strh	r3, [r7, #10]	@ movhi
 298:lib/src/stm32f10x_tim.c ****     
 299:lib/src/stm32f10x_tim.c ****   /* Reset the Output Compare Mode Bits */
 300:lib/src/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
 557              		.loc 1 300 0
 558 035c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 559 035e 23F07003 		bic	r3, r3, #112
 560 0362 7B81     		strh	r3, [r7, #10]	@ movhi
 301:lib/src/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 561              		.loc 1 301 0
 562 0364 7B89     		ldrh	r3, [r7, #10]	@ movhi
 563 0366 23F00303 		bic	r3, r3, #3
ARM GAS  /tmp/ccNus05k.s 			page 17


 564 036a 7B81     		strh	r3, [r7, #10]	@ movhi
 302:lib/src/stm32f10x_tim.c **** 
 303:lib/src/stm32f10x_tim.c ****   /* Select the Output Compare Mode */
 304:lib/src/stm32f10x_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 565              		.loc 1 304 0
 566 036c 3B68     		ldr	r3, [r7]
 567 036e 1A88     		ldrh	r2, [r3]
 568 0370 7B89     		ldrh	r3, [r7, #10]	@ movhi
 569 0372 1343     		orrs	r3, r3, r2
 570 0374 7B81     		strh	r3, [r7, #10]	@ movhi
 305:lib/src/stm32f10x_tim.c ****   
 306:lib/src/stm32f10x_tim.c ****   /* Reset the Output Polarity level */
 307:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 571              		.loc 1 307 0
 572 0376 FB89     		ldrh	r3, [r7, #14]	@ movhi
 573 0378 23F00203 		bic	r3, r3, #2
 574 037c FB81     		strh	r3, [r7, #14]	@ movhi
 308:lib/src/stm32f10x_tim.c ****   /* Set the Output Compare Polarity */
 309:lib/src/stm32f10x_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 575              		.loc 1 309 0
 576 037e 3B68     		ldr	r3, [r7]
 577 0380 1A89     		ldrh	r2, [r3, #8]
 578 0382 FB89     		ldrh	r3, [r7, #14]	@ movhi
 579 0384 1343     		orrs	r3, r3, r2
 580 0386 FB81     		strh	r3, [r7, #14]	@ movhi
 310:lib/src/stm32f10x_tim.c ****   
 311:lib/src/stm32f10x_tim.c ****   /* Set the Output State */
 312:lib/src/stm32f10x_tim.c ****   tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 581              		.loc 1 312 0
 582 0388 3B68     		ldr	r3, [r7]
 583 038a 5A88     		ldrh	r2, [r3, #2]
 584 038c FB89     		ldrh	r3, [r7, #14]	@ movhi
 585 038e 1343     		orrs	r3, r3, r2
 586 0390 FB81     		strh	r3, [r7, #14]	@ movhi
 313:lib/src/stm32f10x_tim.c ****     
 314:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
 587              		.loc 1 314 0
 588 0392 7B68     		ldr	r3, [r7, #4]
 589 0394 244A     		ldr	r2, .L33
 590 0396 9342     		cmp	r3, r2
 591 0398 0FD0     		beq	.L31
 592              		.loc 1 314 0 is_stmt 0 discriminator 1
 593 039a 7B68     		ldr	r3, [r7, #4]
 594 039c 234A     		ldr	r2, .L33+4
 595 039e 9342     		cmp	r3, r2
 596 03a0 0BD0     		beq	.L31
 597              		.loc 1 314 0 discriminator 2
 598 03a2 7B68     		ldr	r3, [r7, #4]
 599 03a4 224A     		ldr	r2, .L33+8
 600 03a6 9342     		cmp	r3, r2
 601 03a8 07D0     		beq	.L31
 602              		.loc 1 314 0 discriminator 3
 603 03aa 7B68     		ldr	r3, [r7, #4]
 604 03ac 214A     		ldr	r2, .L33+12
 605 03ae 9342     		cmp	r3, r2
 606 03b0 03D0     		beq	.L31
 315:lib/src/stm32f10x_tim.c ****      (TIMx == TIM16)|| (TIMx == TIM17))
ARM GAS  /tmp/ccNus05k.s 			page 18


 607              		.loc 1 315 0 is_stmt 1
 608 03b2 7B68     		ldr	r3, [r7, #4]
 609 03b4 204A     		ldr	r2, .L33+16
 610 03b6 9342     		cmp	r3, r2
 611 03b8 23D1     		bne	.L32
 612              	.L31:
 316:lib/src/stm32f10x_tim.c ****   {
 317:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 318:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 319:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 320:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 321:lib/src/stm32f10x_tim.c ****     
 322:lib/src/stm32f10x_tim.c ****     /* Reset the Output N Polarity level */
 323:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 613              		.loc 1 323 0
 614 03ba FB89     		ldrh	r3, [r7, #14]	@ movhi
 615 03bc 23F00803 		bic	r3, r3, #8
 616 03c0 FB81     		strh	r3, [r7, #14]	@ movhi
 324:lib/src/stm32f10x_tim.c ****     /* Set the Output N Polarity */
 325:lib/src/stm32f10x_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 617              		.loc 1 325 0
 618 03c2 3B68     		ldr	r3, [r7]
 619 03c4 5A89     		ldrh	r2, [r3, #10]
 620 03c6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 621 03c8 1343     		orrs	r3, r3, r2
 622 03ca FB81     		strh	r3, [r7, #14]	@ movhi
 326:lib/src/stm32f10x_tim.c ****     
 327:lib/src/stm32f10x_tim.c ****     /* Reset the Output N State */
 328:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 623              		.loc 1 328 0
 624 03cc FB89     		ldrh	r3, [r7, #14]	@ movhi
 625 03ce 23F00403 		bic	r3, r3, #4
 626 03d2 FB81     		strh	r3, [r7, #14]	@ movhi
 329:lib/src/stm32f10x_tim.c ****     /* Set the Output N State */
 330:lib/src/stm32f10x_tim.c ****     tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 627              		.loc 1 330 0
 628 03d4 3B68     		ldr	r3, [r7]
 629 03d6 9A88     		ldrh	r2, [r3, #4]
 630 03d8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 631 03da 1343     		orrs	r3, r3, r2
 632 03dc FB81     		strh	r3, [r7, #14]	@ movhi
 331:lib/src/stm32f10x_tim.c ****     
 332:lib/src/stm32f10x_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 333:lib/src/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
 633              		.loc 1 333 0
 634 03de BB89     		ldrh	r3, [r7, #12]	@ movhi
 635 03e0 23F48073 		bic	r3, r3, #256
 636 03e4 BB81     		strh	r3, [r7, #12]	@ movhi
 334:lib/src/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 637              		.loc 1 334 0
 638 03e6 BB89     		ldrh	r3, [r7, #12]	@ movhi
 639 03e8 23F40073 		bic	r3, r3, #512
 640 03ec BB81     		strh	r3, [r7, #12]	@ movhi
 335:lib/src/stm32f10x_tim.c ****     
 336:lib/src/stm32f10x_tim.c ****     /* Set the Output Idle state */
 337:lib/src/stm32f10x_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 641              		.loc 1 337 0
ARM GAS  /tmp/ccNus05k.s 			page 19


 642 03ee 3B68     		ldr	r3, [r7]
 643 03f0 9A89     		ldrh	r2, [r3, #12]
 644 03f2 BB89     		ldrh	r3, [r7, #12]	@ movhi
 645 03f4 1343     		orrs	r3, r3, r2
 646 03f6 BB81     		strh	r3, [r7, #12]	@ movhi
 338:lib/src/stm32f10x_tim.c ****     /* Set the Output N Idle state */
 339:lib/src/stm32f10x_tim.c ****     tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 647              		.loc 1 339 0
 648 03f8 3B68     		ldr	r3, [r7]
 649 03fa DA89     		ldrh	r2, [r3, #14]
 650 03fc BB89     		ldrh	r3, [r7, #12]	@ movhi
 651 03fe 1343     		orrs	r3, r3, r2
 652 0400 BB81     		strh	r3, [r7, #12]	@ movhi
 653              	.L32:
 340:lib/src/stm32f10x_tim.c ****   }
 341:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CR2 */
 342:lib/src/stm32f10x_tim.c ****   TIMx->CR2 = tmpcr2;
 654              		.loc 1 342 0
 655 0402 7B68     		ldr	r3, [r7, #4]
 656 0404 BA89     		ldrh	r2, [r7, #12]	@ movhi
 657 0406 9A80     		strh	r2, [r3, #4]	@ movhi
 343:lib/src/stm32f10x_tim.c ****   
 344:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
 345:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 658              		.loc 1 345 0
 659 0408 7B68     		ldr	r3, [r7, #4]
 660 040a 7A89     		ldrh	r2, [r7, #10]	@ movhi
 661 040c 1A83     		strh	r2, [r3, #24]	@ movhi
 346:lib/src/stm32f10x_tim.c **** 
 347:lib/src/stm32f10x_tim.c ****   /* Set the Capture Compare Register value */
 348:lib/src/stm32f10x_tim.c ****   TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 662              		.loc 1 348 0
 663 040e 3B68     		ldr	r3, [r7]
 664 0410 DA88     		ldrh	r2, [r3, #6]
 665 0412 7B68     		ldr	r3, [r7, #4]
 666 0414 9A86     		strh	r2, [r3, #52]	@ movhi
 349:lib/src/stm32f10x_tim.c ****  
 350:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER */
 351:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 667              		.loc 1 351 0
 668 0416 7B68     		ldr	r3, [r7, #4]
 669 0418 FA89     		ldrh	r2, [r7, #14]	@ movhi
 670 041a 1A84     		strh	r2, [r3, #32]	@ movhi
 352:lib/src/stm32f10x_tim.c **** }
 671              		.loc 1 352 0
 672 041c 00BF     		nop
 673 041e 1437     		adds	r7, r7, #20
 674              		.cfi_def_cfa_offset 4
 675 0420 BD46     		mov	sp, r7
 676              		.cfi_def_cfa_register 13
 677              		@ sp needed
 678 0422 80BC     		pop	{r7}
 679              		.cfi_restore 7
 680              		.cfi_def_cfa_offset 0
 681 0424 7047     		bx	lr
 682              	.L34:
 683 0426 00BF     		.align	2
ARM GAS  /tmp/ccNus05k.s 			page 20


 684              	.L33:
 685 0428 002C0140 		.word	1073818624
 686 042c 00340140 		.word	1073820672
 687 0430 00400140 		.word	1073823744
 688 0434 00440140 		.word	1073824768
 689 0438 00480140 		.word	1073825792
 690              		.cfi_endproc
 691              	.LFE66:
 692              		.size	TIM_OC1Init, .-TIM_OC1Init
 693              		.align	1
 694              		.global	TIM_OC2Init
 695              		.syntax unified
 696              		.thumb
 697              		.thumb_func
 698              		.fpu softvfp
 699              		.type	TIM_OC2Init, %function
 700              	TIM_OC2Init:
 701              	.LFB67:
 353:lib/src/stm32f10x_tim.c **** 
 354:lib/src/stm32f10x_tim.c **** /**
 355:lib/src/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Channel2 according to the specified
 356:lib/src/stm32f10x_tim.c ****   *         parameters in the TIM_OCInitStruct.
 357:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select 
 358:lib/src/stm32f10x_tim.c ****   *         the TIM peripheral.
 359:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 360:lib/src/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 361:lib/src/stm32f10x_tim.c ****   * @retval None
 362:lib/src/stm32f10x_tim.c ****   */
 363:lib/src/stm32f10x_tim.c **** void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 364:lib/src/stm32f10x_tim.c **** {
 702              		.loc 1 364 0
 703              		.cfi_startproc
 704              		@ args = 0, pretend = 0, frame = 16
 705              		@ frame_needed = 1, uses_anonymous_args = 0
 706              		@ link register save eliminated.
 707 043c 80B4     		push	{r7}
 708              		.cfi_def_cfa_offset 4
 709              		.cfi_offset 7, -4
 710 043e 85B0     		sub	sp, sp, #20
 711              		.cfi_def_cfa_offset 24
 712 0440 00AF     		add	r7, sp, #0
 713              		.cfi_def_cfa_register 7
 714 0442 7860     		str	r0, [r7, #4]
 715 0444 3960     		str	r1, [r7]
 365:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 716              		.loc 1 365 0
 717 0446 0023     		movs	r3, #0
 718 0448 7B81     		strh	r3, [r7, #10]	@ movhi
 719 044a 0023     		movs	r3, #0
 720 044c FB81     		strh	r3, [r7, #14]	@ movhi
 721 044e 0023     		movs	r3, #0
 722 0450 BB81     		strh	r3, [r7, #12]	@ movhi
 366:lib/src/stm32f10x_tim.c ****    
 367:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 368:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
 369:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 370:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
ARM GAS  /tmp/ccNus05k.s 			page 21


 371:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 372:lib/src/stm32f10x_tim.c ****    /* Disable the Channel 2: Reset the CC2E Bit */
 373:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 723              		.loc 1 373 0
 724 0452 7B68     		ldr	r3, [r7, #4]
 725 0454 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 726 0456 9BB2     		uxth	r3, r3
 727 0458 23F01003 		bic	r3, r3, #16
 728 045c 9AB2     		uxth	r2, r3
 729 045e 7B68     		ldr	r3, [r7, #4]
 730 0460 1A84     		strh	r2, [r3, #32]	@ movhi
 374:lib/src/stm32f10x_tim.c ****   
 375:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */  
 376:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 731              		.loc 1 376 0
 732 0462 7B68     		ldr	r3, [r7, #4]
 733 0464 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 734 0466 FB81     		strh	r3, [r7, #14]	@ movhi
 377:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CR2 register value */
 378:lib/src/stm32f10x_tim.c ****   tmpcr2 =  TIMx->CR2;
 735              		.loc 1 378 0
 736 0468 7B68     		ldr	r3, [r7, #4]
 737 046a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 738 046c BB81     		strh	r3, [r7, #12]	@ movhi
 379:lib/src/stm32f10x_tim.c ****   
 380:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
 381:lib/src/stm32f10x_tim.c ****   tmpccmrx = TIMx->CCMR1;
 739              		.loc 1 381 0
 740 046e 7B68     		ldr	r3, [r7, #4]
 741 0470 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 742 0472 7B81     		strh	r3, [r7, #10]	@ movhi
 382:lib/src/stm32f10x_tim.c ****     
 383:lib/src/stm32f10x_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 384:lib/src/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
 743              		.loc 1 384 0
 744 0474 7B89     		ldrh	r3, [r7, #10]	@ movhi
 745 0476 23F4E043 		bic	r3, r3, #28672
 746 047a 7B81     		strh	r3, [r7, #10]	@ movhi
 385:lib/src/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 747              		.loc 1 385 0
 748 047c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 749 047e 23F44073 		bic	r3, r3, #768
 750 0482 7B81     		strh	r3, [r7, #10]	@ movhi
 386:lib/src/stm32f10x_tim.c ****   
 387:lib/src/stm32f10x_tim.c ****   /* Select the Output Compare Mode */
 388:lib/src/stm32f10x_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 751              		.loc 1 388 0
 752 0484 3B68     		ldr	r3, [r7]
 753 0486 1B88     		ldrh	r3, [r3]
 754 0488 1B02     		lsls	r3, r3, #8
 755 048a 9AB2     		uxth	r2, r3
 756 048c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 757 048e 1343     		orrs	r3, r3, r2
 758 0490 7B81     		strh	r3, [r7, #10]	@ movhi
 389:lib/src/stm32f10x_tim.c ****   
 390:lib/src/stm32f10x_tim.c ****   /* Reset the Output Polarity level */
 391:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
ARM GAS  /tmp/ccNus05k.s 			page 22


 759              		.loc 1 391 0
 760 0492 FB89     		ldrh	r3, [r7, #14]	@ movhi
 761 0494 23F02003 		bic	r3, r3, #32
 762 0498 FB81     		strh	r3, [r7, #14]	@ movhi
 392:lib/src/stm32f10x_tim.c ****   /* Set the Output Compare Polarity */
 393:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 763              		.loc 1 393 0
 764 049a 3B68     		ldr	r3, [r7]
 765 049c 1B89     		ldrh	r3, [r3, #8]
 766 049e 1B01     		lsls	r3, r3, #4
 767 04a0 9AB2     		uxth	r2, r3
 768 04a2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 769 04a4 1343     		orrs	r3, r3, r2
 770 04a6 FB81     		strh	r3, [r7, #14]	@ movhi
 394:lib/src/stm32f10x_tim.c ****   
 395:lib/src/stm32f10x_tim.c ****   /* Set the Output State */
 396:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 771              		.loc 1 396 0
 772 04a8 3B68     		ldr	r3, [r7]
 773 04aa 5B88     		ldrh	r3, [r3, #2]
 774 04ac 1B01     		lsls	r3, r3, #4
 775 04ae 9AB2     		uxth	r2, r3
 776 04b0 FB89     		ldrh	r3, [r7, #14]	@ movhi
 777 04b2 1343     		orrs	r3, r3, r2
 778 04b4 FB81     		strh	r3, [r7, #14]	@ movhi
 397:lib/src/stm32f10x_tim.c ****     
 398:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 779              		.loc 1 398 0
 780 04b6 7B68     		ldr	r3, [r7, #4]
 781 04b8 224A     		ldr	r2, .L38
 782 04ba 9342     		cmp	r3, r2
 783 04bc 03D0     		beq	.L36
 784              		.loc 1 398 0 is_stmt 0 discriminator 1
 785 04be 7B68     		ldr	r3, [r7, #4]
 786 04c0 214A     		ldr	r2, .L38+4
 787 04c2 9342     		cmp	r3, r2
 788 04c4 2BD1     		bne	.L37
 789              	.L36:
 399:lib/src/stm32f10x_tim.c ****   {
 400:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 401:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 402:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 403:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 404:lib/src/stm32f10x_tim.c ****     
 405:lib/src/stm32f10x_tim.c ****     /* Reset the Output N Polarity level */
 406:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 790              		.loc 1 406 0 is_stmt 1
 791 04c6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 792 04c8 23F08003 		bic	r3, r3, #128
 793 04cc FB81     		strh	r3, [r7, #14]	@ movhi
 407:lib/src/stm32f10x_tim.c ****     /* Set the Output N Polarity */
 408:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 794              		.loc 1 408 0
 795 04ce 3B68     		ldr	r3, [r7]
 796 04d0 5B89     		ldrh	r3, [r3, #10]
 797 04d2 1B01     		lsls	r3, r3, #4
 798 04d4 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccNus05k.s 			page 23


 799 04d6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 800 04d8 1343     		orrs	r3, r3, r2
 801 04da FB81     		strh	r3, [r7, #14]	@ movhi
 409:lib/src/stm32f10x_tim.c ****     
 410:lib/src/stm32f10x_tim.c ****     /* Reset the Output N State */
 411:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 802              		.loc 1 411 0
 803 04dc FB89     		ldrh	r3, [r7, #14]	@ movhi
 804 04de 23F04003 		bic	r3, r3, #64
 805 04e2 FB81     		strh	r3, [r7, #14]	@ movhi
 412:lib/src/stm32f10x_tim.c ****     /* Set the Output N State */
 413:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 806              		.loc 1 413 0
 807 04e4 3B68     		ldr	r3, [r7]
 808 04e6 9B88     		ldrh	r3, [r3, #4]
 809 04e8 1B01     		lsls	r3, r3, #4
 810 04ea 9AB2     		uxth	r2, r3
 811 04ec FB89     		ldrh	r3, [r7, #14]	@ movhi
 812 04ee 1343     		orrs	r3, r3, r2
 813 04f0 FB81     		strh	r3, [r7, #14]	@ movhi
 414:lib/src/stm32f10x_tim.c ****     
 415:lib/src/stm32f10x_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 416:lib/src/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
 814              		.loc 1 416 0
 815 04f2 BB89     		ldrh	r3, [r7, #12]	@ movhi
 816 04f4 23F48063 		bic	r3, r3, #1024
 817 04f8 BB81     		strh	r3, [r7, #12]	@ movhi
 417:lib/src/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 818              		.loc 1 417 0
 819 04fa BB89     		ldrh	r3, [r7, #12]	@ movhi
 820 04fc 23F40063 		bic	r3, r3, #2048
 821 0500 BB81     		strh	r3, [r7, #12]	@ movhi
 418:lib/src/stm32f10x_tim.c ****     
 419:lib/src/stm32f10x_tim.c ****     /* Set the Output Idle state */
 420:lib/src/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 822              		.loc 1 420 0
 823 0502 3B68     		ldr	r3, [r7]
 824 0504 9B89     		ldrh	r3, [r3, #12]
 825 0506 9B00     		lsls	r3, r3, #2
 826 0508 9AB2     		uxth	r2, r3
 827 050a BB89     		ldrh	r3, [r7, #12]	@ movhi
 828 050c 1343     		orrs	r3, r3, r2
 829 050e BB81     		strh	r3, [r7, #12]	@ movhi
 421:lib/src/stm32f10x_tim.c ****     /* Set the Output N Idle state */
 422:lib/src/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 830              		.loc 1 422 0
 831 0510 3B68     		ldr	r3, [r7]
 832 0512 DB89     		ldrh	r3, [r3, #14]
 833 0514 9B00     		lsls	r3, r3, #2
 834 0516 9AB2     		uxth	r2, r3
 835 0518 BB89     		ldrh	r3, [r7, #12]	@ movhi
 836 051a 1343     		orrs	r3, r3, r2
 837 051c BB81     		strh	r3, [r7, #12]	@ movhi
 838              	.L37:
 423:lib/src/stm32f10x_tim.c ****   }
 424:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CR2 */
 425:lib/src/stm32f10x_tim.c ****   TIMx->CR2 = tmpcr2;
ARM GAS  /tmp/ccNus05k.s 			page 24


 839              		.loc 1 425 0
 840 051e 7B68     		ldr	r3, [r7, #4]
 841 0520 BA89     		ldrh	r2, [r7, #12]	@ movhi
 842 0522 9A80     		strh	r2, [r3, #4]	@ movhi
 426:lib/src/stm32f10x_tim.c ****   
 427:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
 428:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmrx;
 843              		.loc 1 428 0
 844 0524 7B68     		ldr	r3, [r7, #4]
 845 0526 7A89     		ldrh	r2, [r7, #10]	@ movhi
 846 0528 1A83     		strh	r2, [r3, #24]	@ movhi
 429:lib/src/stm32f10x_tim.c **** 
 430:lib/src/stm32f10x_tim.c ****   /* Set the Capture Compare Register value */
 431:lib/src/stm32f10x_tim.c ****   TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 847              		.loc 1 431 0
 848 052a 3B68     		ldr	r3, [r7]
 849 052c DA88     		ldrh	r2, [r3, #6]
 850 052e 7B68     		ldr	r3, [r7, #4]
 851 0530 1A87     		strh	r2, [r3, #56]	@ movhi
 432:lib/src/stm32f10x_tim.c ****   
 433:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER */
 434:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 852              		.loc 1 434 0
 853 0532 7B68     		ldr	r3, [r7, #4]
 854 0534 FA89     		ldrh	r2, [r7, #14]	@ movhi
 855 0536 1A84     		strh	r2, [r3, #32]	@ movhi
 435:lib/src/stm32f10x_tim.c **** }
 856              		.loc 1 435 0
 857 0538 00BF     		nop
 858 053a 1437     		adds	r7, r7, #20
 859              		.cfi_def_cfa_offset 4
 860 053c BD46     		mov	sp, r7
 861              		.cfi_def_cfa_register 13
 862              		@ sp needed
 863 053e 80BC     		pop	{r7}
 864              		.cfi_restore 7
 865              		.cfi_def_cfa_offset 0
 866 0540 7047     		bx	lr
 867              	.L39:
 868 0542 00BF     		.align	2
 869              	.L38:
 870 0544 002C0140 		.word	1073818624
 871 0548 00340140 		.word	1073820672
 872              		.cfi_endproc
 873              	.LFE67:
 874              		.size	TIM_OC2Init, .-TIM_OC2Init
 875              		.align	1
 876              		.global	TIM_OC3Init
 877              		.syntax unified
 878              		.thumb
 879              		.thumb_func
 880              		.fpu softvfp
 881              		.type	TIM_OC3Init, %function
 882              	TIM_OC3Init:
 883              	.LFB68:
 436:lib/src/stm32f10x_tim.c **** 
 437:lib/src/stm32f10x_tim.c **** /**
ARM GAS  /tmp/ccNus05k.s 			page 25


 438:lib/src/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Channel3 according to the specified
 439:lib/src/stm32f10x_tim.c ****   *         parameters in the TIM_OCInitStruct.
 440:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 441:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 442:lib/src/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 443:lib/src/stm32f10x_tim.c ****   * @retval None
 444:lib/src/stm32f10x_tim.c ****   */
 445:lib/src/stm32f10x_tim.c **** void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 446:lib/src/stm32f10x_tim.c **** {
 884              		.loc 1 446 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 16
 887              		@ frame_needed = 1, uses_anonymous_args = 0
 888              		@ link register save eliminated.
 889 054c 80B4     		push	{r7}
 890              		.cfi_def_cfa_offset 4
 891              		.cfi_offset 7, -4
 892 054e 85B0     		sub	sp, sp, #20
 893              		.cfi_def_cfa_offset 24
 894 0550 00AF     		add	r7, sp, #0
 895              		.cfi_def_cfa_register 7
 896 0552 7860     		str	r0, [r7, #4]
 897 0554 3960     		str	r1, [r7]
 447:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 898              		.loc 1 447 0
 899 0556 0023     		movs	r3, #0
 900 0558 7B81     		strh	r3, [r7, #10]	@ movhi
 901 055a 0023     		movs	r3, #0
 902 055c FB81     		strh	r3, [r7, #14]	@ movhi
 903 055e 0023     		movs	r3, #0
 904 0560 BB81     		strh	r3, [r7, #12]	@ movhi
 448:lib/src/stm32f10x_tim.c ****    
 449:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 450:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 451:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 452:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 453:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 454:lib/src/stm32f10x_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
 455:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 905              		.loc 1 455 0
 906 0562 7B68     		ldr	r3, [r7, #4]
 907 0564 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 908 0566 9BB2     		uxth	r3, r3
 909 0568 23F48073 		bic	r3, r3, #256
 910 056c 9AB2     		uxth	r2, r3
 911 056e 7B68     		ldr	r3, [r7, #4]
 912 0570 1A84     		strh	r2, [r3, #32]	@ movhi
 456:lib/src/stm32f10x_tim.c ****   
 457:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */
 458:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 913              		.loc 1 458 0
 914 0572 7B68     		ldr	r3, [r7, #4]
 915 0574 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 916 0576 FB81     		strh	r3, [r7, #14]	@ movhi
 459:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CR2 register value */
 460:lib/src/stm32f10x_tim.c ****   tmpcr2 =  TIMx->CR2;
 917              		.loc 1 460 0
ARM GAS  /tmp/ccNus05k.s 			page 26


 918 0578 7B68     		ldr	r3, [r7, #4]
 919 057a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 920 057c BB81     		strh	r3, [r7, #12]	@ movhi
 461:lib/src/stm32f10x_tim.c ****   
 462:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCMR2 register value */
 463:lib/src/stm32f10x_tim.c ****   tmpccmrx = TIMx->CCMR2;
 921              		.loc 1 463 0
 922 057e 7B68     		ldr	r3, [r7, #4]
 923 0580 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 924 0582 7B81     		strh	r3, [r7, #10]	@ movhi
 464:lib/src/stm32f10x_tim.c ****     
 465:lib/src/stm32f10x_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 466:lib/src/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 925              		.loc 1 466 0
 926 0584 7B89     		ldrh	r3, [r7, #10]	@ movhi
 927 0586 23F07003 		bic	r3, r3, #112
 928 058a 7B81     		strh	r3, [r7, #10]	@ movhi
 467:lib/src/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 929              		.loc 1 467 0
 930 058c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 931 058e 23F00303 		bic	r3, r3, #3
 932 0592 7B81     		strh	r3, [r7, #10]	@ movhi
 468:lib/src/stm32f10x_tim.c ****   /* Select the Output Compare Mode */
 469:lib/src/stm32f10x_tim.c ****   tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 933              		.loc 1 469 0
 934 0594 3B68     		ldr	r3, [r7]
 935 0596 1A88     		ldrh	r2, [r3]
 936 0598 7B89     		ldrh	r3, [r7, #10]	@ movhi
 937 059a 1343     		orrs	r3, r3, r2
 938 059c 7B81     		strh	r3, [r7, #10]	@ movhi
 470:lib/src/stm32f10x_tim.c ****   
 471:lib/src/stm32f10x_tim.c ****   /* Reset the Output Polarity level */
 472:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 939              		.loc 1 472 0
 940 059e FB89     		ldrh	r3, [r7, #14]	@ movhi
 941 05a0 23F40073 		bic	r3, r3, #512
 942 05a4 FB81     		strh	r3, [r7, #14]	@ movhi
 473:lib/src/stm32f10x_tim.c ****   /* Set the Output Compare Polarity */
 474:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 943              		.loc 1 474 0
 944 05a6 3B68     		ldr	r3, [r7]
 945 05a8 1B89     		ldrh	r3, [r3, #8]
 946 05aa 1B02     		lsls	r3, r3, #8
 947 05ac 9AB2     		uxth	r2, r3
 948 05ae FB89     		ldrh	r3, [r7, #14]	@ movhi
 949 05b0 1343     		orrs	r3, r3, r2
 950 05b2 FB81     		strh	r3, [r7, #14]	@ movhi
 475:lib/src/stm32f10x_tim.c ****   
 476:lib/src/stm32f10x_tim.c ****   /* Set the Output State */
 477:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 951              		.loc 1 477 0
 952 05b4 3B68     		ldr	r3, [r7]
 953 05b6 5B88     		ldrh	r3, [r3, #2]
 954 05b8 1B02     		lsls	r3, r3, #8
 955 05ba 9AB2     		uxth	r2, r3
 956 05bc FB89     		ldrh	r3, [r7, #14]	@ movhi
 957 05be 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccNus05k.s 			page 27


 958 05c0 FB81     		strh	r3, [r7, #14]	@ movhi
 478:lib/src/stm32f10x_tim.c ****     
 479:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 959              		.loc 1 479 0
 960 05c2 7B68     		ldr	r3, [r7, #4]
 961 05c4 224A     		ldr	r2, .L43
 962 05c6 9342     		cmp	r3, r2
 963 05c8 03D0     		beq	.L41
 964              		.loc 1 479 0 is_stmt 0 discriminator 1
 965 05ca 7B68     		ldr	r3, [r7, #4]
 966 05cc 214A     		ldr	r2, .L43+4
 967 05ce 9342     		cmp	r3, r2
 968 05d0 2BD1     		bne	.L42
 969              	.L41:
 480:lib/src/stm32f10x_tim.c ****   {
 481:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OUTPUTN_STATE(TIM_OCInitStruct->TIM_OutputNState));
 482:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
 483:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
 484:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 485:lib/src/stm32f10x_tim.c ****     
 486:lib/src/stm32f10x_tim.c ****     /* Reset the Output N Polarity level */
 487:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 970              		.loc 1 487 0 is_stmt 1
 971 05d2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 972 05d4 23F40063 		bic	r3, r3, #2048
 973 05d8 FB81     		strh	r3, [r7, #14]	@ movhi
 488:lib/src/stm32f10x_tim.c ****     /* Set the Output N Polarity */
 489:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 974              		.loc 1 489 0
 975 05da 3B68     		ldr	r3, [r7]
 976 05dc 5B89     		ldrh	r3, [r3, #10]
 977 05de 1B02     		lsls	r3, r3, #8
 978 05e0 9AB2     		uxth	r2, r3
 979 05e2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 980 05e4 1343     		orrs	r3, r3, r2
 981 05e6 FB81     		strh	r3, [r7, #14]	@ movhi
 490:lib/src/stm32f10x_tim.c ****     /* Reset the Output N State */
 491:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 982              		.loc 1 491 0
 983 05e8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 984 05ea 23F48063 		bic	r3, r3, #1024
 985 05ee FB81     		strh	r3, [r7, #14]	@ movhi
 492:lib/src/stm32f10x_tim.c ****     
 493:lib/src/stm32f10x_tim.c ****     /* Set the Output N State */
 494:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 986              		.loc 1 494 0
 987 05f0 3B68     		ldr	r3, [r7]
 988 05f2 9B88     		ldrh	r3, [r3, #4]
 989 05f4 1B02     		lsls	r3, r3, #8
 990 05f6 9AB2     		uxth	r2, r3
 991 05f8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 992 05fa 1343     		orrs	r3, r3, r2
 993 05fc FB81     		strh	r3, [r7, #14]	@ movhi
 495:lib/src/stm32f10x_tim.c ****     /* Reset the Output Compare and Output Compare N IDLE State */
 496:lib/src/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 994              		.loc 1 496 0
 995 05fe BB89     		ldrh	r3, [r7, #12]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 28


 996 0600 23F48053 		bic	r3, r3, #4096
 997 0604 BB81     		strh	r3, [r7, #12]	@ movhi
 497:lib/src/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 998              		.loc 1 497 0
 999 0606 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1000 0608 23F40053 		bic	r3, r3, #8192
 1001 060c BB81     		strh	r3, [r7, #12]	@ movhi
 498:lib/src/stm32f10x_tim.c ****     /* Set the Output Idle state */
 499:lib/src/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 1002              		.loc 1 499 0
 1003 060e 3B68     		ldr	r3, [r7]
 1004 0610 9B89     		ldrh	r3, [r3, #12]
 1005 0612 1B01     		lsls	r3, r3, #4
 1006 0614 9AB2     		uxth	r2, r3
 1007 0616 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1008 0618 1343     		orrs	r3, r3, r2
 1009 061a BB81     		strh	r3, [r7, #12]	@ movhi
 500:lib/src/stm32f10x_tim.c ****     /* Set the Output N Idle state */
 501:lib/src/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 1010              		.loc 1 501 0
 1011 061c 3B68     		ldr	r3, [r7]
 1012 061e DB89     		ldrh	r3, [r3, #14]
 1013 0620 1B01     		lsls	r3, r3, #4
 1014 0622 9AB2     		uxth	r2, r3
 1015 0624 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1016 0626 1343     		orrs	r3, r3, r2
 1017 0628 BB81     		strh	r3, [r7, #12]	@ movhi
 1018              	.L42:
 502:lib/src/stm32f10x_tim.c ****   }
 503:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CR2 */
 504:lib/src/stm32f10x_tim.c ****   TIMx->CR2 = tmpcr2;
 1019              		.loc 1 504 0
 1020 062a 7B68     		ldr	r3, [r7, #4]
 1021 062c BA89     		ldrh	r2, [r7, #12]	@ movhi
 1022 062e 9A80     		strh	r2, [r3, #4]	@ movhi
 505:lib/src/stm32f10x_tim.c ****   
 506:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 */
 507:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1023              		.loc 1 507 0
 1024 0630 7B68     		ldr	r3, [r7, #4]
 1025 0632 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1026 0634 9A83     		strh	r2, [r3, #28]	@ movhi
 508:lib/src/stm32f10x_tim.c **** 
 509:lib/src/stm32f10x_tim.c ****   /* Set the Capture Compare Register value */
 510:lib/src/stm32f10x_tim.c ****   TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 1027              		.loc 1 510 0
 1028 0636 3B68     		ldr	r3, [r7]
 1029 0638 DA88     		ldrh	r2, [r3, #6]
 1030 063a 7B68     		ldr	r3, [r7, #4]
 1031 063c 9A87     		strh	r2, [r3, #60]	@ movhi
 511:lib/src/stm32f10x_tim.c ****   
 512:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER */
 513:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 1032              		.loc 1 513 0
 1033 063e 7B68     		ldr	r3, [r7, #4]
 1034 0640 FA89     		ldrh	r2, [r7, #14]	@ movhi
 1035 0642 1A84     		strh	r2, [r3, #32]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 29


 514:lib/src/stm32f10x_tim.c **** }
 1036              		.loc 1 514 0
 1037 0644 00BF     		nop
 1038 0646 1437     		adds	r7, r7, #20
 1039              		.cfi_def_cfa_offset 4
 1040 0648 BD46     		mov	sp, r7
 1041              		.cfi_def_cfa_register 13
 1042              		@ sp needed
 1043 064a 80BC     		pop	{r7}
 1044              		.cfi_restore 7
 1045              		.cfi_def_cfa_offset 0
 1046 064c 7047     		bx	lr
 1047              	.L44:
 1048 064e 00BF     		.align	2
 1049              	.L43:
 1050 0650 002C0140 		.word	1073818624
 1051 0654 00340140 		.word	1073820672
 1052              		.cfi_endproc
 1053              	.LFE68:
 1054              		.size	TIM_OC3Init, .-TIM_OC3Init
 1055              		.align	1
 1056              		.global	TIM_OC4Init
 1057              		.syntax unified
 1058              		.thumb
 1059              		.thumb_func
 1060              		.fpu softvfp
 1061              		.type	TIM_OC4Init, %function
 1062              	TIM_OC4Init:
 1063              	.LFB69:
 515:lib/src/stm32f10x_tim.c **** 
 516:lib/src/stm32f10x_tim.c **** /**
 517:lib/src/stm32f10x_tim.c ****   * @brief  Initializes the TIMx Channel4 according to the specified
 518:lib/src/stm32f10x_tim.c ****   *         parameters in the TIM_OCInitStruct.
 519:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
 520:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
 521:lib/src/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 522:lib/src/stm32f10x_tim.c ****   * @retval None
 523:lib/src/stm32f10x_tim.c ****   */
 524:lib/src/stm32f10x_tim.c **** void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
 525:lib/src/stm32f10x_tim.c **** {
 1064              		.loc 1 525 0
 1065              		.cfi_startproc
 1066              		@ args = 0, pretend = 0, frame = 16
 1067              		@ frame_needed = 1, uses_anonymous_args = 0
 1068              		@ link register save eliminated.
 1069 0658 80B4     		push	{r7}
 1070              		.cfi_def_cfa_offset 4
 1071              		.cfi_offset 7, -4
 1072 065a 85B0     		sub	sp, sp, #20
 1073              		.cfi_def_cfa_offset 24
 1074 065c 00AF     		add	r7, sp, #0
 1075              		.cfi_def_cfa_register 7
 1076 065e 7860     		str	r0, [r7, #4]
 1077 0660 3960     		str	r1, [r7]
 526:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 1078              		.loc 1 526 0
 1079 0662 0023     		movs	r3, #0
ARM GAS  /tmp/ccNus05k.s 			page 30


 1080 0664 BB81     		strh	r3, [r7, #12]	@ movhi
 1081 0666 0023     		movs	r3, #0
 1082 0668 7B81     		strh	r3, [r7, #10]	@ movhi
 1083 066a 0023     		movs	r3, #0
 1084 066c FB81     		strh	r3, [r7, #14]	@ movhi
 527:lib/src/stm32f10x_tim.c ****    
 528:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 529:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
 530:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
 531:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
 532:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 533:lib/src/stm32f10x_tim.c ****   /* Disable the Channel 2: Reset the CC4E Bit */
 534:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 1085              		.loc 1 534 0
 1086 066e 7B68     		ldr	r3, [r7, #4]
 1087 0670 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1088 0672 9BB2     		uxth	r3, r3
 1089 0674 23F48053 		bic	r3, r3, #4096
 1090 0678 9AB2     		uxth	r2, r3
 1091 067a 7B68     		ldr	r3, [r7, #4]
 1092 067c 1A84     		strh	r2, [r3, #32]	@ movhi
 535:lib/src/stm32f10x_tim.c ****   
 536:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */
 537:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 1093              		.loc 1 537 0
 1094 067e 7B68     		ldr	r3, [r7, #4]
 1095 0680 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 1096 0682 7B81     		strh	r3, [r7, #10]	@ movhi
 538:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CR2 register value */
 539:lib/src/stm32f10x_tim.c ****   tmpcr2 =  TIMx->CR2;
 1097              		.loc 1 539 0
 1098 0684 7B68     		ldr	r3, [r7, #4]
 1099 0686 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1100 0688 FB81     		strh	r3, [r7, #14]	@ movhi
 540:lib/src/stm32f10x_tim.c ****   
 541:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCMR2 register value */
 542:lib/src/stm32f10x_tim.c ****   tmpccmrx = TIMx->CCMR2;
 1101              		.loc 1 542 0
 1102 068a 7B68     		ldr	r3, [r7, #4]
 1103 068c 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 1104 068e BB81     		strh	r3, [r7, #12]	@ movhi
 543:lib/src/stm32f10x_tim.c ****     
 544:lib/src/stm32f10x_tim.c ****   /* Reset the Output Compare mode and Capture/Compare selection Bits */
 545:lib/src/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
 1105              		.loc 1 545 0
 1106 0690 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1107 0692 23F4E043 		bic	r3, r3, #28672
 1108 0696 BB81     		strh	r3, [r7, #12]	@ movhi
 546:lib/src/stm32f10x_tim.c ****   tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 1109              		.loc 1 546 0
 1110 0698 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1111 069a 23F44073 		bic	r3, r3, #768
 1112 069e BB81     		strh	r3, [r7, #12]	@ movhi
 547:lib/src/stm32f10x_tim.c ****   
 548:lib/src/stm32f10x_tim.c ****   /* Select the Output Compare Mode */
 549:lib/src/stm32f10x_tim.c ****   tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 1113              		.loc 1 549 0
ARM GAS  /tmp/ccNus05k.s 			page 31


 1114 06a0 3B68     		ldr	r3, [r7]
 1115 06a2 1B88     		ldrh	r3, [r3]
 1116 06a4 1B02     		lsls	r3, r3, #8
 1117 06a6 9AB2     		uxth	r2, r3
 1118 06a8 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1119 06aa 1343     		orrs	r3, r3, r2
 1120 06ac BB81     		strh	r3, [r7, #12]	@ movhi
 550:lib/src/stm32f10x_tim.c ****   
 551:lib/src/stm32f10x_tim.c ****   /* Reset the Output Polarity level */
 552:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 1121              		.loc 1 552 0
 1122 06ae 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1123 06b0 23F40053 		bic	r3, r3, #8192
 1124 06b4 7B81     		strh	r3, [r7, #10]	@ movhi
 553:lib/src/stm32f10x_tim.c ****   /* Set the Output Compare Polarity */
 554:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 1125              		.loc 1 554 0
 1126 06b6 3B68     		ldr	r3, [r7]
 1127 06b8 1B89     		ldrh	r3, [r3, #8]
 1128 06ba 1B03     		lsls	r3, r3, #12
 1129 06bc 9AB2     		uxth	r2, r3
 1130 06be 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1131 06c0 1343     		orrs	r3, r3, r2
 1132 06c2 7B81     		strh	r3, [r7, #10]	@ movhi
 555:lib/src/stm32f10x_tim.c ****   
 556:lib/src/stm32f10x_tim.c ****   /* Set the Output State */
 557:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 1133              		.loc 1 557 0
 1134 06c4 3B68     		ldr	r3, [r7]
 1135 06c6 5B88     		ldrh	r3, [r3, #2]
 1136 06c8 1B03     		lsls	r3, r3, #12
 1137 06ca 9AB2     		uxth	r2, r3
 1138 06cc 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1139 06ce 1343     		orrs	r3, r3, r2
 1140 06d0 7B81     		strh	r3, [r7, #10]	@ movhi
 558:lib/src/stm32f10x_tim.c ****     
 559:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8))
 1141              		.loc 1 559 0
 1142 06d2 7B68     		ldr	r3, [r7, #4]
 1143 06d4 124A     		ldr	r2, .L48
 1144 06d6 9342     		cmp	r3, r2
 1145 06d8 03D0     		beq	.L46
 1146              		.loc 1 559 0 is_stmt 0 discriminator 1
 1147 06da 7B68     		ldr	r3, [r7, #4]
 1148 06dc 114A     		ldr	r2, .L48+4
 1149 06de 9342     		cmp	r3, r2
 1150 06e0 0AD1     		bne	.L47
 1151              	.L46:
 560:lib/src/stm32f10x_tim.c ****   {
 561:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
 562:lib/src/stm32f10x_tim.c ****     /* Reset the Output Compare IDLE State */
 563:lib/src/stm32f10x_tim.c ****     tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 1152              		.loc 1 563 0 is_stmt 1
 1153 06e2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1154 06e4 23F48043 		bic	r3, r3, #16384
 1155 06e8 FB81     		strh	r3, [r7, #14]	@ movhi
 564:lib/src/stm32f10x_tim.c ****     /* Set the Output Idle state */
ARM GAS  /tmp/ccNus05k.s 			page 32


 565:lib/src/stm32f10x_tim.c ****     tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 1156              		.loc 1 565 0
 1157 06ea 3B68     		ldr	r3, [r7]
 1158 06ec 9B89     		ldrh	r3, [r3, #12]
 1159 06ee 9B01     		lsls	r3, r3, #6
 1160 06f0 9AB2     		uxth	r2, r3
 1161 06f2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 1162 06f4 1343     		orrs	r3, r3, r2
 1163 06f6 FB81     		strh	r3, [r7, #14]	@ movhi
 1164              	.L47:
 566:lib/src/stm32f10x_tim.c ****   }
 567:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CR2 */
 568:lib/src/stm32f10x_tim.c ****   TIMx->CR2 = tmpcr2;
 1165              		.loc 1 568 0
 1166 06f8 7B68     		ldr	r3, [r7, #4]
 1167 06fa FA89     		ldrh	r2, [r7, #14]	@ movhi
 1168 06fc 9A80     		strh	r2, [r3, #4]	@ movhi
 569:lib/src/stm32f10x_tim.c ****   
 570:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 */  
 571:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmrx;
 1169              		.loc 1 571 0
 1170 06fe 7B68     		ldr	r3, [r7, #4]
 1171 0700 BA89     		ldrh	r2, [r7, #12]	@ movhi
 1172 0702 9A83     		strh	r2, [r3, #28]	@ movhi
 572:lib/src/stm32f10x_tim.c **** 
 573:lib/src/stm32f10x_tim.c ****   /* Set the Capture Compare Register value */
 574:lib/src/stm32f10x_tim.c ****   TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 1173              		.loc 1 574 0
 1174 0704 3B68     		ldr	r3, [r7]
 1175 0706 DA88     		ldrh	r2, [r3, #6]
 1176 0708 7B68     		ldr	r3, [r7, #4]
 1177 070a A3F84020 		strh	r2, [r3, #64]	@ movhi
 575:lib/src/stm32f10x_tim.c ****   
 576:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER */
 577:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 1178              		.loc 1 577 0
 1179 070e 7B68     		ldr	r3, [r7, #4]
 1180 0710 7A89     		ldrh	r2, [r7, #10]	@ movhi
 1181 0712 1A84     		strh	r2, [r3, #32]	@ movhi
 578:lib/src/stm32f10x_tim.c **** }
 1182              		.loc 1 578 0
 1183 0714 00BF     		nop
 1184 0716 1437     		adds	r7, r7, #20
 1185              		.cfi_def_cfa_offset 4
 1186 0718 BD46     		mov	sp, r7
 1187              		.cfi_def_cfa_register 13
 1188              		@ sp needed
 1189 071a 80BC     		pop	{r7}
 1190              		.cfi_restore 7
 1191              		.cfi_def_cfa_offset 0
 1192 071c 7047     		bx	lr
 1193              	.L49:
 1194 071e 00BF     		.align	2
 1195              	.L48:
 1196 0720 002C0140 		.word	1073818624
 1197 0724 00340140 		.word	1073820672
 1198              		.cfi_endproc
ARM GAS  /tmp/ccNus05k.s 			page 33


 1199              	.LFE69:
 1200              		.size	TIM_OC4Init, .-TIM_OC4Init
 1201              		.align	1
 1202              		.global	TIM_ICInit
 1203              		.syntax unified
 1204              		.thumb
 1205              		.thumb_func
 1206              		.fpu softvfp
 1207              		.type	TIM_ICInit, %function
 1208              	TIM_ICInit:
 1209              	.LFB70:
 579:lib/src/stm32f10x_tim.c **** 
 580:lib/src/stm32f10x_tim.c **** /**
 581:lib/src/stm32f10x_tim.c ****   * @brief  Initializes the TIM peripheral according to the specified
 582:lib/src/stm32f10x_tim.c ****   *         parameters in the TIM_ICInitStruct.
 583:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
 584:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
 585:lib/src/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 586:lib/src/stm32f10x_tim.c ****   * @retval None
 587:lib/src/stm32f10x_tim.c ****   */
 588:lib/src/stm32f10x_tim.c **** void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
 589:lib/src/stm32f10x_tim.c **** {
 1210              		.loc 1 589 0
 1211              		.cfi_startproc
 1212              		@ args = 0, pretend = 0, frame = 8
 1213              		@ frame_needed = 1, uses_anonymous_args = 0
 1214 0728 80B5     		push	{r7, lr}
 1215              		.cfi_def_cfa_offset 8
 1216              		.cfi_offset 7, -8
 1217              		.cfi_offset 14, -4
 1218 072a 82B0     		sub	sp, sp, #8
 1219              		.cfi_def_cfa_offset 16
 1220 072c 00AF     		add	r7, sp, #0
 1221              		.cfi_def_cfa_register 7
 1222 072e 7860     		str	r0, [r7, #4]
 1223 0730 3960     		str	r1, [r7]
 590:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 591:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_ICInitStruct->TIM_Channel));  
 592:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
 593:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
 594:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
 595:lib/src/stm32f10x_tim.c ****   
 596:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 597:lib/src/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 598:lib/src/stm32f10x_tim.c ****   {
 599:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));
 600:lib/src/stm32f10x_tim.c ****   }
 601:lib/src/stm32f10x_tim.c ****   else
 602:lib/src/stm32f10x_tim.c ****   {
 603:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
 604:lib/src/stm32f10x_tim.c ****   }
 605:lib/src/stm32f10x_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 1224              		.loc 1 605 0
 1225 0732 3B68     		ldr	r3, [r7]
 1226 0734 1B88     		ldrh	r3, [r3]
 1227 0736 002B     		cmp	r3, #0
 1228 0738 0FD1     		bne	.L51
ARM GAS  /tmp/ccNus05k.s 			page 34


 606:lib/src/stm32f10x_tim.c ****   {
 607:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_LIST8_PERIPH(TIMx));
 608:lib/src/stm32f10x_tim.c ****     /* TI1 Configuration */
 609:lib/src/stm32f10x_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 1229              		.loc 1 609 0
 1230 073a 3B68     		ldr	r3, [r7]
 1231 073c 5988     		ldrh	r1, [r3, #2]
 1232 073e 3B68     		ldr	r3, [r7]
 1233 0740 9A88     		ldrh	r2, [r3, #4]
 1234 0742 3B68     		ldr	r3, [r7]
 1235 0744 1B89     		ldrh	r3, [r3, #8]
 1236 0746 7868     		ldr	r0, [r7, #4]
 1237 0748 01F045F9 		bl	TI1_Config
 610:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 611:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 612:lib/src/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 613:lib/src/stm32f10x_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 1238              		.loc 1 613 0
 1239 074c 3B68     		ldr	r3, [r7]
 1240 074e DB88     		ldrh	r3, [r3, #6]
 1241 0750 1946     		mov	r1, r3
 1242 0752 7868     		ldr	r0, [r7, #4]
 1243 0754 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 614:lib/src/stm32f10x_tim.c ****   }
 615:lib/src/stm32f10x_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 616:lib/src/stm32f10x_tim.c ****   {
 617:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_LIST6_PERIPH(TIMx));
 618:lib/src/stm32f10x_tim.c ****     /* TI2 Configuration */
 619:lib/src/stm32f10x_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 620:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 621:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 622:lib/src/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 623:lib/src/stm32f10x_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 624:lib/src/stm32f10x_tim.c ****   }
 625:lib/src/stm32f10x_tim.c ****   else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 626:lib/src/stm32f10x_tim.c ****   {
 627:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 628:lib/src/stm32f10x_tim.c ****     /* TI3 Configuration */
 629:lib/src/stm32f10x_tim.c ****     TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 630:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 631:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 632:lib/src/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 633:lib/src/stm32f10x_tim.c ****     TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 634:lib/src/stm32f10x_tim.c ****   }
 635:lib/src/stm32f10x_tim.c ****   else
 636:lib/src/stm32f10x_tim.c ****   {
 637:lib/src/stm32f10x_tim.c ****     assert_param(IS_TIM_LIST3_PERIPH(TIMx));
 638:lib/src/stm32f10x_tim.c ****     /* TI4 Configuration */
 639:lib/src/stm32f10x_tim.c ****     TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 640:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 641:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 642:lib/src/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 643:lib/src/stm32f10x_tim.c ****     TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 644:lib/src/stm32f10x_tim.c ****   }
 645:lib/src/stm32f10x_tim.c **** }
 1244              		.loc 1 645 0
 1245 0758 36E0     		b	.L55
ARM GAS  /tmp/ccNus05k.s 			page 35


 1246              	.L51:
 615:lib/src/stm32f10x_tim.c ****   {
 1247              		.loc 1 615 0
 1248 075a 3B68     		ldr	r3, [r7]
 1249 075c 1B88     		ldrh	r3, [r3]
 1250 075e 042B     		cmp	r3, #4
 1251 0760 0FD1     		bne	.L53
 619:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 1252              		.loc 1 619 0
 1253 0762 3B68     		ldr	r3, [r7]
 1254 0764 5988     		ldrh	r1, [r3, #2]
 1255 0766 3B68     		ldr	r3, [r7]
 1256 0768 9A88     		ldrh	r2, [r3, #4]
 1257 076a 3B68     		ldr	r3, [r7]
 1258 076c 1B89     		ldrh	r3, [r3, #8]
 1259 076e 7868     		ldr	r0, [r7, #4]
 1260 0770 01F0A2F9 		bl	TI2_Config
 623:lib/src/stm32f10x_tim.c ****   }
 1261              		.loc 1 623 0
 1262 0774 3B68     		ldr	r3, [r7]
 1263 0776 DB88     		ldrh	r3, [r3, #6]
 1264 0778 1946     		mov	r1, r3
 1265 077a 7868     		ldr	r0, [r7, #4]
 1266 077c FFF7FEFF 		bl	TIM_SetIC2Prescaler
 1267              		.loc 1 645 0
 1268 0780 22E0     		b	.L55
 1269              	.L53:
 625:lib/src/stm32f10x_tim.c ****   {
 1270              		.loc 1 625 0
 1271 0782 3B68     		ldr	r3, [r7]
 1272 0784 1B88     		ldrh	r3, [r3]
 1273 0786 082B     		cmp	r3, #8
 1274 0788 0FD1     		bne	.L54
 629:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 1275              		.loc 1 629 0
 1276 078a 3B68     		ldr	r3, [r7]
 1277 078c 5988     		ldrh	r1, [r3, #2]
 1278 078e 3B68     		ldr	r3, [r7]
 1279 0790 9A88     		ldrh	r2, [r3, #4]
 1280 0792 3B68     		ldr	r3, [r7]
 1281 0794 1B89     		ldrh	r3, [r3, #8]
 1282 0796 7868     		ldr	r0, [r7, #4]
 1283 0798 01F008FA 		bl	TI3_Config
 633:lib/src/stm32f10x_tim.c ****   }
 1284              		.loc 1 633 0
 1285 079c 3B68     		ldr	r3, [r7]
 1286 079e DB88     		ldrh	r3, [r3, #6]
 1287 07a0 1946     		mov	r1, r3
 1288 07a2 7868     		ldr	r0, [r7, #4]
 1289 07a4 FFF7FEFF 		bl	TIM_SetIC3Prescaler
 1290              		.loc 1 645 0
 1291 07a8 0EE0     		b	.L55
 1292              	.L54:
 639:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICSelection,
 1293              		.loc 1 639 0
 1294 07aa 3B68     		ldr	r3, [r7]
 1295 07ac 5988     		ldrh	r1, [r3, #2]
ARM GAS  /tmp/ccNus05k.s 			page 36


 1296 07ae 3B68     		ldr	r3, [r7]
 1297 07b0 9A88     		ldrh	r2, [r3, #4]
 1298 07b2 3B68     		ldr	r3, [r7]
 1299 07b4 1B89     		ldrh	r3, [r3, #8]
 1300 07b6 7868     		ldr	r0, [r7, #4]
 1301 07b8 01F06EFA 		bl	TI4_Config
 643:lib/src/stm32f10x_tim.c ****   }
 1302              		.loc 1 643 0
 1303 07bc 3B68     		ldr	r3, [r7]
 1304 07be DB88     		ldrh	r3, [r3, #6]
 1305 07c0 1946     		mov	r1, r3
 1306 07c2 7868     		ldr	r0, [r7, #4]
 1307 07c4 FFF7FEFF 		bl	TIM_SetIC4Prescaler
 1308              	.L55:
 1309              		.loc 1 645 0
 1310 07c8 00BF     		nop
 1311 07ca 0837     		adds	r7, r7, #8
 1312              		.cfi_def_cfa_offset 8
 1313 07cc BD46     		mov	sp, r7
 1314              		.cfi_def_cfa_register 13
 1315              		@ sp needed
 1316 07ce 80BD     		pop	{r7, pc}
 1317              		.cfi_endproc
 1318              	.LFE70:
 1319              		.size	TIM_ICInit, .-TIM_ICInit
 1320              		.align	1
 1321              		.global	TIM_PWMIConfig
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1325              		.fpu softvfp
 1326              		.type	TIM_PWMIConfig, %function
 1327              	TIM_PWMIConfig:
 1328              	.LFB71:
 646:lib/src/stm32f10x_tim.c **** 
 647:lib/src/stm32f10x_tim.c **** /**
 648:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIM peripheral according to the specified
 649:lib/src/stm32f10x_tim.c ****   *         parameters in the TIM_ICInitStruct to measure an external PWM signal.
 650:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
 651:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
 652:lib/src/stm32f10x_tim.c ****   *         that contains the configuration information for the specified TIM peripheral.
 653:lib/src/stm32f10x_tim.c ****   * @retval None
 654:lib/src/stm32f10x_tim.c ****   */
 655:lib/src/stm32f10x_tim.c **** void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
 656:lib/src/stm32f10x_tim.c **** {
 1329              		.loc 1 656 0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 16
 1332              		@ frame_needed = 1, uses_anonymous_args = 0
 1333 07d0 80B5     		push	{r7, lr}
 1334              		.cfi_def_cfa_offset 8
 1335              		.cfi_offset 7, -8
 1336              		.cfi_offset 14, -4
 1337 07d2 84B0     		sub	sp, sp, #16
 1338              		.cfi_def_cfa_offset 24
 1339 07d4 00AF     		add	r7, sp, #0
 1340              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccNus05k.s 			page 37


 1341 07d6 7860     		str	r0, [r7, #4]
 1342 07d8 3960     		str	r1, [r7]
 657:lib/src/stm32f10x_tim.c ****   uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 1343              		.loc 1 657 0
 1344 07da 0023     		movs	r3, #0
 1345 07dc FB81     		strh	r3, [r7, #14]	@ movhi
 658:lib/src/stm32f10x_tim.c ****   uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 1346              		.loc 1 658 0
 1347 07de 0123     		movs	r3, #1
 1348 07e0 BB81     		strh	r3, [r7, #12]	@ movhi
 659:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 660:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
 661:lib/src/stm32f10x_tim.c ****   /* Select the Opposite Input Polarity */
 662:lib/src/stm32f10x_tim.c ****   if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 1349              		.loc 1 662 0
 1350 07e2 3B68     		ldr	r3, [r7]
 1351 07e4 5B88     		ldrh	r3, [r3, #2]
 1352 07e6 002B     		cmp	r3, #0
 1353 07e8 02D1     		bne	.L57
 663:lib/src/stm32f10x_tim.c ****   {
 664:lib/src/stm32f10x_tim.c ****     icoppositepolarity = TIM_ICPolarity_Falling;
 1354              		.loc 1 664 0
 1355 07ea 0223     		movs	r3, #2
 1356 07ec FB81     		strh	r3, [r7, #14]	@ movhi
 1357 07ee 01E0     		b	.L58
 1358              	.L57:
 665:lib/src/stm32f10x_tim.c ****   }
 666:lib/src/stm32f10x_tim.c ****   else
 667:lib/src/stm32f10x_tim.c ****   {
 668:lib/src/stm32f10x_tim.c ****     icoppositepolarity = TIM_ICPolarity_Rising;
 1359              		.loc 1 668 0
 1360 07f0 0023     		movs	r3, #0
 1361 07f2 FB81     		strh	r3, [r7, #14]	@ movhi
 1362              	.L58:
 669:lib/src/stm32f10x_tim.c ****   }
 670:lib/src/stm32f10x_tim.c ****   /* Select the Opposite Input */
 671:lib/src/stm32f10x_tim.c ****   if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 1363              		.loc 1 671 0
 1364 07f4 3B68     		ldr	r3, [r7]
 1365 07f6 9B88     		ldrh	r3, [r3, #4]
 1366 07f8 012B     		cmp	r3, #1
 1367 07fa 02D1     		bne	.L59
 672:lib/src/stm32f10x_tim.c ****   {
 673:lib/src/stm32f10x_tim.c ****     icoppositeselection = TIM_ICSelection_IndirectTI;
 1368              		.loc 1 673 0
 1369 07fc 0223     		movs	r3, #2
 1370 07fe BB81     		strh	r3, [r7, #12]	@ movhi
 1371 0800 01E0     		b	.L60
 1372              	.L59:
 674:lib/src/stm32f10x_tim.c ****   }
 675:lib/src/stm32f10x_tim.c ****   else
 676:lib/src/stm32f10x_tim.c ****   {
 677:lib/src/stm32f10x_tim.c ****     icoppositeselection = TIM_ICSelection_DirectTI;
 1373              		.loc 1 677 0
 1374 0802 0123     		movs	r3, #1
 1375 0804 BB81     		strh	r3, [r7, #12]	@ movhi
 1376              	.L60:
ARM GAS  /tmp/ccNus05k.s 			page 38


 678:lib/src/stm32f10x_tim.c ****   }
 679:lib/src/stm32f10x_tim.c ****   if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 1377              		.loc 1 679 0
 1378 0806 3B68     		ldr	r3, [r7]
 1379 0808 1B88     		ldrh	r3, [r3]
 1380 080a 002B     		cmp	r3, #0
 1381 080c 1CD1     		bne	.L61
 680:lib/src/stm32f10x_tim.c ****   {
 681:lib/src/stm32f10x_tim.c ****     /* TI1 Configuration */
 682:lib/src/stm32f10x_tim.c ****     TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 1382              		.loc 1 682 0
 1383 080e 3B68     		ldr	r3, [r7]
 1384 0810 5988     		ldrh	r1, [r3, #2]
 1385 0812 3B68     		ldr	r3, [r7]
 1386 0814 9A88     		ldrh	r2, [r3, #4]
 1387 0816 3B68     		ldr	r3, [r7]
 1388 0818 1B89     		ldrh	r3, [r3, #8]
 1389 081a 7868     		ldr	r0, [r7, #4]
 1390 081c 01F0DBF8 		bl	TI1_Config
 683:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 684:lib/src/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 685:lib/src/stm32f10x_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 1391              		.loc 1 685 0
 1392 0820 3B68     		ldr	r3, [r7]
 1393 0822 DB88     		ldrh	r3, [r3, #6]
 1394 0824 1946     		mov	r1, r3
 1395 0826 7868     		ldr	r0, [r7, #4]
 1396 0828 FFF7FEFF 		bl	TIM_SetIC1Prescaler
 686:lib/src/stm32f10x_tim.c ****     /* TI2 Configuration */
 687:lib/src/stm32f10x_tim.c ****     TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 1397              		.loc 1 687 0
 1398 082c 3B68     		ldr	r3, [r7]
 1399 082e 1B89     		ldrh	r3, [r3, #8]
 1400 0830 BA89     		ldrh	r2, [r7, #12]
 1401 0832 F989     		ldrh	r1, [r7, #14]
 1402 0834 7868     		ldr	r0, [r7, #4]
 1403 0836 01F03FF9 		bl	TI2_Config
 688:lib/src/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 689:lib/src/stm32f10x_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 1404              		.loc 1 689 0
 1405 083a 3B68     		ldr	r3, [r7]
 1406 083c DB88     		ldrh	r3, [r3, #6]
 1407 083e 1946     		mov	r1, r3
 1408 0840 7868     		ldr	r0, [r7, #4]
 1409 0842 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 690:lib/src/stm32f10x_tim.c ****   }
 691:lib/src/stm32f10x_tim.c ****   else
 692:lib/src/stm32f10x_tim.c ****   { 
 693:lib/src/stm32f10x_tim.c ****     /* TI2 Configuration */
 694:lib/src/stm32f10x_tim.c ****     TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 695:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 696:lib/src/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 697:lib/src/stm32f10x_tim.c ****     TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 698:lib/src/stm32f10x_tim.c ****     /* TI1 Configuration */
 699:lib/src/stm32f10x_tim.c ****     TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 700:lib/src/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 701:lib/src/stm32f10x_tim.c ****     TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
ARM GAS  /tmp/ccNus05k.s 			page 39


 702:lib/src/stm32f10x_tim.c ****   }
 703:lib/src/stm32f10x_tim.c **** }
 1410              		.loc 1 703 0
 1411 0846 1BE0     		b	.L63
 1412              	.L61:
 694:lib/src/stm32f10x_tim.c ****                TIM_ICInitStruct->TIM_ICFilter);
 1413              		.loc 1 694 0
 1414 0848 3B68     		ldr	r3, [r7]
 1415 084a 5988     		ldrh	r1, [r3, #2]
 1416 084c 3B68     		ldr	r3, [r7]
 1417 084e 9A88     		ldrh	r2, [r3, #4]
 1418 0850 3B68     		ldr	r3, [r7]
 1419 0852 1B89     		ldrh	r3, [r3, #8]
 1420 0854 7868     		ldr	r0, [r7, #4]
 1421 0856 01F02FF9 		bl	TI2_Config
 697:lib/src/stm32f10x_tim.c ****     /* TI1 Configuration */
 1422              		.loc 1 697 0
 1423 085a 3B68     		ldr	r3, [r7]
 1424 085c DB88     		ldrh	r3, [r3, #6]
 1425 085e 1946     		mov	r1, r3
 1426 0860 7868     		ldr	r0, [r7, #4]
 1427 0862 FFF7FEFF 		bl	TIM_SetIC2Prescaler
 699:lib/src/stm32f10x_tim.c ****     /* Set the Input Capture Prescaler value */
 1428              		.loc 1 699 0
 1429 0866 3B68     		ldr	r3, [r7]
 1430 0868 1B89     		ldrh	r3, [r3, #8]
 1431 086a BA89     		ldrh	r2, [r7, #12]
 1432 086c F989     		ldrh	r1, [r7, #14]
 1433 086e 7868     		ldr	r0, [r7, #4]
 1434 0870 01F0B1F8 		bl	TI1_Config
 701:lib/src/stm32f10x_tim.c ****   }
 1435              		.loc 1 701 0
 1436 0874 3B68     		ldr	r3, [r7]
 1437 0876 DB88     		ldrh	r3, [r3, #6]
 1438 0878 1946     		mov	r1, r3
 1439 087a 7868     		ldr	r0, [r7, #4]
 1440 087c FFF7FEFF 		bl	TIM_SetIC1Prescaler
 1441              	.L63:
 1442              		.loc 1 703 0
 1443 0880 00BF     		nop
 1444 0882 1037     		adds	r7, r7, #16
 1445              		.cfi_def_cfa_offset 8
 1446 0884 BD46     		mov	sp, r7
 1447              		.cfi_def_cfa_register 13
 1448              		@ sp needed
 1449 0886 80BD     		pop	{r7, pc}
 1450              		.cfi_endproc
 1451              	.LFE71:
 1452              		.size	TIM_PWMIConfig, .-TIM_PWMIConfig
 1453              		.align	1
 1454              		.global	TIM_BDTRConfig
 1455              		.syntax unified
 1456              		.thumb
 1457              		.thumb_func
 1458              		.fpu softvfp
 1459              		.type	TIM_BDTRConfig, %function
 1460              	TIM_BDTRConfig:
ARM GAS  /tmp/ccNus05k.s 			page 40


 1461              	.LFB72:
 704:lib/src/stm32f10x_tim.c **** 
 705:lib/src/stm32f10x_tim.c **** /**
 706:lib/src/stm32f10x_tim.c ****   * @brief  Configures the: Break feature, dead time, Lock level, the OSSI,
 707:lib/src/stm32f10x_tim.c ****   *         the OSSR State and the AOE(automatic output enable).
 708:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 or 8 to select the TIM 
 709:lib/src/stm32f10x_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
 710:lib/src/stm32f10x_tim.c ****   *         contains the BDTR Register configuration  information for the TIM peripheral.
 711:lib/src/stm32f10x_tim.c ****   * @retval None
 712:lib/src/stm32f10x_tim.c ****   */
 713:lib/src/stm32f10x_tim.c **** void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
 714:lib/src/stm32f10x_tim.c **** {
 1462              		.loc 1 714 0
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 8
 1465              		@ frame_needed = 1, uses_anonymous_args = 0
 1466              		@ link register save eliminated.
 1467 0888 80B4     		push	{r7}
 1468              		.cfi_def_cfa_offset 4
 1469              		.cfi_offset 7, -4
 1470 088a 83B0     		sub	sp, sp, #12
 1471              		.cfi_def_cfa_offset 16
 1472 088c 00AF     		add	r7, sp, #0
 1473              		.cfi_def_cfa_register 7
 1474 088e 7860     		str	r0, [r7, #4]
 1475 0890 3960     		str	r1, [r7]
 715:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 716:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 717:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OSSR_STATE(TIM_BDTRInitStruct->TIM_OSSRState));
 718:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OSSI_STATE(TIM_BDTRInitStruct->TIM_OSSIState));
 719:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LOCK_LEVEL(TIM_BDTRInitStruct->TIM_LOCKLevel));
 720:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
 721:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
 722:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
 723:lib/src/stm32f10x_tim.c ****   /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
 724:lib/src/stm32f10x_tim.c ****      the OSSI State, the dead time value and the Automatic Output Enable Bit */
 725:lib/src/stm32f10x_tim.c ****   TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 1476              		.loc 1 725 0
 1477 0892 3B68     		ldr	r3, [r7]
 1478 0894 1A88     		ldrh	r2, [r3]
 1479 0896 3B68     		ldr	r3, [r7]
 1480 0898 5B88     		ldrh	r3, [r3, #2]
 1481 089a 1343     		orrs	r3, r3, r2
 1482 089c 9AB2     		uxth	r2, r3
 726:lib/src/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1483              		.loc 1 726 0
 1484 089e 3B68     		ldr	r3, [r7]
 1485 08a0 9B88     		ldrh	r3, [r3, #4]
 725:lib/src/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1486              		.loc 1 725 0
 1487 08a2 1343     		orrs	r3, r3, r2
 1488 08a4 9AB2     		uxth	r2, r3
 1489              		.loc 1 726 0
 1490 08a6 3B68     		ldr	r3, [r7]
 1491 08a8 DB88     		ldrh	r3, [r3, #6]
 725:lib/src/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1492              		.loc 1 725 0
ARM GAS  /tmp/ccNus05k.s 			page 41


 1493 08aa 1343     		orrs	r3, r3, r2
 1494 08ac 9AB2     		uxth	r2, r3
 727:lib/src/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
 1495              		.loc 1 727 0
 1496 08ae 3B68     		ldr	r3, [r7]
 1497 08b0 1B89     		ldrh	r3, [r3, #8]
 725:lib/src/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1498              		.loc 1 725 0
 1499 08b2 1343     		orrs	r3, r3, r2
 1500 08b4 9AB2     		uxth	r2, r3
 1501              		.loc 1 727 0
 1502 08b6 3B68     		ldr	r3, [r7]
 1503 08b8 5B89     		ldrh	r3, [r3, #10]
 725:lib/src/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1504              		.loc 1 725 0
 1505 08ba 1343     		orrs	r3, r3, r2
 1506 08bc 9AB2     		uxth	r2, r3
 728:lib/src/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_AutomaticOutput;
 1507              		.loc 1 728 0
 1508 08be 3B68     		ldr	r3, [r7]
 1509 08c0 9B89     		ldrh	r3, [r3, #12]
 725:lib/src/stm32f10x_tim.c ****              TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
 1510              		.loc 1 725 0
 1511 08c2 1343     		orrs	r3, r3, r2
 1512 08c4 9AB2     		uxth	r2, r3
 1513 08c6 7B68     		ldr	r3, [r7, #4]
 1514 08c8 A3F84420 		strh	r2, [r3, #68]	@ movhi
 729:lib/src/stm32f10x_tim.c **** }
 1515              		.loc 1 729 0
 1516 08cc 00BF     		nop
 1517 08ce 0C37     		adds	r7, r7, #12
 1518              		.cfi_def_cfa_offset 4
 1519 08d0 BD46     		mov	sp, r7
 1520              		.cfi_def_cfa_register 13
 1521              		@ sp needed
 1522 08d2 80BC     		pop	{r7}
 1523              		.cfi_restore 7
 1524              		.cfi_def_cfa_offset 0
 1525 08d4 7047     		bx	lr
 1526              		.cfi_endproc
 1527              	.LFE72:
 1528              		.size	TIM_BDTRConfig, .-TIM_BDTRConfig
 1529              		.align	1
 1530              		.global	TIM_TimeBaseStructInit
 1531              		.syntax unified
 1532              		.thumb
 1533              		.thumb_func
 1534              		.fpu softvfp
 1535              		.type	TIM_TimeBaseStructInit, %function
 1536              	TIM_TimeBaseStructInit:
 1537              	.LFB73:
 730:lib/src/stm32f10x_tim.c **** 
 731:lib/src/stm32f10x_tim.c **** /**
 732:lib/src/stm32f10x_tim.c ****   * @brief  Fills each TIM_TimeBaseInitStruct member with its default value.
 733:lib/src/stm32f10x_tim.c ****   * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
 734:lib/src/stm32f10x_tim.c ****   *         structure which will be initialized.
 735:lib/src/stm32f10x_tim.c ****   * @retval None
ARM GAS  /tmp/ccNus05k.s 			page 42


 736:lib/src/stm32f10x_tim.c ****   */
 737:lib/src/stm32f10x_tim.c **** void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
 738:lib/src/stm32f10x_tim.c **** {
 1538              		.loc 1 738 0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 8
 1541              		@ frame_needed = 1, uses_anonymous_args = 0
 1542              		@ link register save eliminated.
 1543 08d6 80B4     		push	{r7}
 1544              		.cfi_def_cfa_offset 4
 1545              		.cfi_offset 7, -4
 1546 08d8 83B0     		sub	sp, sp, #12
 1547              		.cfi_def_cfa_offset 16
 1548 08da 00AF     		add	r7, sp, #0
 1549              		.cfi_def_cfa_register 7
 1550 08dc 7860     		str	r0, [r7, #4]
 739:lib/src/stm32f10x_tim.c ****   /* Set the default configuration */
 740:lib/src/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
 1551              		.loc 1 740 0
 1552 08de 7B68     		ldr	r3, [r7, #4]
 1553 08e0 4FF6FF72 		movw	r2, #65535
 1554 08e4 9A80     		strh	r2, [r3, #4]	@ movhi
 741:lib/src/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 1555              		.loc 1 741 0
 1556 08e6 7B68     		ldr	r3, [r7, #4]
 1557 08e8 0022     		movs	r2, #0
 1558 08ea 1A80     		strh	r2, [r3]	@ movhi
 742:lib/src/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 1559              		.loc 1 742 0
 1560 08ec 7B68     		ldr	r3, [r7, #4]
 1561 08ee 0022     		movs	r2, #0
 1562 08f0 DA80     		strh	r2, [r3, #6]	@ movhi
 743:lib/src/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 1563              		.loc 1 743 0
 1564 08f2 7B68     		ldr	r3, [r7, #4]
 1565 08f4 0022     		movs	r2, #0
 1566 08f6 5A80     		strh	r2, [r3, #2]	@ movhi
 744:lib/src/stm32f10x_tim.c ****   TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 1567              		.loc 1 744 0
 1568 08f8 7B68     		ldr	r3, [r7, #4]
 1569 08fa 0022     		movs	r2, #0
 1570 08fc 1A72     		strb	r2, [r3, #8]
 745:lib/src/stm32f10x_tim.c **** }
 1571              		.loc 1 745 0
 1572 08fe 00BF     		nop
 1573 0900 0C37     		adds	r7, r7, #12
 1574              		.cfi_def_cfa_offset 4
 1575 0902 BD46     		mov	sp, r7
 1576              		.cfi_def_cfa_register 13
 1577              		@ sp needed
 1578 0904 80BC     		pop	{r7}
 1579              		.cfi_restore 7
 1580              		.cfi_def_cfa_offset 0
 1581 0906 7047     		bx	lr
 1582              		.cfi_endproc
 1583              	.LFE73:
 1584              		.size	TIM_TimeBaseStructInit, .-TIM_TimeBaseStructInit
ARM GAS  /tmp/ccNus05k.s 			page 43


 1585              		.align	1
 1586              		.global	TIM_OCStructInit
 1587              		.syntax unified
 1588              		.thumb
 1589              		.thumb_func
 1590              		.fpu softvfp
 1591              		.type	TIM_OCStructInit, %function
 1592              	TIM_OCStructInit:
 1593              	.LFB74:
 746:lib/src/stm32f10x_tim.c **** 
 747:lib/src/stm32f10x_tim.c **** /**
 748:lib/src/stm32f10x_tim.c ****   * @brief  Fills each TIM_OCInitStruct member with its default value.
 749:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
 750:lib/src/stm32f10x_tim.c ****   *         be initialized.
 751:lib/src/stm32f10x_tim.c ****   * @retval None
 752:lib/src/stm32f10x_tim.c ****   */
 753:lib/src/stm32f10x_tim.c **** void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
 754:lib/src/stm32f10x_tim.c **** {
 1594              		.loc 1 754 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 8
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598              		@ link register save eliminated.
 1599 0908 80B4     		push	{r7}
 1600              		.cfi_def_cfa_offset 4
 1601              		.cfi_offset 7, -4
 1602 090a 83B0     		sub	sp, sp, #12
 1603              		.cfi_def_cfa_offset 16
 1604 090c 00AF     		add	r7, sp, #0
 1605              		.cfi_def_cfa_register 7
 1606 090e 7860     		str	r0, [r7, #4]
 755:lib/src/stm32f10x_tim.c ****   /* Set the default configuration */
 756:lib/src/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 1607              		.loc 1 756 0
 1608 0910 7B68     		ldr	r3, [r7, #4]
 1609 0912 0022     		movs	r2, #0
 1610 0914 1A80     		strh	r2, [r3]	@ movhi
 757:lib/src/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 1611              		.loc 1 757 0
 1612 0916 7B68     		ldr	r3, [r7, #4]
 1613 0918 0022     		movs	r2, #0
 1614 091a 5A80     		strh	r2, [r3, #2]	@ movhi
 758:lib/src/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 1615              		.loc 1 758 0
 1616 091c 7B68     		ldr	r3, [r7, #4]
 1617 091e 0022     		movs	r2, #0
 1618 0920 9A80     		strh	r2, [r3, #4]	@ movhi
 759:lib/src/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_Pulse = 0x0000;
 1619              		.loc 1 759 0
 1620 0922 7B68     		ldr	r3, [r7, #4]
 1621 0924 0022     		movs	r2, #0
 1622 0926 DA80     		strh	r2, [r3, #6]	@ movhi
 760:lib/src/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 1623              		.loc 1 760 0
 1624 0928 7B68     		ldr	r3, [r7, #4]
 1625 092a 0022     		movs	r2, #0
 1626 092c 1A81     		strh	r2, [r3, #8]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 44


 761:lib/src/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 1627              		.loc 1 761 0
 1628 092e 7B68     		ldr	r3, [r7, #4]
 1629 0930 0022     		movs	r2, #0
 1630 0932 5A81     		strh	r2, [r3, #10]	@ movhi
 762:lib/src/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 1631              		.loc 1 762 0
 1632 0934 7B68     		ldr	r3, [r7, #4]
 1633 0936 0022     		movs	r2, #0
 1634 0938 9A81     		strh	r2, [r3, #12]	@ movhi
 763:lib/src/stm32f10x_tim.c ****   TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 1635              		.loc 1 763 0
 1636 093a 7B68     		ldr	r3, [r7, #4]
 1637 093c 0022     		movs	r2, #0
 1638 093e DA81     		strh	r2, [r3, #14]	@ movhi
 764:lib/src/stm32f10x_tim.c **** }
 1639              		.loc 1 764 0
 1640 0940 00BF     		nop
 1641 0942 0C37     		adds	r7, r7, #12
 1642              		.cfi_def_cfa_offset 4
 1643 0944 BD46     		mov	sp, r7
 1644              		.cfi_def_cfa_register 13
 1645              		@ sp needed
 1646 0946 80BC     		pop	{r7}
 1647              		.cfi_restore 7
 1648              		.cfi_def_cfa_offset 0
 1649 0948 7047     		bx	lr
 1650              		.cfi_endproc
 1651              	.LFE74:
 1652              		.size	TIM_OCStructInit, .-TIM_OCStructInit
 1653              		.align	1
 1654              		.global	TIM_ICStructInit
 1655              		.syntax unified
 1656              		.thumb
 1657              		.thumb_func
 1658              		.fpu softvfp
 1659              		.type	TIM_ICStructInit, %function
 1660              	TIM_ICStructInit:
 1661              	.LFB75:
 765:lib/src/stm32f10x_tim.c **** 
 766:lib/src/stm32f10x_tim.c **** /**
 767:lib/src/stm32f10x_tim.c ****   * @brief  Fills each TIM_ICInitStruct member with its default value.
 768:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
 769:lib/src/stm32f10x_tim.c ****   *         be initialized.
 770:lib/src/stm32f10x_tim.c ****   * @retval None
 771:lib/src/stm32f10x_tim.c ****   */
 772:lib/src/stm32f10x_tim.c **** void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
 773:lib/src/stm32f10x_tim.c **** {
 1662              		.loc 1 773 0
 1663              		.cfi_startproc
 1664              		@ args = 0, pretend = 0, frame = 8
 1665              		@ frame_needed = 1, uses_anonymous_args = 0
 1666              		@ link register save eliminated.
 1667 094a 80B4     		push	{r7}
 1668              		.cfi_def_cfa_offset 4
 1669              		.cfi_offset 7, -4
 1670 094c 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccNus05k.s 			page 45


 1671              		.cfi_def_cfa_offset 16
 1672 094e 00AF     		add	r7, sp, #0
 1673              		.cfi_def_cfa_register 7
 1674 0950 7860     		str	r0, [r7, #4]
 774:lib/src/stm32f10x_tim.c ****   /* Set the default configuration */
 775:lib/src/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 1675              		.loc 1 775 0
 1676 0952 7B68     		ldr	r3, [r7, #4]
 1677 0954 0022     		movs	r2, #0
 1678 0956 1A80     		strh	r2, [r3]	@ movhi
 776:lib/src/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 1679              		.loc 1 776 0
 1680 0958 7B68     		ldr	r3, [r7, #4]
 1681 095a 0022     		movs	r2, #0
 1682 095c 5A80     		strh	r2, [r3, #2]	@ movhi
 777:lib/src/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 1683              		.loc 1 777 0
 1684 095e 7B68     		ldr	r3, [r7, #4]
 1685 0960 0122     		movs	r2, #1
 1686 0962 9A80     		strh	r2, [r3, #4]	@ movhi
 778:lib/src/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 1687              		.loc 1 778 0
 1688 0964 7B68     		ldr	r3, [r7, #4]
 1689 0966 0022     		movs	r2, #0
 1690 0968 DA80     		strh	r2, [r3, #6]	@ movhi
 779:lib/src/stm32f10x_tim.c ****   TIM_ICInitStruct->TIM_ICFilter = 0x00;
 1691              		.loc 1 779 0
 1692 096a 7B68     		ldr	r3, [r7, #4]
 1693 096c 0022     		movs	r2, #0
 1694 096e 1A81     		strh	r2, [r3, #8]	@ movhi
 780:lib/src/stm32f10x_tim.c **** }
 1695              		.loc 1 780 0
 1696 0970 00BF     		nop
 1697 0972 0C37     		adds	r7, r7, #12
 1698              		.cfi_def_cfa_offset 4
 1699 0974 BD46     		mov	sp, r7
 1700              		.cfi_def_cfa_register 13
 1701              		@ sp needed
 1702 0976 80BC     		pop	{r7}
 1703              		.cfi_restore 7
 1704              		.cfi_def_cfa_offset 0
 1705 0978 7047     		bx	lr
 1706              		.cfi_endproc
 1707              	.LFE75:
 1708              		.size	TIM_ICStructInit, .-TIM_ICStructInit
 1709              		.align	1
 1710              		.global	TIM_BDTRStructInit
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1714              		.fpu softvfp
 1715              		.type	TIM_BDTRStructInit, %function
 1716              	TIM_BDTRStructInit:
 1717              	.LFB76:
 781:lib/src/stm32f10x_tim.c **** 
 782:lib/src/stm32f10x_tim.c **** /**
 783:lib/src/stm32f10x_tim.c ****   * @brief  Fills each TIM_BDTRInitStruct member with its default value.
ARM GAS  /tmp/ccNus05k.s 			page 46


 784:lib/src/stm32f10x_tim.c ****   * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
 785:lib/src/stm32f10x_tim.c ****   *         will be initialized.
 786:lib/src/stm32f10x_tim.c ****   * @retval None
 787:lib/src/stm32f10x_tim.c ****   */
 788:lib/src/stm32f10x_tim.c **** void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
 789:lib/src/stm32f10x_tim.c **** {
 1718              		.loc 1 789 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 8
 1721              		@ frame_needed = 1, uses_anonymous_args = 0
 1722              		@ link register save eliminated.
 1723 097a 80B4     		push	{r7}
 1724              		.cfi_def_cfa_offset 4
 1725              		.cfi_offset 7, -4
 1726 097c 83B0     		sub	sp, sp, #12
 1727              		.cfi_def_cfa_offset 16
 1728 097e 00AF     		add	r7, sp, #0
 1729              		.cfi_def_cfa_register 7
 1730 0980 7860     		str	r0, [r7, #4]
 790:lib/src/stm32f10x_tim.c ****   /* Set the default configuration */
 791:lib/src/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 1731              		.loc 1 791 0
 1732 0982 7B68     		ldr	r3, [r7, #4]
 1733 0984 0022     		movs	r2, #0
 1734 0986 1A80     		strh	r2, [r3]	@ movhi
 792:lib/src/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 1735              		.loc 1 792 0
 1736 0988 7B68     		ldr	r3, [r7, #4]
 1737 098a 0022     		movs	r2, #0
 1738 098c 5A80     		strh	r2, [r3, #2]	@ movhi
 793:lib/src/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 1739              		.loc 1 793 0
 1740 098e 7B68     		ldr	r3, [r7, #4]
 1741 0990 0022     		movs	r2, #0
 1742 0992 9A80     		strh	r2, [r3, #4]	@ movhi
 794:lib/src/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 1743              		.loc 1 794 0
 1744 0994 7B68     		ldr	r3, [r7, #4]
 1745 0996 0022     		movs	r2, #0
 1746 0998 DA80     		strh	r2, [r3, #6]	@ movhi
 795:lib/src/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 1747              		.loc 1 795 0
 1748 099a 7B68     		ldr	r3, [r7, #4]
 1749 099c 0022     		movs	r2, #0
 1750 099e 1A81     		strh	r2, [r3, #8]	@ movhi
 796:lib/src/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 1751              		.loc 1 796 0
 1752 09a0 7B68     		ldr	r3, [r7, #4]
 1753 09a2 0022     		movs	r2, #0
 1754 09a4 5A81     		strh	r2, [r3, #10]	@ movhi
 797:lib/src/stm32f10x_tim.c ****   TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 1755              		.loc 1 797 0
 1756 09a6 7B68     		ldr	r3, [r7, #4]
 1757 09a8 0022     		movs	r2, #0
 1758 09aa 9A81     		strh	r2, [r3, #12]	@ movhi
 798:lib/src/stm32f10x_tim.c **** }
 1759              		.loc 1 798 0
ARM GAS  /tmp/ccNus05k.s 			page 47


 1760 09ac 00BF     		nop
 1761 09ae 0C37     		adds	r7, r7, #12
 1762              		.cfi_def_cfa_offset 4
 1763 09b0 BD46     		mov	sp, r7
 1764              		.cfi_def_cfa_register 13
 1765              		@ sp needed
 1766 09b2 80BC     		pop	{r7}
 1767              		.cfi_restore 7
 1768              		.cfi_def_cfa_offset 0
 1769 09b4 7047     		bx	lr
 1770              		.cfi_endproc
 1771              	.LFE76:
 1772              		.size	TIM_BDTRStructInit, .-TIM_BDTRStructInit
 1773              		.align	1
 1774              		.global	TIM_Cmd
 1775              		.syntax unified
 1776              		.thumb
 1777              		.thumb_func
 1778              		.fpu softvfp
 1779              		.type	TIM_Cmd, %function
 1780              	TIM_Cmd:
 1781              	.LFB77:
 799:lib/src/stm32f10x_tim.c **** 
 800:lib/src/stm32f10x_tim.c **** /**
 801:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the specified TIM peripheral.
 802:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIMx peripheral.
 803:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the TIMx peripheral.
 804:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
 805:lib/src/stm32f10x_tim.c ****   * @retval None
 806:lib/src/stm32f10x_tim.c ****   */
 807:lib/src/stm32f10x_tim.c **** void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
 808:lib/src/stm32f10x_tim.c **** {
 1782              		.loc 1 808 0
 1783              		.cfi_startproc
 1784              		@ args = 0, pretend = 0, frame = 8
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786              		@ link register save eliminated.
 1787 09b6 80B4     		push	{r7}
 1788              		.cfi_def_cfa_offset 4
 1789              		.cfi_offset 7, -4
 1790 09b8 83B0     		sub	sp, sp, #12
 1791              		.cfi_def_cfa_offset 16
 1792 09ba 00AF     		add	r7, sp, #0
 1793              		.cfi_def_cfa_register 7
 1794 09bc 7860     		str	r0, [r7, #4]
 1795 09be 0B46     		mov	r3, r1
 1796 09c0 FB70     		strb	r3, [r7, #3]
 809:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 810:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 811:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 812:lib/src/stm32f10x_tim.c ****   
 813:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 1797              		.loc 1 813 0
 1798 09c2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1799 09c4 002B     		cmp	r3, #0
 1800 09c6 08D0     		beq	.L70
 814:lib/src/stm32f10x_tim.c ****   {
ARM GAS  /tmp/ccNus05k.s 			page 48


 815:lib/src/stm32f10x_tim.c ****     /* Enable the TIM Counter */
 816:lib/src/stm32f10x_tim.c ****     TIMx->CR1 |= TIM_CR1_CEN;
 1801              		.loc 1 816 0
 1802 09c8 7B68     		ldr	r3, [r7, #4]
 1803 09ca 1B88     		ldrh	r3, [r3]	@ movhi
 1804 09cc 9BB2     		uxth	r3, r3
 1805 09ce 43F00103 		orr	r3, r3, #1
 1806 09d2 9AB2     		uxth	r2, r3
 1807 09d4 7B68     		ldr	r3, [r7, #4]
 1808 09d6 1A80     		strh	r2, [r3]	@ movhi
 817:lib/src/stm32f10x_tim.c ****   }
 818:lib/src/stm32f10x_tim.c ****   else
 819:lib/src/stm32f10x_tim.c ****   {
 820:lib/src/stm32f10x_tim.c ****     /* Disable the TIM Counter */
 821:lib/src/stm32f10x_tim.c ****     TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 822:lib/src/stm32f10x_tim.c ****   }
 823:lib/src/stm32f10x_tim.c **** }
 1809              		.loc 1 823 0
 1810 09d8 07E0     		b	.L72
 1811              	.L70:
 821:lib/src/stm32f10x_tim.c ****   }
 1812              		.loc 1 821 0
 1813 09da 7B68     		ldr	r3, [r7, #4]
 1814 09dc 1B88     		ldrh	r3, [r3]	@ movhi
 1815 09de 9BB2     		uxth	r3, r3
 1816 09e0 23F00103 		bic	r3, r3, #1
 1817 09e4 9AB2     		uxth	r2, r3
 1818 09e6 7B68     		ldr	r3, [r7, #4]
 1819 09e8 1A80     		strh	r2, [r3]	@ movhi
 1820              	.L72:
 1821              		.loc 1 823 0
 1822 09ea 00BF     		nop
 1823 09ec 0C37     		adds	r7, r7, #12
 1824              		.cfi_def_cfa_offset 4
 1825 09ee BD46     		mov	sp, r7
 1826              		.cfi_def_cfa_register 13
 1827              		@ sp needed
 1828 09f0 80BC     		pop	{r7}
 1829              		.cfi_restore 7
 1830              		.cfi_def_cfa_offset 0
 1831 09f2 7047     		bx	lr
 1832              		.cfi_endproc
 1833              	.LFE77:
 1834              		.size	TIM_Cmd, .-TIM_Cmd
 1835              		.align	1
 1836              		.global	TIM_CtrlPWMOutputs
 1837              		.syntax unified
 1838              		.thumb
 1839              		.thumb_func
 1840              		.fpu softvfp
 1841              		.type	TIM_CtrlPWMOutputs, %function
 1842              	TIM_CtrlPWMOutputs:
 1843              	.LFB78:
 824:lib/src/stm32f10x_tim.c **** 
 825:lib/src/stm32f10x_tim.c **** /**
 826:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the TIM peripheral Main Outputs.
 827:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 8, 15, 16 or 17 to select the TIMx peripheral.
ARM GAS  /tmp/ccNus05k.s 			page 49


 828:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the TIM peripheral Main Outputs.
 829:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
 830:lib/src/stm32f10x_tim.c ****   * @retval None
 831:lib/src/stm32f10x_tim.c ****   */
 832:lib/src/stm32f10x_tim.c **** void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
 833:lib/src/stm32f10x_tim.c **** {
 1844              		.loc 1 833 0
 1845              		.cfi_startproc
 1846              		@ args = 0, pretend = 0, frame = 8
 1847              		@ frame_needed = 1, uses_anonymous_args = 0
 1848              		@ link register save eliminated.
 1849 09f4 80B4     		push	{r7}
 1850              		.cfi_def_cfa_offset 4
 1851              		.cfi_offset 7, -4
 1852 09f6 83B0     		sub	sp, sp, #12
 1853              		.cfi_def_cfa_offset 16
 1854 09f8 00AF     		add	r7, sp, #0
 1855              		.cfi_def_cfa_register 7
 1856 09fa 7860     		str	r0, [r7, #4]
 1857 09fc 0B46     		mov	r3, r1
 1858 09fe FB70     		strb	r3, [r7, #3]
 834:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 835:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
 836:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 837:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 1859              		.loc 1 837 0
 1860 0a00 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1861 0a02 002B     		cmp	r3, #0
 1862 0a04 0CD0     		beq	.L74
 838:lib/src/stm32f10x_tim.c ****   {
 839:lib/src/stm32f10x_tim.c ****     /* Enable the TIM Main Output */
 840:lib/src/stm32f10x_tim.c ****     TIMx->BDTR |= TIM_BDTR_MOE;
 1863              		.loc 1 840 0
 1864 0a06 7B68     		ldr	r3, [r7, #4]
 1865 0a08 B3F84430 		ldrh	r3, [r3, #68]	@ movhi
 1866 0a0c 9BB2     		uxth	r3, r3
 1867 0a0e 6FEA4343 		mvn	r3, r3, lsl #17
 1868 0a12 6FEA5343 		mvn	r3, r3, lsr #17
 1869 0a16 9AB2     		uxth	r2, r3
 1870 0a18 7B68     		ldr	r3, [r7, #4]
 1871 0a1a A3F84420 		strh	r2, [r3, #68]	@ movhi
 841:lib/src/stm32f10x_tim.c ****   }
 842:lib/src/stm32f10x_tim.c ****   else
 843:lib/src/stm32f10x_tim.c ****   {
 844:lib/src/stm32f10x_tim.c ****     /* Disable the TIM Main Output */
 845:lib/src/stm32f10x_tim.c ****     TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 846:lib/src/stm32f10x_tim.c ****   }  
 847:lib/src/stm32f10x_tim.c **** }
 1872              		.loc 1 847 0
 1873 0a1e 09E0     		b	.L76
 1874              	.L74:
 845:lib/src/stm32f10x_tim.c ****   }  
 1875              		.loc 1 845 0
 1876 0a20 7B68     		ldr	r3, [r7, #4]
 1877 0a22 B3F84430 		ldrh	r3, [r3, #68]	@ movhi
 1878 0a26 9BB2     		uxth	r3, r3
 1879 0a28 C3F30E03 		ubfx	r3, r3, #0, #15
ARM GAS  /tmp/ccNus05k.s 			page 50


 1880 0a2c 9AB2     		uxth	r2, r3
 1881 0a2e 7B68     		ldr	r3, [r7, #4]
 1882 0a30 A3F84420 		strh	r2, [r3, #68]	@ movhi
 1883              	.L76:
 1884              		.loc 1 847 0
 1885 0a34 00BF     		nop
 1886 0a36 0C37     		adds	r7, r7, #12
 1887              		.cfi_def_cfa_offset 4
 1888 0a38 BD46     		mov	sp, r7
 1889              		.cfi_def_cfa_register 13
 1890              		@ sp needed
 1891 0a3a 80BC     		pop	{r7}
 1892              		.cfi_restore 7
 1893              		.cfi_def_cfa_offset 0
 1894 0a3c 7047     		bx	lr
 1895              		.cfi_endproc
 1896              	.LFE78:
 1897              		.size	TIM_CtrlPWMOutputs, .-TIM_CtrlPWMOutputs
 1898              		.align	1
 1899              		.global	TIM_ITConfig
 1900              		.syntax unified
 1901              		.thumb
 1902              		.thumb_func
 1903              		.fpu softvfp
 1904              		.type	TIM_ITConfig, %function
 1905              	TIM_ITConfig:
 1906              	.LFB79:
 848:lib/src/stm32f10x_tim.c **** 
 849:lib/src/stm32f10x_tim.c **** /**
 850:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the specified TIM interrupts.
 851:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIMx peripheral.
 852:lib/src/stm32f10x_tim.c ****   * @param  TIM_IT: specifies the TIM interrupts sources to be enabled or disabled.
 853:lib/src/stm32f10x_tim.c ****   *   This parameter can be any combination of the following values:
 854:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_Update: TIM update Interrupt source
 855:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
 856:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
 857:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
 858:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
 859:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_COM: TIM Commutation Interrupt source
 860:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_Trigger: TIM Trigger Interrupt source
 861:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_Break: TIM Break Interrupt source
 862:lib/src/stm32f10x_tim.c ****   * @note 
 863:lib/src/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can only generate an update interrupt.
 864:lib/src/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_IT_Update, TIM_IT_CC1,
 865:lib/src/stm32f10x_tim.c ****   *      TIM_IT_CC2 or TIM_IT_Trigger. 
 866:lib/src/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
 867:lib/src/stm32f10x_tim.c ****   *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
 868:lib/src/stm32f10x_tim.c ****   *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
 869:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the TIM interrupts.
 870:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
 871:lib/src/stm32f10x_tim.c ****   * @retval None
 872:lib/src/stm32f10x_tim.c ****   */
 873:lib/src/stm32f10x_tim.c **** void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
 874:lib/src/stm32f10x_tim.c **** {  
 1907              		.loc 1 874 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccNus05k.s 			page 51


 1910              		@ frame_needed = 1, uses_anonymous_args = 0
 1911              		@ link register save eliminated.
 1912 0a3e 80B4     		push	{r7}
 1913              		.cfi_def_cfa_offset 4
 1914              		.cfi_offset 7, -4
 1915 0a40 83B0     		sub	sp, sp, #12
 1916              		.cfi_def_cfa_offset 16
 1917 0a42 00AF     		add	r7, sp, #0
 1918              		.cfi_def_cfa_register 7
 1919 0a44 7860     		str	r0, [r7, #4]
 1920 0a46 0B46     		mov	r3, r1
 1921 0a48 7B80     		strh	r3, [r7, #2]	@ movhi
 1922 0a4a 1346     		mov	r3, r2
 1923 0a4c 7B70     		strb	r3, [r7, #1]
 875:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 876:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 877:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
 878:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 879:lib/src/stm32f10x_tim.c ****   
 880:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 1924              		.loc 1 880 0
 1925 0a4e 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 1926 0a50 002B     		cmp	r3, #0
 1927 0a52 08D0     		beq	.L78
 881:lib/src/stm32f10x_tim.c ****   {
 882:lib/src/stm32f10x_tim.c ****     /* Enable the Interrupt sources */
 883:lib/src/stm32f10x_tim.c ****     TIMx->DIER |= TIM_IT;
 1928              		.loc 1 883 0
 1929 0a54 7B68     		ldr	r3, [r7, #4]
 1930 0a56 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1931 0a58 9AB2     		uxth	r2, r3
 1932 0a5a 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1933 0a5c 1343     		orrs	r3, r3, r2
 1934 0a5e 9AB2     		uxth	r2, r3
 1935 0a60 7B68     		ldr	r3, [r7, #4]
 1936 0a62 9A81     		strh	r2, [r3, #12]	@ movhi
 884:lib/src/stm32f10x_tim.c ****   }
 885:lib/src/stm32f10x_tim.c ****   else
 886:lib/src/stm32f10x_tim.c ****   {
 887:lib/src/stm32f10x_tim.c ****     /* Disable the Interrupt sources */
 888:lib/src/stm32f10x_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_IT;
 889:lib/src/stm32f10x_tim.c ****   }
 890:lib/src/stm32f10x_tim.c **** }
 1937              		.loc 1 890 0
 1938 0a64 09E0     		b	.L80
 1939              	.L78:
 888:lib/src/stm32f10x_tim.c ****   }
 1940              		.loc 1 888 0
 1941 0a66 7B68     		ldr	r3, [r7, #4]
 1942 0a68 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1943 0a6a 9AB2     		uxth	r2, r3
 1944 0a6c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1945 0a6e DB43     		mvns	r3, r3
 1946 0a70 9BB2     		uxth	r3, r3
 1947 0a72 1340     		ands	r3, r3, r2
 1948 0a74 9AB2     		uxth	r2, r3
 1949 0a76 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNus05k.s 			page 52


 1950 0a78 9A81     		strh	r2, [r3, #12]	@ movhi
 1951              	.L80:
 1952              		.loc 1 890 0
 1953 0a7a 00BF     		nop
 1954 0a7c 0C37     		adds	r7, r7, #12
 1955              		.cfi_def_cfa_offset 4
 1956 0a7e BD46     		mov	sp, r7
 1957              		.cfi_def_cfa_register 13
 1958              		@ sp needed
 1959 0a80 80BC     		pop	{r7}
 1960              		.cfi_restore 7
 1961              		.cfi_def_cfa_offset 0
 1962 0a82 7047     		bx	lr
 1963              		.cfi_endproc
 1964              	.LFE79:
 1965              		.size	TIM_ITConfig, .-TIM_ITConfig
 1966              		.align	1
 1967              		.global	TIM_GenerateEvent
 1968              		.syntax unified
 1969              		.thumb
 1970              		.thumb_func
 1971              		.fpu softvfp
 1972              		.type	TIM_GenerateEvent, %function
 1973              	TIM_GenerateEvent:
 1974              	.LFB80:
 891:lib/src/stm32f10x_tim.c **** 
 892:lib/src/stm32f10x_tim.c **** /**
 893:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx event to be generate by software.
 894:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
 895:lib/src/stm32f10x_tim.c ****   * @param  TIM_EventSource: specifies the event source.
 896:lib/src/stm32f10x_tim.c ****   *   This parameter can be one or more of the following values:	   
 897:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EventSource_Update: Timer update Event source
 898:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EventSource_CC1: Timer Capture Compare 1 Event source
 899:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EventSource_CC2: Timer Capture Compare 2 Event source
 900:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EventSource_CC3: Timer Capture Compare 3 Event source
 901:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EventSource_CC4: Timer Capture Compare 4 Event source
 902:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EventSource_COM: Timer COM event source  
 903:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EventSource_Trigger: Timer Trigger Event source
 904:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EventSource_Break: Timer Break event source
 905:lib/src/stm32f10x_tim.c ****   * @note 
 906:lib/src/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can only generate an update event. 
 907:lib/src/stm32f10x_tim.c ****   *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
 908:lib/src/stm32f10x_tim.c ****   * @retval None
 909:lib/src/stm32f10x_tim.c ****   */
 910:lib/src/stm32f10x_tim.c **** void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
 911:lib/src/stm32f10x_tim.c **** { 
 1975              		.loc 1 911 0
 1976              		.cfi_startproc
 1977              		@ args = 0, pretend = 0, frame = 8
 1978              		@ frame_needed = 1, uses_anonymous_args = 0
 1979              		@ link register save eliminated.
 1980 0a84 80B4     		push	{r7}
 1981              		.cfi_def_cfa_offset 4
 1982              		.cfi_offset 7, -4
 1983 0a86 83B0     		sub	sp, sp, #12
 1984              		.cfi_def_cfa_offset 16
 1985 0a88 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccNus05k.s 			page 53


 1986              		.cfi_def_cfa_register 7
 1987 0a8a 7860     		str	r0, [r7, #4]
 1988 0a8c 0B46     		mov	r3, r1
 1989 0a8e 7B80     		strh	r3, [r7, #2]	@ movhi
 912:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 913:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
 914:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
 915:lib/src/stm32f10x_tim.c ****   
 916:lib/src/stm32f10x_tim.c ****   /* Set the event sources */
 917:lib/src/stm32f10x_tim.c ****   TIMx->EGR = TIM_EventSource;
 1990              		.loc 1 917 0
 1991 0a90 7B68     		ldr	r3, [r7, #4]
 1992 0a92 7A88     		ldrh	r2, [r7, #2]	@ movhi
 1993 0a94 9A82     		strh	r2, [r3, #20]	@ movhi
 918:lib/src/stm32f10x_tim.c **** }
 1994              		.loc 1 918 0
 1995 0a96 00BF     		nop
 1996 0a98 0C37     		adds	r7, r7, #12
 1997              		.cfi_def_cfa_offset 4
 1998 0a9a BD46     		mov	sp, r7
 1999              		.cfi_def_cfa_register 13
 2000              		@ sp needed
 2001 0a9c 80BC     		pop	{r7}
 2002              		.cfi_restore 7
 2003              		.cfi_def_cfa_offset 0
 2004 0a9e 7047     		bx	lr
 2005              		.cfi_endproc
 2006              	.LFE80:
 2007              		.size	TIM_GenerateEvent, .-TIM_GenerateEvent
 2008              		.align	1
 2009              		.global	TIM_DMAConfig
 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2013              		.fpu softvfp
 2014              		.type	TIM_DMAConfig, %function
 2015              	TIM_DMAConfig:
 2016              	.LFB81:
 919:lib/src/stm32f10x_tim.c **** 
 920:lib/src/stm32f10x_tim.c **** /**
 921:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx's DMA interface.
 922:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 15, 16 or 17 to select 
 923:lib/src/stm32f10x_tim.c ****   *   the TIM peripheral.
 924:lib/src/stm32f10x_tim.c ****   * @param  TIM_DMABase: DMA Base address.
 925:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
 926:lib/src/stm32f10x_tim.c ****   *     @arg TIM_DMABase_CR, TIM_DMABase_CR2, TIM_DMABase_SMCR,
 927:lib/src/stm32f10x_tim.c ****   *          TIM_DMABase_DIER, TIM1_DMABase_SR, TIM_DMABase_EGR,
 928:lib/src/stm32f10x_tim.c ****   *          TIM_DMABase_CCMR1, TIM_DMABase_CCMR2, TIM_DMABase_CCER,
 929:lib/src/stm32f10x_tim.c ****   *          TIM_DMABase_CNT, TIM_DMABase_PSC, TIM_DMABase_ARR,
 930:lib/src/stm32f10x_tim.c ****   *          TIM_DMABase_RCR, TIM_DMABase_CCR1, TIM_DMABase_CCR2,
 931:lib/src/stm32f10x_tim.c ****   *          TIM_DMABase_CCR3, TIM_DMABase_CCR4, TIM_DMABase_BDTR,
 932:lib/src/stm32f10x_tim.c ****   *          TIM_DMABase_DCR.
 933:lib/src/stm32f10x_tim.c ****   * @param  TIM_DMABurstLength: DMA Burst length.
 934:lib/src/stm32f10x_tim.c ****   *   This parameter can be one value between:
 935:lib/src/stm32f10x_tim.c ****   *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
 936:lib/src/stm32f10x_tim.c ****   * @retval None
 937:lib/src/stm32f10x_tim.c ****   */
ARM GAS  /tmp/ccNus05k.s 			page 54


 938:lib/src/stm32f10x_tim.c **** void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
 939:lib/src/stm32f10x_tim.c **** {
 2017              		.loc 1 939 0
 2018              		.cfi_startproc
 2019              		@ args = 0, pretend = 0, frame = 8
 2020              		@ frame_needed = 1, uses_anonymous_args = 0
 2021              		@ link register save eliminated.
 2022 0aa0 80B4     		push	{r7}
 2023              		.cfi_def_cfa_offset 4
 2024              		.cfi_offset 7, -4
 2025 0aa2 83B0     		sub	sp, sp, #12
 2026              		.cfi_def_cfa_offset 16
 2027 0aa4 00AF     		add	r7, sp, #0
 2028              		.cfi_def_cfa_register 7
 2029 0aa6 7860     		str	r0, [r7, #4]
 2030 0aa8 0B46     		mov	r3, r1
 2031 0aaa 7B80     		strh	r3, [r7, #2]	@ movhi
 2032 0aac 1346     		mov	r3, r2	@ movhi
 2033 0aae 3B80     		strh	r3, [r7]	@ movhi
 940:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 941:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
 942:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
 943:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
 944:lib/src/stm32f10x_tim.c ****   /* Set the DMA Base and the DMA Burst Length */
 945:lib/src/stm32f10x_tim.c ****   TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 2034              		.loc 1 945 0
 2035 0ab0 7A88     		ldrh	r2, [r7, #2]	@ movhi
 2036 0ab2 3B88     		ldrh	r3, [r7]	@ movhi
 2037 0ab4 1343     		orrs	r3, r3, r2
 2038 0ab6 9AB2     		uxth	r2, r3
 2039 0ab8 7B68     		ldr	r3, [r7, #4]
 2040 0aba A3F84820 		strh	r2, [r3, #72]	@ movhi
 946:lib/src/stm32f10x_tim.c **** }
 2041              		.loc 1 946 0
 2042 0abe 00BF     		nop
 2043 0ac0 0C37     		adds	r7, r7, #12
 2044              		.cfi_def_cfa_offset 4
 2045 0ac2 BD46     		mov	sp, r7
 2046              		.cfi_def_cfa_register 13
 2047              		@ sp needed
 2048 0ac4 80BC     		pop	{r7}
 2049              		.cfi_restore 7
 2050              		.cfi_def_cfa_offset 0
 2051 0ac6 7047     		bx	lr
 2052              		.cfi_endproc
 2053              	.LFE81:
 2054              		.size	TIM_DMAConfig, .-TIM_DMAConfig
 2055              		.align	1
 2056              		.global	TIM_DMACmd
 2057              		.syntax unified
 2058              		.thumb
 2059              		.thumb_func
 2060              		.fpu softvfp
 2061              		.type	TIM_DMACmd, %function
 2062              	TIM_DMACmd:
 2063              	.LFB82:
 947:lib/src/stm32f10x_tim.c **** 
ARM GAS  /tmp/ccNus05k.s 			page 55


 948:lib/src/stm32f10x_tim.c **** /**
 949:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx's DMA Requests.
 950:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 6, 7, 8, 15, 16 or 17 
 951:lib/src/stm32f10x_tim.c ****   *   to select the TIM peripheral. 
 952:lib/src/stm32f10x_tim.c ****   * @param  TIM_DMASource: specifies the DMA Request sources.
 953:lib/src/stm32f10x_tim.c ****   *   This parameter can be any combination of the following values:
 954:lib/src/stm32f10x_tim.c ****   *     @arg TIM_DMA_Update: TIM update Interrupt source
 955:lib/src/stm32f10x_tim.c ****   *     @arg TIM_DMA_CC1: TIM Capture Compare 1 DMA source
 956:lib/src/stm32f10x_tim.c ****   *     @arg TIM_DMA_CC2: TIM Capture Compare 2 DMA source
 957:lib/src/stm32f10x_tim.c ****   *     @arg TIM_DMA_CC3: TIM Capture Compare 3 DMA source
 958:lib/src/stm32f10x_tim.c ****   *     @arg TIM_DMA_CC4: TIM Capture Compare 4 DMA source
 959:lib/src/stm32f10x_tim.c ****   *     @arg TIM_DMA_COM: TIM Commutation DMA source
 960:lib/src/stm32f10x_tim.c ****   *     @arg TIM_DMA_Trigger: TIM Trigger DMA source
 961:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the DMA Request sources.
 962:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
 963:lib/src/stm32f10x_tim.c ****   * @retval None
 964:lib/src/stm32f10x_tim.c ****   */
 965:lib/src/stm32f10x_tim.c **** void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
 966:lib/src/stm32f10x_tim.c **** { 
 2064              		.loc 1 966 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 8
 2067              		@ frame_needed = 1, uses_anonymous_args = 0
 2068              		@ link register save eliminated.
 2069 0ac8 80B4     		push	{r7}
 2070              		.cfi_def_cfa_offset 4
 2071              		.cfi_offset 7, -4
 2072 0aca 83B0     		sub	sp, sp, #12
 2073              		.cfi_def_cfa_offset 16
 2074 0acc 00AF     		add	r7, sp, #0
 2075              		.cfi_def_cfa_register 7
 2076 0ace 7860     		str	r0, [r7, #4]
 2077 0ad0 0B46     		mov	r3, r1
 2078 0ad2 7B80     		strh	r3, [r7, #2]	@ movhi
 2079 0ad4 1346     		mov	r3, r2
 2080 0ad6 7B70     		strb	r3, [r7, #1]
 967:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 968:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST9_PERIPH(TIMx));
 969:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
 970:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 971:lib/src/stm32f10x_tim.c ****   
 972:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 2081              		.loc 1 972 0
 2082 0ad8 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 2083 0ada 002B     		cmp	r3, #0
 2084 0adc 08D0     		beq	.L84
 973:lib/src/stm32f10x_tim.c ****   {
 974:lib/src/stm32f10x_tim.c ****     /* Enable the DMA sources */
 975:lib/src/stm32f10x_tim.c ****     TIMx->DIER |= TIM_DMASource; 
 2085              		.loc 1 975 0
 2086 0ade 7B68     		ldr	r3, [r7, #4]
 2087 0ae0 9B89     		ldrh	r3, [r3, #12]	@ movhi
 2088 0ae2 9AB2     		uxth	r2, r3
 2089 0ae4 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2090 0ae6 1343     		orrs	r3, r3, r2
 2091 0ae8 9AB2     		uxth	r2, r3
 2092 0aea 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNus05k.s 			page 56


 2093 0aec 9A81     		strh	r2, [r3, #12]	@ movhi
 976:lib/src/stm32f10x_tim.c ****   }
 977:lib/src/stm32f10x_tim.c ****   else
 978:lib/src/stm32f10x_tim.c ****   {
 979:lib/src/stm32f10x_tim.c ****     /* Disable the DMA sources */
 980:lib/src/stm32f10x_tim.c ****     TIMx->DIER &= (uint16_t)~TIM_DMASource;
 981:lib/src/stm32f10x_tim.c ****   }
 982:lib/src/stm32f10x_tim.c **** }
 2094              		.loc 1 982 0
 2095 0aee 09E0     		b	.L86
 2096              	.L84:
 980:lib/src/stm32f10x_tim.c ****   }
 2097              		.loc 1 980 0
 2098 0af0 7B68     		ldr	r3, [r7, #4]
 2099 0af2 9B89     		ldrh	r3, [r3, #12]	@ movhi
 2100 0af4 9AB2     		uxth	r2, r3
 2101 0af6 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2102 0af8 DB43     		mvns	r3, r3
 2103 0afa 9BB2     		uxth	r3, r3
 2104 0afc 1340     		ands	r3, r3, r2
 2105 0afe 9AB2     		uxth	r2, r3
 2106 0b00 7B68     		ldr	r3, [r7, #4]
 2107 0b02 9A81     		strh	r2, [r3, #12]	@ movhi
 2108              	.L86:
 2109              		.loc 1 982 0
 2110 0b04 00BF     		nop
 2111 0b06 0C37     		adds	r7, r7, #12
 2112              		.cfi_def_cfa_offset 4
 2113 0b08 BD46     		mov	sp, r7
 2114              		.cfi_def_cfa_register 13
 2115              		@ sp needed
 2116 0b0a 80BC     		pop	{r7}
 2117              		.cfi_restore 7
 2118              		.cfi_def_cfa_offset 0
 2119 0b0c 7047     		bx	lr
 2120              		.cfi_endproc
 2121              	.LFE82:
 2122              		.size	TIM_DMACmd, .-TIM_DMACmd
 2123              		.align	1
 2124              		.global	TIM_InternalClockConfig
 2125              		.syntax unified
 2126              		.thumb
 2127              		.thumb_func
 2128              		.fpu softvfp
 2129              		.type	TIM_InternalClockConfig, %function
 2130              	TIM_InternalClockConfig:
 2131              	.LFB83:
 983:lib/src/stm32f10x_tim.c **** 
 984:lib/src/stm32f10x_tim.c **** /**
 985:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx internal Clock
 986:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
 987:lib/src/stm32f10x_tim.c ****   *         to select the TIM peripheral.
 988:lib/src/stm32f10x_tim.c ****   * @retval None
 989:lib/src/stm32f10x_tim.c ****   */
 990:lib/src/stm32f10x_tim.c **** void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
 991:lib/src/stm32f10x_tim.c **** {
 2132              		.loc 1 991 0
ARM GAS  /tmp/ccNus05k.s 			page 57


 2133              		.cfi_startproc
 2134              		@ args = 0, pretend = 0, frame = 8
 2135              		@ frame_needed = 1, uses_anonymous_args = 0
 2136              		@ link register save eliminated.
 2137 0b0e 80B4     		push	{r7}
 2138              		.cfi_def_cfa_offset 4
 2139              		.cfi_offset 7, -4
 2140 0b10 83B0     		sub	sp, sp, #12
 2141              		.cfi_def_cfa_offset 16
 2142 0b12 00AF     		add	r7, sp, #0
 2143              		.cfi_def_cfa_register 7
 2144 0b14 7860     		str	r0, [r7, #4]
 992:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
 993:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
 994:lib/src/stm32f10x_tim.c ****   /* Disable slave mode to clock the prescaler directly with the internal clock */
 995:lib/src/stm32f10x_tim.c ****   TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 2145              		.loc 1 995 0
 2146 0b16 7B68     		ldr	r3, [r7, #4]
 2147 0b18 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2148 0b1a 9BB2     		uxth	r3, r3
 2149 0b1c 23F00703 		bic	r3, r3, #7
 2150 0b20 9AB2     		uxth	r2, r3
 2151 0b22 7B68     		ldr	r3, [r7, #4]
 2152 0b24 1A81     		strh	r2, [r3, #8]	@ movhi
 996:lib/src/stm32f10x_tim.c **** }
 2153              		.loc 1 996 0
 2154 0b26 00BF     		nop
 2155 0b28 0C37     		adds	r7, r7, #12
 2156              		.cfi_def_cfa_offset 4
 2157 0b2a BD46     		mov	sp, r7
 2158              		.cfi_def_cfa_register 13
 2159              		@ sp needed
 2160 0b2c 80BC     		pop	{r7}
 2161              		.cfi_restore 7
 2162              		.cfi_def_cfa_offset 0
 2163 0b2e 7047     		bx	lr
 2164              		.cfi_endproc
 2165              	.LFE83:
 2166              		.size	TIM_InternalClockConfig, .-TIM_InternalClockConfig
 2167              		.align	1
 2168              		.global	TIM_ITRxExternalClockConfig
 2169              		.syntax unified
 2170              		.thumb
 2171              		.thumb_func
 2172              		.fpu softvfp
 2173              		.type	TIM_ITRxExternalClockConfig, %function
 2174              	TIM_ITRxExternalClockConfig:
 2175              	.LFB84:
 997:lib/src/stm32f10x_tim.c **** 
 998:lib/src/stm32f10x_tim.c **** /**
 999:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Internal Trigger as External Clock
1000:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 9, 12 or 15 to select the TIM peripheral.
1001:lib/src/stm32f10x_tim.c ****   * @param  TIM_ITRSource: Trigger source.
1002:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1003:lib/src/stm32f10x_tim.c ****   * @param  TIM_TS_ITR0: Internal Trigger 0
1004:lib/src/stm32f10x_tim.c ****   * @param  TIM_TS_ITR1: Internal Trigger 1
1005:lib/src/stm32f10x_tim.c ****   * @param  TIM_TS_ITR2: Internal Trigger 2
ARM GAS  /tmp/ccNus05k.s 			page 58


1006:lib/src/stm32f10x_tim.c ****   * @param  TIM_TS_ITR3: Internal Trigger 3
1007:lib/src/stm32f10x_tim.c ****   * @retval None
1008:lib/src/stm32f10x_tim.c ****   */
1009:lib/src/stm32f10x_tim.c **** void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
1010:lib/src/stm32f10x_tim.c **** {
 2176              		.loc 1 1010 0
 2177              		.cfi_startproc
 2178              		@ args = 0, pretend = 0, frame = 8
 2179              		@ frame_needed = 1, uses_anonymous_args = 0
 2180 0b30 80B5     		push	{r7, lr}
 2181              		.cfi_def_cfa_offset 8
 2182              		.cfi_offset 7, -8
 2183              		.cfi_offset 14, -4
 2184 0b32 82B0     		sub	sp, sp, #8
 2185              		.cfi_def_cfa_offset 16
 2186 0b34 00AF     		add	r7, sp, #0
 2187              		.cfi_def_cfa_register 7
 2188 0b36 7860     		str	r0, [r7, #4]
 2189 0b38 0B46     		mov	r3, r1
 2190 0b3a 7B80     		strh	r3, [r7, #2]	@ movhi
1011:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1012:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1013:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
1014:lib/src/stm32f10x_tim.c ****   /* Select the Internal Trigger */
1015:lib/src/stm32f10x_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
 2191              		.loc 1 1015 0
 2192 0b3c 7B88     		ldrh	r3, [r7, #2]
 2193 0b3e 1946     		mov	r1, r3
 2194 0b40 7868     		ldr	r0, [r7, #4]
 2195 0b42 FFF7FEFF 		bl	TIM_SelectInputTrigger
1016:lib/src/stm32f10x_tim.c ****   /* Select the External clock mode1 */
1017:lib/src/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 2196              		.loc 1 1017 0
 2197 0b46 7B68     		ldr	r3, [r7, #4]
 2198 0b48 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2199 0b4a 9BB2     		uxth	r3, r3
 2200 0b4c 43F00703 		orr	r3, r3, #7
 2201 0b50 9AB2     		uxth	r2, r3
 2202 0b52 7B68     		ldr	r3, [r7, #4]
 2203 0b54 1A81     		strh	r2, [r3, #8]	@ movhi
1018:lib/src/stm32f10x_tim.c **** }
 2204              		.loc 1 1018 0
 2205 0b56 00BF     		nop
 2206 0b58 0837     		adds	r7, r7, #8
 2207              		.cfi_def_cfa_offset 8
 2208 0b5a BD46     		mov	sp, r7
 2209              		.cfi_def_cfa_register 13
 2210              		@ sp needed
 2211 0b5c 80BD     		pop	{r7, pc}
 2212              		.cfi_endproc
 2213              	.LFE84:
 2214              		.size	TIM_ITRxExternalClockConfig, .-TIM_ITRxExternalClockConfig
 2215              		.align	1
 2216              		.global	TIM_TIxExternalClockConfig
 2217              		.syntax unified
 2218              		.thumb
 2219              		.thumb_func
ARM GAS  /tmp/ccNus05k.s 			page 59


 2220              		.fpu softvfp
 2221              		.type	TIM_TIxExternalClockConfig, %function
 2222              	TIM_TIxExternalClockConfig:
 2223              	.LFB85:
1019:lib/src/stm32f10x_tim.c **** 
1020:lib/src/stm32f10x_tim.c **** /**
1021:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Trigger as External Clock
1022:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 9, 12 or 15 to select the TIM peripheral.
1023:lib/src/stm32f10x_tim.c ****   * @param  TIM_TIxExternalCLKSource: Trigger source.
1024:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1025:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TIxExternalCLK1Source_TI1ED: TI1 Edge Detector
1026:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TIxExternalCLK1Source_TI1: Filtered Timer Input 1
1027:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TIxExternalCLK1Source_TI2: Filtered Timer Input 2
1028:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICPolarity: specifies the TIx Polarity.
1029:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1030:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
1031:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
1032:lib/src/stm32f10x_tim.c ****   * @param  ICFilter : specifies the filter value.
1033:lib/src/stm32f10x_tim.c ****   *   This parameter must be a value between 0x0 and 0xF.
1034:lib/src/stm32f10x_tim.c ****   * @retval None
1035:lib/src/stm32f10x_tim.c ****   */
1036:lib/src/stm32f10x_tim.c **** void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
1037:lib/src/stm32f10x_tim.c ****                                 uint16_t TIM_ICPolarity, uint16_t ICFilter)
1038:lib/src/stm32f10x_tim.c **** {
 2224              		.loc 1 1038 0
 2225              		.cfi_startproc
 2226              		@ args = 0, pretend = 0, frame = 16
 2227              		@ frame_needed = 1, uses_anonymous_args = 0
 2228 0b5e 80B5     		push	{r7, lr}
 2229              		.cfi_def_cfa_offset 8
 2230              		.cfi_offset 7, -8
 2231              		.cfi_offset 14, -4
 2232 0b60 84B0     		sub	sp, sp, #16
 2233              		.cfi_def_cfa_offset 24
 2234 0b62 00AF     		add	r7, sp, #0
 2235              		.cfi_def_cfa_register 7
 2236 0b64 F860     		str	r0, [r7, #12]
 2237 0b66 0846     		mov	r0, r1
 2238 0b68 1146     		mov	r1, r2
 2239 0b6a 1A46     		mov	r2, r3
 2240 0b6c 0346     		mov	r3, r0	@ movhi
 2241 0b6e 7B81     		strh	r3, [r7, #10]	@ movhi
 2242 0b70 0B46     		mov	r3, r1	@ movhi
 2243 0b72 3B81     		strh	r3, [r7, #8]	@ movhi
 2244 0b74 1346     		mov	r3, r2	@ movhi
 2245 0b76 FB80     		strh	r3, [r7, #6]	@ movhi
1039:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1040:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1041:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
1042:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
1043:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_FILTER(ICFilter));
1044:lib/src/stm32f10x_tim.c ****   /* Configure the Timer Input Clock Source */
1045:lib/src/stm32f10x_tim.c ****   if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 2246              		.loc 1 1045 0
 2247 0b78 7B89     		ldrh	r3, [r7, #10]
 2248 0b7a 602B     		cmp	r3, #96
 2249 0b7c 06D1     		bne	.L90
ARM GAS  /tmp/ccNus05k.s 			page 60


1046:lib/src/stm32f10x_tim.c ****   {
1047:lib/src/stm32f10x_tim.c ****     TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 2250              		.loc 1 1047 0
 2251 0b7e FB88     		ldrh	r3, [r7, #6]
 2252 0b80 3989     		ldrh	r1, [r7, #8]
 2253 0b82 0122     		movs	r2, #1
 2254 0b84 F868     		ldr	r0, [r7, #12]
 2255 0b86 00F097FF 		bl	TI2_Config
 2256 0b8a 05E0     		b	.L91
 2257              	.L90:
1048:lib/src/stm32f10x_tim.c ****   }
1049:lib/src/stm32f10x_tim.c ****   else
1050:lib/src/stm32f10x_tim.c ****   {
1051:lib/src/stm32f10x_tim.c ****     TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
 2258              		.loc 1 1051 0
 2259 0b8c FB88     		ldrh	r3, [r7, #6]
 2260 0b8e 3989     		ldrh	r1, [r7, #8]
 2261 0b90 0122     		movs	r2, #1
 2262 0b92 F868     		ldr	r0, [r7, #12]
 2263 0b94 00F01FFF 		bl	TI1_Config
 2264              	.L91:
1052:lib/src/stm32f10x_tim.c ****   }
1053:lib/src/stm32f10x_tim.c ****   /* Select the Trigger source */
1054:lib/src/stm32f10x_tim.c ****   TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
 2265              		.loc 1 1054 0
 2266 0b98 7B89     		ldrh	r3, [r7, #10]
 2267 0b9a 1946     		mov	r1, r3
 2268 0b9c F868     		ldr	r0, [r7, #12]
 2269 0b9e FFF7FEFF 		bl	TIM_SelectInputTrigger
1055:lib/src/stm32f10x_tim.c ****   /* Select the External clock mode1 */
1056:lib/src/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_SlaveMode_External1;
 2270              		.loc 1 1056 0
 2271 0ba2 FB68     		ldr	r3, [r7, #12]
 2272 0ba4 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2273 0ba6 9BB2     		uxth	r3, r3
 2274 0ba8 43F00703 		orr	r3, r3, #7
 2275 0bac 9AB2     		uxth	r2, r3
 2276 0bae FB68     		ldr	r3, [r7, #12]
 2277 0bb0 1A81     		strh	r2, [r3, #8]	@ movhi
1057:lib/src/stm32f10x_tim.c **** }
 2278              		.loc 1 1057 0
 2279 0bb2 00BF     		nop
 2280 0bb4 1037     		adds	r7, r7, #16
 2281              		.cfi_def_cfa_offset 8
 2282 0bb6 BD46     		mov	sp, r7
 2283              		.cfi_def_cfa_register 13
 2284              		@ sp needed
 2285 0bb8 80BD     		pop	{r7, pc}
 2286              		.cfi_endproc
 2287              	.LFE85:
 2288              		.size	TIM_TIxExternalClockConfig, .-TIM_TIxExternalClockConfig
 2289              		.align	1
 2290              		.global	TIM_ETRClockMode1Config
 2291              		.syntax unified
 2292              		.thumb
 2293              		.thumb_func
 2294              		.fpu softvfp
ARM GAS  /tmp/ccNus05k.s 			page 61


 2295              		.type	TIM_ETRClockMode1Config, %function
 2296              	TIM_ETRClockMode1Config:
 2297              	.LFB86:
1058:lib/src/stm32f10x_tim.c **** 
1059:lib/src/stm32f10x_tim.c **** /**
1060:lib/src/stm32f10x_tim.c ****   * @brief  Configures the External clock Mode1
1061:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1062:lib/src/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
1063:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1064:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
1065:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
1066:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
1067:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
1068:lib/src/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
1069:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1070:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
1071:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
1072:lib/src/stm32f10x_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
1073:lib/src/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F
1074:lib/src/stm32f10x_tim.c ****   * @retval None
1075:lib/src/stm32f10x_tim.c ****   */
1076:lib/src/stm32f10x_tim.c **** void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPo
1077:lib/src/stm32f10x_tim.c ****                              uint16_t ExtTRGFilter)
1078:lib/src/stm32f10x_tim.c **** {
 2298              		.loc 1 1078 0
 2299              		.cfi_startproc
 2300              		@ args = 0, pretend = 0, frame = 24
 2301              		@ frame_needed = 1, uses_anonymous_args = 0
 2302 0bba 80B5     		push	{r7, lr}
 2303              		.cfi_def_cfa_offset 8
 2304              		.cfi_offset 7, -8
 2305              		.cfi_offset 14, -4
 2306 0bbc 86B0     		sub	sp, sp, #24
 2307              		.cfi_def_cfa_offset 32
 2308 0bbe 00AF     		add	r7, sp, #0
 2309              		.cfi_def_cfa_register 7
 2310 0bc0 F860     		str	r0, [r7, #12]
 2311 0bc2 0846     		mov	r0, r1
 2312 0bc4 1146     		mov	r1, r2
 2313 0bc6 1A46     		mov	r2, r3
 2314 0bc8 0346     		mov	r3, r0	@ movhi
 2315 0bca 7B81     		strh	r3, [r7, #10]	@ movhi
 2316 0bcc 0B46     		mov	r3, r1	@ movhi
 2317 0bce 3B81     		strh	r3, [r7, #8]	@ movhi
 2318 0bd0 1346     		mov	r3, r2	@ movhi
 2319 0bd2 FB80     		strh	r3, [r7, #6]	@ movhi
1079:lib/src/stm32f10x_tim.c ****   uint16_t tmpsmcr = 0;
 2320              		.loc 1 1079 0
 2321 0bd4 0023     		movs	r3, #0
 2322 0bd6 FB82     		strh	r3, [r7, #22]	@ movhi
1080:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1081:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1082:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
1083:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
1084:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
1085:lib/src/stm32f10x_tim.c ****   /* Configure the ETR Clock source */
1086:lib/src/stm32f10x_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
ARM GAS  /tmp/ccNus05k.s 			page 62


 2323              		.loc 1 1086 0
 2324 0bd8 FB88     		ldrh	r3, [r7, #6]
 2325 0bda 3A89     		ldrh	r2, [r7, #8]
 2326 0bdc 7989     		ldrh	r1, [r7, #10]
 2327 0bde F868     		ldr	r0, [r7, #12]
 2328 0be0 FFF7FEFF 		bl	TIM_ETRConfig
1087:lib/src/stm32f10x_tim.c ****   
1088:lib/src/stm32f10x_tim.c ****   /* Get the TIMx SMCR register value */
1089:lib/src/stm32f10x_tim.c ****   tmpsmcr = TIMx->SMCR;
 2329              		.loc 1 1089 0
 2330 0be4 FB68     		ldr	r3, [r7, #12]
 2331 0be6 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2332 0be8 FB82     		strh	r3, [r7, #22]	@ movhi
1090:lib/src/stm32f10x_tim.c ****   /* Reset the SMS Bits */
1091:lib/src/stm32f10x_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 2333              		.loc 1 1091 0
 2334 0bea FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2335 0bec 23F00703 		bic	r3, r3, #7
 2336 0bf0 FB82     		strh	r3, [r7, #22]	@ movhi
1092:lib/src/stm32f10x_tim.c ****   /* Select the External clock mode1 */
1093:lib/src/stm32f10x_tim.c ****   tmpsmcr |= TIM_SlaveMode_External1;
 2337              		.loc 1 1093 0
 2338 0bf2 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2339 0bf4 43F00703 		orr	r3, r3, #7
 2340 0bf8 FB82     		strh	r3, [r7, #22]	@ movhi
1094:lib/src/stm32f10x_tim.c ****   /* Select the Trigger selection : ETRF */
1095:lib/src/stm32f10x_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 2341              		.loc 1 1095 0
 2342 0bfa FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2343 0bfc 23F07003 		bic	r3, r3, #112
 2344 0c00 FB82     		strh	r3, [r7, #22]	@ movhi
1096:lib/src/stm32f10x_tim.c ****   tmpsmcr |= TIM_TS_ETRF;
 2345              		.loc 1 1096 0
 2346 0c02 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2347 0c04 43F07003 		orr	r3, r3, #112
 2348 0c08 FB82     		strh	r3, [r7, #22]	@ movhi
1097:lib/src/stm32f10x_tim.c ****   /* Write to TIMx SMCR */
1098:lib/src/stm32f10x_tim.c ****   TIMx->SMCR = tmpsmcr;
 2349              		.loc 1 1098 0
 2350 0c0a FB68     		ldr	r3, [r7, #12]
 2351 0c0c FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2352 0c0e 1A81     		strh	r2, [r3, #8]	@ movhi
1099:lib/src/stm32f10x_tim.c **** }
 2353              		.loc 1 1099 0
 2354 0c10 00BF     		nop
 2355 0c12 1837     		adds	r7, r7, #24
 2356              		.cfi_def_cfa_offset 8
 2357 0c14 BD46     		mov	sp, r7
 2358              		.cfi_def_cfa_register 13
 2359              		@ sp needed
 2360 0c16 80BD     		pop	{r7, pc}
 2361              		.cfi_endproc
 2362              	.LFE86:
 2363              		.size	TIM_ETRClockMode1Config, .-TIM_ETRClockMode1Config
 2364              		.align	1
 2365              		.global	TIM_ETRClockMode2Config
 2366              		.syntax unified
ARM GAS  /tmp/ccNus05k.s 			page 63


 2367              		.thumb
 2368              		.thumb_func
 2369              		.fpu softvfp
 2370              		.type	TIM_ETRClockMode2Config, %function
 2371              	TIM_ETRClockMode2Config:
 2372              	.LFB87:
1100:lib/src/stm32f10x_tim.c **** 
1101:lib/src/stm32f10x_tim.c **** /**
1102:lib/src/stm32f10x_tim.c ****   * @brief  Configures the External clock Mode2
1103:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1104:lib/src/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
1105:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1106:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
1107:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
1108:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
1109:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
1110:lib/src/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
1111:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1112:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
1113:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
1114:lib/src/stm32f10x_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
1115:lib/src/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F
1116:lib/src/stm32f10x_tim.c ****   * @retval None
1117:lib/src/stm32f10x_tim.c ****   */
1118:lib/src/stm32f10x_tim.c **** void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
1119:lib/src/stm32f10x_tim.c ****                              uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
1120:lib/src/stm32f10x_tim.c **** {
 2373              		.loc 1 1120 0
 2374              		.cfi_startproc
 2375              		@ args = 0, pretend = 0, frame = 16
 2376              		@ frame_needed = 1, uses_anonymous_args = 0
 2377 0c18 80B5     		push	{r7, lr}
 2378              		.cfi_def_cfa_offset 8
 2379              		.cfi_offset 7, -8
 2380              		.cfi_offset 14, -4
 2381 0c1a 84B0     		sub	sp, sp, #16
 2382              		.cfi_def_cfa_offset 24
 2383 0c1c 00AF     		add	r7, sp, #0
 2384              		.cfi_def_cfa_register 7
 2385 0c1e F860     		str	r0, [r7, #12]
 2386 0c20 0846     		mov	r0, r1
 2387 0c22 1146     		mov	r1, r2
 2388 0c24 1A46     		mov	r2, r3
 2389 0c26 0346     		mov	r3, r0	@ movhi
 2390 0c28 7B81     		strh	r3, [r7, #10]	@ movhi
 2391 0c2a 0B46     		mov	r3, r1	@ movhi
 2392 0c2c 3B81     		strh	r3, [r7, #8]	@ movhi
 2393 0c2e 1346     		mov	r3, r2	@ movhi
 2394 0c30 FB80     		strh	r3, [r7, #6]	@ movhi
1121:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1122:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1123:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
1124:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
1125:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
1126:lib/src/stm32f10x_tim.c ****   /* Configure the ETR Clock source */
1127:lib/src/stm32f10x_tim.c ****   TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
 2395              		.loc 1 1127 0
ARM GAS  /tmp/ccNus05k.s 			page 64


 2396 0c32 FB88     		ldrh	r3, [r7, #6]
 2397 0c34 3A89     		ldrh	r2, [r7, #8]
 2398 0c36 7989     		ldrh	r1, [r7, #10]
 2399 0c38 F868     		ldr	r0, [r7, #12]
 2400 0c3a FFF7FEFF 		bl	TIM_ETRConfig
1128:lib/src/stm32f10x_tim.c ****   /* Enable the External clock mode2 */
1129:lib/src/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_SMCR_ECE;
 2401              		.loc 1 1129 0
 2402 0c3e FB68     		ldr	r3, [r7, #12]
 2403 0c40 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2404 0c42 9BB2     		uxth	r3, r3
 2405 0c44 43F48043 		orr	r3, r3, #16384
 2406 0c48 9AB2     		uxth	r2, r3
 2407 0c4a FB68     		ldr	r3, [r7, #12]
 2408 0c4c 1A81     		strh	r2, [r3, #8]	@ movhi
1130:lib/src/stm32f10x_tim.c **** }
 2409              		.loc 1 1130 0
 2410 0c4e 00BF     		nop
 2411 0c50 1037     		adds	r7, r7, #16
 2412              		.cfi_def_cfa_offset 8
 2413 0c52 BD46     		mov	sp, r7
 2414              		.cfi_def_cfa_register 13
 2415              		@ sp needed
 2416 0c54 80BD     		pop	{r7, pc}
 2417              		.cfi_endproc
 2418              	.LFE87:
 2419              		.size	TIM_ETRClockMode2Config, .-TIM_ETRClockMode2Config
 2420              		.align	1
 2421              		.global	TIM_ETRConfig
 2422              		.syntax unified
 2423              		.thumb
 2424              		.thumb_func
 2425              		.fpu softvfp
 2426              		.type	TIM_ETRConfig, %function
 2427              	TIM_ETRConfig:
 2428              	.LFB88:
1131:lib/src/stm32f10x_tim.c **** 
1132:lib/src/stm32f10x_tim.c **** /**
1133:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx External Trigger (ETR).
1134:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1135:lib/src/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPrescaler: The external Trigger Prescaler.
1136:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1137:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_OFF: ETRP Prescaler OFF.
1138:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV2: ETRP frequency divided by 2.
1139:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV4: ETRP frequency divided by 4.
1140:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPSC_DIV8: ETRP frequency divided by 8.
1141:lib/src/stm32f10x_tim.c ****   * @param  TIM_ExtTRGPolarity: The external Trigger Polarity.
1142:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1143:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_Inverted: active low or falling edge active.
1144:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ExtTRGPolarity_NonInverted: active high or rising edge active.
1145:lib/src/stm32f10x_tim.c ****   * @param  ExtTRGFilter: External Trigger Filter.
1146:lib/src/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F
1147:lib/src/stm32f10x_tim.c ****   * @retval None
1148:lib/src/stm32f10x_tim.c ****   */
1149:lib/src/stm32f10x_tim.c **** void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
1150:lib/src/stm32f10x_tim.c ****                    uint16_t ExtTRGFilter)
1151:lib/src/stm32f10x_tim.c **** {
ARM GAS  /tmp/ccNus05k.s 			page 65


 2429              		.loc 1 1151 0
 2430              		.cfi_startproc
 2431              		@ args = 0, pretend = 0, frame = 24
 2432              		@ frame_needed = 1, uses_anonymous_args = 0
 2433              		@ link register save eliminated.
 2434 0c56 80B4     		push	{r7}
 2435              		.cfi_def_cfa_offset 4
 2436              		.cfi_offset 7, -4
 2437 0c58 87B0     		sub	sp, sp, #28
 2438              		.cfi_def_cfa_offset 32
 2439 0c5a 00AF     		add	r7, sp, #0
 2440              		.cfi_def_cfa_register 7
 2441 0c5c F860     		str	r0, [r7, #12]
 2442 0c5e 0846     		mov	r0, r1
 2443 0c60 1146     		mov	r1, r2
 2444 0c62 1A46     		mov	r2, r3
 2445 0c64 0346     		mov	r3, r0	@ movhi
 2446 0c66 7B81     		strh	r3, [r7, #10]	@ movhi
 2447 0c68 0B46     		mov	r3, r1	@ movhi
 2448 0c6a 3B81     		strh	r3, [r7, #8]	@ movhi
 2449 0c6c 1346     		mov	r3, r2	@ movhi
 2450 0c6e FB80     		strh	r3, [r7, #6]	@ movhi
1152:lib/src/stm32f10x_tim.c ****   uint16_t tmpsmcr = 0;
 2451              		.loc 1 1152 0
 2452 0c70 0023     		movs	r3, #0
 2453 0c72 FB82     		strh	r3, [r7, #22]	@ movhi
1153:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1154:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1155:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
1156:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
1157:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
1158:lib/src/stm32f10x_tim.c ****   tmpsmcr = TIMx->SMCR;
 2454              		.loc 1 1158 0
 2455 0c74 FB68     		ldr	r3, [r7, #12]
 2456 0c76 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2457 0c78 FB82     		strh	r3, [r7, #22]	@ movhi
1159:lib/src/stm32f10x_tim.c ****   /* Reset the ETR Bits */
1160:lib/src/stm32f10x_tim.c ****   tmpsmcr &= SMCR_ETR_Mask;
 2458              		.loc 1 1160 0
 2459 0c7a FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2460 0c7c DBB2     		uxtb	r3, r3
 2461 0c7e FB82     		strh	r3, [r7, #22]	@ movhi
1161:lib/src/stm32f10x_tim.c ****   /* Set the Prescaler, the Filter value and the Polarity */
1162:lib/src/stm32f10x_tim.c ****   tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilt
 2462              		.loc 1 1162 0
 2463 0c80 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2464 0c82 1B02     		lsls	r3, r3, #8
 2465 0c84 9AB2     		uxth	r2, r3
 2466 0c86 3B89     		ldrh	r3, [r7, #8]	@ movhi
 2467 0c88 1343     		orrs	r3, r3, r2
 2468 0c8a 9AB2     		uxth	r2, r3
 2469 0c8c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2470 0c8e 1343     		orrs	r3, r3, r2
 2471 0c90 9AB2     		uxth	r2, r3
 2472 0c92 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2473 0c94 1343     		orrs	r3, r3, r2
 2474 0c96 FB82     		strh	r3, [r7, #22]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 66


1163:lib/src/stm32f10x_tim.c ****   /* Write to TIMx SMCR */
1164:lib/src/stm32f10x_tim.c ****   TIMx->SMCR = tmpsmcr;
 2475              		.loc 1 1164 0
 2476 0c98 FB68     		ldr	r3, [r7, #12]
 2477 0c9a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2478 0c9c 1A81     		strh	r2, [r3, #8]	@ movhi
1165:lib/src/stm32f10x_tim.c **** }
 2479              		.loc 1 1165 0
 2480 0c9e 00BF     		nop
 2481 0ca0 1C37     		adds	r7, r7, #28
 2482              		.cfi_def_cfa_offset 4
 2483 0ca2 BD46     		mov	sp, r7
 2484              		.cfi_def_cfa_register 13
 2485              		@ sp needed
 2486 0ca4 80BC     		pop	{r7}
 2487              		.cfi_restore 7
 2488              		.cfi_def_cfa_offset 0
 2489 0ca6 7047     		bx	lr
 2490              		.cfi_endproc
 2491              	.LFE88:
 2492              		.size	TIM_ETRConfig, .-TIM_ETRConfig
 2493              		.align	1
 2494              		.global	TIM_PrescalerConfig
 2495              		.syntax unified
 2496              		.thumb
 2497              		.thumb_func
 2498              		.fpu softvfp
 2499              		.type	TIM_PrescalerConfig, %function
 2500              	TIM_PrescalerConfig:
 2501              	.LFB89:
1166:lib/src/stm32f10x_tim.c **** 
1167:lib/src/stm32f10x_tim.c **** /**
1168:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Prescaler.
1169:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
1170:lib/src/stm32f10x_tim.c ****   * @param  Prescaler: specifies the Prescaler Register value
1171:lib/src/stm32f10x_tim.c ****   * @param  TIM_PSCReloadMode: specifies the TIM Prescaler Reload mode
1172:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1173:lib/src/stm32f10x_tim.c ****   *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
1174:lib/src/stm32f10x_tim.c ****   *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
1175:lib/src/stm32f10x_tim.c ****   * @retval None
1176:lib/src/stm32f10x_tim.c ****   */
1177:lib/src/stm32f10x_tim.c **** void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
1178:lib/src/stm32f10x_tim.c **** {
 2502              		.loc 1 1178 0
 2503              		.cfi_startproc
 2504              		@ args = 0, pretend = 0, frame = 8
 2505              		@ frame_needed = 1, uses_anonymous_args = 0
 2506              		@ link register save eliminated.
 2507 0ca8 80B4     		push	{r7}
 2508              		.cfi_def_cfa_offset 4
 2509              		.cfi_offset 7, -4
 2510 0caa 83B0     		sub	sp, sp, #12
 2511              		.cfi_def_cfa_offset 16
 2512 0cac 00AF     		add	r7, sp, #0
 2513              		.cfi_def_cfa_register 7
 2514 0cae 7860     		str	r0, [r7, #4]
 2515 0cb0 0B46     		mov	r3, r1
ARM GAS  /tmp/ccNus05k.s 			page 67


 2516 0cb2 7B80     		strh	r3, [r7, #2]	@ movhi
 2517 0cb4 1346     		mov	r3, r2	@ movhi
 2518 0cb6 3B80     		strh	r3, [r7]	@ movhi
1179:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1180:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
1181:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
1182:lib/src/stm32f10x_tim.c ****   /* Set the Prescaler value */
1183:lib/src/stm32f10x_tim.c ****   TIMx->PSC = Prescaler;
 2519              		.loc 1 1183 0
 2520 0cb8 7B68     		ldr	r3, [r7, #4]
 2521 0cba 7A88     		ldrh	r2, [r7, #2]	@ movhi
 2522 0cbc 1A85     		strh	r2, [r3, #40]	@ movhi
1184:lib/src/stm32f10x_tim.c ****   /* Set or reset the UG Bit */
1185:lib/src/stm32f10x_tim.c ****   TIMx->EGR = TIM_PSCReloadMode;
 2523              		.loc 1 1185 0
 2524 0cbe 7B68     		ldr	r3, [r7, #4]
 2525 0cc0 3A88     		ldrh	r2, [r7]	@ movhi
 2526 0cc2 9A82     		strh	r2, [r3, #20]	@ movhi
1186:lib/src/stm32f10x_tim.c **** }
 2527              		.loc 1 1186 0
 2528 0cc4 00BF     		nop
 2529 0cc6 0C37     		adds	r7, r7, #12
 2530              		.cfi_def_cfa_offset 4
 2531 0cc8 BD46     		mov	sp, r7
 2532              		.cfi_def_cfa_register 13
 2533              		@ sp needed
 2534 0cca 80BC     		pop	{r7}
 2535              		.cfi_restore 7
 2536              		.cfi_def_cfa_offset 0
 2537 0ccc 7047     		bx	lr
 2538              		.cfi_endproc
 2539              	.LFE89:
 2540              		.size	TIM_PrescalerConfig, .-TIM_PrescalerConfig
 2541              		.align	1
 2542              		.global	TIM_CounterModeConfig
 2543              		.syntax unified
 2544              		.thumb
 2545              		.thumb_func
 2546              		.fpu softvfp
 2547              		.type	TIM_CounterModeConfig, %function
 2548              	TIM_CounterModeConfig:
 2549              	.LFB90:
1187:lib/src/stm32f10x_tim.c **** 
1188:lib/src/stm32f10x_tim.c **** /**
1189:lib/src/stm32f10x_tim.c ****   * @brief  Specifies the TIMx Counter Mode to be used.
1190:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1191:lib/src/stm32f10x_tim.c ****   * @param  TIM_CounterMode: specifies the Counter Mode to be used
1192:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1193:lib/src/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_Up: TIM Up Counting Mode
1194:lib/src/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_Down: TIM Down Counting Mode
1195:lib/src/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_CenterAligned1: TIM Center Aligned Mode1
1196:lib/src/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
1197:lib/src/stm32f10x_tim.c ****   *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
1198:lib/src/stm32f10x_tim.c ****   * @retval None
1199:lib/src/stm32f10x_tim.c ****   */
1200:lib/src/stm32f10x_tim.c **** void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
1201:lib/src/stm32f10x_tim.c **** {
ARM GAS  /tmp/ccNus05k.s 			page 68


 2550              		.loc 1 1201 0
 2551              		.cfi_startproc
 2552              		@ args = 0, pretend = 0, frame = 16
 2553              		@ frame_needed = 1, uses_anonymous_args = 0
 2554              		@ link register save eliminated.
 2555 0cce 80B4     		push	{r7}
 2556              		.cfi_def_cfa_offset 4
 2557              		.cfi_offset 7, -4
 2558 0cd0 85B0     		sub	sp, sp, #20
 2559              		.cfi_def_cfa_offset 24
 2560 0cd2 00AF     		add	r7, sp, #0
 2561              		.cfi_def_cfa_register 7
 2562 0cd4 7860     		str	r0, [r7, #4]
 2563 0cd6 0B46     		mov	r3, r1
 2564 0cd8 7B80     		strh	r3, [r7, #2]	@ movhi
1202:lib/src/stm32f10x_tim.c ****   uint16_t tmpcr1 = 0;
 2565              		.loc 1 1202 0
 2566 0cda 0023     		movs	r3, #0
 2567 0cdc FB81     		strh	r3, [r7, #14]	@ movhi
1203:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1204:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1205:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
1206:lib/src/stm32f10x_tim.c ****   tmpcr1 = TIMx->CR1;
 2568              		.loc 1 1206 0
 2569 0cde 7B68     		ldr	r3, [r7, #4]
 2570 0ce0 1B88     		ldrh	r3, [r3]	@ movhi
 2571 0ce2 FB81     		strh	r3, [r7, #14]	@ movhi
1207:lib/src/stm32f10x_tim.c ****   /* Reset the CMS and DIR Bits */
1208:lib/src/stm32f10x_tim.c ****   tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 2572              		.loc 1 1208 0
 2573 0ce4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2574 0ce6 23F07003 		bic	r3, r3, #112
 2575 0cea FB81     		strh	r3, [r7, #14]	@ movhi
1209:lib/src/stm32f10x_tim.c ****   /* Set the Counter Mode */
1210:lib/src/stm32f10x_tim.c ****   tmpcr1 |= TIM_CounterMode;
 2576              		.loc 1 1210 0
 2577 0cec FA89     		ldrh	r2, [r7, #14]	@ movhi
 2578 0cee 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2579 0cf0 1343     		orrs	r3, r3, r2
 2580 0cf2 FB81     		strh	r3, [r7, #14]	@ movhi
1211:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CR1 register */
1212:lib/src/stm32f10x_tim.c ****   TIMx->CR1 = tmpcr1;
 2581              		.loc 1 1212 0
 2582 0cf4 7B68     		ldr	r3, [r7, #4]
 2583 0cf6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2584 0cf8 1A80     		strh	r2, [r3]	@ movhi
1213:lib/src/stm32f10x_tim.c **** }
 2585              		.loc 1 1213 0
 2586 0cfa 00BF     		nop
 2587 0cfc 1437     		adds	r7, r7, #20
 2588              		.cfi_def_cfa_offset 4
 2589 0cfe BD46     		mov	sp, r7
 2590              		.cfi_def_cfa_register 13
 2591              		@ sp needed
 2592 0d00 80BC     		pop	{r7}
 2593              		.cfi_restore 7
 2594              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccNus05k.s 			page 69


 2595 0d02 7047     		bx	lr
 2596              		.cfi_endproc
 2597              	.LFE90:
 2598              		.size	TIM_CounterModeConfig, .-TIM_CounterModeConfig
 2599              		.align	1
 2600              		.global	TIM_SelectInputTrigger
 2601              		.syntax unified
 2602              		.thumb
 2603              		.thumb_func
 2604              		.fpu softvfp
 2605              		.type	TIM_SelectInputTrigger, %function
 2606              	TIM_SelectInputTrigger:
 2607              	.LFB91:
1214:lib/src/stm32f10x_tim.c **** 
1215:lib/src/stm32f10x_tim.c **** /**
1216:lib/src/stm32f10x_tim.c ****   * @brief  Selects the Input Trigger source
1217:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
1218:lib/src/stm32f10x_tim.c ****   * @param  TIM_InputTriggerSource: The Input Trigger source.
1219:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1220:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TS_ITR0: Internal Trigger 0
1221:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TS_ITR1: Internal Trigger 1
1222:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TS_ITR2: Internal Trigger 2
1223:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TS_ITR3: Internal Trigger 3
1224:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TS_TI1F_ED: TI1 Edge Detector
1225:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TS_TI1FP1: Filtered Timer Input 1
1226:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
1227:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TS_ETRF: External Trigger input
1228:lib/src/stm32f10x_tim.c ****   * @retval None
1229:lib/src/stm32f10x_tim.c ****   */
1230:lib/src/stm32f10x_tim.c **** void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
1231:lib/src/stm32f10x_tim.c **** {
 2608              		.loc 1 1231 0
 2609              		.cfi_startproc
 2610              		@ args = 0, pretend = 0, frame = 16
 2611              		@ frame_needed = 1, uses_anonymous_args = 0
 2612              		@ link register save eliminated.
 2613 0d04 80B4     		push	{r7}
 2614              		.cfi_def_cfa_offset 4
 2615              		.cfi_offset 7, -4
 2616 0d06 85B0     		sub	sp, sp, #20
 2617              		.cfi_def_cfa_offset 24
 2618 0d08 00AF     		add	r7, sp, #0
 2619              		.cfi_def_cfa_register 7
 2620 0d0a 7860     		str	r0, [r7, #4]
 2621 0d0c 0B46     		mov	r3, r1
 2622 0d0e 7B80     		strh	r3, [r7, #2]	@ movhi
1232:lib/src/stm32f10x_tim.c ****   uint16_t tmpsmcr = 0;
 2623              		.loc 1 1232 0
 2624 0d10 0023     		movs	r3, #0
 2625 0d12 FB81     		strh	r3, [r7, #14]	@ movhi
1233:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1234:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1235:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
1236:lib/src/stm32f10x_tim.c ****   /* Get the TIMx SMCR register value */
1237:lib/src/stm32f10x_tim.c ****   tmpsmcr = TIMx->SMCR;
 2626              		.loc 1 1237 0
 2627 0d14 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNus05k.s 			page 70


 2628 0d16 1B89     		ldrh	r3, [r3, #8]	@ movhi
 2629 0d18 FB81     		strh	r3, [r7, #14]	@ movhi
1238:lib/src/stm32f10x_tim.c ****   /* Reset the TS Bits */
1239:lib/src/stm32f10x_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 2630              		.loc 1 1239 0
 2631 0d1a FB89     		ldrh	r3, [r7, #14]	@ movhi
 2632 0d1c 23F07003 		bic	r3, r3, #112
 2633 0d20 FB81     		strh	r3, [r7, #14]	@ movhi
1240:lib/src/stm32f10x_tim.c ****   /* Set the Input Trigger source */
1241:lib/src/stm32f10x_tim.c ****   tmpsmcr |= TIM_InputTriggerSource;
 2634              		.loc 1 1241 0
 2635 0d22 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2636 0d24 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2637 0d26 1343     		orrs	r3, r3, r2
 2638 0d28 FB81     		strh	r3, [r7, #14]	@ movhi
1242:lib/src/stm32f10x_tim.c ****   /* Write to TIMx SMCR */
1243:lib/src/stm32f10x_tim.c ****   TIMx->SMCR = tmpsmcr;
 2639              		.loc 1 1243 0
 2640 0d2a 7B68     		ldr	r3, [r7, #4]
 2641 0d2c FA89     		ldrh	r2, [r7, #14]	@ movhi
 2642 0d2e 1A81     		strh	r2, [r3, #8]	@ movhi
1244:lib/src/stm32f10x_tim.c **** }
 2643              		.loc 1 1244 0
 2644 0d30 00BF     		nop
 2645 0d32 1437     		adds	r7, r7, #20
 2646              		.cfi_def_cfa_offset 4
 2647 0d34 BD46     		mov	sp, r7
 2648              		.cfi_def_cfa_register 13
 2649              		@ sp needed
 2650 0d36 80BC     		pop	{r7}
 2651              		.cfi_restore 7
 2652              		.cfi_def_cfa_offset 0
 2653 0d38 7047     		bx	lr
 2654              		.cfi_endproc
 2655              	.LFE91:
 2656              		.size	TIM_SelectInputTrigger, .-TIM_SelectInputTrigger
 2657              		.align	1
 2658              		.global	TIM_EncoderInterfaceConfig
 2659              		.syntax unified
 2660              		.thumb
 2661              		.thumb_func
 2662              		.fpu softvfp
 2663              		.type	TIM_EncoderInterfaceConfig, %function
 2664              	TIM_EncoderInterfaceConfig:
 2665              	.LFB92:
1245:lib/src/stm32f10x_tim.c **** 
1246:lib/src/stm32f10x_tim.c **** /**
1247:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Encoder Interface.
1248:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1249:lib/src/stm32f10x_tim.c ****   * @param  TIM_EncoderMode: specifies the TIMx Encoder Mode.
1250:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1251:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EncoderMode_TI1: Counter counts on TI1FP1 edge depending on TI2FP2 level.
1252:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EncoderMode_TI2: Counter counts on TI2FP2 edge depending on TI1FP1 level.
1253:lib/src/stm32f10x_tim.c ****   *     @arg TIM_EncoderMode_TI12: Counter counts on both TI1FP1 and TI2FP2 edges depending
1254:lib/src/stm32f10x_tim.c ****   *                                on the level of the other input.
1255:lib/src/stm32f10x_tim.c ****   * @param  TIM_IC1Polarity: specifies the IC1 Polarity
1256:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
ARM GAS  /tmp/ccNus05k.s 			page 71


1257:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling: IC Falling edge.
1258:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising: IC Rising edge.
1259:lib/src/stm32f10x_tim.c ****   * @param  TIM_IC2Polarity: specifies the IC2 Polarity
1260:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1261:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling: IC Falling edge.
1262:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising: IC Rising edge.
1263:lib/src/stm32f10x_tim.c ****   * @retval None
1264:lib/src/stm32f10x_tim.c ****   */
1265:lib/src/stm32f10x_tim.c **** void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
1266:lib/src/stm32f10x_tim.c ****                                 uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
1267:lib/src/stm32f10x_tim.c **** {
 2666              		.loc 1 1267 0
 2667              		.cfi_startproc
 2668              		@ args = 0, pretend = 0, frame = 24
 2669              		@ frame_needed = 1, uses_anonymous_args = 0
 2670              		@ link register save eliminated.
 2671 0d3a 80B4     		push	{r7}
 2672              		.cfi_def_cfa_offset 4
 2673              		.cfi_offset 7, -4
 2674 0d3c 87B0     		sub	sp, sp, #28
 2675              		.cfi_def_cfa_offset 32
 2676 0d3e 00AF     		add	r7, sp, #0
 2677              		.cfi_def_cfa_register 7
 2678 0d40 F860     		str	r0, [r7, #12]
 2679 0d42 0846     		mov	r0, r1
 2680 0d44 1146     		mov	r1, r2
 2681 0d46 1A46     		mov	r2, r3
 2682 0d48 0346     		mov	r3, r0	@ movhi
 2683 0d4a 7B81     		strh	r3, [r7, #10]	@ movhi
 2684 0d4c 0B46     		mov	r3, r1	@ movhi
 2685 0d4e 3B81     		strh	r3, [r7, #8]	@ movhi
 2686 0d50 1346     		mov	r3, r2	@ movhi
 2687 0d52 FB80     		strh	r3, [r7, #6]	@ movhi
1268:lib/src/stm32f10x_tim.c ****   uint16_t tmpsmcr = 0;
 2688              		.loc 1 1268 0
 2689 0d54 0023     		movs	r3, #0
 2690 0d56 FB82     		strh	r3, [r7, #22]	@ movhi
1269:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 2691              		.loc 1 1269 0
 2692 0d58 0023     		movs	r3, #0
 2693 0d5a BB82     		strh	r3, [r7, #20]	@ movhi
1270:lib/src/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 2694              		.loc 1 1270 0
 2695 0d5c 0023     		movs	r3, #0
 2696 0d5e 7B82     		strh	r3, [r7, #18]	@ movhi
1271:lib/src/stm32f10x_tim.c ****     
1272:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1273:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
1274:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
1275:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
1276:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
1277:lib/src/stm32f10x_tim.c **** 
1278:lib/src/stm32f10x_tim.c ****   /* Get the TIMx SMCR register value */
1279:lib/src/stm32f10x_tim.c ****   tmpsmcr = TIMx->SMCR;
 2697              		.loc 1 1279 0
 2698 0d60 FB68     		ldr	r3, [r7, #12]
 2699 0d62 1B89     		ldrh	r3, [r3, #8]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 72


 2700 0d64 FB82     		strh	r3, [r7, #22]	@ movhi
1280:lib/src/stm32f10x_tim.c ****   
1281:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
1282:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2701              		.loc 1 1282 0
 2702 0d66 FB68     		ldr	r3, [r7, #12]
 2703 0d68 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2704 0d6a BB82     		strh	r3, [r7, #20]	@ movhi
1283:lib/src/stm32f10x_tim.c ****   
1284:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCER register value */
1285:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 2705              		.loc 1 1285 0
 2706 0d6c FB68     		ldr	r3, [r7, #12]
 2707 0d6e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 2708 0d70 7B82     		strh	r3, [r7, #18]	@ movhi
1286:lib/src/stm32f10x_tim.c ****   
1287:lib/src/stm32f10x_tim.c ****   /* Set the encoder Mode */
1288:lib/src/stm32f10x_tim.c ****   tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 2709              		.loc 1 1288 0
 2710 0d72 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 2711 0d74 23F00703 		bic	r3, r3, #7
 2712 0d78 FB82     		strh	r3, [r7, #22]	@ movhi
1289:lib/src/stm32f10x_tim.c ****   tmpsmcr |= TIM_EncoderMode;
 2713              		.loc 1 1289 0
 2714 0d7a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2715 0d7c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2716 0d7e 1343     		orrs	r3, r3, r2
 2717 0d80 FB82     		strh	r3, [r7, #22]	@ movhi
1290:lib/src/stm32f10x_tim.c ****   
1291:lib/src/stm32f10x_tim.c ****   /* Select the Capture Compare 1 and the Capture Compare 2 as input */
1292:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1
 2718              		.loc 1 1292 0
 2719 0d82 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2720 0d84 23F44073 		bic	r3, r3, #768
 2721 0d88 23F00303 		bic	r3, r3, #3
 2722 0d8c BB82     		strh	r3, [r7, #20]	@ movhi
1293:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 2723              		.loc 1 1293 0
 2724 0d8e BB8A     		ldrh	r3, [r7, #20]	@ movhi
 2725 0d90 43F48073 		orr	r3, r3, #256
 2726 0d94 43F00103 		orr	r3, r3, #1
 2727 0d98 BB82     		strh	r3, [r7, #20]	@ movhi
1294:lib/src/stm32f10x_tim.c ****   
1295:lib/src/stm32f10x_tim.c ****   /* Set the TI1 and the TI2 Polarities */
1296:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC
 2728              		.loc 1 1296 0
 2729 0d9a 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 2730 0d9c 23F02203 		bic	r3, r3, #34
 2731 0da0 7B82     		strh	r3, [r7, #18]	@ movhi
1297:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 2732              		.loc 1 1297 0
 2733 0da2 FB88     		ldrh	r3, [r7, #6]	@ movhi
 2734 0da4 1B01     		lsls	r3, r3, #4
 2735 0da6 9AB2     		uxth	r2, r3
 2736 0da8 3B89     		ldrh	r3, [r7, #8]	@ movhi
 2737 0daa 1343     		orrs	r3, r3, r2
 2738 0dac 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccNus05k.s 			page 73


 2739 0dae 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 2740 0db0 1343     		orrs	r3, r3, r2
 2741 0db2 7B82     		strh	r3, [r7, #18]	@ movhi
1298:lib/src/stm32f10x_tim.c ****   
1299:lib/src/stm32f10x_tim.c ****   /* Write to TIMx SMCR */
1300:lib/src/stm32f10x_tim.c ****   TIMx->SMCR = tmpsmcr;
 2742              		.loc 1 1300 0
 2743 0db4 FB68     		ldr	r3, [r7, #12]
 2744 0db6 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 2745 0db8 1A81     		strh	r2, [r3, #8]	@ movhi
1301:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
1302:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2746              		.loc 1 1302 0
 2747 0dba FB68     		ldr	r3, [r7, #12]
 2748 0dbc BA8A     		ldrh	r2, [r7, #20]	@ movhi
 2749 0dbe 1A83     		strh	r2, [r3, #24]	@ movhi
1303:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER */
1304:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 2750              		.loc 1 1304 0
 2751 0dc0 FB68     		ldr	r3, [r7, #12]
 2752 0dc2 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 2753 0dc4 1A84     		strh	r2, [r3, #32]	@ movhi
1305:lib/src/stm32f10x_tim.c **** }
 2754              		.loc 1 1305 0
 2755 0dc6 00BF     		nop
 2756 0dc8 1C37     		adds	r7, r7, #28
 2757              		.cfi_def_cfa_offset 4
 2758 0dca BD46     		mov	sp, r7
 2759              		.cfi_def_cfa_register 13
 2760              		@ sp needed
 2761 0dcc 80BC     		pop	{r7}
 2762              		.cfi_restore 7
 2763              		.cfi_def_cfa_offset 0
 2764 0dce 7047     		bx	lr
 2765              		.cfi_endproc
 2766              	.LFE92:
 2767              		.size	TIM_EncoderInterfaceConfig, .-TIM_EncoderInterfaceConfig
 2768              		.align	1
 2769              		.global	TIM_ForcedOC1Config
 2770              		.syntax unified
 2771              		.thumb
 2772              		.thumb_func
 2773              		.fpu softvfp
 2774              		.type	TIM_ForcedOC1Config, %function
 2775              	TIM_ForcedOC1Config:
 2776              	.LFB93:
1306:lib/src/stm32f10x_tim.c **** 
1307:lib/src/stm32f10x_tim.c **** /**
1308:lib/src/stm32f10x_tim.c ****   * @brief  Forces the TIMx output 1 waveform to active or inactive level.
1309:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
1310:lib/src/stm32f10x_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1311:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1312:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
1313:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
1314:lib/src/stm32f10x_tim.c ****   * @retval None
1315:lib/src/stm32f10x_tim.c ****   */
1316:lib/src/stm32f10x_tim.c **** void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
ARM GAS  /tmp/ccNus05k.s 			page 74


1317:lib/src/stm32f10x_tim.c **** {
 2777              		.loc 1 1317 0
 2778              		.cfi_startproc
 2779              		@ args = 0, pretend = 0, frame = 16
 2780              		@ frame_needed = 1, uses_anonymous_args = 0
 2781              		@ link register save eliminated.
 2782 0dd0 80B4     		push	{r7}
 2783              		.cfi_def_cfa_offset 4
 2784              		.cfi_offset 7, -4
 2785 0dd2 85B0     		sub	sp, sp, #20
 2786              		.cfi_def_cfa_offset 24
 2787 0dd4 00AF     		add	r7, sp, #0
 2788              		.cfi_def_cfa_register 7
 2789 0dd6 7860     		str	r0, [r7, #4]
 2790 0dd8 0B46     		mov	r3, r1
 2791 0dda 7B80     		strh	r3, [r7, #2]	@ movhi
1318:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 2792              		.loc 1 1318 0
 2793 0ddc 0023     		movs	r3, #0
 2794 0dde FB81     		strh	r3, [r7, #14]	@ movhi
1319:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1320:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1321:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1322:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2795              		.loc 1 1322 0
 2796 0de0 7B68     		ldr	r3, [r7, #4]
 2797 0de2 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2798 0de4 FB81     		strh	r3, [r7, #14]	@ movhi
1323:lib/src/stm32f10x_tim.c ****   /* Reset the OC1M Bits */
1324:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 2799              		.loc 1 1324 0
 2800 0de6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2801 0de8 23F07003 		bic	r3, r3, #112
 2802 0dec FB81     		strh	r3, [r7, #14]	@ movhi
1325:lib/src/stm32f10x_tim.c ****   /* Configure The Forced output Mode */
1326:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= TIM_ForcedAction;
 2803              		.loc 1 1326 0
 2804 0dee FA89     		ldrh	r2, [r7, #14]	@ movhi
 2805 0df0 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2806 0df2 1343     		orrs	r3, r3, r2
 2807 0df4 FB81     		strh	r3, [r7, #14]	@ movhi
1327:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1328:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2808              		.loc 1 1328 0
 2809 0df6 7B68     		ldr	r3, [r7, #4]
 2810 0df8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2811 0dfa 1A83     		strh	r2, [r3, #24]	@ movhi
1329:lib/src/stm32f10x_tim.c **** }
 2812              		.loc 1 1329 0
 2813 0dfc 00BF     		nop
 2814 0dfe 1437     		adds	r7, r7, #20
 2815              		.cfi_def_cfa_offset 4
 2816 0e00 BD46     		mov	sp, r7
 2817              		.cfi_def_cfa_register 13
 2818              		@ sp needed
 2819 0e02 80BC     		pop	{r7}
 2820              		.cfi_restore 7
ARM GAS  /tmp/ccNus05k.s 			page 75


 2821              		.cfi_def_cfa_offset 0
 2822 0e04 7047     		bx	lr
 2823              		.cfi_endproc
 2824              	.LFE93:
 2825              		.size	TIM_ForcedOC1Config, .-TIM_ForcedOC1Config
 2826              		.align	1
 2827              		.global	TIM_ForcedOC2Config
 2828              		.syntax unified
 2829              		.thumb
 2830              		.thumb_func
 2831              		.fpu softvfp
 2832              		.type	TIM_ForcedOC2Config, %function
 2833              	TIM_ForcedOC2Config:
 2834              	.LFB94:
1330:lib/src/stm32f10x_tim.c **** 
1331:lib/src/stm32f10x_tim.c **** /**
1332:lib/src/stm32f10x_tim.c ****   * @brief  Forces the TIMx output 2 waveform to active or inactive level.
1333:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
1334:lib/src/stm32f10x_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1335:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1336:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
1337:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
1338:lib/src/stm32f10x_tim.c ****   * @retval None
1339:lib/src/stm32f10x_tim.c ****   */
1340:lib/src/stm32f10x_tim.c **** void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1341:lib/src/stm32f10x_tim.c **** {
 2835              		.loc 1 1341 0
 2836              		.cfi_startproc
 2837              		@ args = 0, pretend = 0, frame = 16
 2838              		@ frame_needed = 1, uses_anonymous_args = 0
 2839              		@ link register save eliminated.
 2840 0e06 80B4     		push	{r7}
 2841              		.cfi_def_cfa_offset 4
 2842              		.cfi_offset 7, -4
 2843 0e08 85B0     		sub	sp, sp, #20
 2844              		.cfi_def_cfa_offset 24
 2845 0e0a 00AF     		add	r7, sp, #0
 2846              		.cfi_def_cfa_register 7
 2847 0e0c 7860     		str	r0, [r7, #4]
 2848 0e0e 0B46     		mov	r3, r1
 2849 0e10 7B80     		strh	r3, [r7, #2]	@ movhi
1342:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 2850              		.loc 1 1342 0
 2851 0e12 0023     		movs	r3, #0
 2852 0e14 FB81     		strh	r3, [r7, #14]	@ movhi
1343:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1344:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1345:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1346:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 2853              		.loc 1 1346 0
 2854 0e16 7B68     		ldr	r3, [r7, #4]
 2855 0e18 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 2856 0e1a FB81     		strh	r3, [r7, #14]	@ movhi
1347:lib/src/stm32f10x_tim.c ****   /* Reset the OC2M Bits */
1348:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 2857              		.loc 1 1348 0
 2858 0e1c FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 76


 2859 0e1e 23F4E043 		bic	r3, r3, #28672
 2860 0e22 FB81     		strh	r3, [r7, #14]	@ movhi
1349:lib/src/stm32f10x_tim.c ****   /* Configure The Forced output Mode */
1350:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 2861              		.loc 1 1350 0
 2862 0e24 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2863 0e26 1B02     		lsls	r3, r3, #8
 2864 0e28 9AB2     		uxth	r2, r3
 2865 0e2a FB89     		ldrh	r3, [r7, #14]	@ movhi
 2866 0e2c 1343     		orrs	r3, r3, r2
 2867 0e2e FB81     		strh	r3, [r7, #14]	@ movhi
1351:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1352:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 2868              		.loc 1 1352 0
 2869 0e30 7B68     		ldr	r3, [r7, #4]
 2870 0e32 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2871 0e34 1A83     		strh	r2, [r3, #24]	@ movhi
1353:lib/src/stm32f10x_tim.c **** }
 2872              		.loc 1 1353 0
 2873 0e36 00BF     		nop
 2874 0e38 1437     		adds	r7, r7, #20
 2875              		.cfi_def_cfa_offset 4
 2876 0e3a BD46     		mov	sp, r7
 2877              		.cfi_def_cfa_register 13
 2878              		@ sp needed
 2879 0e3c 80BC     		pop	{r7}
 2880              		.cfi_restore 7
 2881              		.cfi_def_cfa_offset 0
 2882 0e3e 7047     		bx	lr
 2883              		.cfi_endproc
 2884              	.LFE94:
 2885              		.size	TIM_ForcedOC2Config, .-TIM_ForcedOC2Config
 2886              		.align	1
 2887              		.global	TIM_ForcedOC3Config
 2888              		.syntax unified
 2889              		.thumb
 2890              		.thumb_func
 2891              		.fpu softvfp
 2892              		.type	TIM_ForcedOC3Config, %function
 2893              	TIM_ForcedOC3Config:
 2894              	.LFB95:
1354:lib/src/stm32f10x_tim.c **** 
1355:lib/src/stm32f10x_tim.c **** /**
1356:lib/src/stm32f10x_tim.c ****   * @brief  Forces the TIMx output 3 waveform to active or inactive level.
1357:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1358:lib/src/stm32f10x_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1359:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1360:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
1361:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
1362:lib/src/stm32f10x_tim.c ****   * @retval None
1363:lib/src/stm32f10x_tim.c ****   */
1364:lib/src/stm32f10x_tim.c **** void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1365:lib/src/stm32f10x_tim.c **** {
 2895              		.loc 1 1365 0
 2896              		.cfi_startproc
 2897              		@ args = 0, pretend = 0, frame = 16
 2898              		@ frame_needed = 1, uses_anonymous_args = 0
ARM GAS  /tmp/ccNus05k.s 			page 77


 2899              		@ link register save eliminated.
 2900 0e40 80B4     		push	{r7}
 2901              		.cfi_def_cfa_offset 4
 2902              		.cfi_offset 7, -4
 2903 0e42 85B0     		sub	sp, sp, #20
 2904              		.cfi_def_cfa_offset 24
 2905 0e44 00AF     		add	r7, sp, #0
 2906              		.cfi_def_cfa_register 7
 2907 0e46 7860     		str	r0, [r7, #4]
 2908 0e48 0B46     		mov	r3, r1
 2909 0e4a 7B80     		strh	r3, [r7, #2]	@ movhi
1366:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 2910              		.loc 1 1366 0
 2911 0e4c 0023     		movs	r3, #0
 2912 0e4e FB81     		strh	r3, [r7, #14]	@ movhi
1367:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1368:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1369:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1370:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2913              		.loc 1 1370 0
 2914 0e50 7B68     		ldr	r3, [r7, #4]
 2915 0e52 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2916 0e54 FB81     		strh	r3, [r7, #14]	@ movhi
1371:lib/src/stm32f10x_tim.c ****   /* Reset the OC1M Bits */
1372:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 2917              		.loc 1 1372 0
 2918 0e56 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2919 0e58 23F07003 		bic	r3, r3, #112
 2920 0e5c FB81     		strh	r3, [r7, #14]	@ movhi
1373:lib/src/stm32f10x_tim.c ****   /* Configure The Forced output Mode */
1374:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= TIM_ForcedAction;
 2921              		.loc 1 1374 0
 2922 0e5e FA89     		ldrh	r2, [r7, #14]	@ movhi
 2923 0e60 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2924 0e62 1343     		orrs	r3, r3, r2
 2925 0e64 FB81     		strh	r3, [r7, #14]	@ movhi
1375:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1376:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2926              		.loc 1 1376 0
 2927 0e66 7B68     		ldr	r3, [r7, #4]
 2928 0e68 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2929 0e6a 9A83     		strh	r2, [r3, #28]	@ movhi
1377:lib/src/stm32f10x_tim.c **** }
 2930              		.loc 1 1377 0
 2931 0e6c 00BF     		nop
 2932 0e6e 1437     		adds	r7, r7, #20
 2933              		.cfi_def_cfa_offset 4
 2934 0e70 BD46     		mov	sp, r7
 2935              		.cfi_def_cfa_register 13
 2936              		@ sp needed
 2937 0e72 80BC     		pop	{r7}
 2938              		.cfi_restore 7
 2939              		.cfi_def_cfa_offset 0
 2940 0e74 7047     		bx	lr
 2941              		.cfi_endproc
 2942              	.LFE95:
 2943              		.size	TIM_ForcedOC3Config, .-TIM_ForcedOC3Config
ARM GAS  /tmp/ccNus05k.s 			page 78


 2944              		.align	1
 2945              		.global	TIM_ForcedOC4Config
 2946              		.syntax unified
 2947              		.thumb
 2948              		.thumb_func
 2949              		.fpu softvfp
 2950              		.type	TIM_ForcedOC4Config, %function
 2951              	TIM_ForcedOC4Config:
 2952              	.LFB96:
1378:lib/src/stm32f10x_tim.c **** 
1379:lib/src/stm32f10x_tim.c **** /**
1380:lib/src/stm32f10x_tim.c ****   * @brief  Forces the TIMx output 4 waveform to active or inactive level.
1381:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1382:lib/src/stm32f10x_tim.c ****   * @param  TIM_ForcedAction: specifies the forced Action to be set to the output waveform.
1383:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1384:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
1385:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
1386:lib/src/stm32f10x_tim.c ****   * @retval None
1387:lib/src/stm32f10x_tim.c ****   */
1388:lib/src/stm32f10x_tim.c **** void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
1389:lib/src/stm32f10x_tim.c **** {
 2953              		.loc 1 1389 0
 2954              		.cfi_startproc
 2955              		@ args = 0, pretend = 0, frame = 16
 2956              		@ frame_needed = 1, uses_anonymous_args = 0
 2957              		@ link register save eliminated.
 2958 0e76 80B4     		push	{r7}
 2959              		.cfi_def_cfa_offset 4
 2960              		.cfi_offset 7, -4
 2961 0e78 85B0     		sub	sp, sp, #20
 2962              		.cfi_def_cfa_offset 24
 2963 0e7a 00AF     		add	r7, sp, #0
 2964              		.cfi_def_cfa_register 7
 2965 0e7c 7860     		str	r0, [r7, #4]
 2966 0e7e 0B46     		mov	r3, r1
 2967 0e80 7B80     		strh	r3, [r7, #2]	@ movhi
1390:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 2968              		.loc 1 1390 0
 2969 0e82 0023     		movs	r3, #0
 2970 0e84 FB81     		strh	r3, [r7, #14]	@ movhi
1391:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1392:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1393:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
1394:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 2971              		.loc 1 1394 0
 2972 0e86 7B68     		ldr	r3, [r7, #4]
 2973 0e88 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 2974 0e8a FB81     		strh	r3, [r7, #14]	@ movhi
1395:lib/src/stm32f10x_tim.c ****   /* Reset the OC2M Bits */
1396:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 2975              		.loc 1 1396 0
 2976 0e8c FB89     		ldrh	r3, [r7, #14]	@ movhi
 2977 0e8e 23F4E043 		bic	r3, r3, #28672
 2978 0e92 FB81     		strh	r3, [r7, #14]	@ movhi
1397:lib/src/stm32f10x_tim.c ****   /* Configure The Forced output Mode */
1398:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 2979              		.loc 1 1398 0
ARM GAS  /tmp/ccNus05k.s 			page 79


 2980 0e94 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2981 0e96 1B02     		lsls	r3, r3, #8
 2982 0e98 9AB2     		uxth	r2, r3
 2983 0e9a FB89     		ldrh	r3, [r7, #14]	@ movhi
 2984 0e9c 1343     		orrs	r3, r3, r2
 2985 0e9e FB81     		strh	r3, [r7, #14]	@ movhi
1399:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1400:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 2986              		.loc 1 1400 0
 2987 0ea0 7B68     		ldr	r3, [r7, #4]
 2988 0ea2 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2989 0ea4 9A83     		strh	r2, [r3, #28]	@ movhi
1401:lib/src/stm32f10x_tim.c **** }
 2990              		.loc 1 1401 0
 2991 0ea6 00BF     		nop
 2992 0ea8 1437     		adds	r7, r7, #20
 2993              		.cfi_def_cfa_offset 4
 2994 0eaa BD46     		mov	sp, r7
 2995              		.cfi_def_cfa_register 13
 2996              		@ sp needed
 2997 0eac 80BC     		pop	{r7}
 2998              		.cfi_restore 7
 2999              		.cfi_def_cfa_offset 0
 3000 0eae 7047     		bx	lr
 3001              		.cfi_endproc
 3002              	.LFE96:
 3003              		.size	TIM_ForcedOC4Config, .-TIM_ForcedOC4Config
 3004              		.align	1
 3005              		.global	TIM_ARRPreloadConfig
 3006              		.syntax unified
 3007              		.thumb
 3008              		.thumb_func
 3009              		.fpu softvfp
 3010              		.type	TIM_ARRPreloadConfig, %function
 3011              	TIM_ARRPreloadConfig:
 3012              	.LFB97:
1402:lib/src/stm32f10x_tim.c **** 
1403:lib/src/stm32f10x_tim.c **** /**
1404:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables TIMx peripheral Preload register on ARR.
1405:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 to select the TIM peripheral.
1406:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the TIMx peripheral Preload register
1407:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
1408:lib/src/stm32f10x_tim.c ****   * @retval None
1409:lib/src/stm32f10x_tim.c ****   */
1410:lib/src/stm32f10x_tim.c **** void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
1411:lib/src/stm32f10x_tim.c **** {
 3013              		.loc 1 1411 0
 3014              		.cfi_startproc
 3015              		@ args = 0, pretend = 0, frame = 8
 3016              		@ frame_needed = 1, uses_anonymous_args = 0
 3017              		@ link register save eliminated.
 3018 0eb0 80B4     		push	{r7}
 3019              		.cfi_def_cfa_offset 4
 3020              		.cfi_offset 7, -4
 3021 0eb2 83B0     		sub	sp, sp, #12
 3022              		.cfi_def_cfa_offset 16
 3023 0eb4 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccNus05k.s 			page 80


 3024              		.cfi_def_cfa_register 7
 3025 0eb6 7860     		str	r0, [r7, #4]
 3026 0eb8 0B46     		mov	r3, r1
 3027 0eba FB70     		strb	r3, [r7, #3]
1412:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1413:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
1414:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1415:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 3028              		.loc 1 1415 0
 3029 0ebc FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3030 0ebe 002B     		cmp	r3, #0
 3031 0ec0 08D0     		beq	.L104
1416:lib/src/stm32f10x_tim.c ****   {
1417:lib/src/stm32f10x_tim.c ****     /* Set the ARR Preload Bit */
1418:lib/src/stm32f10x_tim.c ****     TIMx->CR1 |= TIM_CR1_ARPE;
 3032              		.loc 1 1418 0
 3033 0ec2 7B68     		ldr	r3, [r7, #4]
 3034 0ec4 1B88     		ldrh	r3, [r3]	@ movhi
 3035 0ec6 9BB2     		uxth	r3, r3
 3036 0ec8 43F08003 		orr	r3, r3, #128
 3037 0ecc 9AB2     		uxth	r2, r3
 3038 0ece 7B68     		ldr	r3, [r7, #4]
 3039 0ed0 1A80     		strh	r2, [r3]	@ movhi
1419:lib/src/stm32f10x_tim.c ****   }
1420:lib/src/stm32f10x_tim.c ****   else
1421:lib/src/stm32f10x_tim.c ****   {
1422:lib/src/stm32f10x_tim.c ****     /* Reset the ARR Preload Bit */
1423:lib/src/stm32f10x_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
1424:lib/src/stm32f10x_tim.c ****   }
1425:lib/src/stm32f10x_tim.c **** }
 3040              		.loc 1 1425 0
 3041 0ed2 07E0     		b	.L106
 3042              	.L104:
1423:lib/src/stm32f10x_tim.c ****   }
 3043              		.loc 1 1423 0
 3044 0ed4 7B68     		ldr	r3, [r7, #4]
 3045 0ed6 1B88     		ldrh	r3, [r3]	@ movhi
 3046 0ed8 9BB2     		uxth	r3, r3
 3047 0eda 23F08003 		bic	r3, r3, #128
 3048 0ede 9AB2     		uxth	r2, r3
 3049 0ee0 7B68     		ldr	r3, [r7, #4]
 3050 0ee2 1A80     		strh	r2, [r3]	@ movhi
 3051              	.L106:
 3052              		.loc 1 1425 0
 3053 0ee4 00BF     		nop
 3054 0ee6 0C37     		adds	r7, r7, #12
 3055              		.cfi_def_cfa_offset 4
 3056 0ee8 BD46     		mov	sp, r7
 3057              		.cfi_def_cfa_register 13
 3058              		@ sp needed
 3059 0eea 80BC     		pop	{r7}
 3060              		.cfi_restore 7
 3061              		.cfi_def_cfa_offset 0
 3062 0eec 7047     		bx	lr
 3063              		.cfi_endproc
 3064              	.LFE97:
 3065              		.size	TIM_ARRPreloadConfig, .-TIM_ARRPreloadConfig
ARM GAS  /tmp/ccNus05k.s 			page 81


 3066              		.align	1
 3067              		.global	TIM_SelectCOM
 3068              		.syntax unified
 3069              		.thumb
 3070              		.thumb_func
 3071              		.fpu softvfp
 3072              		.type	TIM_SelectCOM, %function
 3073              	TIM_SelectCOM:
 3074              	.LFB98:
1426:lib/src/stm32f10x_tim.c **** 
1427:lib/src/stm32f10x_tim.c **** /**
1428:lib/src/stm32f10x_tim.c ****   * @brief  Selects the TIM peripheral Commutation event.
1429:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 8, 15, 16 or 17 to select the TIMx peripheral
1430:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the Commutation event.
1431:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
1432:lib/src/stm32f10x_tim.c ****   * @retval None
1433:lib/src/stm32f10x_tim.c ****   */
1434:lib/src/stm32f10x_tim.c **** void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
1435:lib/src/stm32f10x_tim.c **** {
 3075              		.loc 1 1435 0
 3076              		.cfi_startproc
 3077              		@ args = 0, pretend = 0, frame = 8
 3078              		@ frame_needed = 1, uses_anonymous_args = 0
 3079              		@ link register save eliminated.
 3080 0eee 80B4     		push	{r7}
 3081              		.cfi_def_cfa_offset 4
 3082              		.cfi_offset 7, -4
 3083 0ef0 83B0     		sub	sp, sp, #12
 3084              		.cfi_def_cfa_offset 16
 3085 0ef2 00AF     		add	r7, sp, #0
 3086              		.cfi_def_cfa_register 7
 3087 0ef4 7860     		str	r0, [r7, #4]
 3088 0ef6 0B46     		mov	r3, r1
 3089 0ef8 FB70     		strb	r3, [r7, #3]
1436:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1437:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1438:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1439:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 3090              		.loc 1 1439 0
 3091 0efa FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3092 0efc 002B     		cmp	r3, #0
 3093 0efe 08D0     		beq	.L108
1440:lib/src/stm32f10x_tim.c ****   {
1441:lib/src/stm32f10x_tim.c ****     /* Set the COM Bit */
1442:lib/src/stm32f10x_tim.c ****     TIMx->CR2 |= TIM_CR2_CCUS;
 3094              		.loc 1 1442 0
 3095 0f00 7B68     		ldr	r3, [r7, #4]
 3096 0f02 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3097 0f04 9BB2     		uxth	r3, r3
 3098 0f06 43F00403 		orr	r3, r3, #4
 3099 0f0a 9AB2     		uxth	r2, r3
 3100 0f0c 7B68     		ldr	r3, [r7, #4]
 3101 0f0e 9A80     		strh	r2, [r3, #4]	@ movhi
1443:lib/src/stm32f10x_tim.c ****   }
1444:lib/src/stm32f10x_tim.c ****   else
1445:lib/src/stm32f10x_tim.c ****   {
1446:lib/src/stm32f10x_tim.c ****     /* Reset the COM Bit */
ARM GAS  /tmp/ccNus05k.s 			page 82


1447:lib/src/stm32f10x_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
1448:lib/src/stm32f10x_tim.c ****   }
1449:lib/src/stm32f10x_tim.c **** }
 3102              		.loc 1 1449 0
 3103 0f10 07E0     		b	.L110
 3104              	.L108:
1447:lib/src/stm32f10x_tim.c ****   }
 3105              		.loc 1 1447 0
 3106 0f12 7B68     		ldr	r3, [r7, #4]
 3107 0f14 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3108 0f16 9BB2     		uxth	r3, r3
 3109 0f18 23F00403 		bic	r3, r3, #4
 3110 0f1c 9AB2     		uxth	r2, r3
 3111 0f1e 7B68     		ldr	r3, [r7, #4]
 3112 0f20 9A80     		strh	r2, [r3, #4]	@ movhi
 3113              	.L110:
 3114              		.loc 1 1449 0
 3115 0f22 00BF     		nop
 3116 0f24 0C37     		adds	r7, r7, #12
 3117              		.cfi_def_cfa_offset 4
 3118 0f26 BD46     		mov	sp, r7
 3119              		.cfi_def_cfa_register 13
 3120              		@ sp needed
 3121 0f28 80BC     		pop	{r7}
 3122              		.cfi_restore 7
 3123              		.cfi_def_cfa_offset 0
 3124 0f2a 7047     		bx	lr
 3125              		.cfi_endproc
 3126              	.LFE98:
 3127              		.size	TIM_SelectCOM, .-TIM_SelectCOM
 3128              		.align	1
 3129              		.global	TIM_SelectCCDMA
 3130              		.syntax unified
 3131              		.thumb
 3132              		.thumb_func
 3133              		.fpu softvfp
 3134              		.type	TIM_SelectCCDMA, %function
 3135              	TIM_SelectCCDMA:
 3136              	.LFB99:
1450:lib/src/stm32f10x_tim.c **** 
1451:lib/src/stm32f10x_tim.c **** /**
1452:lib/src/stm32f10x_tim.c ****   * @brief  Selects the TIMx peripheral Capture Compare DMA source.
1453:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 15, 16 or 17 to select 
1454:lib/src/stm32f10x_tim.c ****   *         the TIM peripheral.
1455:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the Capture Compare DMA source
1456:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
1457:lib/src/stm32f10x_tim.c ****   * @retval None
1458:lib/src/stm32f10x_tim.c ****   */
1459:lib/src/stm32f10x_tim.c **** void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
1460:lib/src/stm32f10x_tim.c **** {
 3137              		.loc 1 1460 0
 3138              		.cfi_startproc
 3139              		@ args = 0, pretend = 0, frame = 8
 3140              		@ frame_needed = 1, uses_anonymous_args = 0
 3141              		@ link register save eliminated.
 3142 0f2c 80B4     		push	{r7}
 3143              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccNus05k.s 			page 83


 3144              		.cfi_offset 7, -4
 3145 0f2e 83B0     		sub	sp, sp, #12
 3146              		.cfi_def_cfa_offset 16
 3147 0f30 00AF     		add	r7, sp, #0
 3148              		.cfi_def_cfa_register 7
 3149 0f32 7860     		str	r0, [r7, #4]
 3150 0f34 0B46     		mov	r3, r1
 3151 0f36 FB70     		strb	r3, [r7, #3]
1461:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1462:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST4_PERIPH(TIMx));
1463:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1464:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 3152              		.loc 1 1464 0
 3153 0f38 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3154 0f3a 002B     		cmp	r3, #0
 3155 0f3c 08D0     		beq	.L112
1465:lib/src/stm32f10x_tim.c ****   {
1466:lib/src/stm32f10x_tim.c ****     /* Set the CCDS Bit */
1467:lib/src/stm32f10x_tim.c ****     TIMx->CR2 |= TIM_CR2_CCDS;
 3156              		.loc 1 1467 0
 3157 0f3e 7B68     		ldr	r3, [r7, #4]
 3158 0f40 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3159 0f42 9BB2     		uxth	r3, r3
 3160 0f44 43F00803 		orr	r3, r3, #8
 3161 0f48 9AB2     		uxth	r2, r3
 3162 0f4a 7B68     		ldr	r3, [r7, #4]
 3163 0f4c 9A80     		strh	r2, [r3, #4]	@ movhi
1468:lib/src/stm32f10x_tim.c ****   }
1469:lib/src/stm32f10x_tim.c ****   else
1470:lib/src/stm32f10x_tim.c ****   {
1471:lib/src/stm32f10x_tim.c ****     /* Reset the CCDS Bit */
1472:lib/src/stm32f10x_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
1473:lib/src/stm32f10x_tim.c ****   }
1474:lib/src/stm32f10x_tim.c **** }
 3164              		.loc 1 1474 0
 3165 0f4e 07E0     		b	.L114
 3166              	.L112:
1472:lib/src/stm32f10x_tim.c ****   }
 3167              		.loc 1 1472 0
 3168 0f50 7B68     		ldr	r3, [r7, #4]
 3169 0f52 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3170 0f54 9BB2     		uxth	r3, r3
 3171 0f56 23F00803 		bic	r3, r3, #8
 3172 0f5a 9AB2     		uxth	r2, r3
 3173 0f5c 7B68     		ldr	r3, [r7, #4]
 3174 0f5e 9A80     		strh	r2, [r3, #4]	@ movhi
 3175              	.L114:
 3176              		.loc 1 1474 0
 3177 0f60 00BF     		nop
 3178 0f62 0C37     		adds	r7, r7, #12
 3179              		.cfi_def_cfa_offset 4
 3180 0f64 BD46     		mov	sp, r7
 3181              		.cfi_def_cfa_register 13
 3182              		@ sp needed
 3183 0f66 80BC     		pop	{r7}
 3184              		.cfi_restore 7
 3185              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccNus05k.s 			page 84


 3186 0f68 7047     		bx	lr
 3187              		.cfi_endproc
 3188              	.LFE99:
 3189              		.size	TIM_SelectCCDMA, .-TIM_SelectCCDMA
 3190              		.align	1
 3191              		.global	TIM_CCPreloadControl
 3192              		.syntax unified
 3193              		.thumb
 3194              		.thumb_func
 3195              		.fpu softvfp
 3196              		.type	TIM_CCPreloadControl, %function
 3197              	TIM_CCPreloadControl:
 3198              	.LFB100:
1475:lib/src/stm32f10x_tim.c **** 
1476:lib/src/stm32f10x_tim.c **** /**
1477:lib/src/stm32f10x_tim.c ****   * @brief  Sets or Resets the TIM peripheral Capture Compare Preload Control bit.
1478:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be   1, 2, 3, 4, 5, 8 or 15 
1479:lib/src/stm32f10x_tim.c ****   *         to select the TIMx peripheral
1480:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the Capture Compare Preload Control bit
1481:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
1482:lib/src/stm32f10x_tim.c ****   * @retval None
1483:lib/src/stm32f10x_tim.c ****   */
1484:lib/src/stm32f10x_tim.c **** void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
1485:lib/src/stm32f10x_tim.c **** { 
 3199              		.loc 1 1485 0
 3200              		.cfi_startproc
 3201              		@ args = 0, pretend = 0, frame = 8
 3202              		@ frame_needed = 1, uses_anonymous_args = 0
 3203              		@ link register save eliminated.
 3204 0f6a 80B4     		push	{r7}
 3205              		.cfi_def_cfa_offset 4
 3206              		.cfi_offset 7, -4
 3207 0f6c 83B0     		sub	sp, sp, #12
 3208              		.cfi_def_cfa_offset 16
 3209 0f6e 00AF     		add	r7, sp, #0
 3210              		.cfi_def_cfa_register 7
 3211 0f70 7860     		str	r0, [r7, #4]
 3212 0f72 0B46     		mov	r3, r1
 3213 0f74 FB70     		strb	r3, [r7, #3]
1486:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1487:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST5_PERIPH(TIMx));
1488:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1489:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 3214              		.loc 1 1489 0
 3215 0f76 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 3216 0f78 002B     		cmp	r3, #0
 3217 0f7a 08D0     		beq	.L116
1490:lib/src/stm32f10x_tim.c ****   {
1491:lib/src/stm32f10x_tim.c ****     /* Set the CCPC Bit */
1492:lib/src/stm32f10x_tim.c ****     TIMx->CR2 |= TIM_CR2_CCPC;
 3218              		.loc 1 1492 0
 3219 0f7c 7B68     		ldr	r3, [r7, #4]
 3220 0f7e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3221 0f80 9BB2     		uxth	r3, r3
 3222 0f82 43F00103 		orr	r3, r3, #1
 3223 0f86 9AB2     		uxth	r2, r3
 3224 0f88 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNus05k.s 			page 85


 3225 0f8a 9A80     		strh	r2, [r3, #4]	@ movhi
1493:lib/src/stm32f10x_tim.c ****   }
1494:lib/src/stm32f10x_tim.c ****   else
1495:lib/src/stm32f10x_tim.c ****   {
1496:lib/src/stm32f10x_tim.c ****     /* Reset the CCPC Bit */
1497:lib/src/stm32f10x_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
1498:lib/src/stm32f10x_tim.c ****   }
1499:lib/src/stm32f10x_tim.c **** }
 3226              		.loc 1 1499 0
 3227 0f8c 07E0     		b	.L118
 3228              	.L116:
1497:lib/src/stm32f10x_tim.c ****   }
 3229              		.loc 1 1497 0
 3230 0f8e 7B68     		ldr	r3, [r7, #4]
 3231 0f90 9B88     		ldrh	r3, [r3, #4]	@ movhi
 3232 0f92 9BB2     		uxth	r3, r3
 3233 0f94 23F00103 		bic	r3, r3, #1
 3234 0f98 9AB2     		uxth	r2, r3
 3235 0f9a 7B68     		ldr	r3, [r7, #4]
 3236 0f9c 9A80     		strh	r2, [r3, #4]	@ movhi
 3237              	.L118:
 3238              		.loc 1 1499 0
 3239 0f9e 00BF     		nop
 3240 0fa0 0C37     		adds	r7, r7, #12
 3241              		.cfi_def_cfa_offset 4
 3242 0fa2 BD46     		mov	sp, r7
 3243              		.cfi_def_cfa_register 13
 3244              		@ sp needed
 3245 0fa4 80BC     		pop	{r7}
 3246              		.cfi_restore 7
 3247              		.cfi_def_cfa_offset 0
 3248 0fa6 7047     		bx	lr
 3249              		.cfi_endproc
 3250              	.LFE100:
 3251              		.size	TIM_CCPreloadControl, .-TIM_CCPreloadControl
 3252              		.align	1
 3253              		.global	TIM_OC1PreloadConfig
 3254              		.syntax unified
 3255              		.thumb
 3256              		.thumb_func
 3257              		.fpu softvfp
 3258              		.type	TIM_OC1PreloadConfig, %function
 3259              	TIM_OC1PreloadConfig:
 3260              	.LFB101:
1500:lib/src/stm32f10x_tim.c **** 
1501:lib/src/stm32f10x_tim.c **** /**
1502:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR1.
1503:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
1504:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1505:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1506:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Enable
1507:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Disable
1508:lib/src/stm32f10x_tim.c ****   * @retval None
1509:lib/src/stm32f10x_tim.c ****   */
1510:lib/src/stm32f10x_tim.c **** void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1511:lib/src/stm32f10x_tim.c **** {
 3261              		.loc 1 1511 0
ARM GAS  /tmp/ccNus05k.s 			page 86


 3262              		.cfi_startproc
 3263              		@ args = 0, pretend = 0, frame = 16
 3264              		@ frame_needed = 1, uses_anonymous_args = 0
 3265              		@ link register save eliminated.
 3266 0fa8 80B4     		push	{r7}
 3267              		.cfi_def_cfa_offset 4
 3268              		.cfi_offset 7, -4
 3269 0faa 85B0     		sub	sp, sp, #20
 3270              		.cfi_def_cfa_offset 24
 3271 0fac 00AF     		add	r7, sp, #0
 3272              		.cfi_def_cfa_register 7
 3273 0fae 7860     		str	r0, [r7, #4]
 3274 0fb0 0B46     		mov	r3, r1
 3275 0fb2 7B80     		strh	r3, [r7, #2]	@ movhi
1512:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3276              		.loc 1 1512 0
 3277 0fb4 0023     		movs	r3, #0
 3278 0fb6 FB81     		strh	r3, [r7, #14]	@ movhi
1513:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1514:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1515:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1516:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3279              		.loc 1 1516 0
 3280 0fb8 7B68     		ldr	r3, [r7, #4]
 3281 0fba 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3282 0fbc FB81     		strh	r3, [r7, #14]	@ movhi
1517:lib/src/stm32f10x_tim.c ****   /* Reset the OC1PE Bit */
1518:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 3283              		.loc 1 1518 0
 3284 0fbe FB89     		ldrh	r3, [r7, #14]	@ movhi
 3285 0fc0 23F00803 		bic	r3, r3, #8
 3286 0fc4 FB81     		strh	r3, [r7, #14]	@ movhi
1519:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1520:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= TIM_OCPreload;
 3287              		.loc 1 1520 0
 3288 0fc6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3289 0fc8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3290 0fca 1343     		orrs	r3, r3, r2
 3291 0fcc FB81     		strh	r3, [r7, #14]	@ movhi
1521:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1522:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3292              		.loc 1 1522 0
 3293 0fce 7B68     		ldr	r3, [r7, #4]
 3294 0fd0 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3295 0fd2 1A83     		strh	r2, [r3, #24]	@ movhi
1523:lib/src/stm32f10x_tim.c **** }
 3296              		.loc 1 1523 0
 3297 0fd4 00BF     		nop
 3298 0fd6 1437     		adds	r7, r7, #20
 3299              		.cfi_def_cfa_offset 4
 3300 0fd8 BD46     		mov	sp, r7
 3301              		.cfi_def_cfa_register 13
 3302              		@ sp needed
 3303 0fda 80BC     		pop	{r7}
 3304              		.cfi_restore 7
 3305              		.cfi_def_cfa_offset 0
 3306 0fdc 7047     		bx	lr
ARM GAS  /tmp/ccNus05k.s 			page 87


 3307              		.cfi_endproc
 3308              	.LFE101:
 3309              		.size	TIM_OC1PreloadConfig, .-TIM_OC1PreloadConfig
 3310              		.align	1
 3311              		.global	TIM_OC2PreloadConfig
 3312              		.syntax unified
 3313              		.thumb
 3314              		.thumb_func
 3315              		.fpu softvfp
 3316              		.type	TIM_OC2PreloadConfig, %function
 3317              	TIM_OC2PreloadConfig:
 3318              	.LFB102:
1524:lib/src/stm32f10x_tim.c **** 
1525:lib/src/stm32f10x_tim.c **** /**
1526:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR2.
1527:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select 
1528:lib/src/stm32f10x_tim.c ****   *         the TIM peripheral.
1529:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1530:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1531:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Enable
1532:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Disable
1533:lib/src/stm32f10x_tim.c ****   * @retval None
1534:lib/src/stm32f10x_tim.c ****   */
1535:lib/src/stm32f10x_tim.c **** void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1536:lib/src/stm32f10x_tim.c **** {
 3319              		.loc 1 1536 0
 3320              		.cfi_startproc
 3321              		@ args = 0, pretend = 0, frame = 16
 3322              		@ frame_needed = 1, uses_anonymous_args = 0
 3323              		@ link register save eliminated.
 3324 0fde 80B4     		push	{r7}
 3325              		.cfi_def_cfa_offset 4
 3326              		.cfi_offset 7, -4
 3327 0fe0 85B0     		sub	sp, sp, #20
 3328              		.cfi_def_cfa_offset 24
 3329 0fe2 00AF     		add	r7, sp, #0
 3330              		.cfi_def_cfa_register 7
 3331 0fe4 7860     		str	r0, [r7, #4]
 3332 0fe6 0B46     		mov	r3, r1
 3333 0fe8 7B80     		strh	r3, [r7, #2]	@ movhi
1537:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3334              		.loc 1 1537 0
 3335 0fea 0023     		movs	r3, #0
 3336 0fec FB81     		strh	r3, [r7, #14]	@ movhi
1538:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1539:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1540:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1541:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3337              		.loc 1 1541 0
 3338 0fee 7B68     		ldr	r3, [r7, #4]
 3339 0ff0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3340 0ff2 FB81     		strh	r3, [r7, #14]	@ movhi
1542:lib/src/stm32f10x_tim.c ****   /* Reset the OC2PE Bit */
1543:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 3341              		.loc 1 1543 0
 3342 0ff4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3343 0ff6 23F40063 		bic	r3, r3, #2048
ARM GAS  /tmp/ccNus05k.s 			page 88


 3344 0ffa FB81     		strh	r3, [r7, #14]	@ movhi
1544:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1545:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 3345              		.loc 1 1545 0
 3346 0ffc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3347 0ffe 1B02     		lsls	r3, r3, #8
 3348 1000 9AB2     		uxth	r2, r3
 3349 1002 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3350 1004 1343     		orrs	r3, r3, r2
 3351 1006 FB81     		strh	r3, [r7, #14]	@ movhi
1546:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1547:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3352              		.loc 1 1547 0
 3353 1008 7B68     		ldr	r3, [r7, #4]
 3354 100a FA89     		ldrh	r2, [r7, #14]	@ movhi
 3355 100c 1A83     		strh	r2, [r3, #24]	@ movhi
1548:lib/src/stm32f10x_tim.c **** }
 3356              		.loc 1 1548 0
 3357 100e 00BF     		nop
 3358 1010 1437     		adds	r7, r7, #20
 3359              		.cfi_def_cfa_offset 4
 3360 1012 BD46     		mov	sp, r7
 3361              		.cfi_def_cfa_register 13
 3362              		@ sp needed
 3363 1014 80BC     		pop	{r7}
 3364              		.cfi_restore 7
 3365              		.cfi_def_cfa_offset 0
 3366 1016 7047     		bx	lr
 3367              		.cfi_endproc
 3368              	.LFE102:
 3369              		.size	TIM_OC2PreloadConfig, .-TIM_OC2PreloadConfig
 3370              		.align	1
 3371              		.global	TIM_OC3PreloadConfig
 3372              		.syntax unified
 3373              		.thumb
 3374              		.thumb_func
 3375              		.fpu softvfp
 3376              		.type	TIM_OC3PreloadConfig, %function
 3377              	TIM_OC3PreloadConfig:
 3378              	.LFB103:
1549:lib/src/stm32f10x_tim.c **** 
1550:lib/src/stm32f10x_tim.c **** /**
1551:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR3.
1552:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1553:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1554:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1555:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Enable
1556:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Disable
1557:lib/src/stm32f10x_tim.c ****   * @retval None
1558:lib/src/stm32f10x_tim.c ****   */
1559:lib/src/stm32f10x_tim.c **** void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1560:lib/src/stm32f10x_tim.c **** {
 3379              		.loc 1 1560 0
 3380              		.cfi_startproc
 3381              		@ args = 0, pretend = 0, frame = 16
 3382              		@ frame_needed = 1, uses_anonymous_args = 0
 3383              		@ link register save eliminated.
ARM GAS  /tmp/ccNus05k.s 			page 89


 3384 1018 80B4     		push	{r7}
 3385              		.cfi_def_cfa_offset 4
 3386              		.cfi_offset 7, -4
 3387 101a 85B0     		sub	sp, sp, #20
 3388              		.cfi_def_cfa_offset 24
 3389 101c 00AF     		add	r7, sp, #0
 3390              		.cfi_def_cfa_register 7
 3391 101e 7860     		str	r0, [r7, #4]
 3392 1020 0B46     		mov	r3, r1
 3393 1022 7B80     		strh	r3, [r7, #2]	@ movhi
1561:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3394              		.loc 1 1561 0
 3395 1024 0023     		movs	r3, #0
 3396 1026 FB81     		strh	r3, [r7, #14]	@ movhi
1562:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1563:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1564:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1565:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3397              		.loc 1 1565 0
 3398 1028 7B68     		ldr	r3, [r7, #4]
 3399 102a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3400 102c FB81     		strh	r3, [r7, #14]	@ movhi
1566:lib/src/stm32f10x_tim.c ****   /* Reset the OC3PE Bit */
1567:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 3401              		.loc 1 1567 0
 3402 102e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3403 1030 23F00803 		bic	r3, r3, #8
 3404 1034 FB81     		strh	r3, [r7, #14]	@ movhi
1568:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1569:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= TIM_OCPreload;
 3405              		.loc 1 1569 0
 3406 1036 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3407 1038 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3408 103a 1343     		orrs	r3, r3, r2
 3409 103c FB81     		strh	r3, [r7, #14]	@ movhi
1570:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1571:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3410              		.loc 1 1571 0
 3411 103e 7B68     		ldr	r3, [r7, #4]
 3412 1040 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3413 1042 9A83     		strh	r2, [r3, #28]	@ movhi
1572:lib/src/stm32f10x_tim.c **** }
 3414              		.loc 1 1572 0
 3415 1044 00BF     		nop
 3416 1046 1437     		adds	r7, r7, #20
 3417              		.cfi_def_cfa_offset 4
 3418 1048 BD46     		mov	sp, r7
 3419              		.cfi_def_cfa_register 13
 3420              		@ sp needed
 3421 104a 80BC     		pop	{r7}
 3422              		.cfi_restore 7
 3423              		.cfi_def_cfa_offset 0
 3424 104c 7047     		bx	lr
 3425              		.cfi_endproc
 3426              	.LFE103:
 3427              		.size	TIM_OC3PreloadConfig, .-TIM_OC3PreloadConfig
 3428              		.align	1
ARM GAS  /tmp/ccNus05k.s 			page 90


 3429              		.global	TIM_OC4PreloadConfig
 3430              		.syntax unified
 3431              		.thumb
 3432              		.thumb_func
 3433              		.fpu softvfp
 3434              		.type	TIM_OC4PreloadConfig, %function
 3435              	TIM_OC4PreloadConfig:
 3436              	.LFB104:
1573:lib/src/stm32f10x_tim.c **** 
1574:lib/src/stm32f10x_tim.c **** /**
1575:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx peripheral Preload register on CCR4.
1576:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1577:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCPreload: new state of the TIMx peripheral Preload register
1578:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1579:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Enable
1580:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPreload_Disable
1581:lib/src/stm32f10x_tim.c ****   * @retval None
1582:lib/src/stm32f10x_tim.c ****   */
1583:lib/src/stm32f10x_tim.c **** void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
1584:lib/src/stm32f10x_tim.c **** {
 3437              		.loc 1 1584 0
 3438              		.cfi_startproc
 3439              		@ args = 0, pretend = 0, frame = 16
 3440              		@ frame_needed = 1, uses_anonymous_args = 0
 3441              		@ link register save eliminated.
 3442 104e 80B4     		push	{r7}
 3443              		.cfi_def_cfa_offset 4
 3444              		.cfi_offset 7, -4
 3445 1050 85B0     		sub	sp, sp, #20
 3446              		.cfi_def_cfa_offset 24
 3447 1052 00AF     		add	r7, sp, #0
 3448              		.cfi_def_cfa_register 7
 3449 1054 7860     		str	r0, [r7, #4]
 3450 1056 0B46     		mov	r3, r1
 3451 1058 7B80     		strh	r3, [r7, #2]	@ movhi
1585:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3452              		.loc 1 1585 0
 3453 105a 0023     		movs	r3, #0
 3454 105c FB81     		strh	r3, [r7, #14]	@ movhi
1586:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1587:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1588:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
1589:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3455              		.loc 1 1589 0
 3456 105e 7B68     		ldr	r3, [r7, #4]
 3457 1060 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3458 1062 FB81     		strh	r3, [r7, #14]	@ movhi
1590:lib/src/stm32f10x_tim.c ****   /* Reset the OC4PE Bit */
1591:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 3459              		.loc 1 1591 0
 3460 1064 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3461 1066 23F40063 		bic	r3, r3, #2048
 3462 106a FB81     		strh	r3, [r7, #14]	@ movhi
1592:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Preload feature */
1593:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 3463              		.loc 1 1593 0
 3464 106c 7B88     		ldrh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 91


 3465 106e 1B02     		lsls	r3, r3, #8
 3466 1070 9AB2     		uxth	r2, r3
 3467 1072 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3468 1074 1343     		orrs	r3, r3, r2
 3469 1076 FB81     		strh	r3, [r7, #14]	@ movhi
1594:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1595:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3470              		.loc 1 1595 0
 3471 1078 7B68     		ldr	r3, [r7, #4]
 3472 107a FA89     		ldrh	r2, [r7, #14]	@ movhi
 3473 107c 9A83     		strh	r2, [r3, #28]	@ movhi
1596:lib/src/stm32f10x_tim.c **** }
 3474              		.loc 1 1596 0
 3475 107e 00BF     		nop
 3476 1080 1437     		adds	r7, r7, #20
 3477              		.cfi_def_cfa_offset 4
 3478 1082 BD46     		mov	sp, r7
 3479              		.cfi_def_cfa_register 13
 3480              		@ sp needed
 3481 1084 80BC     		pop	{r7}
 3482              		.cfi_restore 7
 3483              		.cfi_def_cfa_offset 0
 3484 1086 7047     		bx	lr
 3485              		.cfi_endproc
 3486              	.LFE104:
 3487              		.size	TIM_OC4PreloadConfig, .-TIM_OC4PreloadConfig
 3488              		.align	1
 3489              		.global	TIM_OC1FastConfig
 3490              		.syntax unified
 3491              		.thumb
 3492              		.thumb_func
 3493              		.fpu softvfp
 3494              		.type	TIM_OC1FastConfig, %function
 3495              	TIM_OC1FastConfig:
 3496              	.LFB105:
1597:lib/src/stm32f10x_tim.c **** 
1598:lib/src/stm32f10x_tim.c **** /**
1599:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Output Compare 1 Fast feature.
1600:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select the TIM peripheral.
1601:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1602:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1603:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Enable: TIM output compare fast enable
1604:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Disable: TIM output compare fast disable
1605:lib/src/stm32f10x_tim.c ****   * @retval None
1606:lib/src/stm32f10x_tim.c ****   */
1607:lib/src/stm32f10x_tim.c **** void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1608:lib/src/stm32f10x_tim.c **** {
 3497              		.loc 1 1608 0
 3498              		.cfi_startproc
 3499              		@ args = 0, pretend = 0, frame = 16
 3500              		@ frame_needed = 1, uses_anonymous_args = 0
 3501              		@ link register save eliminated.
 3502 1088 80B4     		push	{r7}
 3503              		.cfi_def_cfa_offset 4
 3504              		.cfi_offset 7, -4
 3505 108a 85B0     		sub	sp, sp, #20
 3506              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccNus05k.s 			page 92


 3507 108c 00AF     		add	r7, sp, #0
 3508              		.cfi_def_cfa_register 7
 3509 108e 7860     		str	r0, [r7, #4]
 3510 1090 0B46     		mov	r3, r1
 3511 1092 7B80     		strh	r3, [r7, #2]	@ movhi
1609:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3512              		.loc 1 1609 0
 3513 1094 0023     		movs	r3, #0
 3514 1096 FB81     		strh	r3, [r7, #14]	@ movhi
1610:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1611:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1612:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1613:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
1614:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3515              		.loc 1 1614 0
 3516 1098 7B68     		ldr	r3, [r7, #4]
 3517 109a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3518 109c FB81     		strh	r3, [r7, #14]	@ movhi
1615:lib/src/stm32f10x_tim.c ****   /* Reset the OC1FE Bit */
1616:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 3519              		.loc 1 1616 0
 3520 109e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3521 10a0 23F00403 		bic	r3, r3, #4
 3522 10a4 FB81     		strh	r3, [r7, #14]	@ movhi
1617:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1618:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= TIM_OCFast;
 3523              		.loc 1 1618 0
 3524 10a6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3525 10a8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3526 10aa 1343     		orrs	r3, r3, r2
 3527 10ac FB81     		strh	r3, [r7, #14]	@ movhi
1619:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
1620:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3528              		.loc 1 1620 0
 3529 10ae 7B68     		ldr	r3, [r7, #4]
 3530 10b0 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3531 10b2 1A83     		strh	r2, [r3, #24]	@ movhi
1621:lib/src/stm32f10x_tim.c **** }
 3532              		.loc 1 1621 0
 3533 10b4 00BF     		nop
 3534 10b6 1437     		adds	r7, r7, #20
 3535              		.cfi_def_cfa_offset 4
 3536 10b8 BD46     		mov	sp, r7
 3537              		.cfi_def_cfa_register 13
 3538              		@ sp needed
 3539 10ba 80BC     		pop	{r7}
 3540              		.cfi_restore 7
 3541              		.cfi_def_cfa_offset 0
 3542 10bc 7047     		bx	lr
 3543              		.cfi_endproc
 3544              	.LFE105:
 3545              		.size	TIM_OC1FastConfig, .-TIM_OC1FastConfig
 3546              		.align	1
 3547              		.global	TIM_OC2FastConfig
 3548              		.syntax unified
 3549              		.thumb
 3550              		.thumb_func
ARM GAS  /tmp/ccNus05k.s 			page 93


 3551              		.fpu softvfp
 3552              		.type	TIM_OC2FastConfig, %function
 3553              	TIM_OC2FastConfig:
 3554              	.LFB106:
1622:lib/src/stm32f10x_tim.c **** 
1623:lib/src/stm32f10x_tim.c **** /**
1624:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Output Compare 2 Fast feature.
1625:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15 to select 
1626:lib/src/stm32f10x_tim.c ****   *         the TIM peripheral.
1627:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1628:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1629:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Enable: TIM output compare fast enable
1630:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Disable: TIM output compare fast disable
1631:lib/src/stm32f10x_tim.c ****   * @retval None
1632:lib/src/stm32f10x_tim.c ****   */
1633:lib/src/stm32f10x_tim.c **** void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1634:lib/src/stm32f10x_tim.c **** {
 3555              		.loc 1 1634 0
 3556              		.cfi_startproc
 3557              		@ args = 0, pretend = 0, frame = 16
 3558              		@ frame_needed = 1, uses_anonymous_args = 0
 3559              		@ link register save eliminated.
 3560 10be 80B4     		push	{r7}
 3561              		.cfi_def_cfa_offset 4
 3562              		.cfi_offset 7, -4
 3563 10c0 85B0     		sub	sp, sp, #20
 3564              		.cfi_def_cfa_offset 24
 3565 10c2 00AF     		add	r7, sp, #0
 3566              		.cfi_def_cfa_register 7
 3567 10c4 7860     		str	r0, [r7, #4]
 3568 10c6 0B46     		mov	r3, r1
 3569 10c8 7B80     		strh	r3, [r7, #2]	@ movhi
1635:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3570              		.loc 1 1635 0
 3571 10ca 0023     		movs	r3, #0
 3572 10cc FB81     		strh	r3, [r7, #14]	@ movhi
1636:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1637:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1638:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1639:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCMR1 register value */
1640:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3573              		.loc 1 1640 0
 3574 10ce 7B68     		ldr	r3, [r7, #4]
 3575 10d0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3576 10d2 FB81     		strh	r3, [r7, #14]	@ movhi
1641:lib/src/stm32f10x_tim.c ****   /* Reset the OC2FE Bit */
1642:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 3577              		.loc 1 1642 0
 3578 10d4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3579 10d6 23F48063 		bic	r3, r3, #1024
 3580 10da FB81     		strh	r3, [r7, #14]	@ movhi
1643:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1644:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 3581              		.loc 1 1644 0
 3582 10dc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3583 10de 1B02     		lsls	r3, r3, #8
 3584 10e0 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccNus05k.s 			page 94


 3585 10e2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3586 10e4 1343     		orrs	r3, r3, r2
 3587 10e6 FB81     		strh	r3, [r7, #14]	@ movhi
1645:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 */
1646:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3588              		.loc 1 1646 0
 3589 10e8 7B68     		ldr	r3, [r7, #4]
 3590 10ea FA89     		ldrh	r2, [r7, #14]	@ movhi
 3591 10ec 1A83     		strh	r2, [r3, #24]	@ movhi
1647:lib/src/stm32f10x_tim.c **** }
 3592              		.loc 1 1647 0
 3593 10ee 00BF     		nop
 3594 10f0 1437     		adds	r7, r7, #20
 3595              		.cfi_def_cfa_offset 4
 3596 10f2 BD46     		mov	sp, r7
 3597              		.cfi_def_cfa_register 13
 3598              		@ sp needed
 3599 10f4 80BC     		pop	{r7}
 3600              		.cfi_restore 7
 3601              		.cfi_def_cfa_offset 0
 3602 10f6 7047     		bx	lr
 3603              		.cfi_endproc
 3604              	.LFE106:
 3605              		.size	TIM_OC2FastConfig, .-TIM_OC2FastConfig
 3606              		.align	1
 3607              		.global	TIM_OC3FastConfig
 3608              		.syntax unified
 3609              		.thumb
 3610              		.thumb_func
 3611              		.fpu softvfp
 3612              		.type	TIM_OC3FastConfig, %function
 3613              	TIM_OC3FastConfig:
 3614              	.LFB107:
1648:lib/src/stm32f10x_tim.c **** 
1649:lib/src/stm32f10x_tim.c **** /**
1650:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Output Compare 3 Fast feature.
1651:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1652:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1653:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1654:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Enable: TIM output compare fast enable
1655:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Disable: TIM output compare fast disable
1656:lib/src/stm32f10x_tim.c ****   * @retval None
1657:lib/src/stm32f10x_tim.c ****   */
1658:lib/src/stm32f10x_tim.c **** void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1659:lib/src/stm32f10x_tim.c **** {
 3615              		.loc 1 1659 0
 3616              		.cfi_startproc
 3617              		@ args = 0, pretend = 0, frame = 16
 3618              		@ frame_needed = 1, uses_anonymous_args = 0
 3619              		@ link register save eliminated.
 3620 10f8 80B4     		push	{r7}
 3621              		.cfi_def_cfa_offset 4
 3622              		.cfi_offset 7, -4
 3623 10fa 85B0     		sub	sp, sp, #20
 3624              		.cfi_def_cfa_offset 24
 3625 10fc 00AF     		add	r7, sp, #0
 3626              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccNus05k.s 			page 95


 3627 10fe 7860     		str	r0, [r7, #4]
 3628 1100 0B46     		mov	r3, r1
 3629 1102 7B80     		strh	r3, [r7, #2]	@ movhi
1660:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3630              		.loc 1 1660 0
 3631 1104 0023     		movs	r3, #0
 3632 1106 FB81     		strh	r3, [r7, #14]	@ movhi
1661:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1662:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1663:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1664:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCMR2 register value */
1665:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3633              		.loc 1 1665 0
 3634 1108 7B68     		ldr	r3, [r7, #4]
 3635 110a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3636 110c FB81     		strh	r3, [r7, #14]	@ movhi
1666:lib/src/stm32f10x_tim.c ****   /* Reset the OC3FE Bit */
1667:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 3637              		.loc 1 1667 0
 3638 110e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3639 1110 23F00403 		bic	r3, r3, #4
 3640 1114 FB81     		strh	r3, [r7, #14]	@ movhi
1668:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1669:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= TIM_OCFast;
 3641              		.loc 1 1669 0
 3642 1116 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3643 1118 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3644 111a 1343     		orrs	r3, r3, r2
 3645 111c FB81     		strh	r3, [r7, #14]	@ movhi
1670:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 */
1671:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3646              		.loc 1 1671 0
 3647 111e 7B68     		ldr	r3, [r7, #4]
 3648 1120 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3649 1122 9A83     		strh	r2, [r3, #28]	@ movhi
1672:lib/src/stm32f10x_tim.c **** }
 3650              		.loc 1 1672 0
 3651 1124 00BF     		nop
 3652 1126 1437     		adds	r7, r7, #20
 3653              		.cfi_def_cfa_offset 4
 3654 1128 BD46     		mov	sp, r7
 3655              		.cfi_def_cfa_register 13
 3656              		@ sp needed
 3657 112a 80BC     		pop	{r7}
 3658              		.cfi_restore 7
 3659              		.cfi_def_cfa_offset 0
 3660 112c 7047     		bx	lr
 3661              		.cfi_endproc
 3662              	.LFE107:
 3663              		.size	TIM_OC3FastConfig, .-TIM_OC3FastConfig
 3664              		.align	1
 3665              		.global	TIM_OC4FastConfig
 3666              		.syntax unified
 3667              		.thumb
 3668              		.thumb_func
 3669              		.fpu softvfp
 3670              		.type	TIM_OC4FastConfig, %function
ARM GAS  /tmp/ccNus05k.s 			page 96


 3671              	TIM_OC4FastConfig:
 3672              	.LFB108:
1673:lib/src/stm32f10x_tim.c **** 
1674:lib/src/stm32f10x_tim.c **** /**
1675:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Output Compare 4 Fast feature.
1676:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1677:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCFast: new state of the Output Compare Fast Enable Bit.
1678:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1679:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Enable: TIM output compare fast enable
1680:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCFast_Disable: TIM output compare fast disable
1681:lib/src/stm32f10x_tim.c ****   * @retval None
1682:lib/src/stm32f10x_tim.c ****   */
1683:lib/src/stm32f10x_tim.c **** void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
1684:lib/src/stm32f10x_tim.c **** {
 3673              		.loc 1 1684 0
 3674              		.cfi_startproc
 3675              		@ args = 0, pretend = 0, frame = 16
 3676              		@ frame_needed = 1, uses_anonymous_args = 0
 3677              		@ link register save eliminated.
 3678 112e 80B4     		push	{r7}
 3679              		.cfi_def_cfa_offset 4
 3680              		.cfi_offset 7, -4
 3681 1130 85B0     		sub	sp, sp, #20
 3682              		.cfi_def_cfa_offset 24
 3683 1132 00AF     		add	r7, sp, #0
 3684              		.cfi_def_cfa_register 7
 3685 1134 7860     		str	r0, [r7, #4]
 3686 1136 0B46     		mov	r3, r1
 3687 1138 7B80     		strh	r3, [r7, #2]	@ movhi
1685:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3688              		.loc 1 1685 0
 3689 113a 0023     		movs	r3, #0
 3690 113c FB81     		strh	r3, [r7, #14]	@ movhi
1686:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1687:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1688:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
1689:lib/src/stm32f10x_tim.c ****   /* Get the TIMx CCMR2 register value */
1690:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3691              		.loc 1 1690 0
 3692 113e 7B68     		ldr	r3, [r7, #4]
 3693 1140 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3694 1142 FB81     		strh	r3, [r7, #14]	@ movhi
1691:lib/src/stm32f10x_tim.c ****   /* Reset the OC4FE Bit */
1692:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 3695              		.loc 1 1692 0
 3696 1144 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3697 1146 23F48063 		bic	r3, r3, #1024
 3698 114a FB81     		strh	r3, [r7, #14]	@ movhi
1693:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Fast Bit */
1694:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 3699              		.loc 1 1694 0
 3700 114c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3701 114e 1B02     		lsls	r3, r3, #8
 3702 1150 9AB2     		uxth	r2, r3
 3703 1152 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3704 1154 1343     		orrs	r3, r3, r2
 3705 1156 FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 97


1695:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 */
1696:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3706              		.loc 1 1696 0
 3707 1158 7B68     		ldr	r3, [r7, #4]
 3708 115a FA89     		ldrh	r2, [r7, #14]	@ movhi
 3709 115c 9A83     		strh	r2, [r3, #28]	@ movhi
1697:lib/src/stm32f10x_tim.c **** }
 3710              		.loc 1 1697 0
 3711 115e 00BF     		nop
 3712 1160 1437     		adds	r7, r7, #20
 3713              		.cfi_def_cfa_offset 4
 3714 1162 BD46     		mov	sp, r7
 3715              		.cfi_def_cfa_register 13
 3716              		@ sp needed
 3717 1164 80BC     		pop	{r7}
 3718              		.cfi_restore 7
 3719              		.cfi_def_cfa_offset 0
 3720 1166 7047     		bx	lr
 3721              		.cfi_endproc
 3722              	.LFE108:
 3723              		.size	TIM_OC4FastConfig, .-TIM_OC4FastConfig
 3724              		.align	1
 3725              		.global	TIM_ClearOC1Ref
 3726              		.syntax unified
 3727              		.thumb
 3728              		.thumb_func
 3729              		.fpu softvfp
 3730              		.type	TIM_ClearOC1Ref, %function
 3731              	TIM_ClearOC1Ref:
 3732              	.LFB109:
1698:lib/src/stm32f10x_tim.c **** 
1699:lib/src/stm32f10x_tim.c **** /**
1700:lib/src/stm32f10x_tim.c ****   * @brief  Clears or safeguards the OCREF1 signal on an external event
1701:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1702:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1703:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1704:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Enable: TIM Output clear enable
1705:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Disable: TIM Output clear disable
1706:lib/src/stm32f10x_tim.c ****   * @retval None
1707:lib/src/stm32f10x_tim.c ****   */
1708:lib/src/stm32f10x_tim.c **** void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1709:lib/src/stm32f10x_tim.c **** {
 3733              		.loc 1 1709 0
 3734              		.cfi_startproc
 3735              		@ args = 0, pretend = 0, frame = 16
 3736              		@ frame_needed = 1, uses_anonymous_args = 0
 3737              		@ link register save eliminated.
 3738 1168 80B4     		push	{r7}
 3739              		.cfi_def_cfa_offset 4
 3740              		.cfi_offset 7, -4
 3741 116a 85B0     		sub	sp, sp, #20
 3742              		.cfi_def_cfa_offset 24
 3743 116c 00AF     		add	r7, sp, #0
 3744              		.cfi_def_cfa_register 7
 3745 116e 7860     		str	r0, [r7, #4]
 3746 1170 0B46     		mov	r3, r1
 3747 1172 7B80     		strh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 98


1710:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3748              		.loc 1 1710 0
 3749 1174 0023     		movs	r3, #0
 3750 1176 FB81     		strh	r3, [r7, #14]	@ movhi
1711:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1712:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1713:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1714:lib/src/stm32f10x_tim.c **** 
1715:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3751              		.loc 1 1715 0
 3752 1178 7B68     		ldr	r3, [r7, #4]
 3753 117a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3754 117c FB81     		strh	r3, [r7, #14]	@ movhi
1716:lib/src/stm32f10x_tim.c **** 
1717:lib/src/stm32f10x_tim.c ****   /* Reset the OC1CE Bit */
1718:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 3755              		.loc 1 1718 0
 3756 117e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3757 1180 23F08003 		bic	r3, r3, #128
 3758 1184 FB81     		strh	r3, [r7, #14]	@ movhi
1719:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1720:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= TIM_OCClear;
 3759              		.loc 1 1720 0
 3760 1186 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3761 1188 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3762 118a 1343     		orrs	r3, r3, r2
 3763 118c FB81     		strh	r3, [r7, #14]	@ movhi
1721:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1722:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3764              		.loc 1 1722 0
 3765 118e 7B68     		ldr	r3, [r7, #4]
 3766 1190 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3767 1192 1A83     		strh	r2, [r3, #24]	@ movhi
1723:lib/src/stm32f10x_tim.c **** }
 3768              		.loc 1 1723 0
 3769 1194 00BF     		nop
 3770 1196 1437     		adds	r7, r7, #20
 3771              		.cfi_def_cfa_offset 4
 3772 1198 BD46     		mov	sp, r7
 3773              		.cfi_def_cfa_register 13
 3774              		@ sp needed
 3775 119a 80BC     		pop	{r7}
 3776              		.cfi_restore 7
 3777              		.cfi_def_cfa_offset 0
 3778 119c 7047     		bx	lr
 3779              		.cfi_endproc
 3780              	.LFE109:
 3781              		.size	TIM_ClearOC1Ref, .-TIM_ClearOC1Ref
 3782              		.align	1
 3783              		.global	TIM_ClearOC2Ref
 3784              		.syntax unified
 3785              		.thumb
 3786              		.thumb_func
 3787              		.fpu softvfp
 3788              		.type	TIM_ClearOC2Ref, %function
 3789              	TIM_ClearOC2Ref:
 3790              	.LFB110:
ARM GAS  /tmp/ccNus05k.s 			page 99


1724:lib/src/stm32f10x_tim.c **** 
1725:lib/src/stm32f10x_tim.c **** /**
1726:lib/src/stm32f10x_tim.c ****   * @brief  Clears or safeguards the OCREF2 signal on an external event
1727:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1728:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1729:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1730:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Enable: TIM Output clear enable
1731:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Disable: TIM Output clear disable
1732:lib/src/stm32f10x_tim.c ****   * @retval None
1733:lib/src/stm32f10x_tim.c ****   */
1734:lib/src/stm32f10x_tim.c **** void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1735:lib/src/stm32f10x_tim.c **** {
 3791              		.loc 1 1735 0
 3792              		.cfi_startproc
 3793              		@ args = 0, pretend = 0, frame = 16
 3794              		@ frame_needed = 1, uses_anonymous_args = 0
 3795              		@ link register save eliminated.
 3796 119e 80B4     		push	{r7}
 3797              		.cfi_def_cfa_offset 4
 3798              		.cfi_offset 7, -4
 3799 11a0 85B0     		sub	sp, sp, #20
 3800              		.cfi_def_cfa_offset 24
 3801 11a2 00AF     		add	r7, sp, #0
 3802              		.cfi_def_cfa_register 7
 3803 11a4 7860     		str	r0, [r7, #4]
 3804 11a6 0B46     		mov	r3, r1
 3805 11a8 7B80     		strh	r3, [r7, #2]	@ movhi
1736:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0;
 3806              		.loc 1 1736 0
 3807 11aa 0023     		movs	r3, #0
 3808 11ac FB81     		strh	r3, [r7, #14]	@ movhi
1737:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1738:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1739:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1740:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 3809              		.loc 1 1740 0
 3810 11ae 7B68     		ldr	r3, [r7, #4]
 3811 11b0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 3812 11b2 FB81     		strh	r3, [r7, #14]	@ movhi
1741:lib/src/stm32f10x_tim.c ****   /* Reset the OC2CE Bit */
1742:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 3813              		.loc 1 1742 0
 3814 11b4 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3815 11b6 C3F30E03 		ubfx	r3, r3, #0, #15
 3816 11ba FB81     		strh	r3, [r7, #14]	@ movhi
1743:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1744:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 3817              		.loc 1 1744 0
 3818 11bc 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3819 11be 1B02     		lsls	r3, r3, #8
 3820 11c0 9AB2     		uxth	r2, r3
 3821 11c2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3822 11c4 1343     		orrs	r3, r3, r2
 3823 11c6 FB81     		strh	r3, [r7, #14]	@ movhi
1745:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 register */
1746:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 3824              		.loc 1 1746 0
ARM GAS  /tmp/ccNus05k.s 			page 100


 3825 11c8 7B68     		ldr	r3, [r7, #4]
 3826 11ca FA89     		ldrh	r2, [r7, #14]	@ movhi
 3827 11cc 1A83     		strh	r2, [r3, #24]	@ movhi
1747:lib/src/stm32f10x_tim.c **** }
 3828              		.loc 1 1747 0
 3829 11ce 00BF     		nop
 3830 11d0 1437     		adds	r7, r7, #20
 3831              		.cfi_def_cfa_offset 4
 3832 11d2 BD46     		mov	sp, r7
 3833              		.cfi_def_cfa_register 13
 3834              		@ sp needed
 3835 11d4 80BC     		pop	{r7}
 3836              		.cfi_restore 7
 3837              		.cfi_def_cfa_offset 0
 3838 11d6 7047     		bx	lr
 3839              		.cfi_endproc
 3840              	.LFE110:
 3841              		.size	TIM_ClearOC2Ref, .-TIM_ClearOC2Ref
 3842              		.align	1
 3843              		.global	TIM_ClearOC3Ref
 3844              		.syntax unified
 3845              		.thumb
 3846              		.thumb_func
 3847              		.fpu softvfp
 3848              		.type	TIM_ClearOC3Ref, %function
 3849              	TIM_ClearOC3Ref:
 3850              	.LFB111:
1748:lib/src/stm32f10x_tim.c **** 
1749:lib/src/stm32f10x_tim.c **** /**
1750:lib/src/stm32f10x_tim.c ****   * @brief  Clears or safeguards the OCREF3 signal on an external event
1751:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1752:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
1753:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1754:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Enable: TIM Output clear enable
1755:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Disable: TIM Output clear disable
1756:lib/src/stm32f10x_tim.c ****   * @retval None
1757:lib/src/stm32f10x_tim.c ****   */
1758:lib/src/stm32f10x_tim.c **** void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1759:lib/src/stm32f10x_tim.c **** {
 3851              		.loc 1 1759 0
 3852              		.cfi_startproc
 3853              		@ args = 0, pretend = 0, frame = 16
 3854              		@ frame_needed = 1, uses_anonymous_args = 0
 3855              		@ link register save eliminated.
 3856 11d8 80B4     		push	{r7}
 3857              		.cfi_def_cfa_offset 4
 3858              		.cfi_offset 7, -4
 3859 11da 85B0     		sub	sp, sp, #20
 3860              		.cfi_def_cfa_offset 24
 3861 11dc 00AF     		add	r7, sp, #0
 3862              		.cfi_def_cfa_register 7
 3863 11de 7860     		str	r0, [r7, #4]
 3864 11e0 0B46     		mov	r3, r1
 3865 11e2 7B80     		strh	r3, [r7, #2]	@ movhi
1760:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3866              		.loc 1 1760 0
 3867 11e4 0023     		movs	r3, #0
ARM GAS  /tmp/ccNus05k.s 			page 101


 3868 11e6 FB81     		strh	r3, [r7, #14]	@ movhi
1761:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1762:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1763:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1764:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3869              		.loc 1 1764 0
 3870 11e8 7B68     		ldr	r3, [r7, #4]
 3871 11ea 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3872 11ec FB81     		strh	r3, [r7, #14]	@ movhi
1765:lib/src/stm32f10x_tim.c ****   /* Reset the OC3CE Bit */
1766:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 3873              		.loc 1 1766 0
 3874 11ee FB89     		ldrh	r3, [r7, #14]	@ movhi
 3875 11f0 23F08003 		bic	r3, r3, #128
 3876 11f4 FB81     		strh	r3, [r7, #14]	@ movhi
1767:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1768:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= TIM_OCClear;
 3877              		.loc 1 1768 0
 3878 11f6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3879 11f8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3880 11fa 1343     		orrs	r3, r3, r2
 3881 11fc FB81     		strh	r3, [r7, #14]	@ movhi
1769:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1770:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3882              		.loc 1 1770 0
 3883 11fe 7B68     		ldr	r3, [r7, #4]
 3884 1200 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3885 1202 9A83     		strh	r2, [r3, #28]	@ movhi
1771:lib/src/stm32f10x_tim.c **** }
 3886              		.loc 1 1771 0
 3887 1204 00BF     		nop
 3888 1206 1437     		adds	r7, r7, #20
 3889              		.cfi_def_cfa_offset 4
 3890 1208 BD46     		mov	sp, r7
 3891              		.cfi_def_cfa_register 13
 3892              		@ sp needed
 3893 120a 80BC     		pop	{r7}
 3894              		.cfi_restore 7
 3895              		.cfi_def_cfa_offset 0
 3896 120c 7047     		bx	lr
 3897              		.cfi_endproc
 3898              	.LFE111:
 3899              		.size	TIM_ClearOC3Ref, .-TIM_ClearOC3Ref
 3900              		.align	1
 3901              		.global	TIM_ClearOC4Ref
 3902              		.syntax unified
 3903              		.thumb
 3904              		.thumb_func
 3905              		.fpu softvfp
 3906              		.type	TIM_ClearOC4Ref, %function
 3907              	TIM_ClearOC4Ref:
 3908              	.LFB112:
1772:lib/src/stm32f10x_tim.c **** 
1773:lib/src/stm32f10x_tim.c **** /**
1774:lib/src/stm32f10x_tim.c ****   * @brief  Clears or safeguards the OCREF4 signal on an external event
1775:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1776:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCClear: new state of the Output Compare Clear Enable Bit.
ARM GAS  /tmp/ccNus05k.s 			page 102


1777:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1778:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Enable: TIM Output clear enable
1779:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCClear_Disable: TIM Output clear disable
1780:lib/src/stm32f10x_tim.c ****   * @retval None
1781:lib/src/stm32f10x_tim.c ****   */
1782:lib/src/stm32f10x_tim.c **** void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
1783:lib/src/stm32f10x_tim.c **** {
 3909              		.loc 1 1783 0
 3910              		.cfi_startproc
 3911              		@ args = 0, pretend = 0, frame = 16
 3912              		@ frame_needed = 1, uses_anonymous_args = 0
 3913              		@ link register save eliminated.
 3914 120e 80B4     		push	{r7}
 3915              		.cfi_def_cfa_offset 4
 3916              		.cfi_offset 7, -4
 3917 1210 85B0     		sub	sp, sp, #20
 3918              		.cfi_def_cfa_offset 24
 3919 1212 00AF     		add	r7, sp, #0
 3920              		.cfi_def_cfa_register 7
 3921 1214 7860     		str	r0, [r7, #4]
 3922 1216 0B46     		mov	r3, r1
 3923 1218 7B80     		strh	r3, [r7, #2]	@ movhi
1784:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0;
 3924              		.loc 1 1784 0
 3925 121a 0023     		movs	r3, #0
 3926 121c FB81     		strh	r3, [r7, #14]	@ movhi
1785:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1786:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1787:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
1788:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 3927              		.loc 1 1788 0
 3928 121e 7B68     		ldr	r3, [r7, #4]
 3929 1220 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 3930 1222 FB81     		strh	r3, [r7, #14]	@ movhi
1789:lib/src/stm32f10x_tim.c ****   /* Reset the OC4CE Bit */
1790:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 3931              		.loc 1 1790 0
 3932 1224 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3933 1226 C3F30E03 		ubfx	r3, r3, #0, #15
 3934 122a FB81     		strh	r3, [r7, #14]	@ movhi
1791:lib/src/stm32f10x_tim.c ****   /* Enable or Disable the Output Compare Clear Bit */
1792:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 3935              		.loc 1 1792 0
 3936 122c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3937 122e 1B02     		lsls	r3, r3, #8
 3938 1230 9AB2     		uxth	r2, r3
 3939 1232 FB89     		ldrh	r3, [r7, #14]	@ movhi
 3940 1234 1343     		orrs	r3, r3, r2
 3941 1236 FB81     		strh	r3, [r7, #14]	@ movhi
1793:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 register */
1794:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 3942              		.loc 1 1794 0
 3943 1238 7B68     		ldr	r3, [r7, #4]
 3944 123a FA89     		ldrh	r2, [r7, #14]	@ movhi
 3945 123c 9A83     		strh	r2, [r3, #28]	@ movhi
1795:lib/src/stm32f10x_tim.c **** }
 3946              		.loc 1 1795 0
ARM GAS  /tmp/ccNus05k.s 			page 103


 3947 123e 00BF     		nop
 3948 1240 1437     		adds	r7, r7, #20
 3949              		.cfi_def_cfa_offset 4
 3950 1242 BD46     		mov	sp, r7
 3951              		.cfi_def_cfa_register 13
 3952              		@ sp needed
 3953 1244 80BC     		pop	{r7}
 3954              		.cfi_restore 7
 3955              		.cfi_def_cfa_offset 0
 3956 1246 7047     		bx	lr
 3957              		.cfi_endproc
 3958              	.LFE112:
 3959              		.size	TIM_ClearOC4Ref, .-TIM_ClearOC4Ref
 3960              		.align	1
 3961              		.global	TIM_OC1PolarityConfig
 3962              		.syntax unified
 3963              		.thumb
 3964              		.thumb_func
 3965              		.fpu softvfp
 3966              		.type	TIM_OC1PolarityConfig, %function
 3967              	TIM_OC1PolarityConfig:
 3968              	.LFB113:
1796:lib/src/stm32f10x_tim.c **** 
1797:lib/src/stm32f10x_tim.c **** /**
1798:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx channel 1 polarity.
1799:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
1800:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCPolarity: specifies the OC1 Polarity
1801:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1802:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_High: Output Compare active high
1803:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_Low: Output Compare active low
1804:lib/src/stm32f10x_tim.c ****   * @retval None
1805:lib/src/stm32f10x_tim.c ****   */
1806:lib/src/stm32f10x_tim.c **** void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1807:lib/src/stm32f10x_tim.c **** {
 3969              		.loc 1 1807 0
 3970              		.cfi_startproc
 3971              		@ args = 0, pretend = 0, frame = 16
 3972              		@ frame_needed = 1, uses_anonymous_args = 0
 3973              		@ link register save eliminated.
 3974 1248 80B4     		push	{r7}
 3975              		.cfi_def_cfa_offset 4
 3976              		.cfi_offset 7, -4
 3977 124a 85B0     		sub	sp, sp, #20
 3978              		.cfi_def_cfa_offset 24
 3979 124c 00AF     		add	r7, sp, #0
 3980              		.cfi_def_cfa_register 7
 3981 124e 7860     		str	r0, [r7, #4]
 3982 1250 0B46     		mov	r3, r1
 3983 1252 7B80     		strh	r3, [r7, #2]	@ movhi
1808:lib/src/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 3984              		.loc 1 1808 0
 3985 1254 0023     		movs	r3, #0
 3986 1256 FB81     		strh	r3, [r7, #14]	@ movhi
1809:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1810:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1811:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1812:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
ARM GAS  /tmp/ccNus05k.s 			page 104


 3987              		.loc 1 1812 0
 3988 1258 7B68     		ldr	r3, [r7, #4]
 3989 125a 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 3990 125c FB81     		strh	r3, [r7, #14]	@ movhi
1813:lib/src/stm32f10x_tim.c ****   /* Set or Reset the CC1P Bit */
1814:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 3991              		.loc 1 1814 0
 3992 125e FB89     		ldrh	r3, [r7, #14]	@ movhi
 3993 1260 23F00203 		bic	r3, r3, #2
 3994 1264 FB81     		strh	r3, [r7, #14]	@ movhi
1815:lib/src/stm32f10x_tim.c ****   tmpccer |= TIM_OCPolarity;
 3995              		.loc 1 1815 0
 3996 1266 FA89     		ldrh	r2, [r7, #14]	@ movhi
 3997 1268 7B88     		ldrh	r3, [r7, #2]	@ movhi
 3998 126a 1343     		orrs	r3, r3, r2
 3999 126c FB81     		strh	r3, [r7, #14]	@ movhi
1816:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1817:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4000              		.loc 1 1817 0
 4001 126e 7B68     		ldr	r3, [r7, #4]
 4002 1270 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4003 1272 1A84     		strh	r2, [r3, #32]	@ movhi
1818:lib/src/stm32f10x_tim.c **** }
 4004              		.loc 1 1818 0
 4005 1274 00BF     		nop
 4006 1276 1437     		adds	r7, r7, #20
 4007              		.cfi_def_cfa_offset 4
 4008 1278 BD46     		mov	sp, r7
 4009              		.cfi_def_cfa_register 13
 4010              		@ sp needed
 4011 127a 80BC     		pop	{r7}
 4012              		.cfi_restore 7
 4013              		.cfi_def_cfa_offset 0
 4014 127c 7047     		bx	lr
 4015              		.cfi_endproc
 4016              	.LFE113:
 4017              		.size	TIM_OC1PolarityConfig, .-TIM_OC1PolarityConfig
 4018              		.align	1
 4019              		.global	TIM_OC1NPolarityConfig
 4020              		.syntax unified
 4021              		.thumb
 4022              		.thumb_func
 4023              		.fpu softvfp
 4024              		.type	TIM_OC1NPolarityConfig, %function
 4025              	TIM_OC1NPolarityConfig:
 4026              	.LFB114:
1819:lib/src/stm32f10x_tim.c **** 
1820:lib/src/stm32f10x_tim.c **** /**
1821:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Channel 1N polarity.
1822:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 8, 15, 16 or 17 to select the TIM peripheral.
1823:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC1N Polarity
1824:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1825:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_High: Output Compare active high
1826:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_Low: Output Compare active low
1827:lib/src/stm32f10x_tim.c ****   * @retval None
1828:lib/src/stm32f10x_tim.c ****   */
1829:lib/src/stm32f10x_tim.c **** void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
ARM GAS  /tmp/ccNus05k.s 			page 105


1830:lib/src/stm32f10x_tim.c **** {
 4027              		.loc 1 1830 0
 4028              		.cfi_startproc
 4029              		@ args = 0, pretend = 0, frame = 16
 4030              		@ frame_needed = 1, uses_anonymous_args = 0
 4031              		@ link register save eliminated.
 4032 127e 80B4     		push	{r7}
 4033              		.cfi_def_cfa_offset 4
 4034              		.cfi_offset 7, -4
 4035 1280 85B0     		sub	sp, sp, #20
 4036              		.cfi_def_cfa_offset 24
 4037 1282 00AF     		add	r7, sp, #0
 4038              		.cfi_def_cfa_register 7
 4039 1284 7860     		str	r0, [r7, #4]
 4040 1286 0B46     		mov	r3, r1
 4041 1288 7B80     		strh	r3, [r7, #2]	@ movhi
1831:lib/src/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4042              		.loc 1 1831 0
 4043 128a 0023     		movs	r3, #0
 4044 128c FB81     		strh	r3, [r7, #14]	@ movhi
1832:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1833:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
1834:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1835:lib/src/stm32f10x_tim.c ****    
1836:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4045              		.loc 1 1836 0
 4046 128e 7B68     		ldr	r3, [r7, #4]
 4047 1290 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4048 1292 FB81     		strh	r3, [r7, #14]	@ movhi
1837:lib/src/stm32f10x_tim.c ****   /* Set or Reset the CC1NP Bit */
1838:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 4049              		.loc 1 1838 0
 4050 1294 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4051 1296 23F00803 		bic	r3, r3, #8
 4052 129a FB81     		strh	r3, [r7, #14]	@ movhi
1839:lib/src/stm32f10x_tim.c ****   tmpccer |= TIM_OCNPolarity;
 4053              		.loc 1 1839 0
 4054 129c FA89     		ldrh	r2, [r7, #14]	@ movhi
 4055 129e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4056 12a0 1343     		orrs	r3, r3, r2
 4057 12a2 FB81     		strh	r3, [r7, #14]	@ movhi
1840:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1841:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4058              		.loc 1 1841 0
 4059 12a4 7B68     		ldr	r3, [r7, #4]
 4060 12a6 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4061 12a8 1A84     		strh	r2, [r3, #32]	@ movhi
1842:lib/src/stm32f10x_tim.c **** }
 4062              		.loc 1 1842 0
 4063 12aa 00BF     		nop
 4064 12ac 1437     		adds	r7, r7, #20
 4065              		.cfi_def_cfa_offset 4
 4066 12ae BD46     		mov	sp, r7
 4067              		.cfi_def_cfa_register 13
 4068              		@ sp needed
 4069 12b0 80BC     		pop	{r7}
 4070              		.cfi_restore 7
ARM GAS  /tmp/ccNus05k.s 			page 106


 4071              		.cfi_def_cfa_offset 0
 4072 12b2 7047     		bx	lr
 4073              		.cfi_endproc
 4074              	.LFE114:
 4075              		.size	TIM_OC1NPolarityConfig, .-TIM_OC1NPolarityConfig
 4076              		.align	1
 4077              		.global	TIM_OC2PolarityConfig
 4078              		.syntax unified
 4079              		.thumb
 4080              		.thumb_func
 4081              		.fpu softvfp
 4082              		.type	TIM_OC2PolarityConfig, %function
 4083              	TIM_OC2PolarityConfig:
 4084              	.LFB115:
1843:lib/src/stm32f10x_tim.c **** 
1844:lib/src/stm32f10x_tim.c **** /**
1845:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx channel 2 polarity.
1846:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
1847:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCPolarity: specifies the OC2 Polarity
1848:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1849:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_High: Output Compare active high
1850:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_Low: Output Compare active low
1851:lib/src/stm32f10x_tim.c ****   * @retval None
1852:lib/src/stm32f10x_tim.c ****   */
1853:lib/src/stm32f10x_tim.c **** void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1854:lib/src/stm32f10x_tim.c **** {
 4085              		.loc 1 1854 0
 4086              		.cfi_startproc
 4087              		@ args = 0, pretend = 0, frame = 16
 4088              		@ frame_needed = 1, uses_anonymous_args = 0
 4089              		@ link register save eliminated.
 4090 12b4 80B4     		push	{r7}
 4091              		.cfi_def_cfa_offset 4
 4092              		.cfi_offset 7, -4
 4093 12b6 85B0     		sub	sp, sp, #20
 4094              		.cfi_def_cfa_offset 24
 4095 12b8 00AF     		add	r7, sp, #0
 4096              		.cfi_def_cfa_register 7
 4097 12ba 7860     		str	r0, [r7, #4]
 4098 12bc 0B46     		mov	r3, r1
 4099 12be 7B80     		strh	r3, [r7, #2]	@ movhi
1855:lib/src/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4100              		.loc 1 1855 0
 4101 12c0 0023     		movs	r3, #0
 4102 12c2 FB81     		strh	r3, [r7, #14]	@ movhi
1856:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1857:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
1858:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1859:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4103              		.loc 1 1859 0
 4104 12c4 7B68     		ldr	r3, [r7, #4]
 4105 12c6 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4106 12c8 FB81     		strh	r3, [r7, #14]	@ movhi
1860:lib/src/stm32f10x_tim.c ****   /* Set or Reset the CC2P Bit */
1861:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 4107              		.loc 1 1861 0
 4108 12ca FB89     		ldrh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 107


 4109 12cc 23F02003 		bic	r3, r3, #32
 4110 12d0 FB81     		strh	r3, [r7, #14]	@ movhi
1862:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 4111              		.loc 1 1862 0
 4112 12d2 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4113 12d4 1B01     		lsls	r3, r3, #4
 4114 12d6 9AB2     		uxth	r2, r3
 4115 12d8 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4116 12da 1343     		orrs	r3, r3, r2
 4117 12dc FB81     		strh	r3, [r7, #14]	@ movhi
1863:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1864:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4118              		.loc 1 1864 0
 4119 12de 7B68     		ldr	r3, [r7, #4]
 4120 12e0 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4121 12e2 1A84     		strh	r2, [r3, #32]	@ movhi
1865:lib/src/stm32f10x_tim.c **** }
 4122              		.loc 1 1865 0
 4123 12e4 00BF     		nop
 4124 12e6 1437     		adds	r7, r7, #20
 4125              		.cfi_def_cfa_offset 4
 4126 12e8 BD46     		mov	sp, r7
 4127              		.cfi_def_cfa_register 13
 4128              		@ sp needed
 4129 12ea 80BC     		pop	{r7}
 4130              		.cfi_restore 7
 4131              		.cfi_def_cfa_offset 0
 4132 12ec 7047     		bx	lr
 4133              		.cfi_endproc
 4134              	.LFE115:
 4135              		.size	TIM_OC2PolarityConfig, .-TIM_OC2PolarityConfig
 4136              		.align	1
 4137              		.global	TIM_OC2NPolarityConfig
 4138              		.syntax unified
 4139              		.thumb
 4140              		.thumb_func
 4141              		.fpu softvfp
 4142              		.type	TIM_OC2NPolarityConfig, %function
 4143              	TIM_OC2NPolarityConfig:
 4144              	.LFB116:
1866:lib/src/stm32f10x_tim.c **** 
1867:lib/src/stm32f10x_tim.c **** /**
1868:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Channel 2N polarity.
1869:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1870:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC2N Polarity
1871:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1872:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_High: Output Compare active high
1873:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_Low: Output Compare active low
1874:lib/src/stm32f10x_tim.c ****   * @retval None
1875:lib/src/stm32f10x_tim.c ****   */
1876:lib/src/stm32f10x_tim.c **** void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1877:lib/src/stm32f10x_tim.c **** {
 4145              		.loc 1 1877 0
 4146              		.cfi_startproc
 4147              		@ args = 0, pretend = 0, frame = 16
 4148              		@ frame_needed = 1, uses_anonymous_args = 0
 4149              		@ link register save eliminated.
ARM GAS  /tmp/ccNus05k.s 			page 108


 4150 12ee 80B4     		push	{r7}
 4151              		.cfi_def_cfa_offset 4
 4152              		.cfi_offset 7, -4
 4153 12f0 85B0     		sub	sp, sp, #20
 4154              		.cfi_def_cfa_offset 24
 4155 12f2 00AF     		add	r7, sp, #0
 4156              		.cfi_def_cfa_register 7
 4157 12f4 7860     		str	r0, [r7, #4]
 4158 12f6 0B46     		mov	r3, r1
 4159 12f8 7B80     		strh	r3, [r7, #2]	@ movhi
1878:lib/src/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4160              		.loc 1 1878 0
 4161 12fa 0023     		movs	r3, #0
 4162 12fc FB81     		strh	r3, [r7, #14]	@ movhi
1879:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1880:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1881:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1882:lib/src/stm32f10x_tim.c ****   
1883:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4163              		.loc 1 1883 0
 4164 12fe 7B68     		ldr	r3, [r7, #4]
 4165 1300 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4166 1302 FB81     		strh	r3, [r7, #14]	@ movhi
1884:lib/src/stm32f10x_tim.c ****   /* Set or Reset the CC2NP Bit */
1885:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 4167              		.loc 1 1885 0
 4168 1304 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4169 1306 23F08003 		bic	r3, r3, #128
 4170 130a FB81     		strh	r3, [r7, #14]	@ movhi
1886:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 4171              		.loc 1 1886 0
 4172 130c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4173 130e 1B01     		lsls	r3, r3, #4
 4174 1310 9AB2     		uxth	r2, r3
 4175 1312 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4176 1314 1343     		orrs	r3, r3, r2
 4177 1316 FB81     		strh	r3, [r7, #14]	@ movhi
1887:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1888:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4178              		.loc 1 1888 0
 4179 1318 7B68     		ldr	r3, [r7, #4]
 4180 131a FA89     		ldrh	r2, [r7, #14]	@ movhi
 4181 131c 1A84     		strh	r2, [r3, #32]	@ movhi
1889:lib/src/stm32f10x_tim.c **** }
 4182              		.loc 1 1889 0
 4183 131e 00BF     		nop
 4184 1320 1437     		adds	r7, r7, #20
 4185              		.cfi_def_cfa_offset 4
 4186 1322 BD46     		mov	sp, r7
 4187              		.cfi_def_cfa_register 13
 4188              		@ sp needed
 4189 1324 80BC     		pop	{r7}
 4190              		.cfi_restore 7
 4191              		.cfi_def_cfa_offset 0
 4192 1326 7047     		bx	lr
 4193              		.cfi_endproc
 4194              	.LFE116:
ARM GAS  /tmp/ccNus05k.s 			page 109


 4195              		.size	TIM_OC2NPolarityConfig, .-TIM_OC2NPolarityConfig
 4196              		.align	1
 4197              		.global	TIM_OC3PolarityConfig
 4198              		.syntax unified
 4199              		.thumb
 4200              		.thumb_func
 4201              		.fpu softvfp
 4202              		.type	TIM_OC3PolarityConfig, %function
 4203              	TIM_OC3PolarityConfig:
 4204              	.LFB117:
1890:lib/src/stm32f10x_tim.c **** 
1891:lib/src/stm32f10x_tim.c **** /**
1892:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx channel 3 polarity.
1893:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1894:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCPolarity: specifies the OC3 Polarity
1895:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1896:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_High: Output Compare active high
1897:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_Low: Output Compare active low
1898:lib/src/stm32f10x_tim.c ****   * @retval None
1899:lib/src/stm32f10x_tim.c ****   */
1900:lib/src/stm32f10x_tim.c **** void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1901:lib/src/stm32f10x_tim.c **** {
 4205              		.loc 1 1901 0
 4206              		.cfi_startproc
 4207              		@ args = 0, pretend = 0, frame = 16
 4208              		@ frame_needed = 1, uses_anonymous_args = 0
 4209              		@ link register save eliminated.
 4210 1328 80B4     		push	{r7}
 4211              		.cfi_def_cfa_offset 4
 4212              		.cfi_offset 7, -4
 4213 132a 85B0     		sub	sp, sp, #20
 4214              		.cfi_def_cfa_offset 24
 4215 132c 00AF     		add	r7, sp, #0
 4216              		.cfi_def_cfa_register 7
 4217 132e 7860     		str	r0, [r7, #4]
 4218 1330 0B46     		mov	r3, r1
 4219 1332 7B80     		strh	r3, [r7, #2]	@ movhi
1902:lib/src/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4220              		.loc 1 1902 0
 4221 1334 0023     		movs	r3, #0
 4222 1336 FB81     		strh	r3, [r7, #14]	@ movhi
1903:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1904:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1905:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1906:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4223              		.loc 1 1906 0
 4224 1338 7B68     		ldr	r3, [r7, #4]
 4225 133a 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4226 133c FB81     		strh	r3, [r7, #14]	@ movhi
1907:lib/src/stm32f10x_tim.c ****   /* Set or Reset the CC3P Bit */
1908:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 4227              		.loc 1 1908 0
 4228 133e FB89     		ldrh	r3, [r7, #14]	@ movhi
 4229 1340 23F40073 		bic	r3, r3, #512
 4230 1344 FB81     		strh	r3, [r7, #14]	@ movhi
1909:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 4231              		.loc 1 1909 0
ARM GAS  /tmp/ccNus05k.s 			page 110


 4232 1346 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4233 1348 1B02     		lsls	r3, r3, #8
 4234 134a 9AB2     		uxth	r2, r3
 4235 134c FB89     		ldrh	r3, [r7, #14]	@ movhi
 4236 134e 1343     		orrs	r3, r3, r2
 4237 1350 FB81     		strh	r3, [r7, #14]	@ movhi
1910:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1911:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4238              		.loc 1 1911 0
 4239 1352 7B68     		ldr	r3, [r7, #4]
 4240 1354 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4241 1356 1A84     		strh	r2, [r3, #32]	@ movhi
1912:lib/src/stm32f10x_tim.c **** }
 4242              		.loc 1 1912 0
 4243 1358 00BF     		nop
 4244 135a 1437     		adds	r7, r7, #20
 4245              		.cfi_def_cfa_offset 4
 4246 135c BD46     		mov	sp, r7
 4247              		.cfi_def_cfa_register 13
 4248              		@ sp needed
 4249 135e 80BC     		pop	{r7}
 4250              		.cfi_restore 7
 4251              		.cfi_def_cfa_offset 0
 4252 1360 7047     		bx	lr
 4253              		.cfi_endproc
 4254              	.LFE117:
 4255              		.size	TIM_OC3PolarityConfig, .-TIM_OC3PolarityConfig
 4256              		.align	1
 4257              		.global	TIM_OC3NPolarityConfig
 4258              		.syntax unified
 4259              		.thumb
 4260              		.thumb_func
 4261              		.fpu softvfp
 4262              		.type	TIM_OC3NPolarityConfig, %function
 4263              	TIM_OC3NPolarityConfig:
 4264              	.LFB118:
1913:lib/src/stm32f10x_tim.c **** 
1914:lib/src/stm32f10x_tim.c **** /**
1915:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Channel 3N polarity.
1916:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 or 8 to select the TIM peripheral.
1917:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCNPolarity: specifies the OC3N Polarity
1918:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1919:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_High: Output Compare active high
1920:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCNPolarity_Low: Output Compare active low
1921:lib/src/stm32f10x_tim.c ****   * @retval None
1922:lib/src/stm32f10x_tim.c ****   */
1923:lib/src/stm32f10x_tim.c **** void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
1924:lib/src/stm32f10x_tim.c **** {
 4265              		.loc 1 1924 0
 4266              		.cfi_startproc
 4267              		@ args = 0, pretend = 0, frame = 16
 4268              		@ frame_needed = 1, uses_anonymous_args = 0
 4269              		@ link register save eliminated.
 4270 1362 80B4     		push	{r7}
 4271              		.cfi_def_cfa_offset 4
 4272              		.cfi_offset 7, -4
 4273 1364 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/ccNus05k.s 			page 111


 4274              		.cfi_def_cfa_offset 24
 4275 1366 00AF     		add	r7, sp, #0
 4276              		.cfi_def_cfa_register 7
 4277 1368 7860     		str	r0, [r7, #4]
 4278 136a 0B46     		mov	r3, r1
 4279 136c 7B80     		strh	r3, [r7, #2]	@ movhi
1925:lib/src/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4280              		.loc 1 1925 0
 4281 136e 0023     		movs	r3, #0
 4282 1370 FB81     		strh	r3, [r7, #14]	@ movhi
1926:lib/src/stm32f10x_tim.c ****  
1927:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1928:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST1_PERIPH(TIMx));
1929:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
1930:lib/src/stm32f10x_tim.c ****     
1931:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4283              		.loc 1 1931 0
 4284 1372 7B68     		ldr	r3, [r7, #4]
 4285 1374 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4286 1376 FB81     		strh	r3, [r7, #14]	@ movhi
1932:lib/src/stm32f10x_tim.c ****   /* Set or Reset the CC3NP Bit */
1933:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 4287              		.loc 1 1933 0
 4288 1378 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4289 137a 23F40063 		bic	r3, r3, #2048
 4290 137e FB81     		strh	r3, [r7, #14]	@ movhi
1934:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 4291              		.loc 1 1934 0
 4292 1380 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4293 1382 1B02     		lsls	r3, r3, #8
 4294 1384 9AB2     		uxth	r2, r3
 4295 1386 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4296 1388 1343     		orrs	r3, r3, r2
 4297 138a FB81     		strh	r3, [r7, #14]	@ movhi
1935:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1936:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4298              		.loc 1 1936 0
 4299 138c 7B68     		ldr	r3, [r7, #4]
 4300 138e FA89     		ldrh	r2, [r7, #14]	@ movhi
 4301 1390 1A84     		strh	r2, [r3, #32]	@ movhi
1937:lib/src/stm32f10x_tim.c **** }
 4302              		.loc 1 1937 0
 4303 1392 00BF     		nop
 4304 1394 1437     		adds	r7, r7, #20
 4305              		.cfi_def_cfa_offset 4
 4306 1396 BD46     		mov	sp, r7
 4307              		.cfi_def_cfa_register 13
 4308              		@ sp needed
 4309 1398 80BC     		pop	{r7}
 4310              		.cfi_restore 7
 4311              		.cfi_def_cfa_offset 0
 4312 139a 7047     		bx	lr
 4313              		.cfi_endproc
 4314              	.LFE118:
 4315              		.size	TIM_OC3NPolarityConfig, .-TIM_OC3NPolarityConfig
 4316              		.align	1
 4317              		.global	TIM_OC4PolarityConfig
ARM GAS  /tmp/ccNus05k.s 			page 112


 4318              		.syntax unified
 4319              		.thumb
 4320              		.thumb_func
 4321              		.fpu softvfp
 4322              		.type	TIM_OC4PolarityConfig, %function
 4323              	TIM_OC4PolarityConfig:
 4324              	.LFB119:
1938:lib/src/stm32f10x_tim.c **** 
1939:lib/src/stm32f10x_tim.c **** /**
1940:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx channel 4 polarity.
1941:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
1942:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCPolarity: specifies the OC4 Polarity
1943:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1944:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_High: Output Compare active high
1945:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCPolarity_Low: Output Compare active low
1946:lib/src/stm32f10x_tim.c ****   * @retval None
1947:lib/src/stm32f10x_tim.c ****   */
1948:lib/src/stm32f10x_tim.c **** void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
1949:lib/src/stm32f10x_tim.c **** {
 4325              		.loc 1 1949 0
 4326              		.cfi_startproc
 4327              		@ args = 0, pretend = 0, frame = 16
 4328              		@ frame_needed = 1, uses_anonymous_args = 0
 4329              		@ link register save eliminated.
 4330 139c 80B4     		push	{r7}
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 7, -4
 4333 139e 85B0     		sub	sp, sp, #20
 4334              		.cfi_def_cfa_offset 24
 4335 13a0 00AF     		add	r7, sp, #0
 4336              		.cfi_def_cfa_register 7
 4337 13a2 7860     		str	r0, [r7, #4]
 4338 13a4 0B46     		mov	r3, r1
 4339 13a6 7B80     		strh	r3, [r7, #2]	@ movhi
1950:lib/src/stm32f10x_tim.c ****   uint16_t tmpccer = 0;
 4340              		.loc 1 1950 0
 4341 13a8 0023     		movs	r3, #0
 4342 13aa FB81     		strh	r3, [r7, #14]	@ movhi
1951:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1952:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
1953:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
1954:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 4343              		.loc 1 1954 0
 4344 13ac 7B68     		ldr	r3, [r7, #4]
 4345 13ae 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4346 13b0 FB81     		strh	r3, [r7, #14]	@ movhi
1955:lib/src/stm32f10x_tim.c ****   /* Set or Reset the CC4P Bit */
1956:lib/src/stm32f10x_tim.c ****   tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 4347              		.loc 1 1956 0
 4348 13b2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4349 13b4 23F40053 		bic	r3, r3, #8192
 4350 13b8 FB81     		strh	r3, [r7, #14]	@ movhi
1957:lib/src/stm32f10x_tim.c ****   tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 4351              		.loc 1 1957 0
 4352 13ba 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4353 13bc 1B03     		lsls	r3, r3, #12
 4354 13be 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccNus05k.s 			page 113


 4355 13c0 FB89     		ldrh	r3, [r7, #14]	@ movhi
 4356 13c2 1343     		orrs	r3, r3, r2
 4357 13c4 FB81     		strh	r3, [r7, #14]	@ movhi
1958:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCER register */
1959:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 4358              		.loc 1 1959 0
 4359 13c6 7B68     		ldr	r3, [r7, #4]
 4360 13c8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 4361 13ca 1A84     		strh	r2, [r3, #32]	@ movhi
1960:lib/src/stm32f10x_tim.c **** }
 4362              		.loc 1 1960 0
 4363 13cc 00BF     		nop
 4364 13ce 1437     		adds	r7, r7, #20
 4365              		.cfi_def_cfa_offset 4
 4366 13d0 BD46     		mov	sp, r7
 4367              		.cfi_def_cfa_register 13
 4368              		@ sp needed
 4369 13d2 80BC     		pop	{r7}
 4370              		.cfi_restore 7
 4371              		.cfi_def_cfa_offset 0
 4372 13d4 7047     		bx	lr
 4373              		.cfi_endproc
 4374              	.LFE119:
 4375              		.size	TIM_OC4PolarityConfig, .-TIM_OC4PolarityConfig
 4376              		.align	1
 4377              		.global	TIM_CCxCmd
 4378              		.syntax unified
 4379              		.thumb
 4380              		.thumb_func
 4381              		.fpu softvfp
 4382              		.type	TIM_CCxCmd, %function
 4383              	TIM_CCxCmd:
 4384              	.LFB120:
1961:lib/src/stm32f10x_tim.c **** 
1962:lib/src/stm32f10x_tim.c **** /**
1963:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel x.
1964:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
1965:lib/src/stm32f10x_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1966:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1967:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_1: TIM Channel 1
1968:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_2: TIM Channel 2
1969:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_3: TIM Channel 3
1970:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_4: TIM Channel 4
1971:lib/src/stm32f10x_tim.c ****   * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
1972:lib/src/stm32f10x_tim.c ****   *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
1973:lib/src/stm32f10x_tim.c ****   * @retval None
1974:lib/src/stm32f10x_tim.c ****   */
1975:lib/src/stm32f10x_tim.c **** void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
1976:lib/src/stm32f10x_tim.c **** {
 4385              		.loc 1 1976 0
 4386              		.cfi_startproc
 4387              		@ args = 0, pretend = 0, frame = 16
 4388              		@ frame_needed = 1, uses_anonymous_args = 0
 4389              		@ link register save eliminated.
 4390 13d6 80B4     		push	{r7}
 4391              		.cfi_def_cfa_offset 4
 4392              		.cfi_offset 7, -4
ARM GAS  /tmp/ccNus05k.s 			page 114


 4393 13d8 85B0     		sub	sp, sp, #20
 4394              		.cfi_def_cfa_offset 24
 4395 13da 00AF     		add	r7, sp, #0
 4396              		.cfi_def_cfa_register 7
 4397 13dc 7860     		str	r0, [r7, #4]
 4398 13de 0B46     		mov	r3, r1
 4399 13e0 7B80     		strh	r3, [r7, #2]	@ movhi
 4400 13e2 1346     		mov	r3, r2	@ movhi
 4401 13e4 3B80     		strh	r3, [r7]	@ movhi
1977:lib/src/stm32f10x_tim.c ****   uint16_t tmp = 0;
 4402              		.loc 1 1977 0
 4403 13e6 0023     		movs	r3, #0
 4404 13e8 FB81     		strh	r3, [r7, #14]	@ movhi
1978:lib/src/stm32f10x_tim.c **** 
1979:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
1980:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
1981:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
1982:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_CCX(TIM_CCx));
1983:lib/src/stm32f10x_tim.c **** 
1984:lib/src/stm32f10x_tim.c ****   tmp = CCER_CCE_Set << TIM_Channel;
 4405              		.loc 1 1984 0
 4406 13ea 7B88     		ldrh	r3, [r7, #2]
 4407 13ec 0122     		movs	r2, #1
 4408 13ee 02FA03F3 		lsl	r3, r2, r3
 4409 13f2 FB81     		strh	r3, [r7, #14]	@ movhi
1985:lib/src/stm32f10x_tim.c **** 
1986:lib/src/stm32f10x_tim.c ****   /* Reset the CCxE Bit */
1987:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~ tmp;
 4410              		.loc 1 1987 0
 4411 13f4 7B68     		ldr	r3, [r7, #4]
 4412 13f6 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4413 13f8 9AB2     		uxth	r2, r3
 4414 13fa FB89     		ldrh	r3, [r7, #14]	@ movhi
 4415 13fc DB43     		mvns	r3, r3
 4416 13fe 9BB2     		uxth	r3, r3
 4417 1400 1340     		ands	r3, r3, r2
 4418 1402 9AB2     		uxth	r2, r3
 4419 1404 7B68     		ldr	r3, [r7, #4]
 4420 1406 1A84     		strh	r2, [r3, #32]	@ movhi
1988:lib/src/stm32f10x_tim.c **** 
1989:lib/src/stm32f10x_tim.c ****   /* Set or reset the CCxE Bit */ 
1990:lib/src/stm32f10x_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 4421              		.loc 1 1990 0
 4422 1408 7B68     		ldr	r3, [r7, #4]
 4423 140a 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4424 140c 9AB2     		uxth	r2, r3
 4425 140e 3988     		ldrh	r1, [r7]
 4426 1410 7B88     		ldrh	r3, [r7, #2]
 4427 1412 01FA03F3 		lsl	r3, r1, r3
 4428 1416 9BB2     		uxth	r3, r3
 4429 1418 1343     		orrs	r3, r3, r2
 4430 141a 9AB2     		uxth	r2, r3
 4431 141c 7B68     		ldr	r3, [r7, #4]
 4432 141e 1A84     		strh	r2, [r3, #32]	@ movhi
1991:lib/src/stm32f10x_tim.c **** }
 4433              		.loc 1 1991 0
 4434 1420 00BF     		nop
ARM GAS  /tmp/ccNus05k.s 			page 115


 4435 1422 1437     		adds	r7, r7, #20
 4436              		.cfi_def_cfa_offset 4
 4437 1424 BD46     		mov	sp, r7
 4438              		.cfi_def_cfa_register 13
 4439              		@ sp needed
 4440 1426 80BC     		pop	{r7}
 4441              		.cfi_restore 7
 4442              		.cfi_def_cfa_offset 0
 4443 1428 7047     		bx	lr
 4444              		.cfi_endproc
 4445              	.LFE120:
 4446              		.size	TIM_CCxCmd, .-TIM_CCxCmd
 4447              		.align	1
 4448              		.global	TIM_CCxNCmd
 4449              		.syntax unified
 4450              		.thumb
 4451              		.thumb_func
 4452              		.fpu softvfp
 4453              		.type	TIM_CCxNCmd, %function
 4454              	TIM_CCxNCmd:
 4455              	.LFB121:
1992:lib/src/stm32f10x_tim.c **** 
1993:lib/src/stm32f10x_tim.c **** /**
1994:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the TIM Capture Compare Channel xN.
1995:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 8, 15, 16 or 17 to select the TIM peripheral.
1996:lib/src/stm32f10x_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
1997:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
1998:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_1: TIM Channel 1
1999:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_2: TIM Channel 2
2000:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_3: TIM Channel 3
2001:lib/src/stm32f10x_tim.c ****   * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
2002:lib/src/stm32f10x_tim.c ****   *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
2003:lib/src/stm32f10x_tim.c ****   * @retval None
2004:lib/src/stm32f10x_tim.c ****   */
2005:lib/src/stm32f10x_tim.c **** void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
2006:lib/src/stm32f10x_tim.c **** {
 4456              		.loc 1 2006 0
 4457              		.cfi_startproc
 4458              		@ args = 0, pretend = 0, frame = 16
 4459              		@ frame_needed = 1, uses_anonymous_args = 0
 4460              		@ link register save eliminated.
 4461 142a 80B4     		push	{r7}
 4462              		.cfi_def_cfa_offset 4
 4463              		.cfi_offset 7, -4
 4464 142c 85B0     		sub	sp, sp, #20
 4465              		.cfi_def_cfa_offset 24
 4466 142e 00AF     		add	r7, sp, #0
 4467              		.cfi_def_cfa_register 7
 4468 1430 7860     		str	r0, [r7, #4]
 4469 1432 0B46     		mov	r3, r1
 4470 1434 7B80     		strh	r3, [r7, #2]	@ movhi
 4471 1436 1346     		mov	r3, r2	@ movhi
 4472 1438 3B80     		strh	r3, [r7]	@ movhi
2007:lib/src/stm32f10x_tim.c ****   uint16_t tmp = 0;
 4473              		.loc 1 2007 0
 4474 143a 0023     		movs	r3, #0
 4475 143c FB81     		strh	r3, [r7, #14]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 116


2008:lib/src/stm32f10x_tim.c **** 
2009:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2010:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST2_PERIPH(TIMx));
2011:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
2012:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_CCXN(TIM_CCxN));
2013:lib/src/stm32f10x_tim.c **** 
2014:lib/src/stm32f10x_tim.c ****   tmp = CCER_CCNE_Set << TIM_Channel;
 4476              		.loc 1 2014 0
 4477 143e 7B88     		ldrh	r3, [r7, #2]
 4478 1440 0422     		movs	r2, #4
 4479 1442 02FA03F3 		lsl	r3, r2, r3
 4480 1446 FB81     		strh	r3, [r7, #14]	@ movhi
2015:lib/src/stm32f10x_tim.c **** 
2016:lib/src/stm32f10x_tim.c ****   /* Reset the CCxNE Bit */
2017:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp;
 4481              		.loc 1 2017 0
 4482 1448 7B68     		ldr	r3, [r7, #4]
 4483 144a 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4484 144c 9AB2     		uxth	r2, r3
 4485 144e FB89     		ldrh	r3, [r7, #14]	@ movhi
 4486 1450 DB43     		mvns	r3, r3
 4487 1452 9BB2     		uxth	r3, r3
 4488 1454 1340     		ands	r3, r3, r2
 4489 1456 9AB2     		uxth	r2, r3
 4490 1458 7B68     		ldr	r3, [r7, #4]
 4491 145a 1A84     		strh	r2, [r3, #32]	@ movhi
2018:lib/src/stm32f10x_tim.c **** 
2019:lib/src/stm32f10x_tim.c ****   /* Set or reset the CCxNE Bit */ 
2020:lib/src/stm32f10x_tim.c ****   TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 4492              		.loc 1 2020 0
 4493 145c 7B68     		ldr	r3, [r7, #4]
 4494 145e 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4495 1460 9AB2     		uxth	r2, r3
 4496 1462 3988     		ldrh	r1, [r7]
 4497 1464 7B88     		ldrh	r3, [r7, #2]
 4498 1466 01FA03F3 		lsl	r3, r1, r3
 4499 146a 9BB2     		uxth	r3, r3
 4500 146c 1343     		orrs	r3, r3, r2
 4501 146e 9AB2     		uxth	r2, r3
 4502 1470 7B68     		ldr	r3, [r7, #4]
 4503 1472 1A84     		strh	r2, [r3, #32]	@ movhi
2021:lib/src/stm32f10x_tim.c **** }
 4504              		.loc 1 2021 0
 4505 1474 00BF     		nop
 4506 1476 1437     		adds	r7, r7, #20
 4507              		.cfi_def_cfa_offset 4
 4508 1478 BD46     		mov	sp, r7
 4509              		.cfi_def_cfa_register 13
 4510              		@ sp needed
 4511 147a 80BC     		pop	{r7}
 4512              		.cfi_restore 7
 4513              		.cfi_def_cfa_offset 0
 4514 147c 7047     		bx	lr
 4515              		.cfi_endproc
 4516              	.LFE121:
 4517              		.size	TIM_CCxNCmd, .-TIM_CCxNCmd
 4518              		.align	1
ARM GAS  /tmp/ccNus05k.s 			page 117


 4519              		.global	TIM_SelectOCxM
 4520              		.syntax unified
 4521              		.thumb
 4522              		.thumb_func
 4523              		.fpu softvfp
 4524              		.type	TIM_SelectOCxM, %function
 4525              	TIM_SelectOCxM:
 4526              	.LFB122:
2022:lib/src/stm32f10x_tim.c **** 
2023:lib/src/stm32f10x_tim.c **** /**
2024:lib/src/stm32f10x_tim.c ****   * @brief  Selects the TIM Output Compare Mode.
2025:lib/src/stm32f10x_tim.c ****   * @note   This function disables the selected channel before changing the Output
2026:lib/src/stm32f10x_tim.c ****   *         Compare Mode.
2027:lib/src/stm32f10x_tim.c ****   *         User has to enable this channel using TIM_CCxCmd and TIM_CCxNCmd functions.
2028:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2029:lib/src/stm32f10x_tim.c ****   * @param  TIM_Channel: specifies the TIM Channel
2030:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2031:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_1: TIM Channel 1
2032:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_2: TIM Channel 2
2033:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_3: TIM Channel 3
2034:lib/src/stm32f10x_tim.c ****   *     @arg TIM_Channel_4: TIM Channel 4
2035:lib/src/stm32f10x_tim.c ****   * @param  TIM_OCMode: specifies the TIM Output Compare Mode.
2036:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2037:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCMode_Timing
2038:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCMode_Active
2039:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCMode_Toggle
2040:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCMode_PWM1
2041:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OCMode_PWM2
2042:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_Active
2043:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ForcedAction_InActive
2044:lib/src/stm32f10x_tim.c ****   * @retval None
2045:lib/src/stm32f10x_tim.c ****   */
2046:lib/src/stm32f10x_tim.c **** void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
2047:lib/src/stm32f10x_tim.c **** {
 4527              		.loc 1 2047 0
 4528              		.cfi_startproc
 4529              		@ args = 0, pretend = 0, frame = 16
 4530              		@ frame_needed = 1, uses_anonymous_args = 0
 4531              		@ link register save eliminated.
 4532 147e 80B4     		push	{r7}
 4533              		.cfi_def_cfa_offset 4
 4534              		.cfi_offset 7, -4
 4535 1480 85B0     		sub	sp, sp, #20
 4536              		.cfi_def_cfa_offset 24
 4537 1482 00AF     		add	r7, sp, #0
 4538              		.cfi_def_cfa_register 7
 4539 1484 7860     		str	r0, [r7, #4]
 4540 1486 0B46     		mov	r3, r1
 4541 1488 7B80     		strh	r3, [r7, #2]	@ movhi
 4542 148a 1346     		mov	r3, r2	@ movhi
 4543 148c 3B80     		strh	r3, [r7]	@ movhi
2048:lib/src/stm32f10x_tim.c ****   uint32_t tmp = 0;
 4544              		.loc 1 2048 0
 4545 148e 0023     		movs	r3, #0
 4546 1490 FB60     		str	r3, [r7, #12]
2049:lib/src/stm32f10x_tim.c ****   uint16_t tmp1 = 0;
 4547              		.loc 1 2049 0
ARM GAS  /tmp/ccNus05k.s 			page 118


 4548 1492 0023     		movs	r3, #0
 4549 1494 7B81     		strh	r3, [r7, #10]	@ movhi
2050:lib/src/stm32f10x_tim.c **** 
2051:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2052:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2053:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_CHANNEL(TIM_Channel));
2054:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OCM(TIM_OCMode));
2055:lib/src/stm32f10x_tim.c **** 
2056:lib/src/stm32f10x_tim.c ****   tmp = (uint32_t) TIMx;
 4550              		.loc 1 2056 0
 4551 1496 7B68     		ldr	r3, [r7, #4]
 4552 1498 FB60     		str	r3, [r7, #12]
2057:lib/src/stm32f10x_tim.c ****   tmp += CCMR_Offset;
 4553              		.loc 1 2057 0
 4554 149a FB68     		ldr	r3, [r7, #12]
 4555 149c 1833     		adds	r3, r3, #24
 4556 149e FB60     		str	r3, [r7, #12]
2058:lib/src/stm32f10x_tim.c **** 
2059:lib/src/stm32f10x_tim.c ****   tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
 4557              		.loc 1 2059 0
 4558 14a0 7B88     		ldrh	r3, [r7, #2]
 4559 14a2 0122     		movs	r2, #1
 4560 14a4 02FA03F3 		lsl	r3, r2, r3
 4561 14a8 7B81     		strh	r3, [r7, #10]	@ movhi
2060:lib/src/stm32f10x_tim.c **** 
2061:lib/src/stm32f10x_tim.c ****   /* Disable the Channel: Reset the CCxE Bit */
2062:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t) ~tmp1;
 4562              		.loc 1 2062 0
 4563 14aa 7B68     		ldr	r3, [r7, #4]
 4564 14ac 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 4565 14ae 9AB2     		uxth	r2, r3
 4566 14b0 7B89     		ldrh	r3, [r7, #10]	@ movhi
 4567 14b2 DB43     		mvns	r3, r3
 4568 14b4 9BB2     		uxth	r3, r3
 4569 14b6 1340     		ands	r3, r3, r2
 4570 14b8 9AB2     		uxth	r2, r3
 4571 14ba 7B68     		ldr	r3, [r7, #4]
 4572 14bc 1A84     		strh	r2, [r3, #32]	@ movhi
2063:lib/src/stm32f10x_tim.c **** 
2064:lib/src/stm32f10x_tim.c ****   if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 4573              		.loc 1 2064 0
 4574 14be 7B88     		ldrh	r3, [r7, #2]
 4575 14c0 002B     		cmp	r3, #0
 4576 14c2 02D0     		beq	.L141
 4577              		.loc 1 2064 0 is_stmt 0 discriminator 1
 4578 14c4 7B88     		ldrh	r3, [r7, #2]
 4579 14c6 082B     		cmp	r3, #8
 4580 14c8 13D1     		bne	.L142
 4581              	.L141:
2065:lib/src/stm32f10x_tim.c ****   {
2066:lib/src/stm32f10x_tim.c ****     tmp += (TIM_Channel>>1);
 4582              		.loc 1 2066 0 is_stmt 1
 4583 14ca 7B88     		ldrh	r3, [r7, #2]
 4584 14cc 5B08     		lsrs	r3, r3, #1
 4585 14ce 9BB2     		uxth	r3, r3
 4586 14d0 1A46     		mov	r2, r3
 4587 14d2 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccNus05k.s 			page 119


 4588 14d4 1344     		add	r3, r3, r2
 4589 14d6 FB60     		str	r3, [r7, #12]
2067:lib/src/stm32f10x_tim.c **** 
2068:lib/src/stm32f10x_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
2069:lib/src/stm32f10x_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 4590              		.loc 1 2069 0
 4591 14d8 FB68     		ldr	r3, [r7, #12]
 4592 14da FA68     		ldr	r2, [r7, #12]
 4593 14dc 1268     		ldr	r2, [r2]
 4594 14de 22F07002 		bic	r2, r2, #112
 4595 14e2 1A60     		str	r2, [r3]
2070:lib/src/stm32f10x_tim.c ****    
2071:lib/src/stm32f10x_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
2072:lib/src/stm32f10x_tim.c ****     *(__IO uint32_t *) tmp |= TIM_OCMode;
 4596              		.loc 1 2072 0
 4597 14e4 FB68     		ldr	r3, [r7, #12]
 4598 14e6 FA68     		ldr	r2, [r7, #12]
 4599 14e8 1168     		ldr	r1, [r2]
 4600 14ea 3A88     		ldrh	r2, [r7]
 4601 14ec 0A43     		orrs	r2, r2, r1
 4602 14ee 1A60     		str	r2, [r3]
 4603 14f0 16E0     		b	.L143
 4604              	.L142:
2073:lib/src/stm32f10x_tim.c ****   }
2074:lib/src/stm32f10x_tim.c ****   else
2075:lib/src/stm32f10x_tim.c ****   {
2076:lib/src/stm32f10x_tim.c ****     tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 4605              		.loc 1 2076 0
 4606 14f2 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4607 14f4 043B     		subs	r3, r3, #4
 4608 14f6 9BB2     		uxth	r3, r3
 4609 14f8 5B08     		lsrs	r3, r3, #1
 4610 14fa 9BB2     		uxth	r3, r3
 4611 14fc 1A46     		mov	r2, r3
 4612 14fe FB68     		ldr	r3, [r7, #12]
 4613 1500 1344     		add	r3, r3, r2
 4614 1502 FB60     		str	r3, [r7, #12]
2077:lib/src/stm32f10x_tim.c **** 
2078:lib/src/stm32f10x_tim.c ****     /* Reset the OCxM bits in the CCMRx register */
2079:lib/src/stm32f10x_tim.c ****     *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 4615              		.loc 1 2079 0
 4616 1504 FB68     		ldr	r3, [r7, #12]
 4617 1506 FA68     		ldr	r2, [r7, #12]
 4618 1508 1268     		ldr	r2, [r2]
 4619 150a 22F4E042 		bic	r2, r2, #28672
 4620 150e 1A60     		str	r2, [r3]
2080:lib/src/stm32f10x_tim.c ****     
2081:lib/src/stm32f10x_tim.c ****     /* Configure the OCxM bits in the CCMRx register */
2082:lib/src/stm32f10x_tim.c ****     *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 4621              		.loc 1 2082 0
 4622 1510 FB68     		ldr	r3, [r7, #12]
 4623 1512 FA68     		ldr	r2, [r7, #12]
 4624 1514 1268     		ldr	r2, [r2]
 4625 1516 3988     		ldrh	r1, [r7]	@ movhi
 4626 1518 0902     		lsls	r1, r1, #8
 4627 151a 89B2     		uxth	r1, r1
 4628 151c 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccNus05k.s 			page 120


 4629 151e 1A60     		str	r2, [r3]
 4630              	.L143:
2083:lib/src/stm32f10x_tim.c ****   }
2084:lib/src/stm32f10x_tim.c **** }
 4631              		.loc 1 2084 0
 4632 1520 00BF     		nop
 4633 1522 1437     		adds	r7, r7, #20
 4634              		.cfi_def_cfa_offset 4
 4635 1524 BD46     		mov	sp, r7
 4636              		.cfi_def_cfa_register 13
 4637              		@ sp needed
 4638 1526 80BC     		pop	{r7}
 4639              		.cfi_restore 7
 4640              		.cfi_def_cfa_offset 0
 4641 1528 7047     		bx	lr
 4642              		.cfi_endproc
 4643              	.LFE122:
 4644              		.size	TIM_SelectOCxM, .-TIM_SelectOCxM
 4645              		.align	1
 4646              		.global	TIM_UpdateDisableConfig
 4647              		.syntax unified
 4648              		.thumb
 4649              		.thumb_func
 4650              		.fpu softvfp
 4651              		.type	TIM_UpdateDisableConfig, %function
 4652              	TIM_UpdateDisableConfig:
 4653              	.LFB123:
2085:lib/src/stm32f10x_tim.c **** 
2086:lib/src/stm32f10x_tim.c **** /**
2087:lib/src/stm32f10x_tim.c ****   * @brief  Enables or Disables the TIMx Update event.
2088:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2089:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the TIMx UDIS bit
2090:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
2091:lib/src/stm32f10x_tim.c ****   * @retval None
2092:lib/src/stm32f10x_tim.c ****   */
2093:lib/src/stm32f10x_tim.c **** void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
2094:lib/src/stm32f10x_tim.c **** {
 4654              		.loc 1 2094 0
 4655              		.cfi_startproc
 4656              		@ args = 0, pretend = 0, frame = 8
 4657              		@ frame_needed = 1, uses_anonymous_args = 0
 4658              		@ link register save eliminated.
 4659 152a 80B4     		push	{r7}
 4660              		.cfi_def_cfa_offset 4
 4661              		.cfi_offset 7, -4
 4662 152c 83B0     		sub	sp, sp, #12
 4663              		.cfi_def_cfa_offset 16
 4664 152e 00AF     		add	r7, sp, #0
 4665              		.cfi_def_cfa_register 7
 4666 1530 7860     		str	r0, [r7, #4]
 4667 1532 0B46     		mov	r3, r1
 4668 1534 FB70     		strb	r3, [r7, #3]
2095:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2096:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2097:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2098:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 4669              		.loc 1 2098 0
ARM GAS  /tmp/ccNus05k.s 			page 121


 4670 1536 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4671 1538 002B     		cmp	r3, #0
 4672 153a 08D0     		beq	.L145
2099:lib/src/stm32f10x_tim.c ****   {
2100:lib/src/stm32f10x_tim.c ****     /* Set the Update Disable Bit */
2101:lib/src/stm32f10x_tim.c ****     TIMx->CR1 |= TIM_CR1_UDIS;
 4673              		.loc 1 2101 0
 4674 153c 7B68     		ldr	r3, [r7, #4]
 4675 153e 1B88     		ldrh	r3, [r3]	@ movhi
 4676 1540 9BB2     		uxth	r3, r3
 4677 1542 43F00203 		orr	r3, r3, #2
 4678 1546 9AB2     		uxth	r2, r3
 4679 1548 7B68     		ldr	r3, [r7, #4]
 4680 154a 1A80     		strh	r2, [r3]	@ movhi
2102:lib/src/stm32f10x_tim.c ****   }
2103:lib/src/stm32f10x_tim.c ****   else
2104:lib/src/stm32f10x_tim.c ****   {
2105:lib/src/stm32f10x_tim.c ****     /* Reset the Update Disable Bit */
2106:lib/src/stm32f10x_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
2107:lib/src/stm32f10x_tim.c ****   }
2108:lib/src/stm32f10x_tim.c **** }
 4681              		.loc 1 2108 0
 4682 154c 07E0     		b	.L147
 4683              	.L145:
2106:lib/src/stm32f10x_tim.c ****   }
 4684              		.loc 1 2106 0
 4685 154e 7B68     		ldr	r3, [r7, #4]
 4686 1550 1B88     		ldrh	r3, [r3]	@ movhi
 4687 1552 9BB2     		uxth	r3, r3
 4688 1554 23F00203 		bic	r3, r3, #2
 4689 1558 9AB2     		uxth	r2, r3
 4690 155a 7B68     		ldr	r3, [r7, #4]
 4691 155c 1A80     		strh	r2, [r3]	@ movhi
 4692              	.L147:
 4693              		.loc 1 2108 0
 4694 155e 00BF     		nop
 4695 1560 0C37     		adds	r7, r7, #12
 4696              		.cfi_def_cfa_offset 4
 4697 1562 BD46     		mov	sp, r7
 4698              		.cfi_def_cfa_register 13
 4699              		@ sp needed
 4700 1564 80BC     		pop	{r7}
 4701              		.cfi_restore 7
 4702              		.cfi_def_cfa_offset 0
 4703 1566 7047     		bx	lr
 4704              		.cfi_endproc
 4705              	.LFE123:
 4706              		.size	TIM_UpdateDisableConfig, .-TIM_UpdateDisableConfig
 4707              		.align	1
 4708              		.global	TIM_UpdateRequestConfig
 4709              		.syntax unified
 4710              		.thumb
 4711              		.thumb_func
 4712              		.fpu softvfp
 4713              		.type	TIM_UpdateRequestConfig, %function
 4714              	TIM_UpdateRequestConfig:
 4715              	.LFB124:
ARM GAS  /tmp/ccNus05k.s 			page 122


2109:lib/src/stm32f10x_tim.c **** 
2110:lib/src/stm32f10x_tim.c **** /**
2111:lib/src/stm32f10x_tim.c ****   * @brief  Configures the TIMx Update Request Interrupt source.
2112:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2113:lib/src/stm32f10x_tim.c ****   * @param  TIM_UpdateSource: specifies the Update source.
2114:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2115:lib/src/stm32f10x_tim.c ****   *     @arg TIM_UpdateSource_Regular: Source of update is the counter overflow/underflow
2116:lib/src/stm32f10x_tim.c ****                                        or the setting of UG bit, or an update generation
2117:lib/src/stm32f10x_tim.c ****                                        through the slave mode controller.
2118:lib/src/stm32f10x_tim.c ****   *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
2119:lib/src/stm32f10x_tim.c ****   * @retval None
2120:lib/src/stm32f10x_tim.c ****   */
2121:lib/src/stm32f10x_tim.c **** void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
2122:lib/src/stm32f10x_tim.c **** {
 4716              		.loc 1 2122 0
 4717              		.cfi_startproc
 4718              		@ args = 0, pretend = 0, frame = 8
 4719              		@ frame_needed = 1, uses_anonymous_args = 0
 4720              		@ link register save eliminated.
 4721 1568 80B4     		push	{r7}
 4722              		.cfi_def_cfa_offset 4
 4723              		.cfi_offset 7, -4
 4724 156a 83B0     		sub	sp, sp, #12
 4725              		.cfi_def_cfa_offset 16
 4726 156c 00AF     		add	r7, sp, #0
 4727              		.cfi_def_cfa_register 7
 4728 156e 7860     		str	r0, [r7, #4]
 4729 1570 0B46     		mov	r3, r1
 4730 1572 7B80     		strh	r3, [r7, #2]	@ movhi
2123:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2124:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2125:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
2126:lib/src/stm32f10x_tim.c ****   if (TIM_UpdateSource != TIM_UpdateSource_Global)
 4731              		.loc 1 2126 0
 4732 1574 7B88     		ldrh	r3, [r7, #2]
 4733 1576 002B     		cmp	r3, #0
 4734 1578 08D0     		beq	.L149
2127:lib/src/stm32f10x_tim.c ****   {
2128:lib/src/stm32f10x_tim.c ****     /* Set the URS Bit */
2129:lib/src/stm32f10x_tim.c ****     TIMx->CR1 |= TIM_CR1_URS;
 4735              		.loc 1 2129 0
 4736 157a 7B68     		ldr	r3, [r7, #4]
 4737 157c 1B88     		ldrh	r3, [r3]	@ movhi
 4738 157e 9BB2     		uxth	r3, r3
 4739 1580 43F00403 		orr	r3, r3, #4
 4740 1584 9AB2     		uxth	r2, r3
 4741 1586 7B68     		ldr	r3, [r7, #4]
 4742 1588 1A80     		strh	r2, [r3]	@ movhi
2130:lib/src/stm32f10x_tim.c ****   }
2131:lib/src/stm32f10x_tim.c ****   else
2132:lib/src/stm32f10x_tim.c ****   {
2133:lib/src/stm32f10x_tim.c ****     /* Reset the URS Bit */
2134:lib/src/stm32f10x_tim.c ****     TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
2135:lib/src/stm32f10x_tim.c ****   }
2136:lib/src/stm32f10x_tim.c **** }
 4743              		.loc 1 2136 0
 4744 158a 07E0     		b	.L151
ARM GAS  /tmp/ccNus05k.s 			page 123


 4745              	.L149:
2134:lib/src/stm32f10x_tim.c ****   }
 4746              		.loc 1 2134 0
 4747 158c 7B68     		ldr	r3, [r7, #4]
 4748 158e 1B88     		ldrh	r3, [r3]	@ movhi
 4749 1590 9BB2     		uxth	r3, r3
 4750 1592 23F00403 		bic	r3, r3, #4
 4751 1596 9AB2     		uxth	r2, r3
 4752 1598 7B68     		ldr	r3, [r7, #4]
 4753 159a 1A80     		strh	r2, [r3]	@ movhi
 4754              	.L151:
 4755              		.loc 1 2136 0
 4756 159c 00BF     		nop
 4757 159e 0C37     		adds	r7, r7, #12
 4758              		.cfi_def_cfa_offset 4
 4759 15a0 BD46     		mov	sp, r7
 4760              		.cfi_def_cfa_register 13
 4761              		@ sp needed
 4762 15a2 80BC     		pop	{r7}
 4763              		.cfi_restore 7
 4764              		.cfi_def_cfa_offset 0
 4765 15a4 7047     		bx	lr
 4766              		.cfi_endproc
 4767              	.LFE124:
 4768              		.size	TIM_UpdateRequestConfig, .-TIM_UpdateRequestConfig
 4769              		.align	1
 4770              		.global	TIM_SelectHallSensor
 4771              		.syntax unified
 4772              		.thumb
 4773              		.thumb_func
 4774              		.fpu softvfp
 4775              		.type	TIM_SelectHallSensor, %function
 4776              	TIM_SelectHallSensor:
 4777              	.LFB125:
2137:lib/src/stm32f10x_tim.c **** 
2138:lib/src/stm32f10x_tim.c **** /**
2139:lib/src/stm32f10x_tim.c ****   * @brief  Enables or disables the TIMx's Hall sensor interface.
2140:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2141:lib/src/stm32f10x_tim.c ****   * @param  NewState: new state of the TIMx Hall sensor interface.
2142:lib/src/stm32f10x_tim.c ****   *   This parameter can be: ENABLE or DISABLE.
2143:lib/src/stm32f10x_tim.c ****   * @retval None
2144:lib/src/stm32f10x_tim.c ****   */
2145:lib/src/stm32f10x_tim.c **** void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
2146:lib/src/stm32f10x_tim.c **** {
 4778              		.loc 1 2146 0
 4779              		.cfi_startproc
 4780              		@ args = 0, pretend = 0, frame = 8
 4781              		@ frame_needed = 1, uses_anonymous_args = 0
 4782              		@ link register save eliminated.
 4783 15a6 80B4     		push	{r7}
 4784              		.cfi_def_cfa_offset 4
 4785              		.cfi_offset 7, -4
 4786 15a8 83B0     		sub	sp, sp, #12
 4787              		.cfi_def_cfa_offset 16
 4788 15aa 00AF     		add	r7, sp, #0
 4789              		.cfi_def_cfa_register 7
 4790 15ac 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccNus05k.s 			page 124


 4791 15ae 0B46     		mov	r3, r1
 4792 15b0 FB70     		strb	r3, [r7, #3]
2147:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2148:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2149:lib/src/stm32f10x_tim.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
2150:lib/src/stm32f10x_tim.c ****   if (NewState != DISABLE)
 4793              		.loc 1 2150 0
 4794 15b2 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 4795 15b4 002B     		cmp	r3, #0
 4796 15b6 08D0     		beq	.L153
2151:lib/src/stm32f10x_tim.c ****   {
2152:lib/src/stm32f10x_tim.c ****     /* Set the TI1S Bit */
2153:lib/src/stm32f10x_tim.c ****     TIMx->CR2 |= TIM_CR2_TI1S;
 4797              		.loc 1 2153 0
 4798 15b8 7B68     		ldr	r3, [r7, #4]
 4799 15ba 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4800 15bc 9BB2     		uxth	r3, r3
 4801 15be 43F08003 		orr	r3, r3, #128
 4802 15c2 9AB2     		uxth	r2, r3
 4803 15c4 7B68     		ldr	r3, [r7, #4]
 4804 15c6 9A80     		strh	r2, [r3, #4]	@ movhi
2154:lib/src/stm32f10x_tim.c ****   }
2155:lib/src/stm32f10x_tim.c ****   else
2156:lib/src/stm32f10x_tim.c ****   {
2157:lib/src/stm32f10x_tim.c ****     /* Reset the TI1S Bit */
2158:lib/src/stm32f10x_tim.c ****     TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
2159:lib/src/stm32f10x_tim.c ****   }
2160:lib/src/stm32f10x_tim.c **** }
 4805              		.loc 1 2160 0
 4806 15c8 07E0     		b	.L155
 4807              	.L153:
2158:lib/src/stm32f10x_tim.c ****   }
 4808              		.loc 1 2158 0
 4809 15ca 7B68     		ldr	r3, [r7, #4]
 4810 15cc 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4811 15ce 9BB2     		uxth	r3, r3
 4812 15d0 23F08003 		bic	r3, r3, #128
 4813 15d4 9AB2     		uxth	r2, r3
 4814 15d6 7B68     		ldr	r3, [r7, #4]
 4815 15d8 9A80     		strh	r2, [r3, #4]	@ movhi
 4816              	.L155:
 4817              		.loc 1 2160 0
 4818 15da 00BF     		nop
 4819 15dc 0C37     		adds	r7, r7, #12
 4820              		.cfi_def_cfa_offset 4
 4821 15de BD46     		mov	sp, r7
 4822              		.cfi_def_cfa_register 13
 4823              		@ sp needed
 4824 15e0 80BC     		pop	{r7}
 4825              		.cfi_restore 7
 4826              		.cfi_def_cfa_offset 0
 4827 15e2 7047     		bx	lr
 4828              		.cfi_endproc
 4829              	.LFE125:
 4830              		.size	TIM_SelectHallSensor, .-TIM_SelectHallSensor
 4831              		.align	1
 4832              		.global	TIM_SelectOnePulseMode
ARM GAS  /tmp/ccNus05k.s 			page 125


 4833              		.syntax unified
 4834              		.thumb
 4835              		.thumb_func
 4836              		.fpu softvfp
 4837              		.type	TIM_SelectOnePulseMode, %function
 4838              	TIM_SelectOnePulseMode:
 4839              	.LFB126:
2161:lib/src/stm32f10x_tim.c **** 
2162:lib/src/stm32f10x_tim.c **** /**
2163:lib/src/stm32f10x_tim.c ****   * @brief  Selects the TIMx's One Pulse Mode.
2164:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2165:lib/src/stm32f10x_tim.c ****   * @param  TIM_OPMode: specifies the OPM Mode to be used.
2166:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2167:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OPMode_Single
2168:lib/src/stm32f10x_tim.c ****   *     @arg TIM_OPMode_Repetitive
2169:lib/src/stm32f10x_tim.c ****   * @retval None
2170:lib/src/stm32f10x_tim.c ****   */
2171:lib/src/stm32f10x_tim.c **** void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
2172:lib/src/stm32f10x_tim.c **** {
 4840              		.loc 1 2172 0
 4841              		.cfi_startproc
 4842              		@ args = 0, pretend = 0, frame = 8
 4843              		@ frame_needed = 1, uses_anonymous_args = 0
 4844              		@ link register save eliminated.
 4845 15e4 80B4     		push	{r7}
 4846              		.cfi_def_cfa_offset 4
 4847              		.cfi_offset 7, -4
 4848 15e6 83B0     		sub	sp, sp, #12
 4849              		.cfi_def_cfa_offset 16
 4850 15e8 00AF     		add	r7, sp, #0
 4851              		.cfi_def_cfa_register 7
 4852 15ea 7860     		str	r0, [r7, #4]
 4853 15ec 0B46     		mov	r3, r1
 4854 15ee 7B80     		strh	r3, [r7, #2]	@ movhi
2173:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2174:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2175:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
2176:lib/src/stm32f10x_tim.c ****   /* Reset the OPM Bit */
2177:lib/src/stm32f10x_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 4855              		.loc 1 2177 0
 4856 15f0 7B68     		ldr	r3, [r7, #4]
 4857 15f2 1B88     		ldrh	r3, [r3]	@ movhi
 4858 15f4 9BB2     		uxth	r3, r3
 4859 15f6 23F00803 		bic	r3, r3, #8
 4860 15fa 9AB2     		uxth	r2, r3
 4861 15fc 7B68     		ldr	r3, [r7, #4]
 4862 15fe 1A80     		strh	r2, [r3]	@ movhi
2178:lib/src/stm32f10x_tim.c ****   /* Configure the OPM Mode */
2179:lib/src/stm32f10x_tim.c ****   TIMx->CR1 |= TIM_OPMode;
 4863              		.loc 1 2179 0
 4864 1600 7B68     		ldr	r3, [r7, #4]
 4865 1602 1B88     		ldrh	r3, [r3]	@ movhi
 4866 1604 9AB2     		uxth	r2, r3
 4867 1606 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4868 1608 1343     		orrs	r3, r3, r2
 4869 160a 9AB2     		uxth	r2, r3
 4870 160c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccNus05k.s 			page 126


 4871 160e 1A80     		strh	r2, [r3]	@ movhi
2180:lib/src/stm32f10x_tim.c **** }
 4872              		.loc 1 2180 0
 4873 1610 00BF     		nop
 4874 1612 0C37     		adds	r7, r7, #12
 4875              		.cfi_def_cfa_offset 4
 4876 1614 BD46     		mov	sp, r7
 4877              		.cfi_def_cfa_register 13
 4878              		@ sp needed
 4879 1616 80BC     		pop	{r7}
 4880              		.cfi_restore 7
 4881              		.cfi_def_cfa_offset 0
 4882 1618 7047     		bx	lr
 4883              		.cfi_endproc
 4884              	.LFE126:
 4885              		.size	TIM_SelectOnePulseMode, .-TIM_SelectOnePulseMode
 4886              		.align	1
 4887              		.global	TIM_SelectOutputTrigger
 4888              		.syntax unified
 4889              		.thumb
 4890              		.thumb_func
 4891              		.fpu softvfp
 4892              		.type	TIM_SelectOutputTrigger, %function
 4893              	TIM_SelectOutputTrigger:
 4894              	.LFB127:
2181:lib/src/stm32f10x_tim.c **** 
2182:lib/src/stm32f10x_tim.c **** /**
2183:lib/src/stm32f10x_tim.c ****   * @brief  Selects the TIMx Trigger Output Mode.
2184:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 6, 7, 8, 9, 12 or 15 to select the TIM peripheral.
2185:lib/src/stm32f10x_tim.c ****   * @param  TIM_TRGOSource: specifies the Trigger Output source.
2186:lib/src/stm32f10x_tim.c ****   *   This paramter can be one of the following values:
2187:lib/src/stm32f10x_tim.c ****   *
2188:lib/src/stm32f10x_tim.c ****   *  - For all TIMx
2189:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_Reset:  The UG bit in the TIM_EGR register is used as the trigger outpu
2190:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_Enable: The Counter Enable CEN is used as the trigger output (TRGO).
2191:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_Update: The update event is selected as the trigger output (TRGO).
2192:lib/src/stm32f10x_tim.c ****   *
2193:lib/src/stm32f10x_tim.c ****   *  - For all TIMx except TIM6 and TIM7
2194:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC1: The trigger output sends a positive pulse when the CC1IF flag
2195:lib/src/stm32f10x_tim.c ****   *                              is to be set, as soon as a capture or compare match occurs (TRGO).
2196:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC1Ref: OC1REF signal is used as the trigger output (TRGO).
2197:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC2Ref: OC2REF signal is used as the trigger output (TRGO).
2198:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC3Ref: OC3REF signal is used as the trigger output (TRGO).
2199:lib/src/stm32f10x_tim.c ****   *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
2200:lib/src/stm32f10x_tim.c ****   *
2201:lib/src/stm32f10x_tim.c ****   * @retval None
2202:lib/src/stm32f10x_tim.c ****   */
2203:lib/src/stm32f10x_tim.c **** void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
2204:lib/src/stm32f10x_tim.c **** {
 4895              		.loc 1 2204 0
 4896              		.cfi_startproc
 4897              		@ args = 0, pretend = 0, frame = 8
 4898              		@ frame_needed = 1, uses_anonymous_args = 0
 4899              		@ link register save eliminated.
 4900 161a 80B4     		push	{r7}
 4901              		.cfi_def_cfa_offset 4
 4902              		.cfi_offset 7, -4
ARM GAS  /tmp/ccNus05k.s 			page 127


 4903 161c 83B0     		sub	sp, sp, #12
 4904              		.cfi_def_cfa_offset 16
 4905 161e 00AF     		add	r7, sp, #0
 4906              		.cfi_def_cfa_register 7
 4907 1620 7860     		str	r0, [r7, #4]
 4908 1622 0B46     		mov	r3, r1
 4909 1624 7B80     		strh	r3, [r7, #2]	@ movhi
2205:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2206:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST7_PERIPH(TIMx));
2207:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
2208:lib/src/stm32f10x_tim.c ****   /* Reset the MMS Bits */
2209:lib/src/stm32f10x_tim.c ****   TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 4910              		.loc 1 2209 0
 4911 1626 7B68     		ldr	r3, [r7, #4]
 4912 1628 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4913 162a 9BB2     		uxth	r3, r3
 4914 162c 23F07003 		bic	r3, r3, #112
 4915 1630 9AB2     		uxth	r2, r3
 4916 1632 7B68     		ldr	r3, [r7, #4]
 4917 1634 9A80     		strh	r2, [r3, #4]	@ movhi
2210:lib/src/stm32f10x_tim.c ****   /* Select the TRGO source */
2211:lib/src/stm32f10x_tim.c ****   TIMx->CR2 |=  TIM_TRGOSource;
 4918              		.loc 1 2211 0
 4919 1636 7B68     		ldr	r3, [r7, #4]
 4920 1638 9B88     		ldrh	r3, [r3, #4]	@ movhi
 4921 163a 9AB2     		uxth	r2, r3
 4922 163c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4923 163e 1343     		orrs	r3, r3, r2
 4924 1640 9AB2     		uxth	r2, r3
 4925 1642 7B68     		ldr	r3, [r7, #4]
 4926 1644 9A80     		strh	r2, [r3, #4]	@ movhi
2212:lib/src/stm32f10x_tim.c **** }
 4927              		.loc 1 2212 0
 4928 1646 00BF     		nop
 4929 1648 0C37     		adds	r7, r7, #12
 4930              		.cfi_def_cfa_offset 4
 4931 164a BD46     		mov	sp, r7
 4932              		.cfi_def_cfa_register 13
 4933              		@ sp needed
 4934 164c 80BC     		pop	{r7}
 4935              		.cfi_restore 7
 4936              		.cfi_def_cfa_offset 0
 4937 164e 7047     		bx	lr
 4938              		.cfi_endproc
 4939              	.LFE127:
 4940              		.size	TIM_SelectOutputTrigger, .-TIM_SelectOutputTrigger
 4941              		.align	1
 4942              		.global	TIM_SelectSlaveMode
 4943              		.syntax unified
 4944              		.thumb
 4945              		.thumb_func
 4946              		.fpu softvfp
 4947              		.type	TIM_SelectSlaveMode, %function
 4948              	TIM_SelectSlaveMode:
 4949              	.LFB128:
2213:lib/src/stm32f10x_tim.c **** 
2214:lib/src/stm32f10x_tim.c **** /**
ARM GAS  /tmp/ccNus05k.s 			page 128


2215:lib/src/stm32f10x_tim.c ****   * @brief  Selects the TIMx Slave Mode.
2216:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2217:lib/src/stm32f10x_tim.c ****   * @param  TIM_SlaveMode: specifies the Timer Slave Mode.
2218:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2219:lib/src/stm32f10x_tim.c ****   *     @arg TIM_SlaveMode_Reset: Rising edge of the selected trigger signal (TRGI) re-initializes
2220:lib/src/stm32f10x_tim.c ****   *                               the counter and triggers an update of the registers.
2221:lib/src/stm32f10x_tim.c ****   *     @arg TIM_SlaveMode_Gated:     The counter clock is enabled when the trigger signal (TRGI) i
2222:lib/src/stm32f10x_tim.c ****   *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
2223:lib/src/stm32f10x_tim.c ****   *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter
2224:lib/src/stm32f10x_tim.c ****   * @retval None
2225:lib/src/stm32f10x_tim.c ****   */
2226:lib/src/stm32f10x_tim.c **** void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
2227:lib/src/stm32f10x_tim.c **** {
 4950              		.loc 1 2227 0
 4951              		.cfi_startproc
 4952              		@ args = 0, pretend = 0, frame = 8
 4953              		@ frame_needed = 1, uses_anonymous_args = 0
 4954              		@ link register save eliminated.
 4955 1650 80B4     		push	{r7}
 4956              		.cfi_def_cfa_offset 4
 4957              		.cfi_offset 7, -4
 4958 1652 83B0     		sub	sp, sp, #12
 4959              		.cfi_def_cfa_offset 16
 4960 1654 00AF     		add	r7, sp, #0
 4961              		.cfi_def_cfa_register 7
 4962 1656 7860     		str	r0, [r7, #4]
 4963 1658 0B46     		mov	r3, r1
 4964 165a 7B80     		strh	r3, [r7, #2]	@ movhi
2228:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2229:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2230:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
2231:lib/src/stm32f10x_tim.c ****  /* Reset the SMS Bits */
2232:lib/src/stm32f10x_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 4965              		.loc 1 2232 0
 4966 165c 7B68     		ldr	r3, [r7, #4]
 4967 165e 1B89     		ldrh	r3, [r3, #8]	@ movhi
 4968 1660 9BB2     		uxth	r3, r3
 4969 1662 23F00703 		bic	r3, r3, #7
 4970 1666 9AB2     		uxth	r2, r3
 4971 1668 7B68     		ldr	r3, [r7, #4]
 4972 166a 1A81     		strh	r2, [r3, #8]	@ movhi
2233:lib/src/stm32f10x_tim.c ****   /* Select the Slave Mode */
2234:lib/src/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_SlaveMode;
 4973              		.loc 1 2234 0
 4974 166c 7B68     		ldr	r3, [r7, #4]
 4975 166e 1B89     		ldrh	r3, [r3, #8]	@ movhi
 4976 1670 9AB2     		uxth	r2, r3
 4977 1672 7B88     		ldrh	r3, [r7, #2]	@ movhi
 4978 1674 1343     		orrs	r3, r3, r2
 4979 1676 9AB2     		uxth	r2, r3
 4980 1678 7B68     		ldr	r3, [r7, #4]
 4981 167a 1A81     		strh	r2, [r3, #8]	@ movhi
2235:lib/src/stm32f10x_tim.c **** }
 4982              		.loc 1 2235 0
 4983 167c 00BF     		nop
 4984 167e 0C37     		adds	r7, r7, #12
 4985              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccNus05k.s 			page 129


 4986 1680 BD46     		mov	sp, r7
 4987              		.cfi_def_cfa_register 13
 4988              		@ sp needed
 4989 1682 80BC     		pop	{r7}
 4990              		.cfi_restore 7
 4991              		.cfi_def_cfa_offset 0
 4992 1684 7047     		bx	lr
 4993              		.cfi_endproc
 4994              	.LFE128:
 4995              		.size	TIM_SelectSlaveMode, .-TIM_SelectSlaveMode
 4996              		.align	1
 4997              		.global	TIM_SelectMasterSlaveMode
 4998              		.syntax unified
 4999              		.thumb
 5000              		.thumb_func
 5001              		.fpu softvfp
 5002              		.type	TIM_SelectMasterSlaveMode, %function
 5003              	TIM_SelectMasterSlaveMode:
 5004              	.LFB129:
2236:lib/src/stm32f10x_tim.c **** 
2237:lib/src/stm32f10x_tim.c **** /**
2238:lib/src/stm32f10x_tim.c ****   * @brief  Sets or Resets the TIMx Master/Slave Mode.
2239:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2240:lib/src/stm32f10x_tim.c ****   * @param  TIM_MasterSlaveMode: specifies the Timer Master Slave Mode.
2241:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2242:lib/src/stm32f10x_tim.c ****   *     @arg TIM_MasterSlaveMode_Enable: synchronization between the current timer
2243:lib/src/stm32f10x_tim.c ****   *                                      and its slaves (through TRGO).
2244:lib/src/stm32f10x_tim.c ****   *     @arg TIM_MasterSlaveMode_Disable: No action
2245:lib/src/stm32f10x_tim.c ****   * @retval None
2246:lib/src/stm32f10x_tim.c ****   */
2247:lib/src/stm32f10x_tim.c **** void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
2248:lib/src/stm32f10x_tim.c **** {
 5005              		.loc 1 2248 0
 5006              		.cfi_startproc
 5007              		@ args = 0, pretend = 0, frame = 8
 5008              		@ frame_needed = 1, uses_anonymous_args = 0
 5009              		@ link register save eliminated.
 5010 1686 80B4     		push	{r7}
 5011              		.cfi_def_cfa_offset 4
 5012              		.cfi_offset 7, -4
 5013 1688 83B0     		sub	sp, sp, #12
 5014              		.cfi_def_cfa_offset 16
 5015 168a 00AF     		add	r7, sp, #0
 5016              		.cfi_def_cfa_register 7
 5017 168c 7860     		str	r0, [r7, #4]
 5018 168e 0B46     		mov	r3, r1
 5019 1690 7B80     		strh	r3, [r7, #2]	@ movhi
2249:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2250:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2251:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
2252:lib/src/stm32f10x_tim.c ****   /* Reset the MSM Bit */
2253:lib/src/stm32f10x_tim.c ****   TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 5020              		.loc 1 2253 0
 5021 1692 7B68     		ldr	r3, [r7, #4]
 5022 1694 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5023 1696 9BB2     		uxth	r3, r3
 5024 1698 23F08003 		bic	r3, r3, #128
ARM GAS  /tmp/ccNus05k.s 			page 130


 5025 169c 9AB2     		uxth	r2, r3
 5026 169e 7B68     		ldr	r3, [r7, #4]
 5027 16a0 1A81     		strh	r2, [r3, #8]	@ movhi
2254:lib/src/stm32f10x_tim.c ****   
2255:lib/src/stm32f10x_tim.c ****   /* Set or Reset the MSM Bit */
2256:lib/src/stm32f10x_tim.c ****   TIMx->SMCR |= TIM_MasterSlaveMode;
 5028              		.loc 1 2256 0
 5029 16a2 7B68     		ldr	r3, [r7, #4]
 5030 16a4 1B89     		ldrh	r3, [r3, #8]	@ movhi
 5031 16a6 9AB2     		uxth	r2, r3
 5032 16a8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5033 16aa 1343     		orrs	r3, r3, r2
 5034 16ac 9AB2     		uxth	r2, r3
 5035 16ae 7B68     		ldr	r3, [r7, #4]
 5036 16b0 1A81     		strh	r2, [r3, #8]	@ movhi
2257:lib/src/stm32f10x_tim.c **** }
 5037              		.loc 1 2257 0
 5038 16b2 00BF     		nop
 5039 16b4 0C37     		adds	r7, r7, #12
 5040              		.cfi_def_cfa_offset 4
 5041 16b6 BD46     		mov	sp, r7
 5042              		.cfi_def_cfa_register 13
 5043              		@ sp needed
 5044 16b8 80BC     		pop	{r7}
 5045              		.cfi_restore 7
 5046              		.cfi_def_cfa_offset 0
 5047 16ba 7047     		bx	lr
 5048              		.cfi_endproc
 5049              	.LFE129:
 5050              		.size	TIM_SelectMasterSlaveMode, .-TIM_SelectMasterSlaveMode
 5051              		.align	1
 5052              		.global	TIM_SetCounter
 5053              		.syntax unified
 5054              		.thumb
 5055              		.thumb_func
 5056              		.fpu softvfp
 5057              		.type	TIM_SetCounter, %function
 5058              	TIM_SetCounter:
 5059              	.LFB130:
2258:lib/src/stm32f10x_tim.c **** 
2259:lib/src/stm32f10x_tim.c **** /**
2260:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Counter Register value
2261:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2262:lib/src/stm32f10x_tim.c ****   * @param  Counter: specifies the Counter register new value.
2263:lib/src/stm32f10x_tim.c ****   * @retval None
2264:lib/src/stm32f10x_tim.c ****   */
2265:lib/src/stm32f10x_tim.c **** void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
2266:lib/src/stm32f10x_tim.c **** {
 5060              		.loc 1 2266 0
 5061              		.cfi_startproc
 5062              		@ args = 0, pretend = 0, frame = 8
 5063              		@ frame_needed = 1, uses_anonymous_args = 0
 5064              		@ link register save eliminated.
 5065 16bc 80B4     		push	{r7}
 5066              		.cfi_def_cfa_offset 4
 5067              		.cfi_offset 7, -4
 5068 16be 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccNus05k.s 			page 131


 5069              		.cfi_def_cfa_offset 16
 5070 16c0 00AF     		add	r7, sp, #0
 5071              		.cfi_def_cfa_register 7
 5072 16c2 7860     		str	r0, [r7, #4]
 5073 16c4 0B46     		mov	r3, r1
 5074 16c6 7B80     		strh	r3, [r7, #2]	@ movhi
2267:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2268:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2269:lib/src/stm32f10x_tim.c ****   /* Set the Counter Register value */
2270:lib/src/stm32f10x_tim.c ****   TIMx->CNT = Counter;
 5075              		.loc 1 2270 0
 5076 16c8 7B68     		ldr	r3, [r7, #4]
 5077 16ca 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5078 16cc 9A84     		strh	r2, [r3, #36]	@ movhi
2271:lib/src/stm32f10x_tim.c **** }
 5079              		.loc 1 2271 0
 5080 16ce 00BF     		nop
 5081 16d0 0C37     		adds	r7, r7, #12
 5082              		.cfi_def_cfa_offset 4
 5083 16d2 BD46     		mov	sp, r7
 5084              		.cfi_def_cfa_register 13
 5085              		@ sp needed
 5086 16d4 80BC     		pop	{r7}
 5087              		.cfi_restore 7
 5088              		.cfi_def_cfa_offset 0
 5089 16d6 7047     		bx	lr
 5090              		.cfi_endproc
 5091              	.LFE130:
 5092              		.size	TIM_SetCounter, .-TIM_SetCounter
 5093              		.align	1
 5094              		.global	TIM_SetAutoreload
 5095              		.syntax unified
 5096              		.thumb
 5097              		.thumb_func
 5098              		.fpu softvfp
 5099              		.type	TIM_SetAutoreload, %function
 5100              	TIM_SetAutoreload:
 5101              	.LFB131:
2272:lib/src/stm32f10x_tim.c **** 
2273:lib/src/stm32f10x_tim.c **** /**
2274:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Autoreload Register value
2275:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2276:lib/src/stm32f10x_tim.c ****   * @param  Autoreload: specifies the Autoreload register new value.
2277:lib/src/stm32f10x_tim.c ****   * @retval None
2278:lib/src/stm32f10x_tim.c ****   */
2279:lib/src/stm32f10x_tim.c **** void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
2280:lib/src/stm32f10x_tim.c **** {
 5102              		.loc 1 2280 0
 5103              		.cfi_startproc
 5104              		@ args = 0, pretend = 0, frame = 8
 5105              		@ frame_needed = 1, uses_anonymous_args = 0
 5106              		@ link register save eliminated.
 5107 16d8 80B4     		push	{r7}
 5108              		.cfi_def_cfa_offset 4
 5109              		.cfi_offset 7, -4
 5110 16da 83B0     		sub	sp, sp, #12
 5111              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccNus05k.s 			page 132


 5112 16dc 00AF     		add	r7, sp, #0
 5113              		.cfi_def_cfa_register 7
 5114 16de 7860     		str	r0, [r7, #4]
 5115 16e0 0B46     		mov	r3, r1
 5116 16e2 7B80     		strh	r3, [r7, #2]	@ movhi
2281:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2282:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2283:lib/src/stm32f10x_tim.c ****   /* Set the Autoreload Register value */
2284:lib/src/stm32f10x_tim.c ****   TIMx->ARR = Autoreload;
 5117              		.loc 1 2284 0
 5118 16e4 7B68     		ldr	r3, [r7, #4]
 5119 16e6 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5120 16e8 9A85     		strh	r2, [r3, #44]	@ movhi
2285:lib/src/stm32f10x_tim.c **** }
 5121              		.loc 1 2285 0
 5122 16ea 00BF     		nop
 5123 16ec 0C37     		adds	r7, r7, #12
 5124              		.cfi_def_cfa_offset 4
 5125 16ee BD46     		mov	sp, r7
 5126              		.cfi_def_cfa_register 13
 5127              		@ sp needed
 5128 16f0 80BC     		pop	{r7}
 5129              		.cfi_restore 7
 5130              		.cfi_def_cfa_offset 0
 5131 16f2 7047     		bx	lr
 5132              		.cfi_endproc
 5133              	.LFE131:
 5134              		.size	TIM_SetAutoreload, .-TIM_SetAutoreload
 5135              		.align	1
 5136              		.global	TIM_SetCompare1
 5137              		.syntax unified
 5138              		.thumb
 5139              		.thumb_func
 5140              		.fpu softvfp
 5141              		.type	TIM_SetCompare1, %function
 5142              	TIM_SetCompare1:
 5143              	.LFB132:
2286:lib/src/stm32f10x_tim.c **** 
2287:lib/src/stm32f10x_tim.c **** /**
2288:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Capture Compare1 Register value
2289:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2290:lib/src/stm32f10x_tim.c ****   * @param  Compare1: specifies the Capture Compare1 register new value.
2291:lib/src/stm32f10x_tim.c ****   * @retval None
2292:lib/src/stm32f10x_tim.c ****   */
2293:lib/src/stm32f10x_tim.c **** void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
2294:lib/src/stm32f10x_tim.c **** {
 5144              		.loc 1 2294 0
 5145              		.cfi_startproc
 5146              		@ args = 0, pretend = 0, frame = 8
 5147              		@ frame_needed = 1, uses_anonymous_args = 0
 5148              		@ link register save eliminated.
 5149 16f4 80B4     		push	{r7}
 5150              		.cfi_def_cfa_offset 4
 5151              		.cfi_offset 7, -4
 5152 16f6 83B0     		sub	sp, sp, #12
 5153              		.cfi_def_cfa_offset 16
 5154 16f8 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccNus05k.s 			page 133


 5155              		.cfi_def_cfa_register 7
 5156 16fa 7860     		str	r0, [r7, #4]
 5157 16fc 0B46     		mov	r3, r1
 5158 16fe 7B80     		strh	r3, [r7, #2]	@ movhi
2295:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2296:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2297:lib/src/stm32f10x_tim.c ****   /* Set the Capture Compare1 Register value */
2298:lib/src/stm32f10x_tim.c ****   TIMx->CCR1 = Compare1;
 5159              		.loc 1 2298 0
 5160 1700 7B68     		ldr	r3, [r7, #4]
 5161 1702 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5162 1704 9A86     		strh	r2, [r3, #52]	@ movhi
2299:lib/src/stm32f10x_tim.c **** }
 5163              		.loc 1 2299 0
 5164 1706 00BF     		nop
 5165 1708 0C37     		adds	r7, r7, #12
 5166              		.cfi_def_cfa_offset 4
 5167 170a BD46     		mov	sp, r7
 5168              		.cfi_def_cfa_register 13
 5169              		@ sp needed
 5170 170c 80BC     		pop	{r7}
 5171              		.cfi_restore 7
 5172              		.cfi_def_cfa_offset 0
 5173 170e 7047     		bx	lr
 5174              		.cfi_endproc
 5175              	.LFE132:
 5176              		.size	TIM_SetCompare1, .-TIM_SetCompare1
 5177              		.align	1
 5178              		.global	TIM_SetCompare2
 5179              		.syntax unified
 5180              		.thumb
 5181              		.thumb_func
 5182              		.fpu softvfp
 5183              		.type	TIM_SetCompare2, %function
 5184              	TIM_SetCompare2:
 5185              	.LFB133:
2300:lib/src/stm32f10x_tim.c **** 
2301:lib/src/stm32f10x_tim.c **** /**
2302:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Capture Compare2 Register value
2303:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2304:lib/src/stm32f10x_tim.c ****   * @param  Compare2: specifies the Capture Compare2 register new value.
2305:lib/src/stm32f10x_tim.c ****   * @retval None
2306:lib/src/stm32f10x_tim.c ****   */
2307:lib/src/stm32f10x_tim.c **** void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
2308:lib/src/stm32f10x_tim.c **** {
 5186              		.loc 1 2308 0
 5187              		.cfi_startproc
 5188              		@ args = 0, pretend = 0, frame = 8
 5189              		@ frame_needed = 1, uses_anonymous_args = 0
 5190              		@ link register save eliminated.
 5191 1710 80B4     		push	{r7}
 5192              		.cfi_def_cfa_offset 4
 5193              		.cfi_offset 7, -4
 5194 1712 83B0     		sub	sp, sp, #12
 5195              		.cfi_def_cfa_offset 16
 5196 1714 00AF     		add	r7, sp, #0
 5197              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccNus05k.s 			page 134


 5198 1716 7860     		str	r0, [r7, #4]
 5199 1718 0B46     		mov	r3, r1
 5200 171a 7B80     		strh	r3, [r7, #2]	@ movhi
2309:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2310:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2311:lib/src/stm32f10x_tim.c ****   /* Set the Capture Compare2 Register value */
2312:lib/src/stm32f10x_tim.c ****   TIMx->CCR2 = Compare2;
 5201              		.loc 1 2312 0
 5202 171c 7B68     		ldr	r3, [r7, #4]
 5203 171e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5204 1720 1A87     		strh	r2, [r3, #56]	@ movhi
2313:lib/src/stm32f10x_tim.c **** }
 5205              		.loc 1 2313 0
 5206 1722 00BF     		nop
 5207 1724 0C37     		adds	r7, r7, #12
 5208              		.cfi_def_cfa_offset 4
 5209 1726 BD46     		mov	sp, r7
 5210              		.cfi_def_cfa_register 13
 5211              		@ sp needed
 5212 1728 80BC     		pop	{r7}
 5213              		.cfi_restore 7
 5214              		.cfi_def_cfa_offset 0
 5215 172a 7047     		bx	lr
 5216              		.cfi_endproc
 5217              	.LFE133:
 5218              		.size	TIM_SetCompare2, .-TIM_SetCompare2
 5219              		.align	1
 5220              		.global	TIM_SetCompare3
 5221              		.syntax unified
 5222              		.thumb
 5223              		.thumb_func
 5224              		.fpu softvfp
 5225              		.type	TIM_SetCompare3, %function
 5226              	TIM_SetCompare3:
 5227              	.LFB134:
2314:lib/src/stm32f10x_tim.c **** 
2315:lib/src/stm32f10x_tim.c **** /**
2316:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Capture Compare3 Register value
2317:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2318:lib/src/stm32f10x_tim.c ****   * @param  Compare3: specifies the Capture Compare3 register new value.
2319:lib/src/stm32f10x_tim.c ****   * @retval None
2320:lib/src/stm32f10x_tim.c ****   */
2321:lib/src/stm32f10x_tim.c **** void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
2322:lib/src/stm32f10x_tim.c **** {
 5228              		.loc 1 2322 0
 5229              		.cfi_startproc
 5230              		@ args = 0, pretend = 0, frame = 8
 5231              		@ frame_needed = 1, uses_anonymous_args = 0
 5232              		@ link register save eliminated.
 5233 172c 80B4     		push	{r7}
 5234              		.cfi_def_cfa_offset 4
 5235              		.cfi_offset 7, -4
 5236 172e 83B0     		sub	sp, sp, #12
 5237              		.cfi_def_cfa_offset 16
 5238 1730 00AF     		add	r7, sp, #0
 5239              		.cfi_def_cfa_register 7
 5240 1732 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccNus05k.s 			page 135


 5241 1734 0B46     		mov	r3, r1
 5242 1736 7B80     		strh	r3, [r7, #2]	@ movhi
2323:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2324:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2325:lib/src/stm32f10x_tim.c ****   /* Set the Capture Compare3 Register value */
2326:lib/src/stm32f10x_tim.c ****   TIMx->CCR3 = Compare3;
 5243              		.loc 1 2326 0
 5244 1738 7B68     		ldr	r3, [r7, #4]
 5245 173a 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5246 173c 9A87     		strh	r2, [r3, #60]	@ movhi
2327:lib/src/stm32f10x_tim.c **** }
 5247              		.loc 1 2327 0
 5248 173e 00BF     		nop
 5249 1740 0C37     		adds	r7, r7, #12
 5250              		.cfi_def_cfa_offset 4
 5251 1742 BD46     		mov	sp, r7
 5252              		.cfi_def_cfa_register 13
 5253              		@ sp needed
 5254 1744 80BC     		pop	{r7}
 5255              		.cfi_restore 7
 5256              		.cfi_def_cfa_offset 0
 5257 1746 7047     		bx	lr
 5258              		.cfi_endproc
 5259              	.LFE134:
 5260              		.size	TIM_SetCompare3, .-TIM_SetCompare3
 5261              		.align	1
 5262              		.global	TIM_SetCompare4
 5263              		.syntax unified
 5264              		.thumb
 5265              		.thumb_func
 5266              		.fpu softvfp
 5267              		.type	TIM_SetCompare4, %function
 5268              	TIM_SetCompare4:
 5269              	.LFB135:
2328:lib/src/stm32f10x_tim.c **** 
2329:lib/src/stm32f10x_tim.c **** /**
2330:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Capture Compare4 Register value
2331:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2332:lib/src/stm32f10x_tim.c ****   * @param  Compare4: specifies the Capture Compare4 register new value.
2333:lib/src/stm32f10x_tim.c ****   * @retval None
2334:lib/src/stm32f10x_tim.c ****   */
2335:lib/src/stm32f10x_tim.c **** void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
2336:lib/src/stm32f10x_tim.c **** {
 5270              		.loc 1 2336 0
 5271              		.cfi_startproc
 5272              		@ args = 0, pretend = 0, frame = 8
 5273              		@ frame_needed = 1, uses_anonymous_args = 0
 5274              		@ link register save eliminated.
 5275 1748 80B4     		push	{r7}
 5276              		.cfi_def_cfa_offset 4
 5277              		.cfi_offset 7, -4
 5278 174a 83B0     		sub	sp, sp, #12
 5279              		.cfi_def_cfa_offset 16
 5280 174c 00AF     		add	r7, sp, #0
 5281              		.cfi_def_cfa_register 7
 5282 174e 7860     		str	r0, [r7, #4]
 5283 1750 0B46     		mov	r3, r1
ARM GAS  /tmp/ccNus05k.s 			page 136


 5284 1752 7B80     		strh	r3, [r7, #2]	@ movhi
2337:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2338:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2339:lib/src/stm32f10x_tim.c ****   /* Set the Capture Compare4 Register value */
2340:lib/src/stm32f10x_tim.c ****   TIMx->CCR4 = Compare4;
 5285              		.loc 1 2340 0
 5286 1754 7B68     		ldr	r3, [r7, #4]
 5287 1756 7A88     		ldrh	r2, [r7, #2]	@ movhi
 5288 1758 A3F84020 		strh	r2, [r3, #64]	@ movhi
2341:lib/src/stm32f10x_tim.c **** }
 5289              		.loc 1 2341 0
 5290 175c 00BF     		nop
 5291 175e 0C37     		adds	r7, r7, #12
 5292              		.cfi_def_cfa_offset 4
 5293 1760 BD46     		mov	sp, r7
 5294              		.cfi_def_cfa_register 13
 5295              		@ sp needed
 5296 1762 80BC     		pop	{r7}
 5297              		.cfi_restore 7
 5298              		.cfi_def_cfa_offset 0
 5299 1764 7047     		bx	lr
 5300              		.cfi_endproc
 5301              	.LFE135:
 5302              		.size	TIM_SetCompare4, .-TIM_SetCompare4
 5303              		.align	1
 5304              		.global	TIM_SetIC1Prescaler
 5305              		.syntax unified
 5306              		.thumb
 5307              		.thumb_func
 5308              		.fpu softvfp
 5309              		.type	TIM_SetIC1Prescaler, %function
 5310              	TIM_SetIC1Prescaler:
 5311              	.LFB136:
2342:lib/src/stm32f10x_tim.c **** 
2343:lib/src/stm32f10x_tim.c **** /**
2344:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Input Capture 1 prescaler.
2345:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2346:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture1 prescaler new value.
2347:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2348:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV1: no prescaler
2349:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2350:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2351:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2352:lib/src/stm32f10x_tim.c ****   * @retval None
2353:lib/src/stm32f10x_tim.c ****   */
2354:lib/src/stm32f10x_tim.c **** void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2355:lib/src/stm32f10x_tim.c **** {
 5312              		.loc 1 2355 0
 5313              		.cfi_startproc
 5314              		@ args = 0, pretend = 0, frame = 8
 5315              		@ frame_needed = 1, uses_anonymous_args = 0
 5316              		@ link register save eliminated.
 5317 1766 80B4     		push	{r7}
 5318              		.cfi_def_cfa_offset 4
 5319              		.cfi_offset 7, -4
 5320 1768 83B0     		sub	sp, sp, #12
 5321              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccNus05k.s 			page 137


 5322 176a 00AF     		add	r7, sp, #0
 5323              		.cfi_def_cfa_register 7
 5324 176c 7860     		str	r0, [r7, #4]
 5325 176e 0B46     		mov	r3, r1
 5326 1770 7B80     		strh	r3, [r7, #2]	@ movhi
2356:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2357:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2358:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2359:lib/src/stm32f10x_tim.c ****   /* Reset the IC1PSC Bits */
2360:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 5327              		.loc 1 2360 0
 5328 1772 7B68     		ldr	r3, [r7, #4]
 5329 1774 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 5330 1776 9BB2     		uxth	r3, r3
 5331 1778 23F00C03 		bic	r3, r3, #12
 5332 177c 9AB2     		uxth	r2, r3
 5333 177e 7B68     		ldr	r3, [r7, #4]
 5334 1780 1A83     		strh	r2, [r3, #24]	@ movhi
2361:lib/src/stm32f10x_tim.c ****   /* Set the IC1PSC value */
2362:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 |= TIM_ICPSC;
 5335              		.loc 1 2362 0
 5336 1782 7B68     		ldr	r3, [r7, #4]
 5337 1784 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 5338 1786 9AB2     		uxth	r2, r3
 5339 1788 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5340 178a 1343     		orrs	r3, r3, r2
 5341 178c 9AB2     		uxth	r2, r3
 5342 178e 7B68     		ldr	r3, [r7, #4]
 5343 1790 1A83     		strh	r2, [r3, #24]	@ movhi
2363:lib/src/stm32f10x_tim.c **** }
 5344              		.loc 1 2363 0
 5345 1792 00BF     		nop
 5346 1794 0C37     		adds	r7, r7, #12
 5347              		.cfi_def_cfa_offset 4
 5348 1796 BD46     		mov	sp, r7
 5349              		.cfi_def_cfa_register 13
 5350              		@ sp needed
 5351 1798 80BC     		pop	{r7}
 5352              		.cfi_restore 7
 5353              		.cfi_def_cfa_offset 0
 5354 179a 7047     		bx	lr
 5355              		.cfi_endproc
 5356              	.LFE136:
 5357              		.size	TIM_SetIC1Prescaler, .-TIM_SetIC1Prescaler
 5358              		.align	1
 5359              		.global	TIM_SetIC2Prescaler
 5360              		.syntax unified
 5361              		.thumb
 5362              		.thumb_func
 5363              		.fpu softvfp
 5364              		.type	TIM_SetIC2Prescaler, %function
 5365              	TIM_SetIC2Prescaler:
 5366              	.LFB137:
2364:lib/src/stm32f10x_tim.c **** 
2365:lib/src/stm32f10x_tim.c **** /**
2366:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Input Capture 2 prescaler.
2367:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
ARM GAS  /tmp/ccNus05k.s 			page 138


2368:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture2 prescaler new value.
2369:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2370:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV1: no prescaler
2371:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2372:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2373:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2374:lib/src/stm32f10x_tim.c ****   * @retval None
2375:lib/src/stm32f10x_tim.c ****   */
2376:lib/src/stm32f10x_tim.c **** void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2377:lib/src/stm32f10x_tim.c **** {
 5367              		.loc 1 2377 0
 5368              		.cfi_startproc
 5369              		@ args = 0, pretend = 0, frame = 8
 5370              		@ frame_needed = 1, uses_anonymous_args = 0
 5371              		@ link register save eliminated.
 5372 179c 80B4     		push	{r7}
 5373              		.cfi_def_cfa_offset 4
 5374              		.cfi_offset 7, -4
 5375 179e 83B0     		sub	sp, sp, #12
 5376              		.cfi_def_cfa_offset 16
 5377 17a0 00AF     		add	r7, sp, #0
 5378              		.cfi_def_cfa_register 7
 5379 17a2 7860     		str	r0, [r7, #4]
 5380 17a4 0B46     		mov	r3, r1
 5381 17a6 7B80     		strh	r3, [r7, #2]	@ movhi
2378:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2379:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2380:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2381:lib/src/stm32f10x_tim.c ****   /* Reset the IC2PSC Bits */
2382:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 5382              		.loc 1 2382 0
 5383 17a8 7B68     		ldr	r3, [r7, #4]
 5384 17aa 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 5385 17ac 9BB2     		uxth	r3, r3
 5386 17ae 23F44063 		bic	r3, r3, #3072
 5387 17b2 9AB2     		uxth	r2, r3
 5388 17b4 7B68     		ldr	r3, [r7, #4]
 5389 17b6 1A83     		strh	r2, [r3, #24]	@ movhi
2383:lib/src/stm32f10x_tim.c ****   /* Set the IC2PSC value */
2384:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 5390              		.loc 1 2384 0
 5391 17b8 7B68     		ldr	r3, [r7, #4]
 5392 17ba 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 5393 17bc 9AB2     		uxth	r2, r3
 5394 17be 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5395 17c0 1B02     		lsls	r3, r3, #8
 5396 17c2 9BB2     		uxth	r3, r3
 5397 17c4 1343     		orrs	r3, r3, r2
 5398 17c6 9AB2     		uxth	r2, r3
 5399 17c8 7B68     		ldr	r3, [r7, #4]
 5400 17ca 1A83     		strh	r2, [r3, #24]	@ movhi
2385:lib/src/stm32f10x_tim.c **** }
 5401              		.loc 1 2385 0
 5402 17cc 00BF     		nop
 5403 17ce 0C37     		adds	r7, r7, #12
 5404              		.cfi_def_cfa_offset 4
 5405 17d0 BD46     		mov	sp, r7
ARM GAS  /tmp/ccNus05k.s 			page 139


 5406              		.cfi_def_cfa_register 13
 5407              		@ sp needed
 5408 17d2 80BC     		pop	{r7}
 5409              		.cfi_restore 7
 5410              		.cfi_def_cfa_offset 0
 5411 17d4 7047     		bx	lr
 5412              		.cfi_endproc
 5413              	.LFE137:
 5414              		.size	TIM_SetIC2Prescaler, .-TIM_SetIC2Prescaler
 5415              		.align	1
 5416              		.global	TIM_SetIC3Prescaler
 5417              		.syntax unified
 5418              		.thumb
 5419              		.thumb_func
 5420              		.fpu softvfp
 5421              		.type	TIM_SetIC3Prescaler, %function
 5422              	TIM_SetIC3Prescaler:
 5423              	.LFB138:
2386:lib/src/stm32f10x_tim.c **** 
2387:lib/src/stm32f10x_tim.c **** /**
2388:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Input Capture 3 prescaler.
2389:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2390:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture3 prescaler new value.
2391:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2392:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV1: no prescaler
2393:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2394:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2395:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2396:lib/src/stm32f10x_tim.c ****   * @retval None
2397:lib/src/stm32f10x_tim.c ****   */
2398:lib/src/stm32f10x_tim.c **** void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2399:lib/src/stm32f10x_tim.c **** {
 5424              		.loc 1 2399 0
 5425              		.cfi_startproc
 5426              		@ args = 0, pretend = 0, frame = 8
 5427              		@ frame_needed = 1, uses_anonymous_args = 0
 5428              		@ link register save eliminated.
 5429 17d6 80B4     		push	{r7}
 5430              		.cfi_def_cfa_offset 4
 5431              		.cfi_offset 7, -4
 5432 17d8 83B0     		sub	sp, sp, #12
 5433              		.cfi_def_cfa_offset 16
 5434 17da 00AF     		add	r7, sp, #0
 5435              		.cfi_def_cfa_register 7
 5436 17dc 7860     		str	r0, [r7, #4]
 5437 17de 0B46     		mov	r3, r1
 5438 17e0 7B80     		strh	r3, [r7, #2]	@ movhi
2400:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2401:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2402:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2403:lib/src/stm32f10x_tim.c ****   /* Reset the IC3PSC Bits */
2404:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 5439              		.loc 1 2404 0
 5440 17e2 7B68     		ldr	r3, [r7, #4]
 5441 17e4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 5442 17e6 9BB2     		uxth	r3, r3
 5443 17e8 23F00C03 		bic	r3, r3, #12
ARM GAS  /tmp/ccNus05k.s 			page 140


 5444 17ec 9AB2     		uxth	r2, r3
 5445 17ee 7B68     		ldr	r3, [r7, #4]
 5446 17f0 9A83     		strh	r2, [r3, #28]	@ movhi
2405:lib/src/stm32f10x_tim.c ****   /* Set the IC3PSC value */
2406:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 |= TIM_ICPSC;
 5447              		.loc 1 2406 0
 5448 17f2 7B68     		ldr	r3, [r7, #4]
 5449 17f4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 5450 17f6 9AB2     		uxth	r2, r3
 5451 17f8 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5452 17fa 1343     		orrs	r3, r3, r2
 5453 17fc 9AB2     		uxth	r2, r3
 5454 17fe 7B68     		ldr	r3, [r7, #4]
 5455 1800 9A83     		strh	r2, [r3, #28]	@ movhi
2407:lib/src/stm32f10x_tim.c **** }
 5456              		.loc 1 2407 0
 5457 1802 00BF     		nop
 5458 1804 0C37     		adds	r7, r7, #12
 5459              		.cfi_def_cfa_offset 4
 5460 1806 BD46     		mov	sp, r7
 5461              		.cfi_def_cfa_register 13
 5462              		@ sp needed
 5463 1808 80BC     		pop	{r7}
 5464              		.cfi_restore 7
 5465              		.cfi_def_cfa_offset 0
 5466 180a 7047     		bx	lr
 5467              		.cfi_endproc
 5468              	.LFE138:
 5469              		.size	TIM_SetIC3Prescaler, .-TIM_SetIC3Prescaler
 5470              		.align	1
 5471              		.global	TIM_SetIC4Prescaler
 5472              		.syntax unified
 5473              		.thumb
 5474              		.thumb_func
 5475              		.fpu softvfp
 5476              		.type	TIM_SetIC4Prescaler, %function
 5477              	TIM_SetIC4Prescaler:
 5478              	.LFB139:
2408:lib/src/stm32f10x_tim.c **** 
2409:lib/src/stm32f10x_tim.c **** /**
2410:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Input Capture 4 prescaler.
2411:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2412:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICPSC: specifies the Input Capture4 prescaler new value.
2413:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2414:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV1: no prescaler
2415:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV2: capture is done once every 2 events
2416:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
2417:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
2418:lib/src/stm32f10x_tim.c ****   * @retval None
2419:lib/src/stm32f10x_tim.c ****   */
2420:lib/src/stm32f10x_tim.c **** void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
2421:lib/src/stm32f10x_tim.c **** {  
 5479              		.loc 1 2421 0
 5480              		.cfi_startproc
 5481              		@ args = 0, pretend = 0, frame = 8
 5482              		@ frame_needed = 1, uses_anonymous_args = 0
 5483              		@ link register save eliminated.
ARM GAS  /tmp/ccNus05k.s 			page 141


 5484 180c 80B4     		push	{r7}
 5485              		.cfi_def_cfa_offset 4
 5486              		.cfi_offset 7, -4
 5487 180e 83B0     		sub	sp, sp, #12
 5488              		.cfi_def_cfa_offset 16
 5489 1810 00AF     		add	r7, sp, #0
 5490              		.cfi_def_cfa_register 7
 5491 1812 7860     		str	r0, [r7, #4]
 5492 1814 0B46     		mov	r3, r1
 5493 1816 7B80     		strh	r3, [r7, #2]	@ movhi
2422:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2423:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2424:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
2425:lib/src/stm32f10x_tim.c ****   /* Reset the IC4PSC Bits */
2426:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 5494              		.loc 1 2426 0
 5495 1818 7B68     		ldr	r3, [r7, #4]
 5496 181a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 5497 181c 9BB2     		uxth	r3, r3
 5498 181e 23F44063 		bic	r3, r3, #3072
 5499 1822 9AB2     		uxth	r2, r3
 5500 1824 7B68     		ldr	r3, [r7, #4]
 5501 1826 9A83     		strh	r2, [r3, #28]	@ movhi
2427:lib/src/stm32f10x_tim.c ****   /* Set the IC4PSC value */
2428:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 5502              		.loc 1 2428 0
 5503 1828 7B68     		ldr	r3, [r7, #4]
 5504 182a 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 5505 182c 9AB2     		uxth	r2, r3
 5506 182e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5507 1830 1B02     		lsls	r3, r3, #8
 5508 1832 9BB2     		uxth	r3, r3
 5509 1834 1343     		orrs	r3, r3, r2
 5510 1836 9AB2     		uxth	r2, r3
 5511 1838 7B68     		ldr	r3, [r7, #4]
 5512 183a 9A83     		strh	r2, [r3, #28]	@ movhi
2429:lib/src/stm32f10x_tim.c **** }
 5513              		.loc 1 2429 0
 5514 183c 00BF     		nop
 5515 183e 0C37     		adds	r7, r7, #12
 5516              		.cfi_def_cfa_offset 4
 5517 1840 BD46     		mov	sp, r7
 5518              		.cfi_def_cfa_register 13
 5519              		@ sp needed
 5520 1842 80BC     		pop	{r7}
 5521              		.cfi_restore 7
 5522              		.cfi_def_cfa_offset 0
 5523 1844 7047     		bx	lr
 5524              		.cfi_endproc
 5525              	.LFE139:
 5526              		.size	TIM_SetIC4Prescaler, .-TIM_SetIC4Prescaler
 5527              		.align	1
 5528              		.global	TIM_SetClockDivision
 5529              		.syntax unified
 5530              		.thumb
 5531              		.thumb_func
 5532              		.fpu softvfp
ARM GAS  /tmp/ccNus05k.s 			page 142


 5533              		.type	TIM_SetClockDivision, %function
 5534              	TIM_SetClockDivision:
 5535              	.LFB140:
2430:lib/src/stm32f10x_tim.c **** 
2431:lib/src/stm32f10x_tim.c **** /**
2432:lib/src/stm32f10x_tim.c ****   * @brief  Sets the TIMx Clock Division value.
2433:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be  1 to 17 except 6 and 7 to select 
2434:lib/src/stm32f10x_tim.c ****   *   the TIM peripheral.
2435:lib/src/stm32f10x_tim.c ****   * @param  TIM_CKD: specifies the clock division value.
2436:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following value:
2437:lib/src/stm32f10x_tim.c ****   *     @arg TIM_CKD_DIV1: TDTS = Tck_tim
2438:lib/src/stm32f10x_tim.c ****   *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
2439:lib/src/stm32f10x_tim.c ****   *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
2440:lib/src/stm32f10x_tim.c ****   * @retval None
2441:lib/src/stm32f10x_tim.c ****   */
2442:lib/src/stm32f10x_tim.c **** void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
2443:lib/src/stm32f10x_tim.c **** {
 5536              		.loc 1 2443 0
 5537              		.cfi_startproc
 5538              		@ args = 0, pretend = 0, frame = 8
 5539              		@ frame_needed = 1, uses_anonymous_args = 0
 5540              		@ link register save eliminated.
 5541 1846 80B4     		push	{r7}
 5542              		.cfi_def_cfa_offset 4
 5543              		.cfi_offset 7, -4
 5544 1848 83B0     		sub	sp, sp, #12
 5545              		.cfi_def_cfa_offset 16
 5546 184a 00AF     		add	r7, sp, #0
 5547              		.cfi_def_cfa_register 7
 5548 184c 7860     		str	r0, [r7, #4]
 5549 184e 0B46     		mov	r3, r1
 5550 1850 7B80     		strh	r3, [r7, #2]	@ movhi
2444:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2445:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2446:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_CKD_DIV(TIM_CKD));
2447:lib/src/stm32f10x_tim.c ****   /* Reset the CKD Bits */
2448:lib/src/stm32f10x_tim.c ****   TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 5551              		.loc 1 2448 0
 5552 1852 7B68     		ldr	r3, [r7, #4]
 5553 1854 1B88     		ldrh	r3, [r3]	@ movhi
 5554 1856 9BB2     		uxth	r3, r3
 5555 1858 23F44073 		bic	r3, r3, #768
 5556 185c 9AB2     		uxth	r2, r3
 5557 185e 7B68     		ldr	r3, [r7, #4]
 5558 1860 1A80     		strh	r2, [r3]	@ movhi
2449:lib/src/stm32f10x_tim.c ****   /* Set the CKD value */
2450:lib/src/stm32f10x_tim.c ****   TIMx->CR1 |= TIM_CKD;
 5559              		.loc 1 2450 0
 5560 1862 7B68     		ldr	r3, [r7, #4]
 5561 1864 1B88     		ldrh	r3, [r3]	@ movhi
 5562 1866 9AB2     		uxth	r2, r3
 5563 1868 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5564 186a 1343     		orrs	r3, r3, r2
 5565 186c 9AB2     		uxth	r2, r3
 5566 186e 7B68     		ldr	r3, [r7, #4]
 5567 1870 1A80     		strh	r2, [r3]	@ movhi
2451:lib/src/stm32f10x_tim.c **** }
ARM GAS  /tmp/ccNus05k.s 			page 143


 5568              		.loc 1 2451 0
 5569 1872 00BF     		nop
 5570 1874 0C37     		adds	r7, r7, #12
 5571              		.cfi_def_cfa_offset 4
 5572 1876 BD46     		mov	sp, r7
 5573              		.cfi_def_cfa_register 13
 5574              		@ sp needed
 5575 1878 80BC     		pop	{r7}
 5576              		.cfi_restore 7
 5577              		.cfi_def_cfa_offset 0
 5578 187a 7047     		bx	lr
 5579              		.cfi_endproc
 5580              	.LFE140:
 5581              		.size	TIM_SetClockDivision, .-TIM_SetClockDivision
 5582              		.align	1
 5583              		.global	TIM_GetCapture1
 5584              		.syntax unified
 5585              		.thumb
 5586              		.thumb_func
 5587              		.fpu softvfp
 5588              		.type	TIM_GetCapture1, %function
 5589              	TIM_GetCapture1:
 5590              	.LFB141:
2452:lib/src/stm32f10x_tim.c **** 
2453:lib/src/stm32f10x_tim.c **** /**
2454:lib/src/stm32f10x_tim.c ****   * @brief  Gets the TIMx Input Capture 1 value.
2455:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2456:lib/src/stm32f10x_tim.c ****   * @retval Capture Compare 1 Register value.
2457:lib/src/stm32f10x_tim.c ****   */
2458:lib/src/stm32f10x_tim.c **** uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
2459:lib/src/stm32f10x_tim.c **** {
 5591              		.loc 1 2459 0
 5592              		.cfi_startproc
 5593              		@ args = 0, pretend = 0, frame = 8
 5594              		@ frame_needed = 1, uses_anonymous_args = 0
 5595              		@ link register save eliminated.
 5596 187c 80B4     		push	{r7}
 5597              		.cfi_def_cfa_offset 4
 5598              		.cfi_offset 7, -4
 5599 187e 83B0     		sub	sp, sp, #12
 5600              		.cfi_def_cfa_offset 16
 5601 1880 00AF     		add	r7, sp, #0
 5602              		.cfi_def_cfa_register 7
 5603 1882 7860     		str	r0, [r7, #4]
2460:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2461:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST8_PERIPH(TIMx));
2462:lib/src/stm32f10x_tim.c ****   /* Get the Capture 1 Register value */
2463:lib/src/stm32f10x_tim.c ****   return TIMx->CCR1;
 5604              		.loc 1 2463 0
 5605 1884 7B68     		ldr	r3, [r7, #4]
 5606 1886 9B8E     		ldrh	r3, [r3, #52]	@ movhi
 5607 1888 9BB2     		uxth	r3, r3
2464:lib/src/stm32f10x_tim.c **** }
 5608              		.loc 1 2464 0
 5609 188a 1846     		mov	r0, r3
 5610 188c 0C37     		adds	r7, r7, #12
 5611              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccNus05k.s 			page 144


 5612 188e BD46     		mov	sp, r7
 5613              		.cfi_def_cfa_register 13
 5614              		@ sp needed
 5615 1890 80BC     		pop	{r7}
 5616              		.cfi_restore 7
 5617              		.cfi_def_cfa_offset 0
 5618 1892 7047     		bx	lr
 5619              		.cfi_endproc
 5620              	.LFE141:
 5621              		.size	TIM_GetCapture1, .-TIM_GetCapture1
 5622              		.align	1
 5623              		.global	TIM_GetCapture2
 5624              		.syntax unified
 5625              		.thumb
 5626              		.thumb_func
 5627              		.fpu softvfp
 5628              		.type	TIM_GetCapture2, %function
 5629              	TIM_GetCapture2:
 5630              	.LFB142:
2465:lib/src/stm32f10x_tim.c **** 
2466:lib/src/stm32f10x_tim.c **** /**
2467:lib/src/stm32f10x_tim.c ****   * @brief  Gets the TIMx Input Capture 2 value.
2468:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2469:lib/src/stm32f10x_tim.c ****   * @retval Capture Compare 2 Register value.
2470:lib/src/stm32f10x_tim.c ****   */
2471:lib/src/stm32f10x_tim.c **** uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
2472:lib/src/stm32f10x_tim.c **** {
 5631              		.loc 1 2472 0
 5632              		.cfi_startproc
 5633              		@ args = 0, pretend = 0, frame = 8
 5634              		@ frame_needed = 1, uses_anonymous_args = 0
 5635              		@ link register save eliminated.
 5636 1894 80B4     		push	{r7}
 5637              		.cfi_def_cfa_offset 4
 5638              		.cfi_offset 7, -4
 5639 1896 83B0     		sub	sp, sp, #12
 5640              		.cfi_def_cfa_offset 16
 5641 1898 00AF     		add	r7, sp, #0
 5642              		.cfi_def_cfa_register 7
 5643 189a 7860     		str	r0, [r7, #4]
2473:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2474:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST6_PERIPH(TIMx));
2475:lib/src/stm32f10x_tim.c ****   /* Get the Capture 2 Register value */
2476:lib/src/stm32f10x_tim.c ****   return TIMx->CCR2;
 5644              		.loc 1 2476 0
 5645 189c 7B68     		ldr	r3, [r7, #4]
 5646 189e 1B8F     		ldrh	r3, [r3, #56]	@ movhi
 5647 18a0 9BB2     		uxth	r3, r3
2477:lib/src/stm32f10x_tim.c **** }
 5648              		.loc 1 2477 0
 5649 18a2 1846     		mov	r0, r3
 5650 18a4 0C37     		adds	r7, r7, #12
 5651              		.cfi_def_cfa_offset 4
 5652 18a6 BD46     		mov	sp, r7
 5653              		.cfi_def_cfa_register 13
 5654              		@ sp needed
 5655 18a8 80BC     		pop	{r7}
ARM GAS  /tmp/ccNus05k.s 			page 145


 5656              		.cfi_restore 7
 5657              		.cfi_def_cfa_offset 0
 5658 18aa 7047     		bx	lr
 5659              		.cfi_endproc
 5660              	.LFE142:
 5661              		.size	TIM_GetCapture2, .-TIM_GetCapture2
 5662              		.align	1
 5663              		.global	TIM_GetCapture3
 5664              		.syntax unified
 5665              		.thumb
 5666              		.thumb_func
 5667              		.fpu softvfp
 5668              		.type	TIM_GetCapture3, %function
 5669              	TIM_GetCapture3:
 5670              	.LFB143:
2478:lib/src/stm32f10x_tim.c **** 
2479:lib/src/stm32f10x_tim.c **** /**
2480:lib/src/stm32f10x_tim.c ****   * @brief  Gets the TIMx Input Capture 3 value.
2481:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2482:lib/src/stm32f10x_tim.c ****   * @retval Capture Compare 3 Register value.
2483:lib/src/stm32f10x_tim.c ****   */
2484:lib/src/stm32f10x_tim.c **** uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
2485:lib/src/stm32f10x_tim.c **** {
 5671              		.loc 1 2485 0
 5672              		.cfi_startproc
 5673              		@ args = 0, pretend = 0, frame = 8
 5674              		@ frame_needed = 1, uses_anonymous_args = 0
 5675              		@ link register save eliminated.
 5676 18ac 80B4     		push	{r7}
 5677              		.cfi_def_cfa_offset 4
 5678              		.cfi_offset 7, -4
 5679 18ae 83B0     		sub	sp, sp, #12
 5680              		.cfi_def_cfa_offset 16
 5681 18b0 00AF     		add	r7, sp, #0
 5682              		.cfi_def_cfa_register 7
 5683 18b2 7860     		str	r0, [r7, #4]
2486:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2487:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
2488:lib/src/stm32f10x_tim.c ****   /* Get the Capture 3 Register value */
2489:lib/src/stm32f10x_tim.c ****   return TIMx->CCR3;
 5684              		.loc 1 2489 0
 5685 18b4 7B68     		ldr	r3, [r7, #4]
 5686 18b6 9B8F     		ldrh	r3, [r3, #60]	@ movhi
 5687 18b8 9BB2     		uxth	r3, r3
2490:lib/src/stm32f10x_tim.c **** }
 5688              		.loc 1 2490 0
 5689 18ba 1846     		mov	r0, r3
 5690 18bc 0C37     		adds	r7, r7, #12
 5691              		.cfi_def_cfa_offset 4
 5692 18be BD46     		mov	sp, r7
 5693              		.cfi_def_cfa_register 13
 5694              		@ sp needed
 5695 18c0 80BC     		pop	{r7}
 5696              		.cfi_restore 7
 5697              		.cfi_def_cfa_offset 0
 5698 18c2 7047     		bx	lr
 5699              		.cfi_endproc
ARM GAS  /tmp/ccNus05k.s 			page 146


 5700              	.LFE143:
 5701              		.size	TIM_GetCapture3, .-TIM_GetCapture3
 5702              		.align	1
 5703              		.global	TIM_GetCapture4
 5704              		.syntax unified
 5705              		.thumb
 5706              		.thumb_func
 5707              		.fpu softvfp
 5708              		.type	TIM_GetCapture4, %function
 5709              	TIM_GetCapture4:
 5710              	.LFB144:
2491:lib/src/stm32f10x_tim.c **** 
2492:lib/src/stm32f10x_tim.c **** /**
2493:lib/src/stm32f10x_tim.c ****   * @brief  Gets the TIMx Input Capture 4 value.
2494:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2495:lib/src/stm32f10x_tim.c ****   * @retval Capture Compare 4 Register value.
2496:lib/src/stm32f10x_tim.c ****   */
2497:lib/src/stm32f10x_tim.c **** uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
2498:lib/src/stm32f10x_tim.c **** {
 5711              		.loc 1 2498 0
 5712              		.cfi_startproc
 5713              		@ args = 0, pretend = 0, frame = 8
 5714              		@ frame_needed = 1, uses_anonymous_args = 0
 5715              		@ link register save eliminated.
 5716 18c4 80B4     		push	{r7}
 5717              		.cfi_def_cfa_offset 4
 5718              		.cfi_offset 7, -4
 5719 18c6 83B0     		sub	sp, sp, #12
 5720              		.cfi_def_cfa_offset 16
 5721 18c8 00AF     		add	r7, sp, #0
 5722              		.cfi_def_cfa_register 7
 5723 18ca 7860     		str	r0, [r7, #4]
2499:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2500:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_LIST3_PERIPH(TIMx));
2501:lib/src/stm32f10x_tim.c ****   /* Get the Capture 4 Register value */
2502:lib/src/stm32f10x_tim.c ****   return TIMx->CCR4;
 5724              		.loc 1 2502 0
 5725 18cc 7B68     		ldr	r3, [r7, #4]
 5726 18ce B3F84030 		ldrh	r3, [r3, #64]	@ movhi
 5727 18d2 9BB2     		uxth	r3, r3
2503:lib/src/stm32f10x_tim.c **** }
 5728              		.loc 1 2503 0
 5729 18d4 1846     		mov	r0, r3
 5730 18d6 0C37     		adds	r7, r7, #12
 5731              		.cfi_def_cfa_offset 4
 5732 18d8 BD46     		mov	sp, r7
 5733              		.cfi_def_cfa_register 13
 5734              		@ sp needed
 5735 18da 80BC     		pop	{r7}
 5736              		.cfi_restore 7
 5737              		.cfi_def_cfa_offset 0
 5738 18dc 7047     		bx	lr
 5739              		.cfi_endproc
 5740              	.LFE144:
 5741              		.size	TIM_GetCapture4, .-TIM_GetCapture4
 5742              		.align	1
 5743              		.global	TIM_GetCounter
ARM GAS  /tmp/ccNus05k.s 			page 147


 5744              		.syntax unified
 5745              		.thumb
 5746              		.thumb_func
 5747              		.fpu softvfp
 5748              		.type	TIM_GetCounter, %function
 5749              	TIM_GetCounter:
 5750              	.LFB145:
2504:lib/src/stm32f10x_tim.c **** 
2505:lib/src/stm32f10x_tim.c **** /**
2506:lib/src/stm32f10x_tim.c ****   * @brief  Gets the TIMx Counter value.
2507:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2508:lib/src/stm32f10x_tim.c ****   * @retval Counter Register value.
2509:lib/src/stm32f10x_tim.c ****   */
2510:lib/src/stm32f10x_tim.c **** uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
2511:lib/src/stm32f10x_tim.c **** {
 5751              		.loc 1 2511 0
 5752              		.cfi_startproc
 5753              		@ args = 0, pretend = 0, frame = 8
 5754              		@ frame_needed = 1, uses_anonymous_args = 0
 5755              		@ link register save eliminated.
 5756 18de 80B4     		push	{r7}
 5757              		.cfi_def_cfa_offset 4
 5758              		.cfi_offset 7, -4
 5759 18e0 83B0     		sub	sp, sp, #12
 5760              		.cfi_def_cfa_offset 16
 5761 18e2 00AF     		add	r7, sp, #0
 5762              		.cfi_def_cfa_register 7
 5763 18e4 7860     		str	r0, [r7, #4]
2512:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2513:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2514:lib/src/stm32f10x_tim.c ****   /* Get the Counter Register value */
2515:lib/src/stm32f10x_tim.c ****   return TIMx->CNT;
 5764              		.loc 1 2515 0
 5765 18e6 7B68     		ldr	r3, [r7, #4]
 5766 18e8 9B8C     		ldrh	r3, [r3, #36]	@ movhi
 5767 18ea 9BB2     		uxth	r3, r3
2516:lib/src/stm32f10x_tim.c **** }
 5768              		.loc 1 2516 0
 5769 18ec 1846     		mov	r0, r3
 5770 18ee 0C37     		adds	r7, r7, #12
 5771              		.cfi_def_cfa_offset 4
 5772 18f0 BD46     		mov	sp, r7
 5773              		.cfi_def_cfa_register 13
 5774              		@ sp needed
 5775 18f2 80BC     		pop	{r7}
 5776              		.cfi_restore 7
 5777              		.cfi_def_cfa_offset 0
 5778 18f4 7047     		bx	lr
 5779              		.cfi_endproc
 5780              	.LFE145:
 5781              		.size	TIM_GetCounter, .-TIM_GetCounter
 5782              		.align	1
 5783              		.global	TIM_GetPrescaler
 5784              		.syntax unified
 5785              		.thumb
 5786              		.thumb_func
 5787              		.fpu softvfp
ARM GAS  /tmp/ccNus05k.s 			page 148


 5788              		.type	TIM_GetPrescaler, %function
 5789              	TIM_GetPrescaler:
 5790              	.LFB146:
2517:lib/src/stm32f10x_tim.c **** 
2518:lib/src/stm32f10x_tim.c **** /**
2519:lib/src/stm32f10x_tim.c ****   * @brief  Gets the TIMx Prescaler value.
2520:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2521:lib/src/stm32f10x_tim.c ****   * @retval Prescaler Register value.
2522:lib/src/stm32f10x_tim.c ****   */
2523:lib/src/stm32f10x_tim.c **** uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
2524:lib/src/stm32f10x_tim.c **** {
 5791              		.loc 1 2524 0
 5792              		.cfi_startproc
 5793              		@ args = 0, pretend = 0, frame = 8
 5794              		@ frame_needed = 1, uses_anonymous_args = 0
 5795              		@ link register save eliminated.
 5796 18f6 80B4     		push	{r7}
 5797              		.cfi_def_cfa_offset 4
 5798              		.cfi_offset 7, -4
 5799 18f8 83B0     		sub	sp, sp, #12
 5800              		.cfi_def_cfa_offset 16
 5801 18fa 00AF     		add	r7, sp, #0
 5802              		.cfi_def_cfa_register 7
 5803 18fc 7860     		str	r0, [r7, #4]
2525:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2526:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2527:lib/src/stm32f10x_tim.c ****   /* Get the Prescaler Register value */
2528:lib/src/stm32f10x_tim.c ****   return TIMx->PSC;
 5804              		.loc 1 2528 0
 5805 18fe 7B68     		ldr	r3, [r7, #4]
 5806 1900 1B8D     		ldrh	r3, [r3, #40]	@ movhi
 5807 1902 9BB2     		uxth	r3, r3
2529:lib/src/stm32f10x_tim.c **** }
 5808              		.loc 1 2529 0
 5809 1904 1846     		mov	r0, r3
 5810 1906 0C37     		adds	r7, r7, #12
 5811              		.cfi_def_cfa_offset 4
 5812 1908 BD46     		mov	sp, r7
 5813              		.cfi_def_cfa_register 13
 5814              		@ sp needed
 5815 190a 80BC     		pop	{r7}
 5816              		.cfi_restore 7
 5817              		.cfi_def_cfa_offset 0
 5818 190c 7047     		bx	lr
 5819              		.cfi_endproc
 5820              	.LFE146:
 5821              		.size	TIM_GetPrescaler, .-TIM_GetPrescaler
 5822              		.align	1
 5823              		.global	TIM_GetFlagStatus
 5824              		.syntax unified
 5825              		.thumb
 5826              		.thumb_func
 5827              		.fpu softvfp
 5828              		.type	TIM_GetFlagStatus, %function
 5829              	TIM_GetFlagStatus:
 5830              	.LFB147:
2530:lib/src/stm32f10x_tim.c **** 
ARM GAS  /tmp/ccNus05k.s 			page 149


2531:lib/src/stm32f10x_tim.c **** /**
2532:lib/src/stm32f10x_tim.c ****   * @brief  Checks whether the specified TIM flag is set or not.
2533:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2534:lib/src/stm32f10x_tim.c ****   * @param  TIM_FLAG: specifies the flag to check.
2535:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2536:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Update: TIM update Flag
2537:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2538:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2539:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
2540:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2541:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_COM: TIM Commutation Flag
2542:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Trigger: TIM Trigger Flag
2543:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Break: TIM Break Flag
2544:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2545:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2546:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2547:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2548:lib/src/stm32f10x_tim.c ****   * @note
2549:lib/src/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can have only one update flag. 
2550:lib/src/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1,
2551:lib/src/stm32f10x_tim.c ****   *      TIM_FLAG_CC2 or TIM_FLAG_Trigger. 
2552:lib/src/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2553:lib/src/stm32f10x_tim.c ****   *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
2554:lib/src/stm32f10x_tim.c ****   *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
2555:lib/src/stm32f10x_tim.c ****   * @retval The new state of TIM_FLAG (SET or RESET).
2556:lib/src/stm32f10x_tim.c ****   */
2557:lib/src/stm32f10x_tim.c **** FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2558:lib/src/stm32f10x_tim.c **** { 
 5831              		.loc 1 2558 0
 5832              		.cfi_startproc
 5833              		@ args = 0, pretend = 0, frame = 16
 5834              		@ frame_needed = 1, uses_anonymous_args = 0
 5835              		@ link register save eliminated.
 5836 190e 80B4     		push	{r7}
 5837              		.cfi_def_cfa_offset 4
 5838              		.cfi_offset 7, -4
 5839 1910 85B0     		sub	sp, sp, #20
 5840              		.cfi_def_cfa_offset 24
 5841 1912 00AF     		add	r7, sp, #0
 5842              		.cfi_def_cfa_register 7
 5843 1914 7860     		str	r0, [r7, #4]
 5844 1916 0B46     		mov	r3, r1
 5845 1918 7B80     		strh	r3, [r7, #2]	@ movhi
2559:lib/src/stm32f10x_tim.c ****   ITStatus bitstatus = RESET;  
 5846              		.loc 1 2559 0
 5847 191a 0023     		movs	r3, #0
 5848 191c FB73     		strb	r3, [r7, #15]
2560:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2561:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2562:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
2563:lib/src/stm32f10x_tim.c ****   
2564:lib/src/stm32f10x_tim.c ****   if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 5849              		.loc 1 2564 0
 5850 191e 7B68     		ldr	r3, [r7, #4]
 5851 1920 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 5852 1922 9AB2     		uxth	r2, r3
 5853 1924 7B88     		ldrh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 150


 5854 1926 1340     		ands	r3, r3, r2
 5855 1928 9BB2     		uxth	r3, r3
 5856 192a 002B     		cmp	r3, #0
 5857 192c 02D0     		beq	.L184
2565:lib/src/stm32f10x_tim.c ****   {
2566:lib/src/stm32f10x_tim.c ****     bitstatus = SET;
 5858              		.loc 1 2566 0
 5859 192e 0123     		movs	r3, #1
 5860 1930 FB73     		strb	r3, [r7, #15]
 5861 1932 01E0     		b	.L185
 5862              	.L184:
2567:lib/src/stm32f10x_tim.c ****   }
2568:lib/src/stm32f10x_tim.c ****   else
2569:lib/src/stm32f10x_tim.c ****   {
2570:lib/src/stm32f10x_tim.c ****     bitstatus = RESET;
 5863              		.loc 1 2570 0
 5864 1934 0023     		movs	r3, #0
 5865 1936 FB73     		strb	r3, [r7, #15]
 5866              	.L185:
2571:lib/src/stm32f10x_tim.c ****   }
2572:lib/src/stm32f10x_tim.c ****   return bitstatus;
 5867              		.loc 1 2572 0
 5868 1938 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2573:lib/src/stm32f10x_tim.c **** }
 5869              		.loc 1 2573 0
 5870 193a 1846     		mov	r0, r3
 5871 193c 1437     		adds	r7, r7, #20
 5872              		.cfi_def_cfa_offset 4
 5873 193e BD46     		mov	sp, r7
 5874              		.cfi_def_cfa_register 13
 5875              		@ sp needed
 5876 1940 80BC     		pop	{r7}
 5877              		.cfi_restore 7
 5878              		.cfi_def_cfa_offset 0
 5879 1942 7047     		bx	lr
 5880              		.cfi_endproc
 5881              	.LFE147:
 5882              		.size	TIM_GetFlagStatus, .-TIM_GetFlagStatus
 5883              		.align	1
 5884              		.global	TIM_ClearFlag
 5885              		.syntax unified
 5886              		.thumb
 5887              		.thumb_func
 5888              		.fpu softvfp
 5889              		.type	TIM_ClearFlag, %function
 5890              	TIM_ClearFlag:
 5891              	.LFB148:
2574:lib/src/stm32f10x_tim.c **** 
2575:lib/src/stm32f10x_tim.c **** /**
2576:lib/src/stm32f10x_tim.c ****   * @brief  Clears the TIMx's pending flags.
2577:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2578:lib/src/stm32f10x_tim.c ****   * @param  TIM_FLAG: specifies the flag bit to clear.
2579:lib/src/stm32f10x_tim.c ****   *   This parameter can be any combination of the following values:
2580:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Update: TIM update Flag
2581:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC1: TIM Capture Compare 1 Flag
2582:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC2: TIM Capture Compare 2 Flag
2583:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC3: TIM Capture Compare 3 Flag
ARM GAS  /tmp/ccNus05k.s 			page 151


2584:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC4: TIM Capture Compare 4 Flag
2585:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_COM: TIM Commutation Flag
2586:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Trigger: TIM Trigger Flag
2587:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_Break: TIM Break Flag
2588:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC1OF: TIM Capture Compare 1 overcapture Flag
2589:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC2OF: TIM Capture Compare 2 overcapture Flag
2590:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC3OF: TIM Capture Compare 3 overcapture Flag
2591:lib/src/stm32f10x_tim.c ****   *     @arg TIM_FLAG_CC4OF: TIM Capture Compare 4 overcapture Flag
2592:lib/src/stm32f10x_tim.c ****   * @note
2593:lib/src/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can have only one update flag. 
2594:lib/src/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_FLAG_Update, TIM_FLAG_CC1,
2595:lib/src/stm32f10x_tim.c ****   *      TIM_FLAG_CC2 or TIM_FLAG_Trigger. 
2596:lib/src/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_FLAG_Update or TIM_FLAG_CC1.   
2597:lib/src/stm32f10x_tim.c ****   *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
2598:lib/src/stm32f10x_tim.c ****   *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
2599:lib/src/stm32f10x_tim.c ****   * @retval None
2600:lib/src/stm32f10x_tim.c ****   */
2601:lib/src/stm32f10x_tim.c **** void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
2602:lib/src/stm32f10x_tim.c **** {  
 5892              		.loc 1 2602 0
 5893              		.cfi_startproc
 5894              		@ args = 0, pretend = 0, frame = 8
 5895              		@ frame_needed = 1, uses_anonymous_args = 0
 5896              		@ link register save eliminated.
 5897 1944 80B4     		push	{r7}
 5898              		.cfi_def_cfa_offset 4
 5899              		.cfi_offset 7, -4
 5900 1946 83B0     		sub	sp, sp, #12
 5901              		.cfi_def_cfa_offset 16
 5902 1948 00AF     		add	r7, sp, #0
 5903              		.cfi_def_cfa_register 7
 5904 194a 7860     		str	r0, [r7, #4]
 5905 194c 0B46     		mov	r3, r1
 5906 194e 7B80     		strh	r3, [r7, #2]	@ movhi
2603:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2604:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2605:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
2606:lib/src/stm32f10x_tim.c ****    
2607:lib/src/stm32f10x_tim.c ****   /* Clear the flags */
2608:lib/src/stm32f10x_tim.c ****   TIMx->SR = (uint16_t)~TIM_FLAG;
 5907              		.loc 1 2608 0
 5908 1950 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5909 1952 DB43     		mvns	r3, r3
 5910 1954 9AB2     		uxth	r2, r3
 5911 1956 7B68     		ldr	r3, [r7, #4]
 5912 1958 1A82     		strh	r2, [r3, #16]	@ movhi
2609:lib/src/stm32f10x_tim.c **** }
 5913              		.loc 1 2609 0
 5914 195a 00BF     		nop
 5915 195c 0C37     		adds	r7, r7, #12
 5916              		.cfi_def_cfa_offset 4
 5917 195e BD46     		mov	sp, r7
 5918              		.cfi_def_cfa_register 13
 5919              		@ sp needed
 5920 1960 80BC     		pop	{r7}
 5921              		.cfi_restore 7
 5922              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccNus05k.s 			page 152


 5923 1962 7047     		bx	lr
 5924              		.cfi_endproc
 5925              	.LFE148:
 5926              		.size	TIM_ClearFlag, .-TIM_ClearFlag
 5927              		.align	1
 5928              		.global	TIM_GetITStatus
 5929              		.syntax unified
 5930              		.thumb
 5931              		.thumb_func
 5932              		.fpu softvfp
 5933              		.type	TIM_GetITStatus, %function
 5934              	TIM_GetITStatus:
 5935              	.LFB149:
2610:lib/src/stm32f10x_tim.c **** 
2611:lib/src/stm32f10x_tim.c **** /**
2612:lib/src/stm32f10x_tim.c ****   * @brief  Checks whether the TIM interrupt has occurred or not.
2613:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2614:lib/src/stm32f10x_tim.c ****   * @param  TIM_IT: specifies the TIM interrupt source to check.
2615:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2616:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_Update: TIM update Interrupt source
2617:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2618:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2619:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2620:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2621:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_COM: TIM Commutation Interrupt source
2622:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2623:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_Break: TIM Break Interrupt source
2624:lib/src/stm32f10x_tim.c ****   * @note
2625:lib/src/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can generate only an update interrupt.
2626:lib/src/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_IT_Update, TIM_IT_CC1,
2627:lib/src/stm32f10x_tim.c ****   *      TIM_IT_CC2 or TIM_IT_Trigger. 
2628:lib/src/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2629:lib/src/stm32f10x_tim.c ****   *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
2630:lib/src/stm32f10x_tim.c ****   *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
2631:lib/src/stm32f10x_tim.c ****   * @retval The new state of the TIM_IT(SET or RESET).
2632:lib/src/stm32f10x_tim.c ****   */
2633:lib/src/stm32f10x_tim.c **** ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2634:lib/src/stm32f10x_tim.c **** {
 5936              		.loc 1 2634 0
 5937              		.cfi_startproc
 5938              		@ args = 0, pretend = 0, frame = 16
 5939              		@ frame_needed = 1, uses_anonymous_args = 0
 5940              		@ link register save eliminated.
 5941 1964 80B4     		push	{r7}
 5942              		.cfi_def_cfa_offset 4
 5943              		.cfi_offset 7, -4
 5944 1966 85B0     		sub	sp, sp, #20
 5945              		.cfi_def_cfa_offset 24
 5946 1968 00AF     		add	r7, sp, #0
 5947              		.cfi_def_cfa_register 7
 5948 196a 7860     		str	r0, [r7, #4]
 5949 196c 0B46     		mov	r3, r1
 5950 196e 7B80     		strh	r3, [r7, #2]	@ movhi
2635:lib/src/stm32f10x_tim.c ****   ITStatus bitstatus = RESET;  
 5951              		.loc 1 2635 0
 5952 1970 0023     		movs	r3, #0
 5953 1972 FB73     		strb	r3, [r7, #15]
ARM GAS  /tmp/ccNus05k.s 			page 153


2636:lib/src/stm32f10x_tim.c ****   uint16_t itstatus = 0x0, itenable = 0x0;
 5954              		.loc 1 2636 0
 5955 1974 0023     		movs	r3, #0
 5956 1976 BB81     		strh	r3, [r7, #12]	@ movhi
 5957 1978 0023     		movs	r3, #0
 5958 197a 7B81     		strh	r3, [r7, #10]	@ movhi
2637:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2638:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2639:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_GET_IT(TIM_IT));
2640:lib/src/stm32f10x_tim.c ****    
2641:lib/src/stm32f10x_tim.c ****   itstatus = TIMx->SR & TIM_IT;
 5959              		.loc 1 2641 0
 5960 197c 7B68     		ldr	r3, [r7, #4]
 5961 197e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 5962 1980 9AB2     		uxth	r2, r3
 5963 1982 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5964 1984 1340     		ands	r3, r3, r2
 5965 1986 BB81     		strh	r3, [r7, #12]	@ movhi
2642:lib/src/stm32f10x_tim.c ****   
2643:lib/src/stm32f10x_tim.c ****   itenable = TIMx->DIER & TIM_IT;
 5966              		.loc 1 2643 0
 5967 1988 7B68     		ldr	r3, [r7, #4]
 5968 198a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 5969 198c 9AB2     		uxth	r2, r3
 5970 198e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 5971 1990 1340     		ands	r3, r3, r2
 5972 1992 7B81     		strh	r3, [r7, #10]	@ movhi
2644:lib/src/stm32f10x_tim.c ****   if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 5973              		.loc 1 2644 0
 5974 1994 BB89     		ldrh	r3, [r7, #12]
 5975 1996 002B     		cmp	r3, #0
 5976 1998 05D0     		beq	.L189
 5977              		.loc 1 2644 0 is_stmt 0 discriminator 1
 5978 199a 7B89     		ldrh	r3, [r7, #10]
 5979 199c 002B     		cmp	r3, #0
 5980 199e 02D0     		beq	.L189
2645:lib/src/stm32f10x_tim.c ****   {
2646:lib/src/stm32f10x_tim.c ****     bitstatus = SET;
 5981              		.loc 1 2646 0 is_stmt 1
 5982 19a0 0123     		movs	r3, #1
 5983 19a2 FB73     		strb	r3, [r7, #15]
 5984 19a4 01E0     		b	.L190
 5985              	.L189:
2647:lib/src/stm32f10x_tim.c ****   }
2648:lib/src/stm32f10x_tim.c ****   else
2649:lib/src/stm32f10x_tim.c ****   {
2650:lib/src/stm32f10x_tim.c ****     bitstatus = RESET;
 5986              		.loc 1 2650 0
 5987 19a6 0023     		movs	r3, #0
 5988 19a8 FB73     		strb	r3, [r7, #15]
 5989              	.L190:
2651:lib/src/stm32f10x_tim.c ****   }
2652:lib/src/stm32f10x_tim.c ****   return bitstatus;
 5990              		.loc 1 2652 0
 5991 19aa FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
2653:lib/src/stm32f10x_tim.c **** }
 5992              		.loc 1 2653 0
ARM GAS  /tmp/ccNus05k.s 			page 154


 5993 19ac 1846     		mov	r0, r3
 5994 19ae 1437     		adds	r7, r7, #20
 5995              		.cfi_def_cfa_offset 4
 5996 19b0 BD46     		mov	sp, r7
 5997              		.cfi_def_cfa_register 13
 5998              		@ sp needed
 5999 19b2 80BC     		pop	{r7}
 6000              		.cfi_restore 7
 6001              		.cfi_def_cfa_offset 0
 6002 19b4 7047     		bx	lr
 6003              		.cfi_endproc
 6004              	.LFE149:
 6005              		.size	TIM_GetITStatus, .-TIM_GetITStatus
 6006              		.align	1
 6007              		.global	TIM_ClearITPendingBit
 6008              		.syntax unified
 6009              		.thumb
 6010              		.thumb_func
 6011              		.fpu softvfp
 6012              		.type	TIM_ClearITPendingBit, %function
 6013              	TIM_ClearITPendingBit:
 6014              	.LFB150:
2654:lib/src/stm32f10x_tim.c **** 
2655:lib/src/stm32f10x_tim.c **** /**
2656:lib/src/stm32f10x_tim.c ****   * @brief  Clears the TIMx's interrupt pending bits.
2657:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
2658:lib/src/stm32f10x_tim.c ****   * @param  TIM_IT: specifies the pending bit to clear.
2659:lib/src/stm32f10x_tim.c ****   *   This parameter can be any combination of the following values:
2660:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_Update: TIM1 update Interrupt source
2661:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC1: TIM Capture Compare 1 Interrupt source
2662:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC2: TIM Capture Compare 2 Interrupt source
2663:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC3: TIM Capture Compare 3 Interrupt source
2664:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_CC4: TIM Capture Compare 4 Interrupt source
2665:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_COM: TIM Commutation Interrupt source
2666:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_Trigger: TIM Trigger Interrupt source
2667:lib/src/stm32f10x_tim.c ****   *     @arg TIM_IT_Break: TIM Break Interrupt source
2668:lib/src/stm32f10x_tim.c ****   * @note
2669:lib/src/stm32f10x_tim.c ****   *   - TIM6 and TIM7 can generate only an update interrupt.
2670:lib/src/stm32f10x_tim.c ****   *   - TIM9, TIM12 and TIM15 can have only TIM_IT_Update, TIM_IT_CC1,
2671:lib/src/stm32f10x_tim.c ****   *      TIM_IT_CC2 or TIM_IT_Trigger. 
2672:lib/src/stm32f10x_tim.c ****   *   - TIM10, TIM11, TIM13, TIM14, TIM16 and TIM17 can have TIM_IT_Update or TIM_IT_CC1.   
2673:lib/src/stm32f10x_tim.c ****   *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
2674:lib/src/stm32f10x_tim.c ****   *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
2675:lib/src/stm32f10x_tim.c ****   * @retval None
2676:lib/src/stm32f10x_tim.c ****   */
2677:lib/src/stm32f10x_tim.c **** void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
2678:lib/src/stm32f10x_tim.c **** {
 6015              		.loc 1 2678 0
 6016              		.cfi_startproc
 6017              		@ args = 0, pretend = 0, frame = 8
 6018              		@ frame_needed = 1, uses_anonymous_args = 0
 6019              		@ link register save eliminated.
 6020 19b6 80B4     		push	{r7}
 6021              		.cfi_def_cfa_offset 4
 6022              		.cfi_offset 7, -4
 6023 19b8 83B0     		sub	sp, sp, #12
 6024              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccNus05k.s 			page 155


 6025 19ba 00AF     		add	r7, sp, #0
 6026              		.cfi_def_cfa_register 7
 6027 19bc 7860     		str	r0, [r7, #4]
 6028 19be 0B46     		mov	r3, r1
 6029 19c0 7B80     		strh	r3, [r7, #2]	@ movhi
2679:lib/src/stm32f10x_tim.c ****   /* Check the parameters */
2680:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_ALL_PERIPH(TIMx));
2681:lib/src/stm32f10x_tim.c ****   assert_param(IS_TIM_IT(TIM_IT));
2682:lib/src/stm32f10x_tim.c ****   /* Clear the IT pending Bit */
2683:lib/src/stm32f10x_tim.c ****   TIMx->SR = (uint16_t)~TIM_IT;
 6030              		.loc 1 2683 0
 6031 19c2 7B88     		ldrh	r3, [r7, #2]	@ movhi
 6032 19c4 DB43     		mvns	r3, r3
 6033 19c6 9AB2     		uxth	r2, r3
 6034 19c8 7B68     		ldr	r3, [r7, #4]
 6035 19ca 1A82     		strh	r2, [r3, #16]	@ movhi
2684:lib/src/stm32f10x_tim.c **** }
 6036              		.loc 1 2684 0
 6037 19cc 00BF     		nop
 6038 19ce 0C37     		adds	r7, r7, #12
 6039              		.cfi_def_cfa_offset 4
 6040 19d0 BD46     		mov	sp, r7
 6041              		.cfi_def_cfa_register 13
 6042              		@ sp needed
 6043 19d2 80BC     		pop	{r7}
 6044              		.cfi_restore 7
 6045              		.cfi_def_cfa_offset 0
 6046 19d4 7047     		bx	lr
 6047              		.cfi_endproc
 6048              	.LFE150:
 6049              		.size	TIM_ClearITPendingBit, .-TIM_ClearITPendingBit
 6050              		.align	1
 6051              		.syntax unified
 6052              		.thumb
 6053              		.thumb_func
 6054              		.fpu softvfp
 6055              		.type	TI1_Config, %function
 6056              	TI1_Config:
 6057              	.LFB151:
2685:lib/src/stm32f10x_tim.c **** 
2686:lib/src/stm32f10x_tim.c **** /**
2687:lib/src/stm32f10x_tim.c ****   * @brief  Configure the TI1 as Input.
2688:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
2689:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
2690:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2691:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
2692:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
2693:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
2694:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2695:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_DirectTI: TIM Input 1 is selected to be connected to IC1.
2696:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_IndirectTI: TIM Input 1 is selected to be connected to IC2.
2697:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_TRC: TIM Input 1 is selected to be connected to TRC.
2698:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
2699:lib/src/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F.
2700:lib/src/stm32f10x_tim.c ****   * @retval None
2701:lib/src/stm32f10x_tim.c ****   */
2702:lib/src/stm32f10x_tim.c **** static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
ARM GAS  /tmp/ccNus05k.s 			page 156


2703:lib/src/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter)
2704:lib/src/stm32f10x_tim.c **** {
 6058              		.loc 1 2704 0
 6059              		.cfi_startproc
 6060              		@ args = 0, pretend = 0, frame = 24
 6061              		@ frame_needed = 1, uses_anonymous_args = 0
 6062              		@ link register save eliminated.
 6063 19d6 80B4     		push	{r7}
 6064              		.cfi_def_cfa_offset 4
 6065              		.cfi_offset 7, -4
 6066 19d8 87B0     		sub	sp, sp, #28
 6067              		.cfi_def_cfa_offset 32
 6068 19da 00AF     		add	r7, sp, #0
 6069              		.cfi_def_cfa_register 7
 6070 19dc F860     		str	r0, [r7, #12]
 6071 19de 0846     		mov	r0, r1
 6072 19e0 1146     		mov	r1, r2
 6073 19e2 1A46     		mov	r2, r3
 6074 19e4 0346     		mov	r3, r0	@ movhi
 6075 19e6 7B81     		strh	r3, [r7, #10]	@ movhi
 6076 19e8 0B46     		mov	r3, r1	@ movhi
 6077 19ea 3B81     		strh	r3, [r7, #8]	@ movhi
 6078 19ec 1346     		mov	r3, r2	@ movhi
 6079 19ee FB80     		strh	r3, [r7, #6]	@ movhi
2705:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0;
 6080              		.loc 1 2705 0
 6081 19f0 0023     		movs	r3, #0
 6082 19f2 BB82     		strh	r3, [r7, #20]	@ movhi
 6083 19f4 0023     		movs	r3, #0
 6084 19f6 FB82     		strh	r3, [r7, #22]	@ movhi
2706:lib/src/stm32f10x_tim.c ****   /* Disable the Channel 1: Reset the CC1E Bit */
2707:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 6085              		.loc 1 2707 0
 6086 19f8 FB68     		ldr	r3, [r7, #12]
 6087 19fa 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6088 19fc 9BB2     		uxth	r3, r3
 6089 19fe 23F00103 		bic	r3, r3, #1
 6090 1a02 9AB2     		uxth	r2, r3
 6091 1a04 FB68     		ldr	r3, [r7, #12]
 6092 1a06 1A84     		strh	r2, [r3, #32]	@ movhi
2708:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 6093              		.loc 1 2708 0
 6094 1a08 FB68     		ldr	r3, [r7, #12]
 6095 1a0a 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 6096 1a0c BB82     		strh	r3, [r7, #20]	@ movhi
2709:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 6097              		.loc 1 2709 0
 6098 1a0e FB68     		ldr	r3, [r7, #12]
 6099 1a10 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6100 1a12 FB82     		strh	r3, [r7, #22]	@ movhi
2710:lib/src/stm32f10x_tim.c ****   /* Select the Input and set the filter */
2711:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
 6101              		.loc 1 2711 0
 6102 1a14 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6103 1a16 23F0F303 		bic	r3, r3, #243
 6104 1a1a BB82     		strh	r3, [r7, #20]	@ movhi
2712:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
ARM GAS  /tmp/ccNus05k.s 			page 157


 6105              		.loc 1 2712 0
 6106 1a1c FB88     		ldrh	r3, [r7, #6]	@ movhi
 6107 1a1e 1B01     		lsls	r3, r3, #4
 6108 1a20 9AB2     		uxth	r2, r3
 6109 1a22 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6110 1a24 1343     		orrs	r3, r3, r2
 6111 1a26 9AB2     		uxth	r2, r3
 6112 1a28 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6113 1a2a 1343     		orrs	r3, r3, r2
 6114 1a2c BB82     		strh	r3, [r7, #20]	@ movhi
2713:lib/src/stm32f10x_tim.c ****   
2714:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 6115              		.loc 1 2714 0
 6116 1a2e FB68     		ldr	r3, [r7, #12]
 6117 1a30 1C4A     		ldr	r2, .L197
 6118 1a32 9342     		cmp	r3, r2
 6119 1a34 13D0     		beq	.L194
 6120              		.loc 1 2714 0 is_stmt 0 discriminator 1
 6121 1a36 FB68     		ldr	r3, [r7, #12]
 6122 1a38 1B4A     		ldr	r2, .L197+4
 6123 1a3a 9342     		cmp	r3, r2
 6124 1a3c 0FD0     		beq	.L194
 6125              		.loc 1 2714 0 discriminator 2
 6126 1a3e FB68     		ldr	r3, [r7, #12]
 6127 1a40 B3F1804F 		cmp	r3, #1073741824
 6128 1a44 0BD0     		beq	.L194
 6129              		.loc 1 2714 0 discriminator 3
 6130 1a46 FB68     		ldr	r3, [r7, #12]
 6131 1a48 184A     		ldr	r2, .L197+8
 6132 1a4a 9342     		cmp	r3, r2
 6133 1a4c 07D0     		beq	.L194
 6134              		.loc 1 2714 0 discriminator 4
 6135 1a4e FB68     		ldr	r3, [r7, #12]
 6136 1a50 174A     		ldr	r2, .L197+12
 6137 1a52 9342     		cmp	r3, r2
 6138 1a54 03D0     		beq	.L194
2715:lib/src/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 6139              		.loc 1 2715 0 is_stmt 1
 6140 1a56 FB68     		ldr	r3, [r7, #12]
 6141 1a58 164A     		ldr	r2, .L197+16
 6142 1a5a 9342     		cmp	r3, r2
 6143 1a5c 0BD1     		bne	.L195
 6144              	.L194:
2716:lib/src/stm32f10x_tim.c ****   {
2717:lib/src/stm32f10x_tim.c ****     /* Select the Polarity and set the CC1E Bit */
2718:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 6145              		.loc 1 2718 0
 6146 1a5e FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6147 1a60 23F00203 		bic	r3, r3, #2
 6148 1a64 FB82     		strh	r3, [r7, #22]	@ movhi
2719:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 6149              		.loc 1 2719 0
 6150 1a66 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6151 1a68 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6152 1a6a 1343     		orrs	r3, r3, r2
 6153 1a6c 9BB2     		uxth	r3, r3
 6154 1a6e 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccNus05k.s 			page 158


 6155 1a72 FB82     		strh	r3, [r7, #22]	@ movhi
 6156 1a74 0AE0     		b	.L196
 6157              	.L195:
2720:lib/src/stm32f10x_tim.c ****   }
2721:lib/src/stm32f10x_tim.c ****   else
2722:lib/src/stm32f10x_tim.c ****   {
2723:lib/src/stm32f10x_tim.c ****     /* Select the Polarity and set the CC1E Bit */
2724:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 6158              		.loc 1 2724 0
 6159 1a76 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6160 1a78 23F00A03 		bic	r3, r3, #10
 6161 1a7c FB82     		strh	r3, [r7, #22]	@ movhi
2725:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 6162              		.loc 1 2725 0
 6163 1a7e 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6164 1a80 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6165 1a82 1343     		orrs	r3, r3, r2
 6166 1a84 9BB2     		uxth	r3, r3
 6167 1a86 43F00103 		orr	r3, r3, #1
 6168 1a8a FB82     		strh	r3, [r7, #22]	@ movhi
 6169              	.L196:
2726:lib/src/stm32f10x_tim.c ****   }
2727:lib/src/stm32f10x_tim.c **** 
2728:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
2729:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1;
 6170              		.loc 1 2729 0
 6171 1a8c FB68     		ldr	r3, [r7, #12]
 6172 1a8e BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6173 1a90 1A83     		strh	r2, [r3, #24]	@ movhi
2730:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 6174              		.loc 1 2730 0
 6175 1a92 FB68     		ldr	r3, [r7, #12]
 6176 1a94 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6177 1a96 1A84     		strh	r2, [r3, #32]	@ movhi
2731:lib/src/stm32f10x_tim.c **** }
 6178              		.loc 1 2731 0
 6179 1a98 00BF     		nop
 6180 1a9a 1C37     		adds	r7, r7, #28
 6181              		.cfi_def_cfa_offset 4
 6182 1a9c BD46     		mov	sp, r7
 6183              		.cfi_def_cfa_register 13
 6184              		@ sp needed
 6185 1a9e 80BC     		pop	{r7}
 6186              		.cfi_restore 7
 6187              		.cfi_def_cfa_offset 0
 6188 1aa0 7047     		bx	lr
 6189              	.L198:
 6190 1aa2 00BF     		.align	2
 6191              	.L197:
 6192 1aa4 002C0140 		.word	1073818624
 6193 1aa8 00340140 		.word	1073820672
 6194 1aac 00040040 		.word	1073742848
 6195 1ab0 00080040 		.word	1073743872
 6196 1ab4 000C0040 		.word	1073744896
 6197              		.cfi_endproc
 6198              	.LFE151:
 6199              		.size	TI1_Config, .-TI1_Config
ARM GAS  /tmp/ccNus05k.s 			page 159


 6200              		.align	1
 6201              		.syntax unified
 6202              		.thumb
 6203              		.thumb_func
 6204              		.fpu softvfp
 6205              		.type	TI2_Config, %function
 6206              	TI2_Config:
 6207              	.LFB152:
2732:lib/src/stm32f10x_tim.c **** 
2733:lib/src/stm32f10x_tim.c **** /**
2734:lib/src/stm32f10x_tim.c ****   * @brief  Configure the TI2 as Input.
2735:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
2736:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
2737:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2738:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
2739:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
2740:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
2741:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2742:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_DirectTI: TIM Input 2 is selected to be connected to IC2.
2743:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_IndirectTI: TIM Input 2 is selected to be connected to IC1.
2744:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_TRC: TIM Input 2 is selected to be connected to TRC.
2745:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
2746:lib/src/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F.
2747:lib/src/stm32f10x_tim.c ****   * @retval None
2748:lib/src/stm32f10x_tim.c ****   */
2749:lib/src/stm32f10x_tim.c **** static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
2750:lib/src/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter)
2751:lib/src/stm32f10x_tim.c **** {
 6208              		.loc 1 2751 0
 6209              		.cfi_startproc
 6210              		@ args = 0, pretend = 0, frame = 24
 6211              		@ frame_needed = 1, uses_anonymous_args = 0
 6212              		@ link register save eliminated.
 6213 1ab8 80B4     		push	{r7}
 6214              		.cfi_def_cfa_offset 4
 6215              		.cfi_offset 7, -4
 6216 1aba 87B0     		sub	sp, sp, #28
 6217              		.cfi_def_cfa_offset 32
 6218 1abc 00AF     		add	r7, sp, #0
 6219              		.cfi_def_cfa_register 7
 6220 1abe F860     		str	r0, [r7, #12]
 6221 1ac0 0846     		mov	r0, r1
 6222 1ac2 1146     		mov	r1, r2
 6223 1ac4 1A46     		mov	r2, r3
 6224 1ac6 0346     		mov	r3, r0	@ movhi
 6225 1ac8 7B81     		strh	r3, [r7, #10]	@ movhi
 6226 1aca 0B46     		mov	r3, r1	@ movhi
 6227 1acc 3B81     		strh	r3, [r7, #8]	@ movhi
 6228 1ace 1346     		mov	r3, r2	@ movhi
 6229 1ad0 FB80     		strh	r3, [r7, #6]	@ movhi
2752:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 6230              		.loc 1 2752 0
 6231 1ad2 0023     		movs	r3, #0
 6232 1ad4 BB82     		strh	r3, [r7, #20]	@ movhi
 6233 1ad6 0023     		movs	r3, #0
 6234 1ad8 FB82     		strh	r3, [r7, #22]	@ movhi
 6235 1ada 0023     		movs	r3, #0
ARM GAS  /tmp/ccNus05k.s 			page 160


 6236 1adc 7B82     		strh	r3, [r7, #18]	@ movhi
2753:lib/src/stm32f10x_tim.c ****   /* Disable the Channel 2: Reset the CC2E Bit */
2754:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 6237              		.loc 1 2754 0
 6238 1ade FB68     		ldr	r3, [r7, #12]
 6239 1ae0 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6240 1ae2 9BB2     		uxth	r3, r3
 6241 1ae4 23F01003 		bic	r3, r3, #16
 6242 1ae8 9AB2     		uxth	r2, r3
 6243 1aea FB68     		ldr	r3, [r7, #12]
 6244 1aec 1A84     		strh	r2, [r3, #32]	@ movhi
2755:lib/src/stm32f10x_tim.c ****   tmpccmr1 = TIMx->CCMR1;
 6245              		.loc 1 2755 0
 6246 1aee FB68     		ldr	r3, [r7, #12]
 6247 1af0 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 6248 1af2 BB82     		strh	r3, [r7, #20]	@ movhi
2756:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 6249              		.loc 1 2756 0
 6250 1af4 FB68     		ldr	r3, [r7, #12]
 6251 1af6 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6252 1af8 FB82     		strh	r3, [r7, #22]	@ movhi
2757:lib/src/stm32f10x_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 4);
 6253              		.loc 1 2757 0
 6254 1afa 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6255 1afc 1B01     		lsls	r3, r3, #4
 6256 1afe 7B82     		strh	r3, [r7, #18]	@ movhi
2758:lib/src/stm32f10x_tim.c ****   /* Select the Input and set the filter */
2759:lib/src/stm32f10x_tim.c ****   tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1
 6257              		.loc 1 2759 0
 6258 1b00 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6259 1b02 23F44073 		bic	r3, r3, #768
 6260 1b06 1B05     		lsls	r3, r3, #20
 6261 1b08 1B0D     		lsrs	r3, r3, #20
 6262 1b0a BB82     		strh	r3, [r7, #20]	@ movhi
2760:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 6263              		.loc 1 2760 0
 6264 1b0c FB88     		ldrh	r3, [r7, #6]	@ movhi
 6265 1b0e 1B03     		lsls	r3, r3, #12
 6266 1b10 9AB2     		uxth	r2, r3
 6267 1b12 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6268 1b14 1343     		orrs	r3, r3, r2
 6269 1b16 BB82     		strh	r3, [r7, #20]	@ movhi
2761:lib/src/stm32f10x_tim.c ****   tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 6270              		.loc 1 2761 0
 6271 1b18 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6272 1b1a 1B02     		lsls	r3, r3, #8
 6273 1b1c 9AB2     		uxth	r2, r3
 6274 1b1e BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6275 1b20 1343     		orrs	r3, r3, r2
 6276 1b22 BB82     		strh	r3, [r7, #20]	@ movhi
2762:lib/src/stm32f10x_tim.c ****   
2763:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 6277              		.loc 1 2763 0
 6278 1b24 FB68     		ldr	r3, [r7, #12]
 6279 1b26 1C4A     		ldr	r2, .L203
 6280 1b28 9342     		cmp	r3, r2
 6281 1b2a 13D0     		beq	.L200
ARM GAS  /tmp/ccNus05k.s 			page 161


 6282              		.loc 1 2763 0 is_stmt 0 discriminator 1
 6283 1b2c FB68     		ldr	r3, [r7, #12]
 6284 1b2e 1B4A     		ldr	r2, .L203+4
 6285 1b30 9342     		cmp	r3, r2
 6286 1b32 0FD0     		beq	.L200
 6287              		.loc 1 2763 0 discriminator 2
 6288 1b34 FB68     		ldr	r3, [r7, #12]
 6289 1b36 B3F1804F 		cmp	r3, #1073741824
 6290 1b3a 0BD0     		beq	.L200
 6291              		.loc 1 2763 0 discriminator 3
 6292 1b3c FB68     		ldr	r3, [r7, #12]
 6293 1b3e 184A     		ldr	r2, .L203+8
 6294 1b40 9342     		cmp	r3, r2
 6295 1b42 07D0     		beq	.L200
 6296              		.loc 1 2763 0 discriminator 4
 6297 1b44 FB68     		ldr	r3, [r7, #12]
 6298 1b46 174A     		ldr	r2, .L203+12
 6299 1b48 9342     		cmp	r3, r2
 6300 1b4a 03D0     		beq	.L200
2764:lib/src/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 6301              		.loc 1 2764 0 is_stmt 1
 6302 1b4c FB68     		ldr	r3, [r7, #12]
 6303 1b4e 164A     		ldr	r2, .L203+16
 6304 1b50 9342     		cmp	r3, r2
 6305 1b52 0BD1     		bne	.L201
 6306              	.L200:
2765:lib/src/stm32f10x_tim.c ****   {
2766:lib/src/stm32f10x_tim.c ****     /* Select the Polarity and set the CC2E Bit */
2767:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 6307              		.loc 1 2767 0
 6308 1b54 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6309 1b56 23F02003 		bic	r3, r3, #32
 6310 1b5a FB82     		strh	r3, [r7, #22]	@ movhi
2768:lib/src/stm32f10x_tim.c ****     tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 6311              		.loc 1 2768 0
 6312 1b5c 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6313 1b5e FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6314 1b60 1343     		orrs	r3, r3, r2
 6315 1b62 9BB2     		uxth	r3, r3
 6316 1b64 43F01003 		orr	r3, r3, #16
 6317 1b68 FB82     		strh	r3, [r7, #22]	@ movhi
 6318 1b6a 0AE0     		b	.L202
 6319              	.L201:
2769:lib/src/stm32f10x_tim.c ****   }
2770:lib/src/stm32f10x_tim.c ****   else
2771:lib/src/stm32f10x_tim.c ****   {
2772:lib/src/stm32f10x_tim.c ****     /* Select the Polarity and set the CC2E Bit */
2773:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 6320              		.loc 1 2773 0
 6321 1b6c FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6322 1b6e 23F0A003 		bic	r3, r3, #160
 6323 1b72 FB82     		strh	r3, [r7, #22]	@ movhi
2774:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 6324              		.loc 1 2774 0
 6325 1b74 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6326 1b76 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6327 1b78 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccNus05k.s 			page 162


 6328 1b7a 9BB2     		uxth	r3, r3
 6329 1b7c 43F01003 		orr	r3, r3, #16
 6330 1b80 FB82     		strh	r3, [r7, #22]	@ movhi
 6331              	.L202:
2775:lib/src/stm32f10x_tim.c ****   }
2776:lib/src/stm32f10x_tim.c ****   
2777:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR1 and CCER registers */
2778:lib/src/stm32f10x_tim.c ****   TIMx->CCMR1 = tmpccmr1 ;
 6332              		.loc 1 2778 0
 6333 1b82 FB68     		ldr	r3, [r7, #12]
 6334 1b84 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6335 1b86 1A83     		strh	r2, [r3, #24]	@ movhi
2779:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 6336              		.loc 1 2779 0
 6337 1b88 FB68     		ldr	r3, [r7, #12]
 6338 1b8a FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6339 1b8c 1A84     		strh	r2, [r3, #32]	@ movhi
2780:lib/src/stm32f10x_tim.c **** }
 6340              		.loc 1 2780 0
 6341 1b8e 00BF     		nop
 6342 1b90 1C37     		adds	r7, r7, #28
 6343              		.cfi_def_cfa_offset 4
 6344 1b92 BD46     		mov	sp, r7
 6345              		.cfi_def_cfa_register 13
 6346              		@ sp needed
 6347 1b94 80BC     		pop	{r7}
 6348              		.cfi_restore 7
 6349              		.cfi_def_cfa_offset 0
 6350 1b96 7047     		bx	lr
 6351              	.L204:
 6352              		.align	2
 6353              	.L203:
 6354 1b98 002C0140 		.word	1073818624
 6355 1b9c 00340140 		.word	1073820672
 6356 1ba0 00040040 		.word	1073742848
 6357 1ba4 00080040 		.word	1073743872
 6358 1ba8 000C0040 		.word	1073744896
 6359              		.cfi_endproc
 6360              	.LFE152:
 6361              		.size	TI2_Config, .-TI2_Config
 6362              		.align	1
 6363              		.syntax unified
 6364              		.thumb
 6365              		.thumb_func
 6366              		.fpu softvfp
 6367              		.type	TI3_Config, %function
 6368              	TI3_Config:
 6369              	.LFB153:
2781:lib/src/stm32f10x_tim.c **** 
2782:lib/src/stm32f10x_tim.c **** /**
2783:lib/src/stm32f10x_tim.c ****   * @brief  Configure the TI3 as Input.
2784:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2785:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
2786:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2787:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
2788:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
2789:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
ARM GAS  /tmp/ccNus05k.s 			page 163


2790:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2791:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_DirectTI: TIM Input 3 is selected to be connected to IC3.
2792:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_IndirectTI: TIM Input 3 is selected to be connected to IC4.
2793:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_TRC: TIM Input 3 is selected to be connected to TRC.
2794:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
2795:lib/src/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F.
2796:lib/src/stm32f10x_tim.c ****   * @retval None
2797:lib/src/stm32f10x_tim.c ****   */
2798:lib/src/stm32f10x_tim.c **** static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
2799:lib/src/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter)
2800:lib/src/stm32f10x_tim.c **** {
 6370              		.loc 1 2800 0
 6371              		.cfi_startproc
 6372              		@ args = 0, pretend = 0, frame = 24
 6373              		@ frame_needed = 1, uses_anonymous_args = 0
 6374              		@ link register save eliminated.
 6375 1bac 80B4     		push	{r7}
 6376              		.cfi_def_cfa_offset 4
 6377              		.cfi_offset 7, -4
 6378 1bae 87B0     		sub	sp, sp, #28
 6379              		.cfi_def_cfa_offset 32
 6380 1bb0 00AF     		add	r7, sp, #0
 6381              		.cfi_def_cfa_register 7
 6382 1bb2 F860     		str	r0, [r7, #12]
 6383 1bb4 0846     		mov	r0, r1
 6384 1bb6 1146     		mov	r1, r2
 6385 1bb8 1A46     		mov	r2, r3
 6386 1bba 0346     		mov	r3, r0	@ movhi
 6387 1bbc 7B81     		strh	r3, [r7, #10]	@ movhi
 6388 1bbe 0B46     		mov	r3, r1	@ movhi
 6389 1bc0 3B81     		strh	r3, [r7, #8]	@ movhi
 6390 1bc2 1346     		mov	r3, r2	@ movhi
 6391 1bc4 FB80     		strh	r3, [r7, #6]	@ movhi
2801:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 6392              		.loc 1 2801 0
 6393 1bc6 0023     		movs	r3, #0
 6394 1bc8 BB82     		strh	r3, [r7, #20]	@ movhi
 6395 1bca 0023     		movs	r3, #0
 6396 1bcc FB82     		strh	r3, [r7, #22]	@ movhi
 6397 1bce 0023     		movs	r3, #0
 6398 1bd0 7B82     		strh	r3, [r7, #18]	@ movhi
2802:lib/src/stm32f10x_tim.c ****   /* Disable the Channel 3: Reset the CC3E Bit */
2803:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 6399              		.loc 1 2803 0
 6400 1bd2 FB68     		ldr	r3, [r7, #12]
 6401 1bd4 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6402 1bd6 9BB2     		uxth	r3, r3
 6403 1bd8 23F48073 		bic	r3, r3, #256
 6404 1bdc 9AB2     		uxth	r2, r3
 6405 1bde FB68     		ldr	r3, [r7, #12]
 6406 1be0 1A84     		strh	r2, [r3, #32]	@ movhi
2804:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 6407              		.loc 1 2804 0
 6408 1be2 FB68     		ldr	r3, [r7, #12]
 6409 1be4 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 6410 1be6 BB82     		strh	r3, [r7, #20]	@ movhi
2805:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
ARM GAS  /tmp/ccNus05k.s 			page 164


 6411              		.loc 1 2805 0
 6412 1be8 FB68     		ldr	r3, [r7, #12]
 6413 1bea 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6414 1bec FB82     		strh	r3, [r7, #22]	@ movhi
2806:lib/src/stm32f10x_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 8);
 6415              		.loc 1 2806 0
 6416 1bee 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6417 1bf0 1B02     		lsls	r3, r3, #8
 6418 1bf2 7B82     		strh	r3, [r7, #18]	@ movhi
2807:lib/src/stm32f10x_tim.c ****   /* Select the Input and set the filter */
2808:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2
 6419              		.loc 1 2808 0
 6420 1bf4 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6421 1bf6 23F0F303 		bic	r3, r3, #243
 6422 1bfa BB82     		strh	r3, [r7, #20]	@ movhi
2809:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 6423              		.loc 1 2809 0
 6424 1bfc FB88     		ldrh	r3, [r7, #6]	@ movhi
 6425 1bfe 1B01     		lsls	r3, r3, #4
 6426 1c00 9AB2     		uxth	r2, r3
 6427 1c02 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6428 1c04 1343     		orrs	r3, r3, r2
 6429 1c06 9AB2     		uxth	r2, r3
 6430 1c08 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6431 1c0a 1343     		orrs	r3, r3, r2
 6432 1c0c BB82     		strh	r3, [r7, #20]	@ movhi
2810:lib/src/stm32f10x_tim.c ****     
2811:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 6433              		.loc 1 2811 0
 6434 1c0e FB68     		ldr	r3, [r7, #12]
 6435 1c10 1C4A     		ldr	r2, .L209
 6436 1c12 9342     		cmp	r3, r2
 6437 1c14 13D0     		beq	.L206
 6438              		.loc 1 2811 0 is_stmt 0 discriminator 1
 6439 1c16 FB68     		ldr	r3, [r7, #12]
 6440 1c18 1B4A     		ldr	r2, .L209+4
 6441 1c1a 9342     		cmp	r3, r2
 6442 1c1c 0FD0     		beq	.L206
 6443              		.loc 1 2811 0 discriminator 2
 6444 1c1e FB68     		ldr	r3, [r7, #12]
 6445 1c20 B3F1804F 		cmp	r3, #1073741824
 6446 1c24 0BD0     		beq	.L206
 6447              		.loc 1 2811 0 discriminator 3
 6448 1c26 FB68     		ldr	r3, [r7, #12]
 6449 1c28 184A     		ldr	r2, .L209+8
 6450 1c2a 9342     		cmp	r3, r2
 6451 1c2c 07D0     		beq	.L206
 6452              		.loc 1 2811 0 discriminator 4
 6453 1c2e FB68     		ldr	r3, [r7, #12]
 6454 1c30 174A     		ldr	r2, .L209+12
 6455 1c32 9342     		cmp	r3, r2
 6456 1c34 03D0     		beq	.L206
2812:lib/src/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 6457              		.loc 1 2812 0 is_stmt 1
 6458 1c36 FB68     		ldr	r3, [r7, #12]
 6459 1c38 164A     		ldr	r2, .L209+16
 6460 1c3a 9342     		cmp	r3, r2
ARM GAS  /tmp/ccNus05k.s 			page 165


 6461 1c3c 0BD1     		bne	.L207
 6462              	.L206:
2813:lib/src/stm32f10x_tim.c ****   {
2814:lib/src/stm32f10x_tim.c ****     /* Select the Polarity and set the CC3E Bit */
2815:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 6463              		.loc 1 2815 0
 6464 1c3e FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6465 1c40 23F40073 		bic	r3, r3, #512
 6466 1c44 FB82     		strh	r3, [r7, #22]	@ movhi
2816:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 6467              		.loc 1 2816 0
 6468 1c46 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6469 1c48 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6470 1c4a 1343     		orrs	r3, r3, r2
 6471 1c4c 9BB2     		uxth	r3, r3
 6472 1c4e 43F48073 		orr	r3, r3, #256
 6473 1c52 FB82     		strh	r3, [r7, #22]	@ movhi
 6474 1c54 0AE0     		b	.L208
 6475              	.L207:
2817:lib/src/stm32f10x_tim.c ****   }
2818:lib/src/stm32f10x_tim.c ****   else
2819:lib/src/stm32f10x_tim.c ****   {
2820:lib/src/stm32f10x_tim.c ****     /* Select the Polarity and set the CC3E Bit */
2821:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 6476              		.loc 1 2821 0
 6477 1c56 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6478 1c58 23F42063 		bic	r3, r3, #2560
 6479 1c5c FB82     		strh	r3, [r7, #22]	@ movhi
2822:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 6480              		.loc 1 2822 0
 6481 1c5e 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6482 1c60 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6483 1c62 1343     		orrs	r3, r3, r2
 6484 1c64 9BB2     		uxth	r3, r3
 6485 1c66 43F48073 		orr	r3, r3, #256
 6486 1c6a FB82     		strh	r3, [r7, #22]	@ movhi
 6487              	.L208:
2823:lib/src/stm32f10x_tim.c ****   }
2824:lib/src/stm32f10x_tim.c ****   
2825:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
2826:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 6488              		.loc 1 2826 0
 6489 1c6c FB68     		ldr	r3, [r7, #12]
 6490 1c6e BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6491 1c70 9A83     		strh	r2, [r3, #28]	@ movhi
2827:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 6492              		.loc 1 2827 0
 6493 1c72 FB68     		ldr	r3, [r7, #12]
 6494 1c74 FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6495 1c76 1A84     		strh	r2, [r3, #32]	@ movhi
2828:lib/src/stm32f10x_tim.c **** }
 6496              		.loc 1 2828 0
 6497 1c78 00BF     		nop
 6498 1c7a 1C37     		adds	r7, r7, #28
 6499              		.cfi_def_cfa_offset 4
 6500 1c7c BD46     		mov	sp, r7
 6501              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccNus05k.s 			page 166


 6502              		@ sp needed
 6503 1c7e 80BC     		pop	{r7}
 6504              		.cfi_restore 7
 6505              		.cfi_def_cfa_offset 0
 6506 1c80 7047     		bx	lr
 6507              	.L210:
 6508 1c82 00BF     		.align	2
 6509              	.L209:
 6510 1c84 002C0140 		.word	1073818624
 6511 1c88 00340140 		.word	1073820672
 6512 1c8c 00040040 		.word	1073742848
 6513 1c90 00080040 		.word	1073743872
 6514 1c94 000C0040 		.word	1073744896
 6515              		.cfi_endproc
 6516              	.LFE153:
 6517              		.size	TI3_Config, .-TI3_Config
 6518              		.align	1
 6519              		.syntax unified
 6520              		.thumb
 6521              		.thumb_func
 6522              		.fpu softvfp
 6523              		.type	TI4_Config, %function
 6524              	TI4_Config:
 6525              	.LFB154:
2829:lib/src/stm32f10x_tim.c **** 
2830:lib/src/stm32f10x_tim.c **** /**
2831:lib/src/stm32f10x_tim.c ****   * @brief  Configure the TI4 as Input.
2832:lib/src/stm32f10x_tim.c ****   * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
2833:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICPolarity : The Input Polarity.
2834:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2835:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Rising
2836:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICPolarity_Falling
2837:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICSelection: specifies the input to be used.
2838:lib/src/stm32f10x_tim.c ****   *   This parameter can be one of the following values:
2839:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_DirectTI: TIM Input 4 is selected to be connected to IC4.
2840:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_IndirectTI: TIM Input 4 is selected to be connected to IC3.
2841:lib/src/stm32f10x_tim.c ****   *     @arg TIM_ICSelection_TRC: TIM Input 4 is selected to be connected to TRC.
2842:lib/src/stm32f10x_tim.c ****   * @param  TIM_ICFilter: Specifies the Input Capture Filter.
2843:lib/src/stm32f10x_tim.c ****   *   This parameter must be a value between 0x00 and 0x0F.
2844:lib/src/stm32f10x_tim.c ****   * @retval None
2845:lib/src/stm32f10x_tim.c ****   */
2846:lib/src/stm32f10x_tim.c **** static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
2847:lib/src/stm32f10x_tim.c ****                        uint16_t TIM_ICFilter)
2848:lib/src/stm32f10x_tim.c **** {
 6526              		.loc 1 2848 0
 6527              		.cfi_startproc
 6528              		@ args = 0, pretend = 0, frame = 24
 6529              		@ frame_needed = 1, uses_anonymous_args = 0
 6530              		@ link register save eliminated.
 6531 1c98 80B4     		push	{r7}
 6532              		.cfi_def_cfa_offset 4
 6533              		.cfi_offset 7, -4
 6534 1c9a 87B0     		sub	sp, sp, #28
 6535              		.cfi_def_cfa_offset 32
 6536 1c9c 00AF     		add	r7, sp, #0
 6537              		.cfi_def_cfa_register 7
 6538 1c9e F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccNus05k.s 			page 167


 6539 1ca0 0846     		mov	r0, r1
 6540 1ca2 1146     		mov	r1, r2
 6541 1ca4 1A46     		mov	r2, r3
 6542 1ca6 0346     		mov	r3, r0	@ movhi
 6543 1ca8 7B81     		strh	r3, [r7, #10]	@ movhi
 6544 1caa 0B46     		mov	r3, r1	@ movhi
 6545 1cac 3B81     		strh	r3, [r7, #8]	@ movhi
 6546 1cae 1346     		mov	r3, r2	@ movhi
 6547 1cb0 FB80     		strh	r3, [r7, #6]	@ movhi
2849:lib/src/stm32f10x_tim.c ****   uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 6548              		.loc 1 2849 0
 6549 1cb2 0023     		movs	r3, #0
 6550 1cb4 BB82     		strh	r3, [r7, #20]	@ movhi
 6551 1cb6 0023     		movs	r3, #0
 6552 1cb8 FB82     		strh	r3, [r7, #22]	@ movhi
 6553 1cba 0023     		movs	r3, #0
 6554 1cbc 7B82     		strh	r3, [r7, #18]	@ movhi
2850:lib/src/stm32f10x_tim.c **** 
2851:lib/src/stm32f10x_tim.c ****    /* Disable the Channel 4: Reset the CC4E Bit */
2852:lib/src/stm32f10x_tim.c ****   TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 6555              		.loc 1 2852 0
 6556 1cbe FB68     		ldr	r3, [r7, #12]
 6557 1cc0 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6558 1cc2 9BB2     		uxth	r3, r3
 6559 1cc4 23F48053 		bic	r3, r3, #4096
 6560 1cc8 9AB2     		uxth	r2, r3
 6561 1cca FB68     		ldr	r3, [r7, #12]
 6562 1ccc 1A84     		strh	r2, [r3, #32]	@ movhi
2853:lib/src/stm32f10x_tim.c ****   tmpccmr2 = TIMx->CCMR2;
 6563              		.loc 1 2853 0
 6564 1cce FB68     		ldr	r3, [r7, #12]
 6565 1cd0 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 6566 1cd2 BB82     		strh	r3, [r7, #20]	@ movhi
2854:lib/src/stm32f10x_tim.c ****   tmpccer = TIMx->CCER;
 6567              		.loc 1 2854 0
 6568 1cd4 FB68     		ldr	r3, [r7, #12]
 6569 1cd6 1B8C     		ldrh	r3, [r3, #32]	@ movhi
 6570 1cd8 FB82     		strh	r3, [r7, #22]	@ movhi
2855:lib/src/stm32f10x_tim.c ****   tmp = (uint16_t)(TIM_ICPolarity << 12);
 6571              		.loc 1 2855 0
 6572 1cda 7B89     		ldrh	r3, [r7, #10]	@ movhi
 6573 1cdc 1B03     		lsls	r3, r3, #12
 6574 1cde 7B82     		strh	r3, [r7, #18]	@ movhi
2856:lib/src/stm32f10x_tim.c ****   /* Select the Input and set the filter */
2857:lib/src/stm32f10x_tim.c ****   tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_I
 6575              		.loc 1 2857 0
 6576 1ce0 BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6577 1ce2 23F44073 		bic	r3, r3, #768
 6578 1ce6 1B05     		lsls	r3, r3, #20
 6579 1ce8 1B0D     		lsrs	r3, r3, #20
 6580 1cea BB82     		strh	r3, [r7, #20]	@ movhi
2858:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 6581              		.loc 1 2858 0
 6582 1cec 3B89     		ldrh	r3, [r7, #8]	@ movhi
 6583 1cee 1B02     		lsls	r3, r3, #8
 6584 1cf0 9AB2     		uxth	r2, r3
 6585 1cf2 BB8A     		ldrh	r3, [r7, #20]	@ movhi
ARM GAS  /tmp/ccNus05k.s 			page 168


 6586 1cf4 1343     		orrs	r3, r3, r2
 6587 1cf6 BB82     		strh	r3, [r7, #20]	@ movhi
2859:lib/src/stm32f10x_tim.c ****   tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 6588              		.loc 1 2859 0
 6589 1cf8 FB88     		ldrh	r3, [r7, #6]	@ movhi
 6590 1cfa 1B03     		lsls	r3, r3, #12
 6591 1cfc 9AB2     		uxth	r2, r3
 6592 1cfe BB8A     		ldrh	r3, [r7, #20]	@ movhi
 6593 1d00 1343     		orrs	r3, r3, r2
 6594 1d02 BB82     		strh	r3, [r7, #20]	@ movhi
2860:lib/src/stm32f10x_tim.c ****   
2861:lib/src/stm32f10x_tim.c ****   if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 6595              		.loc 1 2861 0
 6596 1d04 FB68     		ldr	r3, [r7, #12]
 6597 1d06 1D4A     		ldr	r2, .L215
 6598 1d08 9342     		cmp	r3, r2
 6599 1d0a 13D0     		beq	.L212
 6600              		.loc 1 2861 0 is_stmt 0 discriminator 1
 6601 1d0c FB68     		ldr	r3, [r7, #12]
 6602 1d0e 1C4A     		ldr	r2, .L215+4
 6603 1d10 9342     		cmp	r3, r2
 6604 1d12 0FD0     		beq	.L212
 6605              		.loc 1 2861 0 discriminator 2
 6606 1d14 FB68     		ldr	r3, [r7, #12]
 6607 1d16 B3F1804F 		cmp	r3, #1073741824
 6608 1d1a 0BD0     		beq	.L212
 6609              		.loc 1 2861 0 discriminator 3
 6610 1d1c FB68     		ldr	r3, [r7, #12]
 6611 1d1e 194A     		ldr	r2, .L215+8
 6612 1d20 9342     		cmp	r3, r2
 6613 1d22 07D0     		beq	.L212
 6614              		.loc 1 2861 0 discriminator 4
 6615 1d24 FB68     		ldr	r3, [r7, #12]
 6616 1d26 184A     		ldr	r2, .L215+12
 6617 1d28 9342     		cmp	r3, r2
 6618 1d2a 03D0     		beq	.L212
2862:lib/src/stm32f10x_tim.c ****      (TIMx == TIM4) ||(TIMx == TIM5))
 6619              		.loc 1 2862 0 is_stmt 1
 6620 1d2c FB68     		ldr	r3, [r7, #12]
 6621 1d2e 174A     		ldr	r2, .L215+16
 6622 1d30 9342     		cmp	r3, r2
 6623 1d32 0BD1     		bne	.L213
 6624              	.L212:
2863:lib/src/stm32f10x_tim.c ****   {
2864:lib/src/stm32f10x_tim.c ****     /* Select the Polarity and set the CC4E Bit */
2865:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 6625              		.loc 1 2865 0
 6626 1d34 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6627 1d36 23F40053 		bic	r3, r3, #8192
 6628 1d3a FB82     		strh	r3, [r7, #22]	@ movhi
2866:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 6629              		.loc 1 2866 0
 6630 1d3c 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 6631 1d3e FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6632 1d40 1343     		orrs	r3, r3, r2
 6633 1d42 9BB2     		uxth	r3, r3
 6634 1d44 43F48053 		orr	r3, r3, #4096
ARM GAS  /tmp/ccNus05k.s 			page 169


 6635 1d48 FB82     		strh	r3, [r7, #22]	@ movhi
 6636 1d4a 0CE0     		b	.L214
 6637              	.L213:
2867:lib/src/stm32f10x_tim.c ****   }
2868:lib/src/stm32f10x_tim.c ****   else
2869:lib/src/stm32f10x_tim.c ****   {
2870:lib/src/stm32f10x_tim.c ****     /* Select the Polarity and set the CC4E Bit */
2871:lib/src/stm32f10x_tim.c ****     tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 6638              		.loc 1 2871 0
 6639 1d4c FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6640 1d4e 23F40073 		bic	r3, r3, #512
 6641 1d52 5B04     		lsls	r3, r3, #17
 6642 1d54 5B0C     		lsrs	r3, r3, #17
 6643 1d56 FB82     		strh	r3, [r7, #22]	@ movhi
2872:lib/src/stm32f10x_tim.c ****     tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 6644              		.loc 1 2872 0
 6645 1d58 7A89     		ldrh	r2, [r7, #10]	@ movhi
 6646 1d5a FB8A     		ldrh	r3, [r7, #22]	@ movhi
 6647 1d5c 1343     		orrs	r3, r3, r2
 6648 1d5e 9BB2     		uxth	r3, r3
 6649 1d60 43F48053 		orr	r3, r3, #4096
 6650 1d64 FB82     		strh	r3, [r7, #22]	@ movhi
 6651              	.L214:
2873:lib/src/stm32f10x_tim.c ****   }
2874:lib/src/stm32f10x_tim.c ****   /* Write to TIMx CCMR2 and CCER registers */
2875:lib/src/stm32f10x_tim.c ****   TIMx->CCMR2 = tmpccmr2;
 6652              		.loc 1 2875 0
 6653 1d66 FB68     		ldr	r3, [r7, #12]
 6654 1d68 BA8A     		ldrh	r2, [r7, #20]	@ movhi
 6655 1d6a 9A83     		strh	r2, [r3, #28]	@ movhi
2876:lib/src/stm32f10x_tim.c ****   TIMx->CCER = tmpccer;
 6656              		.loc 1 2876 0
 6657 1d6c FB68     		ldr	r3, [r7, #12]
 6658 1d6e FA8A     		ldrh	r2, [r7, #22]	@ movhi
 6659 1d70 1A84     		strh	r2, [r3, #32]	@ movhi
2877:lib/src/stm32f10x_tim.c **** }
 6660              		.loc 1 2877 0
 6661 1d72 00BF     		nop
 6662 1d74 1C37     		adds	r7, r7, #28
 6663              		.cfi_def_cfa_offset 4
 6664 1d76 BD46     		mov	sp, r7
 6665              		.cfi_def_cfa_register 13
 6666              		@ sp needed
 6667 1d78 80BC     		pop	{r7}
 6668              		.cfi_restore 7
 6669              		.cfi_def_cfa_offset 0
 6670 1d7a 7047     		bx	lr
 6671              	.L216:
 6672              		.align	2
 6673              	.L215:
 6674 1d7c 002C0140 		.word	1073818624
 6675 1d80 00340140 		.word	1073820672
 6676 1d84 00040040 		.word	1073742848
 6677 1d88 00080040 		.word	1073743872
 6678 1d8c 000C0040 		.word	1073744896
 6679              		.cfi_endproc
 6680              	.LFE154:
ARM GAS  /tmp/ccNus05k.s 			page 170


 6681              		.size	TI4_Config, .-TI4_Config
 6682              	.Letext0:
 6683              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 6684              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 6685              		.file 4 "/home/enbin/Documents/code/STM/stm32-quadrocopter/cmsis/core_cm3.h"
 6686              		.file 5 "/home/enbin/Documents/code/STM/stm32-quadrocopter/lib/inc/system_stm32f10x.h"
 6687              		.file 6 "/home/enbin/Documents/code/STM/stm32-quadrocopter/lib/inc/stm32f10x.h"
 6688              		.file 7 "/home/enbin/Documents/code/STM/stm32-quadrocopter/lib/inc/stm32f10x_tim.h"
 6689              		.file 8 "/home/enbin/Documents/code/STM/stm32-quadrocopter/drivers/mpu6050.h"
 6690              		.file 9 "/usr/arm-none-eabi/include/sys/lock.h"
 6691              		.file 10 "/usr/arm-none-eabi/include/sys/_types.h"
 6692              		.file 11 "/usr/lib/gcc/arm-none-eabi/6.1.1/include/stddef.h"
 6693              		.file 12 "/usr/arm-none-eabi/include/sys/reent.h"
 6694              		.file 13 "/usr/arm-none-eabi/include/math.h"
 6695              		.section	.debug_info,"",%progbits
 6696              	.Ldebug_info0:
 6697 0000 52250000 		.4byte	0x2552
 6698 0004 0400     		.2byte	0x4
 6699 0006 00000000 		.4byte	.Ldebug_abbrev0
 6700 000a 04       		.byte	0x4
 6701 000b 01       		.uleb128 0x1
 6702 000c D7100000 		.4byte	.LASF359
 6703 0010 0C       		.byte	0xc
 6704 0011 1A110000 		.4byte	.LASF360
 6705 0015 97010000 		.4byte	.LASF361
 6706 0019 00000000 		.4byte	.Ltext0
 6707 001d 901D0000 		.4byte	.Letext0-.Ltext0
 6708 0021 00000000 		.4byte	.Ldebug_line0
 6709 0025 02       		.uleb128 0x2
 6710 0026 01       		.byte	0x1
 6711 0027 06       		.byte	0x6
 6712 0028 1C040000 		.4byte	.LASF0
 6713 002c 03       		.uleb128 0x3
 6714 002d 37020000 		.4byte	.LASF2
 6715 0031 02       		.byte	0x2
 6716 0032 1D       		.byte	0x1d
 6717 0033 37000000 		.4byte	0x37
 6718 0037 02       		.uleb128 0x2
 6719 0038 01       		.byte	0x1
 6720 0039 08       		.byte	0x8
 6721 003a A8040000 		.4byte	.LASF1
 6722 003e 03       		.uleb128 0x3
 6723 003f FF0D0000 		.4byte	.LASF3
 6724 0043 02       		.byte	0x2
 6725 0044 29       		.byte	0x29
 6726 0045 49000000 		.4byte	0x49
 6727 0049 02       		.uleb128 0x2
 6728 004a 02       		.byte	0x2
 6729 004b 05       		.byte	0x5
 6730 004c 080F0000 		.4byte	.LASF4
 6731 0050 03       		.uleb128 0x3
 6732 0051 A4050000 		.4byte	.LASF5
 6733 0055 02       		.byte	0x2
 6734 0056 2B       		.byte	0x2b
 6735 0057 5B000000 		.4byte	0x5b
 6736 005b 02       		.uleb128 0x2
 6737 005c 02       		.byte	0x2
ARM GAS  /tmp/ccNus05k.s 			page 171


 6738 005d 07       		.byte	0x7
 6739 005e 32110000 		.4byte	.LASF6
 6740 0062 03       		.uleb128 0x3
 6741 0063 AF110000 		.4byte	.LASF7
 6742 0067 02       		.byte	0x2
 6743 0068 3F       		.byte	0x3f
 6744 0069 6D000000 		.4byte	0x6d
 6745 006d 02       		.uleb128 0x2
 6746 006e 04       		.byte	0x4
 6747 006f 05       		.byte	0x5
 6748 0070 E6020000 		.4byte	.LASF8
 6749 0074 03       		.uleb128 0x3
 6750 0075 E1080000 		.4byte	.LASF9
 6751 0079 02       		.byte	0x2
 6752 007a 41       		.byte	0x41
 6753 007b 7F000000 		.4byte	0x7f
 6754 007f 02       		.uleb128 0x2
 6755 0080 04       		.byte	0x4
 6756 0081 07       		.byte	0x7
 6757 0082 76070000 		.4byte	.LASF10
 6758 0086 02       		.uleb128 0x2
 6759 0087 08       		.byte	0x8
 6760 0088 05       		.byte	0x5
 6761 0089 0C090000 		.4byte	.LASF11
 6762 008d 02       		.uleb128 0x2
 6763 008e 08       		.byte	0x8
 6764 008f 07       		.byte	0x7
 6765 0090 A80C0000 		.4byte	.LASF12
 6766 0094 04       		.uleb128 0x4
 6767 0095 04       		.byte	0x4
 6768 0096 05       		.byte	0x5
 6769 0097 696E7400 		.ascii	"int\000"
 6770 009b 02       		.uleb128 0x2
 6771 009c 04       		.byte	0x4
 6772 009d 07       		.byte	0x7
 6773 009e 2D0A0000 		.4byte	.LASF13
 6774 00a2 03       		.uleb128 0x3
 6775 00a3 3E040000 		.4byte	.LASF14
 6776 00a7 03       		.byte	0x3
 6777 00a8 18       		.byte	0x18
 6778 00a9 2C000000 		.4byte	0x2c
 6779 00ad 03       		.uleb128 0x3
 6780 00ae 5A0F0000 		.4byte	.LASF15
 6781 00b2 03       		.byte	0x3
 6782 00b3 20       		.byte	0x20
 6783 00b4 3E000000 		.4byte	0x3e
 6784 00b8 03       		.uleb128 0x3
 6785 00b9 BF0C0000 		.4byte	.LASF16
 6786 00bd 03       		.byte	0x3
 6787 00be 24       		.byte	0x24
 6788 00bf 50000000 		.4byte	0x50
 6789 00c3 05       		.uleb128 0x5
 6790 00c4 B8000000 		.4byte	0xb8
 6791 00c8 03       		.uleb128 0x3
 6792 00c9 B9000000 		.4byte	.LASF17
 6793 00cd 03       		.byte	0x3
 6794 00ce 2C       		.byte	0x2c
ARM GAS  /tmp/ccNus05k.s 			page 172


 6795 00cf 62000000 		.4byte	0x62
 6796 00d3 05       		.uleb128 0x5
 6797 00d4 C8000000 		.4byte	0xc8
 6798 00d8 03       		.uleb128 0x3
 6799 00d9 7B100000 		.4byte	.LASF18
 6800 00dd 03       		.byte	0x3
 6801 00de 30       		.byte	0x30
 6802 00df 74000000 		.4byte	0x74
 6803 00e3 02       		.uleb128 0x2
 6804 00e4 04       		.byte	0x4
 6805 00e5 07       		.byte	0x7
 6806 00e6 35000000 		.4byte	.LASF19
 6807 00ea 06       		.uleb128 0x6
 6808 00eb 000A0000 		.4byte	.LASF20
 6809 00ef 04       		.byte	0x4
 6810 00f0 9606     		.2byte	0x696
 6811 00f2 D3000000 		.4byte	0xd3
 6812 00f6 07       		.uleb128 0x7
 6813 00f7 9D070000 		.4byte	.LASF21
 6814 00fb 05       		.byte	0x5
 6815 00fc 35       		.byte	0x35
 6816 00fd D8000000 		.4byte	0xd8
 6817 0101 08       		.uleb128 0x8
 6818 0102 01       		.byte	0x1
 6819 0103 37000000 		.4byte	0x37
 6820 0107 06       		.byte	0x6
 6821 0108 0702     		.2byte	0x207
 6822 010a 1B010000 		.4byte	0x11b
 6823 010e 09       		.uleb128 0x9
 6824 010f 090E0000 		.4byte	.LASF22
 6825 0113 00       		.byte	0
 6826 0114 0A       		.uleb128 0xa
 6827 0115 53455400 		.ascii	"SET\000"
 6828 0119 01       		.byte	0x1
 6829 011a 00       		.byte	0
 6830 011b 0B       		.uleb128 0xb
 6831 011c 870E0000 		.4byte	.LASF23
 6832 0120 06       		.byte	0x6
 6833 0121 0702     		.2byte	0x207
 6834 0123 01010000 		.4byte	0x101
 6835 0127 0B       		.uleb128 0xb
 6836 0128 BD0B0000 		.4byte	.LASF24
 6837 012c 06       		.byte	0x6
 6838 012d 0702     		.2byte	0x207
 6839 012f 01010000 		.4byte	0x101
 6840 0133 08       		.uleb128 0x8
 6841 0134 01       		.byte	0x1
 6842 0135 37000000 		.4byte	0x37
 6843 0139 06       		.byte	0x6
 6844 013a 0902     		.2byte	0x209
 6845 013c 4D010000 		.4byte	0x14d
 6846 0140 09       		.uleb128 0x9
 6847 0141 B50B0000 		.4byte	.LASF25
 6848 0145 00       		.byte	0
 6849 0146 09       		.uleb128 0x9
 6850 0147 A30F0000 		.4byte	.LASF26
 6851 014b 01       		.byte	0x1
ARM GAS  /tmp/ccNus05k.s 			page 173


 6852 014c 00       		.byte	0
 6853 014d 0B       		.uleb128 0xb
 6854 014e 680C0000 		.4byte	.LASF27
 6855 0152 06       		.byte	0x6
 6856 0153 0902     		.2byte	0x209
 6857 0155 33010000 		.4byte	0x133
 6858 0159 0C       		.uleb128 0xc
 6859 015a 50       		.byte	0x50
 6860 015b 06       		.byte	0x6
 6861 015c A204     		.2byte	0x4a2
 6862 015e 6A030000 		.4byte	0x36a
 6863 0162 0D       		.uleb128 0xd
 6864 0163 43523100 		.ascii	"CR1\000"
 6865 0167 06       		.byte	0x6
 6866 0168 A404     		.2byte	0x4a4
 6867 016a C3000000 		.4byte	0xc3
 6868 016e 00       		.byte	0
 6869 016f 0E       		.uleb128 0xe
 6870 0170 94040000 		.4byte	.LASF28
 6871 0174 06       		.byte	0x6
 6872 0175 A504     		.2byte	0x4a5
 6873 0177 B8000000 		.4byte	0xb8
 6874 017b 02       		.byte	0x2
 6875 017c 0D       		.uleb128 0xd
 6876 017d 43523200 		.ascii	"CR2\000"
 6877 0181 06       		.byte	0x6
 6878 0182 A604     		.2byte	0x4a6
 6879 0184 C3000000 		.4byte	0xc3
 6880 0188 04       		.byte	0x4
 6881 0189 0E       		.uleb128 0xe
 6882 018a 9E040000 		.4byte	.LASF29
 6883 018e 06       		.byte	0x6
 6884 018f A704     		.2byte	0x4a7
 6885 0191 B8000000 		.4byte	0xb8
 6886 0195 06       		.byte	0x6
 6887 0196 0E       		.uleb128 0xe
 6888 0197 F30D0000 		.4byte	.LASF30
 6889 019b 06       		.byte	0x6
 6890 019c A804     		.2byte	0x4a8
 6891 019e C3000000 		.4byte	0xc3
 6892 01a2 08       		.byte	0x8
 6893 01a3 0E       		.uleb128 0xe
 6894 01a4 68050000 		.4byte	.LASF31
 6895 01a8 06       		.byte	0x6
 6896 01a9 A904     		.2byte	0x4a9
 6897 01ab B8000000 		.4byte	0xb8
 6898 01af 0A       		.byte	0xa
 6899 01b0 0E       		.uleb128 0xe
 6900 01b1 90070000 		.4byte	.LASF32
 6901 01b5 06       		.byte	0x6
 6902 01b6 AA04     		.2byte	0x4aa
 6903 01b8 C3000000 		.4byte	0xc3
 6904 01bc 0C       		.byte	0xc
 6905 01bd 0E       		.uleb128 0xe
 6906 01be B6040000 		.4byte	.LASF33
 6907 01c2 06       		.byte	0x6
 6908 01c3 AB04     		.2byte	0x4ab
ARM GAS  /tmp/ccNus05k.s 			page 174


 6909 01c5 B8000000 		.4byte	0xb8
 6910 01c9 0E       		.byte	0xe
 6911 01ca 0D       		.uleb128 0xd
 6912 01cb 535200   		.ascii	"SR\000"
 6913 01ce 06       		.byte	0x6
 6914 01cf AC04     		.2byte	0x4ac
 6915 01d1 C3000000 		.4byte	0xc3
 6916 01d5 10       		.byte	0x10
 6917 01d6 0E       		.uleb128 0xe
 6918 01d7 C0040000 		.4byte	.LASF34
 6919 01db 06       		.byte	0x6
 6920 01dc AD04     		.2byte	0x4ad
 6921 01de B8000000 		.4byte	0xb8
 6922 01e2 12       		.byte	0x12
 6923 01e3 0D       		.uleb128 0xd
 6924 01e4 45475200 		.ascii	"EGR\000"
 6925 01e8 06       		.byte	0x6
 6926 01e9 AE04     		.2byte	0x4ae
 6927 01eb C3000000 		.4byte	0xc3
 6928 01ef 14       		.byte	0x14
 6929 01f0 0E       		.uleb128 0xe
 6930 01f1 CA040000 		.4byte	.LASF35
 6931 01f5 06       		.byte	0x6
 6932 01f6 AF04     		.2byte	0x4af
 6933 01f8 B8000000 		.4byte	0xb8
 6934 01fc 16       		.byte	0x16
 6935 01fd 0E       		.uleb128 0xe
 6936 01fe 72050000 		.4byte	.LASF36
 6937 0202 06       		.byte	0x6
 6938 0203 B004     		.2byte	0x4b0
 6939 0205 C3000000 		.4byte	0xc3
 6940 0209 18       		.byte	0x18
 6941 020a 0E       		.uleb128 0xe
 6942 020b D4040000 		.4byte	.LASF37
 6943 020f 06       		.byte	0x6
 6944 0210 B104     		.2byte	0x4b1
 6945 0212 B8000000 		.4byte	0xb8
 6946 0216 1A       		.byte	0x1a
 6947 0217 0E       		.uleb128 0xe
 6948 0218 78050000 		.4byte	.LASF38
 6949 021c 06       		.byte	0x6
 6950 021d B204     		.2byte	0x4b2
 6951 021f C3000000 		.4byte	0xc3
 6952 0223 1C       		.byte	0x1c
 6953 0224 0E       		.uleb128 0xe
 6954 0225 DE040000 		.4byte	.LASF39
 6955 0229 06       		.byte	0x6
 6956 022a B304     		.2byte	0x4b3
 6957 022c B8000000 		.4byte	0xb8
 6958 0230 1E       		.byte	0x1e
 6959 0231 0E       		.uleb128 0xe
 6960 0232 120D0000 		.4byte	.LASF40
 6961 0236 06       		.byte	0x6
 6962 0237 B404     		.2byte	0x4b4
 6963 0239 C3000000 		.4byte	0xc3
 6964 023d 20       		.byte	0x20
 6965 023e 0E       		.uleb128 0xe
ARM GAS  /tmp/ccNus05k.s 			page 175


 6966 023f E8040000 		.4byte	.LASF41
 6967 0243 06       		.byte	0x6
 6968 0244 B504     		.2byte	0x4b5
 6969 0246 B8000000 		.4byte	0xb8
 6970 024a 22       		.byte	0x22
 6971 024b 0D       		.uleb128 0xd
 6972 024c 434E5400 		.ascii	"CNT\000"
 6973 0250 06       		.byte	0x6
 6974 0251 B604     		.2byte	0x4b6
 6975 0253 C3000000 		.4byte	0xc3
 6976 0257 24       		.byte	0x24
 6977 0258 0E       		.uleb128 0xe
 6978 0259 F2040000 		.4byte	.LASF42
 6979 025d 06       		.byte	0x6
 6980 025e B704     		.2byte	0x4b7
 6981 0260 B8000000 		.4byte	0xb8
 6982 0264 26       		.byte	0x26
 6983 0265 0D       		.uleb128 0xd
 6984 0266 50534300 		.ascii	"PSC\000"
 6985 026a 06       		.byte	0x6
 6986 026b B804     		.2byte	0x4b8
 6987 026d C3000000 		.4byte	0xc3
 6988 0271 28       		.byte	0x28
 6989 0272 0E       		.uleb128 0xe
 6990 0273 070D0000 		.4byte	.LASF43
 6991 0277 06       		.byte	0x6
 6992 0278 B904     		.2byte	0x4b9
 6993 027a B8000000 		.4byte	0xb8
 6994 027e 2A       		.byte	0x2a
 6995 027f 0D       		.uleb128 0xd
 6996 0280 41525200 		.ascii	"ARR\000"
 6997 0284 06       		.byte	0x6
 6998 0285 BA04     		.2byte	0x4ba
 6999 0287 C3000000 		.4byte	0xc3
 7000 028b 2C       		.byte	0x2c
 7001 028c 0E       		.uleb128 0xe
 7002 028d 6B110000 		.4byte	.LASF44
 7003 0291 06       		.byte	0x6
 7004 0292 BB04     		.2byte	0x4bb
 7005 0294 B8000000 		.4byte	0xb8
 7006 0298 2E       		.byte	0x2e
 7007 0299 0D       		.uleb128 0xd
 7008 029a 52435200 		.ascii	"RCR\000"
 7009 029e 06       		.byte	0x6
 7010 029f BC04     		.2byte	0x4bc
 7011 02a1 C3000000 		.4byte	0xc3
 7012 02a5 30       		.byte	0x30
 7013 02a6 0E       		.uleb128 0xe
 7014 02a7 170D0000 		.4byte	.LASF45
 7015 02ab 06       		.byte	0x6
 7016 02ac BD04     		.2byte	0x4bd
 7017 02ae B8000000 		.4byte	0xb8
 7018 02b2 32       		.byte	0x32
 7019 02b3 0E       		.uleb128 0xe
 7020 02b4 23020000 		.4byte	.LASF46
 7021 02b8 06       		.byte	0x6
 7022 02b9 BE04     		.2byte	0x4be
ARM GAS  /tmp/ccNus05k.s 			page 176


 7023 02bb C3000000 		.4byte	0xc3
 7024 02bf 34       		.byte	0x34
 7025 02c0 0E       		.uleb128 0xe
 7026 02c1 220D0000 		.4byte	.LASF47
 7027 02c5 06       		.byte	0x6
 7028 02c6 BF04     		.2byte	0x4bf
 7029 02c8 B8000000 		.4byte	0xb8
 7030 02cc 36       		.byte	0x36
 7031 02cd 0E       		.uleb128 0xe
 7032 02ce 28020000 		.4byte	.LASF48
 7033 02d2 06       		.byte	0x6
 7034 02d3 C004     		.2byte	0x4c0
 7035 02d5 C3000000 		.4byte	0xc3
 7036 02d9 38       		.byte	0x38
 7037 02da 0E       		.uleb128 0xe
 7038 02db 2D0D0000 		.4byte	.LASF49
 7039 02df 06       		.byte	0x6
 7040 02e0 C104     		.2byte	0x4c1
 7041 02e2 B8000000 		.4byte	0xb8
 7042 02e6 3A       		.byte	0x3a
 7043 02e7 0E       		.uleb128 0xe
 7044 02e8 2D020000 		.4byte	.LASF50
 7045 02ec 06       		.byte	0x6
 7046 02ed C204     		.2byte	0x4c2
 7047 02ef C3000000 		.4byte	0xc3
 7048 02f3 3C       		.byte	0x3c
 7049 02f4 0E       		.uleb128 0xe
 7050 02f5 380D0000 		.4byte	.LASF51
 7051 02f9 06       		.byte	0x6
 7052 02fa C304     		.2byte	0x4c3
 7053 02fc B8000000 		.4byte	0xb8
 7054 0300 3E       		.byte	0x3e
 7055 0301 0E       		.uleb128 0xe
 7056 0302 32020000 		.4byte	.LASF52
 7057 0306 06       		.byte	0x6
 7058 0307 C404     		.2byte	0x4c4
 7059 0309 C3000000 		.4byte	0xc3
 7060 030d 40       		.byte	0x40
 7061 030e 0E       		.uleb128 0xe
 7062 030f 430D0000 		.4byte	.LASF53
 7063 0313 06       		.byte	0x6
 7064 0314 C504     		.2byte	0x4c5
 7065 0316 B8000000 		.4byte	0xb8
 7066 031a 42       		.byte	0x42
 7067 031b 0E       		.uleb128 0xe
 7068 031c 76100000 		.4byte	.LASF54
 7069 0320 06       		.byte	0x6
 7070 0321 C604     		.2byte	0x4c6
 7071 0323 C3000000 		.4byte	0xc3
 7072 0327 44       		.byte	0x44
 7073 0328 0E       		.uleb128 0xe
 7074 0329 4E0D0000 		.4byte	.LASF55
 7075 032d 06       		.byte	0x6
 7076 032e C704     		.2byte	0x4c7
 7077 0330 B8000000 		.4byte	0xb8
 7078 0334 46       		.byte	0x46
 7079 0335 0D       		.uleb128 0xd
ARM GAS  /tmp/ccNus05k.s 			page 177


 7080 0336 44435200 		.ascii	"DCR\000"
 7081 033a 06       		.byte	0x6
 7082 033b C804     		.2byte	0x4c8
 7083 033d C3000000 		.4byte	0xc3
 7084 0341 48       		.byte	0x48
 7085 0342 0E       		.uleb128 0xe
 7086 0343 590D0000 		.4byte	.LASF56
 7087 0347 06       		.byte	0x6
 7088 0348 C904     		.2byte	0x4c9
 7089 034a B8000000 		.4byte	0xb8
 7090 034e 4A       		.byte	0x4a
 7091 034f 0E       		.uleb128 0xe
 7092 0350 F3010000 		.4byte	.LASF57
 7093 0354 06       		.byte	0x6
 7094 0355 CA04     		.2byte	0x4ca
 7095 0357 C3000000 		.4byte	0xc3
 7096 035b 4C       		.byte	0x4c
 7097 035c 0E       		.uleb128 0xe
 7098 035d 640D0000 		.4byte	.LASF58
 7099 0361 06       		.byte	0x6
 7100 0362 CB04     		.2byte	0x4cb
 7101 0364 B8000000 		.4byte	0xb8
 7102 0368 4E       		.byte	0x4e
 7103 0369 00       		.byte	0
 7104 036a 0B       		.uleb128 0xb
 7105 036b 7D040000 		.4byte	.LASF59
 7106 036f 06       		.byte	0x6
 7107 0370 CC04     		.2byte	0x4cc
 7108 0372 59010000 		.4byte	0x159
 7109 0376 0F       		.uleb128 0xf
 7110 0377 0A       		.byte	0xa
 7111 0378 07       		.byte	0x7
 7112 0379 33       		.byte	0x33
 7113 037a BB030000 		.4byte	0x3bb
 7114 037e 10       		.uleb128 0x10
 7115 037f 5C060000 		.4byte	.LASF60
 7116 0383 07       		.byte	0x7
 7117 0384 35       		.byte	0x35
 7118 0385 B8000000 		.4byte	0xb8
 7119 0389 00       		.byte	0
 7120 038a 10       		.uleb128 0x10
 7121 038b 8B0B0000 		.4byte	.LASF61
 7122 038f 07       		.byte	0x7
 7123 0390 38       		.byte	0x38
 7124 0391 B8000000 		.4byte	0xb8
 7125 0395 02       		.byte	0x2
 7126 0396 10       		.uleb128 0x10
 7127 0397 56070000 		.4byte	.LASF62
 7128 039b 07       		.byte	0x7
 7129 039c 3B       		.byte	0x3b
 7130 039d B8000000 		.4byte	0xb8
 7131 03a1 04       		.byte	0x4
 7132 03a2 10       		.uleb128 0x10
 7133 03a3 B4060000 		.4byte	.LASF63
 7134 03a7 07       		.byte	0x7
 7135 03a8 3F       		.byte	0x3f
 7136 03a9 B8000000 		.4byte	0xb8
ARM GAS  /tmp/ccNus05k.s 			page 178


 7137 03ad 06       		.byte	0x6
 7138 03ae 10       		.uleb128 0x10
 7139 03af 97090000 		.4byte	.LASF64
 7140 03b3 07       		.byte	0x7
 7141 03b4 42       		.byte	0x42
 7142 03b5 A2000000 		.4byte	0xa2
 7143 03b9 08       		.byte	0x8
 7144 03ba 00       		.byte	0
 7145 03bb 03       		.uleb128 0x3
 7146 03bc 39120000 		.4byte	.LASF65
 7147 03c0 07       		.byte	0x7
 7148 03c1 4A       		.byte	0x4a
 7149 03c2 76030000 		.4byte	0x376
 7150 03c6 0F       		.uleb128 0xf
 7151 03c7 10       		.byte	0x10
 7152 03c8 07       		.byte	0x7
 7153 03c9 50       		.byte	0x50
 7154 03ca 2F040000 		.4byte	0x42f
 7155 03ce 10       		.uleb128 0x10
 7156 03cf 62040000 		.4byte	.LASF66
 7157 03d3 07       		.byte	0x7
 7158 03d4 52       		.byte	0x52
 7159 03d5 B8000000 		.4byte	0xb8
 7160 03d9 00       		.byte	0
 7161 03da 10       		.uleb128 0x10
 7162 03db D4070000 		.4byte	.LASF67
 7163 03df 07       		.byte	0x7
 7164 03e0 55       		.byte	0x55
 7165 03e1 B8000000 		.4byte	0xb8
 7166 03e5 02       		.byte	0x2
 7167 03e6 10       		.uleb128 0x10
 7168 03e7 9A030000 		.4byte	.LASF68
 7169 03eb 07       		.byte	0x7
 7170 03ec 58       		.byte	0x58
 7171 03ed B8000000 		.4byte	0xb8
 7172 03f1 04       		.byte	0x4
 7173 03f2 10       		.uleb128 0x10
 7174 03f3 FC040000 		.4byte	.LASF69
 7175 03f7 07       		.byte	0x7
 7176 03f8 5C       		.byte	0x5c
 7177 03f9 B8000000 		.4byte	0xb8
 7178 03fd 06       		.byte	0x6
 7179 03fe 10       		.uleb128 0x10
 7180 03ff 9E0D0000 		.4byte	.LASF70
 7181 0403 07       		.byte	0x7
 7182 0404 5F       		.byte	0x5f
 7183 0405 B8000000 		.4byte	0xb8
 7184 0409 08       		.byte	0x8
 7185 040a 10       		.uleb128 0x10
 7186 040b 5B110000 		.4byte	.LASF71
 7187 040f 07       		.byte	0x7
 7188 0410 62       		.byte	0x62
 7189 0411 B8000000 		.4byte	0xb8
 7190 0415 0A       		.byte	0xa
 7191 0416 10       		.uleb128 0x10
 7192 0417 030C0000 		.4byte	.LASF72
 7193 041b 07       		.byte	0x7
ARM GAS  /tmp/ccNus05k.s 			page 179


 7194 041c 66       		.byte	0x66
 7195 041d B8000000 		.4byte	0xb8
 7196 0421 0C       		.byte	0xc
 7197 0422 10       		.uleb128 0x10
 7198 0423 E2010000 		.4byte	.LASF73
 7199 0427 07       		.byte	0x7
 7200 0428 6A       		.byte	0x6a
 7201 0429 B8000000 		.4byte	0xb8
 7202 042d 0E       		.byte	0xe
 7203 042e 00       		.byte	0
 7204 042f 03       		.uleb128 0x3
 7205 0430 70000000 		.4byte	.LASF74
 7206 0434 07       		.byte	0x7
 7207 0435 6D       		.byte	0x6d
 7208 0436 C6030000 		.4byte	0x3c6
 7209 043a 0F       		.uleb128 0xf
 7210 043b 0A       		.byte	0xa
 7211 043c 07       		.byte	0x7
 7212 043d 73       		.byte	0x73
 7213 043e 7F040000 		.4byte	0x47f
 7214 0442 10       		.uleb128 0x10
 7215 0443 F2110000 		.4byte	.LASF75
 7216 0447 07       		.byte	0x7
 7217 0448 76       		.byte	0x76
 7218 0449 B8000000 		.4byte	0xb8
 7219 044d 00       		.byte	0
 7220 044e 10       		.uleb128 0x10
 7221 044f 5C020000 		.4byte	.LASF76
 7222 0453 07       		.byte	0x7
 7223 0454 79       		.byte	0x79
 7224 0455 B8000000 		.4byte	0xb8
 7225 0459 02       		.byte	0x2
 7226 045a 10       		.uleb128 0x10
 7227 045b 8D050000 		.4byte	.LASF77
 7228 045f 07       		.byte	0x7
 7229 0460 7C       		.byte	0x7c
 7230 0461 B8000000 		.4byte	0xb8
 7231 0465 04       		.byte	0x4
 7232 0466 10       		.uleb128 0x10
 7233 0467 09080000 		.4byte	.LASF78
 7234 046b 07       		.byte	0x7
 7235 046c 7F       		.byte	0x7f
 7236 046d B8000000 		.4byte	0xb8
 7237 0471 06       		.byte	0x6
 7238 0472 10       		.uleb128 0x10
 7239 0473 49070000 		.4byte	.LASF79
 7240 0477 07       		.byte	0x7
 7241 0478 82       		.byte	0x82
 7242 0479 B8000000 		.4byte	0xb8
 7243 047d 08       		.byte	0x8
 7244 047e 00       		.byte	0
 7245 047f 03       		.uleb128 0x3
 7246 0480 DE0F0000 		.4byte	.LASF80
 7247 0484 07       		.byte	0x7
 7248 0485 84       		.byte	0x84
 7249 0486 3A040000 		.4byte	0x43a
 7250 048a 0F       		.uleb128 0xf
ARM GAS  /tmp/ccNus05k.s 			page 180


 7251 048b 0E       		.byte	0xe
 7252 048c 07       		.byte	0x7
 7253 048d 8B       		.byte	0x8b
 7254 048e E7040000 		.4byte	0x4e7
 7255 0492 10       		.uleb128 0x10
 7256 0493 A6060000 		.4byte	.LASF81
 7257 0497 07       		.byte	0x7
 7258 0498 8E       		.byte	0x8e
 7259 0499 B8000000 		.4byte	0xb8
 7260 049d 00       		.byte	0
 7261 049e 10       		.uleb128 0x10
 7262 049f 6E030000 		.4byte	.LASF82
 7263 04a3 07       		.byte	0x7
 7264 04a4 91       		.byte	0x91
 7265 04a5 B8000000 		.4byte	0xb8
 7266 04a9 02       		.byte	0x2
 7267 04aa 10       		.uleb128 0x10
 7268 04ab F9050000 		.4byte	.LASF83
 7269 04af 07       		.byte	0x7
 7270 04b0 94       		.byte	0x94
 7271 04b1 B8000000 		.4byte	0xb8
 7272 04b5 04       		.byte	0x4
 7273 04b6 10       		.uleb128 0x10
 7274 04b7 93080000 		.4byte	.LASF84
 7275 04bb 07       		.byte	0x7
 7276 04bc 97       		.byte	0x97
 7277 04bd B8000000 		.4byte	0xb8
 7278 04c1 06       		.byte	0x6
 7279 04c2 10       		.uleb128 0x10
 7280 04c3 5E100000 		.4byte	.LASF85
 7281 04c7 07       		.byte	0x7
 7282 04c8 9B       		.byte	0x9b
 7283 04c9 B8000000 		.4byte	0xb8
 7284 04cd 08       		.byte	0x8
 7285 04ce 10       		.uleb128 0x10
 7286 04cf 760F0000 		.4byte	.LASF86
 7287 04d3 07       		.byte	0x7
 7288 04d4 9E       		.byte	0x9e
 7289 04d5 B8000000 		.4byte	0xb8
 7290 04d9 0A       		.byte	0xa
 7291 04da 10       		.uleb128 0x10
 7292 04db 640E0000 		.4byte	.LASF87
 7293 04df 07       		.byte	0x7
 7294 04e0 A1       		.byte	0xa1
 7295 04e1 B8000000 		.4byte	0xb8
 7296 04e5 0C       		.byte	0xc
 7297 04e6 00       		.byte	0
 7298 04e7 03       		.uleb128 0x3
 7299 04e8 E9030000 		.4byte	.LASF88
 7300 04ec 07       		.byte	0x7
 7301 04ed A3       		.byte	0xa3
 7302 04ee 8A040000 		.4byte	0x48a
 7303 04f2 11       		.uleb128 0x11
 7304 04f3 12       		.uleb128 0x12
 7305 04f4 04       		.byte	0x4
 7306 04f5 F2040000 		.4byte	0x4f2
 7307 04f9 13       		.uleb128 0x13
ARM GAS  /tmp/ccNus05k.s 			page 181


 7308 04fa 49000000 		.4byte	0x49
 7309 04fe 09050000 		.4byte	0x509
 7310 0502 14       		.uleb128 0x14
 7311 0503 E3000000 		.4byte	0xe3
 7312 0507 02       		.byte	0x2
 7313 0508 00       		.byte	0
 7314 0509 06       		.uleb128 0x6
 7315 050a 88050000 		.4byte	.LASF89
 7316 050e 08       		.byte	0x8
 7317 050f 6301     		.2byte	0x163
 7318 0511 F9040000 		.4byte	0x4f9
 7319 0515 06       		.uleb128 0x6
 7320 0516 6B0A0000 		.4byte	.LASF90
 7321 051a 08       		.byte	0x8
 7322 051b 6301     		.2byte	0x163
 7323 051d F9040000 		.4byte	0x4f9
 7324 0521 06       		.uleb128 0x6
 7325 0522 FA0F0000 		.4byte	.LASF91
 7326 0526 08       		.byte	0x8
 7327 0527 6401     		.2byte	0x164
 7328 0529 AD000000 		.4byte	0xad
 7329 052d 06       		.uleb128 0x6
 7330 052e 4A090000 		.4byte	.LASF92
 7331 0532 08       		.byte	0x8
 7332 0533 6401     		.2byte	0x164
 7333 0535 AD000000 		.4byte	0xad
 7334 0539 06       		.uleb128 0x6
 7335 053a B7020000 		.4byte	.LASF93
 7336 053e 08       		.byte	0x8
 7337 053f 6401     		.2byte	0x164
 7338 0541 AD000000 		.4byte	0xad
 7339 0545 06       		.uleb128 0x6
 7340 0546 EB070000 		.4byte	.LASF94
 7341 054a 08       		.byte	0x8
 7342 054b 6501     		.2byte	0x165
 7343 054d 51050000 		.4byte	0x551
 7344 0551 02       		.uleb128 0x2
 7345 0552 04       		.byte	0x4
 7346 0553 04       		.byte	0x4
 7347 0554 270A0000 		.4byte	.LASF95
 7348 0558 06       		.uleb128 0x6
 7349 0559 68100000 		.4byte	.LASF96
 7350 055d 08       		.byte	0x8
 7351 055e 6601     		.2byte	0x166
 7352 0560 51050000 		.4byte	0x551
 7353 0564 06       		.uleb128 0x6
 7354 0565 F8070000 		.4byte	.LASF97
 7355 0569 08       		.byte	0x8
 7356 056a 6601     		.2byte	0x166
 7357 056c 51050000 		.4byte	0x551
 7358 0570 15       		.uleb128 0x15
 7359 0571 59617700 		.ascii	"Yaw\000"
 7360 0575 08       		.byte	0x8
 7361 0576 6601     		.2byte	0x166
 7362 0578 51050000 		.4byte	0x551
 7363 057c 02       		.uleb128 0x2
 7364 057d 08       		.byte	0x8
ARM GAS  /tmp/ccNus05k.s 			page 182


 7365 057e 04       		.byte	0x4
 7366 057f CB0B0000 		.4byte	.LASF98
 7367 0583 16       		.uleb128 0x16
 7368 0584 04       		.byte	0x4
 7369 0585 03       		.uleb128 0x3
 7370 0586 C2070000 		.4byte	.LASF99
 7371 058a 09       		.byte	0x9
 7372 058b 07       		.byte	0x7
 7373 058c 94000000 		.4byte	0x94
 7374 0590 03       		.uleb128 0x3
 7375 0591 BC100000 		.4byte	.LASF100
 7376 0595 0A       		.byte	0xa
 7377 0596 2C       		.byte	0x2c
 7378 0597 6D000000 		.4byte	0x6d
 7379 059b 03       		.uleb128 0x3
 7380 059c 3D0C0000 		.4byte	.LASF101
 7381 05a0 0A       		.byte	0xa
 7382 05a1 72       		.byte	0x72
 7383 05a2 6D000000 		.4byte	0x6d
 7384 05a6 0B       		.uleb128 0xb
 7385 05a7 3A0E0000 		.4byte	.LASF102
 7386 05ab 0B       		.byte	0xb
 7387 05ac 6501     		.2byte	0x165
 7388 05ae 9B000000 		.4byte	0x9b
 7389 05b2 17       		.uleb128 0x17
 7390 05b3 04       		.byte	0x4
 7391 05b4 0A       		.byte	0xa
 7392 05b5 A6       		.byte	0xa6
 7393 05b6 D1050000 		.4byte	0x5d1
 7394 05ba 18       		.uleb128 0x18
 7395 05bb 92020000 		.4byte	.LASF103
 7396 05bf 0A       		.byte	0xa
 7397 05c0 A8       		.byte	0xa8
 7398 05c1 A6050000 		.4byte	0x5a6
 7399 05c5 18       		.uleb128 0x18
 7400 05c6 450C0000 		.4byte	.LASF104
 7401 05ca 0A       		.byte	0xa
 7402 05cb A9       		.byte	0xa9
 7403 05cc D1050000 		.4byte	0x5d1
 7404 05d0 00       		.byte	0
 7405 05d1 13       		.uleb128 0x13
 7406 05d2 37000000 		.4byte	0x37
 7407 05d6 E1050000 		.4byte	0x5e1
 7408 05da 14       		.uleb128 0x14
 7409 05db E3000000 		.4byte	0xe3
 7410 05df 03       		.byte	0x3
 7411 05e0 00       		.byte	0
 7412 05e1 0F       		.uleb128 0xf
 7413 05e2 08       		.byte	0x8
 7414 05e3 0A       		.byte	0xa
 7415 05e4 A3       		.byte	0xa3
 7416 05e5 02060000 		.4byte	0x602
 7417 05e9 10       		.uleb128 0x10
 7418 05ea 830B0000 		.4byte	.LASF105
 7419 05ee 0A       		.byte	0xa
 7420 05ef A5       		.byte	0xa5
 7421 05f0 94000000 		.4byte	0x94
ARM GAS  /tmp/ccNus05k.s 			page 183


 7422 05f4 00       		.byte	0
 7423 05f5 10       		.uleb128 0x10
 7424 05f6 3E000000 		.4byte	.LASF106
 7425 05fa 0A       		.byte	0xa
 7426 05fb AA       		.byte	0xaa
 7427 05fc B2050000 		.4byte	0x5b2
 7428 0600 04       		.byte	0x4
 7429 0601 00       		.byte	0
 7430 0602 03       		.uleb128 0x3
 7431 0603 0F0E0000 		.4byte	.LASF107
 7432 0607 0A       		.byte	0xa
 7433 0608 AB       		.byte	0xab
 7434 0609 E1050000 		.4byte	0x5e1
 7435 060d 03       		.uleb128 0x3
 7436 060e 7C030000 		.4byte	.LASF108
 7437 0612 0A       		.byte	0xa
 7438 0613 AF       		.byte	0xaf
 7439 0614 85050000 		.4byte	0x585
 7440 0618 03       		.uleb128 0x3
 7441 0619 6E100000 		.4byte	.LASF109
 7442 061d 0C       		.byte	0xc
 7443 061e 16       		.byte	0x16
 7444 061f 7F000000 		.4byte	0x7f
 7445 0623 19       		.uleb128 0x19
 7446 0624 5A080000 		.4byte	.LASF114
 7447 0628 18       		.byte	0x18
 7448 0629 0C       		.byte	0xc
 7449 062a 2D       		.byte	0x2d
 7450 062b 76060000 		.4byte	0x676
 7451 062f 10       		.uleb128 0x10
 7452 0630 580E0000 		.4byte	.LASF110
 7453 0634 0C       		.byte	0xc
 7454 0635 2F       		.byte	0x2f
 7455 0636 76060000 		.4byte	0x676
 7456 063a 00       		.byte	0
 7457 063b 1A       		.uleb128 0x1a
 7458 063c 5F6B00   		.ascii	"_k\000"
 7459 063f 0C       		.byte	0xc
 7460 0640 30       		.byte	0x30
 7461 0641 94000000 		.4byte	0x94
 7462 0645 04       		.byte	0x4
 7463 0646 10       		.uleb128 0x10
 7464 0647 7A080000 		.4byte	.LASF111
 7465 064b 0C       		.byte	0xc
 7466 064c 30       		.byte	0x30
 7467 064d 94000000 		.4byte	0x94
 7468 0651 08       		.byte	0x8
 7469 0652 10       		.uleb128 0x10
 7470 0653 0D0A0000 		.4byte	.LASF112
 7471 0657 0C       		.byte	0xc
 7472 0658 30       		.byte	0x30
 7473 0659 94000000 		.4byte	0x94
 7474 065d 0C       		.byte	0xc
 7475 065e 10       		.uleb128 0x10
 7476 065f D9060000 		.4byte	.LASF113
 7477 0663 0C       		.byte	0xc
 7478 0664 30       		.byte	0x30
ARM GAS  /tmp/ccNus05k.s 			page 184


 7479 0665 94000000 		.4byte	0x94
 7480 0669 10       		.byte	0x10
 7481 066a 1A       		.uleb128 0x1a
 7482 066b 5F7800   		.ascii	"_x\000"
 7483 066e 0C       		.byte	0xc
 7484 066f 31       		.byte	0x31
 7485 0670 7C060000 		.4byte	0x67c
 7486 0674 14       		.byte	0x14
 7487 0675 00       		.byte	0
 7488 0676 12       		.uleb128 0x12
 7489 0677 04       		.byte	0x4
 7490 0678 23060000 		.4byte	0x623
 7491 067c 13       		.uleb128 0x13
 7492 067d 18060000 		.4byte	0x618
 7493 0681 8C060000 		.4byte	0x68c
 7494 0685 14       		.uleb128 0x14
 7495 0686 E3000000 		.4byte	0xe3
 7496 068a 00       		.byte	0
 7497 068b 00       		.byte	0
 7498 068c 19       		.uleb128 0x19
 7499 068d EE000000 		.4byte	.LASF115
 7500 0691 24       		.byte	0x24
 7501 0692 0C       		.byte	0xc
 7502 0693 35       		.byte	0x35
 7503 0694 05070000 		.4byte	0x705
 7504 0698 10       		.uleb128 0x10
 7505 0699 0A010000 		.4byte	.LASF116
 7506 069d 0C       		.byte	0xc
 7507 069e 37       		.byte	0x37
 7508 069f 94000000 		.4byte	0x94
 7509 06a3 00       		.byte	0
 7510 06a4 10       		.uleb128 0x10
 7511 06a5 FE110000 		.4byte	.LASF117
 7512 06a9 0C       		.byte	0xc
 7513 06aa 38       		.byte	0x38
 7514 06ab 94000000 		.4byte	0x94
 7515 06af 04       		.byte	0x4
 7516 06b0 10       		.uleb128 0x10
 7517 06b1 45110000 		.4byte	.LASF118
 7518 06b5 0C       		.byte	0xc
 7519 06b6 39       		.byte	0x39
 7520 06b7 94000000 		.4byte	0x94
 7521 06bb 08       		.byte	0x8
 7522 06bc 10       		.uleb128 0x10
 7523 06bd DE0A0000 		.4byte	.LASF119
 7524 06c1 0C       		.byte	0xc
 7525 06c2 3A       		.byte	0x3a
 7526 06c3 94000000 		.4byte	0x94
 7527 06c7 0C       		.byte	0xc
 7528 06c8 10       		.uleb128 0x10
 7529 06c9 CE030000 		.4byte	.LASF120
 7530 06cd 0C       		.byte	0xc
 7531 06ce 3B       		.byte	0x3b
 7532 06cf 94000000 		.4byte	0x94
 7533 06d3 10       		.byte	0x10
 7534 06d4 10       		.uleb128 0x10
 7535 06d5 AA0F0000 		.4byte	.LASF121
ARM GAS  /tmp/ccNus05k.s 			page 185


 7536 06d9 0C       		.byte	0xc
 7537 06da 3C       		.byte	0x3c
 7538 06db 94000000 		.4byte	0x94
 7539 06df 14       		.byte	0x14
 7540 06e0 10       		.uleb128 0x10
 7541 06e1 9B0B0000 		.4byte	.LASF122
 7542 06e5 0C       		.byte	0xc
 7543 06e6 3D       		.byte	0x3d
 7544 06e7 94000000 		.4byte	0x94
 7545 06eb 18       		.byte	0x18
 7546 06ec 10       		.uleb128 0x10
 7547 06ed D70B0000 		.4byte	.LASF123
 7548 06f1 0C       		.byte	0xc
 7549 06f2 3E       		.byte	0x3e
 7550 06f3 94000000 		.4byte	0x94
 7551 06f7 1C       		.byte	0x1c
 7552 06f8 10       		.uleb128 0x10
 7553 06f9 D3110000 		.4byte	.LASF124
 7554 06fd 0C       		.byte	0xc
 7555 06fe 3F       		.byte	0x3f
 7556 06ff 94000000 		.4byte	0x94
 7557 0703 20       		.byte	0x20
 7558 0704 00       		.byte	0
 7559 0705 1B       		.uleb128 0x1b
 7560 0706 6B020000 		.4byte	.LASF125
 7561 070a 0801     		.2byte	0x108
 7562 070c 0C       		.byte	0xc
 7563 070d 48       		.byte	0x48
 7564 070e 45070000 		.4byte	0x745
 7565 0712 10       		.uleb128 0x10
 7566 0713 CB110000 		.4byte	.LASF126
 7567 0717 0C       		.byte	0xc
 7568 0718 49       		.byte	0x49
 7569 0719 45070000 		.4byte	0x745
 7570 071d 00       		.byte	0
 7571 071e 10       		.uleb128 0x10
 7572 071f DC0C0000 		.4byte	.LASF127
 7573 0723 0C       		.byte	0xc
 7574 0724 4A       		.byte	0x4a
 7575 0725 45070000 		.4byte	0x745
 7576 0729 80       		.byte	0x80
 7577 072a 1C       		.uleb128 0x1c
 7578 072b 6D0F0000 		.4byte	.LASF128
 7579 072f 0C       		.byte	0xc
 7580 0730 4C       		.byte	0x4c
 7581 0731 18060000 		.4byte	0x618
 7582 0735 0001     		.2byte	0x100
 7583 0737 1C       		.uleb128 0x1c
 7584 0738 07060000 		.4byte	.LASF129
 7585 073c 0C       		.byte	0xc
 7586 073d 4F       		.byte	0x4f
 7587 073e 18060000 		.4byte	0x618
 7588 0742 0401     		.2byte	0x104
 7589 0744 00       		.byte	0
 7590 0745 13       		.uleb128 0x13
 7591 0746 83050000 		.4byte	0x583
 7592 074a 55070000 		.4byte	0x755
ARM GAS  /tmp/ccNus05k.s 			page 186


 7593 074e 14       		.uleb128 0x14
 7594 074f E3000000 		.4byte	0xe3
 7595 0753 1F       		.byte	0x1f
 7596 0754 00       		.byte	0
 7597 0755 1B       		.uleb128 0x1b
 7598 0756 530B0000 		.4byte	.LASF130
 7599 075a 9001     		.2byte	0x190
 7600 075c 0C       		.byte	0xc
 7601 075d 5B       		.byte	0x5b
 7602 075e 93070000 		.4byte	0x793
 7603 0762 10       		.uleb128 0x10
 7604 0763 580E0000 		.4byte	.LASF110
 7605 0767 0C       		.byte	0xc
 7606 0768 5C       		.byte	0x5c
 7607 0769 93070000 		.4byte	0x793
 7608 076d 00       		.byte	0
 7609 076e 10       		.uleb128 0x10
 7610 076f F50F0000 		.4byte	.LASF131
 7611 0773 0C       		.byte	0xc
 7612 0774 5D       		.byte	0x5d
 7613 0775 94000000 		.4byte	0x94
 7614 0779 04       		.byte	0x4
 7615 077a 10       		.uleb128 0x10
 7616 077b 83050000 		.4byte	.LASF132
 7617 077f 0C       		.byte	0xc
 7618 0780 5F       		.byte	0x5f
 7619 0781 99070000 		.4byte	0x799
 7620 0785 08       		.byte	0x8
 7621 0786 10       		.uleb128 0x10
 7622 0787 6B020000 		.4byte	.LASF125
 7623 078b 0C       		.byte	0xc
 7624 078c 60       		.byte	0x60
 7625 078d 05070000 		.4byte	0x705
 7626 0791 88       		.byte	0x88
 7627 0792 00       		.byte	0
 7628 0793 12       		.uleb128 0x12
 7629 0794 04       		.byte	0x4
 7630 0795 55070000 		.4byte	0x755
 7631 0799 13       		.uleb128 0x13
 7632 079a F3040000 		.4byte	0x4f3
 7633 079e A9070000 		.4byte	0x7a9
 7634 07a2 14       		.uleb128 0x14
 7635 07a3 E3000000 		.4byte	0xe3
 7636 07a7 1F       		.byte	0x1f
 7637 07a8 00       		.byte	0
 7638 07a9 19       		.uleb128 0x19
 7639 07aa 1A100000 		.4byte	.LASF133
 7640 07ae 08       		.byte	0x8
 7641 07af 0C       		.byte	0xc
 7642 07b0 73       		.byte	0x73
 7643 07b1 CE070000 		.4byte	0x7ce
 7644 07b5 10       		.uleb128 0x10
 7645 07b6 AD0D0000 		.4byte	.LASF134
 7646 07ba 0C       		.byte	0xc
 7647 07bb 74       		.byte	0x74
 7648 07bc CE070000 		.4byte	0x7ce
 7649 07c0 00       		.byte	0
ARM GAS  /tmp/ccNus05k.s 			page 187


 7650 07c1 10       		.uleb128 0x10
 7651 07c2 05030000 		.4byte	.LASF135
 7652 07c6 0C       		.byte	0xc
 7653 07c7 75       		.byte	0x75
 7654 07c8 94000000 		.4byte	0x94
 7655 07cc 04       		.byte	0x4
 7656 07cd 00       		.byte	0
 7657 07ce 12       		.uleb128 0x12
 7658 07cf 04       		.byte	0x4
 7659 07d0 37000000 		.4byte	0x37
 7660 07d4 19       		.uleb128 0x19
 7661 07d5 88070000 		.4byte	.LASF136
 7662 07d9 68       		.byte	0x68
 7663 07da 0C       		.byte	0xc
 7664 07db B3       		.byte	0xb3
 7665 07dc FE080000 		.4byte	0x8fe
 7666 07e0 1A       		.uleb128 0x1a
 7667 07e1 5F7000   		.ascii	"_p\000"
 7668 07e4 0C       		.byte	0xc
 7669 07e5 B4       		.byte	0xb4
 7670 07e6 CE070000 		.4byte	0x7ce
 7671 07ea 00       		.byte	0
 7672 07eb 1A       		.uleb128 0x1a
 7673 07ec 5F7200   		.ascii	"_r\000"
 7674 07ef 0C       		.byte	0xc
 7675 07f0 B5       		.byte	0xb5
 7676 07f1 94000000 		.4byte	0x94
 7677 07f5 04       		.byte	0x4
 7678 07f6 1A       		.uleb128 0x1a
 7679 07f7 5F7700   		.ascii	"_w\000"
 7680 07fa 0C       		.byte	0xc
 7681 07fb B6       		.byte	0xb6
 7682 07fc 94000000 		.4byte	0x94
 7683 0800 08       		.byte	0x8
 7684 0801 10       		.uleb128 0x10
 7685 0802 3F0B0000 		.4byte	.LASF137
 7686 0806 0C       		.byte	0xc
 7687 0807 B7       		.byte	0xb7
 7688 0808 49000000 		.4byte	0x49
 7689 080c 0C       		.byte	0xc
 7690 080d 10       		.uleb128 0x10
 7691 080e 98020000 		.4byte	.LASF138
 7692 0812 0C       		.byte	0xc
 7693 0813 B8       		.byte	0xb8
 7694 0814 49000000 		.4byte	0x49
 7695 0818 0E       		.byte	0xe
 7696 0819 1A       		.uleb128 0x1a
 7697 081a 5F626600 		.ascii	"_bf\000"
 7698 081e 0C       		.byte	0xc
 7699 081f B9       		.byte	0xb9
 7700 0820 A9070000 		.4byte	0x7a9
 7701 0824 10       		.byte	0x10
 7702 0825 10       		.uleb128 0x10
 7703 0826 D50F0000 		.4byte	.LASF139
 7704 082a 0C       		.byte	0xc
 7705 082b BA       		.byte	0xba
 7706 082c 94000000 		.4byte	0x94
ARM GAS  /tmp/ccNus05k.s 			page 188


 7707 0830 18       		.byte	0x18
 7708 0831 10       		.uleb128 0x10
 7709 0832 D1060000 		.4byte	.LASF140
 7710 0836 0C       		.byte	0xc
 7711 0837 C1       		.byte	0xc1
 7712 0838 83050000 		.4byte	0x583
 7713 083c 1C       		.byte	0x1c
 7714 083d 10       		.uleb128 0x10
 7715 083e 6A000000 		.4byte	.LASF141
 7716 0842 0C       		.byte	0xc
 7717 0843 C3       		.byte	0xc3
 7718 0844 6B0A0000 		.4byte	0xa6b
 7719 0848 20       		.byte	0x20
 7720 0849 10       		.uleb128 0x10
 7721 084a B2000000 		.4byte	.LASF142
 7722 084e 0C       		.byte	0xc
 7723 084f C5       		.byte	0xc5
 7724 0850 950A0000 		.4byte	0xa95
 7725 0854 24       		.byte	0x24
 7726 0855 10       		.uleb128 0x10
 7727 0856 300C0000 		.4byte	.LASF143
 7728 085a 0C       		.byte	0xc
 7729 085b C8       		.byte	0xc8
 7730 085c B90A0000 		.4byte	0xab9
 7731 0860 28       		.byte	0x28
 7732 0861 10       		.uleb128 0x10
 7733 0862 9D050000 		.4byte	.LASF144
 7734 0866 0C       		.byte	0xc
 7735 0867 C9       		.byte	0xc9
 7736 0868 D30A0000 		.4byte	0xad3
 7737 086c 2C       		.byte	0x2c
 7738 086d 1A       		.uleb128 0x1a
 7739 086e 5F756200 		.ascii	"_ub\000"
 7740 0872 0C       		.byte	0xc
 7741 0873 CC       		.byte	0xcc
 7742 0874 A9070000 		.4byte	0x7a9
 7743 0878 30       		.byte	0x30
 7744 0879 1A       		.uleb128 0x1a
 7745 087a 5F757000 		.ascii	"_up\000"
 7746 087e 0C       		.byte	0xc
 7747 087f CD       		.byte	0xcd
 7748 0880 CE070000 		.4byte	0x7ce
 7749 0884 38       		.byte	0x38
 7750 0885 1A       		.uleb128 0x1a
 7751 0886 5F757200 		.ascii	"_ur\000"
 7752 088a 0C       		.byte	0xc
 7753 088b CE       		.byte	0xce
 7754 088c 94000000 		.4byte	0x94
 7755 0890 3C       		.byte	0x3c
 7756 0891 10       		.uleb128 0x10
 7757 0892 F80A0000 		.4byte	.LASF145
 7758 0896 0C       		.byte	0xc
 7759 0897 D1       		.byte	0xd1
 7760 0898 D90A0000 		.4byte	0xad9
 7761 089c 40       		.byte	0x40
 7762 089d 10       		.uleb128 0x10
 7763 089e 04010000 		.4byte	.LASF146
ARM GAS  /tmp/ccNus05k.s 			page 189


 7764 08a2 0C       		.byte	0xc
 7765 08a3 D2       		.byte	0xd2
 7766 08a4 E90A0000 		.4byte	0xae9
 7767 08a8 43       		.byte	0x43
 7768 08a9 1A       		.uleb128 0x1a
 7769 08aa 5F6C6200 		.ascii	"_lb\000"
 7770 08ae 0C       		.byte	0xc
 7771 08af D5       		.byte	0xd5
 7772 08b0 A9070000 		.4byte	0x7a9
 7773 08b4 44       		.byte	0x44
 7774 08b5 10       		.uleb128 0x10
 7775 08b6 800D0000 		.4byte	.LASF147
 7776 08ba 0C       		.byte	0xc
 7777 08bb D8       		.byte	0xd8
 7778 08bc 94000000 		.4byte	0x94
 7779 08c0 4C       		.byte	0x4c
 7780 08c1 10       		.uleb128 0x10
 7781 08c2 E8060000 		.4byte	.LASF148
 7782 08c6 0C       		.byte	0xc
 7783 08c7 D9       		.byte	0xd9
 7784 08c8 90050000 		.4byte	0x590
 7785 08cc 50       		.byte	0x50
 7786 08cd 10       		.uleb128 0x10
 7787 08ce 5E0E0000 		.4byte	.LASF149
 7788 08d2 0C       		.byte	0xc
 7789 08d3 DC       		.byte	0xdc
 7790 08d4 1C090000 		.4byte	0x91c
 7791 08d8 54       		.byte	0x54
 7792 08d9 10       		.uleb128 0x10
 7793 08da 91010000 		.4byte	.LASF150
 7794 08de 0C       		.byte	0xc
 7795 08df E0       		.byte	0xe0
 7796 08e0 0D060000 		.4byte	0x60d
 7797 08e4 58       		.byte	0x58
 7798 08e5 10       		.uleb128 0x10
 7799 08e6 2B0B0000 		.4byte	.LASF151
 7800 08ea 0C       		.byte	0xc
 7801 08eb E2       		.byte	0xe2
 7802 08ec 02060000 		.4byte	0x602
 7803 08f0 5C       		.byte	0x5c
 7804 08f1 10       		.uleb128 0x10
 7805 08f2 95070000 		.4byte	.LASF152
 7806 08f6 0C       		.byte	0xc
 7807 08f7 E3       		.byte	0xe3
 7808 08f8 94000000 		.4byte	0x94
 7809 08fc 64       		.byte	0x64
 7810 08fd 00       		.byte	0
 7811 08fe 1D       		.uleb128 0x1d
 7812 08ff 94000000 		.4byte	0x94
 7813 0903 1C090000 		.4byte	0x91c
 7814 0907 1E       		.uleb128 0x1e
 7815 0908 1C090000 		.4byte	0x91c
 7816 090c 1E       		.uleb128 0x1e
 7817 090d 83050000 		.4byte	0x583
 7818 0911 1E       		.uleb128 0x1e
 7819 0912 590A0000 		.4byte	0xa59
 7820 0916 1E       		.uleb128 0x1e
ARM GAS  /tmp/ccNus05k.s 			page 190


 7821 0917 94000000 		.4byte	0x94
 7822 091b 00       		.byte	0
 7823 091c 12       		.uleb128 0x12
 7824 091d 04       		.byte	0x4
 7825 091e 27090000 		.4byte	0x927
 7826 0922 1F       		.uleb128 0x1f
 7827 0923 1C090000 		.4byte	0x91c
 7828 0927 20       		.uleb128 0x20
 7829 0928 1B050000 		.4byte	.LASF153
 7830 092c 2804     		.2byte	0x428
 7831 092e 0C       		.byte	0xc
 7832 092f 3802     		.2byte	0x238
 7833 0931 590A0000 		.4byte	0xa59
 7834 0935 0E       		.uleb128 0xe
 7835 0936 E4070000 		.4byte	.LASF154
 7836 093a 0C       		.byte	0xc
 7837 093b 3A02     		.2byte	0x23a
 7838 093d 94000000 		.4byte	0x94
 7839 0941 00       		.byte	0
 7840 0942 0E       		.uleb128 0xe
 7841 0943 CA050000 		.4byte	.LASF155
 7842 0947 0C       		.byte	0xc
 7843 0948 3F02     		.2byte	0x23f
 7844 094a 400B0000 		.4byte	0xb40
 7845 094e 04       		.byte	0x4
 7846 094f 0E       		.uleb128 0xe
 7847 0950 5A040000 		.4byte	.LASF156
 7848 0954 0C       		.byte	0xc
 7849 0955 3F02     		.2byte	0x23f
 7850 0957 400B0000 		.4byte	0xb40
 7851 095b 08       		.byte	0x8
 7852 095c 0E       		.uleb128 0xe
 7853 095d FE0A0000 		.4byte	.LASF157
 7854 0961 0C       		.byte	0xc
 7855 0962 3F02     		.2byte	0x23f
 7856 0964 400B0000 		.4byte	0xb40
 7857 0968 0C       		.byte	0xc
 7858 0969 0E       		.uleb128 0xe
 7859 096a F00F0000 		.4byte	.LASF158
 7860 096e 0C       		.byte	0xc
 7861 096f 4102     		.2byte	0x241
 7862 0971 94000000 		.4byte	0x94
 7863 0975 10       		.byte	0x10
 7864 0976 0E       		.uleb128 0xe
 7865 0977 EC080000 		.4byte	.LASF159
 7866 097b 0C       		.byte	0xc
 7867 097c 4202     		.2byte	0x242
 7868 097e 220D0000 		.4byte	0xd22
 7869 0982 14       		.byte	0x14
 7870 0983 0E       		.uleb128 0xe
 7871 0984 D7030000 		.4byte	.LASF160
 7872 0988 0C       		.byte	0xc
 7873 0989 4402     		.2byte	0x244
 7874 098b 94000000 		.4byte	0x94
 7875 098f 30       		.byte	0x30
 7876 0990 0E       		.uleb128 0xe
 7877 0991 DA090000 		.4byte	.LASF161
ARM GAS  /tmp/ccNus05k.s 			page 191


 7878 0995 0C       		.byte	0xc
 7879 0996 4502     		.2byte	0x245
 7880 0998 8F0A0000 		.4byte	0xa8f
 7881 099c 34       		.byte	0x34
 7882 099d 0E       		.uleb128 0xe
 7883 099e 86010000 		.4byte	.LASF162
 7884 09a2 0C       		.byte	0xc
 7885 09a3 4702     		.2byte	0x247
 7886 09a5 94000000 		.4byte	0x94
 7887 09a9 38       		.byte	0x38
 7888 09aa 0E       		.uleb128 0xe
 7889 09ab AE080000 		.4byte	.LASF163
 7890 09af 0C       		.byte	0xc
 7891 09b0 4902     		.2byte	0x249
 7892 09b2 3D0D0000 		.4byte	0xd3d
 7893 09b6 3C       		.byte	0x3c
 7894 09b7 0E       		.uleb128 0xe
 7895 09b8 99100000 		.4byte	.LASF164
 7896 09bc 0C       		.byte	0xc
 7897 09bd 4C02     		.2byte	0x24c
 7898 09bf 76060000 		.4byte	0x676
 7899 09c3 40       		.byte	0x40
 7900 09c4 0E       		.uleb128 0xe
 7901 09c5 FB020000 		.4byte	.LASF165
 7902 09c9 0C       		.byte	0xc
 7903 09ca 4D02     		.2byte	0x24d
 7904 09cc 94000000 		.4byte	0x94
 7905 09d0 44       		.byte	0x44
 7906 09d1 0E       		.uleb128 0xe
 7907 09d2 71070000 		.4byte	.LASF166
 7908 09d6 0C       		.byte	0xc
 7909 09d7 4E02     		.2byte	0x24e
 7910 09d9 76060000 		.4byte	0x676
 7911 09dd 48       		.byte	0x48
 7912 09de 0E       		.uleb128 0xe
 7913 09df EA090000 		.4byte	.LASF167
 7914 09e3 0C       		.byte	0xc
 7915 09e4 4F02     		.2byte	0x24f
 7916 09e6 430D0000 		.4byte	0xd43
 7917 09ea 4C       		.byte	0x4c
 7918 09eb 0E       		.uleb128 0xe
 7919 09ec CE000000 		.4byte	.LASF168
 7920 09f0 0C       		.byte	0xc
 7921 09f1 5202     		.2byte	0x252
 7922 09f3 94000000 		.4byte	0x94
 7923 09f7 50       		.byte	0x50
 7924 09f8 0E       		.uleb128 0xe
 7925 09f9 F0060000 		.4byte	.LASF169
 7926 09fd 0C       		.byte	0xc
 7927 09fe 5302     		.2byte	0x253
 7928 0a00 590A0000 		.4byte	0xa59
 7929 0a04 54       		.byte	0x54
 7930 0a05 0E       		.uleb128 0xe
 7931 0a06 F30A0000 		.4byte	.LASF170
 7932 0a0a 0C       		.byte	0xc
 7933 0a0b 7602     		.2byte	0x276
 7934 0a0d 000D0000 		.4byte	0xd00
ARM GAS  /tmp/ccNus05k.s 			page 192


 7935 0a11 58       		.byte	0x58
 7936 0a12 21       		.uleb128 0x21
 7937 0a13 530B0000 		.4byte	.LASF130
 7938 0a17 0C       		.byte	0xc
 7939 0a18 7A02     		.2byte	0x27a
 7940 0a1a 93070000 		.4byte	0x793
 7941 0a1e 4801     		.2byte	0x148
 7942 0a20 21       		.uleb128 0x21
 7943 0a21 B8080000 		.4byte	.LASF171
 7944 0a25 0C       		.byte	0xc
 7945 0a26 7B02     		.2byte	0x27b
 7946 0a28 55070000 		.4byte	0x755
 7947 0a2c 4C01     		.2byte	0x14c
 7948 0a2e 21       		.uleb128 0x21
 7949 0a2f DE060000 		.4byte	.LASF172
 7950 0a33 0C       		.byte	0xc
 7951 0a34 7F02     		.2byte	0x27f
 7952 0a36 540D0000 		.4byte	0xd54
 7953 0a3a DC02     		.2byte	0x2dc
 7954 0a3c 21       		.uleb128 0x21
 7955 0a3d 68090000 		.4byte	.LASF173
 7956 0a41 0C       		.byte	0xc
 7957 0a42 8402     		.2byte	0x284
 7958 0a44 050B0000 		.4byte	0xb05
 7959 0a48 E002     		.2byte	0x2e0
 7960 0a4a 21       		.uleb128 0x21
 7961 0a4b 4E000000 		.4byte	.LASF174
 7962 0a4f 0C       		.byte	0xc
 7963 0a50 8502     		.2byte	0x285
 7964 0a52 600D0000 		.4byte	0xd60
 7965 0a56 EC02     		.2byte	0x2ec
 7966 0a58 00       		.byte	0
 7967 0a59 12       		.uleb128 0x12
 7968 0a5a 04       		.byte	0x4
 7969 0a5b 5F0A0000 		.4byte	0xa5f
 7970 0a5f 02       		.uleb128 0x2
 7971 0a60 01       		.byte	0x1
 7972 0a61 08       		.byte	0x8
 7973 0a62 7E050000 		.4byte	.LASF175
 7974 0a66 1F       		.uleb128 0x1f
 7975 0a67 5F0A0000 		.4byte	0xa5f
 7976 0a6b 12       		.uleb128 0x12
 7977 0a6c 04       		.byte	0x4
 7978 0a6d FE080000 		.4byte	0x8fe
 7979 0a71 1D       		.uleb128 0x1d
 7980 0a72 94000000 		.4byte	0x94
 7981 0a76 8F0A0000 		.4byte	0xa8f
 7982 0a7a 1E       		.uleb128 0x1e
 7983 0a7b 1C090000 		.4byte	0x91c
 7984 0a7f 1E       		.uleb128 0x1e
 7985 0a80 83050000 		.4byte	0x583
 7986 0a84 1E       		.uleb128 0x1e
 7987 0a85 8F0A0000 		.4byte	0xa8f
 7988 0a89 1E       		.uleb128 0x1e
 7989 0a8a 94000000 		.4byte	0x94
 7990 0a8e 00       		.byte	0
 7991 0a8f 12       		.uleb128 0x12
ARM GAS  /tmp/ccNus05k.s 			page 193


 7992 0a90 04       		.byte	0x4
 7993 0a91 660A0000 		.4byte	0xa66
 7994 0a95 12       		.uleb128 0x12
 7995 0a96 04       		.byte	0x4
 7996 0a97 710A0000 		.4byte	0xa71
 7997 0a9b 1D       		.uleb128 0x1d
 7998 0a9c 9B050000 		.4byte	0x59b
 7999 0aa0 B90A0000 		.4byte	0xab9
 8000 0aa4 1E       		.uleb128 0x1e
 8001 0aa5 1C090000 		.4byte	0x91c
 8002 0aa9 1E       		.uleb128 0x1e
 8003 0aaa 83050000 		.4byte	0x583
 8004 0aae 1E       		.uleb128 0x1e
 8005 0aaf 9B050000 		.4byte	0x59b
 8006 0ab3 1E       		.uleb128 0x1e
 8007 0ab4 94000000 		.4byte	0x94
 8008 0ab8 00       		.byte	0
 8009 0ab9 12       		.uleb128 0x12
 8010 0aba 04       		.byte	0x4
 8011 0abb 9B0A0000 		.4byte	0xa9b
 8012 0abf 1D       		.uleb128 0x1d
 8013 0ac0 94000000 		.4byte	0x94
 8014 0ac4 D30A0000 		.4byte	0xad3
 8015 0ac8 1E       		.uleb128 0x1e
 8016 0ac9 1C090000 		.4byte	0x91c
 8017 0acd 1E       		.uleb128 0x1e
 8018 0ace 83050000 		.4byte	0x583
 8019 0ad2 00       		.byte	0
 8020 0ad3 12       		.uleb128 0x12
 8021 0ad4 04       		.byte	0x4
 8022 0ad5 BF0A0000 		.4byte	0xabf
 8023 0ad9 13       		.uleb128 0x13
 8024 0ada 37000000 		.4byte	0x37
 8025 0ade E90A0000 		.4byte	0xae9
 8026 0ae2 14       		.uleb128 0x14
 8027 0ae3 E3000000 		.4byte	0xe3
 8028 0ae7 02       		.byte	0x2
 8029 0ae8 00       		.byte	0
 8030 0ae9 13       		.uleb128 0x13
 8031 0aea 37000000 		.4byte	0x37
 8032 0aee F90A0000 		.4byte	0xaf9
 8033 0af2 14       		.uleb128 0x14
 8034 0af3 E3000000 		.4byte	0xe3
 8035 0af7 00       		.byte	0
 8036 0af8 00       		.byte	0
 8037 0af9 0B       		.uleb128 0xb
 8038 0afa F80D0000 		.4byte	.LASF176
 8039 0afe 0C       		.byte	0xc
 8040 0aff 1D01     		.2byte	0x11d
 8041 0b01 D4070000 		.4byte	0x7d4
 8042 0b05 22       		.uleb128 0x22
 8043 0b06 FA090000 		.4byte	.LASF177
 8044 0b0a 0C       		.byte	0xc
 8045 0b0b 0C       		.byte	0xc
 8046 0b0c 2101     		.2byte	0x121
 8047 0b0e 3A0B0000 		.4byte	0xb3a
 8048 0b12 0E       		.uleb128 0xe
ARM GAS  /tmp/ccNus05k.s 			page 194


 8049 0b13 580E0000 		.4byte	.LASF110
 8050 0b17 0C       		.byte	0xc
 8051 0b18 2301     		.2byte	0x123
 8052 0b1a 3A0B0000 		.4byte	0xb3a
 8053 0b1e 00       		.byte	0
 8054 0b1f 0E       		.uleb128 0xe
 8055 0b20 38090000 		.4byte	.LASF178
 8056 0b24 0C       		.byte	0xc
 8057 0b25 2401     		.2byte	0x124
 8058 0b27 94000000 		.4byte	0x94
 8059 0b2b 04       		.byte	0x4
 8060 0b2c 0E       		.uleb128 0xe
 8061 0b2d F4090000 		.4byte	.LASF179
 8062 0b31 0C       		.byte	0xc
 8063 0b32 2501     		.2byte	0x125
 8064 0b34 400B0000 		.4byte	0xb40
 8065 0b38 08       		.byte	0x8
 8066 0b39 00       		.byte	0
 8067 0b3a 12       		.uleb128 0x12
 8068 0b3b 04       		.byte	0x4
 8069 0b3c 050B0000 		.4byte	0xb05
 8070 0b40 12       		.uleb128 0x12
 8071 0b41 04       		.byte	0x4
 8072 0b42 F90A0000 		.4byte	0xaf9
 8073 0b46 22       		.uleb128 0x22
 8074 0b47 E80C0000 		.4byte	.LASF180
 8075 0b4b 0E       		.byte	0xe
 8076 0b4c 0C       		.byte	0xc
 8077 0b4d 3D01     		.2byte	0x13d
 8078 0b4f 7B0B0000 		.4byte	0xb7b
 8079 0b53 0E       		.uleb128 0xe
 8080 0b54 2A0C0000 		.4byte	.LASF181
 8081 0b58 0C       		.byte	0xc
 8082 0b59 3E01     		.2byte	0x13e
 8083 0b5b 7B0B0000 		.4byte	0xb7b
 8084 0b5f 00       		.byte	0
 8085 0b60 0E       		.uleb128 0xe
 8086 0b61 DC010000 		.4byte	.LASF182
 8087 0b65 0C       		.byte	0xc
 8088 0b66 3F01     		.2byte	0x13f
 8089 0b68 7B0B0000 		.4byte	0xb7b
 8090 0b6c 06       		.byte	0x6
 8091 0b6d 0E       		.uleb128 0xe
 8092 0b6e 15110000 		.4byte	.LASF183
 8093 0b72 0C       		.byte	0xc
 8094 0b73 4001     		.2byte	0x140
 8095 0b75 5B000000 		.4byte	0x5b
 8096 0b79 0C       		.byte	0xc
 8097 0b7a 00       		.byte	0
 8098 0b7b 13       		.uleb128 0x13
 8099 0b7c 5B000000 		.4byte	0x5b
 8100 0b80 8B0B0000 		.4byte	0xb8b
 8101 0b84 14       		.uleb128 0x14
 8102 0b85 E3000000 		.4byte	0xe3
 8103 0b89 02       		.byte	0x2
 8104 0b8a 00       		.byte	0
 8105 0b8b 0C       		.uleb128 0xc
ARM GAS  /tmp/ccNus05k.s 			page 195


 8106 0b8c D0       		.byte	0xd0
 8107 0b8d 0C       		.byte	0xc
 8108 0b8e 5702     		.2byte	0x257
 8109 0b90 8C0C0000 		.4byte	0xc8c
 8110 0b94 0E       		.uleb128 0xe
 8111 0b95 0F040000 		.4byte	.LASF184
 8112 0b99 0C       		.byte	0xc
 8113 0b9a 5902     		.2byte	0x259
 8114 0b9c 9B000000 		.4byte	0x9b
 8115 0ba0 00       		.byte	0
 8116 0ba1 0E       		.uleb128 0xe
 8117 0ba2 B30D0000 		.4byte	.LASF185
 8118 0ba6 0C       		.byte	0xc
 8119 0ba7 5A02     		.2byte	0x25a
 8120 0ba9 590A0000 		.4byte	0xa59
 8121 0bad 04       		.byte	0x4
 8122 0bae 0E       		.uleb128 0xe
 8123 0baf C1000000 		.4byte	.LASF186
 8124 0bb3 0C       		.byte	0xc
 8125 0bb4 5B02     		.2byte	0x25b
 8126 0bb6 8C0C0000 		.4byte	0xc8c
 8127 0bba 08       		.byte	0x8
 8128 0bbb 0E       		.uleb128 0xe
 8129 0bbc 5F030000 		.4byte	.LASF187
 8130 0bc0 0C       		.byte	0xc
 8131 0bc1 5C02     		.2byte	0x25c
 8132 0bc3 8C060000 		.4byte	0x68c
 8133 0bc7 24       		.byte	0x24
 8134 0bc8 0E       		.uleb128 0xe
 8135 0bc9 AD090000 		.4byte	.LASF188
 8136 0bcd 0C       		.byte	0xc
 8137 0bce 5D02     		.2byte	0x25d
 8138 0bd0 94000000 		.4byte	0x94
 8139 0bd4 48       		.byte	0x48
 8140 0bd5 0E       		.uleb128 0xe
 8141 0bd6 340B0000 		.4byte	.LASF189
 8142 0bda 0C       		.byte	0xc
 8143 0bdb 5E02     		.2byte	0x25e
 8144 0bdd 8D000000 		.4byte	0x8d
 8145 0be1 50       		.byte	0x50
 8146 0be2 0E       		.uleb128 0xe
 8147 0be3 350E0000 		.4byte	.LASF190
 8148 0be7 0C       		.byte	0xc
 8149 0be8 5F02     		.2byte	0x25f
 8150 0bea 460B0000 		.4byte	0xb46
 8151 0bee 58       		.byte	0x58
 8152 0bef 0E       		.uleb128 0xe
 8153 0bf0 FB0E0000 		.4byte	.LASF191
 8154 0bf4 0C       		.byte	0xc
 8155 0bf5 6002     		.2byte	0x260
 8156 0bf7 02060000 		.4byte	0x602
 8157 0bfb 68       		.byte	0x68
 8158 0bfc 0E       		.uleb128 0xe
 8159 0bfd 4C0C0000 		.4byte	.LASF192
 8160 0c01 0C       		.byte	0xc
 8161 0c02 6102     		.2byte	0x261
 8162 0c04 02060000 		.4byte	0x602
ARM GAS  /tmp/ccNus05k.s 			page 196


 8163 0c08 70       		.byte	0x70
 8164 0c09 0E       		.uleb128 0xe
 8165 0c0a 060B0000 		.4byte	.LASF193
 8166 0c0e 0C       		.byte	0xc
 8167 0c0f 6202     		.2byte	0x262
 8168 0c11 02060000 		.4byte	0x602
 8169 0c15 78       		.byte	0x78
 8170 0c16 0E       		.uleb128 0xe
 8171 0c17 13010000 		.4byte	.LASF194
 8172 0c1b 0C       		.byte	0xc
 8173 0c1c 6302     		.2byte	0x263
 8174 0c1e 9C0C0000 		.4byte	0xc9c
 8175 0c22 80       		.byte	0x80
 8176 0c23 0E       		.uleb128 0xe
 8177 0c24 FD070000 		.4byte	.LASF195
 8178 0c28 0C       		.byte	0xc
 8179 0c29 6402     		.2byte	0x264
 8180 0c2b AC0C0000 		.4byte	0xcac
 8181 0c2f 88       		.byte	0x88
 8182 0c30 0E       		.uleb128 0xe
 8183 0c31 1E120000 		.4byte	.LASF196
 8184 0c35 0C       		.byte	0xc
 8185 0c36 6502     		.2byte	0x265
 8186 0c38 94000000 		.4byte	0x94
 8187 0c3c A0       		.byte	0xa0
 8188 0c3d 0E       		.uleb128 0xe
 8189 0c3e D8020000 		.4byte	.LASF197
 8190 0c42 0C       		.byte	0xc
 8191 0c43 6602     		.2byte	0x266
 8192 0c45 02060000 		.4byte	0x602
 8193 0c49 A4       		.byte	0xa4
 8194 0c4a 0E       		.uleb128 0xe
 8195 0c4b C00D0000 		.4byte	.LASF198
 8196 0c4f 0C       		.byte	0xc
 8197 0c50 6702     		.2byte	0x267
 8198 0c52 02060000 		.4byte	0x602
 8199 0c56 AC       		.byte	0xac
 8200 0c57 0E       		.uleb128 0xe
 8201 0c58 7E110000 		.4byte	.LASF199
 8202 0c5c 0C       		.byte	0xc
 8203 0c5d 6802     		.2byte	0x268
 8204 0c5f 02060000 		.4byte	0x602
 8205 0c63 B4       		.byte	0xb4
 8206 0c64 0E       		.uleb128 0xe
 8207 0c65 A20A0000 		.4byte	.LASF200
 8208 0c69 0C       		.byte	0xc
 8209 0c6a 6902     		.2byte	0x269
 8210 0c6c 02060000 		.4byte	0x602
 8211 0c70 BC       		.byte	0xbc
 8212 0c71 0E       		.uleb128 0xe
 8213 0c72 F3000000 		.4byte	.LASF201
 8214 0c76 0C       		.byte	0xc
 8215 0c77 6A02     		.2byte	0x26a
 8216 0c79 02060000 		.4byte	0x602
 8217 0c7d C4       		.byte	0xc4
 8218 0c7e 0E       		.uleb128 0xe
 8219 0c7f 620A0000 		.4byte	.LASF202
ARM GAS  /tmp/ccNus05k.s 			page 197


 8220 0c83 0C       		.byte	0xc
 8221 0c84 6B02     		.2byte	0x26b
 8222 0c86 94000000 		.4byte	0x94
 8223 0c8a CC       		.byte	0xcc
 8224 0c8b 00       		.byte	0
 8225 0c8c 13       		.uleb128 0x13
 8226 0c8d 5F0A0000 		.4byte	0xa5f
 8227 0c91 9C0C0000 		.4byte	0xc9c
 8228 0c95 14       		.uleb128 0x14
 8229 0c96 E3000000 		.4byte	0xe3
 8230 0c9a 19       		.byte	0x19
 8231 0c9b 00       		.byte	0
 8232 0c9c 13       		.uleb128 0x13
 8233 0c9d 5F0A0000 		.4byte	0xa5f
 8234 0ca1 AC0C0000 		.4byte	0xcac
 8235 0ca5 14       		.uleb128 0x14
 8236 0ca6 E3000000 		.4byte	0xe3
 8237 0caa 07       		.byte	0x7
 8238 0cab 00       		.byte	0
 8239 0cac 13       		.uleb128 0x13
 8240 0cad 5F0A0000 		.4byte	0xa5f
 8241 0cb1 BC0C0000 		.4byte	0xcbc
 8242 0cb5 14       		.uleb128 0x14
 8243 0cb6 E3000000 		.4byte	0xe3
 8244 0cba 17       		.byte	0x17
 8245 0cbb 00       		.byte	0
 8246 0cbc 0C       		.uleb128 0xc
 8247 0cbd F0       		.byte	0xf0
 8248 0cbe 0C       		.byte	0xc
 8249 0cbf 7002     		.2byte	0x270
 8250 0cc1 E00C0000 		.4byte	0xce0
 8251 0cc5 0E       		.uleb128 0xe
 8252 0cc6 57100000 		.4byte	.LASF203
 8253 0cca 0C       		.byte	0xc
 8254 0ccb 7302     		.2byte	0x273
 8255 0ccd E00C0000 		.4byte	0xce0
 8256 0cd1 00       		.byte	0
 8257 0cd2 0E       		.uleb128 0xe
 8258 0cd3 87090000 		.4byte	.LASF204
 8259 0cd7 0C       		.byte	0xc
 8260 0cd8 7402     		.2byte	0x274
 8261 0cda F00C0000 		.4byte	0xcf0
 8262 0cde 78       		.byte	0x78
 8263 0cdf 00       		.byte	0
 8264 0ce0 13       		.uleb128 0x13
 8265 0ce1 CE070000 		.4byte	0x7ce
 8266 0ce5 F00C0000 		.4byte	0xcf0
 8267 0ce9 14       		.uleb128 0x14
 8268 0cea E3000000 		.4byte	0xe3
 8269 0cee 1D       		.byte	0x1d
 8270 0cef 00       		.byte	0
 8271 0cf0 13       		.uleb128 0x13
 8272 0cf1 9B000000 		.4byte	0x9b
 8273 0cf5 000D0000 		.4byte	0xd00
 8274 0cf9 14       		.uleb128 0x14
 8275 0cfa E3000000 		.4byte	0xe3
 8276 0cfe 1D       		.byte	0x1d
ARM GAS  /tmp/ccNus05k.s 			page 198


 8277 0cff 00       		.byte	0
 8278 0d00 23       		.uleb128 0x23
 8279 0d01 F0       		.byte	0xf0
 8280 0d02 0C       		.byte	0xc
 8281 0d03 5502     		.2byte	0x255
 8282 0d05 220D0000 		.4byte	0xd22
 8283 0d09 24       		.uleb128 0x24
 8284 0d0a 1B050000 		.4byte	.LASF153
 8285 0d0e 0C       		.byte	0xc
 8286 0d0f 6C02     		.2byte	0x26c
 8287 0d11 8B0B0000 		.4byte	0xb8b
 8288 0d15 24       		.uleb128 0x24
 8289 0d16 E6000000 		.4byte	.LASF205
 8290 0d1a 0C       		.byte	0xc
 8291 0d1b 7502     		.2byte	0x275
 8292 0d1d BC0C0000 		.4byte	0xcbc
 8293 0d21 00       		.byte	0
 8294 0d22 13       		.uleb128 0x13
 8295 0d23 5F0A0000 		.4byte	0xa5f
 8296 0d27 320D0000 		.4byte	0xd32
 8297 0d2b 14       		.uleb128 0x14
 8298 0d2c E3000000 		.4byte	0xe3
 8299 0d30 18       		.byte	0x18
 8300 0d31 00       		.byte	0
 8301 0d32 25       		.uleb128 0x25
 8302 0d33 3D0D0000 		.4byte	0xd3d
 8303 0d37 1E       		.uleb128 0x1e
 8304 0d38 1C090000 		.4byte	0x91c
 8305 0d3c 00       		.byte	0
 8306 0d3d 12       		.uleb128 0x12
 8307 0d3e 04       		.byte	0x4
 8308 0d3f 320D0000 		.4byte	0xd32
 8309 0d43 12       		.uleb128 0x12
 8310 0d44 04       		.byte	0x4
 8311 0d45 76060000 		.4byte	0x676
 8312 0d49 25       		.uleb128 0x25
 8313 0d4a 540D0000 		.4byte	0xd54
 8314 0d4e 1E       		.uleb128 0x1e
 8315 0d4f 94000000 		.4byte	0x94
 8316 0d53 00       		.byte	0
 8317 0d54 12       		.uleb128 0x12
 8318 0d55 04       		.byte	0x4
 8319 0d56 5A0D0000 		.4byte	0xd5a
 8320 0d5a 12       		.uleb128 0x12
 8321 0d5b 04       		.byte	0x4
 8322 0d5c 490D0000 		.4byte	0xd49
 8323 0d60 13       		.uleb128 0x13
 8324 0d61 F90A0000 		.4byte	0xaf9
 8325 0d65 700D0000 		.4byte	0xd70
 8326 0d69 14       		.uleb128 0x14
 8327 0d6a E3000000 		.4byte	0xe3
 8328 0d6e 02       		.byte	0x2
 8329 0d6f 00       		.byte	0
 8330 0d70 06       		.uleb128 0x6
 8331 0d71 EF020000 		.4byte	.LASF206
 8332 0d75 0C       		.byte	0xc
 8333 0d76 FD02     		.2byte	0x2fd
ARM GAS  /tmp/ccNus05k.s 			page 199


 8334 0d78 1C090000 		.4byte	0x91c
 8335 0d7c 06       		.uleb128 0x6
 8336 0d7d 22050000 		.4byte	.LASF207
 8337 0d81 0C       		.byte	0xc
 8338 0d82 FE02     		.2byte	0x2fe
 8339 0d84 22090000 		.4byte	0x922
 8340 0d88 02       		.uleb128 0x2
 8341 0d89 08       		.byte	0x8
 8342 0d8a 04       		.byte	0x4
 8343 0d8b 90090000 		.4byte	.LASF208
 8344 0d8f 26       		.uleb128 0x26
 8345 0d90 6F0D0000 		.4byte	.LASF362
 8346 0d94 01       		.byte	0x1
 8347 0d95 25000000 		.4byte	0x25
 8348 0d99 0D       		.byte	0xd
 8349 0d9a 9902     		.2byte	0x299
 8350 0d9c B90D0000 		.4byte	0xdb9
 8351 0da0 27       		.uleb128 0x27
 8352 0da1 0C100000 		.4byte	.LASF209
 8353 0da5 7F       		.sleb128 -1
 8354 0da6 09       		.uleb128 0x9
 8355 0da7 D3080000 		.4byte	.LASF210
 8356 0dab 00       		.byte	0
 8357 0dac 09       		.uleb128 0x9
 8358 0dad 210F0000 		.4byte	.LASF211
 8359 0db1 01       		.byte	0x1
 8360 0db2 09       		.uleb128 0x9
 8361 0db3 EC0E0000 		.4byte	.LASF212
 8362 0db7 02       		.byte	0x2
 8363 0db8 00       		.byte	0
 8364 0db9 06       		.uleb128 0x6
 8365 0dba 61070000 		.4byte	.LASF213
 8366 0dbe 0D       		.byte	0xd
 8367 0dbf A402     		.2byte	0x2a4
 8368 0dc1 8F0D0000 		.4byte	0xd8f
 8369 0dc5 28       		.uleb128 0x28
 8370 0dc6 CA0F0000 		.4byte	.LASF217
 8371 0dca 01       		.byte	0x1
 8372 0dcb 1E0B     		.2byte	0xb1e
 8373 0dcd 981C0000 		.4byte	.LFB154
 8374 0dd1 F8000000 		.4byte	.LFE154-.LFB154
 8375 0dd5 01       		.uleb128 0x1
 8376 0dd6 9C       		.byte	0x9c
 8377 0dd7 450E0000 		.4byte	0xe45
 8378 0ddb 29       		.uleb128 0x29
 8379 0ddc DA0E0000 		.4byte	.LASF214
 8380 0de0 01       		.byte	0x1
 8381 0de1 1E0B     		.2byte	0xb1e
 8382 0de3 450E0000 		.4byte	0xe45
 8383 0de7 02       		.uleb128 0x2
 8384 0de8 91       		.byte	0x91
 8385 0de9 6C       		.sleb128 -20
 8386 0dea 29       		.uleb128 0x29
 8387 0deb 5C020000 		.4byte	.LASF76
 8388 0def 01       		.byte	0x1
 8389 0df0 1E0B     		.2byte	0xb1e
 8390 0df2 B8000000 		.4byte	0xb8
ARM GAS  /tmp/ccNus05k.s 			page 200


 8391 0df6 02       		.uleb128 0x2
 8392 0df7 91       		.byte	0x91
 8393 0df8 6A       		.sleb128 -22
 8394 0df9 29       		.uleb128 0x29
 8395 0dfa 8D050000 		.4byte	.LASF77
 8396 0dfe 01       		.byte	0x1
 8397 0dff 1E0B     		.2byte	0xb1e
 8398 0e01 B8000000 		.4byte	0xb8
 8399 0e05 02       		.uleb128 0x2
 8400 0e06 91       		.byte	0x91
 8401 0e07 68       		.sleb128 -24
 8402 0e08 29       		.uleb128 0x29
 8403 0e09 49070000 		.4byte	.LASF79
 8404 0e0d 01       		.byte	0x1
 8405 0e0e 1F0B     		.2byte	0xb1f
 8406 0e10 B8000000 		.4byte	0xb8
 8407 0e14 02       		.uleb128 0x2
 8408 0e15 91       		.byte	0x91
 8409 0e16 66       		.sleb128 -26
 8410 0e17 2A       		.uleb128 0x2a
 8411 0e18 4E010000 		.4byte	.LASF215
 8412 0e1c 01       		.byte	0x1
 8413 0e1d 210B     		.2byte	0xb21
 8414 0e1f B8000000 		.4byte	0xb8
 8415 0e23 02       		.uleb128 0x2
 8416 0e24 91       		.byte	0x91
 8417 0e25 74       		.sleb128 -12
 8418 0e26 2A       		.uleb128 0x2a
 8419 0e27 A1100000 		.4byte	.LASF216
 8420 0e2b 01       		.byte	0x1
 8421 0e2c 210B     		.2byte	0xb21
 8422 0e2e B8000000 		.4byte	0xb8
 8423 0e32 02       		.uleb128 0x2
 8424 0e33 91       		.byte	0x91
 8425 0e34 76       		.sleb128 -10
 8426 0e35 2B       		.uleb128 0x2b
 8427 0e36 746D7000 		.ascii	"tmp\000"
 8428 0e3a 01       		.byte	0x1
 8429 0e3b 210B     		.2byte	0xb21
 8430 0e3d B8000000 		.4byte	0xb8
 8431 0e41 02       		.uleb128 0x2
 8432 0e42 91       		.byte	0x91
 8433 0e43 72       		.sleb128 -14
 8434 0e44 00       		.byte	0
 8435 0e45 12       		.uleb128 0x12
 8436 0e46 04       		.byte	0x4
 8437 0e47 6A030000 		.4byte	0x36a
 8438 0e4b 28       		.uleb128 0x28
 8439 0e4c 89040000 		.4byte	.LASF218
 8440 0e50 01       		.byte	0x1
 8441 0e51 EE0A     		.2byte	0xaee
 8442 0e53 AC1B0000 		.4byte	.LFB153
 8443 0e57 EC000000 		.4byte	.LFE153-.LFB153
 8444 0e5b 01       		.uleb128 0x1
 8445 0e5c 9C       		.byte	0x9c
 8446 0e5d CB0E0000 		.4byte	0xecb
 8447 0e61 29       		.uleb128 0x29
ARM GAS  /tmp/ccNus05k.s 			page 201


 8448 0e62 DA0E0000 		.4byte	.LASF214
 8449 0e66 01       		.byte	0x1
 8450 0e67 EE0A     		.2byte	0xaee
 8451 0e69 450E0000 		.4byte	0xe45
 8452 0e6d 02       		.uleb128 0x2
 8453 0e6e 91       		.byte	0x91
 8454 0e6f 6C       		.sleb128 -20
 8455 0e70 29       		.uleb128 0x29
 8456 0e71 5C020000 		.4byte	.LASF76
 8457 0e75 01       		.byte	0x1
 8458 0e76 EE0A     		.2byte	0xaee
 8459 0e78 B8000000 		.4byte	0xb8
 8460 0e7c 02       		.uleb128 0x2
 8461 0e7d 91       		.byte	0x91
 8462 0e7e 6A       		.sleb128 -22
 8463 0e7f 29       		.uleb128 0x29
 8464 0e80 8D050000 		.4byte	.LASF77
 8465 0e84 01       		.byte	0x1
 8466 0e85 EE0A     		.2byte	0xaee
 8467 0e87 B8000000 		.4byte	0xb8
 8468 0e8b 02       		.uleb128 0x2
 8469 0e8c 91       		.byte	0x91
 8470 0e8d 68       		.sleb128 -24
 8471 0e8e 29       		.uleb128 0x29
 8472 0e8f 49070000 		.4byte	.LASF79
 8473 0e93 01       		.byte	0x1
 8474 0e94 EF0A     		.2byte	0xaef
 8475 0e96 B8000000 		.4byte	0xb8
 8476 0e9a 02       		.uleb128 0x2
 8477 0e9b 91       		.byte	0x91
 8478 0e9c 66       		.sleb128 -26
 8479 0e9d 2A       		.uleb128 0x2a
 8480 0e9e 4E010000 		.4byte	.LASF215
 8481 0ea2 01       		.byte	0x1
 8482 0ea3 F10A     		.2byte	0xaf1
 8483 0ea5 B8000000 		.4byte	0xb8
 8484 0ea9 02       		.uleb128 0x2
 8485 0eaa 91       		.byte	0x91
 8486 0eab 74       		.sleb128 -12
 8487 0eac 2A       		.uleb128 0x2a
 8488 0ead A1100000 		.4byte	.LASF216
 8489 0eb1 01       		.byte	0x1
 8490 0eb2 F10A     		.2byte	0xaf1
 8491 0eb4 B8000000 		.4byte	0xb8
 8492 0eb8 02       		.uleb128 0x2
 8493 0eb9 91       		.byte	0x91
 8494 0eba 76       		.sleb128 -10
 8495 0ebb 2B       		.uleb128 0x2b
 8496 0ebc 746D7000 		.ascii	"tmp\000"
 8497 0ec0 01       		.byte	0x1
 8498 0ec1 F10A     		.2byte	0xaf1
 8499 0ec3 B8000000 		.4byte	0xb8
 8500 0ec7 02       		.uleb128 0x2
 8501 0ec8 91       		.byte	0x91
 8502 0ec9 72       		.sleb128 -14
 8503 0eca 00       		.byte	0
 8504 0ecb 28       		.uleb128 0x28
ARM GAS  /tmp/ccNus05k.s 			page 202


 8505 0ecc E80A0000 		.4byte	.LASF219
 8506 0ed0 01       		.byte	0x1
 8507 0ed1 BD0A     		.2byte	0xabd
 8508 0ed3 B81A0000 		.4byte	.LFB152
 8509 0ed7 F4000000 		.4byte	.LFE152-.LFB152
 8510 0edb 01       		.uleb128 0x1
 8511 0edc 9C       		.byte	0x9c
 8512 0edd 4B0F0000 		.4byte	0xf4b
 8513 0ee1 29       		.uleb128 0x29
 8514 0ee2 DA0E0000 		.4byte	.LASF214
 8515 0ee6 01       		.byte	0x1
 8516 0ee7 BD0A     		.2byte	0xabd
 8517 0ee9 450E0000 		.4byte	0xe45
 8518 0eed 02       		.uleb128 0x2
 8519 0eee 91       		.byte	0x91
 8520 0eef 6C       		.sleb128 -20
 8521 0ef0 29       		.uleb128 0x29
 8522 0ef1 5C020000 		.4byte	.LASF76
 8523 0ef5 01       		.byte	0x1
 8524 0ef6 BD0A     		.2byte	0xabd
 8525 0ef8 B8000000 		.4byte	0xb8
 8526 0efc 02       		.uleb128 0x2
 8527 0efd 91       		.byte	0x91
 8528 0efe 6A       		.sleb128 -22
 8529 0eff 29       		.uleb128 0x29
 8530 0f00 8D050000 		.4byte	.LASF77
 8531 0f04 01       		.byte	0x1
 8532 0f05 BD0A     		.2byte	0xabd
 8533 0f07 B8000000 		.4byte	0xb8
 8534 0f0b 02       		.uleb128 0x2
 8535 0f0c 91       		.byte	0x91
 8536 0f0d 68       		.sleb128 -24
 8537 0f0e 29       		.uleb128 0x29
 8538 0f0f 49070000 		.4byte	.LASF79
 8539 0f13 01       		.byte	0x1
 8540 0f14 BE0A     		.2byte	0xabe
 8541 0f16 B8000000 		.4byte	0xb8
 8542 0f1a 02       		.uleb128 0x2
 8543 0f1b 91       		.byte	0x91
 8544 0f1c 66       		.sleb128 -26
 8545 0f1d 2A       		.uleb128 0x2a
 8546 0f1e 45010000 		.4byte	.LASF220
 8547 0f22 01       		.byte	0x1
 8548 0f23 C00A     		.2byte	0xac0
 8549 0f25 B8000000 		.4byte	0xb8
 8550 0f29 02       		.uleb128 0x2
 8551 0f2a 91       		.byte	0x91
 8552 0f2b 74       		.sleb128 -12
 8553 0f2c 2A       		.uleb128 0x2a
 8554 0f2d A1100000 		.4byte	.LASF216
 8555 0f31 01       		.byte	0x1
 8556 0f32 C00A     		.2byte	0xac0
 8557 0f34 B8000000 		.4byte	0xb8
 8558 0f38 02       		.uleb128 0x2
 8559 0f39 91       		.byte	0x91
 8560 0f3a 76       		.sleb128 -10
 8561 0f3b 2B       		.uleb128 0x2b
ARM GAS  /tmp/ccNus05k.s 			page 203


 8562 0f3c 746D7000 		.ascii	"tmp\000"
 8563 0f40 01       		.byte	0x1
 8564 0f41 C00A     		.2byte	0xac0
 8565 0f43 B8000000 		.4byte	0xb8
 8566 0f47 02       		.uleb128 0x2
 8567 0f48 91       		.byte	0x91
 8568 0f49 72       		.sleb128 -14
 8569 0f4a 00       		.byte	0
 8570 0f4b 28       		.uleb128 0x28
 8571 0f4c 8F110000 		.4byte	.LASF221
 8572 0f50 01       		.byte	0x1
 8573 0f51 8E0A     		.2byte	0xa8e
 8574 0f53 D6190000 		.4byte	.LFB151
 8575 0f57 E2000000 		.4byte	.LFE151-.LFB151
 8576 0f5b 01       		.uleb128 0x1
 8577 0f5c 9C       		.byte	0x9c
 8578 0f5d BC0F0000 		.4byte	0xfbc
 8579 0f61 29       		.uleb128 0x29
 8580 0f62 DA0E0000 		.4byte	.LASF214
 8581 0f66 01       		.byte	0x1
 8582 0f67 8E0A     		.2byte	0xa8e
 8583 0f69 450E0000 		.4byte	0xe45
 8584 0f6d 02       		.uleb128 0x2
 8585 0f6e 91       		.byte	0x91
 8586 0f6f 6C       		.sleb128 -20
 8587 0f70 29       		.uleb128 0x29
 8588 0f71 5C020000 		.4byte	.LASF76
 8589 0f75 01       		.byte	0x1
 8590 0f76 8E0A     		.2byte	0xa8e
 8591 0f78 B8000000 		.4byte	0xb8
 8592 0f7c 02       		.uleb128 0x2
 8593 0f7d 91       		.byte	0x91
 8594 0f7e 6A       		.sleb128 -22
 8595 0f7f 29       		.uleb128 0x29
 8596 0f80 8D050000 		.4byte	.LASF77
 8597 0f84 01       		.byte	0x1
 8598 0f85 8E0A     		.2byte	0xa8e
 8599 0f87 B8000000 		.4byte	0xb8
 8600 0f8b 02       		.uleb128 0x2
 8601 0f8c 91       		.byte	0x91
 8602 0f8d 68       		.sleb128 -24
 8603 0f8e 29       		.uleb128 0x29
 8604 0f8f 49070000 		.4byte	.LASF79
 8605 0f93 01       		.byte	0x1
 8606 0f94 8F0A     		.2byte	0xa8f
 8607 0f96 B8000000 		.4byte	0xb8
 8608 0f9a 02       		.uleb128 0x2
 8609 0f9b 91       		.byte	0x91
 8610 0f9c 66       		.sleb128 -26
 8611 0f9d 2A       		.uleb128 0x2a
 8612 0f9e 45010000 		.4byte	.LASF220
 8613 0fa2 01       		.byte	0x1
 8614 0fa3 910A     		.2byte	0xa91
 8615 0fa5 B8000000 		.4byte	0xb8
 8616 0fa9 02       		.uleb128 0x2
 8617 0faa 91       		.byte	0x91
 8618 0fab 74       		.sleb128 -12
ARM GAS  /tmp/ccNus05k.s 			page 204


 8619 0fac 2A       		.uleb128 0x2a
 8620 0fad A1100000 		.4byte	.LASF216
 8621 0fb1 01       		.byte	0x1
 8622 0fb2 910A     		.2byte	0xa91
 8623 0fb4 B8000000 		.4byte	0xb8
 8624 0fb8 02       		.uleb128 0x2
 8625 0fb9 91       		.byte	0x91
 8626 0fba 76       		.sleb128 -10
 8627 0fbb 00       		.byte	0
 8628 0fbc 2C       		.uleb128 0x2c
 8629 0fbd B40F0000 		.4byte	.LASF226
 8630 0fc1 07       		.byte	0x7
 8631 0fc2 7904     		.2byte	0x479
 8632 0fc4 B6190000 		.4byte	.LFB150
 8633 0fc8 20000000 		.4byte	.LFE150-.LFB150
 8634 0fcc 01       		.uleb128 0x1
 8635 0fcd 9C       		.byte	0x9c
 8636 0fce F10F0000 		.4byte	0xff1
 8637 0fd2 29       		.uleb128 0x29
 8638 0fd3 DA0E0000 		.4byte	.LASF214
 8639 0fd7 01       		.byte	0x1
 8640 0fd8 750A     		.2byte	0xa75
 8641 0fda 450E0000 		.4byte	0xe45
 8642 0fde 02       		.uleb128 0x2
 8643 0fdf 91       		.byte	0x91
 8644 0fe0 74       		.sleb128 -12
 8645 0fe1 29       		.uleb128 0x29
 8646 0fe2 B9110000 		.4byte	.LASF222
 8647 0fe6 01       		.byte	0x1
 8648 0fe7 750A     		.2byte	0xa75
 8649 0fe9 B8000000 		.4byte	0xb8
 8650 0fed 02       		.uleb128 0x2
 8651 0fee 91       		.byte	0x91
 8652 0fef 72       		.sleb128 -14
 8653 0ff0 00       		.byte	0
 8654 0ff1 2D       		.uleb128 0x2d
 8655 0ff2 D6000000 		.4byte	.LASF229
 8656 0ff6 07       		.byte	0x7
 8657 0ff7 7804     		.2byte	0x478
 8658 0ff9 27010000 		.4byte	0x127
 8659 0ffd 64190000 		.4byte	.LFB149
 8660 1001 52000000 		.4byte	.LFE149-.LFB149
 8661 1005 01       		.uleb128 0x1
 8662 1006 9C       		.byte	0x9c
 8663 1007 57100000 		.4byte	0x1057
 8664 100b 29       		.uleb128 0x29
 8665 100c DA0E0000 		.4byte	.LASF214
 8666 1010 01       		.byte	0x1
 8667 1011 490A     		.2byte	0xa49
 8668 1013 450E0000 		.4byte	0xe45
 8669 1017 02       		.uleb128 0x2
 8670 1018 91       		.byte	0x91
 8671 1019 6C       		.sleb128 -20
 8672 101a 29       		.uleb128 0x29
 8673 101b B9110000 		.4byte	.LASF222
 8674 101f 01       		.byte	0x1
 8675 1020 490A     		.2byte	0xa49
ARM GAS  /tmp/ccNus05k.s 			page 205


 8676 1022 B8000000 		.4byte	0xb8
 8677 1026 02       		.uleb128 0x2
 8678 1027 91       		.byte	0x91
 8679 1028 6A       		.sleb128 -22
 8680 1029 2A       		.uleb128 0x2a
 8681 102a 990F0000 		.4byte	.LASF223
 8682 102e 01       		.byte	0x1
 8683 102f 4B0A     		.2byte	0xa4b
 8684 1031 27010000 		.4byte	0x127
 8685 1035 02       		.uleb128 0x2
 8686 1036 91       		.byte	0x91
 8687 1037 77       		.sleb128 -9
 8688 1038 2A       		.uleb128 0x2a
 8689 1039 1F030000 		.4byte	.LASF224
 8690 103d 01       		.byte	0x1
 8691 103e 4C0A     		.2byte	0xa4c
 8692 1040 B8000000 		.4byte	0xb8
 8693 1044 02       		.uleb128 0x2
 8694 1045 91       		.byte	0x91
 8695 1046 74       		.sleb128 -12
 8696 1047 2A       		.uleb128 0x2a
 8697 1048 BC090000 		.4byte	.LASF225
 8698 104c 01       		.byte	0x1
 8699 104d 4C0A     		.2byte	0xa4c
 8700 104f B8000000 		.4byte	0xb8
 8701 1053 02       		.uleb128 0x2
 8702 1054 91       		.byte	0x91
 8703 1055 72       		.sleb128 -14
 8704 1056 00       		.byte	0
 8705 1057 2C       		.uleb128 0x2c
 8706 1058 76060000 		.4byte	.LASF227
 8707 105c 07       		.byte	0x7
 8708 105d 7704     		.2byte	0x477
 8709 105f 44190000 		.4byte	.LFB148
 8710 1063 20000000 		.4byte	.LFE148-.LFB148
 8711 1067 01       		.uleb128 0x1
 8712 1068 9C       		.byte	0x9c
 8713 1069 8C100000 		.4byte	0x108c
 8714 106d 29       		.uleb128 0x29
 8715 106e DA0E0000 		.4byte	.LASF214
 8716 1072 01       		.byte	0x1
 8717 1073 290A     		.2byte	0xa29
 8718 1075 450E0000 		.4byte	0xe45
 8719 1079 02       		.uleb128 0x2
 8720 107a 91       		.byte	0x91
 8721 107b 74       		.sleb128 -12
 8722 107c 29       		.uleb128 0x29
 8723 107d 710A0000 		.4byte	.LASF228
 8724 1081 01       		.byte	0x1
 8725 1082 290A     		.2byte	0xa29
 8726 1084 B8000000 		.4byte	0xb8
 8727 1088 02       		.uleb128 0x2
 8728 1089 91       		.byte	0x91
 8729 108a 72       		.sleb128 -14
 8730 108b 00       		.byte	0
 8731 108c 2D       		.uleb128 0x2d
 8732 108d 27080000 		.4byte	.LASF230
ARM GAS  /tmp/ccNus05k.s 			page 206


 8733 1091 07       		.byte	0x7
 8734 1092 7604     		.2byte	0x476
 8735 1094 1B010000 		.4byte	0x11b
 8736 1098 0E190000 		.4byte	.LFB147
 8737 109c 36000000 		.4byte	.LFE147-.LFB147
 8738 10a0 01       		.uleb128 0x1
 8739 10a1 9C       		.byte	0x9c
 8740 10a2 D4100000 		.4byte	0x10d4
 8741 10a6 29       		.uleb128 0x29
 8742 10a7 DA0E0000 		.4byte	.LASF214
 8743 10ab 01       		.byte	0x1
 8744 10ac FD09     		.2byte	0x9fd
 8745 10ae 450E0000 		.4byte	0xe45
 8746 10b2 02       		.uleb128 0x2
 8747 10b3 91       		.byte	0x91
 8748 10b4 6C       		.sleb128 -20
 8749 10b5 29       		.uleb128 0x29
 8750 10b6 710A0000 		.4byte	.LASF228
 8751 10ba 01       		.byte	0x1
 8752 10bb FD09     		.2byte	0x9fd
 8753 10bd B8000000 		.4byte	0xb8
 8754 10c1 02       		.uleb128 0x2
 8755 10c2 91       		.byte	0x91
 8756 10c3 6A       		.sleb128 -22
 8757 10c4 2A       		.uleb128 0x2a
 8758 10c5 990F0000 		.4byte	.LASF223
 8759 10c9 01       		.byte	0x1
 8760 10ca FF09     		.2byte	0x9ff
 8761 10cc 27010000 		.4byte	0x127
 8762 10d0 02       		.uleb128 0x2
 8763 10d1 91       		.byte	0x91
 8764 10d2 77       		.sleb128 -9
 8765 10d3 00       		.byte	0
 8766 10d4 2D       		.uleb128 0x2d
 8767 10d5 00000000 		.4byte	.LASF231
 8768 10d9 07       		.byte	0x7
 8769 10da 7504     		.2byte	0x475
 8770 10dc B8000000 		.4byte	0xb8
 8771 10e0 F6180000 		.4byte	.LFB146
 8772 10e4 18000000 		.4byte	.LFE146-.LFB146
 8773 10e8 01       		.uleb128 0x1
 8774 10e9 9C       		.byte	0x9c
 8775 10ea FE100000 		.4byte	0x10fe
 8776 10ee 29       		.uleb128 0x29
 8777 10ef DA0E0000 		.4byte	.LASF214
 8778 10f3 01       		.byte	0x1
 8779 10f4 DB09     		.2byte	0x9db
 8780 10f6 450E0000 		.4byte	0xe45
 8781 10fa 02       		.uleb128 0x2
 8782 10fb 91       		.byte	0x91
 8783 10fc 74       		.sleb128 -12
 8784 10fd 00       		.byte	0
 8785 10fe 2D       		.uleb128 0x2d
 8786 10ff 120F0000 		.4byte	.LASF232
 8787 1103 07       		.byte	0x7
 8788 1104 7404     		.2byte	0x474
 8789 1106 B8000000 		.4byte	0xb8
ARM GAS  /tmp/ccNus05k.s 			page 207


 8790 110a DE180000 		.4byte	.LFB145
 8791 110e 18000000 		.4byte	.LFE145-.LFB145
 8792 1112 01       		.uleb128 0x1
 8793 1113 9C       		.byte	0x9c
 8794 1114 28110000 		.4byte	0x1128
 8795 1118 29       		.uleb128 0x29
 8796 1119 DA0E0000 		.4byte	.LASF214
 8797 111d 01       		.byte	0x1
 8798 111e CE09     		.2byte	0x9ce
 8799 1120 450E0000 		.4byte	0xe45
 8800 1124 02       		.uleb128 0x2
 8801 1125 91       		.byte	0x91
 8802 1126 74       		.sleb128 -12
 8803 1127 00       		.byte	0
 8804 1128 2D       		.uleb128 0x2d
 8805 1129 CA0E0000 		.4byte	.LASF233
 8806 112d 07       		.byte	0x7
 8807 112e 7304     		.2byte	0x473
 8808 1130 B8000000 		.4byte	0xb8
 8809 1134 C4180000 		.4byte	.LFB144
 8810 1138 1A000000 		.4byte	.LFE144-.LFB144
 8811 113c 01       		.uleb128 0x1
 8812 113d 9C       		.byte	0x9c
 8813 113e 52110000 		.4byte	0x1152
 8814 1142 29       		.uleb128 0x29
 8815 1143 DA0E0000 		.4byte	.LASF214
 8816 1147 01       		.byte	0x1
 8817 1148 C109     		.2byte	0x9c1
 8818 114a 450E0000 		.4byte	0xe45
 8819 114e 02       		.uleb128 0x2
 8820 114f 91       		.byte	0x91
 8821 1150 74       		.sleb128 -12
 8822 1151 00       		.byte	0
 8823 1152 2D       		.uleb128 0x2d
 8824 1153 BA0E0000 		.4byte	.LASF234
 8825 1157 07       		.byte	0x7
 8826 1158 7204     		.2byte	0x472
 8827 115a B8000000 		.4byte	0xb8
 8828 115e AC180000 		.4byte	.LFB143
 8829 1162 18000000 		.4byte	.LFE143-.LFB143
 8830 1166 01       		.uleb128 0x1
 8831 1167 9C       		.byte	0x9c
 8832 1168 7C110000 		.4byte	0x117c
 8833 116c 29       		.uleb128 0x29
 8834 116d DA0E0000 		.4byte	.LASF214
 8835 1171 01       		.byte	0x1
 8836 1172 B409     		.2byte	0x9b4
 8837 1174 450E0000 		.4byte	0xe45
 8838 1178 02       		.uleb128 0x2
 8839 1179 91       		.byte	0x91
 8840 117a 74       		.sleb128 -12
 8841 117b 00       		.byte	0
 8842 117c 2D       		.uleb128 0x2d
 8843 117d AA0E0000 		.4byte	.LASF235
 8844 1181 07       		.byte	0x7
 8845 1182 7104     		.2byte	0x471
 8846 1184 B8000000 		.4byte	0xb8
ARM GAS  /tmp/ccNus05k.s 			page 208


 8847 1188 94180000 		.4byte	.LFB142
 8848 118c 18000000 		.4byte	.LFE142-.LFB142
 8849 1190 01       		.uleb128 0x1
 8850 1191 9C       		.byte	0x9c
 8851 1192 A6110000 		.4byte	0x11a6
 8852 1196 29       		.uleb128 0x29
 8853 1197 DA0E0000 		.4byte	.LASF214
 8854 119b 01       		.byte	0x1
 8855 119c A709     		.2byte	0x9a7
 8856 119e 450E0000 		.4byte	0xe45
 8857 11a2 02       		.uleb128 0x2
 8858 11a3 91       		.byte	0x91
 8859 11a4 74       		.sleb128 -12
 8860 11a5 00       		.byte	0
 8861 11a6 2D       		.uleb128 0x2d
 8862 11a7 9A0E0000 		.4byte	.LASF236
 8863 11ab 07       		.byte	0x7
 8864 11ac 7004     		.2byte	0x470
 8865 11ae B8000000 		.4byte	0xb8
 8866 11b2 7C180000 		.4byte	.LFB141
 8867 11b6 18000000 		.4byte	.LFE141-.LFB141
 8868 11ba 01       		.uleb128 0x1
 8869 11bb 9C       		.byte	0x9c
 8870 11bc D0110000 		.4byte	0x11d0
 8871 11c0 29       		.uleb128 0x29
 8872 11c1 DA0E0000 		.4byte	.LASF214
 8873 11c5 01       		.byte	0x1
 8874 11c6 9A09     		.2byte	0x99a
 8875 11c8 450E0000 		.4byte	0xe45
 8876 11cc 02       		.uleb128 0x2
 8877 11cd 91       		.byte	0x91
 8878 11ce 74       		.sleb128 -12
 8879 11cf 00       		.byte	0
 8880 11d0 2C       		.uleb128 0x2c
 8881 11d1 85030000 		.4byte	.LASF237
 8882 11d5 07       		.byte	0x7
 8883 11d6 6F04     		.2byte	0x46f
 8884 11d8 46180000 		.4byte	.LFB140
 8885 11dc 36000000 		.4byte	.LFE140-.LFB140
 8886 11e0 01       		.uleb128 0x1
 8887 11e1 9C       		.byte	0x9c
 8888 11e2 05120000 		.4byte	0x1205
 8889 11e6 29       		.uleb128 0x29
 8890 11e7 DA0E0000 		.4byte	.LASF214
 8891 11eb 01       		.byte	0x1
 8892 11ec 8A09     		.2byte	0x98a
 8893 11ee 450E0000 		.4byte	0xe45
 8894 11f2 02       		.uleb128 0x2
 8895 11f3 91       		.byte	0x91
 8896 11f4 74       		.sleb128 -12
 8897 11f5 29       		.uleb128 0x29
 8898 11f6 46000000 		.4byte	.LASF238
 8899 11fa 01       		.byte	0x1
 8900 11fb 8A09     		.2byte	0x98a
 8901 11fd B8000000 		.4byte	0xb8
 8902 1201 02       		.uleb128 0x2
 8903 1202 91       		.byte	0x91
ARM GAS  /tmp/ccNus05k.s 			page 209


 8904 1203 72       		.sleb128 -14
 8905 1204 00       		.byte	0
 8906 1205 2C       		.uleb128 0x2c
 8907 1206 31010000 		.4byte	.LASF239
 8908 120a 07       		.byte	0x7
 8909 120b 6E04     		.2byte	0x46e
 8910 120d 0C180000 		.4byte	.LFB139
 8911 1211 3A000000 		.4byte	.LFE139-.LFB139
 8912 1215 01       		.uleb128 0x1
 8913 1216 9C       		.byte	0x9c
 8914 1217 3A120000 		.4byte	0x123a
 8915 121b 29       		.uleb128 0x29
 8916 121c DA0E0000 		.4byte	.LASF214
 8917 1220 01       		.byte	0x1
 8918 1221 7409     		.2byte	0x974
 8919 1223 450E0000 		.4byte	0xe45
 8920 1227 02       		.uleb128 0x2
 8921 1228 91       		.byte	0x91
 8922 1229 74       		.sleb128 -12
 8923 122a 29       		.uleb128 0x29
 8924 122b 84060000 		.4byte	.LASF240
 8925 122f 01       		.byte	0x1
 8926 1230 7409     		.2byte	0x974
 8927 1232 B8000000 		.4byte	0xb8
 8928 1236 02       		.uleb128 0x2
 8929 1237 91       		.byte	0x91
 8930 1238 72       		.sleb128 -14
 8931 1239 00       		.byte	0
 8932 123a 2C       		.uleb128 0x2c
 8933 123b 3A0A0000 		.4byte	.LASF241
 8934 123f 07       		.byte	0x7
 8935 1240 6D04     		.2byte	0x46d
 8936 1242 D6170000 		.4byte	.LFB138
 8937 1246 36000000 		.4byte	.LFE138-.LFB138
 8938 124a 01       		.uleb128 0x1
 8939 124b 9C       		.byte	0x9c
 8940 124c 6F120000 		.4byte	0x126f
 8941 1250 29       		.uleb128 0x29
 8942 1251 DA0E0000 		.4byte	.LASF214
 8943 1255 01       		.byte	0x1
 8944 1256 5E09     		.2byte	0x95e
 8945 1258 450E0000 		.4byte	0xe45
 8946 125c 02       		.uleb128 0x2
 8947 125d 91       		.byte	0x91
 8948 125e 74       		.sleb128 -12
 8949 125f 29       		.uleb128 0x29
 8950 1260 84060000 		.4byte	.LASF240
 8951 1264 01       		.byte	0x1
 8952 1265 5E09     		.2byte	0x95e
 8953 1267 B8000000 		.4byte	0xb8
 8954 126b 02       		.uleb128 0x2
 8955 126c 91       		.byte	0x91
 8956 126d 72       		.sleb128 -14
 8957 126e 00       		.byte	0
 8958 126f 2C       		.uleb128 0x2c
 8959 1270 C80C0000 		.4byte	.LASF242
 8960 1274 07       		.byte	0x7
ARM GAS  /tmp/ccNus05k.s 			page 210


 8961 1275 6C04     		.2byte	0x46c
 8962 1277 9C170000 		.4byte	.LFB137
 8963 127b 3A000000 		.4byte	.LFE137-.LFB137
 8964 127f 01       		.uleb128 0x1
 8965 1280 9C       		.byte	0x9c
 8966 1281 A4120000 		.4byte	0x12a4
 8967 1285 29       		.uleb128 0x29
 8968 1286 DA0E0000 		.4byte	.LASF214
 8969 128a 01       		.byte	0x1
 8970 128b 4809     		.2byte	0x948
 8971 128d 450E0000 		.4byte	0xe45
 8972 1291 02       		.uleb128 0x2
 8973 1292 91       		.byte	0x91
 8974 1293 74       		.sleb128 -12
 8975 1294 29       		.uleb128 0x29
 8976 1295 84060000 		.4byte	.LASF240
 8977 1299 01       		.byte	0x1
 8978 129a 4809     		.2byte	0x948
 8979 129c B8000000 		.4byte	0xb8
 8980 12a0 02       		.uleb128 0x2
 8981 12a1 91       		.byte	0x91
 8982 12a2 72       		.sleb128 -14
 8983 12a3 00       		.byte	0
 8984 12a4 2C       		.uleb128 0x2c
 8985 12a5 C3100000 		.4byte	.LASF243
 8986 12a9 07       		.byte	0x7
 8987 12aa 6B04     		.2byte	0x46b
 8988 12ac 66170000 		.4byte	.LFB136
 8989 12b0 36000000 		.4byte	.LFE136-.LFB136
 8990 12b4 01       		.uleb128 0x1
 8991 12b5 9C       		.byte	0x9c
 8992 12b6 D9120000 		.4byte	0x12d9
 8993 12ba 29       		.uleb128 0x29
 8994 12bb DA0E0000 		.4byte	.LASF214
 8995 12bf 01       		.byte	0x1
 8996 12c0 3209     		.2byte	0x932
 8997 12c2 450E0000 		.4byte	0xe45
 8998 12c6 02       		.uleb128 0x2
 8999 12c7 91       		.byte	0x91
 9000 12c8 74       		.sleb128 -12
 9001 12c9 29       		.uleb128 0x29
 9002 12ca 84060000 		.4byte	.LASF240
 9003 12ce 01       		.byte	0x1
 9004 12cf 3209     		.2byte	0x932
 9005 12d1 B8000000 		.4byte	0xb8
 9006 12d5 02       		.uleb128 0x2
 9007 12d6 91       		.byte	0x91
 9008 12d7 72       		.sleb128 -14
 9009 12d8 00       		.byte	0
 9010 12d9 2C       		.uleb128 0x2c
 9011 12da 31100000 		.4byte	.LASF244
 9012 12de 07       		.byte	0x7
 9013 12df 6A04     		.2byte	0x46a
 9014 12e1 48170000 		.4byte	.LFB135
 9015 12e5 1E000000 		.4byte	.LFE135-.LFB135
 9016 12e9 01       		.uleb128 0x1
 9017 12ea 9C       		.byte	0x9c
ARM GAS  /tmp/ccNus05k.s 			page 211


 9018 12eb 0E130000 		.4byte	0x130e
 9019 12ef 29       		.uleb128 0x29
 9020 12f0 DA0E0000 		.4byte	.LASF214
 9021 12f4 01       		.byte	0x1
 9022 12f5 1F09     		.2byte	0x91f
 9023 12f7 450E0000 		.4byte	0xe45
 9024 12fb 02       		.uleb128 0x2
 9025 12fc 91       		.byte	0x91
 9026 12fd 74       		.sleb128 -12
 9027 12fe 29       		.uleb128 0x29
 9028 12ff 2C0E0000 		.4byte	.LASF245
 9029 1303 01       		.byte	0x1
 9030 1304 1F09     		.2byte	0x91f
 9031 1306 B8000000 		.4byte	0xb8
 9032 130a 02       		.uleb128 0x2
 9033 130b 91       		.byte	0x91
 9034 130c 72       		.sleb128 -14
 9035 130d 00       		.byte	0
 9036 130e 2C       		.uleb128 0x2c
 9037 130f 21100000 		.4byte	.LASF246
 9038 1313 07       		.byte	0x7
 9039 1314 6904     		.2byte	0x469
 9040 1316 2C170000 		.4byte	.LFB134
 9041 131a 1C000000 		.4byte	.LFE134-.LFB134
 9042 131e 01       		.uleb128 0x1
 9043 131f 9C       		.byte	0x9c
 9044 1320 43130000 		.4byte	0x1343
 9045 1324 29       		.uleb128 0x29
 9046 1325 DA0E0000 		.4byte	.LASF214
 9047 1329 01       		.byte	0x1
 9048 132a 1109     		.2byte	0x911
 9049 132c 450E0000 		.4byte	0xe45
 9050 1330 02       		.uleb128 0x2
 9051 1331 91       		.byte	0x91
 9052 1332 74       		.sleb128 -12
 9053 1333 29       		.uleb128 0x29
 9054 1334 230E0000 		.4byte	.LASF247
 9055 1338 01       		.byte	0x1
 9056 1339 1109     		.2byte	0x911
 9057 133b B8000000 		.4byte	0xb8
 9058 133f 02       		.uleb128 0x2
 9059 1340 91       		.byte	0x91
 9060 1341 72       		.sleb128 -14
 9061 1342 00       		.byte	0
 9062 1343 2C       		.uleb128 0x2c
 9063 1344 39070000 		.4byte	.LASF248
 9064 1348 07       		.byte	0x7
 9065 1349 6804     		.2byte	0x468
 9066 134b 10170000 		.4byte	.LFB133
 9067 134f 1C000000 		.4byte	.LFE133-.LFB133
 9068 1353 01       		.uleb128 0x1
 9069 1354 9C       		.byte	0x9c
 9070 1355 78130000 		.4byte	0x1378
 9071 1359 29       		.uleb128 0x29
 9072 135a DA0E0000 		.4byte	.LASF214
 9073 135e 01       		.byte	0x1
 9074 135f 0309     		.2byte	0x903
ARM GAS  /tmp/ccNus05k.s 			page 212


 9075 1361 450E0000 		.4byte	0xe45
 9076 1365 02       		.uleb128 0x2
 9077 1366 91       		.byte	0x91
 9078 1367 74       		.sleb128 -12
 9079 1368 29       		.uleb128 0x29
 9080 1369 1A0E0000 		.4byte	.LASF249
 9081 136d 01       		.byte	0x1
 9082 136e 0309     		.2byte	0x903
 9083 1370 B8000000 		.4byte	0xb8
 9084 1374 02       		.uleb128 0x2
 9085 1375 91       		.byte	0x91
 9086 1376 72       		.sleb128 -14
 9087 1377 00       		.byte	0
 9088 1378 2C       		.uleb128 0x2c
 9089 1379 29070000 		.4byte	.LASF250
 9090 137d 07       		.byte	0x7
 9091 137e 6704     		.2byte	0x467
 9092 1380 F4160000 		.4byte	.LFB132
 9093 1384 1C000000 		.4byte	.LFE132-.LFB132
 9094 1388 01       		.uleb128 0x1
 9095 1389 9C       		.byte	0x9c
 9096 138a AD130000 		.4byte	0x13ad
 9097 138e 29       		.uleb128 0x29
 9098 138f DA0E0000 		.4byte	.LASF214
 9099 1393 01       		.byte	0x1
 9100 1394 F508     		.2byte	0x8f5
 9101 1396 450E0000 		.4byte	0xe45
 9102 139a 02       		.uleb128 0x2
 9103 139b 91       		.byte	0x91
 9104 139c 74       		.sleb128 -12
 9105 139d 29       		.uleb128 0x29
 9106 139e 79020000 		.4byte	.LASF251
 9107 13a2 01       		.byte	0x1
 9108 13a3 F508     		.2byte	0x8f5
 9109 13a5 B8000000 		.4byte	0xb8
 9110 13a9 02       		.uleb128 0x2
 9111 13aa 91       		.byte	0x91
 9112 13ab 72       		.sleb128 -14
 9113 13ac 00       		.byte	0
 9114 13ad 2C       		.uleb128 0x2c
 9115 13ae F10B0000 		.4byte	.LASF252
 9116 13b2 07       		.byte	0x7
 9117 13b3 6604     		.2byte	0x466
 9118 13b5 D8160000 		.4byte	.LFB131
 9119 13b9 1C000000 		.4byte	.LFE131-.LFB131
 9120 13bd 01       		.uleb128 0x1
 9121 13be 9C       		.byte	0x9c
 9122 13bf E2130000 		.4byte	0x13e2
 9123 13c3 29       		.uleb128 0x29
 9124 13c4 DA0E0000 		.4byte	.LASF214
 9125 13c8 01       		.byte	0x1
 9126 13c9 E708     		.2byte	0x8e7
 9127 13cb 450E0000 		.4byte	0xe45
 9128 13cf 02       		.uleb128 0x2
 9129 13d0 91       		.byte	0x91
 9130 13d1 74       		.sleb128 -12
 9131 13d2 29       		.uleb128 0x29
ARM GAS  /tmp/ccNus05k.s 			page 213


 9132 13d3 130C0000 		.4byte	.LASF253
 9133 13d7 01       		.byte	0x1
 9134 13d8 E708     		.2byte	0x8e7
 9135 13da B8000000 		.4byte	0xb8
 9136 13de 02       		.uleb128 0x2
 9137 13df 91       		.byte	0x91
 9138 13e0 72       		.sleb128 -14
 9139 13e1 00       		.byte	0
 9140 13e2 2C       		.uleb128 0x2c
 9141 13e3 31060000 		.4byte	.LASF254
 9142 13e7 07       		.byte	0x7
 9143 13e8 6504     		.2byte	0x465
 9144 13ea BC160000 		.4byte	.LFB130
 9145 13ee 1C000000 		.4byte	.LFE130-.LFB130
 9146 13f2 01       		.uleb128 0x1
 9147 13f3 9C       		.byte	0x9c
 9148 13f4 17140000 		.4byte	0x1417
 9149 13f8 29       		.uleb128 0x29
 9150 13f9 DA0E0000 		.4byte	.LASF214
 9151 13fd 01       		.byte	0x1
 9152 13fe D908     		.2byte	0x8d9
 9153 1400 450E0000 		.4byte	0xe45
 9154 1404 02       		.uleb128 0x2
 9155 1405 91       		.byte	0x91
 9156 1406 74       		.sleb128 -12
 9157 1407 29       		.uleb128 0x29
 9158 1408 60050000 		.4byte	.LASF255
 9159 140c 01       		.byte	0x1
 9160 140d D908     		.2byte	0x8d9
 9161 140f B8000000 		.4byte	0xb8
 9162 1413 02       		.uleb128 0x2
 9163 1414 91       		.byte	0x91
 9164 1415 72       		.sleb128 -14
 9165 1416 00       		.byte	0
 9166 1417 2C       		.uleb128 0x2c
 9167 1418 780C0000 		.4byte	.LASF256
 9168 141c 07       		.byte	0x7
 9169 141d 6404     		.2byte	0x464
 9170 141f 86160000 		.4byte	.LFB129
 9171 1423 36000000 		.4byte	.LFE129-.LFB129
 9172 1427 01       		.uleb128 0x1
 9173 1428 9C       		.byte	0x9c
 9174 1429 4C140000 		.4byte	0x144c
 9175 142d 29       		.uleb128 0x29
 9176 142e DA0E0000 		.4byte	.LASF214
 9177 1432 01       		.byte	0x1
 9178 1433 C708     		.2byte	0x8c7
 9179 1435 450E0000 		.4byte	0xe45
 9180 1439 02       		.uleb128 0x2
 9181 143a 91       		.byte	0x91
 9182 143b 74       		.sleb128 -12
 9183 143c 29       		.uleb128 0x29
 9184 143d 0B030000 		.4byte	.LASF257
 9185 1441 01       		.byte	0x1
 9186 1442 C708     		.2byte	0x8c7
 9187 1444 B8000000 		.4byte	0xb8
 9188 1448 02       		.uleb128 0x2
ARM GAS  /tmp/ccNus05k.s 			page 214


 9189 1449 91       		.byte	0x91
 9190 144a 72       		.sleb128 -14
 9191 144b 00       		.byte	0
 9192 144c 2C       		.uleb128 0x2c
 9193 144d DE110000 		.4byte	.LASF258
 9194 1451 07       		.byte	0x7
 9195 1452 6304     		.2byte	0x463
 9196 1454 50160000 		.4byte	.LFB128
 9197 1458 36000000 		.4byte	.LFE128-.LFB128
 9198 145c 01       		.uleb128 0x1
 9199 145d 9C       		.byte	0x9c
 9200 145e 81140000 		.4byte	0x1481
 9201 1462 29       		.uleb128 0x29
 9202 1463 DA0E0000 		.4byte	.LASF214
 9203 1467 01       		.byte	0x1
 9204 1468 B208     		.2byte	0x8b2
 9205 146a 450E0000 		.4byte	0xe45
 9206 146e 02       		.uleb128 0x2
 9207 146f 91       		.byte	0x91
 9208 1470 74       		.sleb128 -12
 9209 1471 29       		.uleb128 0x29
 9210 1472 2B120000 		.4byte	.LASF259
 9211 1476 01       		.byte	0x1
 9212 1477 B208     		.2byte	0x8b2
 9213 1479 B8000000 		.4byte	0xb8
 9214 147d 02       		.uleb128 0x2
 9215 147e 91       		.byte	0x91
 9216 147f 72       		.sleb128 -14
 9217 1480 00       		.byte	0
 9218 1481 2C       		.uleb128 0x2c
 9219 1482 9A000000 		.4byte	.LASF260
 9220 1486 07       		.byte	0x7
 9221 1487 6204     		.2byte	0x462
 9222 1489 1A160000 		.4byte	.LFB127
 9223 148d 36000000 		.4byte	.LFE127-.LFB127
 9224 1491 01       		.uleb128 0x1
 9225 1492 9C       		.byte	0x9c
 9226 1493 B6140000 		.4byte	0x14b6
 9227 1497 29       		.uleb128 0x29
 9228 1498 DA0E0000 		.4byte	.LASF214
 9229 149c 01       		.byte	0x1
 9230 149d 9B08     		.2byte	0x89b
 9231 149f 450E0000 		.4byte	0xe45
 9232 14a3 02       		.uleb128 0x2
 9233 14a4 91       		.byte	0x91
 9234 14a5 74       		.sleb128 -12
 9235 14a6 29       		.uleb128 0x29
 9236 14a7 39080000 		.4byte	.LASF261
 9237 14ab 01       		.byte	0x1
 9238 14ac 9B08     		.2byte	0x89b
 9239 14ae B8000000 		.4byte	0xb8
 9240 14b2 02       		.uleb128 0x2
 9241 14b3 91       		.byte	0x91
 9242 14b4 72       		.sleb128 -14
 9243 14b5 00       		.byte	0
 9244 14b6 2C       		.uleb128 0x2c
 9245 14b7 5B0B0000 		.4byte	.LASF262
ARM GAS  /tmp/ccNus05k.s 			page 215


 9246 14bb 07       		.byte	0x7
 9247 14bc 6104     		.2byte	0x461
 9248 14be E4150000 		.4byte	.LFB126
 9249 14c2 36000000 		.4byte	.LFE126-.LFB126
 9250 14c6 01       		.uleb128 0x1
 9251 14c7 9C       		.byte	0x9c
 9252 14c8 EB140000 		.4byte	0x14eb
 9253 14cc 29       		.uleb128 0x29
 9254 14cd DA0E0000 		.4byte	.LASF214
 9255 14d1 01       		.byte	0x1
 9256 14d2 7B08     		.2byte	0x87b
 9257 14d4 450E0000 		.4byte	0xe45
 9258 14d8 02       		.uleb128 0x2
 9259 14d9 91       		.byte	0x91
 9260 14da 74       		.sleb128 -12
 9261 14db 29       		.uleb128 0x29
 9262 14dc 3F090000 		.4byte	.LASF263
 9263 14e0 01       		.byte	0x1
 9264 14e1 7B08     		.2byte	0x87b
 9265 14e3 B8000000 		.4byte	0xb8
 9266 14e7 02       		.uleb128 0x2
 9267 14e8 91       		.byte	0x91
 9268 14e9 72       		.sleb128 -14
 9269 14ea 00       		.byte	0
 9270 14eb 2C       		.uleb128 0x2c
 9271 14ec 06050000 		.4byte	.LASF264
 9272 14f0 07       		.byte	0x7
 9273 14f1 6004     		.2byte	0x460
 9274 14f3 A6150000 		.4byte	.LFB125
 9275 14f7 3E000000 		.4byte	.LFE125-.LFB125
 9276 14fb 01       		.uleb128 0x1
 9277 14fc 9C       		.byte	0x9c
 9278 14fd 20150000 		.4byte	0x1520
 9279 1501 29       		.uleb128 0x29
 9280 1502 DA0E0000 		.4byte	.LASF214
 9281 1506 01       		.byte	0x1
 9282 1507 6108     		.2byte	0x861
 9283 1509 450E0000 		.4byte	0xe45
 9284 150d 02       		.uleb128 0x2
 9285 150e 91       		.byte	0x91
 9286 150f 74       		.sleb128 -12
 9287 1510 29       		.uleb128 0x29
 9288 1511 590A0000 		.4byte	.LASF265
 9289 1515 01       		.byte	0x1
 9290 1516 6108     		.2byte	0x861
 9291 1518 4D010000 		.4byte	0x14d
 9292 151c 02       		.uleb128 0x2
 9293 151d 91       		.byte	0x91
 9294 151e 73       		.sleb128 -13
 9295 151f 00       		.byte	0
 9296 1520 2C       		.uleb128 0x2c
 9297 1521 6E010000 		.4byte	.LASF266
 9298 1525 07       		.byte	0x7
 9299 1526 5F04     		.2byte	0x45f
 9300 1528 68150000 		.4byte	.LFB124
 9301 152c 3E000000 		.4byte	.LFE124-.LFB124
 9302 1530 01       		.uleb128 0x1
ARM GAS  /tmp/ccNus05k.s 			page 216


 9303 1531 9C       		.byte	0x9c
 9304 1532 55150000 		.4byte	0x1555
 9305 1536 29       		.uleb128 0x29
 9306 1537 DA0E0000 		.4byte	.LASF214
 9307 153b 01       		.byte	0x1
 9308 153c 4908     		.2byte	0x849
 9309 153e 450E0000 		.4byte	0xe45
 9310 1542 02       		.uleb128 0x2
 9311 1543 91       		.byte	0x91
 9312 1544 74       		.sleb128 -12
 9313 1545 29       		.uleb128 0x29
 9314 1546 880F0000 		.4byte	.LASF267
 9315 154a 01       		.byte	0x1
 9316 154b 4908     		.2byte	0x849
 9317 154d B8000000 		.4byte	0xb8
 9318 1551 02       		.uleb128 0x2
 9319 1552 91       		.byte	0x91
 9320 1553 72       		.sleb128 -14
 9321 1554 00       		.byte	0
 9322 1555 2C       		.uleb128 0x2c
 9323 1556 82000000 		.4byte	.LASF268
 9324 155a 07       		.byte	0x7
 9325 155b 5E04     		.2byte	0x45e
 9326 155d 2A150000 		.4byte	.LFB123
 9327 1561 3E000000 		.4byte	.LFE123-.LFB123
 9328 1565 01       		.uleb128 0x1
 9329 1566 9C       		.byte	0x9c
 9330 1567 8A150000 		.4byte	0x158a
 9331 156b 29       		.uleb128 0x29
 9332 156c DA0E0000 		.4byte	.LASF214
 9333 1570 01       		.byte	0x1
 9334 1571 2D08     		.2byte	0x82d
 9335 1573 450E0000 		.4byte	0xe45
 9336 1577 02       		.uleb128 0x2
 9337 1578 91       		.byte	0x91
 9338 1579 74       		.sleb128 -12
 9339 157a 29       		.uleb128 0x29
 9340 157b 590A0000 		.4byte	.LASF265
 9341 157f 01       		.byte	0x1
 9342 1580 2D08     		.2byte	0x82d
 9343 1582 4D010000 		.4byte	0x14d
 9344 1586 02       		.uleb128 0x2
 9345 1587 91       		.byte	0x91
 9346 1588 73       		.sleb128 -13
 9347 1589 00       		.byte	0
 9348 158a 2C       		.uleb128 0x2c
 9349 158b 4D020000 		.4byte	.LASF269
 9350 158f 07       		.byte	0x7
 9351 1590 5D04     		.2byte	0x45d
 9352 1592 7E140000 		.4byte	.LFB122
 9353 1596 AC000000 		.4byte	.LFE122-.LFB122
 9354 159a 01       		.uleb128 0x1
 9355 159b 9C       		.byte	0x9c
 9356 159c EC150000 		.4byte	0x15ec
 9357 15a0 29       		.uleb128 0x29
 9358 15a1 DA0E0000 		.4byte	.LASF214
 9359 15a5 01       		.byte	0x1
ARM GAS  /tmp/ccNus05k.s 			page 217


 9360 15a6 FE07     		.2byte	0x7fe
 9361 15a8 450E0000 		.4byte	0xe45
 9362 15ac 02       		.uleb128 0x2
 9363 15ad 91       		.byte	0x91
 9364 15ae 6C       		.sleb128 -20
 9365 15af 29       		.uleb128 0x29
 9366 15b0 F2110000 		.4byte	.LASF75
 9367 15b4 01       		.byte	0x1
 9368 15b5 FE07     		.2byte	0x7fe
 9369 15b7 B8000000 		.4byte	0xb8
 9370 15bb 02       		.uleb128 0x2
 9371 15bc 91       		.byte	0x91
 9372 15bd 6A       		.sleb128 -22
 9373 15be 29       		.uleb128 0x29
 9374 15bf 62040000 		.4byte	.LASF66
 9375 15c3 01       		.byte	0x1
 9376 15c4 FE07     		.2byte	0x7fe
 9377 15c6 B8000000 		.4byte	0xb8
 9378 15ca 02       		.uleb128 0x2
 9379 15cb 91       		.byte	0x91
 9380 15cc 68       		.sleb128 -24
 9381 15cd 2B       		.uleb128 0x2b
 9382 15ce 746D7000 		.ascii	"tmp\000"
 9383 15d2 01       		.byte	0x1
 9384 15d3 0008     		.2byte	0x800
 9385 15d5 D8000000 		.4byte	0xd8
 9386 15d9 02       		.uleb128 0x2
 9387 15da 91       		.byte	0x91
 9388 15db 74       		.sleb128 -12
 9389 15dc 2A       		.uleb128 0x2a
 9390 15dd C60B0000 		.4byte	.LASF270
 9391 15e1 01       		.byte	0x1
 9392 15e2 0108     		.2byte	0x801
 9393 15e4 B8000000 		.4byte	0xb8
 9394 15e8 02       		.uleb128 0x2
 9395 15e9 91       		.byte	0x91
 9396 15ea 72       		.sleb128 -14
 9397 15eb 00       		.byte	0
 9398 15ec 2C       		.uleb128 0x2c
 9399 15ed 1A090000 		.4byte	.LASF271
 9400 15f1 07       		.byte	0x7
 9401 15f2 5C04     		.2byte	0x45c
 9402 15f4 2A140000 		.4byte	.LFB121
 9403 15f8 54000000 		.4byte	.LFE121-.LFB121
 9404 15fc 01       		.uleb128 0x1
 9405 15fd 9C       		.byte	0x9c
 9406 15fe 3F160000 		.4byte	0x163f
 9407 1602 29       		.uleb128 0x29
 9408 1603 DA0E0000 		.4byte	.LASF214
 9409 1607 01       		.byte	0x1
 9410 1608 D507     		.2byte	0x7d5
 9411 160a 450E0000 		.4byte	0xe45
 9412 160e 02       		.uleb128 0x2
 9413 160f 91       		.byte	0x91
 9414 1610 6C       		.sleb128 -20
 9415 1611 29       		.uleb128 0x29
 9416 1612 F2110000 		.4byte	.LASF75
ARM GAS  /tmp/ccNus05k.s 			page 218


 9417 1616 01       		.byte	0x1
 9418 1617 D507     		.2byte	0x7d5
 9419 1619 B8000000 		.4byte	0xb8
 9420 161d 02       		.uleb128 0x2
 9421 161e 91       		.byte	0x91
 9422 161f 6A       		.sleb128 -22
 9423 1620 29       		.uleb128 0x29
 9424 1621 B9070000 		.4byte	.LASF272
 9425 1625 01       		.byte	0x1
 9426 1626 D507     		.2byte	0x7d5
 9427 1628 B8000000 		.4byte	0xb8
 9428 162c 02       		.uleb128 0x2
 9429 162d 91       		.byte	0x91
 9430 162e 68       		.sleb128 -24
 9431 162f 2B       		.uleb128 0x2b
 9432 1630 746D7000 		.ascii	"tmp\000"
 9433 1634 01       		.byte	0x1
 9434 1635 D707     		.2byte	0x7d7
 9435 1637 B8000000 		.4byte	0xb8
 9436 163b 02       		.uleb128 0x2
 9437 163c 91       		.byte	0x91
 9438 163d 76       		.sleb128 -10
 9439 163e 00       		.byte	0
 9440 163f 2C       		.uleb128 0x2c
 9441 1640 4E0A0000 		.4byte	.LASF273
 9442 1644 07       		.byte	0x7
 9443 1645 5B04     		.2byte	0x45b
 9444 1647 D6130000 		.4byte	.LFB120
 9445 164b 54000000 		.4byte	.LFE120-.LFB120
 9446 164f 01       		.uleb128 0x1
 9447 1650 9C       		.byte	0x9c
 9448 1651 92160000 		.4byte	0x1692
 9449 1655 29       		.uleb128 0x29
 9450 1656 DA0E0000 		.4byte	.LASF214
 9451 165a 01       		.byte	0x1
 9452 165b B707     		.2byte	0x7b7
 9453 165d 450E0000 		.4byte	0xe45
 9454 1661 02       		.uleb128 0x2
 9455 1662 91       		.byte	0x91
 9456 1663 6C       		.sleb128 -20
 9457 1664 29       		.uleb128 0x29
 9458 1665 F2110000 		.4byte	.LASF75
 9459 1669 01       		.byte	0x1
 9460 166a B707     		.2byte	0x7b7
 9461 166c B8000000 		.4byte	0xb8
 9462 1670 02       		.uleb128 0x2
 9463 1671 91       		.byte	0x91
 9464 1672 6A       		.sleb128 -22
 9465 1673 29       		.uleb128 0x29
 9466 1674 920E0000 		.4byte	.LASF274
 9467 1678 01       		.byte	0x1
 9468 1679 B707     		.2byte	0x7b7
 9469 167b B8000000 		.4byte	0xb8
 9470 167f 02       		.uleb128 0x2
 9471 1680 91       		.byte	0x91
 9472 1681 68       		.sleb128 -24
 9473 1682 2B       		.uleb128 0x2b
ARM GAS  /tmp/ccNus05k.s 			page 219


 9474 1683 746D7000 		.ascii	"tmp\000"
 9475 1687 01       		.byte	0x1
 9476 1688 B907     		.2byte	0x7b9
 9477 168a B8000000 		.4byte	0xb8
 9478 168e 02       		.uleb128 0x2
 9479 168f 91       		.byte	0x91
 9480 1690 76       		.sleb128 -10
 9481 1691 00       		.byte	0
 9482 1692 2C       		.uleb128 0x2c
 9483 1693 8C0A0000 		.4byte	.LASF275
 9484 1697 07       		.byte	0x7
 9485 1698 5A04     		.2byte	0x45a
 9486 169a 9C130000 		.4byte	.LFB119
 9487 169e 3A000000 		.4byte	.LFE119-.LFB119
 9488 16a2 01       		.uleb128 0x1
 9489 16a3 9C       		.byte	0x9c
 9490 16a4 D6160000 		.4byte	0x16d6
 9491 16a8 29       		.uleb128 0x29
 9492 16a9 DA0E0000 		.4byte	.LASF214
 9493 16ad 01       		.byte	0x1
 9494 16ae 9C07     		.2byte	0x79c
 9495 16b0 450E0000 		.4byte	0xe45
 9496 16b4 02       		.uleb128 0x2
 9497 16b5 91       		.byte	0x91
 9498 16b6 6C       		.sleb128 -20
 9499 16b7 29       		.uleb128 0x29
 9500 16b8 9E0D0000 		.4byte	.LASF70
 9501 16bc 01       		.byte	0x1
 9502 16bd 9C07     		.2byte	0x79c
 9503 16bf B8000000 		.4byte	0xb8
 9504 16c3 02       		.uleb128 0x2
 9505 16c4 91       		.byte	0x91
 9506 16c5 6A       		.sleb128 -22
 9507 16c6 2A       		.uleb128 0x2a
 9508 16c7 A1100000 		.4byte	.LASF216
 9509 16cb 01       		.byte	0x1
 9510 16cc 9E07     		.2byte	0x79e
 9511 16ce B8000000 		.4byte	0xb8
 9512 16d2 02       		.uleb128 0x2
 9513 16d3 91       		.byte	0x91
 9514 16d4 76       		.sleb128 -10
 9515 16d5 00       		.byte	0
 9516 16d6 2C       		.uleb128 0x2c
 9517 16d7 410E0000 		.4byte	.LASF276
 9518 16db 07       		.byte	0x7
 9519 16dc 5904     		.2byte	0x459
 9520 16de 62130000 		.4byte	.LFB118
 9521 16e2 3A000000 		.4byte	.LFE118-.LFB118
 9522 16e6 01       		.uleb128 0x1
 9523 16e7 9C       		.byte	0x9c
 9524 16e8 1A170000 		.4byte	0x171a
 9525 16ec 29       		.uleb128 0x29
 9526 16ed DA0E0000 		.4byte	.LASF214
 9527 16f1 01       		.byte	0x1
 9528 16f2 8307     		.2byte	0x783
 9529 16f4 450E0000 		.4byte	0xe45
 9530 16f8 02       		.uleb128 0x2
ARM GAS  /tmp/ccNus05k.s 			page 220


 9531 16f9 91       		.byte	0x91
 9532 16fa 6C       		.sleb128 -20
 9533 16fb 29       		.uleb128 0x29
 9534 16fc 5B110000 		.4byte	.LASF71
 9535 1700 01       		.byte	0x1
 9536 1701 8307     		.2byte	0x783
 9537 1703 B8000000 		.4byte	0xb8
 9538 1707 02       		.uleb128 0x2
 9539 1708 91       		.byte	0x91
 9540 1709 6A       		.sleb128 -22
 9541 170a 2A       		.uleb128 0x2a
 9542 170b A1100000 		.4byte	.LASF216
 9543 170f 01       		.byte	0x1
 9544 1710 8507     		.2byte	0x785
 9545 1712 B8000000 		.4byte	0xb8
 9546 1716 02       		.uleb128 0x2
 9547 1717 91       		.byte	0x91
 9548 1718 76       		.sleb128 -10
 9549 1719 00       		.byte	0
 9550 171a 2C       		.uleb128 0x2c
 9551 171b F8060000 		.4byte	.LASF277
 9552 171f 07       		.byte	0x7
 9553 1720 5804     		.2byte	0x458
 9554 1722 28130000 		.4byte	.LFB117
 9555 1726 3A000000 		.4byte	.LFE117-.LFB117
 9556 172a 01       		.uleb128 0x1
 9557 172b 9C       		.byte	0x9c
 9558 172c 5E170000 		.4byte	0x175e
 9559 1730 29       		.uleb128 0x29
 9560 1731 DA0E0000 		.4byte	.LASF214
 9561 1735 01       		.byte	0x1
 9562 1736 6C07     		.2byte	0x76c
 9563 1738 450E0000 		.4byte	0xe45
 9564 173c 02       		.uleb128 0x2
 9565 173d 91       		.byte	0x91
 9566 173e 6C       		.sleb128 -20
 9567 173f 29       		.uleb128 0x29
 9568 1740 9E0D0000 		.4byte	.LASF70
 9569 1744 01       		.byte	0x1
 9570 1745 6C07     		.2byte	0x76c
 9571 1747 B8000000 		.4byte	0xb8
 9572 174b 02       		.uleb128 0x2
 9573 174c 91       		.byte	0x91
 9574 174d 6A       		.sleb128 -22
 9575 174e 2A       		.uleb128 0x2a
 9576 174f A1100000 		.4byte	.LASF216
 9577 1753 01       		.byte	0x1
 9578 1754 6E07     		.2byte	0x76e
 9579 1756 B8000000 		.4byte	0xb8
 9580 175a 02       		.uleb128 0x2
 9581 175b 91       		.byte	0x91
 9582 175c 76       		.sleb128 -10
 9583 175d 00       		.byte	0
 9584 175e 2C       		.uleb128 0x2c
 9585 175f 53000000 		.4byte	.LASF278
 9586 1763 07       		.byte	0x7
 9587 1764 5704     		.2byte	0x457
ARM GAS  /tmp/ccNus05k.s 			page 221


 9588 1766 EE120000 		.4byte	.LFB116
 9589 176a 3A000000 		.4byte	.LFE116-.LFB116
 9590 176e 01       		.uleb128 0x1
 9591 176f 9C       		.byte	0x9c
 9592 1770 A2170000 		.4byte	0x17a2
 9593 1774 29       		.uleb128 0x29
 9594 1775 DA0E0000 		.4byte	.LASF214
 9595 1779 01       		.byte	0x1
 9596 177a 5407     		.2byte	0x754
 9597 177c 450E0000 		.4byte	0xe45
 9598 1780 02       		.uleb128 0x2
 9599 1781 91       		.byte	0x91
 9600 1782 6C       		.sleb128 -20
 9601 1783 29       		.uleb128 0x29
 9602 1784 5B110000 		.4byte	.LASF71
 9603 1788 01       		.byte	0x1
 9604 1789 5407     		.2byte	0x754
 9605 178b B8000000 		.4byte	0xb8
 9606 178f 02       		.uleb128 0x2
 9607 1790 91       		.byte	0x91
 9608 1791 6A       		.sleb128 -22
 9609 1792 2A       		.uleb128 0x2a
 9610 1793 A1100000 		.4byte	.LASF216
 9611 1797 01       		.byte	0x1
 9612 1798 5607     		.2byte	0x756
 9613 179a B8000000 		.4byte	0xb8
 9614 179e 02       		.uleb128 0x2
 9615 179f 91       		.byte	0x91
 9616 17a0 76       		.sleb128 -10
 9617 17a1 00       		.byte	0
 9618 17a2 2C       		.uleb128 0x2c
 9619 17a3 41100000 		.4byte	.LASF279
 9620 17a7 07       		.byte	0x7
 9621 17a8 5604     		.2byte	0x456
 9622 17aa B4120000 		.4byte	.LFB115
 9623 17ae 3A000000 		.4byte	.LFE115-.LFB115
 9624 17b2 01       		.uleb128 0x1
 9625 17b3 9C       		.byte	0x9c
 9626 17b4 E6170000 		.4byte	0x17e6
 9627 17b8 29       		.uleb128 0x29
 9628 17b9 DA0E0000 		.4byte	.LASF214
 9629 17bd 01       		.byte	0x1
 9630 17be 3D07     		.2byte	0x73d
 9631 17c0 450E0000 		.4byte	0xe45
 9632 17c4 02       		.uleb128 0x2
 9633 17c5 91       		.byte	0x91
 9634 17c6 6C       		.sleb128 -20
 9635 17c7 29       		.uleb128 0x29
 9636 17c8 9E0D0000 		.4byte	.LASF70
 9637 17cc 01       		.byte	0x1
 9638 17cd 3D07     		.2byte	0x73d
 9639 17cf B8000000 		.4byte	0xb8
 9640 17d3 02       		.uleb128 0x2
 9641 17d4 91       		.byte	0x91
 9642 17d5 6A       		.sleb128 -22
 9643 17d6 2A       		.uleb128 0x2a
 9644 17d7 A1100000 		.4byte	.LASF216
ARM GAS  /tmp/ccNus05k.s 			page 222


 9645 17db 01       		.byte	0x1
 9646 17dc 3F07     		.2byte	0x73f
 9647 17de B8000000 		.4byte	0xb8
 9648 17e2 02       		.uleb128 0x2
 9649 17e3 91       		.byte	0x91
 9650 17e4 76       		.sleb128 -10
 9651 17e5 00       		.byte	0
 9652 17e6 2C       		.uleb128 0x2c
 9653 17e7 140B0000 		.4byte	.LASF280
 9654 17eb 07       		.byte	0x7
 9655 17ec 5504     		.2byte	0x455
 9656 17ee 7E120000 		.4byte	.LFB114
 9657 17f2 36000000 		.4byte	.LFE114-.LFB114
 9658 17f6 01       		.uleb128 0x1
 9659 17f7 9C       		.byte	0x9c
 9660 17f8 2A180000 		.4byte	0x182a
 9661 17fc 29       		.uleb128 0x29
 9662 17fd DA0E0000 		.4byte	.LASF214
 9663 1801 01       		.byte	0x1
 9664 1802 2507     		.2byte	0x725
 9665 1804 450E0000 		.4byte	0xe45
 9666 1808 02       		.uleb128 0x2
 9667 1809 91       		.byte	0x91
 9668 180a 6C       		.sleb128 -20
 9669 180b 29       		.uleb128 0x29
 9670 180c 5B110000 		.4byte	.LASF71
 9671 1810 01       		.byte	0x1
 9672 1811 2507     		.2byte	0x725
 9673 1813 B8000000 		.4byte	0xb8
 9674 1817 02       		.uleb128 0x2
 9675 1818 91       		.byte	0x91
 9676 1819 6A       		.sleb128 -22
 9677 181a 2A       		.uleb128 0x2a
 9678 181b A1100000 		.4byte	.LASF216
 9679 181f 01       		.byte	0x1
 9680 1820 2707     		.2byte	0x727
 9681 1822 B8000000 		.4byte	0xb8
 9682 1826 02       		.uleb128 0x2
 9683 1827 91       		.byte	0x91
 9684 1828 76       		.sleb128 -10
 9685 1829 00       		.byte	0
 9686 182a 2C       		.uleb128 0x2c
 9687 182b 920C0000 		.4byte	.LASF281
 9688 182f 07       		.byte	0x7
 9689 1830 5404     		.2byte	0x454
 9690 1832 48120000 		.4byte	.LFB113
 9691 1836 36000000 		.4byte	.LFE113-.LFB113
 9692 183a 01       		.uleb128 0x1
 9693 183b 9C       		.byte	0x9c
 9694 183c 6E180000 		.4byte	0x186e
 9695 1840 29       		.uleb128 0x29
 9696 1841 DA0E0000 		.4byte	.LASF214
 9697 1845 01       		.byte	0x1
 9698 1846 0E07     		.2byte	0x70e
 9699 1848 450E0000 		.4byte	0xe45
 9700 184c 02       		.uleb128 0x2
 9701 184d 91       		.byte	0x91
ARM GAS  /tmp/ccNus05k.s 			page 223


 9702 184e 6C       		.sleb128 -20
 9703 184f 29       		.uleb128 0x29
 9704 1850 9E0D0000 		.4byte	.LASF70
 9705 1854 01       		.byte	0x1
 9706 1855 0E07     		.2byte	0x70e
 9707 1857 B8000000 		.4byte	0xb8
 9708 185b 02       		.uleb128 0x2
 9709 185c 91       		.byte	0x91
 9710 185d 6A       		.sleb128 -22
 9711 185e 2A       		.uleb128 0x2a
 9712 185f A1100000 		.4byte	.LASF216
 9713 1863 01       		.byte	0x1
 9714 1864 1007     		.2byte	0x710
 9715 1866 B8000000 		.4byte	0xb8
 9716 186a 02       		.uleb128 0x2
 9717 186b 91       		.byte	0x91
 9718 186c 76       		.sleb128 -10
 9719 186d 00       		.byte	0
 9720 186e 2C       		.uleb128 0x2c
 9721 186f E10B0000 		.4byte	.LASF282
 9722 1873 07       		.byte	0x7
 9723 1874 5304     		.2byte	0x453
 9724 1876 0E120000 		.4byte	.LFB112
 9725 187a 3A000000 		.4byte	.LFE112-.LFB112
 9726 187e 01       		.uleb128 0x1
 9727 187f 9C       		.byte	0x9c
 9728 1880 B2180000 		.4byte	0x18b2
 9729 1884 29       		.uleb128 0x29
 9730 1885 DA0E0000 		.4byte	.LASF214
 9731 1889 01       		.byte	0x1
 9732 188a F606     		.2byte	0x6f6
 9733 188c 450E0000 		.4byte	0xe45
 9734 1890 02       		.uleb128 0x2
 9735 1891 91       		.byte	0x91
 9736 1892 6C       		.sleb128 -20
 9737 1893 29       		.uleb128 0x29
 9738 1894 4F110000 		.4byte	.LASF283
 9739 1898 01       		.byte	0x1
 9740 1899 F606     		.2byte	0x6f6
 9741 189b B8000000 		.4byte	0xb8
 9742 189f 02       		.uleb128 0x2
 9743 18a0 91       		.byte	0x91
 9744 18a1 6A       		.sleb128 -22
 9745 18a2 2A       		.uleb128 0x2a
 9746 18a3 4E010000 		.4byte	.LASF215
 9747 18a7 01       		.byte	0x1
 9748 18a8 F806     		.2byte	0x6f8
 9749 18aa B8000000 		.4byte	0xb8
 9750 18ae 02       		.uleb128 0x2
 9751 18af 91       		.byte	0x91
 9752 18b0 76       		.sleb128 -10
 9753 18b1 00       		.byte	0
 9754 18b2 2C       		.uleb128 0x2c
 9755 18b3 C1020000 		.4byte	.LASF284
 9756 18b7 07       		.byte	0x7
 9757 18b8 5204     		.2byte	0x452
 9758 18ba D8110000 		.4byte	.LFB111
ARM GAS  /tmp/ccNus05k.s 			page 224


 9759 18be 36000000 		.4byte	.LFE111-.LFB111
 9760 18c2 01       		.uleb128 0x1
 9761 18c3 9C       		.byte	0x9c
 9762 18c4 F6180000 		.4byte	0x18f6
 9763 18c8 29       		.uleb128 0x29
 9764 18c9 DA0E0000 		.4byte	.LASF214
 9765 18cd 01       		.byte	0x1
 9766 18ce DE06     		.2byte	0x6de
 9767 18d0 450E0000 		.4byte	0xe45
 9768 18d4 02       		.uleb128 0x2
 9769 18d5 91       		.byte	0x91
 9770 18d6 6C       		.sleb128 -20
 9771 18d7 29       		.uleb128 0x29
 9772 18d8 4F110000 		.4byte	.LASF283
 9773 18dc 01       		.byte	0x1
 9774 18dd DE06     		.2byte	0x6de
 9775 18df B8000000 		.4byte	0xb8
 9776 18e3 02       		.uleb128 0x2
 9777 18e4 91       		.byte	0x91
 9778 18e5 6A       		.sleb128 -22
 9779 18e6 2A       		.uleb128 0x2a
 9780 18e7 4E010000 		.4byte	.LASF215
 9781 18eb 01       		.byte	0x1
 9782 18ec E006     		.2byte	0x6e0
 9783 18ee B8000000 		.4byte	0xb8
 9784 18f2 02       		.uleb128 0x2
 9785 18f3 91       		.byte	0x91
 9786 18f4 76       		.sleb128 -10
 9787 18f5 00       		.byte	0
 9788 18f6 2C       		.uleb128 0x2c
 9789 18f7 A50B0000 		.4byte	.LASF285
 9790 18fb 07       		.byte	0x7
 9791 18fc 5104     		.2byte	0x451
 9792 18fe 9E110000 		.4byte	.LFB110
 9793 1902 3A000000 		.4byte	.LFE110-.LFB110
 9794 1906 01       		.uleb128 0x1
 9795 1907 9C       		.byte	0x9c
 9796 1908 3A190000 		.4byte	0x193a
 9797 190c 29       		.uleb128 0x29
 9798 190d DA0E0000 		.4byte	.LASF214
 9799 1911 01       		.byte	0x1
 9800 1912 C606     		.2byte	0x6c6
 9801 1914 450E0000 		.4byte	0xe45
 9802 1918 02       		.uleb128 0x2
 9803 1919 91       		.byte	0x91
 9804 191a 6C       		.sleb128 -20
 9805 191b 29       		.uleb128 0x29
 9806 191c 4F110000 		.4byte	.LASF283
 9807 1920 01       		.byte	0x1
 9808 1921 C606     		.2byte	0x6c6
 9809 1923 B8000000 		.4byte	0xb8
 9810 1927 02       		.uleb128 0x2
 9811 1928 91       		.byte	0x91
 9812 1929 6A       		.sleb128 -22
 9813 192a 2A       		.uleb128 0x2a
 9814 192b 45010000 		.4byte	.LASF220
 9815 192f 01       		.byte	0x1
ARM GAS  /tmp/ccNus05k.s 			page 225


 9816 1930 C806     		.2byte	0x6c8
 9817 1932 B8000000 		.4byte	0xb8
 9818 1936 02       		.uleb128 0x2
 9819 1937 91       		.byte	0x91
 9820 1938 76       		.sleb128 -10
 9821 1939 00       		.byte	0
 9822 193a 2C       		.uleb128 0x2c
 9823 193b 82020000 		.4byte	.LASF286
 9824 193f 07       		.byte	0x7
 9825 1940 5004     		.2byte	0x450
 9826 1942 68110000 		.4byte	.LFB109
 9827 1946 36000000 		.4byte	.LFE109-.LFB109
 9828 194a 01       		.uleb128 0x1
 9829 194b 9C       		.byte	0x9c
 9830 194c 7E190000 		.4byte	0x197e
 9831 1950 29       		.uleb128 0x29
 9832 1951 DA0E0000 		.4byte	.LASF214
 9833 1955 01       		.byte	0x1
 9834 1956 AC06     		.2byte	0x6ac
 9835 1958 450E0000 		.4byte	0xe45
 9836 195c 02       		.uleb128 0x2
 9837 195d 91       		.byte	0x91
 9838 195e 6C       		.sleb128 -20
 9839 195f 29       		.uleb128 0x29
 9840 1960 4F110000 		.4byte	.LASF283
 9841 1964 01       		.byte	0x1
 9842 1965 AC06     		.2byte	0x6ac
 9843 1967 B8000000 		.4byte	0xb8
 9844 196b 02       		.uleb128 0x2
 9845 196c 91       		.byte	0x91
 9846 196d 6A       		.sleb128 -22
 9847 196e 2A       		.uleb128 0x2a
 9848 196f 45010000 		.4byte	.LASF220
 9849 1973 01       		.byte	0x1
 9850 1974 AE06     		.2byte	0x6ae
 9851 1976 B8000000 		.4byte	0xb8
 9852 197a 02       		.uleb128 0x2
 9853 197b 91       		.byte	0x91
 9854 197c 76       		.sleb128 -10
 9855 197d 00       		.byte	0
 9856 197e 2C       		.uleb128 0x2c
 9857 197f 48080000 		.4byte	.LASF287
 9858 1983 07       		.byte	0x7
 9859 1984 4F04     		.2byte	0x44f
 9860 1986 2E110000 		.4byte	.LFB108
 9861 198a 3A000000 		.4byte	.LFE108-.LFB108
 9862 198e 01       		.uleb128 0x1
 9863 198f 9C       		.byte	0x9c
 9864 1990 C2190000 		.4byte	0x19c2
 9865 1994 29       		.uleb128 0x29
 9866 1995 DA0E0000 		.4byte	.LASF214
 9867 1999 01       		.byte	0x1
 9868 199a 9306     		.2byte	0x693
 9869 199c 450E0000 		.4byte	0xe45
 9870 19a0 02       		.uleb128 0x2
 9871 19a1 91       		.byte	0x91
 9872 19a2 6C       		.sleb128 -20
ARM GAS  /tmp/ccNus05k.s 			page 226


 9873 19a3 29       		.uleb128 0x29
 9874 19a4 C6060000 		.4byte	.LASF288
 9875 19a8 01       		.byte	0x1
 9876 19a9 9306     		.2byte	0x693
 9877 19ab B8000000 		.4byte	0xb8
 9878 19af 02       		.uleb128 0x2
 9879 19b0 91       		.byte	0x91
 9880 19b1 6A       		.sleb128 -22
 9881 19b2 2A       		.uleb128 0x2a
 9882 19b3 4E010000 		.4byte	.LASF215
 9883 19b7 01       		.byte	0x1
 9884 19b8 9506     		.2byte	0x695
 9885 19ba B8000000 		.4byte	0xb8
 9886 19be 02       		.uleb128 0x2
 9887 19bf 91       		.byte	0x91
 9888 19c0 76       		.sleb128 -10
 9889 19c1 00       		.byte	0
 9890 19c2 2C       		.uleb128 0x2c
 9891 19c3 C1080000 		.4byte	.LASF289
 9892 19c7 07       		.byte	0x7
 9893 19c8 4E04     		.2byte	0x44e
 9894 19ca F8100000 		.4byte	.LFB107
 9895 19ce 36000000 		.4byte	.LFE107-.LFB107
 9896 19d2 01       		.uleb128 0x1
 9897 19d3 9C       		.byte	0x9c
 9898 19d4 061A0000 		.4byte	0x1a06
 9899 19d8 29       		.uleb128 0x29
 9900 19d9 DA0E0000 		.4byte	.LASF214
 9901 19dd 01       		.byte	0x1
 9902 19de 7A06     		.2byte	0x67a
 9903 19e0 450E0000 		.4byte	0xe45
 9904 19e4 02       		.uleb128 0x2
 9905 19e5 91       		.byte	0x91
 9906 19e6 6C       		.sleb128 -20
 9907 19e7 29       		.uleb128 0x29
 9908 19e8 C6060000 		.4byte	.LASF288
 9909 19ec 01       		.byte	0x1
 9910 19ed 7A06     		.2byte	0x67a
 9911 19ef B8000000 		.4byte	0xb8
 9912 19f3 02       		.uleb128 0x2
 9913 19f4 91       		.byte	0x91
 9914 19f5 6A       		.sleb128 -22
 9915 19f6 2A       		.uleb128 0x2a
 9916 19f7 4E010000 		.4byte	.LASF215
 9917 19fb 01       		.byte	0x1
 9918 19fc 7C06     		.2byte	0x67c
 9919 19fe B8000000 		.4byte	0xb8
 9920 1a02 02       		.uleb128 0x2
 9921 1a03 91       		.byte	0x91
 9922 1a04 76       		.sleb128 -10
 9923 1a05 00       		.byte	0
 9924 1a06 2C       		.uleb128 0x2c
 9925 1a07 26090000 		.4byte	.LASF290
 9926 1a0b 07       		.byte	0x7
 9927 1a0c 4D04     		.2byte	0x44d
 9928 1a0e BE100000 		.4byte	.LFB106
 9929 1a12 3A000000 		.4byte	.LFE106-.LFB106
ARM GAS  /tmp/ccNus05k.s 			page 227


 9930 1a16 01       		.uleb128 0x1
 9931 1a17 9C       		.byte	0x9c
 9932 1a18 4A1A0000 		.4byte	0x1a4a
 9933 1a1c 29       		.uleb128 0x29
 9934 1a1d DA0E0000 		.4byte	.LASF214
 9935 1a21 01       		.byte	0x1
 9936 1a22 6106     		.2byte	0x661
 9937 1a24 450E0000 		.4byte	0xe45
 9938 1a28 02       		.uleb128 0x2
 9939 1a29 91       		.byte	0x91
 9940 1a2a 6C       		.sleb128 -20
 9941 1a2b 29       		.uleb128 0x29
 9942 1a2c C6060000 		.4byte	.LASF288
 9943 1a30 01       		.byte	0x1
 9944 1a31 6106     		.2byte	0x661
 9945 1a33 B8000000 		.4byte	0xb8
 9946 1a37 02       		.uleb128 0x2
 9947 1a38 91       		.byte	0x91
 9948 1a39 6A       		.sleb128 -22
 9949 1a3a 2A       		.uleb128 0x2a
 9950 1a3b 45010000 		.4byte	.LASF220
 9951 1a3f 01       		.byte	0x1
 9952 1a40 6306     		.2byte	0x663
 9953 1a42 B8000000 		.4byte	0xb8
 9954 1a46 02       		.uleb128 0x2
 9955 1a47 91       		.byte	0x91
 9956 1a48 76       		.sleb128 -10
 9957 1a49 00       		.byte	0
 9958 1a4a 2C       		.uleb128 0x2c
 9959 1a4b FD030000 		.4byte	.LASF291
 9960 1a4f 07       		.byte	0x7
 9961 1a50 4C04     		.2byte	0x44c
 9962 1a52 88100000 		.4byte	.LFB105
 9963 1a56 36000000 		.4byte	.LFE105-.LFB105
 9964 1a5a 01       		.uleb128 0x1
 9965 1a5b 9C       		.byte	0x9c
 9966 1a5c 8E1A0000 		.4byte	0x1a8e
 9967 1a60 29       		.uleb128 0x29
 9968 1a61 DA0E0000 		.4byte	.LASF214
 9969 1a65 01       		.byte	0x1
 9970 1a66 4706     		.2byte	0x647
 9971 1a68 450E0000 		.4byte	0xe45
 9972 1a6c 02       		.uleb128 0x2
 9973 1a6d 91       		.byte	0x91
 9974 1a6e 6C       		.sleb128 -20
 9975 1a6f 29       		.uleb128 0x29
 9976 1a70 C6060000 		.4byte	.LASF288
 9977 1a74 01       		.byte	0x1
 9978 1a75 4706     		.2byte	0x647
 9979 1a77 B8000000 		.4byte	0xb8
 9980 1a7b 02       		.uleb128 0x2
 9981 1a7c 91       		.byte	0x91
 9982 1a7d 6A       		.sleb128 -22
 9983 1a7e 2A       		.uleb128 0x2a
 9984 1a7f 45010000 		.4byte	.LASF220
 9985 1a83 01       		.byte	0x1
 9986 1a84 4906     		.2byte	0x649
ARM GAS  /tmp/ccNus05k.s 			page 228


 9987 1a86 B8000000 		.4byte	0xb8
 9988 1a8a 02       		.uleb128 0x2
 9989 1a8b 91       		.byte	0x91
 9990 1a8c 76       		.sleb128 -10
 9991 1a8d 00       		.byte	0
 9992 1a8e 2C       		.uleb128 0x2c
 9993 1a8f F7080000 		.4byte	.LASF292
 9994 1a93 07       		.byte	0x7
 9995 1a94 4B04     		.2byte	0x44b
 9996 1a96 4E100000 		.4byte	.LFB104
 9997 1a9a 3A000000 		.4byte	.LFE104-.LFB104
 9998 1a9e 01       		.uleb128 0x1
 9999 1a9f 9C       		.byte	0x9c
 10000 1aa0 D21A0000 		.4byte	0x1ad2
 10001 1aa4 29       		.uleb128 0x29
 10002 1aa5 DA0E0000 		.4byte	.LASF214
 10003 1aa9 01       		.byte	0x1
 10004 1aaa 2F06     		.2byte	0x62f
 10005 1aac 450E0000 		.4byte	0xe45
 10006 1ab0 02       		.uleb128 0x2
 10007 1ab1 91       		.byte	0x91
 10008 1ab2 6C       		.sleb128 -20
 10009 1ab3 29       		.uleb128 0x29
 10010 1ab4 5A0C0000 		.4byte	.LASF293
 10011 1ab8 01       		.byte	0x1
 10012 1ab9 2F06     		.2byte	0x62f
 10013 1abb B8000000 		.4byte	0xb8
 10014 1abf 02       		.uleb128 0x2
 10015 1ac0 91       		.byte	0x91
 10016 1ac1 6A       		.sleb128 -22
 10017 1ac2 2A       		.uleb128 0x2a
 10018 1ac3 4E010000 		.4byte	.LASF215
 10019 1ac7 01       		.byte	0x1
 10020 1ac8 3106     		.2byte	0x631
 10021 1aca B8000000 		.4byte	0xb8
 10022 1ace 02       		.uleb128 0x2
 10023 1acf 91       		.byte	0x91
 10024 1ad0 76       		.sleb128 -10
 10025 1ad1 00       		.byte	0
 10026 1ad2 2C       		.uleb128 0x2c
 10027 1ad3 890D0000 		.4byte	.LASF294
 10028 1ad7 07       		.byte	0x7
 10029 1ad8 4A04     		.2byte	0x44a
 10030 1ada 18100000 		.4byte	.LFB103
 10031 1ade 36000000 		.4byte	.LFE103-.LFB103
 10032 1ae2 01       		.uleb128 0x1
 10033 1ae3 9C       		.byte	0x9c
 10034 1ae4 161B0000 		.4byte	0x1b16
 10035 1ae8 29       		.uleb128 0x29
 10036 1ae9 DA0E0000 		.4byte	.LASF214
 10037 1aed 01       		.byte	0x1
 10038 1aee 1706     		.2byte	0x617
 10039 1af0 450E0000 		.4byte	0xe45
 10040 1af4 02       		.uleb128 0x2
 10041 1af5 91       		.byte	0x91
 10042 1af6 6C       		.sleb128 -20
 10043 1af7 29       		.uleb128 0x29
ARM GAS  /tmp/ccNus05k.s 			page 229


 10044 1af8 5A0C0000 		.4byte	.LASF293
 10045 1afc 01       		.byte	0x1
 10046 1afd 1706     		.2byte	0x617
 10047 1aff B8000000 		.4byte	0xb8
 10048 1b03 02       		.uleb128 0x2
 10049 1b04 91       		.byte	0x91
 10050 1b05 6A       		.sleb128 -22
 10051 1b06 2A       		.uleb128 0x2a
 10052 1b07 4E010000 		.4byte	.LASF215
 10053 1b0b 01       		.byte	0x1
 10054 1b0c 1906     		.2byte	0x619
 10055 1b0e B8000000 		.4byte	0xb8
 10056 1b12 02       		.uleb128 0x2
 10057 1b13 91       		.byte	0x91
 10058 1b14 76       		.sleb128 -10
 10059 1b15 00       		.byte	0
 10060 1b16 2C       		.uleb128 0x2c
 10061 1b17 9A110000 		.4byte	.LASF295
 10062 1b1b 07       		.byte	0x7
 10063 1b1c 4904     		.2byte	0x449
 10064 1b1e DE0F0000 		.4byte	.LFB102
 10065 1b22 3A000000 		.4byte	.LFE102-.LFB102
 10066 1b26 01       		.uleb128 0x1
 10067 1b27 9C       		.byte	0x9c
 10068 1b28 5A1B0000 		.4byte	0x1b5a
 10069 1b2c 29       		.uleb128 0x29
 10070 1b2d DA0E0000 		.4byte	.LASF214
 10071 1b31 01       		.byte	0x1
 10072 1b32 FF05     		.2byte	0x5ff
 10073 1b34 450E0000 		.4byte	0xe45
 10074 1b38 02       		.uleb128 0x2
 10075 1b39 91       		.byte	0x91
 10076 1b3a 6C       		.sleb128 -20
 10077 1b3b 29       		.uleb128 0x29
 10078 1b3c 5A0C0000 		.4byte	.LASF293
 10079 1b40 01       		.byte	0x1
 10080 1b41 FF05     		.2byte	0x5ff
 10081 1b43 B8000000 		.4byte	0xb8
 10082 1b47 02       		.uleb128 0x2
 10083 1b48 91       		.byte	0x91
 10084 1b49 6A       		.sleb128 -22
 10085 1b4a 2A       		.uleb128 0x2a
 10086 1b4b 45010000 		.4byte	.LASF220
 10087 1b4f 01       		.byte	0x1
 10088 1b50 0106     		.2byte	0x601
 10089 1b52 B8000000 		.4byte	0xb8
 10090 1b56 02       		.uleb128 0x2
 10091 1b57 91       		.byte	0x91
 10092 1b58 76       		.sleb128 -10
 10093 1b59 00       		.byte	0
 10094 1b5a 2C       		.uleb128 0x2c
 10095 1b5b B9030000 		.4byte	.LASF296
 10096 1b5f 07       		.byte	0x7
 10097 1b60 4804     		.2byte	0x448
 10098 1b62 A80F0000 		.4byte	.LFB101
 10099 1b66 36000000 		.4byte	.LFE101-.LFB101
 10100 1b6a 01       		.uleb128 0x1
ARM GAS  /tmp/ccNus05k.s 			page 230


 10101 1b6b 9C       		.byte	0x9c
 10102 1b6c 9E1B0000 		.4byte	0x1b9e
 10103 1b70 29       		.uleb128 0x29
 10104 1b71 DA0E0000 		.4byte	.LASF214
 10105 1b75 01       		.byte	0x1
 10106 1b76 E605     		.2byte	0x5e6
 10107 1b78 450E0000 		.4byte	0xe45
 10108 1b7c 02       		.uleb128 0x2
 10109 1b7d 91       		.byte	0x91
 10110 1b7e 6C       		.sleb128 -20
 10111 1b7f 29       		.uleb128 0x29
 10112 1b80 5A0C0000 		.4byte	.LASF293
 10113 1b84 01       		.byte	0x1
 10114 1b85 E605     		.2byte	0x5e6
 10115 1b87 B8000000 		.4byte	0xb8
 10116 1b8b 02       		.uleb128 0x2
 10117 1b8c 91       		.byte	0x91
 10118 1b8d 6A       		.sleb128 -22
 10119 1b8e 2A       		.uleb128 0x2a
 10120 1b8f 45010000 		.4byte	.LASF220
 10121 1b93 01       		.byte	0x1
 10122 1b94 E805     		.2byte	0x5e8
 10123 1b96 B8000000 		.4byte	0xb8
 10124 1b9a 02       		.uleb128 0x2
 10125 1b9b 91       		.byte	0x91
 10126 1b9c 76       		.sleb128 -10
 10127 1b9d 00       		.byte	0
 10128 1b9e 2C       		.uleb128 0x2c
 10129 1b9f 84100000 		.4byte	.LASF297
 10130 1ba3 07       		.byte	0x7
 10131 1ba4 4704     		.2byte	0x447
 10132 1ba6 6A0F0000 		.4byte	.LFB100
 10133 1baa 3E000000 		.4byte	.LFE100-.LFB100
 10134 1bae 01       		.uleb128 0x1
 10135 1baf 9C       		.byte	0x9c
 10136 1bb0 D31B0000 		.4byte	0x1bd3
 10137 1bb4 29       		.uleb128 0x29
 10138 1bb5 DA0E0000 		.4byte	.LASF214
 10139 1bb9 01       		.byte	0x1
 10140 1bba CC05     		.2byte	0x5cc
 10141 1bbc 450E0000 		.4byte	0xe45
 10142 1bc0 02       		.uleb128 0x2
 10143 1bc1 91       		.byte	0x91
 10144 1bc2 74       		.sleb128 -12
 10145 1bc3 29       		.uleb128 0x29
 10146 1bc4 590A0000 		.4byte	.LASF265
 10147 1bc8 01       		.byte	0x1
 10148 1bc9 CC05     		.2byte	0x5cc
 10149 1bcb 4D010000 		.4byte	0x14d
 10150 1bcf 02       		.uleb128 0x2
 10151 1bd0 91       		.byte	0x91
 10152 1bd1 73       		.sleb128 -13
 10153 1bd2 00       		.byte	0
 10154 1bd3 2C       		.uleb128 0x2c
 10155 1bd4 4F030000 		.4byte	.LASF298
 10156 1bd8 07       		.byte	0x7
 10157 1bd9 4604     		.2byte	0x446
ARM GAS  /tmp/ccNus05k.s 			page 231


 10158 1bdb 2C0F0000 		.4byte	.LFB99
 10159 1bdf 3E000000 		.4byte	.LFE99-.LFB99
 10160 1be3 01       		.uleb128 0x1
 10161 1be4 9C       		.byte	0x9c
 10162 1be5 081C0000 		.4byte	0x1c08
 10163 1be9 29       		.uleb128 0x29
 10164 1bea DA0E0000 		.4byte	.LASF214
 10165 1bee 01       		.byte	0x1
 10166 1bef B305     		.2byte	0x5b3
 10167 1bf1 450E0000 		.4byte	0xe45
 10168 1bf5 02       		.uleb128 0x2
 10169 1bf6 91       		.byte	0x91
 10170 1bf7 74       		.sleb128 -12
 10171 1bf8 29       		.uleb128 0x29
 10172 1bf9 590A0000 		.4byte	.LASF265
 10173 1bfd 01       		.byte	0x1
 10174 1bfe B305     		.2byte	0x5b3
 10175 1c00 4D010000 		.4byte	0x14d
 10176 1c04 02       		.uleb128 0x2
 10177 1c05 91       		.byte	0x91
 10178 1c06 73       		.sleb128 -13
 10179 1c07 00       		.byte	0
 10180 1c08 2C       		.uleb128 0x2c
 10181 1c09 15020000 		.4byte	.LASF299
 10182 1c0d 07       		.byte	0x7
 10183 1c0e 4504     		.2byte	0x445
 10184 1c10 EE0E0000 		.4byte	.LFB98
 10185 1c14 3E000000 		.4byte	.LFE98-.LFB98
 10186 1c18 01       		.uleb128 0x1
 10187 1c19 9C       		.byte	0x9c
 10188 1c1a 3D1C0000 		.4byte	0x1c3d
 10189 1c1e 29       		.uleb128 0x29
 10190 1c1f DA0E0000 		.4byte	.LASF214
 10191 1c23 01       		.byte	0x1
 10192 1c24 9A05     		.2byte	0x59a
 10193 1c26 450E0000 		.4byte	0xe45
 10194 1c2a 02       		.uleb128 0x2
 10195 1c2b 91       		.byte	0x91
 10196 1c2c 74       		.sleb128 -12
 10197 1c2d 29       		.uleb128 0x29
 10198 1c2e 590A0000 		.4byte	.LASF265
 10199 1c32 01       		.byte	0x1
 10200 1c33 9A05     		.2byte	0x59a
 10201 1c35 4D010000 		.4byte	0x14d
 10202 1c39 02       		.uleb128 0x2
 10203 1c3a 91       		.byte	0x91
 10204 1c3b 73       		.sleb128 -13
 10205 1c3c 00       		.byte	0
 10206 1c3d 2C       		.uleb128 0x2c
 10207 1c3e C5090000 		.4byte	.LASF300
 10208 1c42 07       		.byte	0x7
 10209 1c43 4404     		.2byte	0x444
 10210 1c45 B00E0000 		.4byte	.LFB97
 10211 1c49 3E000000 		.4byte	.LFE97-.LFB97
 10212 1c4d 01       		.uleb128 0x1
 10213 1c4e 9C       		.byte	0x9c
 10214 1c4f 721C0000 		.4byte	0x1c72
ARM GAS  /tmp/ccNus05k.s 			page 232


 10215 1c53 29       		.uleb128 0x29
 10216 1c54 DA0E0000 		.4byte	.LASF214
 10217 1c58 01       		.byte	0x1
 10218 1c59 8205     		.2byte	0x582
 10219 1c5b 450E0000 		.4byte	0xe45
 10220 1c5f 02       		.uleb128 0x2
 10221 1c60 91       		.byte	0x91
 10222 1c61 74       		.sleb128 -12
 10223 1c62 29       		.uleb128 0x29
 10224 1c63 590A0000 		.4byte	.LASF265
 10225 1c67 01       		.byte	0x1
 10226 1c68 8205     		.2byte	0x582
 10227 1c6a 4D010000 		.4byte	0x14d
 10228 1c6e 02       		.uleb128 0x2
 10229 1c6f 91       		.byte	0x91
 10230 1c70 73       		.sleb128 -13
 10231 1c71 00       		.byte	0
 10232 1c72 2C       		.uleb128 0x2c
 10233 1c73 28030000 		.4byte	.LASF301
 10234 1c77 07       		.byte	0x7
 10235 1c78 4304     		.2byte	0x443
 10236 1c7a 760E0000 		.4byte	.LFB96
 10237 1c7e 3A000000 		.4byte	.LFE96-.LFB96
 10238 1c82 01       		.uleb128 0x1
 10239 1c83 9C       		.byte	0x9c
 10240 1c84 B61C0000 		.4byte	0x1cb6
 10241 1c88 29       		.uleb128 0x29
 10242 1c89 DA0E0000 		.4byte	.LASF214
 10243 1c8d 01       		.byte	0x1
 10244 1c8e 6C05     		.2byte	0x56c
 10245 1c90 450E0000 		.4byte	0xe45
 10246 1c94 02       		.uleb128 0x2
 10247 1c95 91       		.byte	0x91
 10248 1c96 6C       		.sleb128 -20
 10249 1c97 29       		.uleb128 0x29
 10250 1c98 720B0000 		.4byte	.LASF302
 10251 1c9c 01       		.byte	0x1
 10252 1c9d 6C05     		.2byte	0x56c
 10253 1c9f B8000000 		.4byte	0xb8
 10254 1ca3 02       		.uleb128 0x2
 10255 1ca4 91       		.byte	0x91
 10256 1ca5 6A       		.sleb128 -22
 10257 1ca6 2A       		.uleb128 0x2a
 10258 1ca7 4E010000 		.4byte	.LASF215
 10259 1cab 01       		.byte	0x1
 10260 1cac 6E05     		.2byte	0x56e
 10261 1cae B8000000 		.4byte	0xb8
 10262 1cb2 02       		.uleb128 0x2
 10263 1cb3 91       		.byte	0x91
 10264 1cb4 76       		.sleb128 -10
 10265 1cb5 00       		.byte	0
 10266 1cb6 2C       		.uleb128 0x2c
 10267 1cb7 01020000 		.4byte	.LASF303
 10268 1cbb 07       		.byte	0x7
 10269 1cbc 4204     		.2byte	0x442
 10270 1cbe 400E0000 		.4byte	.LFB95
 10271 1cc2 36000000 		.4byte	.LFE95-.LFB95
ARM GAS  /tmp/ccNus05k.s 			page 233


 10272 1cc6 01       		.uleb128 0x1
 10273 1cc7 9C       		.byte	0x9c
 10274 1cc8 FA1C0000 		.4byte	0x1cfa
 10275 1ccc 29       		.uleb128 0x29
 10276 1ccd DA0E0000 		.4byte	.LASF214
 10277 1cd1 01       		.byte	0x1
 10278 1cd2 5405     		.2byte	0x554
 10279 1cd4 450E0000 		.4byte	0xe45
 10280 1cd8 02       		.uleb128 0x2
 10281 1cd9 91       		.byte	0x91
 10282 1cda 6C       		.sleb128 -20
 10283 1cdb 29       		.uleb128 0x29
 10284 1cdc 720B0000 		.4byte	.LASF302
 10285 1ce0 01       		.byte	0x1
 10286 1ce1 5405     		.2byte	0x554
 10287 1ce3 B8000000 		.4byte	0xb8
 10288 1ce7 02       		.uleb128 0x2
 10289 1ce8 91       		.byte	0x91
 10290 1ce9 6A       		.sleb128 -22
 10291 1cea 2A       		.uleb128 0x2a
 10292 1ceb 4E010000 		.4byte	.LASF215
 10293 1cef 01       		.byte	0x1
 10294 1cf0 5605     		.2byte	0x556
 10295 1cf2 B8000000 		.4byte	0xb8
 10296 1cf6 02       		.uleb128 0x2
 10297 1cf7 91       		.byte	0x91
 10298 1cf8 76       		.sleb128 -10
 10299 1cf9 00       		.byte	0
 10300 1cfa 2C       		.uleb128 0x2c
 10301 1cfb 1D010000 		.4byte	.LASF304
 10302 1cff 07       		.byte	0x7
 10303 1d00 4104     		.2byte	0x441
 10304 1d02 060E0000 		.4byte	.LFB94
 10305 1d06 3A000000 		.4byte	.LFE94-.LFB94
 10306 1d0a 01       		.uleb128 0x1
 10307 1d0b 9C       		.byte	0x9c
 10308 1d0c 3E1D0000 		.4byte	0x1d3e
 10309 1d10 29       		.uleb128 0x29
 10310 1d11 DA0E0000 		.4byte	.LASF214
 10311 1d15 01       		.byte	0x1
 10312 1d16 3C05     		.2byte	0x53c
 10313 1d18 450E0000 		.4byte	0xe45
 10314 1d1c 02       		.uleb128 0x2
 10315 1d1d 91       		.byte	0x91
 10316 1d1e 6C       		.sleb128 -20
 10317 1d1f 29       		.uleb128 0x29
 10318 1d20 720B0000 		.4byte	.LASF302
 10319 1d24 01       		.byte	0x1
 10320 1d25 3C05     		.2byte	0x53c
 10321 1d27 B8000000 		.4byte	0xb8
 10322 1d2b 02       		.uleb128 0x2
 10323 1d2c 91       		.byte	0x91
 10324 1d2d 6A       		.sleb128 -22
 10325 1d2e 2A       		.uleb128 0x2a
 10326 1d2f 45010000 		.4byte	.LASF220
 10327 1d33 01       		.byte	0x1
 10328 1d34 3E05     		.2byte	0x53e
ARM GAS  /tmp/ccNus05k.s 			page 234


 10329 1d36 B8000000 		.4byte	0xb8
 10330 1d3a 02       		.uleb128 0x2
 10331 1d3b 91       		.byte	0x91
 10332 1d3c 76       		.sleb128 -10
 10333 1d3d 00       		.byte	0
 10334 1d3e 2C       		.uleb128 0x2c
 10335 1d3f 11000000 		.4byte	.LASF305
 10336 1d43 07       		.byte	0x7
 10337 1d44 4004     		.2byte	0x440
 10338 1d46 D00D0000 		.4byte	.LFB93
 10339 1d4a 36000000 		.4byte	.LFE93-.LFB93
 10340 1d4e 01       		.uleb128 0x1
 10341 1d4f 9C       		.byte	0x9c
 10342 1d50 821D0000 		.4byte	0x1d82
 10343 1d54 29       		.uleb128 0x29
 10344 1d55 DA0E0000 		.4byte	.LASF214
 10345 1d59 01       		.byte	0x1
 10346 1d5a 2405     		.2byte	0x524
 10347 1d5c 450E0000 		.4byte	0xe45
 10348 1d60 02       		.uleb128 0x2
 10349 1d61 91       		.byte	0x91
 10350 1d62 6C       		.sleb128 -20
 10351 1d63 29       		.uleb128 0x29
 10352 1d64 720B0000 		.4byte	.LASF302
 10353 1d68 01       		.byte	0x1
 10354 1d69 2405     		.2byte	0x524
 10355 1d6b B8000000 		.4byte	0xb8
 10356 1d6f 02       		.uleb128 0x2
 10357 1d70 91       		.byte	0x91
 10358 1d71 6A       		.sleb128 -22
 10359 1d72 2A       		.uleb128 0x2a
 10360 1d73 45010000 		.4byte	.LASF220
 10361 1d77 01       		.byte	0x1
 10362 1d78 2605     		.2byte	0x526
 10363 1d7a B8000000 		.4byte	0xb8
 10364 1d7e 02       		.uleb128 0x2
 10365 1d7f 91       		.byte	0x91
 10366 1d80 76       		.sleb128 -10
 10367 1d81 00       		.byte	0
 10368 1d82 2C       		.uleb128 0x2c
 10369 1d83 AF050000 		.4byte	.LASF306
 10370 1d87 07       		.byte	0x7
 10371 1d88 3E04     		.2byte	0x43e
 10372 1d8a 3A0D0000 		.4byte	.LFB92
 10373 1d8e 96000000 		.4byte	.LFE92-.LFB92
 10374 1d92 01       		.uleb128 0x1
 10375 1d93 9C       		.byte	0x9c
 10376 1d94 021E0000 		.4byte	0x1e02
 10377 1d98 29       		.uleb128 0x29
 10378 1d99 DA0E0000 		.4byte	.LASF214
 10379 1d9d 01       		.byte	0x1
 10380 1d9e F104     		.2byte	0x4f1
 10381 1da0 450E0000 		.4byte	0xe45
 10382 1da4 02       		.uleb128 0x2
 10383 1da5 91       		.byte	0x91
 10384 1da6 6C       		.sleb128 -20
 10385 1da7 29       		.uleb128 0x29
ARM GAS  /tmp/ccNus05k.s 			page 235


 10386 1da8 E9050000 		.4byte	.LASF307
 10387 1dac 01       		.byte	0x1
 10388 1dad F104     		.2byte	0x4f1
 10389 1daf B8000000 		.4byte	0xb8
 10390 1db3 02       		.uleb128 0x2
 10391 1db4 91       		.byte	0x91
 10392 1db5 6A       		.sleb128 -22
 10393 1db6 29       		.uleb128 0x29
 10394 1db7 51120000 		.4byte	.LASF308
 10395 1dbb 01       		.byte	0x1
 10396 1dbc F204     		.2byte	0x4f2
 10397 1dbe B8000000 		.4byte	0xb8
 10398 1dc2 02       		.uleb128 0x2
 10399 1dc3 91       		.byte	0x91
 10400 1dc4 68       		.sleb128 -24
 10401 1dc5 29       		.uleb128 0x29
 10402 1dc6 6D040000 		.4byte	.LASF309
 10403 1dca 01       		.byte	0x1
 10404 1dcb F204     		.2byte	0x4f2
 10405 1dcd B8000000 		.4byte	0xb8
 10406 1dd1 02       		.uleb128 0x2
 10407 1dd2 91       		.byte	0x91
 10408 1dd3 66       		.sleb128 -26
 10409 1dd4 2A       		.uleb128 0x2a
 10410 1dd5 76110000 		.4byte	.LASF310
 10411 1dd9 01       		.byte	0x1
 10412 1dda F404     		.2byte	0x4f4
 10413 1ddc B8000000 		.4byte	0xb8
 10414 1de0 02       		.uleb128 0x2
 10415 1de1 91       		.byte	0x91
 10416 1de2 76       		.sleb128 -10
 10417 1de3 2A       		.uleb128 0x2a
 10418 1de4 45010000 		.4byte	.LASF220
 10419 1de8 01       		.byte	0x1
 10420 1de9 F504     		.2byte	0x4f5
 10421 1deb B8000000 		.4byte	0xb8
 10422 1def 02       		.uleb128 0x2
 10423 1df0 91       		.byte	0x91
 10424 1df1 74       		.sleb128 -12
 10425 1df2 2A       		.uleb128 0x2a
 10426 1df3 A1100000 		.4byte	.LASF216
 10427 1df7 01       		.byte	0x1
 10428 1df8 F604     		.2byte	0x4f6
 10429 1dfa B8000000 		.4byte	0xb8
 10430 1dfe 02       		.uleb128 0x2
 10431 1dff 91       		.byte	0x91
 10432 1e00 72       		.sleb128 -14
 10433 1e01 00       		.byte	0
 10434 1e02 2C       		.uleb128 0x2c
 10435 1e03 57010000 		.4byte	.LASF311
 10436 1e07 07       		.byte	0x7
 10437 1e08 3D04     		.2byte	0x43d
 10438 1e0a 040D0000 		.4byte	.LFB91
 10439 1e0e 36000000 		.4byte	.LFE91-.LFB91
 10440 1e12 01       		.uleb128 0x1
 10441 1e13 9C       		.byte	0x9c
 10442 1e14 461E0000 		.4byte	0x1e46
ARM GAS  /tmp/ccNus05k.s 			page 236


 10443 1e18 29       		.uleb128 0x29
 10444 1e19 DA0E0000 		.4byte	.LASF214
 10445 1e1d 01       		.byte	0x1
 10446 1e1e CE04     		.2byte	0x4ce
 10447 1e20 450E0000 		.4byte	0xe45
 10448 1e24 02       		.uleb128 0x2
 10449 1e25 91       		.byte	0x91
 10450 1e26 6C       		.sleb128 -20
 10451 1e27 29       		.uleb128 0x29
 10452 1e28 70090000 		.4byte	.LASF312
 10453 1e2c 01       		.byte	0x1
 10454 1e2d CE04     		.2byte	0x4ce
 10455 1e2f B8000000 		.4byte	0xb8
 10456 1e33 02       		.uleb128 0x2
 10457 1e34 91       		.byte	0x91
 10458 1e35 6A       		.sleb128 -22
 10459 1e36 2A       		.uleb128 0x2a
 10460 1e37 76110000 		.4byte	.LASF310
 10461 1e3b 01       		.byte	0x1
 10462 1e3c D004     		.2byte	0x4d0
 10463 1e3e B8000000 		.4byte	0xb8
 10464 1e42 02       		.uleb128 0x2
 10465 1e43 91       		.byte	0x91
 10466 1e44 76       		.sleb128 -10
 10467 1e45 00       		.byte	0
 10468 1e46 2C       		.uleb128 0x2c
 10469 1e47 28040000 		.4byte	.LASF313
 10470 1e4b 07       		.byte	0x7
 10471 1e4c 3C04     		.2byte	0x43c
 10472 1e4e CE0C0000 		.4byte	.LFB90
 10473 1e52 36000000 		.4byte	.LFE90-.LFB90
 10474 1e56 01       		.uleb128 0x1
 10475 1e57 9C       		.byte	0x9c
 10476 1e58 8A1E0000 		.4byte	0x1e8a
 10477 1e5c 29       		.uleb128 0x29
 10478 1e5d DA0E0000 		.4byte	.LASF214
 10479 1e61 01       		.byte	0x1
 10480 1e62 B004     		.2byte	0x4b0
 10481 1e64 450E0000 		.4byte	0xe45
 10482 1e68 02       		.uleb128 0x2
 10483 1e69 91       		.byte	0x91
 10484 1e6a 6C       		.sleb128 -20
 10485 1e6b 29       		.uleb128 0x29
 10486 1e6c 8B0B0000 		.4byte	.LASF61
 10487 1e70 01       		.byte	0x1
 10488 1e71 B004     		.2byte	0x4b0
 10489 1e73 B8000000 		.4byte	0xb8
 10490 1e77 02       		.uleb128 0x2
 10491 1e78 91       		.byte	0x91
 10492 1e79 6A       		.sleb128 -22
 10493 1e7a 2A       		.uleb128 0x2a
 10494 1e7b 360C0000 		.4byte	.LASF314
 10495 1e7f 01       		.byte	0x1
 10496 1e80 B204     		.2byte	0x4b2
 10497 1e82 B8000000 		.4byte	0xb8
 10498 1e86 02       		.uleb128 0x2
 10499 1e87 91       		.byte	0x91
ARM GAS  /tmp/ccNus05k.s 			page 237


 10500 1e88 76       		.sleb128 -10
 10501 1e89 00       		.byte	0
 10502 1e8a 2C       		.uleb128 0x2c
 10503 1e8b 130A0000 		.4byte	.LASF315
 10504 1e8f 07       		.byte	0x7
 10505 1e90 3B04     		.2byte	0x43b
 10506 1e92 A80C0000 		.4byte	.LFB89
 10507 1e96 26000000 		.4byte	.LFE89-.LFB89
 10508 1e9a 01       		.uleb128 0x1
 10509 1e9b 9C       		.byte	0x9c
 10510 1e9c CE1E0000 		.4byte	0x1ece
 10511 1ea0 29       		.uleb128 0x29
 10512 1ea1 DA0E0000 		.4byte	.LASF214
 10513 1ea5 01       		.byte	0x1
 10514 1ea6 9904     		.2byte	0x499
 10515 1ea8 450E0000 		.4byte	0xe45
 10516 1eac 02       		.uleb128 0x2
 10517 1ead 91       		.byte	0x91
 10518 1eae 74       		.sleb128 -12
 10519 1eaf 29       		.uleb128 0x29
 10520 1eb0 52060000 		.4byte	.LASF316
 10521 1eb4 01       		.byte	0x1
 10522 1eb5 9904     		.2byte	0x499
 10523 1eb7 B8000000 		.4byte	0xb8
 10524 1ebb 02       		.uleb128 0x2
 10525 1ebc 91       		.byte	0x91
 10526 1ebd 72       		.sleb128 -14
 10527 1ebe 29       		.uleb128 0x29
 10528 1ebf 7A0A0000 		.4byte	.LASF317
 10529 1ec3 01       		.byte	0x1
 10530 1ec4 9904     		.2byte	0x499
 10531 1ec6 B8000000 		.4byte	0xb8
 10532 1eca 02       		.uleb128 0x2
 10533 1ecb 91       		.byte	0x91
 10534 1ecc 70       		.sleb128 -16
 10535 1ecd 00       		.byte	0
 10536 1ece 2C       		.uleb128 0x2c
 10537 1ecf A0080000 		.4byte	.LASF318
 10538 1ed3 07       		.byte	0x7
 10539 1ed4 3904     		.2byte	0x439
 10540 1ed6 560C0000 		.4byte	.LFB88
 10541 1eda 52000000 		.4byte	.LFE88-.LFB88
 10542 1ede 01       		.uleb128 0x1
 10543 1edf 9C       		.byte	0x9c
 10544 1ee0 301F0000 		.4byte	0x1f30
 10545 1ee4 29       		.uleb128 0x29
 10546 1ee5 DA0E0000 		.4byte	.LASF214
 10547 1ee9 01       		.byte	0x1
 10548 1eea 7D04     		.2byte	0x47d
 10549 1eec 450E0000 		.4byte	0xe45
 10550 1ef0 02       		.uleb128 0x2
 10551 1ef1 91       		.byte	0x91
 10552 1ef2 6C       		.sleb128 -20
 10553 1ef3 29       		.uleb128 0x29
 10554 1ef4 54090000 		.4byte	.LASF319
 10555 1ef8 01       		.byte	0x1
 10556 1ef9 7D04     		.2byte	0x47d
ARM GAS  /tmp/ccNus05k.s 			page 238


 10557 1efb B8000000 		.4byte	0xb8
 10558 1eff 02       		.uleb128 0x2
 10559 1f00 91       		.byte	0x91
 10560 1f01 6A       		.sleb128 -22
 10561 1f02 29       		.uleb128 0x29
 10562 1f03 300F0000 		.4byte	.LASF320
 10563 1f07 01       		.byte	0x1
 10564 1f08 7D04     		.2byte	0x47d
 10565 1f0a B8000000 		.4byte	0xb8
 10566 1f0e 02       		.uleb128 0x2
 10567 1f0f 91       		.byte	0x91
 10568 1f10 68       		.sleb128 -24
 10569 1f11 29       		.uleb128 0x29
 10570 1f12 460B0000 		.4byte	.LASF321
 10571 1f16 01       		.byte	0x1
 10572 1f17 7E04     		.2byte	0x47e
 10573 1f19 B8000000 		.4byte	0xb8
 10574 1f1d 02       		.uleb128 0x2
 10575 1f1e 91       		.byte	0x91
 10576 1f1f 66       		.sleb128 -26
 10577 1f20 2A       		.uleb128 0x2a
 10578 1f21 76110000 		.4byte	.LASF310
 10579 1f25 01       		.byte	0x1
 10580 1f26 8004     		.2byte	0x480
 10581 1f28 B8000000 		.4byte	0xb8
 10582 1f2c 02       		.uleb128 0x2
 10583 1f2d 91       		.byte	0x91
 10584 1f2e 76       		.sleb128 -10
 10585 1f2f 00       		.byte	0
 10586 1f30 2E       		.uleb128 0x2e
 10587 1f31 8E060000 		.4byte	.LASF322
 10588 1f35 07       		.byte	0x7
 10589 1f36 3704     		.2byte	0x437
 10590 1f38 180C0000 		.4byte	.LFB87
 10591 1f3c 3E000000 		.4byte	.LFE87-.LFB87
 10592 1f40 01       		.uleb128 0x1
 10593 1f41 9C       		.byte	0x9c
 10594 1f42 831F0000 		.4byte	0x1f83
 10595 1f46 29       		.uleb128 0x29
 10596 1f47 DA0E0000 		.4byte	.LASF214
 10597 1f4b 01       		.byte	0x1
 10598 1f4c 5E04     		.2byte	0x45e
 10599 1f4e 450E0000 		.4byte	0xe45
 10600 1f52 02       		.uleb128 0x2
 10601 1f53 91       		.byte	0x91
 10602 1f54 74       		.sleb128 -12
 10603 1f55 29       		.uleb128 0x29
 10604 1f56 54090000 		.4byte	.LASF319
 10605 1f5a 01       		.byte	0x1
 10606 1f5b 5E04     		.2byte	0x45e
 10607 1f5d B8000000 		.4byte	0xb8
 10608 1f61 02       		.uleb128 0x2
 10609 1f62 91       		.byte	0x91
 10610 1f63 72       		.sleb128 -14
 10611 1f64 29       		.uleb128 0x29
 10612 1f65 300F0000 		.4byte	.LASF320
 10613 1f69 01       		.byte	0x1
ARM GAS  /tmp/ccNus05k.s 			page 239


 10614 1f6a 5F04     		.2byte	0x45f
 10615 1f6c B8000000 		.4byte	0xb8
 10616 1f70 02       		.uleb128 0x2
 10617 1f71 91       		.byte	0x91
 10618 1f72 70       		.sleb128 -16
 10619 1f73 29       		.uleb128 0x29
 10620 1f74 460B0000 		.4byte	.LASF321
 10621 1f78 01       		.byte	0x1
 10622 1f79 5F04     		.2byte	0x45f
 10623 1f7b B8000000 		.4byte	0xb8
 10624 1f7f 02       		.uleb128 0x2
 10625 1f80 91       		.byte	0x91
 10626 1f81 6E       		.sleb128 -18
 10627 1f82 00       		.byte	0
 10628 1f83 2E       		.uleb128 0x2e
 10629 1f84 D1050000 		.4byte	.LASF323
 10630 1f88 07       		.byte	0x7
 10631 1f89 3504     		.2byte	0x435
 10632 1f8b BA0B0000 		.4byte	.LFB86
 10633 1f8f 5E000000 		.4byte	.LFE86-.LFB86
 10634 1f93 01       		.uleb128 0x1
 10635 1f94 9C       		.byte	0x9c
 10636 1f95 E51F0000 		.4byte	0x1fe5
 10637 1f99 29       		.uleb128 0x29
 10638 1f9a DA0E0000 		.4byte	.LASF214
 10639 1f9e 01       		.byte	0x1
 10640 1f9f 3404     		.2byte	0x434
 10641 1fa1 450E0000 		.4byte	0xe45
 10642 1fa5 02       		.uleb128 0x2
 10643 1fa6 91       		.byte	0x91
 10644 1fa7 6C       		.sleb128 -20
 10645 1fa8 29       		.uleb128 0x29
 10646 1fa9 54090000 		.4byte	.LASF319
 10647 1fad 01       		.byte	0x1
 10648 1fae 3404     		.2byte	0x434
 10649 1fb0 B8000000 		.4byte	0xb8
 10650 1fb4 02       		.uleb128 0x2
 10651 1fb5 91       		.byte	0x91
 10652 1fb6 6A       		.sleb128 -22
 10653 1fb7 29       		.uleb128 0x29
 10654 1fb8 300F0000 		.4byte	.LASF320
 10655 1fbc 01       		.byte	0x1
 10656 1fbd 3404     		.2byte	0x434
 10657 1fbf B8000000 		.4byte	0xb8
 10658 1fc3 02       		.uleb128 0x2
 10659 1fc4 91       		.byte	0x91
 10660 1fc5 68       		.sleb128 -24
 10661 1fc6 29       		.uleb128 0x29
 10662 1fc7 460B0000 		.4byte	.LASF321
 10663 1fcb 01       		.byte	0x1
 10664 1fcc 3504     		.2byte	0x435
 10665 1fce B8000000 		.4byte	0xb8
 10666 1fd2 02       		.uleb128 0x2
 10667 1fd3 91       		.byte	0x91
 10668 1fd4 66       		.sleb128 -26
 10669 1fd5 2A       		.uleb128 0x2a
 10670 1fd6 76110000 		.4byte	.LASF310
ARM GAS  /tmp/ccNus05k.s 			page 240


 10671 1fda 01       		.byte	0x1
 10672 1fdb 3704     		.2byte	0x437
 10673 1fdd B8000000 		.4byte	0xb8
 10674 1fe1 02       		.uleb128 0x2
 10675 1fe2 91       		.byte	0x91
 10676 1fe3 76       		.sleb128 -10
 10677 1fe4 00       		.byte	0
 10678 1fe5 2E       		.uleb128 0x2e
 10679 1fe6 0E070000 		.4byte	.LASF324
 10680 1fea 07       		.byte	0x7
 10681 1feb 3304     		.2byte	0x433
 10682 1fed 5E0B0000 		.4byte	.LFB85
 10683 1ff1 5C000000 		.4byte	.LFE85-.LFB85
 10684 1ff5 01       		.uleb128 0x1
 10685 1ff6 9C       		.byte	0x9c
 10686 1ff7 38200000 		.4byte	0x2038
 10687 1ffb 29       		.uleb128 0x29
 10688 1ffc DA0E0000 		.4byte	.LASF214
 10689 2000 01       		.byte	0x1
 10690 2001 0C04     		.2byte	0x40c
 10691 2003 450E0000 		.4byte	0xe45
 10692 2007 02       		.uleb128 0x2
 10693 2008 91       		.byte	0x91
 10694 2009 74       		.sleb128 -12
 10695 200a 29       		.uleb128 0x29
 10696 200b 9E020000 		.4byte	.LASF325
 10697 200f 01       		.byte	0x1
 10698 2010 0C04     		.2byte	0x40c
 10699 2012 B8000000 		.4byte	0xb8
 10700 2016 02       		.uleb128 0x2
 10701 2017 91       		.byte	0x91
 10702 2018 72       		.sleb128 -14
 10703 2019 29       		.uleb128 0x29
 10704 201a 5C020000 		.4byte	.LASF76
 10705 201e 01       		.byte	0x1
 10706 201f 0D04     		.2byte	0x40d
 10707 2021 B8000000 		.4byte	0xb8
 10708 2025 02       		.uleb128 0x2
 10709 2026 91       		.byte	0x91
 10710 2027 70       		.sleb128 -16
 10711 2028 29       		.uleb128 0x29
 10712 2029 C40A0000 		.4byte	.LASF326
 10713 202d 01       		.byte	0x1
 10714 202e 0D04     		.2byte	0x40d
 10715 2030 B8000000 		.4byte	0xb8
 10716 2034 02       		.uleb128 0x2
 10717 2035 91       		.byte	0x91
 10718 2036 6E       		.sleb128 -18
 10719 2037 00       		.byte	0
 10720 2038 2E       		.uleb128 0x2e
 10721 2039 35050000 		.4byte	.LASF327
 10722 203d 07       		.byte	0x7
 10723 203e 3204     		.2byte	0x432
 10724 2040 300B0000 		.4byte	.LFB84
 10725 2044 2E000000 		.4byte	.LFE84-.LFB84
 10726 2048 01       		.uleb128 0x1
 10727 2049 9C       		.byte	0x9c
ARM GAS  /tmp/ccNus05k.s 			page 241


 10728 204a 6D200000 		.4byte	0x206d
 10729 204e 29       		.uleb128 0x29
 10730 204f DA0E0000 		.4byte	.LASF214
 10731 2053 01       		.byte	0x1
 10732 2054 F103     		.2byte	0x3f1
 10733 2056 450E0000 		.4byte	0xe45
 10734 205a 02       		.uleb128 0x2
 10735 205b 91       		.byte	0x91
 10736 205c 74       		.sleb128 -12
 10737 205d 29       		.uleb128 0x29
 10738 205e 70090000 		.4byte	.LASF312
 10739 2062 01       		.byte	0x1
 10740 2063 F103     		.2byte	0x3f1
 10741 2065 B8000000 		.4byte	0xb8
 10742 2069 02       		.uleb128 0x2
 10743 206a 91       		.byte	0x91
 10744 206b 72       		.sleb128 -14
 10745 206c 00       		.byte	0
 10746 206d 2C       		.uleb128 0x2c
 10747 206e 62080000 		.4byte	.LASF328
 10748 2072 07       		.byte	0x7
 10749 2073 3104     		.2byte	0x431
 10750 2075 0E0B0000 		.4byte	.LFB83
 10751 2079 22000000 		.4byte	.LFE83-.LFB83
 10752 207d 01       		.uleb128 0x1
 10753 207e 9C       		.byte	0x9c
 10754 207f 93200000 		.4byte	0x2093
 10755 2083 29       		.uleb128 0x29
 10756 2084 DA0E0000 		.4byte	.LASF214
 10757 2088 01       		.byte	0x1
 10758 2089 DE03     		.2byte	0x3de
 10759 208b 450E0000 		.4byte	0xe45
 10760 208f 02       		.uleb128 0x2
 10761 2090 91       		.byte	0x91
 10762 2091 74       		.sleb128 -12
 10763 2092 00       		.byte	0
 10764 2093 2C       		.uleb128 0x2c
 10765 2094 C0110000 		.4byte	.LASF329
 10766 2098 07       		.byte	0x7
 10767 2099 3004     		.2byte	0x430
 10768 209b C80A0000 		.4byte	.LFB82
 10769 209f 46000000 		.4byte	.LFE82-.LFB82
 10770 20a3 01       		.uleb128 0x1
 10771 20a4 9C       		.byte	0x9c
 10772 20a5 D7200000 		.4byte	0x20d7
 10773 20a9 29       		.uleb128 0x29
 10774 20aa DA0E0000 		.4byte	.LASF214
 10775 20ae 01       		.byte	0x1
 10776 20af C503     		.2byte	0x3c5
 10777 20b1 450E0000 		.4byte	0xe45
 10778 20b5 02       		.uleb128 0x2
 10779 20b6 91       		.byte	0x91
 10780 20b7 74       		.sleb128 -12
 10781 20b8 29       		.uleb128 0x29
 10782 20b9 AB030000 		.4byte	.LASF330
 10783 20bd 01       		.byte	0x1
 10784 20be C503     		.2byte	0x3c5
ARM GAS  /tmp/ccNus05k.s 			page 242


 10785 20c0 B8000000 		.4byte	0xb8
 10786 20c4 02       		.uleb128 0x2
 10787 20c5 91       		.byte	0x91
 10788 20c6 72       		.sleb128 -14
 10789 20c7 29       		.uleb128 0x29
 10790 20c8 590A0000 		.4byte	.LASF265
 10791 20cc 01       		.byte	0x1
 10792 20cd C503     		.2byte	0x3c5
 10793 20cf 4D010000 		.4byte	0x14d
 10794 20d3 02       		.uleb128 0x2
 10795 20d4 91       		.byte	0x91
 10796 20d5 71       		.sleb128 -15
 10797 20d6 00       		.byte	0
 10798 20d7 2C       		.uleb128 0x2c
 10799 20d8 19080000 		.4byte	.LASF331
 10800 20dc 07       		.byte	0x7
 10801 20dd 2F04     		.2byte	0x42f
 10802 20df A00A0000 		.4byte	.LFB81
 10803 20e3 28000000 		.4byte	.LFE81-.LFB81
 10804 20e7 01       		.uleb128 0x1
 10805 20e8 9C       		.byte	0x9c
 10806 20e9 1B210000 		.4byte	0x211b
 10807 20ed 29       		.uleb128 0x29
 10808 20ee DA0E0000 		.4byte	.LASF214
 10809 20f2 01       		.byte	0x1
 10810 20f3 AA03     		.2byte	0x3aa
 10811 20f5 450E0000 		.4byte	0xe45
 10812 20f9 02       		.uleb128 0x2
 10813 20fa 91       		.byte	0x91
 10814 20fb 74       		.sleb128 -12
 10815 20fc 29       		.uleb128 0x29
 10816 20fd 6A060000 		.4byte	.LASF332
 10817 2101 01       		.byte	0x1
 10818 2102 AA03     		.2byte	0x3aa
 10819 2104 B8000000 		.4byte	0xb8
 10820 2108 02       		.uleb128 0x2
 10821 2109 91       		.byte	0x91
 10822 210a 72       		.sleb128 -14
 10823 210b 29       		.uleb128 0x29
 10824 210c 3C030000 		.4byte	.LASF333
 10825 2110 01       		.byte	0x1
 10826 2111 AA03     		.2byte	0x3aa
 10827 2113 B8000000 		.4byte	0xb8
 10828 2117 02       		.uleb128 0x2
 10829 2118 91       		.byte	0x91
 10830 2119 70       		.sleb128 -16
 10831 211a 00       		.byte	0
 10832 211b 2C       		.uleb128 0x2c
 10833 211c 40060000 		.4byte	.LASF334
 10834 2120 07       		.byte	0x7
 10835 2121 2E04     		.2byte	0x42e
 10836 2123 840A0000 		.4byte	.LFB80
 10837 2127 1C000000 		.4byte	.LFE80-.LFB80
 10838 212b 01       		.uleb128 0x1
 10839 212c 9C       		.byte	0x9c
 10840 212d 50210000 		.4byte	0x2150
 10841 2131 29       		.uleb128 0x29
ARM GAS  /tmp/ccNus05k.s 			page 243


 10842 2132 DA0E0000 		.4byte	.LASF214
 10843 2136 01       		.byte	0x1
 10844 2137 8E03     		.2byte	0x38e
 10845 2139 450E0000 		.4byte	0xe45
 10846 213d 02       		.uleb128 0x2
 10847 213e 91       		.byte	0x91
 10848 213f 74       		.sleb128 -12
 10849 2140 29       		.uleb128 0x29
 10850 2141 25000000 		.4byte	.LASF335
 10851 2145 01       		.byte	0x1
 10852 2146 8E03     		.2byte	0x38e
 10853 2148 B8000000 		.4byte	0xb8
 10854 214c 02       		.uleb128 0x2
 10855 214d 91       		.byte	0x91
 10856 214e 72       		.sleb128 -14
 10857 214f 00       		.byte	0
 10858 2150 2C       		.uleb128 0x2c
 10859 2151 DF0E0000 		.4byte	.LASF336
 10860 2155 07       		.byte	0x7
 10861 2156 2D04     		.2byte	0x42d
 10862 2158 3E0A0000 		.4byte	.LFB79
 10863 215c 46000000 		.4byte	.LFE79-.LFB79
 10864 2160 01       		.uleb128 0x1
 10865 2161 9C       		.byte	0x9c
 10866 2162 94210000 		.4byte	0x2194
 10867 2166 29       		.uleb128 0x29
 10868 2167 DA0E0000 		.4byte	.LASF214
 10869 216b 01       		.byte	0x1
 10870 216c 6903     		.2byte	0x369
 10871 216e 450E0000 		.4byte	0xe45
 10872 2172 02       		.uleb128 0x2
 10873 2173 91       		.byte	0x91
 10874 2174 74       		.sleb128 -12
 10875 2175 29       		.uleb128 0x29
 10876 2176 B9110000 		.4byte	.LASF222
 10877 217a 01       		.byte	0x1
 10878 217b 6903     		.2byte	0x369
 10879 217d B8000000 		.4byte	0xb8
 10880 2181 02       		.uleb128 0x2
 10881 2182 91       		.byte	0x91
 10882 2183 72       		.sleb128 -14
 10883 2184 29       		.uleb128 0x29
 10884 2185 590A0000 		.4byte	.LASF265
 10885 2189 01       		.byte	0x1
 10886 218a 6903     		.2byte	0x369
 10887 218c 4D010000 		.4byte	0x14d
 10888 2190 02       		.uleb128 0x2
 10889 2191 91       		.byte	0x91
 10890 2192 71       		.sleb128 -15
 10891 2193 00       		.byte	0
 10892 2194 2C       		.uleb128 0x2c
 10893 2195 A9100000 		.4byte	.LASF337
 10894 2199 07       		.byte	0x7
 10895 219a 2C04     		.2byte	0x42c
 10896 219c F4090000 		.4byte	.LFB78
 10897 21a0 4A000000 		.4byte	.LFE78-.LFB78
 10898 21a4 01       		.uleb128 0x1
ARM GAS  /tmp/ccNus05k.s 			page 244


 10899 21a5 9C       		.byte	0x9c
 10900 21a6 C9210000 		.4byte	0x21c9
 10901 21aa 29       		.uleb128 0x29
 10902 21ab DA0E0000 		.4byte	.LASF214
 10903 21af 01       		.byte	0x1
 10904 21b0 4003     		.2byte	0x340
 10905 21b2 450E0000 		.4byte	0xe45
 10906 21b6 02       		.uleb128 0x2
 10907 21b7 91       		.byte	0x91
 10908 21b8 74       		.sleb128 -12
 10909 21b9 29       		.uleb128 0x29
 10910 21ba 590A0000 		.4byte	.LASF265
 10911 21be 01       		.byte	0x1
 10912 21bf 4003     		.2byte	0x340
 10913 21c1 4D010000 		.4byte	0x14d
 10914 21c5 02       		.uleb128 0x2
 10915 21c6 91       		.byte	0x91
 10916 21c7 73       		.sleb128 -13
 10917 21c8 00       		.byte	0
 10918 21c9 2C       		.uleb128 0x2c
 10919 21ca 04100000 		.4byte	.LASF338
 10920 21ce 07       		.byte	0x7
 10921 21cf 2B04     		.2byte	0x42b
 10922 21d1 B6090000 		.4byte	.LFB77
 10923 21d5 3E000000 		.4byte	.LFE77-.LFB77
 10924 21d9 01       		.uleb128 0x1
 10925 21da 9C       		.byte	0x9c
 10926 21db FE210000 		.4byte	0x21fe
 10927 21df 29       		.uleb128 0x29
 10928 21e0 DA0E0000 		.4byte	.LASF214
 10929 21e4 01       		.byte	0x1
 10930 21e5 2703     		.2byte	0x327
 10931 21e7 450E0000 		.4byte	0xe45
 10932 21eb 02       		.uleb128 0x2
 10933 21ec 91       		.byte	0x91
 10934 21ed 74       		.sleb128 -12
 10935 21ee 29       		.uleb128 0x29
 10936 21ef 590A0000 		.4byte	.LASF265
 10937 21f3 01       		.byte	0x1
 10938 21f4 2703     		.2byte	0x327
 10939 21f6 4D010000 		.4byte	0x14d
 10940 21fa 02       		.uleb128 0x2
 10941 21fb 91       		.byte	0x91
 10942 21fc 73       		.sleb128 -13
 10943 21fd 00       		.byte	0
 10944 21fe 2C       		.uleb128 0x2c
 10945 21ff B10A0000 		.4byte	.LASF339
 10946 2203 07       		.byte	0x7
 10947 2204 2A04     		.2byte	0x42a
 10948 2206 7A090000 		.4byte	.LFB76
 10949 220a 3C000000 		.4byte	.LFE76-.LFB76
 10950 220e 01       		.uleb128 0x1
 10951 220f 9C       		.byte	0x9c
 10952 2210 24220000 		.4byte	0x2224
 10953 2214 29       		.uleb128 0x29
 10954 2215 CF0D0000 		.4byte	.LASF340
 10955 2219 01       		.byte	0x1
ARM GAS  /tmp/ccNus05k.s 			page 245


 10956 221a 1403     		.2byte	0x314
 10957 221c 24220000 		.4byte	0x2224
 10958 2220 02       		.uleb128 0x2
 10959 2221 91       		.byte	0x91
 10960 2222 74       		.sleb128 -12
 10961 2223 00       		.byte	0
 10962 2224 12       		.uleb128 0x12
 10963 2225 04       		.byte	0x4
 10964 2226 E7040000 		.4byte	0x4e7
 10965 222a 2C       		.uleb128 0x2c
 10966 222b 0F060000 		.4byte	.LASF341
 10967 222f 07       		.byte	0x7
 10968 2230 2904     		.2byte	0x429
 10969 2232 4A090000 		.4byte	.LFB75
 10970 2236 30000000 		.4byte	.LFE75-.LFB75
 10971 223a 01       		.uleb128 0x1
 10972 223b 9C       		.byte	0x9c
 10973 223c 50220000 		.4byte	0x2250
 10974 2240 29       		.uleb128 0x29
 10975 2241 82080000 		.4byte	.LASF342
 10976 2245 01       		.byte	0x1
 10977 2246 0403     		.2byte	0x304
 10978 2248 50220000 		.4byte	0x2250
 10979 224c 02       		.uleb128 0x2
 10980 224d 91       		.byte	0x91
 10981 224e 74       		.sleb128 -12
 10982 224f 00       		.byte	0
 10983 2250 12       		.uleb128 0x12
 10984 2251 04       		.byte	0x4
 10985 2252 7F040000 		.4byte	0x47f
 10986 2256 2C       		.uleb128 0x2c
 10987 2257 CD0A0000 		.4byte	.LASF343
 10988 225b 07       		.byte	0x7
 10989 225c 2804     		.2byte	0x428
 10990 225e 08090000 		.4byte	.LFB74
 10991 2262 42000000 		.4byte	.LFE74-.LFB74
 10992 2266 01       		.uleb128 0x1
 10993 2267 9C       		.byte	0x9c
 10994 2268 7C220000 		.4byte	0x227c
 10995 226c 29       		.uleb128 0x29
 10996 226d E20D0000 		.4byte	.LASF344
 10997 2271 01       		.byte	0x1
 10998 2272 F102     		.2byte	0x2f1
 10999 2274 7C220000 		.4byte	0x227c
 11000 2278 02       		.uleb128 0x2
 11001 2279 91       		.byte	0x91
 11002 227a 74       		.sleb128 -12
 11003 227b 00       		.byte	0
 11004 227c 12       		.uleb128 0x12
 11005 227d 04       		.byte	0x4
 11006 227e 2F040000 		.4byte	0x42f
 11007 2282 2C       		.uleb128 0x2c
 11008 2283 F00C0000 		.4byte	.LASF345
 11009 2287 07       		.byte	0x7
 11010 2288 2704     		.2byte	0x427
 11011 228a D6080000 		.4byte	.LFB73
 11012 228e 32000000 		.4byte	.LFE73-.LFB73
ARM GAS  /tmp/ccNus05k.s 			page 246


 11013 2292 01       		.uleb128 0x1
 11014 2293 9C       		.byte	0x9c
 11015 2294 A8220000 		.4byte	0x22a8
 11016 2298 29       		.uleb128 0x29
 11017 2299 07120000 		.4byte	.LASF346
 11018 229d 01       		.byte	0x1
 11019 229e E102     		.2byte	0x2e1
 11020 22a0 A8220000 		.4byte	0x22a8
 11021 22a4 02       		.uleb128 0x2
 11022 22a5 91       		.byte	0x91
 11023 22a6 74       		.sleb128 -12
 11024 22a7 00       		.byte	0
 11025 22a8 12       		.uleb128 0x12
 11026 22a9 04       		.byte	0x4
 11027 22aa BB030000 		.4byte	0x3bb
 11028 22ae 2C       		.uleb128 0x2c
 11029 22af 780E0000 		.4byte	.LASF347
 11030 22b3 07       		.byte	0x7
 11031 22b4 2604     		.2byte	0x426
 11032 22b6 88080000 		.4byte	.LFB72
 11033 22ba 4E000000 		.4byte	.LFE72-.LFB72
 11034 22be 01       		.uleb128 0x1
 11035 22bf 9C       		.byte	0x9c
 11036 22c0 E3220000 		.4byte	0x22e3
 11037 22c4 29       		.uleb128 0x29
 11038 22c5 DA0E0000 		.4byte	.LASF214
 11039 22c9 01       		.byte	0x1
 11040 22ca C902     		.2byte	0x2c9
 11041 22cc 450E0000 		.4byte	0xe45
 11042 22d0 02       		.uleb128 0x2
 11043 22d1 91       		.byte	0x91
 11044 22d2 74       		.sleb128 -12
 11045 22d3 29       		.uleb128 0x29
 11046 22d4 CF0D0000 		.4byte	.LASF340
 11047 22d8 01       		.byte	0x1
 11048 22d9 C902     		.2byte	0x2c9
 11049 22db 24220000 		.4byte	0x2224
 11050 22df 02       		.uleb128 0x2
 11051 22e0 91       		.byte	0x91
 11052 22e1 70       		.sleb128 -16
 11053 22e2 00       		.byte	0
 11054 22e3 2E       		.uleb128 0x2e
 11055 22e4 51050000 		.4byte	.LASF348
 11056 22e8 07       		.byte	0x7
 11057 22e9 2504     		.2byte	0x425
 11058 22eb D0070000 		.4byte	.LFB71
 11059 22ef B8000000 		.4byte	.LFE71-.LFB71
 11060 22f3 01       		.uleb128 0x1
 11061 22f4 9C       		.byte	0x9c
 11062 22f5 36230000 		.4byte	0x2336
 11063 22f9 29       		.uleb128 0x29
 11064 22fa DA0E0000 		.4byte	.LASF214
 11065 22fe 01       		.byte	0x1
 11066 22ff 8F02     		.2byte	0x28f
 11067 2301 450E0000 		.4byte	0xe45
 11068 2305 02       		.uleb128 0x2
 11069 2306 91       		.byte	0x91
ARM GAS  /tmp/ccNus05k.s 			page 247


 11070 2307 6C       		.sleb128 -20
 11071 2308 29       		.uleb128 0x29
 11072 2309 82080000 		.4byte	.LASF342
 11073 230d 01       		.byte	0x1
 11074 230e 8F02     		.2byte	0x28f
 11075 2310 50220000 		.4byte	0x2250
 11076 2314 02       		.uleb128 0x2
 11077 2315 91       		.byte	0x91
 11078 2316 68       		.sleb128 -24
 11079 2317 2A       		.uleb128 0x2a
 11080 2318 C9010000 		.4byte	.LASF349
 11081 231c 01       		.byte	0x1
 11082 231d 9102     		.2byte	0x291
 11083 231f B8000000 		.4byte	0xb8
 11084 2323 02       		.uleb128 0x2
 11085 2324 91       		.byte	0x91
 11086 2325 76       		.sleb128 -10
 11087 2326 2A       		.uleb128 0x2a
 11088 2327 46040000 		.4byte	.LASF350
 11089 232b 01       		.byte	0x1
 11090 232c 9202     		.2byte	0x292
 11091 232e B8000000 		.4byte	0xb8
 11092 2332 02       		.uleb128 0x2
 11093 2333 91       		.byte	0x91
 11094 2334 74       		.sleb128 -12
 11095 2335 00       		.byte	0
 11096 2336 2E       		.uleb128 0x2e
 11097 2337 4F0F0000 		.4byte	.LASF351
 11098 233b 07       		.byte	0x7
 11099 233c 2404     		.2byte	0x424
 11100 233e 28070000 		.4byte	.LFB70
 11101 2342 A8000000 		.4byte	.LFE70-.LFB70
 11102 2346 01       		.uleb128 0x1
 11103 2347 9C       		.byte	0x9c
 11104 2348 6B230000 		.4byte	0x236b
 11105 234c 29       		.uleb128 0x29
 11106 234d DA0E0000 		.4byte	.LASF214
 11107 2351 01       		.byte	0x1
 11108 2352 4C02     		.2byte	0x24c
 11109 2354 450E0000 		.4byte	0xe45
 11110 2358 02       		.uleb128 0x2
 11111 2359 91       		.byte	0x91
 11112 235a 74       		.sleb128 -12
 11113 235b 29       		.uleb128 0x29
 11114 235c 82080000 		.4byte	.LASF342
 11115 2360 01       		.byte	0x1
 11116 2361 4C02     		.2byte	0x24c
 11117 2363 50220000 		.4byte	0x2250
 11118 2367 02       		.uleb128 0x2
 11119 2368 91       		.byte	0x91
 11120 2369 70       		.sleb128 -16
 11121 236a 00       		.byte	0
 11122 236b 2C       		.uleb128 0x2c
 11123 236c 1E0C0000 		.4byte	.LASF352
 11124 2370 07       		.byte	0x7
 11125 2371 2304     		.2byte	0x423
 11126 2373 58060000 		.4byte	.LFB69
ARM GAS  /tmp/ccNus05k.s 			page 248


 11127 2377 D0000000 		.4byte	.LFE69-.LFB69
 11128 237b 01       		.uleb128 0x1
 11129 237c 9C       		.byte	0x9c
 11130 237d CD230000 		.4byte	0x23cd
 11131 2381 29       		.uleb128 0x29
 11132 2382 DA0E0000 		.4byte	.LASF214
 11133 2386 01       		.byte	0x1
 11134 2387 0C02     		.2byte	0x20c
 11135 2389 450E0000 		.4byte	0xe45
 11136 238d 02       		.uleb128 0x2
 11137 238e 91       		.byte	0x91
 11138 238f 6C       		.sleb128 -20
 11139 2390 29       		.uleb128 0x29
 11140 2391 E20D0000 		.4byte	.LASF344
 11141 2395 01       		.byte	0x1
 11142 2396 0C02     		.2byte	0x20c
 11143 2398 7C220000 		.4byte	0x227c
 11144 239c 02       		.uleb128 0x2
 11145 239d 91       		.byte	0x91
 11146 239e 68       		.sleb128 -24
 11147 239f 2A       		.uleb128 0x2a
 11148 23a0 F8010000 		.4byte	.LASF353
 11149 23a4 01       		.byte	0x1
 11150 23a5 0E02     		.2byte	0x20e
 11151 23a7 B8000000 		.4byte	0xb8
 11152 23ab 02       		.uleb128 0x2
 11153 23ac 91       		.byte	0x91
 11154 23ad 74       		.sleb128 -12
 11155 23ae 2A       		.uleb128 0x2a
 11156 23af A1100000 		.4byte	.LASF216
 11157 23b3 01       		.byte	0x1
 11158 23b4 0E02     		.2byte	0x20e
 11159 23b6 B8000000 		.4byte	0xb8
 11160 23ba 02       		.uleb128 0x2
 11161 23bb 91       		.byte	0x91
 11162 23bc 72       		.sleb128 -14
 11163 23bd 2A       		.uleb128 0x2a
 11164 23be D1020000 		.4byte	.LASF354
 11165 23c2 01       		.byte	0x1
 11166 23c3 0E02     		.2byte	0x20e
 11167 23c5 B8000000 		.4byte	0xb8
 11168 23c9 02       		.uleb128 0x2
 11169 23ca 91       		.byte	0x91
 11170 23cb 76       		.sleb128 -10
 11171 23cc 00       		.byte	0
 11172 23cd 2C       		.uleb128 0x2c
 11173 23ce 430F0000 		.4byte	.LASF355
 11174 23d2 07       		.byte	0x7
 11175 23d3 2204     		.2byte	0x422
 11176 23d5 4C050000 		.4byte	.LFB68
 11177 23d9 0C010000 		.4byte	.LFE68-.LFB68
 11178 23dd 01       		.uleb128 0x1
 11179 23de 9C       		.byte	0x9c
 11180 23df 2F240000 		.4byte	0x242f
 11181 23e3 29       		.uleb128 0x29
 11182 23e4 DA0E0000 		.4byte	.LASF214
 11183 23e8 01       		.byte	0x1
ARM GAS  /tmp/ccNus05k.s 			page 249


 11184 23e9 BD01     		.2byte	0x1bd
 11185 23eb 450E0000 		.4byte	0xe45
 11186 23ef 02       		.uleb128 0x2
 11187 23f0 91       		.byte	0x91
 11188 23f1 6C       		.sleb128 -20
 11189 23f2 29       		.uleb128 0x29
 11190 23f3 E20D0000 		.4byte	.LASF344
 11191 23f7 01       		.byte	0x1
 11192 23f8 BD01     		.2byte	0x1bd
 11193 23fa 7C220000 		.4byte	0x227c
 11194 23fe 02       		.uleb128 0x2
 11195 23ff 91       		.byte	0x91
 11196 2400 68       		.sleb128 -24
 11197 2401 2A       		.uleb128 0x2a
 11198 2402 F8010000 		.4byte	.LASF353
 11199 2406 01       		.byte	0x1
 11200 2407 BF01     		.2byte	0x1bf
 11201 2409 B8000000 		.4byte	0xb8
 11202 240d 02       		.uleb128 0x2
 11203 240e 91       		.byte	0x91
 11204 240f 72       		.sleb128 -14
 11205 2410 2A       		.uleb128 0x2a
 11206 2411 A1100000 		.4byte	.LASF216
 11207 2415 01       		.byte	0x1
 11208 2416 BF01     		.2byte	0x1bf
 11209 2418 B8000000 		.4byte	0xb8
 11210 241c 02       		.uleb128 0x2
 11211 241d 91       		.byte	0x91
 11212 241e 76       		.sleb128 -10
 11213 241f 2A       		.uleb128 0x2a
 11214 2420 D1020000 		.4byte	.LASF354
 11215 2424 01       		.byte	0x1
 11216 2425 BF01     		.2byte	0x1bf
 11217 2427 B8000000 		.4byte	0xb8
 11218 242b 02       		.uleb128 0x2
 11219 242c 91       		.byte	0x91
 11220 242d 74       		.sleb128 -12
 11221 242e 00       		.byte	0
 11222 242f 2C       		.uleb128 0x2c
 11223 2430 AD070000 		.4byte	.LASF356
 11224 2434 07       		.byte	0x7
 11225 2435 2104     		.2byte	0x421
 11226 2437 3C040000 		.4byte	.LFB67
 11227 243b 10010000 		.4byte	.LFE67-.LFB67
 11228 243f 01       		.uleb128 0x1
 11229 2440 9C       		.byte	0x9c
 11230 2441 91240000 		.4byte	0x2491
 11231 2445 29       		.uleb128 0x29
 11232 2446 DA0E0000 		.4byte	.LASF214
 11233 244a 01       		.byte	0x1
 11234 244b 6B01     		.2byte	0x16b
 11235 244d 450E0000 		.4byte	0xe45
 11236 2451 02       		.uleb128 0x2
 11237 2452 91       		.byte	0x91
 11238 2453 6C       		.sleb128 -20
 11239 2454 29       		.uleb128 0x29
 11240 2455 E20D0000 		.4byte	.LASF344
ARM GAS  /tmp/ccNus05k.s 			page 250


 11241 2459 01       		.byte	0x1
 11242 245a 6B01     		.2byte	0x16b
 11243 245c 7C220000 		.4byte	0x227c
 11244 2460 02       		.uleb128 0x2
 11245 2461 91       		.byte	0x91
 11246 2462 68       		.sleb128 -24
 11247 2463 2A       		.uleb128 0x2a
 11248 2464 F8010000 		.4byte	.LASF353
 11249 2468 01       		.byte	0x1
 11250 2469 6D01     		.2byte	0x16d
 11251 246b B8000000 		.4byte	0xb8
 11252 246f 02       		.uleb128 0x2
 11253 2470 91       		.byte	0x91
 11254 2471 72       		.sleb128 -14
 11255 2472 2A       		.uleb128 0x2a
 11256 2473 A1100000 		.4byte	.LASF216
 11257 2477 01       		.byte	0x1
 11258 2478 6D01     		.2byte	0x16d
 11259 247a B8000000 		.4byte	0xb8
 11260 247e 02       		.uleb128 0x2
 11261 247f 91       		.byte	0x91
 11262 2480 76       		.sleb128 -10
 11263 2481 2A       		.uleb128 0x2a
 11264 2482 D1020000 		.4byte	.LASF354
 11265 2486 01       		.byte	0x1
 11266 2487 6D01     		.2byte	0x16d
 11267 2489 B8000000 		.4byte	0xb8
 11268 248d 02       		.uleb128 0x2
 11269 248e 91       		.byte	0x91
 11270 248f 74       		.sleb128 -12
 11271 2490 00       		.byte	0
 11272 2491 2C       		.uleb128 0x2c
 11273 2492 41020000 		.4byte	.LASF357
 11274 2496 07       		.byte	0x7
 11275 2497 2004     		.2byte	0x420
 11276 2499 24030000 		.4byte	.LFB66
 11277 249d 18010000 		.4byte	.LFE66-.LFB66
 11278 24a1 01       		.uleb128 0x1
 11279 24a2 9C       		.byte	0x9c
 11280 24a3 F3240000 		.4byte	0x24f3
 11281 24a7 29       		.uleb128 0x29
 11282 24a8 DA0E0000 		.4byte	.LASF214
 11283 24ac 01       		.byte	0x1
 11284 24ad 1801     		.2byte	0x118
 11285 24af 450E0000 		.4byte	0xe45
 11286 24b3 02       		.uleb128 0x2
 11287 24b4 91       		.byte	0x91
 11288 24b5 6C       		.sleb128 -20
 11289 24b6 29       		.uleb128 0x29
 11290 24b7 E20D0000 		.4byte	.LASF344
 11291 24bb 01       		.byte	0x1
 11292 24bc 1801     		.2byte	0x118
 11293 24be 7C220000 		.4byte	0x227c
 11294 24c2 02       		.uleb128 0x2
 11295 24c3 91       		.byte	0x91
 11296 24c4 68       		.sleb128 -24
 11297 24c5 2A       		.uleb128 0x2a
ARM GAS  /tmp/ccNus05k.s 			page 251


 11298 24c6 F8010000 		.4byte	.LASF353
 11299 24ca 01       		.byte	0x1
 11300 24cb 1A01     		.2byte	0x11a
 11301 24cd B8000000 		.4byte	0xb8
 11302 24d1 02       		.uleb128 0x2
 11303 24d2 91       		.byte	0x91
 11304 24d3 72       		.sleb128 -14
 11305 24d4 2A       		.uleb128 0x2a
 11306 24d5 A1100000 		.4byte	.LASF216
 11307 24d9 01       		.byte	0x1
 11308 24da 1A01     		.2byte	0x11a
 11309 24dc B8000000 		.4byte	0xb8
 11310 24e0 02       		.uleb128 0x2
 11311 24e1 91       		.byte	0x91
 11312 24e2 76       		.sleb128 -10
 11313 24e3 2A       		.uleb128 0x2a
 11314 24e4 D1020000 		.4byte	.LASF354
 11315 24e8 01       		.byte	0x1
 11316 24e9 1A01     		.2byte	0x11a
 11317 24eb B8000000 		.4byte	0xb8
 11318 24ef 02       		.uleb128 0x2
 11319 24f0 91       		.byte	0x91
 11320 24f1 74       		.sleb128 -12
 11321 24f2 00       		.byte	0
 11322 24f3 2C       		.uleb128 0x2c
 11323 24f4 20060000 		.4byte	.LASF358
 11324 24f8 07       		.byte	0x7
 11325 24f9 1F04     		.2byte	0x41f
 11326 24fb 2C020000 		.4byte	.LFB65
 11327 24ff F8000000 		.4byte	.LFE65-.LFB65
 11328 2503 01       		.uleb128 0x1
 11329 2504 9C       		.byte	0x9c
 11330 2505 34250000 		.4byte	0x2534
 11331 2509 2F       		.uleb128 0x2f
 11332 250a DA0E0000 		.4byte	.LASF214
 11333 250e 01       		.byte	0x1
 11334 250f E3       		.byte	0xe3
 11335 2510 450E0000 		.4byte	0xe45
 11336 2514 02       		.uleb128 0x2
 11337 2515 91       		.byte	0x91
 11338 2516 6C       		.sleb128 -20
 11339 2517 2F       		.uleb128 0x2f
 11340 2518 07120000 		.4byte	.LASF346
 11341 251c 01       		.byte	0x1
 11342 251d E3       		.byte	0xe3
 11343 251e A8220000 		.4byte	0x22a8
 11344 2522 02       		.uleb128 0x2
 11345 2523 91       		.byte	0x91
 11346 2524 68       		.sleb128 -24
 11347 2525 30       		.uleb128 0x30
 11348 2526 360C0000 		.4byte	.LASF314
 11349 252a 01       		.byte	0x1
 11350 252b E5       		.byte	0xe5
 11351 252c B8000000 		.4byte	0xb8
 11352 2530 02       		.uleb128 0x2
 11353 2531 91       		.byte	0x91
 11354 2532 76       		.sleb128 -10
ARM GAS  /tmp/ccNus05k.s 			page 252


 11355 2533 00       		.byte	0
 11356 2534 31       		.uleb128 0x31
 11357 2535 620F0000 		.4byte	.LASF363
 11358 2539 07       		.byte	0x7
 11359 253a 1E04     		.2byte	0x41e
 11360 253c 00000000 		.4byte	.LFB64
 11361 2540 2C020000 		.4byte	.LFE64-.LFB64
 11362 2544 01       		.uleb128 0x1
 11363 2545 9C       		.byte	0x9c
 11364 2546 2F       		.uleb128 0x2f
 11365 2547 DA0E0000 		.4byte	.LASF214
 11366 254b 01       		.byte	0x1
 11367 254c 7B       		.byte	0x7b
 11368 254d 450E0000 		.4byte	0xe45
 11369 2551 02       		.uleb128 0x2
 11370 2552 91       		.byte	0x91
 11371 2553 74       		.sleb128 -12
 11372 2554 00       		.byte	0
 11373 2555 00       		.byte	0
 11374              		.section	.debug_abbrev,"",%progbits
 11375              	.Ldebug_abbrev0:
 11376 0000 01       		.uleb128 0x1
 11377 0001 11       		.uleb128 0x11
 11378 0002 01       		.byte	0x1
 11379 0003 25       		.uleb128 0x25
 11380 0004 0E       		.uleb128 0xe
 11381 0005 13       		.uleb128 0x13
 11382 0006 0B       		.uleb128 0xb
 11383 0007 03       		.uleb128 0x3
 11384 0008 0E       		.uleb128 0xe
 11385 0009 1B       		.uleb128 0x1b
 11386 000a 0E       		.uleb128 0xe
 11387 000b 11       		.uleb128 0x11
 11388 000c 01       		.uleb128 0x1
 11389 000d 12       		.uleb128 0x12
 11390 000e 06       		.uleb128 0x6
 11391 000f 10       		.uleb128 0x10
 11392 0010 17       		.uleb128 0x17
 11393 0011 00       		.byte	0
 11394 0012 00       		.byte	0
 11395 0013 02       		.uleb128 0x2
 11396 0014 24       		.uleb128 0x24
 11397 0015 00       		.byte	0
 11398 0016 0B       		.uleb128 0xb
 11399 0017 0B       		.uleb128 0xb
 11400 0018 3E       		.uleb128 0x3e
 11401 0019 0B       		.uleb128 0xb
 11402 001a 03       		.uleb128 0x3
 11403 001b 0E       		.uleb128 0xe
 11404 001c 00       		.byte	0
 11405 001d 00       		.byte	0
 11406 001e 03       		.uleb128 0x3
 11407 001f 16       		.uleb128 0x16
 11408 0020 00       		.byte	0
 11409 0021 03       		.uleb128 0x3
 11410 0022 0E       		.uleb128 0xe
 11411 0023 3A       		.uleb128 0x3a
ARM GAS  /tmp/ccNus05k.s 			page 253


 11412 0024 0B       		.uleb128 0xb
 11413 0025 3B       		.uleb128 0x3b
 11414 0026 0B       		.uleb128 0xb
 11415 0027 49       		.uleb128 0x49
 11416 0028 13       		.uleb128 0x13
 11417 0029 00       		.byte	0
 11418 002a 00       		.byte	0
 11419 002b 04       		.uleb128 0x4
 11420 002c 24       		.uleb128 0x24
 11421 002d 00       		.byte	0
 11422 002e 0B       		.uleb128 0xb
 11423 002f 0B       		.uleb128 0xb
 11424 0030 3E       		.uleb128 0x3e
 11425 0031 0B       		.uleb128 0xb
 11426 0032 03       		.uleb128 0x3
 11427 0033 08       		.uleb128 0x8
 11428 0034 00       		.byte	0
 11429 0035 00       		.byte	0
 11430 0036 05       		.uleb128 0x5
 11431 0037 35       		.uleb128 0x35
 11432 0038 00       		.byte	0
 11433 0039 49       		.uleb128 0x49
 11434 003a 13       		.uleb128 0x13
 11435 003b 00       		.byte	0
 11436 003c 00       		.byte	0
 11437 003d 06       		.uleb128 0x6
 11438 003e 34       		.uleb128 0x34
 11439 003f 00       		.byte	0
 11440 0040 03       		.uleb128 0x3
 11441 0041 0E       		.uleb128 0xe
 11442 0042 3A       		.uleb128 0x3a
 11443 0043 0B       		.uleb128 0xb
 11444 0044 3B       		.uleb128 0x3b
 11445 0045 05       		.uleb128 0x5
 11446 0046 49       		.uleb128 0x49
 11447 0047 13       		.uleb128 0x13
 11448 0048 3F       		.uleb128 0x3f
 11449 0049 19       		.uleb128 0x19
 11450 004a 3C       		.uleb128 0x3c
 11451 004b 19       		.uleb128 0x19
 11452 004c 00       		.byte	0
 11453 004d 00       		.byte	0
 11454 004e 07       		.uleb128 0x7
 11455 004f 34       		.uleb128 0x34
 11456 0050 00       		.byte	0
 11457 0051 03       		.uleb128 0x3
 11458 0052 0E       		.uleb128 0xe
 11459 0053 3A       		.uleb128 0x3a
 11460 0054 0B       		.uleb128 0xb
 11461 0055 3B       		.uleb128 0x3b
 11462 0056 0B       		.uleb128 0xb
 11463 0057 49       		.uleb128 0x49
 11464 0058 13       		.uleb128 0x13
 11465 0059 3F       		.uleb128 0x3f
 11466 005a 19       		.uleb128 0x19
 11467 005b 3C       		.uleb128 0x3c
 11468 005c 19       		.uleb128 0x19
ARM GAS  /tmp/ccNus05k.s 			page 254


 11469 005d 00       		.byte	0
 11470 005e 00       		.byte	0
 11471 005f 08       		.uleb128 0x8
 11472 0060 04       		.uleb128 0x4
 11473 0061 01       		.byte	0x1
 11474 0062 0B       		.uleb128 0xb
 11475 0063 0B       		.uleb128 0xb
 11476 0064 49       		.uleb128 0x49
 11477 0065 13       		.uleb128 0x13
 11478 0066 3A       		.uleb128 0x3a
 11479 0067 0B       		.uleb128 0xb
 11480 0068 3B       		.uleb128 0x3b
 11481 0069 05       		.uleb128 0x5
 11482 006a 01       		.uleb128 0x1
 11483 006b 13       		.uleb128 0x13
 11484 006c 00       		.byte	0
 11485 006d 00       		.byte	0
 11486 006e 09       		.uleb128 0x9
 11487 006f 28       		.uleb128 0x28
 11488 0070 00       		.byte	0
 11489 0071 03       		.uleb128 0x3
 11490 0072 0E       		.uleb128 0xe
 11491 0073 1C       		.uleb128 0x1c
 11492 0074 0B       		.uleb128 0xb
 11493 0075 00       		.byte	0
 11494 0076 00       		.byte	0
 11495 0077 0A       		.uleb128 0xa
 11496 0078 28       		.uleb128 0x28
 11497 0079 00       		.byte	0
 11498 007a 03       		.uleb128 0x3
 11499 007b 08       		.uleb128 0x8
 11500 007c 1C       		.uleb128 0x1c
 11501 007d 0B       		.uleb128 0xb
 11502 007e 00       		.byte	0
 11503 007f 00       		.byte	0
 11504 0080 0B       		.uleb128 0xb
 11505 0081 16       		.uleb128 0x16
 11506 0082 00       		.byte	0
 11507 0083 03       		.uleb128 0x3
 11508 0084 0E       		.uleb128 0xe
 11509 0085 3A       		.uleb128 0x3a
 11510 0086 0B       		.uleb128 0xb
 11511 0087 3B       		.uleb128 0x3b
 11512 0088 05       		.uleb128 0x5
 11513 0089 49       		.uleb128 0x49
 11514 008a 13       		.uleb128 0x13
 11515 008b 00       		.byte	0
 11516 008c 00       		.byte	0
 11517 008d 0C       		.uleb128 0xc
 11518 008e 13       		.uleb128 0x13
 11519 008f 01       		.byte	0x1
 11520 0090 0B       		.uleb128 0xb
 11521 0091 0B       		.uleb128 0xb
 11522 0092 3A       		.uleb128 0x3a
 11523 0093 0B       		.uleb128 0xb
 11524 0094 3B       		.uleb128 0x3b
 11525 0095 05       		.uleb128 0x5
ARM GAS  /tmp/ccNus05k.s 			page 255


 11526 0096 01       		.uleb128 0x1
 11527 0097 13       		.uleb128 0x13
 11528 0098 00       		.byte	0
 11529 0099 00       		.byte	0
 11530 009a 0D       		.uleb128 0xd
 11531 009b 0D       		.uleb128 0xd
 11532 009c 00       		.byte	0
 11533 009d 03       		.uleb128 0x3
 11534 009e 08       		.uleb128 0x8
 11535 009f 3A       		.uleb128 0x3a
 11536 00a0 0B       		.uleb128 0xb
 11537 00a1 3B       		.uleb128 0x3b
 11538 00a2 05       		.uleb128 0x5
 11539 00a3 49       		.uleb128 0x49
 11540 00a4 13       		.uleb128 0x13
 11541 00a5 38       		.uleb128 0x38
 11542 00a6 0B       		.uleb128 0xb
 11543 00a7 00       		.byte	0
 11544 00a8 00       		.byte	0
 11545 00a9 0E       		.uleb128 0xe
 11546 00aa 0D       		.uleb128 0xd
 11547 00ab 00       		.byte	0
 11548 00ac 03       		.uleb128 0x3
 11549 00ad 0E       		.uleb128 0xe
 11550 00ae 3A       		.uleb128 0x3a
 11551 00af 0B       		.uleb128 0xb
 11552 00b0 3B       		.uleb128 0x3b
 11553 00b1 05       		.uleb128 0x5
 11554 00b2 49       		.uleb128 0x49
 11555 00b3 13       		.uleb128 0x13
 11556 00b4 38       		.uleb128 0x38
 11557 00b5 0B       		.uleb128 0xb
 11558 00b6 00       		.byte	0
 11559 00b7 00       		.byte	0
 11560 00b8 0F       		.uleb128 0xf
 11561 00b9 13       		.uleb128 0x13
 11562 00ba 01       		.byte	0x1
 11563 00bb 0B       		.uleb128 0xb
 11564 00bc 0B       		.uleb128 0xb
 11565 00bd 3A       		.uleb128 0x3a
 11566 00be 0B       		.uleb128 0xb
 11567 00bf 3B       		.uleb128 0x3b
 11568 00c0 0B       		.uleb128 0xb
 11569 00c1 01       		.uleb128 0x1
 11570 00c2 13       		.uleb128 0x13
 11571 00c3 00       		.byte	0
 11572 00c4 00       		.byte	0
 11573 00c5 10       		.uleb128 0x10
 11574 00c6 0D       		.uleb128 0xd
 11575 00c7 00       		.byte	0
 11576 00c8 03       		.uleb128 0x3
 11577 00c9 0E       		.uleb128 0xe
 11578 00ca 3A       		.uleb128 0x3a
 11579 00cb 0B       		.uleb128 0xb
 11580 00cc 3B       		.uleb128 0x3b
 11581 00cd 0B       		.uleb128 0xb
 11582 00ce 49       		.uleb128 0x49
ARM GAS  /tmp/ccNus05k.s 			page 256


 11583 00cf 13       		.uleb128 0x13
 11584 00d0 38       		.uleb128 0x38
 11585 00d1 0B       		.uleb128 0xb
 11586 00d2 00       		.byte	0
 11587 00d3 00       		.byte	0
 11588 00d4 11       		.uleb128 0x11
 11589 00d5 15       		.uleb128 0x15
 11590 00d6 00       		.byte	0
 11591 00d7 27       		.uleb128 0x27
 11592 00d8 19       		.uleb128 0x19
 11593 00d9 00       		.byte	0
 11594 00da 00       		.byte	0
 11595 00db 12       		.uleb128 0x12
 11596 00dc 0F       		.uleb128 0xf
 11597 00dd 00       		.byte	0
 11598 00de 0B       		.uleb128 0xb
 11599 00df 0B       		.uleb128 0xb
 11600 00e0 49       		.uleb128 0x49
 11601 00e1 13       		.uleb128 0x13
 11602 00e2 00       		.byte	0
 11603 00e3 00       		.byte	0
 11604 00e4 13       		.uleb128 0x13
 11605 00e5 01       		.uleb128 0x1
 11606 00e6 01       		.byte	0x1
 11607 00e7 49       		.uleb128 0x49
 11608 00e8 13       		.uleb128 0x13
 11609 00e9 01       		.uleb128 0x1
 11610 00ea 13       		.uleb128 0x13
 11611 00eb 00       		.byte	0
 11612 00ec 00       		.byte	0
 11613 00ed 14       		.uleb128 0x14
 11614 00ee 21       		.uleb128 0x21
 11615 00ef 00       		.byte	0
 11616 00f0 49       		.uleb128 0x49
 11617 00f1 13       		.uleb128 0x13
 11618 00f2 2F       		.uleb128 0x2f
 11619 00f3 0B       		.uleb128 0xb
 11620 00f4 00       		.byte	0
 11621 00f5 00       		.byte	0
 11622 00f6 15       		.uleb128 0x15
 11623 00f7 34       		.uleb128 0x34
 11624 00f8 00       		.byte	0
 11625 00f9 03       		.uleb128 0x3
 11626 00fa 08       		.uleb128 0x8
 11627 00fb 3A       		.uleb128 0x3a
 11628 00fc 0B       		.uleb128 0xb
 11629 00fd 3B       		.uleb128 0x3b
 11630 00fe 05       		.uleb128 0x5
 11631 00ff 49       		.uleb128 0x49
 11632 0100 13       		.uleb128 0x13
 11633 0101 3F       		.uleb128 0x3f
 11634 0102 19       		.uleb128 0x19
 11635 0103 3C       		.uleb128 0x3c
 11636 0104 19       		.uleb128 0x19
 11637 0105 00       		.byte	0
 11638 0106 00       		.byte	0
 11639 0107 16       		.uleb128 0x16
ARM GAS  /tmp/ccNus05k.s 			page 257


 11640 0108 0F       		.uleb128 0xf
 11641 0109 00       		.byte	0
 11642 010a 0B       		.uleb128 0xb
 11643 010b 0B       		.uleb128 0xb
 11644 010c 00       		.byte	0
 11645 010d 00       		.byte	0
 11646 010e 17       		.uleb128 0x17
 11647 010f 17       		.uleb128 0x17
 11648 0110 01       		.byte	0x1
 11649 0111 0B       		.uleb128 0xb
 11650 0112 0B       		.uleb128 0xb
 11651 0113 3A       		.uleb128 0x3a
 11652 0114 0B       		.uleb128 0xb
 11653 0115 3B       		.uleb128 0x3b
 11654 0116 0B       		.uleb128 0xb
 11655 0117 01       		.uleb128 0x1
 11656 0118 13       		.uleb128 0x13
 11657 0119 00       		.byte	0
 11658 011a 00       		.byte	0
 11659 011b 18       		.uleb128 0x18
 11660 011c 0D       		.uleb128 0xd
 11661 011d 00       		.byte	0
 11662 011e 03       		.uleb128 0x3
 11663 011f 0E       		.uleb128 0xe
 11664 0120 3A       		.uleb128 0x3a
 11665 0121 0B       		.uleb128 0xb
 11666 0122 3B       		.uleb128 0x3b
 11667 0123 0B       		.uleb128 0xb
 11668 0124 49       		.uleb128 0x49
 11669 0125 13       		.uleb128 0x13
 11670 0126 00       		.byte	0
 11671 0127 00       		.byte	0
 11672 0128 19       		.uleb128 0x19
 11673 0129 13       		.uleb128 0x13
 11674 012a 01       		.byte	0x1
 11675 012b 03       		.uleb128 0x3
 11676 012c 0E       		.uleb128 0xe
 11677 012d 0B       		.uleb128 0xb
 11678 012e 0B       		.uleb128 0xb
 11679 012f 3A       		.uleb128 0x3a
 11680 0130 0B       		.uleb128 0xb
 11681 0131 3B       		.uleb128 0x3b
 11682 0132 0B       		.uleb128 0xb
 11683 0133 01       		.uleb128 0x1
 11684 0134 13       		.uleb128 0x13
 11685 0135 00       		.byte	0
 11686 0136 00       		.byte	0
 11687 0137 1A       		.uleb128 0x1a
 11688 0138 0D       		.uleb128 0xd
 11689 0139 00       		.byte	0
 11690 013a 03       		.uleb128 0x3
 11691 013b 08       		.uleb128 0x8
 11692 013c 3A       		.uleb128 0x3a
 11693 013d 0B       		.uleb128 0xb
 11694 013e 3B       		.uleb128 0x3b
 11695 013f 0B       		.uleb128 0xb
 11696 0140 49       		.uleb128 0x49
ARM GAS  /tmp/ccNus05k.s 			page 258


 11697 0141 13       		.uleb128 0x13
 11698 0142 38       		.uleb128 0x38
 11699 0143 0B       		.uleb128 0xb
 11700 0144 00       		.byte	0
 11701 0145 00       		.byte	0
 11702 0146 1B       		.uleb128 0x1b
 11703 0147 13       		.uleb128 0x13
 11704 0148 01       		.byte	0x1
 11705 0149 03       		.uleb128 0x3
 11706 014a 0E       		.uleb128 0xe
 11707 014b 0B       		.uleb128 0xb
 11708 014c 05       		.uleb128 0x5
 11709 014d 3A       		.uleb128 0x3a
 11710 014e 0B       		.uleb128 0xb
 11711 014f 3B       		.uleb128 0x3b
 11712 0150 0B       		.uleb128 0xb
 11713 0151 01       		.uleb128 0x1
 11714 0152 13       		.uleb128 0x13
 11715 0153 00       		.byte	0
 11716 0154 00       		.byte	0
 11717 0155 1C       		.uleb128 0x1c
 11718 0156 0D       		.uleb128 0xd
 11719 0157 00       		.byte	0
 11720 0158 03       		.uleb128 0x3
 11721 0159 0E       		.uleb128 0xe
 11722 015a 3A       		.uleb128 0x3a
 11723 015b 0B       		.uleb128 0xb
 11724 015c 3B       		.uleb128 0x3b
 11725 015d 0B       		.uleb128 0xb
 11726 015e 49       		.uleb128 0x49
 11727 015f 13       		.uleb128 0x13
 11728 0160 38       		.uleb128 0x38
 11729 0161 05       		.uleb128 0x5
 11730 0162 00       		.byte	0
 11731 0163 00       		.byte	0
 11732 0164 1D       		.uleb128 0x1d
 11733 0165 15       		.uleb128 0x15
 11734 0166 01       		.byte	0x1
 11735 0167 27       		.uleb128 0x27
 11736 0168 19       		.uleb128 0x19
 11737 0169 49       		.uleb128 0x49
 11738 016a 13       		.uleb128 0x13
 11739 016b 01       		.uleb128 0x1
 11740 016c 13       		.uleb128 0x13
 11741 016d 00       		.byte	0
 11742 016e 00       		.byte	0
 11743 016f 1E       		.uleb128 0x1e
 11744 0170 05       		.uleb128 0x5
 11745 0171 00       		.byte	0
 11746 0172 49       		.uleb128 0x49
 11747 0173 13       		.uleb128 0x13
 11748 0174 00       		.byte	0
 11749 0175 00       		.byte	0
 11750 0176 1F       		.uleb128 0x1f
 11751 0177 26       		.uleb128 0x26
 11752 0178 00       		.byte	0
 11753 0179 49       		.uleb128 0x49
ARM GAS  /tmp/ccNus05k.s 			page 259


 11754 017a 13       		.uleb128 0x13
 11755 017b 00       		.byte	0
 11756 017c 00       		.byte	0
 11757 017d 20       		.uleb128 0x20
 11758 017e 13       		.uleb128 0x13
 11759 017f 01       		.byte	0x1
 11760 0180 03       		.uleb128 0x3
 11761 0181 0E       		.uleb128 0xe
 11762 0182 0B       		.uleb128 0xb
 11763 0183 05       		.uleb128 0x5
 11764 0184 3A       		.uleb128 0x3a
 11765 0185 0B       		.uleb128 0xb
 11766 0186 3B       		.uleb128 0x3b
 11767 0187 05       		.uleb128 0x5
 11768 0188 01       		.uleb128 0x1
 11769 0189 13       		.uleb128 0x13
 11770 018a 00       		.byte	0
 11771 018b 00       		.byte	0
 11772 018c 21       		.uleb128 0x21
 11773 018d 0D       		.uleb128 0xd
 11774 018e 00       		.byte	0
 11775 018f 03       		.uleb128 0x3
 11776 0190 0E       		.uleb128 0xe
 11777 0191 3A       		.uleb128 0x3a
 11778 0192 0B       		.uleb128 0xb
 11779 0193 3B       		.uleb128 0x3b
 11780 0194 05       		.uleb128 0x5
 11781 0195 49       		.uleb128 0x49
 11782 0196 13       		.uleb128 0x13
 11783 0197 38       		.uleb128 0x38
 11784 0198 05       		.uleb128 0x5
 11785 0199 00       		.byte	0
 11786 019a 00       		.byte	0
 11787 019b 22       		.uleb128 0x22
 11788 019c 13       		.uleb128 0x13
 11789 019d 01       		.byte	0x1
 11790 019e 03       		.uleb128 0x3
 11791 019f 0E       		.uleb128 0xe
 11792 01a0 0B       		.uleb128 0xb
 11793 01a1 0B       		.uleb128 0xb
 11794 01a2 3A       		.uleb128 0x3a
 11795 01a3 0B       		.uleb128 0xb
 11796 01a4 3B       		.uleb128 0x3b
 11797 01a5 05       		.uleb128 0x5
 11798 01a6 01       		.uleb128 0x1
 11799 01a7 13       		.uleb128 0x13
 11800 01a8 00       		.byte	0
 11801 01a9 00       		.byte	0
 11802 01aa 23       		.uleb128 0x23
 11803 01ab 17       		.uleb128 0x17
 11804 01ac 01       		.byte	0x1
 11805 01ad 0B       		.uleb128 0xb
 11806 01ae 0B       		.uleb128 0xb
 11807 01af 3A       		.uleb128 0x3a
 11808 01b0 0B       		.uleb128 0xb
 11809 01b1 3B       		.uleb128 0x3b
 11810 01b2 05       		.uleb128 0x5
ARM GAS  /tmp/ccNus05k.s 			page 260


 11811 01b3 01       		.uleb128 0x1
 11812 01b4 13       		.uleb128 0x13
 11813 01b5 00       		.byte	0
 11814 01b6 00       		.byte	0
 11815 01b7 24       		.uleb128 0x24
 11816 01b8 0D       		.uleb128 0xd
 11817 01b9 00       		.byte	0
 11818 01ba 03       		.uleb128 0x3
 11819 01bb 0E       		.uleb128 0xe
 11820 01bc 3A       		.uleb128 0x3a
 11821 01bd 0B       		.uleb128 0xb
 11822 01be 3B       		.uleb128 0x3b
 11823 01bf 05       		.uleb128 0x5
 11824 01c0 49       		.uleb128 0x49
 11825 01c1 13       		.uleb128 0x13
 11826 01c2 00       		.byte	0
 11827 01c3 00       		.byte	0
 11828 01c4 25       		.uleb128 0x25
 11829 01c5 15       		.uleb128 0x15
 11830 01c6 01       		.byte	0x1
 11831 01c7 27       		.uleb128 0x27
 11832 01c8 19       		.uleb128 0x19
 11833 01c9 01       		.uleb128 0x1
 11834 01ca 13       		.uleb128 0x13
 11835 01cb 00       		.byte	0
 11836 01cc 00       		.byte	0
 11837 01cd 26       		.uleb128 0x26
 11838 01ce 04       		.uleb128 0x4
 11839 01cf 01       		.byte	0x1
 11840 01d0 03       		.uleb128 0x3
 11841 01d1 0E       		.uleb128 0xe
 11842 01d2 0B       		.uleb128 0xb
 11843 01d3 0B       		.uleb128 0xb
 11844 01d4 49       		.uleb128 0x49
 11845 01d5 13       		.uleb128 0x13
 11846 01d6 3A       		.uleb128 0x3a
 11847 01d7 0B       		.uleb128 0xb
 11848 01d8 3B       		.uleb128 0x3b
 11849 01d9 05       		.uleb128 0x5
 11850 01da 01       		.uleb128 0x1
 11851 01db 13       		.uleb128 0x13
 11852 01dc 00       		.byte	0
 11853 01dd 00       		.byte	0
 11854 01de 27       		.uleb128 0x27
 11855 01df 28       		.uleb128 0x28
 11856 01e0 00       		.byte	0
 11857 01e1 03       		.uleb128 0x3
 11858 01e2 0E       		.uleb128 0xe
 11859 01e3 1C       		.uleb128 0x1c
 11860 01e4 0D       		.uleb128 0xd
 11861 01e5 00       		.byte	0
 11862 01e6 00       		.byte	0
 11863 01e7 28       		.uleb128 0x28
 11864 01e8 2E       		.uleb128 0x2e
 11865 01e9 01       		.byte	0x1
 11866 01ea 03       		.uleb128 0x3
 11867 01eb 0E       		.uleb128 0xe
ARM GAS  /tmp/ccNus05k.s 			page 261


 11868 01ec 3A       		.uleb128 0x3a
 11869 01ed 0B       		.uleb128 0xb
 11870 01ee 3B       		.uleb128 0x3b
 11871 01ef 05       		.uleb128 0x5
 11872 01f0 27       		.uleb128 0x27
 11873 01f1 19       		.uleb128 0x19
 11874 01f2 11       		.uleb128 0x11
 11875 01f3 01       		.uleb128 0x1
 11876 01f4 12       		.uleb128 0x12
 11877 01f5 06       		.uleb128 0x6
 11878 01f6 40       		.uleb128 0x40
 11879 01f7 18       		.uleb128 0x18
 11880 01f8 9742     		.uleb128 0x2117
 11881 01fa 19       		.uleb128 0x19
 11882 01fb 01       		.uleb128 0x1
 11883 01fc 13       		.uleb128 0x13
 11884 01fd 00       		.byte	0
 11885 01fe 00       		.byte	0
 11886 01ff 29       		.uleb128 0x29
 11887 0200 05       		.uleb128 0x5
 11888 0201 00       		.byte	0
 11889 0202 03       		.uleb128 0x3
 11890 0203 0E       		.uleb128 0xe
 11891 0204 3A       		.uleb128 0x3a
 11892 0205 0B       		.uleb128 0xb
 11893 0206 3B       		.uleb128 0x3b
 11894 0207 05       		.uleb128 0x5
 11895 0208 49       		.uleb128 0x49
 11896 0209 13       		.uleb128 0x13
 11897 020a 02       		.uleb128 0x2
 11898 020b 18       		.uleb128 0x18
 11899 020c 00       		.byte	0
 11900 020d 00       		.byte	0
 11901 020e 2A       		.uleb128 0x2a
 11902 020f 34       		.uleb128 0x34
 11903 0210 00       		.byte	0
 11904 0211 03       		.uleb128 0x3
 11905 0212 0E       		.uleb128 0xe
 11906 0213 3A       		.uleb128 0x3a
 11907 0214 0B       		.uleb128 0xb
 11908 0215 3B       		.uleb128 0x3b
 11909 0216 05       		.uleb128 0x5
 11910 0217 49       		.uleb128 0x49
 11911 0218 13       		.uleb128 0x13
 11912 0219 02       		.uleb128 0x2
 11913 021a 18       		.uleb128 0x18
 11914 021b 00       		.byte	0
 11915 021c 00       		.byte	0
 11916 021d 2B       		.uleb128 0x2b
 11917 021e 34       		.uleb128 0x34
 11918 021f 00       		.byte	0
 11919 0220 03       		.uleb128 0x3
 11920 0221 08       		.uleb128 0x8
 11921 0222 3A       		.uleb128 0x3a
 11922 0223 0B       		.uleb128 0xb
 11923 0224 3B       		.uleb128 0x3b
 11924 0225 05       		.uleb128 0x5
ARM GAS  /tmp/ccNus05k.s 			page 262


 11925 0226 49       		.uleb128 0x49
 11926 0227 13       		.uleb128 0x13
 11927 0228 02       		.uleb128 0x2
 11928 0229 18       		.uleb128 0x18
 11929 022a 00       		.byte	0
 11930 022b 00       		.byte	0
 11931 022c 2C       		.uleb128 0x2c
 11932 022d 2E       		.uleb128 0x2e
 11933 022e 01       		.byte	0x1
 11934 022f 3F       		.uleb128 0x3f
 11935 0230 19       		.uleb128 0x19
 11936 0231 03       		.uleb128 0x3
 11937 0232 0E       		.uleb128 0xe
 11938 0233 3A       		.uleb128 0x3a
 11939 0234 0B       		.uleb128 0xb
 11940 0235 3B       		.uleb128 0x3b
 11941 0236 05       		.uleb128 0x5
 11942 0237 27       		.uleb128 0x27
 11943 0238 19       		.uleb128 0x19
 11944 0239 11       		.uleb128 0x11
 11945 023a 01       		.uleb128 0x1
 11946 023b 12       		.uleb128 0x12
 11947 023c 06       		.uleb128 0x6
 11948 023d 40       		.uleb128 0x40
 11949 023e 18       		.uleb128 0x18
 11950 023f 9742     		.uleb128 0x2117
 11951 0241 19       		.uleb128 0x19
 11952 0242 01       		.uleb128 0x1
 11953 0243 13       		.uleb128 0x13
 11954 0244 00       		.byte	0
 11955 0245 00       		.byte	0
 11956 0246 2D       		.uleb128 0x2d
 11957 0247 2E       		.uleb128 0x2e
 11958 0248 01       		.byte	0x1
 11959 0249 3F       		.uleb128 0x3f
 11960 024a 19       		.uleb128 0x19
 11961 024b 03       		.uleb128 0x3
 11962 024c 0E       		.uleb128 0xe
 11963 024d 3A       		.uleb128 0x3a
 11964 024e 0B       		.uleb128 0xb
 11965 024f 3B       		.uleb128 0x3b
 11966 0250 05       		.uleb128 0x5
 11967 0251 27       		.uleb128 0x27
 11968 0252 19       		.uleb128 0x19
 11969 0253 49       		.uleb128 0x49
 11970 0254 13       		.uleb128 0x13
 11971 0255 11       		.uleb128 0x11
 11972 0256 01       		.uleb128 0x1
 11973 0257 12       		.uleb128 0x12
 11974 0258 06       		.uleb128 0x6
 11975 0259 40       		.uleb128 0x40
 11976 025a 18       		.uleb128 0x18
 11977 025b 9742     		.uleb128 0x2117
 11978 025d 19       		.uleb128 0x19
 11979 025e 01       		.uleb128 0x1
 11980 025f 13       		.uleb128 0x13
 11981 0260 00       		.byte	0
ARM GAS  /tmp/ccNus05k.s 			page 263


 11982 0261 00       		.byte	0
 11983 0262 2E       		.uleb128 0x2e
 11984 0263 2E       		.uleb128 0x2e
 11985 0264 01       		.byte	0x1
 11986 0265 3F       		.uleb128 0x3f
 11987 0266 19       		.uleb128 0x19
 11988 0267 03       		.uleb128 0x3
 11989 0268 0E       		.uleb128 0xe
 11990 0269 3A       		.uleb128 0x3a
 11991 026a 0B       		.uleb128 0xb
 11992 026b 3B       		.uleb128 0x3b
 11993 026c 05       		.uleb128 0x5
 11994 026d 27       		.uleb128 0x27
 11995 026e 19       		.uleb128 0x19
 11996 026f 11       		.uleb128 0x11
 11997 0270 01       		.uleb128 0x1
 11998 0271 12       		.uleb128 0x12
 11999 0272 06       		.uleb128 0x6
 12000 0273 40       		.uleb128 0x40
 12001 0274 18       		.uleb128 0x18
 12002 0275 9642     		.uleb128 0x2116
 12003 0277 19       		.uleb128 0x19
 12004 0278 01       		.uleb128 0x1
 12005 0279 13       		.uleb128 0x13
 12006 027a 00       		.byte	0
 12007 027b 00       		.byte	0
 12008 027c 2F       		.uleb128 0x2f
 12009 027d 05       		.uleb128 0x5
 12010 027e 00       		.byte	0
 12011 027f 03       		.uleb128 0x3
 12012 0280 0E       		.uleb128 0xe
 12013 0281 3A       		.uleb128 0x3a
 12014 0282 0B       		.uleb128 0xb
 12015 0283 3B       		.uleb128 0x3b
 12016 0284 0B       		.uleb128 0xb
 12017 0285 49       		.uleb128 0x49
 12018 0286 13       		.uleb128 0x13
 12019 0287 02       		.uleb128 0x2
 12020 0288 18       		.uleb128 0x18
 12021 0289 00       		.byte	0
 12022 028a 00       		.byte	0
 12023 028b 30       		.uleb128 0x30
 12024 028c 34       		.uleb128 0x34
 12025 028d 00       		.byte	0
 12026 028e 03       		.uleb128 0x3
 12027 028f 0E       		.uleb128 0xe
 12028 0290 3A       		.uleb128 0x3a
 12029 0291 0B       		.uleb128 0xb
 12030 0292 3B       		.uleb128 0x3b
 12031 0293 0B       		.uleb128 0xb
 12032 0294 49       		.uleb128 0x49
 12033 0295 13       		.uleb128 0x13
 12034 0296 02       		.uleb128 0x2
 12035 0297 18       		.uleb128 0x18
 12036 0298 00       		.byte	0
 12037 0299 00       		.byte	0
 12038 029a 31       		.uleb128 0x31
ARM GAS  /tmp/ccNus05k.s 			page 264


 12039 029b 2E       		.uleb128 0x2e
 12040 029c 01       		.byte	0x1
 12041 029d 3F       		.uleb128 0x3f
 12042 029e 19       		.uleb128 0x19
 12043 029f 03       		.uleb128 0x3
 12044 02a0 0E       		.uleb128 0xe
 12045 02a1 3A       		.uleb128 0x3a
 12046 02a2 0B       		.uleb128 0xb
 12047 02a3 3B       		.uleb128 0x3b
 12048 02a4 05       		.uleb128 0x5
 12049 02a5 27       		.uleb128 0x27
 12050 02a6 19       		.uleb128 0x19
 12051 02a7 11       		.uleb128 0x11
 12052 02a8 01       		.uleb128 0x1
 12053 02a9 12       		.uleb128 0x12
 12054 02aa 06       		.uleb128 0x6
 12055 02ab 40       		.uleb128 0x40
 12056 02ac 18       		.uleb128 0x18
 12057 02ad 9642     		.uleb128 0x2116
 12058 02af 19       		.uleb128 0x19
 12059 02b0 00       		.byte	0
 12060 02b1 00       		.byte	0
 12061 02b2 00       		.byte	0
 12062              		.section	.debug_aranges,"",%progbits
 12063 0000 1C000000 		.4byte	0x1c
 12064 0004 0200     		.2byte	0x2
 12065 0006 00000000 		.4byte	.Ldebug_info0
 12066 000a 04       		.byte	0x4
 12067 000b 00       		.byte	0
 12068 000c 0000     		.2byte	0
 12069 000e 0000     		.2byte	0
 12070 0010 00000000 		.4byte	.Ltext0
 12071 0014 901D0000 		.4byte	.Letext0-.Ltext0
 12072 0018 00000000 		.4byte	0
 12073 001c 00000000 		.4byte	0
 12074              		.section	.debug_line,"",%progbits
 12075              	.Ldebug_line0:
 12076 0000 E2060000 		.section	.debug_str,"MS",%progbits,1
 12076      02000B02 
 12076      00000201 
 12076      FB0E0D00 
 12076      01010101 
 12077              	.LASF231:
 12078 0000 54494D5F 		.ascii	"TIM_GetPrescaler\000"
 12078      47657450 
 12078      72657363 
 12078      616C6572 
 12078      00
 12079              	.LASF305:
 12080 0011 54494D5F 		.ascii	"TIM_ForcedOC1Config\000"
 12080      466F7263 
 12080      65644F43 
 12080      31436F6E 
 12080      66696700 
 12081              	.LASF335:
 12082 0025 54494D5F 		.ascii	"TIM_EventSource\000"
 12082      4576656E 
ARM GAS  /tmp/ccNus05k.s 			page 265


 12082      74536F75 
 12082      72636500 
 12083              	.LASF19:
 12084 0035 73697A65 		.ascii	"sizetype\000"
 12084      74797065 
 12084      00
 12085              	.LASF106:
 12086 003e 5F5F7661 		.ascii	"__value\000"
 12086      6C756500 
 12087              	.LASF238:
 12088 0046 54494D5F 		.ascii	"TIM_CKD\000"
 12088      434B4400 
 12089              	.LASF174:
 12090 004e 5F5F7366 		.ascii	"__sf\000"
 12090      00
 12091              	.LASF278:
 12092 0053 54494D5F 		.ascii	"TIM_OC2NPolarityConfig\000"
 12092      4F43324E 
 12092      506F6C61 
 12092      72697479 
 12092      436F6E66 
 12093              	.LASF141:
 12094 006a 5F726561 		.ascii	"_read\000"
 12094      6400
 12095              	.LASF74:
 12096 0070 54494D5F 		.ascii	"TIM_OCInitTypeDef\000"
 12096      4F43496E 
 12096      69745479 
 12096      70654465 
 12096      6600
 12097              	.LASF268:
 12098 0082 54494D5F 		.ascii	"TIM_UpdateDisableConfig\000"
 12098      55706461 
 12098      74654469 
 12098      7361626C 
 12098      65436F6E 
 12099              	.LASF260:
 12100 009a 54494D5F 		.ascii	"TIM_SelectOutputTrigger\000"
 12100      53656C65 
 12100      63744F75 
 12100      74707574 
 12100      54726967 
 12101              	.LASF142:
 12102 00b2 5F777269 		.ascii	"_write\000"
 12102      746500
 12103              	.LASF17:
 12104 00b9 696E7433 		.ascii	"int32_t\000"
 12104      325F7400 
 12105              	.LASF186:
 12106 00c1 5F617363 		.ascii	"_asctime_buf\000"
 12106      74696D65 
 12106      5F627566 
 12106      00
 12107              	.LASF168:
 12108 00ce 5F637674 		.ascii	"_cvtlen\000"
 12108      6C656E00 
 12109              	.LASF229:
ARM GAS  /tmp/ccNus05k.s 			page 266


 12110 00d6 54494D5F 		.ascii	"TIM_GetITStatus\000"
 12110      47657449 
 12110      54537461 
 12110      74757300 
 12111              	.LASF205:
 12112 00e6 5F756E75 		.ascii	"_unused\000"
 12112      73656400 
 12113              	.LASF115:
 12114 00ee 5F5F746D 		.ascii	"__tm\000"
 12114      00
 12115              	.LASF201:
 12116 00f3 5F776373 		.ascii	"_wcsrtombs_state\000"
 12116      72746F6D 
 12116      62735F73 
 12116      74617465 
 12116      00
 12117              	.LASF146:
 12118 0104 5F6E6275 		.ascii	"_nbuf\000"
 12118      6600
 12119              	.LASF116:
 12120 010a 5F5F746D 		.ascii	"__tm_sec\000"
 12120      5F736563 
 12120      00
 12121              	.LASF194:
 12122 0113 5F6C3634 		.ascii	"_l64a_buf\000"
 12122      615F6275 
 12122      6600
 12123              	.LASF304:
 12124 011d 54494D5F 		.ascii	"TIM_ForcedOC2Config\000"
 12124      466F7263 
 12124      65644F43 
 12124      32436F6E 
 12124      66696700 
 12125              	.LASF239:
 12126 0131 54494D5F 		.ascii	"TIM_SetIC4Prescaler\000"
 12126      53657449 
 12126      43345072 
 12126      65736361 
 12126      6C657200 
 12127              	.LASF220:
 12128 0145 746D7063 		.ascii	"tmpccmr1\000"
 12128      636D7231 
 12128      00
 12129              	.LASF215:
 12130 014e 746D7063 		.ascii	"tmpccmr2\000"
 12130      636D7232 
 12130      00
 12131              	.LASF311:
 12132 0157 54494D5F 		.ascii	"TIM_SelectInputTrigger\000"
 12132      53656C65 
 12132      6374496E 
 12132      70757454 
 12132      72696767 
 12133              	.LASF266:
 12134 016e 54494D5F 		.ascii	"TIM_UpdateRequestConfig\000"
 12134      55706461 
 12134      74655265 
ARM GAS  /tmp/ccNus05k.s 			page 267


 12134      71756573 
 12134      74436F6E 
 12135              	.LASF162:
 12136 0186 5F5F7364 		.ascii	"__sdidinit\000"
 12136      6964696E 
 12136      697400
 12137              	.LASF150:
 12138 0191 5F6C6F63 		.ascii	"_lock\000"
 12138      6B00
 12139              	.LASF361:
 12140 0197 2F686F6D 		.ascii	"/home/enbin/Documents/code/STM/stm32-quadrocopter\000"
 12140      652F656E 
 12140      62696E2F 
 12140      446F6375 
 12140      6D656E74 
 12141              	.LASF349:
 12142 01c9 69636F70 		.ascii	"icoppositepolarity\000"
 12142      706F7369 
 12142      7465706F 
 12142      6C617269 
 12142      747900
 12143              	.LASF182:
 12144 01dc 5F6D756C 		.ascii	"_mult\000"
 12144      7400
 12145              	.LASF73:
 12146 01e2 54494D5F 		.ascii	"TIM_OCNIdleState\000"
 12146      4F434E49 
 12146      646C6553 
 12146      74617465 
 12146      00
 12147              	.LASF57:
 12148 01f3 444D4152 		.ascii	"DMAR\000"
 12148      00
 12149              	.LASF353:
 12150 01f8 746D7063 		.ascii	"tmpccmrx\000"
 12150      636D7278 
 12150      00
 12151              	.LASF303:
 12152 0201 54494D5F 		.ascii	"TIM_ForcedOC3Config\000"
 12152      466F7263 
 12152      65644F43 
 12152      33436F6E 
 12152      66696700 
 12153              	.LASF299:
 12154 0215 54494D5F 		.ascii	"TIM_SelectCOM\000"
 12154      53656C65 
 12154      6374434F 
 12154      4D00
 12155              	.LASF46:
 12156 0223 43435231 		.ascii	"CCR1\000"
 12156      00
 12157              	.LASF48:
 12158 0228 43435232 		.ascii	"CCR2\000"
 12158      00
 12159              	.LASF50:
 12160 022d 43435233 		.ascii	"CCR3\000"
 12160      00
ARM GAS  /tmp/ccNus05k.s 			page 268


 12161              	.LASF52:
 12162 0232 43435234 		.ascii	"CCR4\000"
 12162      00
 12163              	.LASF2:
 12164 0237 5F5F7569 		.ascii	"__uint8_t\000"
 12164      6E74385F 
 12164      7400
 12165              	.LASF357:
 12166 0241 54494D5F 		.ascii	"TIM_OC1Init\000"
 12166      4F433149 
 12166      6E697400 
 12167              	.LASF269:
 12168 024d 54494D5F 		.ascii	"TIM_SelectOCxM\000"
 12168      53656C65 
 12168      63744F43 
 12168      784D00
 12169              	.LASF76:
 12170 025c 54494D5F 		.ascii	"TIM_ICPolarity\000"
 12170      4943506F 
 12170      6C617269 
 12170      747900
 12171              	.LASF125:
 12172 026b 5F6F6E5F 		.ascii	"_on_exit_args\000"
 12172      65786974 
 12172      5F617267 
 12172      7300
 12173              	.LASF251:
 12174 0279 436F6D70 		.ascii	"Compare1\000"
 12174      61726531 
 12174      00
 12175              	.LASF286:
 12176 0282 54494D5F 		.ascii	"TIM_ClearOC1Ref\000"
 12176      436C6561 
 12176      724F4331 
 12176      52656600 
 12177              	.LASF103:
 12178 0292 5F5F7763 		.ascii	"__wch\000"
 12178      6800
 12179              	.LASF138:
 12180 0298 5F66696C 		.ascii	"_file\000"
 12180      6500
 12181              	.LASF325:
 12182 029e 54494D5F 		.ascii	"TIM_TIxExternalCLKSource\000"
 12182      54497845 
 12182      78746572 
 12182      6E616C43 
 12182      4C4B536F 
 12183              	.LASF93:
 12184 02b7 477A5F6F 		.ascii	"Gz_offset\000"
 12184      66667365 
 12184      7400
 12185              	.LASF284:
 12186 02c1 54494D5F 		.ascii	"TIM_ClearOC3Ref\000"
 12186      436C6561 
 12186      724F4333 
 12186      52656600 
 12187              	.LASF354:
ARM GAS  /tmp/ccNus05k.s 			page 269


 12188 02d1 746D7063 		.ascii	"tmpcr2\000"
 12188      723200
 12189              	.LASF197:
 12190 02d8 5F6D6272 		.ascii	"_mbrlen_state\000"
 12190      6C656E5F 
 12190      73746174 
 12190      6500
 12191              	.LASF8:
 12192 02e6 6C6F6E67 		.ascii	"long int\000"
 12192      20696E74 
 12192      00
 12193              	.LASF206:
 12194 02ef 5F696D70 		.ascii	"_impure_ptr\000"
 12194      7572655F 
 12194      70747200 
 12195              	.LASF165:
 12196 02fb 5F726573 		.ascii	"_result_k\000"
 12196      756C745F 
 12196      6B00
 12197              	.LASF135:
 12198 0305 5F73697A 		.ascii	"_size\000"
 12198      6500
 12199              	.LASF257:
 12200 030b 54494D5F 		.ascii	"TIM_MasterSlaveMode\000"
 12200      4D617374 
 12200      6572536C 
 12200      6176654D 
 12200      6F646500 
 12201              	.LASF224:
 12202 031f 69747374 		.ascii	"itstatus\000"
 12202      61747573 
 12202      00
 12203              	.LASF301:
 12204 0328 54494D5F 		.ascii	"TIM_ForcedOC4Config\000"
 12204      466F7263 
 12204      65644F43 
 12204      34436F6E 
 12204      66696700 
 12205              	.LASF333:
 12206 033c 54494D5F 		.ascii	"TIM_DMABurstLength\000"
 12206      444D4142 
 12206      75727374 
 12206      4C656E67 
 12206      746800
 12207              	.LASF298:
 12208 034f 54494D5F 		.ascii	"TIM_SelectCCDMA\000"
 12208      53656C65 
 12208      63744343 
 12208      444D4100 
 12209              	.LASF187:
 12210 035f 5F6C6F63 		.ascii	"_localtime_buf\000"
 12210      616C7469 
 12210      6D655F62 
 12210      756600
 12211              	.LASF82:
 12212 036e 54494D5F 		.ascii	"TIM_OSSIState\000"
 12212      4F535349 
ARM GAS  /tmp/ccNus05k.s 			page 270


 12212      53746174 
 12212      6500
 12213              	.LASF108:
 12214 037c 5F666C6F 		.ascii	"_flock_t\000"
 12214      636B5F74 
 12214      00
 12215              	.LASF237:
 12216 0385 54494D5F 		.ascii	"TIM_SetClockDivision\000"
 12216      53657443 
 12216      6C6F636B 
 12216      44697669 
 12216      73696F6E 
 12217              	.LASF68:
 12218 039a 54494D5F 		.ascii	"TIM_OutputNState\000"
 12218      4F757470 
 12218      75744E53 
 12218      74617465 
 12218      00
 12219              	.LASF330:
 12220 03ab 54494D5F 		.ascii	"TIM_DMASource\000"
 12220      444D4153 
 12220      6F757263 
 12220      6500
 12221              	.LASF296:
 12222 03b9 54494D5F 		.ascii	"TIM_OC1PreloadConfig\000"
 12222      4F433150 
 12222      72656C6F 
 12222      6164436F 
 12222      6E666967 
 12223              	.LASF120:
 12224 03ce 5F5F746D 		.ascii	"__tm_mon\000"
 12224      5F6D6F6E 
 12224      00
 12225              	.LASF160:
 12226 03d7 5F637572 		.ascii	"_current_category\000"
 12226      72656E74 
 12226      5F636174 
 12226      65676F72 
 12226      7900
 12227              	.LASF88:
 12228 03e9 54494D5F 		.ascii	"TIM_BDTRInitTypeDef\000"
 12228      42445452 
 12228      496E6974 
 12228      54797065 
 12228      44656600 
 12229              	.LASF291:
 12230 03fd 54494D5F 		.ascii	"TIM_OC1FastConfig\000"
 12230      4F433146 
 12230      61737443 
 12230      6F6E6669 
 12230      6700
 12231              	.LASF184:
 12232 040f 5F756E75 		.ascii	"_unused_rand\000"
 12232      7365645F 
 12232      72616E64 
 12232      00
 12233              	.LASF0:
ARM GAS  /tmp/ccNus05k.s 			page 271


 12234 041c 7369676E 		.ascii	"signed char\000"
 12234      65642063 
 12234      68617200 
 12235              	.LASF313:
 12236 0428 54494D5F 		.ascii	"TIM_CounterModeConfig\000"
 12236      436F756E 
 12236      7465724D 
 12236      6F646543 
 12236      6F6E6669 
 12237              	.LASF14:
 12238 043e 75696E74 		.ascii	"uint8_t\000"
 12238      385F7400 
 12239              	.LASF350:
 12240 0446 69636F70 		.ascii	"icoppositeselection\000"
 12240      706F7369 
 12240      74657365 
 12240      6C656374 
 12240      696F6E00 
 12241              	.LASF156:
 12242 045a 5F737464 		.ascii	"_stdout\000"
 12242      6F757400 
 12243              	.LASF66:
 12244 0462 54494D5F 		.ascii	"TIM_OCMode\000"
 12244      4F434D6F 
 12244      646500
 12245              	.LASF309:
 12246 046d 54494D5F 		.ascii	"TIM_IC2Polarity\000"
 12246      49433250 
 12246      6F6C6172 
 12246      69747900 
 12247              	.LASF59:
 12248 047d 54494D5F 		.ascii	"TIM_TypeDef\000"
 12248      54797065 
 12248      44656600 
 12249              	.LASF218:
 12250 0489 5449335F 		.ascii	"TI3_Config\000"
 12250      436F6E66 
 12250      696700
 12251              	.LASF28:
 12252 0494 52455345 		.ascii	"RESERVED0\000"
 12252      52564544 
 12252      3000
 12253              	.LASF29:
 12254 049e 52455345 		.ascii	"RESERVED1\000"
 12254      52564544 
 12254      3100
 12255              	.LASF1:
 12256 04a8 756E7369 		.ascii	"unsigned char\000"
 12256      676E6564 
 12256      20636861 
 12256      7200
 12257              	.LASF33:
 12258 04b6 52455345 		.ascii	"RESERVED3\000"
 12258      52564544 
 12258      3300
 12259              	.LASF34:
 12260 04c0 52455345 		.ascii	"RESERVED4\000"
ARM GAS  /tmp/ccNus05k.s 			page 272


 12260      52564544 
 12260      3400
 12261              	.LASF35:
 12262 04ca 52455345 		.ascii	"RESERVED5\000"
 12262      52564544 
 12262      3500
 12263              	.LASF37:
 12264 04d4 52455345 		.ascii	"RESERVED6\000"
 12264      52564544 
 12264      3600
 12265              	.LASF39:
 12266 04de 52455345 		.ascii	"RESERVED7\000"
 12266      52564544 
 12266      3700
 12267              	.LASF41:
 12268 04e8 52455345 		.ascii	"RESERVED8\000"
 12268      52564544 
 12268      3800
 12269              	.LASF42:
 12270 04f2 52455345 		.ascii	"RESERVED9\000"
 12270      52564544 
 12270      3900
 12271              	.LASF69:
 12272 04fc 54494D5F 		.ascii	"TIM_Pulse\000"
 12272      50756C73 
 12272      6500
 12273              	.LASF264:
 12274 0506 54494D5F 		.ascii	"TIM_SelectHallSensor\000"
 12274      53656C65 
 12274      63744861 
 12274      6C6C5365 
 12274      6E736F72 
 12275              	.LASF153:
 12276 051b 5F726565 		.ascii	"_reent\000"
 12276      6E7400
 12277              	.LASF207:
 12278 0522 5F676C6F 		.ascii	"_global_impure_ptr\000"
 12278      62616C5F 
 12278      696D7075 
 12278      72655F70 
 12278      747200
 12279              	.LASF327:
 12280 0535 54494D5F 		.ascii	"TIM_ITRxExternalClockConfig\000"
 12280      49545278 
 12280      45787465 
 12280      726E616C 
 12280      436C6F63 
 12281              	.LASF348:
 12282 0551 54494D5F 		.ascii	"TIM_PWMIConfig\000"
 12282      50574D49 
 12282      436F6E66 
 12282      696700
 12283              	.LASF255:
 12284 0560 436F756E 		.ascii	"Counter\000"
 12284      74657200 
 12285              	.LASF31:
 12286 0568 52455345 		.ascii	"RESERVED2\000"
ARM GAS  /tmp/ccNus05k.s 			page 273


 12286      52564544 
 12286      3200
 12287              	.LASF36:
 12288 0572 43434D52 		.ascii	"CCMR1\000"
 12288      3100
 12289              	.LASF38:
 12290 0578 43434D52 		.ascii	"CCMR2\000"
 12290      3200
 12291              	.LASF175:
 12292 057e 63686172 		.ascii	"char\000"
 12292      00
 12293              	.LASF132:
 12294 0583 5F666E73 		.ascii	"_fns\000"
 12294      00
 12295              	.LASF89:
 12296 0588 6779726F 		.ascii	"gyro\000"
 12296      00
 12297              	.LASF77:
 12298 058d 54494D5F 		.ascii	"TIM_ICSelection\000"
 12298      49435365 
 12298      6C656374 
 12298      696F6E00 
 12299              	.LASF144:
 12300 059d 5F636C6F 		.ascii	"_close\000"
 12300      736500
 12301              	.LASF5:
 12302 05a4 5F5F7569 		.ascii	"__uint16_t\000"
 12302      6E743136 
 12302      5F7400
 12303              	.LASF306:
 12304 05af 54494D5F 		.ascii	"TIM_EncoderInterfaceConfig\000"
 12304      456E636F 
 12304      64657249 
 12304      6E746572 
 12304      66616365 
 12305              	.LASF155:
 12306 05ca 5F737464 		.ascii	"_stdin\000"
 12306      696E00
 12307              	.LASF323:
 12308 05d1 54494D5F 		.ascii	"TIM_ETRClockMode1Config\000"
 12308      45545243 
 12308      6C6F636B 
 12308      4D6F6465 
 12308      31436F6E 
 12309              	.LASF307:
 12310 05e9 54494D5F 		.ascii	"TIM_EncoderMode\000"
 12310      456E636F 
 12310      6465724D 
 12310      6F646500 
 12311              	.LASF83:
 12312 05f9 54494D5F 		.ascii	"TIM_LOCKLevel\000"
 12312      4C4F434B 
 12312      4C657665 
 12312      6C00
 12313              	.LASF129:
 12314 0607 5F69735F 		.ascii	"_is_cxa\000"
 12314      63786100 
ARM GAS  /tmp/ccNus05k.s 			page 274


 12315              	.LASF341:
 12316 060f 54494D5F 		.ascii	"TIM_ICStructInit\000"
 12316      49435374 
 12316      72756374 
 12316      496E6974 
 12316      00
 12317              	.LASF358:
 12318 0620 54494D5F 		.ascii	"TIM_TimeBaseInit\000"
 12318      54696D65 
 12318      42617365 
 12318      496E6974 
 12318      00
 12319              	.LASF254:
 12320 0631 54494D5F 		.ascii	"TIM_SetCounter\000"
 12320      53657443 
 12320      6F756E74 
 12320      657200
 12321              	.LASF334:
 12322 0640 54494D5F 		.ascii	"TIM_GenerateEvent\000"
 12322      47656E65 
 12322      72617465 
 12322      4576656E 
 12322      7400
 12323              	.LASF316:
 12324 0652 50726573 		.ascii	"Prescaler\000"
 12324      63616C65 
 12324      7200
 12325              	.LASF60:
 12326 065c 54494D5F 		.ascii	"TIM_Prescaler\000"
 12326      50726573 
 12326      63616C65 
 12326      7200
 12327              	.LASF332:
 12328 066a 54494D5F 		.ascii	"TIM_DMABase\000"
 12328      444D4142 
 12328      61736500 
 12329              	.LASF227:
 12330 0676 54494D5F 		.ascii	"TIM_ClearFlag\000"
 12330      436C6561 
 12330      72466C61 
 12330      6700
 12331              	.LASF240:
 12332 0684 54494D5F 		.ascii	"TIM_ICPSC\000"
 12332      49435053 
 12332      4300
 12333              	.LASF322:
 12334 068e 54494D5F 		.ascii	"TIM_ETRClockMode2Config\000"
 12334      45545243 
 12334      6C6F636B 
 12334      4D6F6465 
 12334      32436F6E 
 12335              	.LASF81:
 12336 06a6 54494D5F 		.ascii	"TIM_OSSRState\000"
 12336      4F535352 
 12336      53746174 
 12336      6500
 12337              	.LASF63:
ARM GAS  /tmp/ccNus05k.s 			page 275


 12338 06b4 54494D5F 		.ascii	"TIM_ClockDivision\000"
 12338      436C6F63 
 12338      6B446976 
 12338      6973696F 
 12338      6E00
 12339              	.LASF288:
 12340 06c6 54494D5F 		.ascii	"TIM_OCFast\000"
 12340      4F434661 
 12340      737400
 12341              	.LASF140:
 12342 06d1 5F636F6F 		.ascii	"_cookie\000"
 12342      6B696500 
 12343              	.LASF113:
 12344 06d9 5F776473 		.ascii	"_wds\000"
 12344      00
 12345              	.LASF172:
 12346 06de 5F736967 		.ascii	"_sig_func\000"
 12346      5F66756E 
 12346      6300
 12347              	.LASF148:
 12348 06e8 5F6F6666 		.ascii	"_offset\000"
 12348      73657400 
 12349              	.LASF169:
 12350 06f0 5F637674 		.ascii	"_cvtbuf\000"
 12350      62756600 
 12351              	.LASF277:
 12352 06f8 54494D5F 		.ascii	"TIM_OC3PolarityConfig\000"
 12352      4F433350 
 12352      6F6C6172 
 12352      69747943 
 12352      6F6E6669 
 12353              	.LASF324:
 12354 070e 54494D5F 		.ascii	"TIM_TIxExternalClockConfig\000"
 12354      54497845 
 12354      78746572 
 12354      6E616C43 
 12354      6C6F636B 
 12355              	.LASF250:
 12356 0729 54494D5F 		.ascii	"TIM_SetCompare1\000"
 12356      53657443 
 12356      6F6D7061 
 12356      72653100 
 12357              	.LASF248:
 12358 0739 54494D5F 		.ascii	"TIM_SetCompare2\000"
 12358      53657443 
 12358      6F6D7061 
 12358      72653200 
 12359              	.LASF79:
 12360 0749 54494D5F 		.ascii	"TIM_ICFilter\000"
 12360      49434669 
 12360      6C746572 
 12360      00
 12361              	.LASF62:
 12362 0756 54494D5F 		.ascii	"TIM_Period\000"
 12362      50657269 
 12362      6F6400
 12363              	.LASF213:
ARM GAS  /tmp/ccNus05k.s 			page 276


 12364 0761 5F5F6664 		.ascii	"__fdlib_version\000"
 12364      6C69625F 
 12364      76657273 
 12364      696F6E00 
 12365              	.LASF166:
 12366 0771 5F703573 		.ascii	"_p5s\000"
 12366      00
 12367              	.LASF10:
 12368 0776 6C6F6E67 		.ascii	"long unsigned int\000"
 12368      20756E73 
 12368      69676E65 
 12368      6420696E 
 12368      7400
 12369              	.LASF136:
 12370 0788 5F5F7346 		.ascii	"__sFILE\000"
 12370      494C4500 
 12371              	.LASF32:
 12372 0790 44494552 		.ascii	"DIER\000"
 12372      00
 12373              	.LASF152:
 12374 0795 5F666C61 		.ascii	"_flags2\000"
 12374      67733200 
 12375              	.LASF21:
 12376 079d 53797374 		.ascii	"SystemCoreClock\000"
 12376      656D436F 
 12376      7265436C 
 12376      6F636B00 
 12377              	.LASF356:
 12378 07ad 54494D5F 		.ascii	"TIM_OC2Init\000"
 12378      4F433249 
 12378      6E697400 
 12379              	.LASF272:
 12380 07b9 54494D5F 		.ascii	"TIM_CCxN\000"
 12380      4343784E 
 12380      00
 12381              	.LASF99:
 12382 07c2 5F4C4F43 		.ascii	"_LOCK_RECURSIVE_T\000"
 12382      4B5F5245 
 12382      43555253 
 12382      4956455F 
 12382      5400
 12383              	.LASF67:
 12384 07d4 54494D5F 		.ascii	"TIM_OutputState\000"
 12384      4F757470 
 12384      75745374 
 12384      61746500 
 12385              	.LASF154:
 12386 07e4 5F657272 		.ascii	"_errno\000"
 12386      6E6F00
 12387              	.LASF94:
 12388 07eb 41636331 		.ascii	"Acc1G_Values\000"
 12388      475F5661 
 12388      6C756573 
 12388      00
 12389              	.LASF97:
 12390 07f8 526F6C6C 		.ascii	"Roll\000"
 12390      00
ARM GAS  /tmp/ccNus05k.s 			page 277


 12391              	.LASF195:
 12392 07fd 5F736967 		.ascii	"_signal_buf\000"
 12392      6E616C5F 
 12392      62756600 
 12393              	.LASF78:
 12394 0809 54494D5F 		.ascii	"TIM_ICPrescaler\000"
 12394      49435072 
 12394      65736361 
 12394      6C657200 
 12395              	.LASF331:
 12396 0819 54494D5F 		.ascii	"TIM_DMAConfig\000"
 12396      444D4143 
 12396      6F6E6669 
 12396      6700
 12397              	.LASF230:
 12398 0827 54494D5F 		.ascii	"TIM_GetFlagStatus\000"
 12398      47657446 
 12398      6C616753 
 12398      74617475 
 12398      7300
 12399              	.LASF261:
 12400 0839 54494D5F 		.ascii	"TIM_TRGOSource\000"
 12400      5452474F 
 12400      536F7572 
 12400      636500
 12401              	.LASF287:
 12402 0848 54494D5F 		.ascii	"TIM_OC4FastConfig\000"
 12402      4F433446 
 12402      61737443 
 12402      6F6E6669 
 12402      6700
 12403              	.LASF114:
 12404 085a 5F426967 		.ascii	"_Bigint\000"
 12404      696E7400 
 12405              	.LASF328:
 12406 0862 54494D5F 		.ascii	"TIM_InternalClockConfig\000"
 12406      496E7465 
 12406      726E616C 
 12406      436C6F63 
 12406      6B436F6E 
 12407              	.LASF111:
 12408 087a 5F6D6178 		.ascii	"_maxwds\000"
 12408      77647300 
 12409              	.LASF342:
 12410 0882 54494D5F 		.ascii	"TIM_ICInitStruct\000"
 12410      4943496E 
 12410      69745374 
 12410      72756374 
 12410      00
 12411              	.LASF84:
 12412 0893 54494D5F 		.ascii	"TIM_DeadTime\000"
 12412      44656164 
 12412      54696D65 
 12412      00
 12413              	.LASF318:
 12414 08a0 54494D5F 		.ascii	"TIM_ETRConfig\000"
 12414      45545243 
ARM GAS  /tmp/ccNus05k.s 			page 278


 12414      6F6E6669 
 12414      6700
 12415              	.LASF163:
 12416 08ae 5F5F636C 		.ascii	"__cleanup\000"
 12416      65616E75 
 12416      7000
 12417              	.LASF171:
 12418 08b8 5F617465 		.ascii	"_atexit0\000"
 12418      78697430 
 12418      00
 12419              	.LASF289:
 12420 08c1 54494D5F 		.ascii	"TIM_OC3FastConfig\000"
 12420      4F433346 
 12420      61737443 
 12420      6F6E6669 
 12420      6700
 12421              	.LASF210:
 12422 08d3 5F5F6664 		.ascii	"__fdlibm_svid\000"
 12422      6C69626D 
 12422      5F737669 
 12422      6400
 12423              	.LASF9:
 12424 08e1 5F5F7569 		.ascii	"__uint32_t\000"
 12424      6E743332 
 12424      5F7400
 12425              	.LASF159:
 12426 08ec 5F656D65 		.ascii	"_emergency\000"
 12426      7267656E 
 12426      637900
 12427              	.LASF292:
 12428 08f7 54494D5F 		.ascii	"TIM_OC4PreloadConfig\000"
 12428      4F433450 
 12428      72656C6F 
 12428      6164436F 
 12428      6E666967 
 12429              	.LASF11:
 12430 090c 6C6F6E67 		.ascii	"long long int\000"
 12430      206C6F6E 
 12430      6720696E 
 12430      7400
 12431              	.LASF271:
 12432 091a 54494D5F 		.ascii	"TIM_CCxNCmd\000"
 12432      4343784E 
 12432      436D6400 
 12433              	.LASF290:
 12434 0926 54494D5F 		.ascii	"TIM_OC2FastConfig\000"
 12434      4F433246 
 12434      61737443 
 12434      6F6E6669 
 12434      6700
 12435              	.LASF178:
 12436 0938 5F6E696F 		.ascii	"_niobs\000"
 12436      627300
 12437              	.LASF263:
 12438 093f 54494D5F 		.ascii	"TIM_OPMode\000"
 12438      4F504D6F 
 12438      646500
ARM GAS  /tmp/ccNus05k.s 			page 279


 12439              	.LASF92:
 12440 094a 47795F6F 		.ascii	"Gy_offset\000"
 12440      66667365 
 12440      7400
 12441              	.LASF319:
 12442 0954 54494D5F 		.ascii	"TIM_ExtTRGPrescaler\000"
 12442      45787454 
 12442      52475072 
 12442      65736361 
 12442      6C657200 
 12443              	.LASF173:
 12444 0968 5F5F7367 		.ascii	"__sglue\000"
 12444      6C756500 
 12445              	.LASF312:
 12446 0970 54494D5F 		.ascii	"TIM_InputTriggerSource\000"
 12446      496E7075 
 12446      74547269 
 12446      67676572 
 12446      536F7572 
 12447              	.LASF204:
 12448 0987 5F6E6D61 		.ascii	"_nmalloc\000"
 12448      6C6C6F63 
 12448      00
 12449              	.LASF208:
 12450 0990 646F7562 		.ascii	"double\000"
 12450      6C6500
 12451              	.LASF64:
 12452 0997 54494D5F 		.ascii	"TIM_RepetitionCounter\000"
 12452      52657065 
 12452      74697469 
 12452      6F6E436F 
 12452      756E7465 
 12453              	.LASF188:
 12454 09ad 5F67616D 		.ascii	"_gamma_signgam\000"
 12454      6D615F73 
 12454      69676E67 
 12454      616D00
 12455              	.LASF225:
 12456 09bc 6974656E 		.ascii	"itenable\000"
 12456      61626C65 
 12456      00
 12457              	.LASF300:
 12458 09c5 54494D5F 		.ascii	"TIM_ARRPreloadConfig\000"
 12458      41525250 
 12458      72656C6F 
 12458      6164436F 
 12458      6E666967 
 12459              	.LASF161:
 12460 09da 5F637572 		.ascii	"_current_locale\000"
 12460      72656E74 
 12460      5F6C6F63 
 12460      616C6500 
 12461              	.LASF167:
 12462 09ea 5F667265 		.ascii	"_freelist\000"
 12462      656C6973 
 12462      7400
 12463              	.LASF179:
ARM GAS  /tmp/ccNus05k.s 			page 280


 12464 09f4 5F696F62 		.ascii	"_iobs\000"
 12464      7300
 12465              	.LASF177:
 12466 09fa 5F676C75 		.ascii	"_glue\000"
 12466      6500
 12467              	.LASF20:
 12468 0a00 49544D5F 		.ascii	"ITM_RxBuffer\000"
 12468      52784275 
 12468      66666572 
 12468      00
 12469              	.LASF112:
 12470 0a0d 5F736967 		.ascii	"_sign\000"
 12470      6E00
 12471              	.LASF315:
 12472 0a13 54494D5F 		.ascii	"TIM_PrescalerConfig\000"
 12472      50726573 
 12472      63616C65 
 12472      72436F6E 
 12472      66696700 
 12473              	.LASF95:
 12474 0a27 666C6F61 		.ascii	"float\000"
 12474      7400
 12475              	.LASF13:
 12476 0a2d 756E7369 		.ascii	"unsigned int\000"
 12476      676E6564 
 12476      20696E74 
 12476      00
 12477              	.LASF241:
 12478 0a3a 54494D5F 		.ascii	"TIM_SetIC3Prescaler\000"
 12478      53657449 
 12478      43335072 
 12478      65736361 
 12478      6C657200 
 12479              	.LASF273:
 12480 0a4e 54494D5F 		.ascii	"TIM_CCxCmd\000"
 12480      43437843 
 12480      6D6400
 12481              	.LASF265:
 12482 0a59 4E657753 		.ascii	"NewState\000"
 12482      74617465 
 12482      00
 12483              	.LASF202:
 12484 0a62 5F685F65 		.ascii	"_h_errno\000"
 12484      72726E6F 
 12484      00
 12485              	.LASF90:
 12486 0a6b 61636365 		.ascii	"accel\000"
 12486      6C00
 12487              	.LASF228:
 12488 0a71 54494D5F 		.ascii	"TIM_FLAG\000"
 12488      464C4147 
 12488      00
 12489              	.LASF317:
 12490 0a7a 54494D5F 		.ascii	"TIM_PSCReloadMode\000"
 12490      50534352 
 12490      656C6F61 
 12490      644D6F64 
ARM GAS  /tmp/ccNus05k.s 			page 281


 12490      6500
 12491              	.LASF275:
 12492 0a8c 54494D5F 		.ascii	"TIM_OC4PolarityConfig\000"
 12492      4F433450 
 12492      6F6C6172 
 12492      69747943 
 12492      6F6E6669 
 12493              	.LASF200:
 12494 0aa2 5F776372 		.ascii	"_wcrtomb_state\000"
 12494      746F6D62 
 12494      5F737461 
 12494      746500
 12495              	.LASF339:
 12496 0ab1 54494D5F 		.ascii	"TIM_BDTRStructInit\000"
 12496      42445452 
 12496      53747275 
 12496      6374496E 
 12496      697400
 12497              	.LASF326:
 12498 0ac4 49434669 		.ascii	"ICFilter\000"
 12498      6C746572 
 12498      00
 12499              	.LASF343:
 12500 0acd 54494D5F 		.ascii	"TIM_OCStructInit\000"
 12500      4F435374 
 12500      72756374 
 12500      496E6974 
 12500      00
 12501              	.LASF119:
 12502 0ade 5F5F746D 		.ascii	"__tm_mday\000"
 12502      5F6D6461 
 12502      7900
 12503              	.LASF219:
 12504 0ae8 5449325F 		.ascii	"TI2_Config\000"
 12504      436F6E66 
 12504      696700
 12505              	.LASF170:
 12506 0af3 5F6E6577 		.ascii	"_new\000"
 12506      00
 12507              	.LASF145:
 12508 0af8 5F756275 		.ascii	"_ubuf\000"
 12508      6600
 12509              	.LASF157:
 12510 0afe 5F737464 		.ascii	"_stderr\000"
 12510      65727200 
 12511              	.LASF193:
 12512 0b06 5F776374 		.ascii	"_wctomb_state\000"
 12512      6F6D625F 
 12512      73746174 
 12512      6500
 12513              	.LASF280:
 12514 0b14 54494D5F 		.ascii	"TIM_OC1NPolarityConfig\000"
 12514      4F43314E 
 12514      506F6C61 
 12514      72697479 
 12514      436F6E66 
 12515              	.LASF151:
ARM GAS  /tmp/ccNus05k.s 			page 282


 12516 0b2b 5F6D6273 		.ascii	"_mbstate\000"
 12516      74617465 
 12516      00
 12517              	.LASF189:
 12518 0b34 5F72616E 		.ascii	"_rand_next\000"
 12518      645F6E65 
 12518      787400
 12519              	.LASF137:
 12520 0b3f 5F666C61 		.ascii	"_flags\000"
 12520      677300
 12521              	.LASF321:
 12522 0b46 45787454 		.ascii	"ExtTRGFilter\000"
 12522      52474669 
 12522      6C746572 
 12522      00
 12523              	.LASF130:
 12524 0b53 5F617465 		.ascii	"_atexit\000"
 12524      78697400 
 12525              	.LASF262:
 12526 0b5b 54494D5F 		.ascii	"TIM_SelectOnePulseMode\000"
 12526      53656C65 
 12526      63744F6E 
 12526      6550756C 
 12526      73654D6F 
 12527              	.LASF302:
 12528 0b72 54494D5F 		.ascii	"TIM_ForcedAction\000"
 12528      466F7263 
 12528      65644163 
 12528      74696F6E 
 12528      00
 12529              	.LASF105:
 12530 0b83 5F5F636F 		.ascii	"__count\000"
 12530      756E7400 
 12531              	.LASF61:
 12532 0b8b 54494D5F 		.ascii	"TIM_CounterMode\000"
 12532      436F756E 
 12532      7465724D 
 12532      6F646500 
 12533              	.LASF122:
 12534 0b9b 5F5F746D 		.ascii	"__tm_wday\000"
 12534      5F776461 
 12534      7900
 12535              	.LASF285:
 12536 0ba5 54494D5F 		.ascii	"TIM_ClearOC2Ref\000"
 12536      436C6561 
 12536      724F4332 
 12536      52656600 
 12537              	.LASF25:
 12538 0bb5 44495341 		.ascii	"DISABLE\000"
 12538      424C4500 
 12539              	.LASF24:
 12540 0bbd 49545374 		.ascii	"ITStatus\000"
 12540      61747573 
 12540      00
 12541              	.LASF270:
 12542 0bc6 746D7031 		.ascii	"tmp1\000"
 12542      00
ARM GAS  /tmp/ccNus05k.s 			page 283


 12543              	.LASF98:
 12544 0bcb 6C6F6E67 		.ascii	"long double\000"
 12544      20646F75 
 12544      626C6500 
 12545              	.LASF123:
 12546 0bd7 5F5F746D 		.ascii	"__tm_yday\000"
 12546      5F796461 
 12546      7900
 12547              	.LASF282:
 12548 0be1 54494D5F 		.ascii	"TIM_ClearOC4Ref\000"
 12548      436C6561 
 12548      724F4334 
 12548      52656600 
 12549              	.LASF252:
 12550 0bf1 54494D5F 		.ascii	"TIM_SetAutoreload\000"
 12550      53657441 
 12550      75746F72 
 12550      656C6F61 
 12550      6400
 12551              	.LASF72:
 12552 0c03 54494D5F 		.ascii	"TIM_OCIdleState\000"
 12552      4F434964 
 12552      6C655374 
 12552      61746500 
 12553              	.LASF253:
 12554 0c13 4175746F 		.ascii	"Autoreload\000"
 12554      72656C6F 
 12554      616400
 12555              	.LASF352:
 12556 0c1e 54494D5F 		.ascii	"TIM_OC4Init\000"
 12556      4F433449 
 12556      6E697400 
 12557              	.LASF181:
 12558 0c2a 5F736565 		.ascii	"_seed\000"
 12558      6400
 12559              	.LASF143:
 12560 0c30 5F736565 		.ascii	"_seek\000"
 12560      6B00
 12561              	.LASF314:
 12562 0c36 746D7063 		.ascii	"tmpcr1\000"
 12562      723100
 12563              	.LASF101:
 12564 0c3d 5F66706F 		.ascii	"_fpos_t\000"
 12564      735F7400 
 12565              	.LASF104:
 12566 0c45 5F5F7763 		.ascii	"__wchb\000"
 12566      686200
 12567              	.LASF192:
 12568 0c4c 5F6D6274 		.ascii	"_mbtowc_state\000"
 12568      6F77635F 
 12568      73746174 
 12568      6500
 12569              	.LASF293:
 12570 0c5a 54494D5F 		.ascii	"TIM_OCPreload\000"
 12570      4F435072 
 12570      656C6F61 
 12570      6400
ARM GAS  /tmp/ccNus05k.s 			page 284


 12571              	.LASF27:
 12572 0c68 46756E63 		.ascii	"FunctionalState\000"
 12572      74696F6E 
 12572      616C5374 
 12572      61746500 
 12573              	.LASF256:
 12574 0c78 54494D5F 		.ascii	"TIM_SelectMasterSlaveMode\000"
 12574      53656C65 
 12574      63744D61 
 12574      73746572 
 12574      536C6176 
 12575              	.LASF281:
 12576 0c92 54494D5F 		.ascii	"TIM_OC1PolarityConfig\000"
 12576      4F433150 
 12576      6F6C6172 
 12576      69747943 
 12576      6F6E6669 
 12577              	.LASF12:
 12578 0ca8 6C6F6E67 		.ascii	"long long unsigned int\000"
 12578      206C6F6E 
 12578      6720756E 
 12578      7369676E 
 12578      65642069 
 12579              	.LASF16:
 12580 0cbf 75696E74 		.ascii	"uint16_t\000"
 12580      31365F74 
 12580      00
 12581              	.LASF242:
 12582 0cc8 54494D5F 		.ascii	"TIM_SetIC2Prescaler\000"
 12582      53657449 
 12582      43325072 
 12582      65736361 
 12582      6C657200 
 12583              	.LASF127:
 12584 0cdc 5F64736F 		.ascii	"_dso_handle\000"
 12584      5F68616E 
 12584      646C6500 
 12585              	.LASF180:
 12586 0ce8 5F72616E 		.ascii	"_rand48\000"
 12586      64343800 
 12587              	.LASF345:
 12588 0cf0 54494D5F 		.ascii	"TIM_TimeBaseStructInit\000"
 12588      54696D65 
 12588      42617365 
 12588      53747275 
 12588      6374496E 
 12589              	.LASF43:
 12590 0d07 52455345 		.ascii	"RESERVED10\000"
 12590      52564544 
 12590      313000
 12591              	.LASF40:
 12592 0d12 43434552 		.ascii	"CCER\000"
 12592      00
 12593              	.LASF45:
 12594 0d17 52455345 		.ascii	"RESERVED12\000"
 12594      52564544 
 12594      313200
ARM GAS  /tmp/ccNus05k.s 			page 285


 12595              	.LASF47:
 12596 0d22 52455345 		.ascii	"RESERVED13\000"
 12596      52564544 
 12596      313300
 12597              	.LASF49:
 12598 0d2d 52455345 		.ascii	"RESERVED14\000"
 12598      52564544 
 12598      313400
 12599              	.LASF51:
 12600 0d38 52455345 		.ascii	"RESERVED15\000"
 12600      52564544 
 12600      313500
 12601              	.LASF53:
 12602 0d43 52455345 		.ascii	"RESERVED16\000"
 12602      52564544 
 12602      313600
 12603              	.LASF55:
 12604 0d4e 52455345 		.ascii	"RESERVED17\000"
 12604      52564544 
 12604      313700
 12605              	.LASF56:
 12606 0d59 52455345 		.ascii	"RESERVED18\000"
 12606      52564544 
 12606      313800
 12607              	.LASF58:
 12608 0d64 52455345 		.ascii	"RESERVED19\000"
 12608      52564544 
 12608      313900
 12609              	.LASF362:
 12610 0d6f 5F5F6664 		.ascii	"__fdlibm_version\000"
 12610      6C69626D 
 12610      5F766572 
 12610      73696F6E 
 12610      00
 12611              	.LASF147:
 12612 0d80 5F626C6B 		.ascii	"_blksize\000"
 12612      73697A65 
 12612      00
 12613              	.LASF294:
 12614 0d89 54494D5F 		.ascii	"TIM_OC3PreloadConfig\000"
 12614      4F433350 
 12614      72656C6F 
 12614      6164436F 
 12614      6E666967 
 12615              	.LASF70:
 12616 0d9e 54494D5F 		.ascii	"TIM_OCPolarity\000"
 12616      4F43506F 
 12616      6C617269 
 12616      747900
 12617              	.LASF134:
 12618 0dad 5F626173 		.ascii	"_base\000"
 12618      6500
 12619              	.LASF185:
 12620 0db3 5F737472 		.ascii	"_strtok_last\000"
 12620      746F6B5F 
 12620      6C617374 
 12620      00
ARM GAS  /tmp/ccNus05k.s 			page 286


 12621              	.LASF198:
 12622 0dc0 5F6D6272 		.ascii	"_mbrtowc_state\000"
 12622      746F7763 
 12622      5F737461 
 12622      746500
 12623              	.LASF340:
 12624 0dcf 54494D5F 		.ascii	"TIM_BDTRInitStruct\000"
 12624      42445452 
 12624      496E6974 
 12624      53747275 
 12624      637400
 12625              	.LASF344:
 12626 0de2 54494D5F 		.ascii	"TIM_OCInitStruct\000"
 12626      4F43496E 
 12626      69745374 
 12626      72756374 
 12626      00
 12627              	.LASF30:
 12628 0df3 534D4352 		.ascii	"SMCR\000"
 12628      00
 12629              	.LASF176:
 12630 0df8 5F5F4649 		.ascii	"__FILE\000"
 12630      4C4500
 12631              	.LASF3:
 12632 0dff 5F5F696E 		.ascii	"__int16_t\000"
 12632      7431365F 
 12632      7400
 12633              	.LASF22:
 12634 0e09 52455345 		.ascii	"RESET\000"
 12634      5400
 12635              	.LASF107:
 12636 0e0f 5F6D6273 		.ascii	"_mbstate_t\000"
 12636      74617465 
 12636      5F7400
 12637              	.LASF249:
 12638 0e1a 436F6D70 		.ascii	"Compare2\000"
 12638      61726532 
 12638      00
 12639              	.LASF247:
 12640 0e23 436F6D70 		.ascii	"Compare3\000"
 12640      61726533 
 12640      00
 12641              	.LASF245:
 12642 0e2c 436F6D70 		.ascii	"Compare4\000"
 12642      61726534 
 12642      00
 12643              	.LASF190:
 12644 0e35 5F723438 		.ascii	"_r48\000"
 12644      00
 12645              	.LASF102:
 12646 0e3a 77696E74 		.ascii	"wint_t\000"
 12646      5F7400
 12647              	.LASF276:
 12648 0e41 54494D5F 		.ascii	"TIM_OC3NPolarityConfig\000"
 12648      4F43334E 
 12648      506F6C61 
 12648      72697479 
ARM GAS  /tmp/ccNus05k.s 			page 287


 12648      436F6E66 
 12649              	.LASF110:
 12650 0e58 5F6E6578 		.ascii	"_next\000"
 12650      7400
 12651              	.LASF149:
 12652 0e5e 5F646174 		.ascii	"_data\000"
 12652      6100
 12653              	.LASF87:
 12654 0e64 54494D5F 		.ascii	"TIM_AutomaticOutput\000"
 12654      4175746F 
 12654      6D617469 
 12654      634F7574 
 12654      70757400 
 12655              	.LASF347:
 12656 0e78 54494D5F 		.ascii	"TIM_BDTRConfig\000"
 12656      42445452 
 12656      436F6E66 
 12656      696700
 12657              	.LASF23:
 12658 0e87 466C6167 		.ascii	"FlagStatus\000"
 12658      53746174 
 12658      757300
 12659              	.LASF274:
 12660 0e92 54494D5F 		.ascii	"TIM_CCx\000"
 12660      43437800 
 12661              	.LASF236:
 12662 0e9a 54494D5F 		.ascii	"TIM_GetCapture1\000"
 12662      47657443 
 12662      61707475 
 12662      72653100 
 12663              	.LASF235:
 12664 0eaa 54494D5F 		.ascii	"TIM_GetCapture2\000"
 12664      47657443 
 12664      61707475 
 12664      72653200 
 12665              	.LASF234:
 12666 0eba 54494D5F 		.ascii	"TIM_GetCapture3\000"
 12666      47657443 
 12666      61707475 
 12666      72653300 
 12667              	.LASF233:
 12668 0eca 54494D5F 		.ascii	"TIM_GetCapture4\000"
 12668      47657443 
 12668      61707475 
 12668      72653400 
 12669              	.LASF214:
 12670 0eda 54494D78 		.ascii	"TIMx\000"
 12670      00
 12671              	.LASF336:
 12672 0edf 54494D5F 		.ascii	"TIM_ITConfig\000"
 12672      4954436F 
 12672      6E666967 
 12672      00
 12673              	.LASF212:
 12674 0eec 5F5F6664 		.ascii	"__fdlibm_posix\000"
 12674      6C69626D 
 12674      5F706F73 
ARM GAS  /tmp/ccNus05k.s 			page 288


 12674      697800
 12675              	.LASF191:
 12676 0efb 5F6D626C 		.ascii	"_mblen_state\000"
 12676      656E5F73 
 12676      74617465 
 12676      00
 12677              	.LASF4:
 12678 0f08 73686F72 		.ascii	"short int\000"
 12678      7420696E 
 12678      7400
 12679              	.LASF232:
 12680 0f12 54494D5F 		.ascii	"TIM_GetCounter\000"
 12680      47657443 
 12680      6F756E74 
 12680      657200
 12681              	.LASF211:
 12682 0f21 5F5F6664 		.ascii	"__fdlibm_xopen\000"
 12682      6C69626D 
 12682      5F786F70 
 12682      656E00
 12683              	.LASF320:
 12684 0f30 54494D5F 		.ascii	"TIM_ExtTRGPolarity\000"
 12684      45787454 
 12684      5247506F 
 12684      6C617269 
 12684      747900
 12685              	.LASF355:
 12686 0f43 54494D5F 		.ascii	"TIM_OC3Init\000"
 12686      4F433349 
 12686      6E697400 
 12687              	.LASF351:
 12688 0f4f 54494D5F 		.ascii	"TIM_ICInit\000"
 12688      4943496E 
 12688      697400
 12689              	.LASF15:
 12690 0f5a 696E7431 		.ascii	"int16_t\000"
 12690      365F7400 
 12691              	.LASF363:
 12692 0f62 54494D5F 		.ascii	"TIM_DeInit\000"
 12692      4465496E 
 12692      697400
 12693              	.LASF128:
 12694 0f6d 5F666E74 		.ascii	"_fntypes\000"
 12694      79706573 
 12694      00
 12695              	.LASF86:
 12696 0f76 54494D5F 		.ascii	"TIM_BreakPolarity\000"
 12696      42726561 
 12696      6B506F6C 
 12696      61726974 
 12696      7900
 12697              	.LASF267:
 12698 0f88 54494D5F 		.ascii	"TIM_UpdateSource\000"
 12698      55706461 
 12698      7465536F 
 12698      75726365 
 12698      00
ARM GAS  /tmp/ccNus05k.s 			page 289


 12699              	.LASF223:
 12700 0f99 62697473 		.ascii	"bitstatus\000"
 12700      74617475 
 12700      7300
 12701              	.LASF26:
 12702 0fa3 454E4142 		.ascii	"ENABLE\000"
 12702      4C4500
 12703              	.LASF121:
 12704 0faa 5F5F746D 		.ascii	"__tm_year\000"
 12704      5F796561 
 12704      7200
 12705              	.LASF226:
 12706 0fb4 54494D5F 		.ascii	"TIM_ClearITPendingBit\000"
 12706      436C6561 
 12706      72495450 
 12706      656E6469 
 12706      6E674269 
 12707              	.LASF217:
 12708 0fca 5449345F 		.ascii	"TI4_Config\000"
 12708      436F6E66 
 12708      696700
 12709              	.LASF139:
 12710 0fd5 5F6C6266 		.ascii	"_lbfsize\000"
 12710      73697A65 
 12710      00
 12711              	.LASF80:
 12712 0fde 54494D5F 		.ascii	"TIM_ICInitTypeDef\000"
 12712      4943496E 
 12712      69745479 
 12712      70654465 
 12712      6600
 12713              	.LASF158:
 12714 0ff0 5F696E63 		.ascii	"_inc\000"
 12714      00
 12715              	.LASF131:
 12716 0ff5 5F696E64 		.ascii	"_ind\000"
 12716      00
 12717              	.LASF91:
 12718 0ffa 47785F6F 		.ascii	"Gx_offset\000"
 12718      66667365 
 12718      7400
 12719              	.LASF338:
 12720 1004 54494D5F 		.ascii	"TIM_Cmd\000"
 12720      436D6400 
 12721              	.LASF209:
 12722 100c 5F5F6664 		.ascii	"__fdlibm_ieee\000"
 12722      6C69626D 
 12722      5F696565 
 12722      6500
 12723              	.LASF133:
 12724 101a 5F5F7362 		.ascii	"__sbuf\000"
 12724      756600
 12725              	.LASF246:
 12726 1021 54494D5F 		.ascii	"TIM_SetCompare3\000"
 12726      53657443 
 12726      6F6D7061 
 12726      72653300 
ARM GAS  /tmp/ccNus05k.s 			page 290


 12727              	.LASF244:
 12728 1031 54494D5F 		.ascii	"TIM_SetCompare4\000"
 12728      53657443 
 12728      6F6D7061 
 12728      72653400 
 12729              	.LASF279:
 12730 1041 54494D5F 		.ascii	"TIM_OC2PolarityConfig\000"
 12730      4F433250 
 12730      6F6C6172 
 12730      69747943 
 12730      6F6E6669 
 12731              	.LASF203:
 12732 1057 5F6E6578 		.ascii	"_nextf\000"
 12732      746600
 12733              	.LASF85:
 12734 105e 54494D5F 		.ascii	"TIM_Break\000"
 12734      42726561 
 12734      6B00
 12735              	.LASF96:
 12736 1068 50697463 		.ascii	"Pitch\000"
 12736      6800
 12737              	.LASF109:
 12738 106e 5F5F554C 		.ascii	"__ULong\000"
 12738      6F6E6700 
 12739              	.LASF54:
 12740 1076 42445452 		.ascii	"BDTR\000"
 12740      00
 12741              	.LASF18:
 12742 107b 75696E74 		.ascii	"uint32_t\000"
 12742      33325F74 
 12742      00
 12743              	.LASF297:
 12744 1084 54494D5F 		.ascii	"TIM_CCPreloadControl\000"
 12744      43435072 
 12744      656C6F61 
 12744      64436F6E 
 12744      74726F6C 
 12745              	.LASF164:
 12746 1099 5F726573 		.ascii	"_result\000"
 12746      756C7400 
 12747              	.LASF216:
 12748 10a1 746D7063 		.ascii	"tmpccer\000"
 12748      63657200 
 12749              	.LASF337:
 12750 10a9 54494D5F 		.ascii	"TIM_CtrlPWMOutputs\000"
 12750      4374726C 
 12750      50574D4F 
 12750      75747075 
 12750      747300
 12751              	.LASF100:
 12752 10bc 5F6F6666 		.ascii	"_off_t\000"
 12752      5F7400
 12753              	.LASF243:
 12754 10c3 54494D5F 		.ascii	"TIM_SetIC1Prescaler\000"
 12754      53657449 
 12754      43315072 
 12754      65736361 
ARM GAS  /tmp/ccNus05k.s 			page 291


 12754      6C657200 
 12755              	.LASF359:
 12756 10d7 474E5520 		.ascii	"GNU C11 6.1.1 20160526 -mcpu=cortex-m3 -mthumb -g -"
 12756      43313120 
 12756      362E312E 
 12756      31203230 
 12756      31363035 
 12757 110a 666E6F2D 		.ascii	"fno-common\000"
 12757      636F6D6D 
 12757      6F6E00
 12758              	.LASF183:
 12759 1115 5F616464 		.ascii	"_add\000"
 12759      00
 12760              	.LASF360:
 12761 111a 6C69622F 		.ascii	"lib/src/stm32f10x_tim.c\000"
 12761      7372632F 
 12761      73746D33 
 12761      32663130 
 12761      785F7469 
 12762              	.LASF6:
 12763 1132 73686F72 		.ascii	"short unsigned int\000"
 12763      7420756E 
 12763      7369676E 
 12763      65642069 
 12763      6E7400
 12764              	.LASF118:
 12765 1145 5F5F746D 		.ascii	"__tm_hour\000"
 12765      5F686F75 
 12765      7200
 12766              	.LASF283:
 12767 114f 54494D5F 		.ascii	"TIM_OCClear\000"
 12767      4F43436C 
 12767      65617200 
 12768              	.LASF71:
 12769 115b 54494D5F 		.ascii	"TIM_OCNPolarity\000"
 12769      4F434E50 
 12769      6F6C6172 
 12769      69747900 
 12770              	.LASF44:
 12771 116b 52455345 		.ascii	"RESERVED11\000"
 12771      52564544 
 12771      313100
 12772              	.LASF310:
 12773 1176 746D7073 		.ascii	"tmpsmcr\000"
 12773      6D637200 
 12774              	.LASF199:
 12775 117e 5F6D6273 		.ascii	"_mbsrtowcs_state\000"
 12775      72746F77 
 12775      63735F73 
 12775      74617465 
 12775      00
 12776              	.LASF221:
 12777 118f 5449315F 		.ascii	"TI1_Config\000"
 12777      436F6E66 
 12777      696700
 12778              	.LASF295:
 12779 119a 54494D5F 		.ascii	"TIM_OC2PreloadConfig\000"
ARM GAS  /tmp/ccNus05k.s 			page 292


 12779      4F433250 
 12779      72656C6F 
 12779      6164436F 
 12779      6E666967 
 12780              	.LASF7:
 12781 11af 5F5F696E 		.ascii	"__int32_t\000"
 12781      7433325F 
 12781      7400
 12782              	.LASF222:
 12783 11b9 54494D5F 		.ascii	"TIM_IT\000"
 12783      495400
 12784              	.LASF329:
 12785 11c0 54494D5F 		.ascii	"TIM_DMACmd\000"
 12785      444D4143 
 12785      6D6400
 12786              	.LASF126:
 12787 11cb 5F666E61 		.ascii	"_fnargs\000"
 12787      72677300 
 12788              	.LASF124:
 12789 11d3 5F5F746D 		.ascii	"__tm_isdst\000"
 12789      5F697364 
 12789      737400
 12790              	.LASF258:
 12791 11de 54494D5F 		.ascii	"TIM_SelectSlaveMode\000"
 12791      53656C65 
 12791      6374536C 
 12791      6176654D 
 12791      6F646500 
 12792              	.LASF75:
 12793 11f2 54494D5F 		.ascii	"TIM_Channel\000"
 12793      4368616E 
 12793      6E656C00 
 12794              	.LASF117:
 12795 11fe 5F5F746D 		.ascii	"__tm_min\000"
 12795      5F6D696E 
 12795      00
 12796              	.LASF346:
 12797 1207 54494D5F 		.ascii	"TIM_TimeBaseInitStruct\000"
 12797      54696D65 
 12797      42617365 
 12797      496E6974 
 12797      53747275 
 12798              	.LASF196:
 12799 121e 5F676574 		.ascii	"_getdate_err\000"
 12799      64617465 
 12799      5F657272 
 12799      00
 12800              	.LASF259:
 12801 122b 54494D5F 		.ascii	"TIM_SlaveMode\000"
 12801      536C6176 
 12801      654D6F64 
 12801      6500
 12802              	.LASF65:
 12803 1239 54494D5F 		.ascii	"TIM_TimeBaseInitTypeDef\000"
 12803      54696D65 
 12803      42617365 
 12803      496E6974 
ARM GAS  /tmp/ccNus05k.s 			page 293


 12803      54797065 
 12804              	.LASF308:
 12805 1251 54494D5F 		.ascii	"TIM_IC1Polarity\000"
 12805      49433150 
 12805      6F6C6172 
 12805      69747900 
 12806              		.ident	"GCC: (Arch Repository) 6.1.1 20160526"
ARM GAS  /tmp/ccNus05k.s 			page 294


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_tim.c
     /tmp/ccNus05k.s:15     .text:0000000000000000 $t
     /tmp/ccNus05k.s:22     .text:0000000000000000 TIM_DeInit
     /tmp/ccNus05k.s:318    .text:00000000000001ec $d
     /tmp/ccNus05k.s:337    .text:000000000000022c $t
     /tmp/ccNus05k.s:344    .text:000000000000022c TIM_TimeBaseInit
     /tmp/ccNus05k.s:494    .text:00000000000002fc $d
     /tmp/ccNus05k.s:507    .text:0000000000000324 $t
     /tmp/ccNus05k.s:514    .text:0000000000000324 TIM_OC1Init
     /tmp/ccNus05k.s:685    .text:0000000000000428 $d
     /tmp/ccNus05k.s:693    .text:000000000000043c $t
     /tmp/ccNus05k.s:700    .text:000000000000043c TIM_OC2Init
     /tmp/ccNus05k.s:870    .text:0000000000000544 $d
     /tmp/ccNus05k.s:875    .text:000000000000054c $t
     /tmp/ccNus05k.s:882    .text:000000000000054c TIM_OC3Init
     /tmp/ccNus05k.s:1050   .text:0000000000000650 $d
     /tmp/ccNus05k.s:1055   .text:0000000000000658 $t
     /tmp/ccNus05k.s:1062   .text:0000000000000658 TIM_OC4Init
     /tmp/ccNus05k.s:1196   .text:0000000000000720 $d
     /tmp/ccNus05k.s:1201   .text:0000000000000728 $t
     /tmp/ccNus05k.s:1208   .text:0000000000000728 TIM_ICInit
     /tmp/ccNus05k.s:6056   .text:00000000000019d6 TI1_Config
     /tmp/ccNus05k.s:5310   .text:0000000000001766 TIM_SetIC1Prescaler
     /tmp/ccNus05k.s:6206   .text:0000000000001ab8 TI2_Config
     /tmp/ccNus05k.s:5365   .text:000000000000179c TIM_SetIC2Prescaler
     /tmp/ccNus05k.s:6368   .text:0000000000001bac TI3_Config
     /tmp/ccNus05k.s:5422   .text:00000000000017d6 TIM_SetIC3Prescaler
     /tmp/ccNus05k.s:6524   .text:0000000000001c98 TI4_Config
     /tmp/ccNus05k.s:5477   .text:000000000000180c TIM_SetIC4Prescaler
     /tmp/ccNus05k.s:1327   .text:00000000000007d0 TIM_PWMIConfig
     /tmp/ccNus05k.s:1460   .text:0000000000000888 TIM_BDTRConfig
     /tmp/ccNus05k.s:1536   .text:00000000000008d6 TIM_TimeBaseStructInit
     /tmp/ccNus05k.s:1592   .text:0000000000000908 TIM_OCStructInit
     /tmp/ccNus05k.s:1660   .text:000000000000094a TIM_ICStructInit
     /tmp/ccNus05k.s:1716   .text:000000000000097a TIM_BDTRStructInit
     /tmp/ccNus05k.s:1780   .text:00000000000009b6 TIM_Cmd
     /tmp/ccNus05k.s:1842   .text:00000000000009f4 TIM_CtrlPWMOutputs
     /tmp/ccNus05k.s:1905   .text:0000000000000a3e TIM_ITConfig
     /tmp/ccNus05k.s:1973   .text:0000000000000a84 TIM_GenerateEvent
     /tmp/ccNus05k.s:2015   .text:0000000000000aa0 TIM_DMAConfig
     /tmp/ccNus05k.s:2062   .text:0000000000000ac8 TIM_DMACmd
     /tmp/ccNus05k.s:2130   .text:0000000000000b0e TIM_InternalClockConfig
     /tmp/ccNus05k.s:2174   .text:0000000000000b30 TIM_ITRxExternalClockConfig
     /tmp/ccNus05k.s:2606   .text:0000000000000d04 TIM_SelectInputTrigger
     /tmp/ccNus05k.s:2222   .text:0000000000000b5e TIM_TIxExternalClockConfig
     /tmp/ccNus05k.s:2296   .text:0000000000000bba TIM_ETRClockMode1Config
     /tmp/ccNus05k.s:2427   .text:0000000000000c56 TIM_ETRConfig
     /tmp/ccNus05k.s:2371   .text:0000000000000c18 TIM_ETRClockMode2Config
     /tmp/ccNus05k.s:2500   .text:0000000000000ca8 TIM_PrescalerConfig
     /tmp/ccNus05k.s:2548   .text:0000000000000cce TIM_CounterModeConfig
     /tmp/ccNus05k.s:2664   .text:0000000000000d3a TIM_EncoderInterfaceConfig
     /tmp/ccNus05k.s:2775   .text:0000000000000dd0 TIM_ForcedOC1Config
     /tmp/ccNus05k.s:2833   .text:0000000000000e06 TIM_ForcedOC2Config
     /tmp/ccNus05k.s:2893   .text:0000000000000e40 TIM_ForcedOC3Config
     /tmp/ccNus05k.s:2951   .text:0000000000000e76 TIM_ForcedOC4Config
     /tmp/ccNus05k.s:3011   .text:0000000000000eb0 TIM_ARRPreloadConfig
ARM GAS  /tmp/ccNus05k.s 			page 295


     /tmp/ccNus05k.s:3073   .text:0000000000000eee TIM_SelectCOM
     /tmp/ccNus05k.s:3135   .text:0000000000000f2c TIM_SelectCCDMA
     /tmp/ccNus05k.s:3197   .text:0000000000000f6a TIM_CCPreloadControl
     /tmp/ccNus05k.s:3259   .text:0000000000000fa8 TIM_OC1PreloadConfig
     /tmp/ccNus05k.s:3317   .text:0000000000000fde TIM_OC2PreloadConfig
     /tmp/ccNus05k.s:3377   .text:0000000000001018 TIM_OC3PreloadConfig
     /tmp/ccNus05k.s:3435   .text:000000000000104e TIM_OC4PreloadConfig
     /tmp/ccNus05k.s:3495   .text:0000000000001088 TIM_OC1FastConfig
     /tmp/ccNus05k.s:3553   .text:00000000000010be TIM_OC2FastConfig
     /tmp/ccNus05k.s:3613   .text:00000000000010f8 TIM_OC3FastConfig
     /tmp/ccNus05k.s:3671   .text:000000000000112e TIM_OC4FastConfig
     /tmp/ccNus05k.s:3731   .text:0000000000001168 TIM_ClearOC1Ref
     /tmp/ccNus05k.s:3789   .text:000000000000119e TIM_ClearOC2Ref
     /tmp/ccNus05k.s:3849   .text:00000000000011d8 TIM_ClearOC3Ref
     /tmp/ccNus05k.s:3907   .text:000000000000120e TIM_ClearOC4Ref
     /tmp/ccNus05k.s:3967   .text:0000000000001248 TIM_OC1PolarityConfig
     /tmp/ccNus05k.s:4025   .text:000000000000127e TIM_OC1NPolarityConfig
     /tmp/ccNus05k.s:4083   .text:00000000000012b4 TIM_OC2PolarityConfig
     /tmp/ccNus05k.s:4143   .text:00000000000012ee TIM_OC2NPolarityConfig
     /tmp/ccNus05k.s:4203   .text:0000000000001328 TIM_OC3PolarityConfig
     /tmp/ccNus05k.s:4263   .text:0000000000001362 TIM_OC3NPolarityConfig
     /tmp/ccNus05k.s:4323   .text:000000000000139c TIM_OC4PolarityConfig
     /tmp/ccNus05k.s:4383   .text:00000000000013d6 TIM_CCxCmd
     /tmp/ccNus05k.s:4454   .text:000000000000142a TIM_CCxNCmd
     /tmp/ccNus05k.s:4525   .text:000000000000147e TIM_SelectOCxM
     /tmp/ccNus05k.s:4652   .text:000000000000152a TIM_UpdateDisableConfig
     /tmp/ccNus05k.s:4714   .text:0000000000001568 TIM_UpdateRequestConfig
     /tmp/ccNus05k.s:4776   .text:00000000000015a6 TIM_SelectHallSensor
     /tmp/ccNus05k.s:4838   .text:00000000000015e4 TIM_SelectOnePulseMode
     /tmp/ccNus05k.s:4893   .text:000000000000161a TIM_SelectOutputTrigger
     /tmp/ccNus05k.s:4948   .text:0000000000001650 TIM_SelectSlaveMode
     /tmp/ccNus05k.s:5003   .text:0000000000001686 TIM_SelectMasterSlaveMode
     /tmp/ccNus05k.s:5058   .text:00000000000016bc TIM_SetCounter
     /tmp/ccNus05k.s:5100   .text:00000000000016d8 TIM_SetAutoreload
     /tmp/ccNus05k.s:5142   .text:00000000000016f4 TIM_SetCompare1
     /tmp/ccNus05k.s:5184   .text:0000000000001710 TIM_SetCompare2
     /tmp/ccNus05k.s:5226   .text:000000000000172c TIM_SetCompare3
     /tmp/ccNus05k.s:5268   .text:0000000000001748 TIM_SetCompare4
     /tmp/ccNus05k.s:5534   .text:0000000000001846 TIM_SetClockDivision
     /tmp/ccNus05k.s:5589   .text:000000000000187c TIM_GetCapture1
     /tmp/ccNus05k.s:5629   .text:0000000000001894 TIM_GetCapture2
     /tmp/ccNus05k.s:5669   .text:00000000000018ac TIM_GetCapture3
     /tmp/ccNus05k.s:5709   .text:00000000000018c4 TIM_GetCapture4
     /tmp/ccNus05k.s:5749   .text:00000000000018de TIM_GetCounter
     /tmp/ccNus05k.s:5789   .text:00000000000018f6 TIM_GetPrescaler
     /tmp/ccNus05k.s:5829   .text:000000000000190e TIM_GetFlagStatus
     /tmp/ccNus05k.s:5890   .text:0000000000001944 TIM_ClearFlag
     /tmp/ccNus05k.s:5934   .text:0000000000001964 TIM_GetITStatus
     /tmp/ccNus05k.s:6013   .text:00000000000019b6 TIM_ClearITPendingBit
     /tmp/ccNus05k.s:6192   .text:0000000000001aa4 $d
     /tmp/ccNus05k.s:6200   .text:0000000000001ab8 $t
     /tmp/ccNus05k.s:6354   .text:0000000000001b98 $d
     /tmp/ccNus05k.s:6362   .text:0000000000001bac $t
     /tmp/ccNus05k.s:6510   .text:0000000000001c84 $d
     /tmp/ccNus05k.s:6518   .text:0000000000001c98 $t
     /tmp/ccNus05k.s:6674   .text:0000000000001d7c $d
                     .debug_frame:0000000000000010 $d
ARM GAS  /tmp/ccNus05k.s 			page 296



UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
